
led_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c44  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08006dcc  08006dcc  00016dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006de8  08006de8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006de8  08006de8  00016de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006df0  08006df0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006df0  08006df0  00016df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006df4  08006df4  00016df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000810  20000090  08006e88  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  08006e88  000208a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f3c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a0b  00000000  00000000  00039ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0003da08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  0003eb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a55  00000000  00000000  0003fab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c5a  00000000  00000000  0006350d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb694  00000000  00000000  0007a167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001457fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004878  00000000  00000000  00145850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006db4 	.word	0x08006db4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08006db4 	.word	0x08006db4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fbf8 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f816 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f92a 	bl	8000724 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f894 	bl	80005fc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f8c0 	bl	8000658 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f8ee 	bl	80006b8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004dc:	f006 f8b0 	bl	8006640 <MX_USB_HOST_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    //MX_USB_HOST_Process();
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80004e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <main+0x34>)
 80004e6:	f000 ff44 	bl	8001372 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 80004ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ee:	f000 fc55 	bl	8000d9c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80004f2:	e7f5      	b.n	80004e0 <main+0x20>
 80004f4:	40020c00 	.word	0x40020c00

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b098      	sub	sp, #96	; 0x60
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000502:	2230      	movs	r2, #48	; 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f006 fb84 	bl	8006c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 031c 	add.w	r3, r7, #28
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <SystemClock_Config+0xfc>)
 8000530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000532:	4a30      	ldr	r2, [pc, #192]	; (80005f4 <SystemClock_Config+0xfc>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000538:	6413      	str	r3, [r2, #64]	; 0x40
 800053a:	4b2e      	ldr	r3, [pc, #184]	; (80005f4 <SystemClock_Config+0xfc>)
 800053c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000546:	2300      	movs	r3, #0
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	4b2b      	ldr	r3, [pc, #172]	; (80005f8 <SystemClock_Config+0x100>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a2a      	ldr	r2, [pc, #168]	; (80005f8 <SystemClock_Config+0x100>)
 8000550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000554:	6013      	str	r3, [r2, #0]
 8000556:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <SystemClock_Config+0x100>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000562:	2301      	movs	r3, #1
 8000564:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000570:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000574:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000576:	2308      	movs	r3, #8
 8000578:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800057a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800057e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000584:	2307      	movs	r3, #7
 8000586:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800058c:	4618      	mov	r0, r3
 800058e:	f003 fa43 	bl	8003a18 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000598:	f000 f9c2 	bl	8000920 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b4:	f107 031c 	add.w	r3, r7, #28
 80005b8:	2105      	movs	r1, #5
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fca4 	bl	8003f08 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005c6:	f000 f9ab 	bl	8000920 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005ca:	2301      	movs	r3, #1
 80005cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005ce:	23c0      	movs	r3, #192	; 0xc0
 80005d0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 fe7c 	bl	80042d8 <HAL_RCCEx_PeriphCLKConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80005e6:	f000 f99b 	bl	8000920 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3760      	adds	r7, #96	; 0x60
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_I2C1_Init+0x50>)
 8000602:	4a13      	ldr	r2, [pc, #76]	; (8000650 <MX_I2C1_Init+0x54>)
 8000604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_I2C1_Init+0x50>)
 8000608:	4a12      	ldr	r2, [pc, #72]	; (8000654 <MX_I2C1_Init+0x58>)
 800060a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_I2C1_Init+0x50>)
 800061a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800061e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_I2C1_Init+0x50>)
 800063a:	f002 fc09 	bl	8002e50 <HAL_I2C_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000644:	f000 f96c 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000bc 	.word	0x200000bc
 8000650:	40005400 	.word	0x40005400
 8000654:	000186a0 	.word	0x000186a0

08000658 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_I2S3_Init+0x54>)
 800065e:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <MX_I2S3_Init+0x58>)
 8000660:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_I2S3_Init+0x54>)
 8000664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000668:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_I2S3_Init+0x54>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_I2S3_Init+0x54>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_I2S3_Init+0x54>)
 8000678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800067c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_I2S3_Init+0x54>)
 8000680:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <MX_I2S3_Init+0x5c>)
 8000682:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_I2S3_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_I2S3_Init+0x54>)
 800068c:	2200      	movs	r2, #0
 800068e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_I2S3_Init+0x54>)
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_I2S3_Init+0x54>)
 8000698:	f002 fd1e 	bl	80030d8 <HAL_I2S_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006a2:	f000 f93d 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000168 	.word	0x20000168
 80006b0:	40003c00 	.word	0x40003c00
 80006b4:	00017700 	.word	0x00017700

080006b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_SPI1_Init+0x64>)
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <MX_SPI1_Init+0x68>)
 80006c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_SPI1_Init+0x64>)
 80006c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_SPI1_Init+0x64>)
 80006e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_SPI1_Init+0x64>)
 8000704:	220a      	movs	r2, #10
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_SPI1_Init+0x64>)
 800070a:	f003 ff25 	bl	8004558 <HAL_SPI_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000714:	f000 f904 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000110 	.word	0x20000110
 8000720:	40013000 	.word	0x40013000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4b72      	ldr	r3, [pc, #456]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a71      	ldr	r2, [pc, #452]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b6f      	ldr	r3, [pc, #444]	; (8000908 <MX_GPIO_Init+0x1e4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b6b      	ldr	r3, [pc, #428]	; (8000908 <MX_GPIO_Init+0x1e4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a6a      	ldr	r2, [pc, #424]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b68      	ldr	r3, [pc, #416]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b64      	ldr	r3, [pc, #400]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a63      	ldr	r2, [pc, #396]	; (8000908 <MX_GPIO_Init+0x1e4>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b61      	ldr	r3, [pc, #388]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b5d      	ldr	r3, [pc, #372]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a5c      	ldr	r2, [pc, #368]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b5a      	ldr	r3, [pc, #360]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b56      	ldr	r3, [pc, #344]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a55      	ldr	r2, [pc, #340]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b53      	ldr	r3, [pc, #332]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b4f      	ldr	r3, [pc, #316]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a4e      	ldr	r2, [pc, #312]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b4c      	ldr	r3, [pc, #304]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	4849      	ldr	r0, [pc, #292]	; (800090c <MX_GPIO_Init+0x1e8>)
 80007e8:	f000 fdaa 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	4847      	ldr	r0, [pc, #284]	; (8000910 <MX_GPIO_Init+0x1ec>)
 80007f2:	f000 fda5 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f6:	2200      	movs	r2, #0
 80007f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007fc:	4845      	ldr	r0, [pc, #276]	; (8000914 <MX_GPIO_Init+0x1f0>)
 80007fe:	f000 fd9f 	bl	8001340 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000802:	2308      	movs	r3, #8
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	483c      	ldr	r0, [pc, #240]	; (800090c <MX_GPIO_Init+0x1e8>)
 800081a:	f000 fbf5 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081e:	2301      	movs	r3, #1
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4836      	ldr	r0, [pc, #216]	; (8000910 <MX_GPIO_Init+0x1ec>)
 8000836:	f000 fbe7 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800084a:	2305      	movs	r3, #5
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	482e      	ldr	r0, [pc, #184]	; (8000910 <MX_GPIO_Init+0x1ec>)
 8000856:	f000 fbd7 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085a:	2301      	movs	r3, #1
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800085e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	482a      	ldr	r0, [pc, #168]	; (8000918 <MX_GPIO_Init+0x1f4>)
 8000870:	f000 fbca 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000874:	2304      	movs	r3, #4
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4825      	ldr	r0, [pc, #148]	; (800091c <MX_GPIO_Init+0x1f8>)
 8000888:	f000 fbbe 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800088c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089e:	2305      	movs	r3, #5
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	481c      	ldr	r0, [pc, #112]	; (800091c <MX_GPIO_Init+0x1f8>)
 80008aa:	f000 fbad 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ae:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008b2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4813      	ldr	r0, [pc, #76]	; (8000914 <MX_GPIO_Init+0x1f0>)
 80008c8:	f000 fb9e 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008cc:	2320      	movs	r3, #32
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_GPIO_Init+0x1f0>)
 80008e0:	f000 fb92 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008e8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_GPIO_Init+0x1e8>)
 80008fa:	f000 fb85 	bl	8001008 <HAL_GPIO_Init>

}
 80008fe:	bf00      	nop
 8000900:	3730      	adds	r7, #48	; 0x30
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40021000 	.word	0x40021000
 8000910:	40020800 	.word	0x40020800
 8000914:	40020c00 	.word	0x40020c00
 8000918:	40020000 	.word	0x40020000
 800091c:	40020400 	.word	0x40020400

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	e7fe      	b.n	8000928 <Error_Handler+0x8>
	...

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <HAL_MspInit+0x4c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6453      	str	r3, [r2, #68]	; 0x44
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800096a:	2007      	movs	r0, #7
 800096c:	f000 fb0a 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <HAL_I2C_MspInit+0x84>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12c      	bne.n	80009f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_I2C_MspInit+0x88>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <HAL_I2C_MspInit+0x88>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_I2C_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ba:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c0:	2312      	movs	r3, #18
 80009c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009cc:	2304      	movs	r3, #4
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	480c      	ldr	r0, [pc, #48]	; (8000a08 <HAL_I2C_MspInit+0x8c>)
 80009d8:	f000 fb16 	bl	8001008 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_I2C_MspInit+0x88>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_I2C_MspInit+0x88>)
 80009e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <HAL_I2C_MspInit+0x88>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	; 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40005400 	.word	0x40005400
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020400 	.word	0x40020400

08000a0c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a28      	ldr	r2, [pc, #160]	; (8000acc <HAL_I2S_MspInit+0xc0>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d14a      	bne.n	8000ac4 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <HAL_I2S_MspInit+0xc4>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a26      	ldr	r2, [pc, #152]	; (8000ad0 <HAL_I2S_MspInit+0xc4>)
 8000a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <HAL_I2S_MspInit+0xc4>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <HAL_I2S_MspInit+0xc4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a1f      	ldr	r2, [pc, #124]	; (8000ad0 <HAL_I2S_MspInit+0xc4>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <HAL_I2S_MspInit+0xc4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <HAL_I2S_MspInit+0xc4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a18      	ldr	r2, [pc, #96]	; (8000ad0 <HAL_I2S_MspInit+0xc4>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <HAL_I2S_MspInit+0xc4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a82:	2310      	movs	r3, #16
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a92:	2306      	movs	r3, #6
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <HAL_I2S_MspInit+0xc8>)
 8000a9e:	f000 fab3 	bl	8001008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aa2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab4:	2306      	movs	r3, #6
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <HAL_I2S_MspInit+0xcc>)
 8000ac0:	f000 faa2 	bl	8001008 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40003c00 	.word	0x40003c00
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40020800 	.word	0x40020800

08000adc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a19      	ldr	r2, [pc, #100]	; (8000b60 <HAL_SPI_MspInit+0x84>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d12b      	bne.n	8000b56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_SPI_MspInit+0x88>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <HAL_SPI_MspInit+0x88>)
 8000b08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_SPI_MspInit+0x88>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <HAL_SPI_MspInit+0x88>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a10      	ldr	r2, [pc, #64]	; (8000b64 <HAL_SPI_MspInit+0x88>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_SPI_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b36:	23e0      	movs	r3, #224	; 0xe0
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b46:	2305      	movs	r3, #5
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <HAL_SPI_MspInit+0x8c>)
 8000b52:	f000 fa59 	bl	8001008 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	; 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40013000 	.word	0x40013000
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb8:	f000 f8d0 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <OTG_FS_IRQHandler+0x10>)
 8000bc6:	f000 fe59 	bl	800187c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000058c 	.word	0x2000058c

08000bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bdc:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <_sbrk+0x5c>)
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <_sbrk+0x60>)
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <_sbrk+0x64>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <_sbrk+0x68>)
 8000bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d207      	bcs.n	8000c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c04:	f005 ffcc 	bl	8006ba0 <__errno>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c12:	e009      	b.n	8000c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1a:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <_sbrk+0x64>)
 8000c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c26:	68fb      	ldr	r3, [r7, #12]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20020000 	.word	0x20020000
 8000c34:	00000400 	.word	0x00000400
 8000c38:	200000ac 	.word	0x200000ac
 8000c3c:	200008a0 	.word	0x200008a0

08000c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SystemInit+0x20>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <SystemInit+0x20>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c6a:	490e      	ldr	r1, [pc, #56]	; (8000ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c80:	4c0b      	ldr	r4, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c8e:	f7ff ffd7 	bl	8000c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f005 ff8b 	bl	8006bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fc13 	bl	80004c0 <main>
  bx  lr    
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ca8:	08006df8 	.word	0x08006df8
  ldr r2, =_sbss
 8000cac:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000cb0:	200008a0 	.word	0x200008a0

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <HAL_Init+0x40>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_Init+0x40>)
 8000cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_Init+0x40>)
 8000cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f94f 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 f808 	bl	8000cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff fe1e 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023c00 	.word	0x40023c00

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_InitTick+0x54>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_InitTick+0x58>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f967 	bl	8000fee <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00e      	b.n	8000d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d38:	f000 f92f 	bl	8000f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <HAL_InitTick+0x5c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000004 	.word	0x20000004

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	200001b0 	.word	0x200001b0

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	200001b0 	.word	0x200001b0

08000d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f7ff ffee 	bl	8000d84 <HAL_GetTick>
 8000da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000db4:	d005      	beq.n	8000dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_Delay+0x44>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dc2:	bf00      	nop
 8000dc4:	f7ff ffde 	bl	8000d84 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d8f7      	bhi.n	8000dc4 <HAL_Delay+0x28>
  {
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008

08000de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e00:	4013      	ands	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <__NVIC_GetPriorityGrouping+0x18>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	f003 0307 	and.w	r3, r3, #7
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	db0b      	blt.n	8000e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f003 021f 	and.w	r2, r3, #31
 8000e60:	4907      	ldr	r1, [pc, #28]	; (8000e80 <__NVIC_EnableIRQ+0x38>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	095b      	lsrs	r3, r3, #5
 8000e68:	2001      	movs	r0, #1
 8000e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000e100 	.word	0xe000e100

08000e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	db0a      	blt.n	8000eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	490c      	ldr	r1, [pc, #48]	; (8000ed0 <__NVIC_SetPriority+0x4c>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	0112      	lsls	r2, r2, #4
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eac:	e00a      	b.n	8000ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4908      	ldr	r1, [pc, #32]	; (8000ed4 <__NVIC_SetPriority+0x50>)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	f003 030f 	and.w	r3, r3, #15
 8000eba:	3b04      	subs	r3, #4
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	761a      	strb	r2, [r3, #24]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000e100 	.word	0xe000e100
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f1c3 0307 	rsb	r3, r3, #7
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	bf28      	it	cs
 8000ef6:	2304      	movcs	r3, #4
 8000ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3304      	adds	r3, #4
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d902      	bls.n	8000f08 <NVIC_EncodePriority+0x30>
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3b03      	subs	r3, #3
 8000f06:	e000      	b.n	8000f0a <NVIC_EncodePriority+0x32>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43da      	mvns	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	43d9      	mvns	r1, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	4313      	orrs	r3, r2
         );
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3724      	adds	r7, #36	; 0x24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f50:	d301      	bcc.n	8000f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00f      	b.n	8000f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <SysTick_Config+0x40>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5e:	210f      	movs	r1, #15
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f64:	f7ff ff8e 	bl	8000e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <SysTick_Config+0x40>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <SysTick_Config+0x40>)
 8000f70:	2207      	movs	r2, #7
 8000f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff29 	bl	8000de4 <__NVIC_SetPriorityGrouping>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fac:	f7ff ff3e 	bl	8000e2c <__NVIC_GetPriorityGrouping>
 8000fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	6978      	ldr	r0, [r7, #20]
 8000fb8:	f7ff ff8e 	bl	8000ed8 <NVIC_EncodePriority>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff5d 	bl	8000e84 <__NVIC_SetPriority>
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff31 	bl	8000e48 <__NVIC_EnableIRQ>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ffa2 	bl	8000f40 <SysTick_Config>
 8000ffc:	4603      	mov	r3, r0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	e16b      	b.n	80012fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001024:	2201      	movs	r2, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	429a      	cmp	r2, r3
 800103e:	f040 815a 	bne.w	80012f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	2b01      	cmp	r3, #1
 800104c:	d005      	beq.n	800105a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001056:	2b02      	cmp	r3, #2
 8001058:	d130      	bne.n	80010bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001090:	2201      	movs	r2, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	f003 0201 	and.w	r2, r3, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d017      	beq.n	80010f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d123      	bne.n	800114c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	220f      	movs	r2, #15
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	691a      	ldr	r2, [r3, #16]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	08da      	lsrs	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3208      	adds	r2, #8
 8001146:	69b9      	ldr	r1, [r7, #24]
 8001148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0203 	and.w	r2, r3, #3
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80b4 	beq.w	80012f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b60      	ldr	r3, [pc, #384]	; (8001314 <HAL_GPIO_Init+0x30c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a5f      	ldr	r2, [pc, #380]	; (8001314 <HAL_GPIO_Init+0x30c>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b5d      	ldr	r3, [pc, #372]	; (8001314 <HAL_GPIO_Init+0x30c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011aa:	4a5b      	ldr	r2, [pc, #364]	; (8001318 <HAL_GPIO_Init+0x310>)
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	3302      	adds	r3, #2
 80011b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	220f      	movs	r2, #15
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a52      	ldr	r2, [pc, #328]	; (800131c <HAL_GPIO_Init+0x314>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d02b      	beq.n	800122e <HAL_GPIO_Init+0x226>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a51      	ldr	r2, [pc, #324]	; (8001320 <HAL_GPIO_Init+0x318>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d025      	beq.n	800122a <HAL_GPIO_Init+0x222>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a50      	ldr	r2, [pc, #320]	; (8001324 <HAL_GPIO_Init+0x31c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d01f      	beq.n	8001226 <HAL_GPIO_Init+0x21e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4f      	ldr	r2, [pc, #316]	; (8001328 <HAL_GPIO_Init+0x320>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d019      	beq.n	8001222 <HAL_GPIO_Init+0x21a>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4e      	ldr	r2, [pc, #312]	; (800132c <HAL_GPIO_Init+0x324>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d013      	beq.n	800121e <HAL_GPIO_Init+0x216>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4d      	ldr	r2, [pc, #308]	; (8001330 <HAL_GPIO_Init+0x328>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00d      	beq.n	800121a <HAL_GPIO_Init+0x212>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4c      	ldr	r2, [pc, #304]	; (8001334 <HAL_GPIO_Init+0x32c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d007      	beq.n	8001216 <HAL_GPIO_Init+0x20e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4b      	ldr	r2, [pc, #300]	; (8001338 <HAL_GPIO_Init+0x330>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <HAL_GPIO_Init+0x20a>
 800120e:	2307      	movs	r3, #7
 8001210:	e00e      	b.n	8001230 <HAL_GPIO_Init+0x228>
 8001212:	2308      	movs	r3, #8
 8001214:	e00c      	b.n	8001230 <HAL_GPIO_Init+0x228>
 8001216:	2306      	movs	r3, #6
 8001218:	e00a      	b.n	8001230 <HAL_GPIO_Init+0x228>
 800121a:	2305      	movs	r3, #5
 800121c:	e008      	b.n	8001230 <HAL_GPIO_Init+0x228>
 800121e:	2304      	movs	r3, #4
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x228>
 8001222:	2303      	movs	r3, #3
 8001224:	e004      	b.n	8001230 <HAL_GPIO_Init+0x228>
 8001226:	2302      	movs	r3, #2
 8001228:	e002      	b.n	8001230 <HAL_GPIO_Init+0x228>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_GPIO_Init+0x228>
 800122e:	2300      	movs	r3, #0
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	f002 0203 	and.w	r2, r2, #3
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	4093      	lsls	r3, r2
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001240:	4935      	ldr	r1, [pc, #212]	; (8001318 <HAL_GPIO_Init+0x310>)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124e:	4b3b      	ldr	r3, [pc, #236]	; (800133c <HAL_GPIO_Init+0x334>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001272:	4a32      	ldr	r2, [pc, #200]	; (800133c <HAL_GPIO_Init+0x334>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001278:	4b30      	ldr	r3, [pc, #192]	; (800133c <HAL_GPIO_Init+0x334>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800129c:	4a27      	ldr	r2, [pc, #156]	; (800133c <HAL_GPIO_Init+0x334>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <HAL_GPIO_Init+0x334>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c6:	4a1d      	ldr	r2, [pc, #116]	; (800133c <HAL_GPIO_Init+0x334>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_GPIO_Init+0x334>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f0:	4a12      	ldr	r2, [pc, #72]	; (800133c <HAL_GPIO_Init+0x334>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	f67f ae90 	bls.w	8001024 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40013800 	.word	0x40013800
 800131c:	40020000 	.word	0x40020000
 8001320:	40020400 	.word	0x40020400
 8001324:	40020800 	.word	0x40020800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40021000 	.word	0x40021000
 8001330:	40021400 	.word	0x40021400
 8001334:	40021800 	.word	0x40021800
 8001338:	40021c00 	.word	0x40021c00
 800133c:	40013c00 	.word	0x40013c00

08001340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
 800134c:	4613      	mov	r3, r2
 800134e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001350:	787b      	ldrb	r3, [r7, #1]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800135c:	e003      	b.n	8001366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	041a      	lsls	r2, r3, #16
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	619a      	str	r2, [r3, #24]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001372:	b480      	push	{r7}
 8001374:	b085      	sub	sp, #20
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	460b      	mov	r3, r1
 800137c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001384:	887a      	ldrh	r2, [r7, #2]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4013      	ands	r3, r2
 800138a:	041a      	lsls	r2, r3, #16
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	43d9      	mvns	r1, r3
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	400b      	ands	r3, r1
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	619a      	str	r2, [r3, #24]
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a8:	b08f      	sub	sp, #60	; 0x3c
 80013aa:	af0a      	add	r7, sp, #40	; 0x28
 80013ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e054      	b.n	8001462 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d106      	bne.n	80013d8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f005 f988 	bl	80066e8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2203      	movs	r2, #3
 80013dc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 f9a9 	bl	800474e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	687e      	ldr	r6, [r7, #4]
 8001404:	466d      	mov	r5, sp
 8001406:	f106 0410 	add.w	r4, r6, #16
 800140a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001412:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001416:	e885 0003 	stmia.w	r5, {r0, r1}
 800141a:	1d33      	adds	r3, r6, #4
 800141c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800141e:	6838      	ldr	r0, [r7, #0]
 8001420:	f003 f923 	bl	800466a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	4618      	mov	r0, r3
 800142c:	f003 f9a0 	bl	8004770 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	687e      	ldr	r6, [r7, #4]
 8001438:	466d      	mov	r5, sp
 800143a:	f106 0410 	add.w	r4, r6, #16
 800143e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001446:	e894 0003 	ldmia.w	r4, {r0, r1}
 800144a:	e885 0003 	stmia.w	r5, {r0, r1}
 800144e:	1d33      	adds	r3, r6, #4
 8001450:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001452:	6838      	ldr	r0, [r7, #0]
 8001454:	f003 fb06 	bl	8004a64 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800146a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800146a:	b590      	push	{r4, r7, lr}
 800146c:	b089      	sub	sp, #36	; 0x24
 800146e:	af04      	add	r7, sp, #16
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	4608      	mov	r0, r1
 8001474:	4611      	mov	r1, r2
 8001476:	461a      	mov	r2, r3
 8001478:	4603      	mov	r3, r0
 800147a:	70fb      	strb	r3, [r7, #3]
 800147c:	460b      	mov	r3, r1
 800147e:	70bb      	strb	r3, [r7, #2]
 8001480:	4613      	mov	r3, r2
 8001482:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800148a:	2b01      	cmp	r3, #1
 800148c:	d101      	bne.n	8001492 <HAL_HCD_HC_Init+0x28>
 800148e:	2302      	movs	r3, #2
 8001490:	e076      	b.n	8001580 <HAL_HCD_HC_Init+0x116>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	212c      	movs	r1, #44	; 0x2c
 80014a0:	fb01 f303 	mul.w	r3, r1, r3
 80014a4:	4413      	add	r3, r2
 80014a6:	333d      	adds	r3, #61	; 0x3d
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	212c      	movs	r1, #44	; 0x2c
 80014b2:	fb01 f303 	mul.w	r3, r1, r3
 80014b6:	4413      	add	r3, r2
 80014b8:	3338      	adds	r3, #56	; 0x38
 80014ba:	787a      	ldrb	r2, [r7, #1]
 80014bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	212c      	movs	r1, #44	; 0x2c
 80014c4:	fb01 f303 	mul.w	r3, r1, r3
 80014c8:	4413      	add	r3, r2
 80014ca:	3340      	adds	r3, #64	; 0x40
 80014cc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014ce:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	212c      	movs	r1, #44	; 0x2c
 80014d6:	fb01 f303 	mul.w	r3, r1, r3
 80014da:	4413      	add	r3, r2
 80014dc:	3339      	adds	r3, #57	; 0x39
 80014de:	78fa      	ldrb	r2, [r7, #3]
 80014e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	212c      	movs	r1, #44	; 0x2c
 80014e8:	fb01 f303 	mul.w	r3, r1, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	333f      	adds	r3, #63	; 0x3f
 80014f0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	78ba      	ldrb	r2, [r7, #2]
 80014fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80014fe:	b2d0      	uxtb	r0, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	212c      	movs	r1, #44	; 0x2c
 8001504:	fb01 f303 	mul.w	r3, r1, r3
 8001508:	4413      	add	r3, r2
 800150a:	333a      	adds	r3, #58	; 0x3a
 800150c:	4602      	mov	r2, r0
 800150e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001510:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001514:	2b00      	cmp	r3, #0
 8001516:	da09      	bge.n	800152c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	212c      	movs	r1, #44	; 0x2c
 800151e:	fb01 f303 	mul.w	r3, r1, r3
 8001522:	4413      	add	r3, r2
 8001524:	333b      	adds	r3, #59	; 0x3b
 8001526:	2201      	movs	r2, #1
 8001528:	701a      	strb	r2, [r3, #0]
 800152a:	e008      	b.n	800153e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800152c:	78fb      	ldrb	r3, [r7, #3]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	212c      	movs	r1, #44	; 0x2c
 8001532:	fb01 f303 	mul.w	r3, r1, r3
 8001536:	4413      	add	r3, r2
 8001538:	333b      	adds	r3, #59	; 0x3b
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	212c      	movs	r1, #44	; 0x2c
 8001544:	fb01 f303 	mul.w	r3, r1, r3
 8001548:	4413      	add	r3, r2
 800154a:	333c      	adds	r3, #60	; 0x3c
 800154c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001550:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	787c      	ldrb	r4, [r7, #1]
 8001558:	78ba      	ldrb	r2, [r7, #2]
 800155a:	78f9      	ldrb	r1, [r7, #3]
 800155c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800155e:	9302      	str	r3, [sp, #8]
 8001560:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	f897 3020 	ldrb.w	r3, [r7, #32]
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	4623      	mov	r3, r4
 800156e:	f003 fbc9 	bl	8004d04 <USB_HC_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	bd90      	pop	{r4, r7, pc}

08001588 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <HAL_HCD_HC_Halt+0x1e>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e00f      	b.n	80015c6 <HAL_HCD_HC_Halt+0x3e>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	78fa      	ldrb	r2, [r7, #3]
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 fe05 	bl	80051c6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	70fb      	strb	r3, [r7, #3]
 80015e2:	460b      	mov	r3, r1
 80015e4:	70bb      	strb	r3, [r7, #2]
 80015e6:	4613      	mov	r3, r2
 80015e8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	212c      	movs	r1, #44	; 0x2c
 80015f0:	fb01 f303 	mul.w	r3, r1, r3
 80015f4:	4413      	add	r3, r2
 80015f6:	333b      	adds	r3, #59	; 0x3b
 80015f8:	78ba      	ldrb	r2, [r7, #2]
 80015fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	212c      	movs	r1, #44	; 0x2c
 8001602:	fb01 f303 	mul.w	r3, r1, r3
 8001606:	4413      	add	r3, r2
 8001608:	333f      	adds	r3, #63	; 0x3f
 800160a:	787a      	ldrb	r2, [r7, #1]
 800160c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800160e:	7c3b      	ldrb	r3, [r7, #16]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d112      	bne.n	800163a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	212c      	movs	r1, #44	; 0x2c
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	4413      	add	r3, r2
 8001620:	3342      	adds	r3, #66	; 0x42
 8001622:	2203      	movs	r2, #3
 8001624:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	212c      	movs	r1, #44	; 0x2c
 800162c:	fb01 f303 	mul.w	r3, r1, r3
 8001630:	4413      	add	r3, r2
 8001632:	333d      	adds	r3, #61	; 0x3d
 8001634:	7f3a      	ldrb	r2, [r7, #28]
 8001636:	701a      	strb	r2, [r3, #0]
 8001638:	e008      	b.n	800164c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	212c      	movs	r1, #44	; 0x2c
 8001640:	fb01 f303 	mul.w	r3, r1, r3
 8001644:	4413      	add	r3, r2
 8001646:	3342      	adds	r3, #66	; 0x42
 8001648:	2202      	movs	r2, #2
 800164a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800164c:	787b      	ldrb	r3, [r7, #1]
 800164e:	2b03      	cmp	r3, #3
 8001650:	f200 80c6 	bhi.w	80017e0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001654:	a201      	add	r2, pc, #4	; (adr r2, 800165c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165a:	bf00      	nop
 800165c:	0800166d 	.word	0x0800166d
 8001660:	080017cd 	.word	0x080017cd
 8001664:	080016d1 	.word	0x080016d1
 8001668:	0800174f 	.word	0x0800174f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800166c:	7c3b      	ldrb	r3, [r7, #16]
 800166e:	2b01      	cmp	r3, #1
 8001670:	f040 80b8 	bne.w	80017e4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001674:	78bb      	ldrb	r3, [r7, #2]
 8001676:	2b00      	cmp	r3, #0
 8001678:	f040 80b4 	bne.w	80017e4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800167c:	8b3b      	ldrh	r3, [r7, #24]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d108      	bne.n	8001694 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	212c      	movs	r1, #44	; 0x2c
 8001688:	fb01 f303 	mul.w	r3, r1, r3
 800168c:	4413      	add	r3, r2
 800168e:	3355      	adds	r3, #85	; 0x55
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	212c      	movs	r1, #44	; 0x2c
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	4413      	add	r3, r2
 80016a0:	3355      	adds	r3, #85	; 0x55
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d109      	bne.n	80016bc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	212c      	movs	r1, #44	; 0x2c
 80016ae:	fb01 f303 	mul.w	r3, r1, r3
 80016b2:	4413      	add	r3, r2
 80016b4:	3342      	adds	r3, #66	; 0x42
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016ba:	e093      	b.n	80017e4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	212c      	movs	r1, #44	; 0x2c
 80016c2:	fb01 f303 	mul.w	r3, r1, r3
 80016c6:	4413      	add	r3, r2
 80016c8:	3342      	adds	r3, #66	; 0x42
 80016ca:	2202      	movs	r2, #2
 80016cc:	701a      	strb	r2, [r3, #0]
      break;
 80016ce:	e089      	b.n	80017e4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80016d0:	78bb      	ldrb	r3, [r7, #2]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d11d      	bne.n	8001712 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016d6:	78fb      	ldrb	r3, [r7, #3]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	212c      	movs	r1, #44	; 0x2c
 80016dc:	fb01 f303 	mul.w	r3, r1, r3
 80016e0:	4413      	add	r3, r2
 80016e2:	3355      	adds	r3, #85	; 0x55
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d109      	bne.n	80016fe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	212c      	movs	r1, #44	; 0x2c
 80016f0:	fb01 f303 	mul.w	r3, r1, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	3342      	adds	r3, #66	; 0x42
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80016fc:	e073      	b.n	80017e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016fe:	78fb      	ldrb	r3, [r7, #3]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	212c      	movs	r1, #44	; 0x2c
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	4413      	add	r3, r2
 800170a:	3342      	adds	r3, #66	; 0x42
 800170c:	2202      	movs	r2, #2
 800170e:	701a      	strb	r2, [r3, #0]
      break;
 8001710:	e069      	b.n	80017e6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	212c      	movs	r1, #44	; 0x2c
 8001718:	fb01 f303 	mul.w	r3, r1, r3
 800171c:	4413      	add	r3, r2
 800171e:	3354      	adds	r3, #84	; 0x54
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d109      	bne.n	800173a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	212c      	movs	r1, #44	; 0x2c
 800172c:	fb01 f303 	mul.w	r3, r1, r3
 8001730:	4413      	add	r3, r2
 8001732:	3342      	adds	r3, #66	; 0x42
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
      break;
 8001738:	e055      	b.n	80017e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	212c      	movs	r1, #44	; 0x2c
 8001740:	fb01 f303 	mul.w	r3, r1, r3
 8001744:	4413      	add	r3, r2
 8001746:	3342      	adds	r3, #66	; 0x42
 8001748:	2202      	movs	r2, #2
 800174a:	701a      	strb	r2, [r3, #0]
      break;
 800174c:	e04b      	b.n	80017e6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800174e:	78bb      	ldrb	r3, [r7, #2]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d11d      	bne.n	8001790 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	212c      	movs	r1, #44	; 0x2c
 800175a:	fb01 f303 	mul.w	r3, r1, r3
 800175e:	4413      	add	r3, r2
 8001760:	3355      	adds	r3, #85	; 0x55
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d109      	bne.n	800177c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	212c      	movs	r1, #44	; 0x2c
 800176e:	fb01 f303 	mul.w	r3, r1, r3
 8001772:	4413      	add	r3, r2
 8001774:	3342      	adds	r3, #66	; 0x42
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800177a:	e034      	b.n	80017e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	212c      	movs	r1, #44	; 0x2c
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	4413      	add	r3, r2
 8001788:	3342      	adds	r3, #66	; 0x42
 800178a:	2202      	movs	r2, #2
 800178c:	701a      	strb	r2, [r3, #0]
      break;
 800178e:	e02a      	b.n	80017e6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	212c      	movs	r1, #44	; 0x2c
 8001796:	fb01 f303 	mul.w	r3, r1, r3
 800179a:	4413      	add	r3, r2
 800179c:	3354      	adds	r3, #84	; 0x54
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d109      	bne.n	80017b8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	212c      	movs	r1, #44	; 0x2c
 80017aa:	fb01 f303 	mul.w	r3, r1, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	3342      	adds	r3, #66	; 0x42
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
      break;
 80017b6:	e016      	b.n	80017e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	212c      	movs	r1, #44	; 0x2c
 80017be:	fb01 f303 	mul.w	r3, r1, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	3342      	adds	r3, #66	; 0x42
 80017c6:	2202      	movs	r2, #2
 80017c8:	701a      	strb	r2, [r3, #0]
      break;
 80017ca:	e00c      	b.n	80017e6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	212c      	movs	r1, #44	; 0x2c
 80017d2:	fb01 f303 	mul.w	r3, r1, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	3342      	adds	r3, #66	; 0x42
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
      break;
 80017de:	e002      	b.n	80017e6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80017e0:	bf00      	nop
 80017e2:	e000      	b.n	80017e6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80017e4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	212c      	movs	r1, #44	; 0x2c
 80017ec:	fb01 f303 	mul.w	r3, r1, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	3344      	adds	r3, #68	; 0x44
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	8b3a      	ldrh	r2, [r7, #24]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	202c      	movs	r0, #44	; 0x2c
 8001800:	fb00 f303 	mul.w	r3, r0, r3
 8001804:	440b      	add	r3, r1
 8001806:	334c      	adds	r3, #76	; 0x4c
 8001808:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	212c      	movs	r1, #44	; 0x2c
 8001810:	fb01 f303 	mul.w	r3, r1, r3
 8001814:	4413      	add	r3, r2
 8001816:	3360      	adds	r3, #96	; 0x60
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	212c      	movs	r1, #44	; 0x2c
 8001822:	fb01 f303 	mul.w	r3, r1, r3
 8001826:	4413      	add	r3, r2
 8001828:	3350      	adds	r3, #80	; 0x50
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	212c      	movs	r1, #44	; 0x2c
 8001834:	fb01 f303 	mul.w	r3, r1, r3
 8001838:	4413      	add	r3, r2
 800183a:	3339      	adds	r3, #57	; 0x39
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	212c      	movs	r1, #44	; 0x2c
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4413      	add	r3, r2
 800184c:	3361      	adds	r3, #97	; 0x61
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	222c      	movs	r2, #44	; 0x2c
 800185a:	fb02 f303 	mul.w	r3, r2, r3
 800185e:	3338      	adds	r3, #56	; 0x38
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	18d1      	adds	r1, r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	f003 fb58 	bl	8004f20 <USB_HC_StartXfer>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop

0800187c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f003 f8a5 	bl	80049e2 <USB_GetMode>
 8001898:	4603      	mov	r3, r0
 800189a:	2b01      	cmp	r3, #1
 800189c:	f040 80f6 	bne.w	8001a8c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 f889 	bl	80049bc <USB_ReadInterrupts>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80ec 	beq.w	8001a8a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 f880 	bl	80049bc <USB_ReadInterrupts>
 80018bc:	4603      	mov	r3, r0
 80018be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018c6:	d104      	bne.n	80018d2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 f870 	bl	80049bc <USB_ReadInterrupts>
 80018dc:	4603      	mov	r3, r0
 80018de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018e6:	d104      	bne.n	80018f2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f003 f860 	bl	80049bc <USB_ReadInterrupts>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001902:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001906:	d104      	bne.n	8001912 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001910:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f003 f850 	bl	80049bc <USB_ReadInterrupts>
 800191c:	4603      	mov	r3, r0
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b02      	cmp	r3, #2
 8001924:	d103      	bne.n	800192e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2202      	movs	r2, #2
 800192c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f003 f842 	bl	80049bc <USB_ReadInterrupts>
 8001938:	4603      	mov	r3, r0
 800193a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800193e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001942:	d11c      	bne.n	800197e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800194c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10f      	bne.n	800197e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800195e:	2110      	movs	r1, #16
 8001960:	6938      	ldr	r0, [r7, #16]
 8001962:	f002 ff51 	bl	8004808 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001966:	6938      	ldr	r0, [r7, #16]
 8001968:	f002 ff72 	bl	8004850 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2101      	movs	r1, #1
 8001972:	4618      	mov	r0, r3
 8001974:	f003 f92a 	bl	8004bcc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f004 ff33 	bl	80067e4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f003 f81a 	bl	80049bc <USB_ReadInterrupts>
 8001988:	4603      	mov	r3, r0
 800198a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800198e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001992:	d102      	bne.n	800199a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f001 f9e7 	bl	8002d68 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 f80c 	bl	80049bc <USB_ReadInterrupts>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d106      	bne.n	80019bc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f004 fefc 	bl	80067ac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2208      	movs	r2, #8
 80019ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 fffb 	bl	80049bc <USB_ReadInterrupts>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	2b10      	cmp	r3, #16
 80019ce:	d101      	bne.n	80019d4 <HAL_HCD_IRQHandler+0x158>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <HAL_HCD_IRQHandler+0x15a>
 80019d4:	2300      	movs	r3, #0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d012      	beq.n	8001a00 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	699a      	ldr	r2, [r3, #24]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0210 	bic.w	r2, r2, #16
 80019e8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f001 f8ea 	bl	8002bc4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	699a      	ldr	r2, [r3, #24]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0210 	orr.w	r2, r2, #16
 80019fe:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 ffd9 	bl	80049bc <USB_ReadInterrupts>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a14:	d13a      	bne.n	8001a8c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 fbc2 	bl	80051a4 <USB_HC_ReadInterrupt>
 8001a20:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	e025      	b.n	8001a74 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d018      	beq.n	8001a6e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	015a      	lsls	r2, r3, #5
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a52:	d106      	bne.n	8001a62 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	4619      	mov	r1, r3
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f88f 	bl	8001b7e <HCD_HC_IN_IRQHandler>
 8001a60:	e005      	b.n	8001a6e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	4619      	mov	r1, r3
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 fcaa 	bl	80023c2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	3301      	adds	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d3d4      	bcc.n	8001a28 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a86:	615a      	str	r2, [r3, #20]
 8001a88:	e000      	b.n	8001a8c <HAL_HCD_IRQHandler+0x210>
      return;
 8001a8a:	bf00      	nop
    }
  }
}
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_HCD_Start+0x16>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e013      	b.n	8001ad0 <HAL_HCD_Start+0x3e>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f003 f8c2 	bl	8004c40 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 fe33 	bl	800472c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_HCD_Stop+0x16>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e00d      	b.n	8001b0a <HAL_HCD_Stop+0x32>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fcbc 	bl	8005478 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	212c      	movs	r1, #44	; 0x2c
 8001b24:	fb01 f303 	mul.w	r3, r1, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	3360      	adds	r3, #96	; 0x60
 8001b2c:	781b      	ldrb	r3, [r3, #0]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	460b      	mov	r3, r1
 8001b44:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	212c      	movs	r1, #44	; 0x2c
 8001b4c:	fb01 f303 	mul.w	r3, r1, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	3350      	adds	r3, #80	; 0x50
 8001b54:	681b      	ldr	r3, [r3, #0]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 f8b6 	bl	8004ce0 <USB_GetCurrentFrame>
 8001b74:	4603      	mov	r3, r0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	015a      	lsls	r2, r3, #5
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d119      	bne.n	8001be2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	015a      	lsls	r2, r3, #5
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	015a      	lsls	r2, r3, #5
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	0151      	lsls	r1, r2, #5
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	440a      	add	r2, r1
 8001bd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bda:	f043 0302 	orr.w	r3, r3, #2
 8001bde:	60d3      	str	r3, [r2, #12]
 8001be0:	e101      	b.n	8001de6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	015a      	lsls	r2, r3, #5
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bf8:	d12b      	bne.n	8001c52 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	015a      	lsls	r2, r3, #5
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4413      	add	r3, r2
 8001c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c06:	461a      	mov	r2, r3
 8001c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	212c      	movs	r1, #44	; 0x2c
 8001c14:	fb01 f303 	mul.w	r3, r1, r3
 8001c18:	4413      	add	r3, r2
 8001c1a:	3361      	adds	r3, #97	; 0x61
 8001c1c:	2207      	movs	r2, #7
 8001c1e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	015a      	lsls	r2, r3, #5
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	0151      	lsls	r1, r2, #5
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	440a      	add	r2, r1
 8001c36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c3a:	f043 0302 	orr.w	r3, r3, #2
 8001c3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 fabb 	bl	80051c6 <USB_HC_Halt>
 8001c50:	e0c9      	b.n	8001de6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	015a      	lsls	r2, r3, #5
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	2b20      	cmp	r3, #32
 8001c66:	d109      	bne.n	8001c7c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c74:	461a      	mov	r2, r3
 8001c76:	2320      	movs	r3, #32
 8001c78:	6093      	str	r3, [r2, #8]
 8001c7a:	e0b4      	b.n	8001de6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	015a      	lsls	r2, r3, #5
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4413      	add	r3, r2
 8001c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d133      	bne.n	8001cfa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	015a      	lsls	r2, r3, #5
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	0151      	lsls	r1, r2, #5
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	440a      	add	r2, r1
 8001ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	212c      	movs	r1, #44	; 0x2c
 8001cb8:	fb01 f303 	mul.w	r3, r1, r3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3361      	adds	r3, #97	; 0x61
 8001cc0:	2205      	movs	r2, #5
 8001cc2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	015a      	lsls	r2, r3, #5
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4413      	add	r3, r2
 8001ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	2310      	movs	r3, #16
 8001cd4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	015a      	lsls	r2, r3, #5
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4413      	add	r3, r2
 8001cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 fa67 	bl	80051c6 <USB_HC_Halt>
 8001cf8:	e075      	b.n	8001de6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d10:	d134      	bne.n	8001d7c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	0151      	lsls	r1, r2, #5
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	440a      	add	r2, r1
 8001d28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	212c      	movs	r1, #44	; 0x2c
 8001d38:	fb01 f303 	mul.w	r3, r1, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3361      	adds	r3, #97	; 0x61
 8001d40:	2208      	movs	r2, #8
 8001d42:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	015a      	lsls	r2, r3, #5
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d50:	461a      	mov	r2, r3
 8001d52:	2310      	movs	r3, #16
 8001d54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	015a      	lsls	r2, r3, #5
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d62:	461a      	mov	r2, r3
 8001d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d68:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 fa26 	bl	80051c6 <USB_HC_Halt>
 8001d7a:	e034      	b.n	8001de6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	2b80      	cmp	r3, #128	; 0x80
 8001d90:	d129      	bne.n	8001de6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	0151      	lsls	r1, r2, #5
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	440a      	add	r2, r1
 8001da8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	212c      	movs	r1, #44	; 0x2c
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3361      	adds	r3, #97	; 0x61
 8001dc0:	2206      	movs	r2, #6
 8001dc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f003 f9f9 	bl	80051c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	015a      	lsls	r2, r3, #5
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4413      	add	r3, r2
 8001ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de0:	461a      	mov	r2, r3
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dfc:	d122      	bne.n	8001e44 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	0151      	lsls	r1, r2, #5
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	440a      	add	r2, r1
 8001e14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f003 f9cc 	bl	80051c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e40:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e42:	e2ba      	b.n	80023ba <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	015a      	lsls	r2, r3, #5
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	f040 811b 	bne.w	8002092 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d019      	beq.n	8001e98 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	212c      	movs	r1, #44	; 0x2c
 8001e6a:	fb01 f303 	mul.w	r3, r1, r3
 8001e6e:	4413      	add	r3, r2
 8001e70:	3348      	adds	r3, #72	; 0x48
 8001e72:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	0159      	lsls	r1, r3, #5
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e86:	1ad2      	subs	r2, r2, r3
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	202c      	movs	r0, #44	; 0x2c
 8001e8e:	fb00 f303 	mul.w	r3, r0, r3
 8001e92:	440b      	add	r3, r1
 8001e94:	3350      	adds	r3, #80	; 0x50
 8001e96:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	212c      	movs	r1, #44	; 0x2c
 8001e9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3361      	adds	r3, #97	; 0x61
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	212c      	movs	r1, #44	; 0x2c
 8001eb0:	fb01 f303 	mul.w	r3, r1, r3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	335c      	adds	r3, #92	; 0x5c
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec8:	461a      	mov	r2, r3
 8001eca:	2301      	movs	r3, #1
 8001ecc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	212c      	movs	r1, #44	; 0x2c
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	4413      	add	r3, r2
 8001eda:	333f      	adds	r3, #63	; 0x3f
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d009      	beq.n	8001ef6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	212c      	movs	r1, #44	; 0x2c
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	333f      	adds	r3, #63	; 0x3f
 8001ef0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d121      	bne.n	8001f3a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	015a      	lsls	r2, r3, #5
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	0151      	lsls	r1, r2, #5
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	440a      	add	r2, r1
 8001f0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 f950 	bl	80051c6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f32:	461a      	mov	r2, r3
 8001f34:	2310      	movs	r3, #16
 8001f36:	6093      	str	r3, [r2, #8]
 8001f38:	e066      	b.n	8002008 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	212c      	movs	r1, #44	; 0x2c
 8001f40:	fb01 f303 	mul.w	r3, r1, r3
 8001f44:	4413      	add	r3, r2
 8001f46:	333f      	adds	r3, #63	; 0x3f
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d127      	bne.n	8001f9e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	0151      	lsls	r1, r2, #5
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	440a      	add	r2, r1
 8001f64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f6c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	212c      	movs	r1, #44	; 0x2c
 8001f74:	fb01 f303 	mul.w	r3, r1, r3
 8001f78:	4413      	add	r3, r2
 8001f7a:	3360      	adds	r3, #96	; 0x60
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	b2d9      	uxtb	r1, r3
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	202c      	movs	r0, #44	; 0x2c
 8001f8a:	fb00 f303 	mul.w	r3, r0, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	3360      	adds	r3, #96	; 0x60
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f004 fc32 	bl	8006800 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001f9c:	e034      	b.n	8002008 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	212c      	movs	r1, #44	; 0x2c
 8001fa4:	fb01 f303 	mul.w	r3, r1, r3
 8001fa8:	4413      	add	r3, r2
 8001faa:	333f      	adds	r3, #63	; 0x3f
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d12a      	bne.n	8002008 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	212c      	movs	r1, #44	; 0x2c
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3360      	adds	r3, #96	; 0x60
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	212c      	movs	r1, #44	; 0x2c
 8001fca:	fb01 f303 	mul.w	r3, r1, r3
 8001fce:	4413      	add	r3, r2
 8001fd0:	3354      	adds	r3, #84	; 0x54
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	f083 0301 	eor.w	r3, r3, #1
 8001fd8:	b2d8      	uxtb	r0, r3
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	212c      	movs	r1, #44	; 0x2c
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3354      	adds	r3, #84	; 0x54
 8001fe8:	4602      	mov	r2, r0
 8001fea:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	b2d9      	uxtb	r1, r3
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	202c      	movs	r0, #44	; 0x2c
 8001ff6:	fb00 f303 	mul.w	r3, r0, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3360      	adds	r3, #96	; 0x60
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f004 fbfc 	bl	8006800 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d12b      	bne.n	8002068 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	212c      	movs	r1, #44	; 0x2c
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	3348      	adds	r3, #72	; 0x48
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	202c      	movs	r0, #44	; 0x2c
 8002026:	fb00 f202 	mul.w	r2, r0, r2
 800202a:	440a      	add	r2, r1
 800202c:	3240      	adds	r2, #64	; 0x40
 800202e:	8812      	ldrh	r2, [r2, #0]
 8002030:	fbb3 f3f2 	udiv	r3, r3, r2
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 81be 	beq.w	80023ba <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3354      	adds	r3, #84	; 0x54
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	f083 0301 	eor.w	r3, r3, #1
 8002052:	b2d8      	uxtb	r0, r3
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	212c      	movs	r1, #44	; 0x2c
 800205a:	fb01 f303 	mul.w	r3, r1, r3
 800205e:	4413      	add	r3, r2
 8002060:	3354      	adds	r3, #84	; 0x54
 8002062:	4602      	mov	r2, r0
 8002064:	701a      	strb	r2, [r3, #0]
}
 8002066:	e1a8      	b.n	80023ba <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	212c      	movs	r1, #44	; 0x2c
 800206e:	fb01 f303 	mul.w	r3, r1, r3
 8002072:	4413      	add	r3, r2
 8002074:	3354      	adds	r3, #84	; 0x54
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	f083 0301 	eor.w	r3, r3, #1
 800207c:	b2d8      	uxtb	r0, r3
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	212c      	movs	r1, #44	; 0x2c
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	4413      	add	r3, r2
 800208a:	3354      	adds	r3, #84	; 0x54
 800208c:	4602      	mov	r2, r0
 800208e:	701a      	strb	r2, [r3, #0]
}
 8002090:	e193      	b.n	80023ba <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	f040 8106 	bne.w	80022b6 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	0151      	lsls	r1, r2, #5
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	440a      	add	r2, r1
 80020c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020c4:	f023 0302 	bic.w	r3, r3, #2
 80020c8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	212c      	movs	r1, #44	; 0x2c
 80020d0:	fb01 f303 	mul.w	r3, r1, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	3361      	adds	r3, #97	; 0x61
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d109      	bne.n	80020f2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	212c      	movs	r1, #44	; 0x2c
 80020e4:	fb01 f303 	mul.w	r3, r1, r3
 80020e8:	4413      	add	r3, r2
 80020ea:	3360      	adds	r3, #96	; 0x60
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]
 80020f0:	e0c9      	b.n	8002286 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	212c      	movs	r1, #44	; 0x2c
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	3361      	adds	r3, #97	; 0x61
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b05      	cmp	r3, #5
 8002104:	d109      	bne.n	800211a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	3360      	adds	r3, #96	; 0x60
 8002114:	2205      	movs	r2, #5
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	e0b5      	b.n	8002286 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	3361      	adds	r3, #97	; 0x61
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b06      	cmp	r3, #6
 800212c:	d009      	beq.n	8002142 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	212c      	movs	r1, #44	; 0x2c
 8002134:	fb01 f303 	mul.w	r3, r1, r3
 8002138:	4413      	add	r3, r2
 800213a:	3361      	adds	r3, #97	; 0x61
 800213c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800213e:	2b08      	cmp	r3, #8
 8002140:	d150      	bne.n	80021e4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	212c      	movs	r1, #44	; 0x2c
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	4413      	add	r3, r2
 800214e:	335c      	adds	r3, #92	; 0x5c
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	202c      	movs	r0, #44	; 0x2c
 800215a:	fb00 f303 	mul.w	r3, r0, r3
 800215e:	440b      	add	r3, r1
 8002160:	335c      	adds	r3, #92	; 0x5c
 8002162:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	212c      	movs	r1, #44	; 0x2c
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	4413      	add	r3, r2
 8002170:	335c      	adds	r3, #92	; 0x5c
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d912      	bls.n	800219e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	212c      	movs	r1, #44	; 0x2c
 800217e:	fb01 f303 	mul.w	r3, r1, r3
 8002182:	4413      	add	r3, r2
 8002184:	335c      	adds	r3, #92	; 0x5c
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	212c      	movs	r1, #44	; 0x2c
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	4413      	add	r3, r2
 8002196:	3360      	adds	r3, #96	; 0x60
 8002198:	2204      	movs	r2, #4
 800219a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800219c:	e073      	b.n	8002286 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	212c      	movs	r1, #44	; 0x2c
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	3360      	adds	r3, #96	; 0x60
 80021ac:	2202      	movs	r2, #2
 80021ae:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021c6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021ce:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021dc:	461a      	mov	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021e2:	e050      	b.n	8002286 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	3361      	adds	r3, #97	; 0x61
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d122      	bne.n	800223e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	212c      	movs	r1, #44	; 0x2c
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	3360      	adds	r3, #96	; 0x60
 8002206:	2202      	movs	r2, #2
 8002208:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4413      	add	r3, r2
 8002212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002220:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002228:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4413      	add	r3, r2
 8002232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002236:	461a      	mov	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	e023      	b.n	8002286 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	3361      	adds	r3, #97	; 0x61
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b07      	cmp	r3, #7
 8002250:	d119      	bne.n	8002286 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	212c      	movs	r1, #44	; 0x2c
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	4413      	add	r3, r2
 800225e:	335c      	adds	r3, #92	; 0x5c
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	202c      	movs	r0, #44	; 0x2c
 800226a:	fb00 f303 	mul.w	r3, r0, r3
 800226e:	440b      	add	r3, r1
 8002270:	335c      	adds	r3, #92	; 0x5c
 8002272:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3360      	adds	r3, #96	; 0x60
 8002282:	2204      	movs	r2, #4
 8002284:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002292:	461a      	mov	r2, r3
 8002294:	2302      	movs	r3, #2
 8002296:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	b2d9      	uxtb	r1, r3
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	202c      	movs	r0, #44	; 0x2c
 80022a2:	fb00 f303 	mul.w	r3, r0, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	3360      	adds	r3, #96	; 0x60
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f004 faa6 	bl	8006800 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022b4:	e081      	b.n	80023ba <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	2b10      	cmp	r3, #16
 80022ca:	d176      	bne.n	80023ba <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	212c      	movs	r1, #44	; 0x2c
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	333f      	adds	r3, #63	; 0x3f
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d121      	bne.n	8002324 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	335c      	adds	r3, #92	; 0x5c
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	0151      	lsls	r1, r2, #5
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	440a      	add	r2, r1
 8002308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f002 ff52 	bl	80051c6 <USB_HC_Halt>
 8002322:	e041      	b.n	80023a8 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	333f      	adds	r3, #63	; 0x3f
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d009      	beq.n	800234c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	212c      	movs	r1, #44	; 0x2c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	333f      	adds	r3, #63	; 0x3f
 8002346:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002348:	2b02      	cmp	r3, #2
 800234a:	d12d      	bne.n	80023a8 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	335c      	adds	r3, #92	; 0x5c
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d120      	bne.n	80023a8 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	212c      	movs	r1, #44	; 0x2c
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	4413      	add	r3, r2
 8002372:	3361      	adds	r3, #97	; 0x61
 8002374:	2203      	movs	r2, #3
 8002376:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	015a      	lsls	r2, r3, #5
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4413      	add	r3, r2
 8002380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	0151      	lsls	r1, r2, #5
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	440a      	add	r2, r1
 800238e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002392:	f043 0302 	orr.w	r3, r3, #2
 8002396:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f002 ff0f 	bl	80051c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b4:	461a      	mov	r2, r3
 80023b6:	2310      	movs	r3, #16
 80023b8:	6093      	str	r3, [r2, #8]
}
 80023ba:	bf00      	nop
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b088      	sub	sp, #32
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	460b      	mov	r3, r1
 80023cc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d119      	bne.n	8002426 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fe:	461a      	mov	r2, r3
 8002400:	2304      	movs	r3, #4
 8002402:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	015a      	lsls	r2, r3, #5
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	4413      	add	r3, r2
 800240c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	0151      	lsls	r1, r2, #5
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	440a      	add	r2, r1
 800241a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800241e:	f043 0302 	orr.w	r3, r3, #2
 8002422:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002424:	e3ca      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	4413      	add	r3, r2
 800242e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	2b20      	cmp	r3, #32
 800243a:	d13e      	bne.n	80024ba <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	4413      	add	r3, r2
 8002444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002448:	461a      	mov	r2, r3
 800244a:	2320      	movs	r3, #32
 800244c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	212c      	movs	r1, #44	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	333d      	adds	r3, #61	; 0x3d
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b01      	cmp	r3, #1
 8002460:	f040 83ac 	bne.w	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	333d      	adds	r3, #61	; 0x3d
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	212c      	movs	r1, #44	; 0x2c
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	4413      	add	r3, r2
 8002482:	3360      	adds	r3, #96	; 0x60
 8002484:	2202      	movs	r2, #2
 8002486:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	4413      	add	r3, r2
 8002490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	0151      	lsls	r1, r2, #5
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	440a      	add	r2, r1
 800249e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024a2:	f043 0302 	orr.w	r3, r3, #2
 80024a6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	4611      	mov	r1, r2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f002 fe87 	bl	80051c6 <USB_HC_Halt>
}
 80024b8:	e380      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d0:	d122      	bne.n	8002518 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	0151      	lsls	r1, r2, #5
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	440a      	add	r2, r1
 80024e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 fe62 	bl	80051c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	4413      	add	r3, r2
 800250a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250e:	461a      	mov	r2, r3
 8002510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002514:	6093      	str	r3, [r2, #8]
}
 8002516:	e351      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	4413      	add	r3, r2
 8002520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b01      	cmp	r3, #1
 800252c:	d150      	bne.n	80025d0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	212c      	movs	r1, #44	; 0x2c
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	4413      	add	r3, r2
 800253a:	335c      	adds	r3, #92	; 0x5c
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002552:	2b40      	cmp	r3, #64	; 0x40
 8002554:	d111      	bne.n	800257a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	333d      	adds	r3, #61	; 0x3d
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	4413      	add	r3, r2
 8002570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002574:	461a      	mov	r2, r3
 8002576:	2340      	movs	r3, #64	; 0x40
 8002578:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	4413      	add	r3, r2
 8002582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	0151      	lsls	r1, r2, #5
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	440a      	add	r2, r1
 8002590:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f002 fe0e 	bl	80051c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b6:	461a      	mov	r2, r3
 80025b8:	2301      	movs	r3, #1
 80025ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	212c      	movs	r1, #44	; 0x2c
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	3361      	adds	r3, #97	; 0x61
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
}
 80025ce:	e2f5      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e2:	2b40      	cmp	r3, #64	; 0x40
 80025e4:	d13c      	bne.n	8002660 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	212c      	movs	r1, #44	; 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3361      	adds	r3, #97	; 0x61
 80025f4:	2204      	movs	r2, #4
 80025f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	333d      	adds	r3, #61	; 0x3d
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	335c      	adds	r3, #92	; 0x5c
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	4413      	add	r3, r2
 8002624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	0151      	lsls	r1, r2, #5
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	440a      	add	r2, r1
 8002632:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002636:	f043 0302 	orr.w	r3, r3, #2
 800263a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f002 fdbd 	bl	80051c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002658:	461a      	mov	r2, r3
 800265a:	2340      	movs	r3, #64	; 0x40
 800265c:	6093      	str	r3, [r2, #8]
}
 800265e:	e2ad      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b08      	cmp	r3, #8
 8002674:	d12a      	bne.n	80026cc <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002682:	461a      	mov	r2, r3
 8002684:	2308      	movs	r3, #8
 8002686:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	0151      	lsls	r1, r2, #5
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	440a      	add	r2, r1
 800269e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	4611      	mov	r1, r2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f002 fd87 	bl	80051c6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	212c      	movs	r1, #44	; 0x2c
 80026be:	fb01 f303 	mul.w	r3, r1, r3
 80026c2:	4413      	add	r3, r2
 80026c4:	3361      	adds	r3, #97	; 0x61
 80026c6:	2205      	movs	r2, #5
 80026c8:	701a      	strb	r2, [r3, #0]
}
 80026ca:	e277      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0310 	and.w	r3, r3, #16
 80026de:	2b10      	cmp	r3, #16
 80026e0:	d150      	bne.n	8002784 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	212c      	movs	r1, #44	; 0x2c
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	335c      	adds	r3, #92	; 0x5c
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	212c      	movs	r1, #44	; 0x2c
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	4413      	add	r3, r2
 8002700:	3361      	adds	r3, #97	; 0x61
 8002702:	2203      	movs	r2, #3
 8002704:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	333d      	adds	r3, #61	; 0x3d
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d112      	bne.n	8002740 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	333c      	adds	r3, #60	; 0x3c
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d108      	bne.n	8002740 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	212c      	movs	r1, #44	; 0x2c
 8002734:	fb01 f303 	mul.w	r3, r1, r3
 8002738:	4413      	add	r3, r2
 800273a:	333d      	adds	r3, #61	; 0x3d
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	0151      	lsls	r1, r2, #5
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	440a      	add	r2, r1
 8002756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800275a:	f043 0302 	orr.w	r3, r3, #2
 800275e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f002 fd2b 	bl	80051c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277c:	461a      	mov	r2, r3
 800277e:	2310      	movs	r3, #16
 8002780:	6093      	str	r3, [r2, #8]
}
 8002782:	e21b      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	2b80      	cmp	r3, #128	; 0x80
 8002798:	d174      	bne.n	8002884 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d121      	bne.n	80027e6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	3361      	adds	r3, #97	; 0x61
 80027b0:	2206      	movs	r2, #6
 80027b2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	0151      	lsls	r1, r2, #5
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	440a      	add	r2, r1
 80027ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ce:	f043 0302 	orr.w	r3, r3, #2
 80027d2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 fcf1 	bl	80051c6 <USB_HC_Halt>
 80027e4:	e044      	b.n	8002870 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	335c      	adds	r3, #92	; 0x5c
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	202c      	movs	r0, #44	; 0x2c
 80027fe:	fb00 f303 	mul.w	r3, r0, r3
 8002802:	440b      	add	r3, r1
 8002804:	335c      	adds	r3, #92	; 0x5c
 8002806:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	212c      	movs	r1, #44	; 0x2c
 800280e:	fb01 f303 	mul.w	r3, r1, r3
 8002812:	4413      	add	r3, r2
 8002814:	335c      	adds	r3, #92	; 0x5c
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d920      	bls.n	800285e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	335c      	adds	r3, #92	; 0x5c
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	3360      	adds	r3, #96	; 0x60
 800283c:	2204      	movs	r2, #4
 800283e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	b2d9      	uxtb	r1, r3
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	202c      	movs	r0, #44	; 0x2c
 800284a:	fb00 f303 	mul.w	r3, r0, r3
 800284e:	4413      	add	r3, r2
 8002850:	3360      	adds	r3, #96	; 0x60
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f003 ffd2 	bl	8006800 <HAL_HCD_HC_NotifyURBChange_Callback>
 800285c:	e008      	b.n	8002870 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	212c      	movs	r1, #44	; 0x2c
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	4413      	add	r3, r2
 800286a:	3360      	adds	r3, #96	; 0x60
 800286c:	2202      	movs	r2, #2
 800286e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	461a      	mov	r2, r3
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	6093      	str	r3, [r2, #8]
}
 8002882:	e19b      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289a:	d134      	bne.n	8002906 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	0151      	lsls	r1, r2, #5
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	440a      	add	r2, r1
 80028b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028b6:	f043 0302 	orr.w	r3, r3, #2
 80028ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f002 fc7d 	bl	80051c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	461a      	mov	r2, r3
 80028da:	2310      	movs	r3, #16
 80028dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	461a      	mov	r2, r3
 80028ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	3361      	adds	r3, #97	; 0x61
 8002900:	2208      	movs	r2, #8
 8002902:	701a      	strb	r2, [r3, #0]
}
 8002904:	e15a      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	4413      	add	r3, r2
 800290e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b02      	cmp	r3, #2
 800291a:	f040 814f 	bne.w	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	015a      	lsls	r2, r3, #5
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	4413      	add	r3, r2
 8002926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	0151      	lsls	r1, r2, #5
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	440a      	add	r2, r1
 8002934:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002938:	f023 0302 	bic.w	r3, r3, #2
 800293c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	212c      	movs	r1, #44	; 0x2c
 8002944:	fb01 f303 	mul.w	r3, r1, r3
 8002948:	4413      	add	r3, r2
 800294a:	3361      	adds	r3, #97	; 0x61
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d17d      	bne.n	8002a4e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	212c      	movs	r1, #44	; 0x2c
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	4413      	add	r3, r2
 800295e:	3360      	adds	r3, #96	; 0x60
 8002960:	2201      	movs	r2, #1
 8002962:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	333f      	adds	r3, #63	; 0x3f
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d00a      	beq.n	800298e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	333f      	adds	r3, #63	; 0x3f
 8002986:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002988:	2b03      	cmp	r3, #3
 800298a:	f040 8100 	bne.w	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d113      	bne.n	80029be <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	3355      	adds	r3, #85	; 0x55
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	f083 0301 	eor.w	r3, r3, #1
 80029aa:	b2d8      	uxtb	r0, r3
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3355      	adds	r3, #85	; 0x55
 80029ba:	4602      	mov	r2, r0
 80029bc:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	f040 80e3 	bne.w	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	334c      	adds	r3, #76	; 0x4c
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80d8 	beq.w	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	334c      	adds	r3, #76	; 0x4c
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	202c      	movs	r0, #44	; 0x2c
 80029f4:	fb00 f202 	mul.w	r2, r0, r2
 80029f8:	440a      	add	r2, r1
 80029fa:	3240      	adds	r2, #64	; 0x40
 80029fc:	8812      	ldrh	r2, [r2, #0]
 80029fe:	4413      	add	r3, r2
 8002a00:	3b01      	subs	r3, #1
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	202c      	movs	r0, #44	; 0x2c
 8002a08:	fb00 f202 	mul.w	r2, r0, r2
 8002a0c:	440a      	add	r2, r1
 8002a0e:	3240      	adds	r2, #64	; 0x40
 8002a10:	8812      	ldrh	r2, [r2, #0]
 8002a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 80b5 	beq.w	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3355      	adds	r3, #85	; 0x55
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	f083 0301 	eor.w	r3, r3, #1
 8002a38:	b2d8      	uxtb	r0, r3
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	3355      	adds	r3, #85	; 0x55
 8002a48:	4602      	mov	r2, r0
 8002a4a:	701a      	strb	r2, [r3, #0]
 8002a4c:	e09f      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	3361      	adds	r3, #97	; 0x61
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d109      	bne.n	8002a76 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3360      	adds	r3, #96	; 0x60
 8002a70:	2202      	movs	r2, #2
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e08b      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	3361      	adds	r3, #97	; 0x61
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d109      	bne.n	8002a9e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	212c      	movs	r1, #44	; 0x2c
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	3360      	adds	r3, #96	; 0x60
 8002a98:	2202      	movs	r2, #2
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	e077      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	212c      	movs	r1, #44	; 0x2c
 8002aa4:	fb01 f303 	mul.w	r3, r1, r3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3361      	adds	r3, #97	; 0x61
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b05      	cmp	r3, #5
 8002ab0:	d109      	bne.n	8002ac6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	212c      	movs	r1, #44	; 0x2c
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	3360      	adds	r3, #96	; 0x60
 8002ac0:	2205      	movs	r2, #5
 8002ac2:	701a      	strb	r2, [r3, #0]
 8002ac4:	e063      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3361      	adds	r3, #97	; 0x61
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b06      	cmp	r3, #6
 8002ad8:	d009      	beq.n	8002aee <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3361      	adds	r3, #97	; 0x61
 8002ae8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d14f      	bne.n	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	335c      	adds	r3, #92	; 0x5c
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	202c      	movs	r0, #44	; 0x2c
 8002b06:	fb00 f303 	mul.w	r3, r0, r3
 8002b0a:	440b      	add	r3, r1
 8002b0c:	335c      	adds	r3, #92	; 0x5c
 8002b0e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	335c      	adds	r3, #92	; 0x5c
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d912      	bls.n	8002b4a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	212c      	movs	r1, #44	; 0x2c
 8002b2a:	fb01 f303 	mul.w	r3, r1, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	335c      	adds	r3, #92	; 0x5c
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	3360      	adds	r3, #96	; 0x60
 8002b44:	2204      	movs	r2, #4
 8002b46:	701a      	strb	r2, [r3, #0]
 8002b48:	e021      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3360      	adds	r3, #96	; 0x60
 8002b58:	2202      	movs	r2, #2
 8002b5a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b72:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b7a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b88:	461a      	mov	r2, r3
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	b2d9      	uxtb	r1, r3
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	202c      	movs	r0, #44	; 0x2c
 8002baa:	fb00 f303 	mul.w	r3, r0, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	3360      	adds	r3, #96	; 0x60
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f003 fe22 	bl	8006800 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bbc:	bf00      	nop
 8002bbe:	3720      	adds	r7, #32
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	; 0x28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	0c5b      	lsrs	r3, r3, #17
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bf8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d004      	beq.n	8002c0a <HCD_RXQLVL_IRQHandler+0x46>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	2b05      	cmp	r3, #5
 8002c04:	f000 80a9 	beq.w	8002d5a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c08:	e0aa      	b.n	8002d60 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80a6 	beq.w	8002d5e <HCD_RXQLVL_IRQHandler+0x19a>
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3344      	adds	r3, #68	; 0x44
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 809b 	beq.w	8002d5e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	212c      	movs	r1, #44	; 0x2c
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	3350      	adds	r3, #80	; 0x50
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	441a      	add	r2, r3
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	202c      	movs	r0, #44	; 0x2c
 8002c42:	fb00 f303 	mul.w	r3, r0, r3
 8002c46:	440b      	add	r3, r1
 8002c48:	334c      	adds	r3, #76	; 0x4c
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d87a      	bhi.n	8002d46 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	3344      	adds	r3, #68	; 0x44
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	b292      	uxth	r2, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f001 fe4f 	bl	800490c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	3344      	adds	r3, #68	; 0x44
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	441a      	add	r2, r3
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	202c      	movs	r0, #44	; 0x2c
 8002c88:	fb00 f303 	mul.w	r3, r0, r3
 8002c8c:	440b      	add	r3, r1
 8002c8e:	3344      	adds	r3, #68	; 0x44
 8002c90:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	212c      	movs	r1, #44	; 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3350      	adds	r3, #80	; 0x50
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	441a      	add	r2, r3
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	202c      	movs	r0, #44	; 0x2c
 8002cac:	fb00 f303 	mul.w	r3, r0, r3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3350      	adds	r3, #80	; 0x50
 8002cb4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	0cdb      	lsrs	r3, r3, #19
 8002cc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cca:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3340      	adds	r3, #64	; 0x40
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d13c      	bne.n	8002d5e <HCD_RXQLVL_IRQHandler+0x19a>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d039      	beq.n	8002d5e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d00:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d08:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d16:	461a      	mov	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	3354      	adds	r3, #84	; 0x54
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	f083 0301 	eor.w	r3, r3, #1
 8002d30:	b2d8      	uxtb	r0, r3
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	212c      	movs	r1, #44	; 0x2c
 8002d38:	fb01 f303 	mul.w	r3, r1, r3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3354      	adds	r3, #84	; 0x54
 8002d40:	4602      	mov	r2, r0
 8002d42:	701a      	strb	r2, [r3, #0]
      break;
 8002d44:	e00b      	b.n	8002d5e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	212c      	movs	r1, #44	; 0x2c
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	3360      	adds	r3, #96	; 0x60
 8002d54:	2204      	movs	r2, #4
 8002d56:	701a      	strb	r2, [r3, #0]
      break;
 8002d58:	e001      	b.n	8002d5e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d5a:	bf00      	nop
 8002d5c:	e000      	b.n	8002d60 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d5e:	bf00      	nop
  }
}
 8002d60:	bf00      	nop
 8002d62:	3728      	adds	r7, #40	; 0x28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d94:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d10b      	bne.n	8002db8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d102      	bne.n	8002db0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f003 fd0c 	bl	80067c8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f043 0302 	orr.w	r3, r3, #2
 8002db6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d132      	bne.n	8002e28 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f043 0308 	orr.w	r3, r3, #8
 8002dc8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d126      	bne.n	8002e22 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d113      	bne.n	8002e04 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002de2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002de6:	d106      	bne.n	8002df6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2102      	movs	r1, #2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 feec 	bl	8004bcc <USB_InitFSLSPClkSel>
 8002df4:	e011      	b.n	8002e1a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f001 fee5 	bl	8004bcc <USB_InitFSLSPClkSel>
 8002e02:	e00a      	b.n	8002e1a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d106      	bne.n	8002e1a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e12:	461a      	mov	r2, r3
 8002e14:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e18:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f003 fcfe 	bl	800681c <HAL_HCD_PortEnabled_Callback>
 8002e20:	e002      	b.n	8002e28 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f003 fd08 	bl	8006838 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b20      	cmp	r3, #32
 8002e30:	d103      	bne.n	8002e3a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f043 0320 	orr.w	r3, r3, #32
 8002e38:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e40:	461a      	mov	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	6013      	str	r3, [r2, #0]
}
 8002e46:	bf00      	nop
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e12b      	b.n	80030ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fd fd80 	bl	800097c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2224      	movs	r2, #36	; 0x24
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0201 	bic.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ea2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002eb4:	f001 f9fc 	bl	80042b0 <HAL_RCC_GetPCLK1Freq>
 8002eb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4a81      	ldr	r2, [pc, #516]	; (80030c4 <HAL_I2C_Init+0x274>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d807      	bhi.n	8002ed4 <HAL_I2C_Init+0x84>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a80      	ldr	r2, [pc, #512]	; (80030c8 <HAL_I2C_Init+0x278>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	bf94      	ite	ls
 8002ecc:	2301      	movls	r3, #1
 8002ece:	2300      	movhi	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	e006      	b.n	8002ee2 <HAL_I2C_Init+0x92>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4a7d      	ldr	r2, [pc, #500]	; (80030cc <HAL_I2C_Init+0x27c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	bf94      	ite	ls
 8002edc:	2301      	movls	r3, #1
 8002ede:	2300      	movhi	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e0e7      	b.n	80030ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4a78      	ldr	r2, [pc, #480]	; (80030d0 <HAL_I2C_Init+0x280>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	0c9b      	lsrs	r3, r3, #18
 8002ef4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	4a6a      	ldr	r2, [pc, #424]	; (80030c4 <HAL_I2C_Init+0x274>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d802      	bhi.n	8002f24 <HAL_I2C_Init+0xd4>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	3301      	adds	r3, #1
 8002f22:	e009      	b.n	8002f38 <HAL_I2C_Init+0xe8>
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f2a:	fb02 f303 	mul.w	r3, r2, r3
 8002f2e:	4a69      	ldr	r2, [pc, #420]	; (80030d4 <HAL_I2C_Init+0x284>)
 8002f30:	fba2 2303 	umull	r2, r3, r2, r3
 8002f34:	099b      	lsrs	r3, r3, #6
 8002f36:	3301      	adds	r3, #1
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	495c      	ldr	r1, [pc, #368]	; (80030c4 <HAL_I2C_Init+0x274>)
 8002f54:	428b      	cmp	r3, r1
 8002f56:	d819      	bhi.n	8002f8c <HAL_I2C_Init+0x13c>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1e59      	subs	r1, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f66:	1c59      	adds	r1, r3, #1
 8002f68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f6c:	400b      	ands	r3, r1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <HAL_I2C_Init+0x138>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1e59      	subs	r1, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f80:	3301      	adds	r3, #1
 8002f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f86:	e051      	b.n	800302c <HAL_I2C_Init+0x1dc>
 8002f88:	2304      	movs	r3, #4
 8002f8a:	e04f      	b.n	800302c <HAL_I2C_Init+0x1dc>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d111      	bne.n	8002fb8 <HAL_I2C_Init+0x168>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1e58      	subs	r0, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	440b      	add	r3, r1
 8002fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf0c      	ite	eq
 8002fb0:	2301      	moveq	r3, #1
 8002fb2:	2300      	movne	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	e012      	b.n	8002fde <HAL_I2C_Init+0x18e>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1e58      	subs	r0, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	0099      	lsls	r1, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_I2C_Init+0x196>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e022      	b.n	800302c <HAL_I2C_Init+0x1dc>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10e      	bne.n	800300c <HAL_I2C_Init+0x1bc>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1e58      	subs	r0, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6859      	ldr	r1, [r3, #4]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	440b      	add	r3, r1
 8002ffc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003000:	3301      	adds	r3, #1
 8003002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800300a:	e00f      	b.n	800302c <HAL_I2C_Init+0x1dc>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1e58      	subs	r0, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6859      	ldr	r1, [r3, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	0099      	lsls	r1, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003022:	3301      	adds	r3, #1
 8003024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	6809      	ldr	r1, [r1, #0]
 8003030:	4313      	orrs	r3, r2
 8003032:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69da      	ldr	r2, [r3, #28]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800305a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6911      	ldr	r1, [r2, #16]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68d2      	ldr	r2, [r2, #12]
 8003066:	4311      	orrs	r1, r2
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	430b      	orrs	r3, r1
 800306e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	000186a0 	.word	0x000186a0
 80030c8:	001e847f 	.word	0x001e847f
 80030cc:	003d08ff 	.word	0x003d08ff
 80030d0:	431bde83 	.word	0x431bde83
 80030d4:	10624dd3 	.word	0x10624dd3

080030d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e128      	b.n	800333c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a90      	ldr	r2, [pc, #576]	; (8003344 <HAL_I2S_Init+0x26c>)
 8003102:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7fd fc81 	bl	8000a0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2202      	movs	r2, #2
 800310e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003120:	f023 030f 	bic.w	r3, r3, #15
 8003124:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2202      	movs	r2, #2
 800312c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d060      	beq.n	80031f8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d102      	bne.n	8003144 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800313e:	2310      	movs	r3, #16
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	e001      	b.n	8003148 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003144:	2320      	movs	r3, #32
 8003146:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b20      	cmp	r3, #32
 800314e:	d802      	bhi.n	8003156 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003156:	2001      	movs	r0, #1
 8003158:	f001 f9a0 	bl	800449c <HAL_RCCEx_GetPeriphCLKFreq>
 800315c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003166:	d125      	bne.n	80031b4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d010      	beq.n	8003192 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	fbb2 f2f3 	udiv	r2, r2, r3
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	461a      	mov	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	fbb2 f3f3 	udiv	r3, r2, r3
 800318c:	3305      	adds	r3, #5
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	e01f      	b.n	80031d2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	fbb2 f2f3 	udiv	r2, r2, r3
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	461a      	mov	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ae:	3305      	adds	r3, #5
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	e00e      	b.n	80031d2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	461a      	mov	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ce:	3305      	adds	r3, #5
 80031d0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4a5c      	ldr	r2, [pc, #368]	; (8003348 <HAL_I2S_Init+0x270>)
 80031d6:	fba2 2303 	umull	r2, r3, r2, r3
 80031da:	08db      	lsrs	r3, r3, #3
 80031dc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	085b      	lsrs	r3, r3, #1
 80031ee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	e003      	b.n	8003200 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031f8:	2302      	movs	r3, #2
 80031fa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d902      	bls.n	800320c <HAL_I2S_Init+0x134>
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	2bff      	cmp	r3, #255	; 0xff
 800320a:	d907      	bls.n	800321c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003210:	f043 0210 	orr.w	r2, r3, #16
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e08f      	b.n	800333c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	ea42 0103 	orr.w	r1, r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	430a      	orrs	r2, r1
 800322e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800323a:	f023 030f 	bic.w	r3, r3, #15
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6851      	ldr	r1, [r2, #4]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6892      	ldr	r2, [r2, #8]
 8003246:	4311      	orrs	r1, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	68d2      	ldr	r2, [r2, #12]
 800324c:	4311      	orrs	r1, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6992      	ldr	r2, [r2, #24]
 8003252:	430a      	orrs	r2, r1
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800325e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d161      	bne.n	800332c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a38      	ldr	r2, [pc, #224]	; (800334c <HAL_I2S_Init+0x274>)
 800326c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a37      	ldr	r2, [pc, #220]	; (8003350 <HAL_I2S_Init+0x278>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d101      	bne.n	800327c <HAL_I2S_Init+0x1a4>
 8003278:	4b36      	ldr	r3, [pc, #216]	; (8003354 <HAL_I2S_Init+0x27c>)
 800327a:	e001      	b.n	8003280 <HAL_I2S_Init+0x1a8>
 800327c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	4932      	ldr	r1, [pc, #200]	; (8003350 <HAL_I2S_Init+0x278>)
 8003288:	428a      	cmp	r2, r1
 800328a:	d101      	bne.n	8003290 <HAL_I2S_Init+0x1b8>
 800328c:	4a31      	ldr	r2, [pc, #196]	; (8003354 <HAL_I2S_Init+0x27c>)
 800328e:	e001      	b.n	8003294 <HAL_I2S_Init+0x1bc>
 8003290:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003294:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003298:	f023 030f 	bic.w	r3, r3, #15
 800329c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a2b      	ldr	r2, [pc, #172]	; (8003350 <HAL_I2S_Init+0x278>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d101      	bne.n	80032ac <HAL_I2S_Init+0x1d4>
 80032a8:	4b2a      	ldr	r3, [pc, #168]	; (8003354 <HAL_I2S_Init+0x27c>)
 80032aa:	e001      	b.n	80032b0 <HAL_I2S_Init+0x1d8>
 80032ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032b0:	2202      	movs	r2, #2
 80032b2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a25      	ldr	r2, [pc, #148]	; (8003350 <HAL_I2S_Init+0x278>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d101      	bne.n	80032c2 <HAL_I2S_Init+0x1ea>
 80032be:	4b25      	ldr	r3, [pc, #148]	; (8003354 <HAL_I2S_Init+0x27c>)
 80032c0:	e001      	b.n	80032c6 <HAL_I2S_Init+0x1ee>
 80032c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d2:	d003      	beq.n	80032dc <HAL_I2S_Init+0x204>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d103      	bne.n	80032e4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80032dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	e001      	b.n	80032e8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80032e4:	2300      	movs	r3, #0
 80032e6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032f2:	4313      	orrs	r3, r2
 80032f4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032fc:	4313      	orrs	r3, r2
 80032fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003306:	4313      	orrs	r3, r2
 8003308:	b29a      	uxth	r2, r3
 800330a:	897b      	ldrh	r3, [r7, #10]
 800330c:	4313      	orrs	r3, r2
 800330e:	b29b      	uxth	r3, r3
 8003310:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003314:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a0d      	ldr	r2, [pc, #52]	; (8003350 <HAL_I2S_Init+0x278>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d101      	bne.n	8003324 <HAL_I2S_Init+0x24c>
 8003320:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <HAL_I2S_Init+0x27c>)
 8003322:	e001      	b.n	8003328 <HAL_I2S_Init+0x250>
 8003324:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003328:	897a      	ldrh	r2, [r7, #10]
 800332a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3720      	adds	r7, #32
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	0800344f 	.word	0x0800344f
 8003348:	cccccccd 	.word	0xcccccccd
 800334c:	08003565 	.word	0x08003565
 8003350:	40003800 	.word	0x40003800
 8003354:	40003400 	.word	0x40003400

08003358 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	881a      	ldrh	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	1c9a      	adds	r2, r3, #2
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10e      	bne.n	80033e8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033d8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff ffb8 	bl	8003358 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	b292      	uxth	r2, r2
 8003404:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	1c9a      	adds	r2, r3, #2
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10e      	bne.n	8003446 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003436:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ff93 	bl	800336c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b086      	sub	sp, #24
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b04      	cmp	r3, #4
 8003468:	d13a      	bne.n	80034e0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	d109      	bne.n	8003488 <I2S_IRQHandler+0x3a>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347e:	2b40      	cmp	r3, #64	; 0x40
 8003480:	d102      	bne.n	8003488 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff ffb4 	bl	80033f0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b40      	cmp	r3, #64	; 0x40
 8003490:	d126      	bne.n	80034e0 <I2S_IRQHandler+0x92>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b20      	cmp	r3, #32
 800349e:	d11f      	bne.n	80034e0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034b0:	2300      	movs	r3, #0
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	f043 0202 	orr.w	r2, r3, #2
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff ff50 	bl	8003380 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d136      	bne.n	800355a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d109      	bne.n	800350a <I2S_IRQHandler+0xbc>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003500:	2b80      	cmp	r3, #128	; 0x80
 8003502:	d102      	bne.n	800350a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7ff ff45 	bl	8003394 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b08      	cmp	r3, #8
 8003512:	d122      	bne.n	800355a <I2S_IRQHandler+0x10c>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b20      	cmp	r3, #32
 8003520:	d11b      	bne.n	800355a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003530:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354c:	f043 0204 	orr.w	r2, r3, #4
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ff13 	bl	8003380 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800355a:	bf00      	nop
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4aa2      	ldr	r2, [pc, #648]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d101      	bne.n	8003582 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800357e:	4ba2      	ldr	r3, [pc, #648]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003580:	e001      	b.n	8003586 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003582:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a9b      	ldr	r2, [pc, #620]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d101      	bne.n	80035a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800359c:	4b9a      	ldr	r3, [pc, #616]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800359e:	e001      	b.n	80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b0:	d004      	beq.n	80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f040 8099 	bne.w	80036ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d107      	bne.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f925 	bl	8003820 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d107      	bne.n	80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f9c8 	bl	8003980 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f6:	2b40      	cmp	r3, #64	; 0x40
 80035f8:	d13a      	bne.n	8003670 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d035      	beq.n	8003670 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a7e      	ldr	r2, [pc, #504]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d101      	bne.n	8003612 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800360e:	4b7e      	ldr	r3, [pc, #504]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003610:	e001      	b.n	8003616 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003612:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4979      	ldr	r1, [pc, #484]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800361e:	428b      	cmp	r3, r1
 8003620:	d101      	bne.n	8003626 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003622:	4b79      	ldr	r3, [pc, #484]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003624:	e001      	b.n	800362a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003626:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800362a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800362e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800363e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	f043 0202 	orr.w	r2, r3, #2
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff fe88 	bl	8003380 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b08      	cmp	r3, #8
 8003678:	f040 80be 	bne.w	80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 80b8 	beq.w	80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003696:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a59      	ldr	r2, [pc, #356]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036a2:	4b59      	ldr	r3, [pc, #356]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036a4:	e001      	b.n	80036aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4954      	ldr	r1, [pc, #336]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036b2:	428b      	cmp	r3, r1
 80036b4:	d101      	bne.n	80036ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036b6:	4b54      	ldr	r3, [pc, #336]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036b8:	e001      	b.n	80036be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036c4:	2300      	movs	r3, #0
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036de:	f043 0204 	orr.w	r2, r3, #4
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff fe4a 	bl	8003380 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036ec:	e084      	b.n	80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d107      	bne.n	8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f8be 	bl	8003884 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b01      	cmp	r3, #1
 8003710:	d107      	bne.n	8003722 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f8fd 	bl	800391c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	2b40      	cmp	r3, #64	; 0x40
 800372a:	d12f      	bne.n	800378c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d02a      	beq.n	800378c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003744:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a2e      	ldr	r2, [pc, #184]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d101      	bne.n	8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003750:	4b2d      	ldr	r3, [pc, #180]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003752:	e001      	b.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003754:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4929      	ldr	r1, [pc, #164]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003760:	428b      	cmp	r3, r1
 8003762:	d101      	bne.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003764:	4b28      	ldr	r3, [pc, #160]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003766:	e001      	b.n	800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003768:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800376c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003770:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	f043 0202 	orr.w	r2, r3, #2
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff fdfa 	bl	8003380 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b08      	cmp	r3, #8
 8003794:	d131      	bne.n	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d02c      	beq.n	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a17      	ldr	r2, [pc, #92]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d101      	bne.n	80037ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037aa:	4b17      	ldr	r3, [pc, #92]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037ac:	e001      	b.n	80037b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4912      	ldr	r1, [pc, #72]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037ba:	428b      	cmp	r3, r1
 80037bc:	d101      	bne.n	80037c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80037be:	4b12      	ldr	r3, [pc, #72]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037c0:	e001      	b.n	80037c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80037c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037da:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e8:	f043 0204 	orr.w	r2, r3, #4
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff fdc5 	bl	8003380 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037f6:	e000      	b.n	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037f8:	bf00      	nop
}
 80037fa:	bf00      	nop
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40003800 	.word	0x40003800
 8003808:	40003400 	.word	0x40003400

0800380c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	1c99      	adds	r1, r3, #2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6251      	str	r1, [r2, #36]	; 0x24
 8003832:	881a      	ldrh	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d113      	bne.n	800387a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003860:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d106      	bne.n	800387a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff ffc9 	bl	800380c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	1c99      	adds	r1, r3, #2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6251      	str	r1, [r2, #36]	; 0x24
 8003896:	8819      	ldrh	r1, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <I2SEx_TxISR_I2SExt+0x90>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <I2SEx_TxISR_I2SExt+0x22>
 80038a2:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <I2SEx_TxISR_I2SExt+0x94>)
 80038a4:	e001      	b.n	80038aa <I2SEx_TxISR_I2SExt+0x26>
 80038a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038aa:	460a      	mov	r2, r1
 80038ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d121      	bne.n	800390a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a12      	ldr	r2, [pc, #72]	; (8003914 <I2SEx_TxISR_I2SExt+0x90>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d101      	bne.n	80038d4 <I2SEx_TxISR_I2SExt+0x50>
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <I2SEx_TxISR_I2SExt+0x94>)
 80038d2:	e001      	b.n	80038d8 <I2SEx_TxISR_I2SExt+0x54>
 80038d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	490d      	ldr	r1, [pc, #52]	; (8003914 <I2SEx_TxISR_I2SExt+0x90>)
 80038e0:	428b      	cmp	r3, r1
 80038e2:	d101      	bne.n	80038e8 <I2SEx_TxISR_I2SExt+0x64>
 80038e4:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <I2SEx_TxISR_I2SExt+0x94>)
 80038e6:	e001      	b.n	80038ec <I2SEx_TxISR_I2SExt+0x68>
 80038e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d106      	bne.n	800390a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ff81 	bl	800380c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40003800 	.word	0x40003800
 8003918:	40003400 	.word	0x40003400

0800391c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68d8      	ldr	r0, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	1c99      	adds	r1, r3, #2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003934:	b282      	uxth	r2, r0
 8003936:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800393c:	b29b      	uxth	r3, r3
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d113      	bne.n	8003978 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800395e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff ff4a 	bl	800380c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a20      	ldr	r2, [pc, #128]	; (8003a10 <I2SEx_RxISR_I2SExt+0x90>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d101      	bne.n	8003996 <I2SEx_RxISR_I2SExt+0x16>
 8003992:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <I2SEx_RxISR_I2SExt+0x94>)
 8003994:	e001      	b.n	800399a <I2SEx_RxISR_I2SExt+0x1a>
 8003996:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800399a:	68d8      	ldr	r0, [r3, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	1c99      	adds	r1, r3, #2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039a6:	b282      	uxth	r2, r0
 80039a8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d121      	bne.n	8003a06 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a12      	ldr	r2, [pc, #72]	; (8003a10 <I2SEx_RxISR_I2SExt+0x90>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d101      	bne.n	80039d0 <I2SEx_RxISR_I2SExt+0x50>
 80039cc:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <I2SEx_RxISR_I2SExt+0x94>)
 80039ce:	e001      	b.n	80039d4 <I2SEx_RxISR_I2SExt+0x54>
 80039d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	490d      	ldr	r1, [pc, #52]	; (8003a10 <I2SEx_RxISR_I2SExt+0x90>)
 80039dc:	428b      	cmp	r3, r1
 80039de:	d101      	bne.n	80039e4 <I2SEx_RxISR_I2SExt+0x64>
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <I2SEx_RxISR_I2SExt+0x94>)
 80039e2:	e001      	b.n	80039e8 <I2SEx_RxISR_I2SExt+0x68>
 80039e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039ec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d106      	bne.n	8003a06 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff ff03 	bl	800380c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40003800 	.word	0x40003800
 8003a14:	40003400 	.word	0x40003400

08003a18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e264      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d075      	beq.n	8003b22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a36:	4ba3      	ldr	r3, [pc, #652]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d00c      	beq.n	8003a5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a42:	4ba0      	ldr	r3, [pc, #640]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d112      	bne.n	8003a74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a4e:	4b9d      	ldr	r3, [pc, #628]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a5a:	d10b      	bne.n	8003a74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	4b99      	ldr	r3, [pc, #612]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d05b      	beq.n	8003b20 <HAL_RCC_OscConfig+0x108>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d157      	bne.n	8003b20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e23f      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7c:	d106      	bne.n	8003a8c <HAL_RCC_OscConfig+0x74>
 8003a7e:	4b91      	ldr	r3, [pc, #580]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a90      	ldr	r2, [pc, #576]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	e01d      	b.n	8003ac8 <HAL_RCC_OscConfig+0xb0>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x98>
 8003a96:	4b8b      	ldr	r3, [pc, #556]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a8a      	ldr	r2, [pc, #552]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	4b88      	ldr	r3, [pc, #544]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a87      	ldr	r2, [pc, #540]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e00b      	b.n	8003ac8 <HAL_RCC_OscConfig+0xb0>
 8003ab0:	4b84      	ldr	r3, [pc, #528]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a83      	ldr	r2, [pc, #524]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b81      	ldr	r3, [pc, #516]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a80      	ldr	r2, [pc, #512]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d013      	beq.n	8003af8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad0:	f7fd f958 	bl	8000d84 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7fd f954 	bl	8000d84 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	; 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e204      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	4b76      	ldr	r3, [pc, #472]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0xc0>
 8003af6:	e014      	b.n	8003b22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af8:	f7fd f944 	bl	8000d84 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b00:	f7fd f940 	bl	8000d84 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	; 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e1f0      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b12:	4b6c      	ldr	r3, [pc, #432]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0xe8>
 8003b1e:	e000      	b.n	8003b22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d063      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b2e:	4b65      	ldr	r3, [pc, #404]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3a:	4b62      	ldr	r3, [pc, #392]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d11c      	bne.n	8003b80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b46:	4b5f      	ldr	r3, [pc, #380]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d116      	bne.n	8003b80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b52:	4b5c      	ldr	r3, [pc, #368]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_RCC_OscConfig+0x152>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d001      	beq.n	8003b6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e1c4      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6a:	4b56      	ldr	r3, [pc, #344]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	4952      	ldr	r1, [pc, #328]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7e:	e03a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d020      	beq.n	8003bca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b88:	4b4f      	ldr	r3, [pc, #316]	; (8003cc8 <HAL_RCC_OscConfig+0x2b0>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8e:	f7fd f8f9 	bl	8000d84 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b96:	f7fd f8f5 	bl	8000d84 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e1a5      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba8:	4b46      	ldr	r3, [pc, #280]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb4:	4b43      	ldr	r3, [pc, #268]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4940      	ldr	r1, [pc, #256]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	600b      	str	r3, [r1, #0]
 8003bc8:	e015      	b.n	8003bf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bca:	4b3f      	ldr	r3, [pc, #252]	; (8003cc8 <HAL_RCC_OscConfig+0x2b0>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fd f8d8 	bl	8000d84 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bd8:	f7fd f8d4 	bl	8000d84 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e184      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bea:	4b36      	ldr	r3, [pc, #216]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d030      	beq.n	8003c64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d016      	beq.n	8003c38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c0a:	4b30      	ldr	r3, [pc, #192]	; (8003ccc <HAL_RCC_OscConfig+0x2b4>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c10:	f7fd f8b8 	bl	8000d84 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c18:	f7fd f8b4 	bl	8000d84 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e164      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2a:	4b26      	ldr	r3, [pc, #152]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x200>
 8003c36:	e015      	b.n	8003c64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c38:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <HAL_RCC_OscConfig+0x2b4>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c3e:	f7fd f8a1 	bl	8000d84 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c46:	f7fd f89d 	bl	8000d84 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e14d      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c58:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f0      	bne.n	8003c46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80a0 	beq.w	8003db2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c72:	2300      	movs	r3, #0
 8003c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c76:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10f      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	4a0e      	ldr	r2, [pc, #56]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c90:	6413      	str	r3, [r2, #64]	; 0x40
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca2:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <HAL_RCC_OscConfig+0x2b8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d121      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cae:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <HAL_RCC_OscConfig+0x2b8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a07      	ldr	r2, [pc, #28]	; (8003cd0 <HAL_RCC_OscConfig+0x2b8>)
 8003cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cba:	f7fd f863 	bl	8000d84 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc0:	e011      	b.n	8003ce6 <HAL_RCC_OscConfig+0x2ce>
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	42470000 	.word	0x42470000
 8003ccc:	42470e80 	.word	0x42470e80
 8003cd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd4:	f7fd f856 	bl	8000d84 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e106      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce6:	4b85      	ldr	r3, [pc, #532]	; (8003efc <HAL_RCC_OscConfig+0x4e4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d106      	bne.n	8003d08 <HAL_RCC_OscConfig+0x2f0>
 8003cfa:	4b81      	ldr	r3, [pc, #516]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	4a80      	ldr	r2, [pc, #512]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	6713      	str	r3, [r2, #112]	; 0x70
 8003d06:	e01c      	b.n	8003d42 <HAL_RCC_OscConfig+0x32a>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b05      	cmp	r3, #5
 8003d0e:	d10c      	bne.n	8003d2a <HAL_RCC_OscConfig+0x312>
 8003d10:	4b7b      	ldr	r3, [pc, #492]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	4a7a      	ldr	r2, [pc, #488]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003d16:	f043 0304 	orr.w	r3, r3, #4
 8003d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1c:	4b78      	ldr	r3, [pc, #480]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d20:	4a77      	ldr	r2, [pc, #476]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	6713      	str	r3, [r2, #112]	; 0x70
 8003d28:	e00b      	b.n	8003d42 <HAL_RCC_OscConfig+0x32a>
 8003d2a:	4b75      	ldr	r3, [pc, #468]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	4a74      	ldr	r2, [pc, #464]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003d30:	f023 0301 	bic.w	r3, r3, #1
 8003d34:	6713      	str	r3, [r2, #112]	; 0x70
 8003d36:	4b72      	ldr	r3, [pc, #456]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3a:	4a71      	ldr	r2, [pc, #452]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003d3c:	f023 0304 	bic.w	r3, r3, #4
 8003d40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d015      	beq.n	8003d76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4a:	f7fd f81b 	bl	8000d84 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d50:	e00a      	b.n	8003d68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d52:	f7fd f817 	bl	8000d84 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e0c5      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d68:	4b65      	ldr	r3, [pc, #404]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0ee      	beq.n	8003d52 <HAL_RCC_OscConfig+0x33a>
 8003d74:	e014      	b.n	8003da0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d76:	f7fd f805 	bl	8000d84 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7c:	e00a      	b.n	8003d94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d7e:	f7fd f801 	bl	8000d84 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e0af      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d94:	4b5a      	ldr	r3, [pc, #360]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1ee      	bne.n	8003d7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003da0:	7dfb      	ldrb	r3, [r7, #23]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d105      	bne.n	8003db2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da6:	4b56      	ldr	r3, [pc, #344]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	4a55      	ldr	r2, [pc, #340]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 809b 	beq.w	8003ef2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dbc:	4b50      	ldr	r3, [pc, #320]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 030c 	and.w	r3, r3, #12
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d05c      	beq.n	8003e82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d141      	bne.n	8003e54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd0:	4b4c      	ldr	r3, [pc, #304]	; (8003f04 <HAL_RCC_OscConfig+0x4ec>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd6:	f7fc ffd5 	bl	8000d84 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dde:	f7fc ffd1 	bl	8000d84 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e081      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df0:	4b43      	ldr	r3, [pc, #268]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f0      	bne.n	8003dde <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	019b      	lsls	r3, r3, #6
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	3b01      	subs	r3, #1
 8003e16:	041b      	lsls	r3, r3, #16
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	061b      	lsls	r3, r3, #24
 8003e20:	4937      	ldr	r1, [pc, #220]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e26:	4b37      	ldr	r3, [pc, #220]	; (8003f04 <HAL_RCC_OscConfig+0x4ec>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2c:	f7fc ffaa 	bl	8000d84 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e34:	f7fc ffa6 	bl	8000d84 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e056      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e46:	4b2e      	ldr	r3, [pc, #184]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0x41c>
 8003e52:	e04e      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e54:	4b2b      	ldr	r3, [pc, #172]	; (8003f04 <HAL_RCC_OscConfig+0x4ec>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5a:	f7fc ff93 	bl	8000d84 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e62:	f7fc ff8f 	bl	8000d84 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e03f      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e74:	4b22      	ldr	r3, [pc, #136]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f0      	bne.n	8003e62 <HAL_RCC_OscConfig+0x44a>
 8003e80:	e037      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e032      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e8e:	4b1c      	ldr	r3, [pc, #112]	; (8003f00 <HAL_RCC_OscConfig+0x4e8>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d028      	beq.n	8003eee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d121      	bne.n	8003eee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d11a      	bne.n	8003eee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ec4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d111      	bne.n	8003eee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	085b      	lsrs	r3, r3, #1
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d107      	bne.n	8003eee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d001      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40007000 	.word	0x40007000
 8003f00:	40023800 	.word	0x40023800
 8003f04:	42470060 	.word	0x42470060

08003f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e0cc      	b.n	80040b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f1c:	4b68      	ldr	r3, [pc, #416]	; (80040c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d90c      	bls.n	8003f44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2a:	4b65      	ldr	r3, [pc, #404]	; (80040c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f32:	4b63      	ldr	r3, [pc, #396]	; (80040c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d001      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0b8      	b.n	80040b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d020      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f5c:	4b59      	ldr	r3, [pc, #356]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	4a58      	ldr	r2, [pc, #352]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d005      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f74:	4b53      	ldr	r3, [pc, #332]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	4a52      	ldr	r2, [pc, #328]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f80:	4b50      	ldr	r3, [pc, #320]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	494d      	ldr	r1, [pc, #308]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d044      	beq.n	8004028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d107      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa6:	4b47      	ldr	r3, [pc, #284]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d119      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e07f      	b.n	80040b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d003      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d107      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc6:	4b3f      	ldr	r3, [pc, #252]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d109      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e06f      	b.n	80040b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd6:	4b3b      	ldr	r3, [pc, #236]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e067      	b.n	80040b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fe6:	4b37      	ldr	r3, [pc, #220]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f023 0203 	bic.w	r2, r3, #3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	4934      	ldr	r1, [pc, #208]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ff8:	f7fc fec4 	bl	8000d84 <HAL_GetTick>
 8003ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ffe:	e00a      	b.n	8004016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004000:	f7fc fec0 	bl	8000d84 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	f241 3288 	movw	r2, #5000	; 0x1388
 800400e:	4293      	cmp	r3, r2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e04f      	b.n	80040b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004016:	4b2b      	ldr	r3, [pc, #172]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 020c 	and.w	r2, r3, #12
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	429a      	cmp	r2, r3
 8004026:	d1eb      	bne.n	8004000 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004028:	4b25      	ldr	r3, [pc, #148]	; (80040c0 <HAL_RCC_ClockConfig+0x1b8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d20c      	bcs.n	8004050 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004036:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800403e:	4b20      	ldr	r3, [pc, #128]	; (80040c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d001      	beq.n	8004050 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e032      	b.n	80040b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800405c:	4b19      	ldr	r3, [pc, #100]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4916      	ldr	r1, [pc, #88]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	4313      	orrs	r3, r2
 800406c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d009      	beq.n	800408e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800407a:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	490e      	ldr	r1, [pc, #56]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	4313      	orrs	r3, r2
 800408c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800408e:	f000 f821 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 8004092:	4602      	mov	r2, r0
 8004094:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	091b      	lsrs	r3, r3, #4
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	490a      	ldr	r1, [pc, #40]	; (80040c8 <HAL_RCC_ClockConfig+0x1c0>)
 80040a0:	5ccb      	ldrb	r3, [r1, r3]
 80040a2:	fa22 f303 	lsr.w	r3, r2, r3
 80040a6:	4a09      	ldr	r2, [pc, #36]	; (80040cc <HAL_RCC_ClockConfig+0x1c4>)
 80040a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040aa:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <HAL_RCC_ClockConfig+0x1c8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fc fe24 	bl	8000cfc <HAL_InitTick>

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40023c00 	.word	0x40023c00
 80040c4:	40023800 	.word	0x40023800
 80040c8:	08006dd0 	.word	0x08006dd0
 80040cc:	20000000 	.word	0x20000000
 80040d0:	20000004 	.word	0x20000004

080040d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	607b      	str	r3, [r7, #4]
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	2300      	movs	r3, #0
 80040e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040ec:	4b67      	ldr	r3, [pc, #412]	; (800428c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 030c 	and.w	r3, r3, #12
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d00d      	beq.n	8004114 <HAL_RCC_GetSysClockFreq+0x40>
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	f200 80bd 	bhi.w	8004278 <HAL_RCC_GetSysClockFreq+0x1a4>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <HAL_RCC_GetSysClockFreq+0x34>
 8004102:	2b04      	cmp	r3, #4
 8004104:	d003      	beq.n	800410e <HAL_RCC_GetSysClockFreq+0x3a>
 8004106:	e0b7      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004108:	4b61      	ldr	r3, [pc, #388]	; (8004290 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800410a:	60bb      	str	r3, [r7, #8]
       break;
 800410c:	e0b7      	b.n	800427e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800410e:	4b61      	ldr	r3, [pc, #388]	; (8004294 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004110:	60bb      	str	r3, [r7, #8]
      break;
 8004112:	e0b4      	b.n	800427e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004114:	4b5d      	ldr	r3, [pc, #372]	; (800428c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800411c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800411e:	4b5b      	ldr	r3, [pc, #364]	; (800428c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d04d      	beq.n	80041c6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800412a:	4b58      	ldr	r3, [pc, #352]	; (800428c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	099b      	lsrs	r3, r3, #6
 8004130:	461a      	mov	r2, r3
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	f240 10ff 	movw	r0, #511	; 0x1ff
 800413a:	f04f 0100 	mov.w	r1, #0
 800413e:	ea02 0800 	and.w	r8, r2, r0
 8004142:	ea03 0901 	and.w	r9, r3, r1
 8004146:	4640      	mov	r0, r8
 8004148:	4649      	mov	r1, r9
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	014b      	lsls	r3, r1, #5
 8004154:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004158:	0142      	lsls	r2, r0, #5
 800415a:	4610      	mov	r0, r2
 800415c:	4619      	mov	r1, r3
 800415e:	ebb0 0008 	subs.w	r0, r0, r8
 8004162:	eb61 0109 	sbc.w	r1, r1, r9
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	018b      	lsls	r3, r1, #6
 8004170:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004174:	0182      	lsls	r2, r0, #6
 8004176:	1a12      	subs	r2, r2, r0
 8004178:	eb63 0301 	sbc.w	r3, r3, r1
 800417c:	f04f 0000 	mov.w	r0, #0
 8004180:	f04f 0100 	mov.w	r1, #0
 8004184:	00d9      	lsls	r1, r3, #3
 8004186:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800418a:	00d0      	lsls	r0, r2, #3
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	eb12 0208 	adds.w	r2, r2, r8
 8004194:	eb43 0309 	adc.w	r3, r3, r9
 8004198:	f04f 0000 	mov.w	r0, #0
 800419c:	f04f 0100 	mov.w	r1, #0
 80041a0:	0259      	lsls	r1, r3, #9
 80041a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80041a6:	0250      	lsls	r0, r2, #9
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4610      	mov	r0, r2
 80041ae:	4619      	mov	r1, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	461a      	mov	r2, r3
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	f7fc f806 	bl	80001c8 <__aeabi_uldivmod>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4613      	mov	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e04a      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c6:	4b31      	ldr	r3, [pc, #196]	; (800428c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	099b      	lsrs	r3, r3, #6
 80041cc:	461a      	mov	r2, r3
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041d6:	f04f 0100 	mov.w	r1, #0
 80041da:	ea02 0400 	and.w	r4, r2, r0
 80041de:	ea03 0501 	and.w	r5, r3, r1
 80041e2:	4620      	mov	r0, r4
 80041e4:	4629      	mov	r1, r5
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	014b      	lsls	r3, r1, #5
 80041f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041f4:	0142      	lsls	r2, r0, #5
 80041f6:	4610      	mov	r0, r2
 80041f8:	4619      	mov	r1, r3
 80041fa:	1b00      	subs	r0, r0, r4
 80041fc:	eb61 0105 	sbc.w	r1, r1, r5
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	018b      	lsls	r3, r1, #6
 800420a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800420e:	0182      	lsls	r2, r0, #6
 8004210:	1a12      	subs	r2, r2, r0
 8004212:	eb63 0301 	sbc.w	r3, r3, r1
 8004216:	f04f 0000 	mov.w	r0, #0
 800421a:	f04f 0100 	mov.w	r1, #0
 800421e:	00d9      	lsls	r1, r3, #3
 8004220:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004224:	00d0      	lsls	r0, r2, #3
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	1912      	adds	r2, r2, r4
 800422c:	eb45 0303 	adc.w	r3, r5, r3
 8004230:	f04f 0000 	mov.w	r0, #0
 8004234:	f04f 0100 	mov.w	r1, #0
 8004238:	0299      	lsls	r1, r3, #10
 800423a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800423e:	0290      	lsls	r0, r2, #10
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4610      	mov	r0, r2
 8004246:	4619      	mov	r1, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	461a      	mov	r2, r3
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	f7fb ffba 	bl	80001c8 <__aeabi_uldivmod>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4613      	mov	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	0c1b      	lsrs	r3, r3, #16
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	3301      	adds	r3, #1
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	fbb2 f3f3 	udiv	r3, r2, r3
 8004274:	60bb      	str	r3, [r7, #8]
      break;
 8004276:	e002      	b.n	800427e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004278:	4b05      	ldr	r3, [pc, #20]	; (8004290 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800427a:	60bb      	str	r3, [r7, #8]
      break;
 800427c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800427e:	68bb      	ldr	r3, [r7, #8]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800428a:	bf00      	nop
 800428c:	40023800 	.word	0x40023800
 8004290:	00f42400 	.word	0x00f42400
 8004294:	007a1200 	.word	0x007a1200

08004298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800429c:	4b03      	ldr	r3, [pc, #12]	; (80042ac <HAL_RCC_GetHCLKFreq+0x14>)
 800429e:	681b      	ldr	r3, [r3, #0]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	20000000 	.word	0x20000000

080042b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042b4:	f7ff fff0 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 80042b8:	4602      	mov	r2, r0
 80042ba:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	0a9b      	lsrs	r3, r3, #10
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	4903      	ldr	r1, [pc, #12]	; (80042d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042c6:	5ccb      	ldrb	r3, [r1, r3]
 80042c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40023800 	.word	0x40023800
 80042d4:	08006de0 	.word	0x08006de0

080042d8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d105      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d035      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004300:	4b62      	ldr	r3, [pc, #392]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004306:	f7fc fd3d 	bl	8000d84 <HAL_GetTick>
 800430a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800430c:	e008      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800430e:	f7fc fd39 	bl	8000d84 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e0b0      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004320:	4b5b      	ldr	r3, [pc, #364]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1f0      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	019a      	lsls	r2, r3, #6
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	071b      	lsls	r3, r3, #28
 8004338:	4955      	ldr	r1, [pc, #340]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004340:	4b52      	ldr	r3, [pc, #328]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004342:	2201      	movs	r2, #1
 8004344:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004346:	f7fc fd1d 	bl	8000d84 <HAL_GetTick>
 800434a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800434c:	e008      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800434e:	f7fc fd19 	bl	8000d84 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e090      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004360:	4b4b      	ldr	r3, [pc, #300]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f0      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 8083 	beq.w	8004480 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	4b44      	ldr	r3, [pc, #272]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	4a43      	ldr	r2, [pc, #268]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004388:	6413      	str	r3, [r2, #64]	; 0x40
 800438a:	4b41      	ldr	r3, [pc, #260]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004396:	4b3f      	ldr	r3, [pc, #252]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a3e      	ldr	r2, [pc, #248]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800439c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043a2:	f7fc fcef 	bl	8000d84 <HAL_GetTick>
 80043a6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043a8:	e008      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043aa:	f7fc fceb 	bl	8000d84 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e062      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043bc:	4b35      	ldr	r3, [pc, #212]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0f0      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043c8:	4b31      	ldr	r3, [pc, #196]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d02f      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d028      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043e6:	4b2a      	ldr	r3, [pc, #168]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043f0:	4b29      	ldr	r3, [pc, #164]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043f6:	4b28      	ldr	r3, [pc, #160]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043fc:	4a24      	ldr	r2, [pc, #144]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004402:	4b23      	ldr	r3, [pc, #140]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b01      	cmp	r3, #1
 800440c:	d114      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800440e:	f7fc fcb9 	bl	8000d84 <HAL_GetTick>
 8004412:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004414:	e00a      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004416:	f7fc fcb5 	bl	8000d84 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f241 3288 	movw	r2, #5000	; 0x1388
 8004424:	4293      	cmp	r3, r2
 8004426:	d901      	bls.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e02a      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800442c:	4b18      	ldr	r3, [pc, #96]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0ee      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004440:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004444:	d10d      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445a:	490d      	ldr	r1, [pc, #52]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445c:	4313      	orrs	r3, r2
 800445e:	608b      	str	r3, [r1, #8]
 8004460:	e005      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	4a0a      	ldr	r2, [pc, #40]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004468:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800446c:	6093      	str	r3, [r2, #8]
 800446e:	4b08      	ldr	r3, [pc, #32]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004470:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447a:	4905      	ldr	r1, [pc, #20]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800447c:	4313      	orrs	r3, r2
 800447e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	42470068 	.word	0x42470068
 8004490:	40023800 	.word	0x40023800
 8004494:	40007000 	.word	0x40007000
 8004498:	42470e40 	.word	0x42470e40

0800449c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d13e      	bne.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044ba:	4b23      	ldr	r3, [pc, #140]	; (8004548 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d005      	beq.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d12f      	bne.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044d0:	4b1e      	ldr	r3, [pc, #120]	; (800454c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044d2:	617b      	str	r3, [r7, #20]
          break;
 80044d4:	e02f      	b.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044d6:	4b1c      	ldr	r3, [pc, #112]	; (8004548 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044e2:	d108      	bne.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044e4:	4b18      	ldr	r3, [pc, #96]	; (8004548 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044ec:	4a18      	ldr	r2, [pc, #96]	; (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	e007      	b.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044f6:	4b14      	ldr	r3, [pc, #80]	; (8004548 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044fe:	4a15      	ldr	r2, [pc, #84]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004500:	fbb2 f3f3 	udiv	r3, r2, r3
 8004504:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450c:	099b      	lsrs	r3, r3, #6
 800450e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	fb02 f303 	mul.w	r3, r2, r3
 8004518:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800451a:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800451c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004520:	0f1b      	lsrs	r3, r3, #28
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	fbb2 f3f3 	udiv	r3, r2, r3
 800452c:	617b      	str	r3, [r7, #20]
          break;
 800452e:	e002      	b.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]
          break;
 8004534:	bf00      	nop
        }
      }
      break;
 8004536:	bf00      	nop
    }
  }
  return frequency;
 8004538:	697b      	ldr	r3, [r7, #20]
}
 800453a:	4618      	mov	r0, r3
 800453c:	371c      	adds	r7, #28
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40023800 	.word	0x40023800
 800454c:	00bb8000 	.word	0x00bb8000
 8004550:	007a1200 	.word	0x007a1200
 8004554:	00f42400 	.word	0x00f42400

08004558 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e07b      	b.n	8004662 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	2b00      	cmp	r3, #0
 8004570:	d108      	bne.n	8004584 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800457a:	d009      	beq.n	8004590 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	61da      	str	r2, [r3, #28]
 8004582:	e005      	b.n	8004590 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fc fa96 	bl	8000adc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004614:	ea42 0103 	orr.w	r1, r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	0c1b      	lsrs	r3, r3, #16
 800462e:	f003 0104 	and.w	r1, r3, #4
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	f003 0210 	and.w	r2, r3, #16
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004650:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800466a:	b084      	sub	sp, #16
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	f107 001c 	add.w	r0, r7, #28
 8004678:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800467c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467e:	2b01      	cmp	r3, #1
 8004680:	d122      	bne.n	80046c8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d105      	bne.n	80046bc <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f99f 	bl	8004a00 <USB_CoreReset>
 80046c2:	4603      	mov	r3, r0
 80046c4:	73fb      	strb	r3, [r7, #15]
 80046c6:	e01a      	b.n	80046fe <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f993 	bl	8004a00 <USB_CoreReset>
 80046da:	4603      	mov	r3, r0
 80046dc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80046de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d106      	bne.n	80046f2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	639a      	str	r2, [r3, #56]	; 0x38
 80046f0:	e005      	b.n	80046fe <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	2b01      	cmp	r3, #1
 8004702:	d10b      	bne.n	800471c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f043 0206 	orr.w	r2, r3, #6
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f043 0220 	orr.w	r2, r3, #32
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800471c:	7bfb      	ldrb	r3, [r7, #15]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004728:	b004      	add	sp, #16
 800472a:	4770      	bx	lr

0800472c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f043 0201 	orr.w	r2, r3, #1
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f023 0201 	bic.w	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d115      	bne.n	80047be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800479e:	2001      	movs	r0, #1
 80047a0:	f7fc fafc 	bl	8000d9c <HAL_Delay>
      ms++;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3301      	adds	r3, #1
 80047a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f919 	bl	80049e2 <USB_GetMode>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d01e      	beq.n	80047f4 <USB_SetCurrentMode+0x84>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b31      	cmp	r3, #49	; 0x31
 80047ba:	d9f0      	bls.n	800479e <USB_SetCurrentMode+0x2e>
 80047bc:	e01a      	b.n	80047f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d115      	bne.n	80047f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047d0:	2001      	movs	r0, #1
 80047d2:	f7fc fae3 	bl	8000d9c <HAL_Delay>
      ms++;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3301      	adds	r3, #1
 80047da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f900 	bl	80049e2 <USB_GetMode>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <USB_SetCurrentMode+0x84>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b31      	cmp	r3, #49	; 0x31
 80047ec:	d9f0      	bls.n	80047d0 <USB_SetCurrentMode+0x60>
 80047ee:	e001      	b.n	80047f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e005      	b.n	8004800 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b32      	cmp	r3, #50	; 0x32
 80047f8:	d101      	bne.n	80047fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	019b      	lsls	r3, r3, #6
 800481a:	f043 0220 	orr.w	r2, r3, #32
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3301      	adds	r3, #1
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	4a08      	ldr	r2, [pc, #32]	; (800484c <USB_FlushTxFifo+0x44>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e006      	b.n	8004840 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	2b20      	cmp	r3, #32
 800483c:	d0f1      	beq.n	8004822 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	00030d40 	.word	0x00030d40

08004850 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2210      	movs	r2, #16
 8004860:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3301      	adds	r3, #1
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	4a08      	ldr	r2, [pc, #32]	; (800488c <USB_FlushRxFifo+0x3c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d901      	bls.n	8004872 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e006      	b.n	8004880 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0310 	and.w	r3, r3, #16
 800487a:	2b10      	cmp	r3, #16
 800487c:	d0f1      	beq.n	8004862 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	00030d40 	.word	0x00030d40

08004890 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004890:	b480      	push	{r7}
 8004892:	b089      	sub	sp, #36	; 0x24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	4611      	mov	r1, r2
 800489c:	461a      	mov	r2, r3
 800489e:	460b      	mov	r3, r1
 80048a0:	71fb      	strb	r3, [r7, #7]
 80048a2:	4613      	mov	r3, r2
 80048a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80048ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d123      	bne.n	80048fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80048b6:	88bb      	ldrh	r3, [r7, #4]
 80048b8:	3303      	adds	r3, #3
 80048ba:	089b      	lsrs	r3, r3, #2
 80048bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80048be:	2300      	movs	r3, #0
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	e018      	b.n	80048f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	031a      	lsls	r2, r3, #12
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d0:	461a      	mov	r2, r3
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	3301      	adds	r3, #1
 80048dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	3301      	adds	r3, #1
 80048e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	3301      	adds	r3, #1
 80048e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	3301      	adds	r3, #1
 80048ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	3301      	adds	r3, #1
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d3e2      	bcc.n	80048c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3724      	adds	r7, #36	; 0x24
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800490c:	b480      	push	{r7}
 800490e:	b08b      	sub	sp, #44	; 0x2c
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	4613      	mov	r3, r2
 8004918:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004922:	88fb      	ldrh	r3, [r7, #6]
 8004924:	089b      	lsrs	r3, r3, #2
 8004926:	b29b      	uxth	r3, r3
 8004928:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004932:	2300      	movs	r3, #0
 8004934:	623b      	str	r3, [r7, #32]
 8004936:	e014      	b.n	8004962 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	601a      	str	r2, [r3, #0]
    pDest++;
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	3301      	adds	r3, #1
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	3301      	adds	r3, #1
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	3301      	adds	r3, #1
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	3301      	adds	r3, #1
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	3301      	adds	r3, #1
 8004960:	623b      	str	r3, [r7, #32]
 8004962:	6a3a      	ldr	r2, [r7, #32]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	429a      	cmp	r2, r3
 8004968:	d3e6      	bcc.n	8004938 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800496a:	8bfb      	ldrh	r3, [r7, #30]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01e      	beq.n	80049ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800497a:	461a      	mov	r2, r3
 800497c:	f107 0310 	add.w	r3, r7, #16
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
 8004990:	b2da      	uxtb	r2, r3
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	701a      	strb	r2, [r3, #0]
      i++;
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	3301      	adds	r3, #1
 800499a:	623b      	str	r3, [r7, #32]
      pDest++;
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	3301      	adds	r3, #1
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80049a2:	8bfb      	ldrh	r3, [r7, #30]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80049a8:	8bfb      	ldrh	r3, [r7, #30]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1ea      	bne.n	8004984 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	372c      	adds	r7, #44	; 0x2c
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4013      	ands	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049d4:	68fb      	ldr	r3, [r7, #12]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f003 0301 	and.w	r3, r3, #1
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	4a13      	ldr	r2, [pc, #76]	; (8004a60 <USB_CoreReset+0x60>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d901      	bls.n	8004a1c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e01a      	b.n	8004a52 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	daf3      	bge.n	8004a0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f043 0201 	orr.w	r2, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	3301      	adds	r3, #1
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	4a09      	ldr	r2, [pc, #36]	; (8004a60 <USB_CoreReset+0x60>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d901      	bls.n	8004a44 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e006      	b.n	8004a52 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d0f1      	beq.n	8004a34 <USB_CoreReset+0x34>

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	00030d40 	.word	0x00030d40

08004a64 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a64:	b084      	sub	sp, #16
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b084      	sub	sp, #16
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
 8004a6e:	f107 001c 	add.w	r0, r7, #28
 8004a72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a80:	461a      	mov	r2, r3
 8004a82:	2300      	movs	r3, #0
 8004a84:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d018      	beq.n	8004ae8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d10a      	bne.n	8004ad2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004aca:	f043 0304 	orr.w	r3, r3, #4
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	e014      	b.n	8004afc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ae0:	f023 0304 	bic.w	r3, r3, #4
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e009      	b.n	8004afc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004af6:	f023 0304 	bic.w	r3, r3, #4
 8004afa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004afc:	2110      	movs	r1, #16
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff fe82 	bl	8004808 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff fea3 	bl	8004850 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	e015      	b.n	8004b3c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b22:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b30:	461a      	mov	r2, r3
 8004b32:	2300      	movs	r3, #0
 8004b34:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d3e5      	bcc.n	8004b10 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b50:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a13      	ldr	r2, [pc, #76]	; (8004bb8 <USB_HostInit+0x154>)
 8004b6a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a13      	ldr	r2, [pc, #76]	; (8004bbc <USB_HostInit+0x158>)
 8004b70:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004b74:	e009      	b.n	8004b8a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2280      	movs	r2, #128	; 0x80
 8004b7a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a10      	ldr	r2, [pc, #64]	; (8004bc0 <USB_HostInit+0x15c>)
 8004b80:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a0f      	ldr	r2, [pc, #60]	; (8004bc4 <USB_HostInit+0x160>)
 8004b86:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d105      	bne.n	8004b9c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	f043 0210 	orr.w	r2, r3, #16
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699a      	ldr	r2, [r3, #24]
 8004ba0:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <USB_HostInit+0x164>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bb4:	b004      	add	sp, #16
 8004bb6:	4770      	bx	lr
 8004bb8:	01000200 	.word	0x01000200
 8004bbc:	00e00300 	.word	0x00e00300
 8004bc0:	00600080 	.word	0x00600080
 8004bc4:	004000e0 	.word	0x004000e0
 8004bc8:	a3200008 	.word	0xa3200008

08004bcc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bea:	f023 0303 	bic.w	r3, r3, #3
 8004bee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	68f9      	ldr	r1, [r7, #12]
 8004c00:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c04:	4313      	orrs	r3, r2
 8004c06:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d107      	bne.n	8004c1e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c14:	461a      	mov	r2, r3
 8004c16:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004c1a:	6053      	str	r3, [r2, #4]
 8004c1c:	e009      	b.n	8004c32 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d106      	bne.n	8004c32 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004c30:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c64:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <USB_DriveVbus+0x44>
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d106      	bne.n	8004c84 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c82:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8e:	d109      	bne.n	8004ca4 <USB_DriveVbus+0x64>
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d106      	bne.n	8004ca4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ca2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b085      	sub	sp, #20
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	0c5b      	lsrs	r3, r3, #17
 8004cd0:	f003 0303 	and.w	r3, r3, #3
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	b29b      	uxth	r3, r3
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
	...

08004d04 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	4608      	mov	r0, r1
 8004d0e:	4611      	mov	r1, r2
 8004d10:	461a      	mov	r2, r3
 8004d12:	4603      	mov	r3, r0
 8004d14:	70fb      	strb	r3, [r7, #3]
 8004d16:	460b      	mov	r3, r1
 8004d18:	70bb      	strb	r3, [r7, #2]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004d26:	78fb      	ldrb	r3, [r7, #3]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d32:	461a      	mov	r2, r3
 8004d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d38:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004d3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d87e      	bhi.n	8004e40 <USB_HC_Init+0x13c>
 8004d42:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <USB_HC_Init+0x44>)
 8004d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d48:	08004d59 	.word	0x08004d59
 8004d4c:	08004e03 	.word	0x08004e03
 8004d50:	08004d59 	.word	0x08004d59
 8004d54:	08004dc5 	.word	0x08004dc5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d64:	461a      	mov	r2, r3
 8004d66:	f240 439d 	movw	r3, #1181	; 0x49d
 8004d6a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004d6c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	da10      	bge.n	8004d96 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d74:	78fb      	ldrb	r3, [r7, #3]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	78fa      	ldrb	r2, [r7, #3]
 8004d84:	0151      	lsls	r1, r2, #5
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	440a      	add	r2, r1
 8004d8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d92:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004d94:	e057      	b.n	8004e46 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d051      	beq.n	8004e46 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004da2:	78fb      	ldrb	r3, [r7, #3]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	78fa      	ldrb	r2, [r7, #3]
 8004db2:	0151      	lsls	r1, r2, #5
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	440a      	add	r2, r1
 8004db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dbc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004dc0:	60d3      	str	r3, [r2, #12]
      break;
 8004dc2:	e040      	b.n	8004e46 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f240 639d 	movw	r3, #1693	; 0x69d
 8004dd6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004dd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	da34      	bge.n	8004e4a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	78fa      	ldrb	r2, [r7, #3]
 8004df0:	0151      	lsls	r1, r2, #5
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	440a      	add	r2, r1
 8004df6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004e00:	e023      	b.n	8004e4a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e02:	78fb      	ldrb	r3, [r7, #3]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f240 2325 	movw	r3, #549	; 0x225
 8004e14:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	da17      	bge.n	8004e4e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004e1e:	78fb      	ldrb	r3, [r7, #3]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	78fa      	ldrb	r2, [r7, #3]
 8004e2e:	0151      	lsls	r1, r2, #5
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	440a      	add	r2, r1
 8004e34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e38:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004e3c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004e3e:	e006      	b.n	8004e4e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	77fb      	strb	r3, [r7, #31]
      break;
 8004e44:	e004      	b.n	8004e50 <USB_HC_Init+0x14c>
      break;
 8004e46:	bf00      	nop
 8004e48:	e002      	b.n	8004e50 <USB_HC_Init+0x14c>
      break;
 8004e4a:	bf00      	nop
 8004e4c:	e000      	b.n	8004e50 <USB_HC_Init+0x14c>
      break;
 8004e4e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e56:	699a      	ldr	r2, [r3, #24]
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	2101      	movs	r1, #1
 8004e60:	fa01 f303 	lsl.w	r3, r1, r3
 8004e64:	6939      	ldr	r1, [r7, #16]
 8004e66:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004e7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	da03      	bge.n	8004e8a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e86:	61bb      	str	r3, [r7, #24]
 8004e88:	e001      	b.n	8004e8e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff ff0f 	bl	8004cb2 <USB_GetHostSpeed>
 8004e94:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004e96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d106      	bne.n	8004eac <USB_HC_Init+0x1a8>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d003      	beq.n	8004eac <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004ea4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	e001      	b.n	8004eb0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004eb0:	787b      	ldrb	r3, [r7, #1]
 8004eb2:	059b      	lsls	r3, r3, #22
 8004eb4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004eb8:	78bb      	ldrb	r3, [r7, #2]
 8004eba:	02db      	lsls	r3, r3, #11
 8004ebc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ec0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004ec2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ec6:	049b      	lsls	r3, r3, #18
 8004ec8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ecc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ece:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004ed4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	0159      	lsls	r1, r3, #5
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	440b      	add	r3, r1
 8004ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004eec:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004eee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	d10f      	bne.n	8004f16 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004ef6:	78fb      	ldrb	r3, [r7, #3]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	78fa      	ldrb	r2, [r7, #3]
 8004f06:	0151      	lsls	r1, r2, #5
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	440a      	add	r2, r1
 8004f0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f14:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004f16:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08c      	sub	sp, #48	; 0x30
 8004f24:	af02      	add	r7, sp, #8
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	785b      	ldrb	r3, [r3, #1]
 8004f36:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f3c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d02d      	beq.n	8004fa6 <USB_HC_StartXfer+0x86>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	791b      	ldrb	r3, [r3, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d129      	bne.n	8004fa6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d117      	bne.n	8004f88 <USB_HC_StartXfer+0x68>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	79db      	ldrb	r3, [r3, #7]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <USB_HC_StartXfer+0x48>
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	79db      	ldrb	r3, [r3, #7]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d10f      	bne.n	8004f88 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	69fa      	ldr	r2, [r7, #28]
 8004f78:	0151      	lsls	r1, r2, #5
 8004f7a:	6a3a      	ldr	r2, [r7, #32]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f86:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10b      	bne.n	8004fa6 <USB_HC_StartXfer+0x86>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	795b      	ldrb	r3, [r3, #5]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d107      	bne.n	8004fa6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	785b      	ldrb	r3, [r3, #1]
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 fa2f 	bl	8005400 <USB_DoPing>
      return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e0f8      	b.n	8005198 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d018      	beq.n	8004fe0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	8912      	ldrh	r2, [r2, #8]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	8912      	ldrh	r2, [r2, #8]
 8004fbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fc2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004fc4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004fc6:	8b7b      	ldrh	r3, [r7, #26]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d90b      	bls.n	8004fe4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004fcc:	8b7b      	ldrh	r3, [r7, #26]
 8004fce:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004fd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	8912      	ldrh	r2, [r2, #8]
 8004fd6:	fb02 f203 	mul.w	r2, r2, r3
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	611a      	str	r2, [r3, #16]
 8004fde:	e001      	b.n	8004fe4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	78db      	ldrb	r3, [r3, #3]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d007      	beq.n	8004ffc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004fec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	8912      	ldrh	r2, [r2, #8]
 8004ff2:	fb02 f203 	mul.w	r2, r2, r3
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	611a      	str	r2, [r3, #16]
 8004ffa:	e003      	b.n	8005004 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	695a      	ldr	r2, [r3, #20]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800500c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800500e:	04d9      	lsls	r1, r3, #19
 8005010:	4b63      	ldr	r3, [pc, #396]	; (80051a0 <USB_HC_StartXfer+0x280>)
 8005012:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005014:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	7a9b      	ldrb	r3, [r3, #10]
 800501a:	075b      	lsls	r3, r3, #29
 800501c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005020:	69f9      	ldr	r1, [r7, #28]
 8005022:	0148      	lsls	r0, r1, #5
 8005024:	6a39      	ldr	r1, [r7, #32]
 8005026:	4401      	add	r1, r0
 8005028:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800502c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800502e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005030:	79fb      	ldrb	r3, [r7, #7]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	68d9      	ldr	r1, [r3, #12]
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	4413      	add	r3, r2
 8005042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005046:	460a      	mov	r2, r1
 8005048:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	bf0c      	ite	eq
 800505a:	2301      	moveq	r3, #1
 800505c:	2300      	movne	r3, #0
 800505e:	b2db      	uxtb	r3, r3
 8005060:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	4413      	add	r3, r2
 800506a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	0151      	lsls	r1, r2, #5
 8005074:	6a3a      	ldr	r2, [r7, #32]
 8005076:	440a      	add	r2, r1
 8005078:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800507c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005080:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	4413      	add	r3, r2
 800508a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	7e7b      	ldrb	r3, [r7, #25]
 8005092:	075b      	lsls	r3, r3, #29
 8005094:	69f9      	ldr	r1, [r7, #28]
 8005096:	0148      	lsls	r0, r1, #5
 8005098:	6a39      	ldr	r1, [r7, #32]
 800509a:	4401      	add	r1, r0
 800509c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80050a0:	4313      	orrs	r3, r2
 80050a2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050ba:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	78db      	ldrb	r3, [r3, #3]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d004      	beq.n	80050ce <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	e003      	b.n	80050d6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050d4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050dc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ea:	461a      	mov	r2, r3
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80050f0:	79fb      	ldrb	r3, [r7, #7]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	e04e      	b.n	8005198 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	78db      	ldrb	r3, [r3, #3]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d149      	bne.n	8005196 <USB_HC_StartXfer+0x276>
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d045      	beq.n	8005196 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	79db      	ldrb	r3, [r3, #7]
 800510e:	2b03      	cmp	r3, #3
 8005110:	d830      	bhi.n	8005174 <USB_HC_StartXfer+0x254>
 8005112:	a201      	add	r2, pc, #4	; (adr r2, 8005118 <USB_HC_StartXfer+0x1f8>)
 8005114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005118:	08005129 	.word	0x08005129
 800511c:	0800514d 	.word	0x0800514d
 8005120:	08005129 	.word	0x08005129
 8005124:	0800514d 	.word	0x0800514d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	3303      	adds	r3, #3
 800512e:	089b      	lsrs	r3, r3, #2
 8005130:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005132:	8afa      	ldrh	r2, [r7, #22]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005138:	b29b      	uxth	r3, r3
 800513a:	429a      	cmp	r2, r3
 800513c:	d91c      	bls.n	8005178 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	f043 0220 	orr.w	r2, r3, #32
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	619a      	str	r2, [r3, #24]
        }
        break;
 800514a:	e015      	b.n	8005178 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	3303      	adds	r3, #3
 8005152:	089b      	lsrs	r3, r3, #2
 8005154:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005156:	8afa      	ldrh	r2, [r7, #22]
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	b29b      	uxth	r3, r3
 8005162:	429a      	cmp	r2, r3
 8005164:	d90a      	bls.n	800517c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	619a      	str	r2, [r3, #24]
        }
        break;
 8005172:	e003      	b.n	800517c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005174:	bf00      	nop
 8005176:	e002      	b.n	800517e <USB_HC_StartXfer+0x25e>
        break;
 8005178:	bf00      	nop
 800517a:	e000      	b.n	800517e <USB_HC_StartXfer+0x25e>
        break;
 800517c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	68d9      	ldr	r1, [r3, #12]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	785a      	ldrb	r2, [r3, #1]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	b29b      	uxth	r3, r3
 800518c:	2000      	movs	r0, #0
 800518e:	9000      	str	r0, [sp, #0]
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f7ff fb7d 	bl	8004890 <USB_WritePacket>
  }

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3728      	adds	r7, #40	; 0x28
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	1ff80000 	.word	0x1ff80000

080051a4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	b29b      	uxth	r3, r3
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b089      	sub	sp, #36	; 0x24
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	460b      	mov	r3, r1
 80051d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80051d6:	78fb      	ldrb	r3, [r7, #3]
 80051d8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	0c9b      	lsrs	r3, r3, #18
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	0fdb      	lsrs	r3, r3, #31
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b20      	cmp	r3, #32
 8005214:	d104      	bne.n	8005220 <USB_HC_Halt+0x5a>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	e0e8      	b.n	80053f2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <USB_HC_Halt+0x66>
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2b02      	cmp	r3, #2
 800522a:	d173      	bne.n	8005314 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	4413      	add	r3, r2
 8005234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	0151      	lsls	r1, r2, #5
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	440a      	add	r2, r1
 8005242:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005246:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800524a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 0320 	and.w	r3, r3, #32
 8005254:	2b00      	cmp	r3, #0
 8005256:	f040 80cb 	bne.w	80053f0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d143      	bne.n	80052ee <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	4413      	add	r3, r2
 800526e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	0151      	lsls	r1, r2, #5
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	440a      	add	r2, r1
 800527c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005284:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	4413      	add	r3, r2
 800528e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	0151      	lsls	r1, r2, #5
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	440a      	add	r2, r1
 800529c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052a4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	0151      	lsls	r1, r2, #5
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	440a      	add	r2, r1
 80052bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052c4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	3301      	adds	r3, #1
 80052ca:	61fb      	str	r3, [r7, #28]
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052d2:	d81d      	bhi.n	8005310 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052ea:	d0ec      	beq.n	80052c6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80052ec:	e080      	b.n	80053f0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	0151      	lsls	r1, r2, #5
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	440a      	add	r2, r1
 8005304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005308:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800530c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800530e:	e06f      	b.n	80053f0 <USB_HC_Halt+0x22a>
            break;
 8005310:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005312:	e06d      	b.n	80053f0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	4413      	add	r3, r2
 800531c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	0151      	lsls	r1, r2, #5
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	440a      	add	r2, r1
 800532a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800532e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005332:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d143      	bne.n	80053cc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	4413      	add	r3, r2
 800534c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	0151      	lsls	r1, r2, #5
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	440a      	add	r2, r1
 800535a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800535e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005362:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	4413      	add	r3, r2
 800536c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	440a      	add	r2, r1
 800537a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800537e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005382:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	4413      	add	r3, r2
 800538c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	440a      	add	r2, r1
 800539a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800539e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053a2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	3301      	adds	r3, #1
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053b0:	d81d      	bhi.n	80053ee <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053c8:	d0ec      	beq.n	80053a4 <USB_HC_Halt+0x1de>
 80053ca:	e011      	b.n	80053f0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	0151      	lsls	r1, r2, #5
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	440a      	add	r2, r1
 80053e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	e000      	b.n	80053f0 <USB_HC_Halt+0x22a>
          break;
 80053ee:	bf00      	nop
    }
  }

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3724      	adds	r7, #36	; 0x24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
	...

08005400 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005414:	2301      	movs	r3, #1
 8005416:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	04da      	lsls	r2, r3, #19
 800541c:	4b15      	ldr	r3, [pc, #84]	; (8005474 <USB_DoPing+0x74>)
 800541e:	4013      	ands	r3, r2
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	0151      	lsls	r1, r2, #5
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	440a      	add	r2, r1
 8005428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800542c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005430:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	4413      	add	r3, r2
 800543a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005448:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005450:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	4413      	add	r3, r2
 800545a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545e:	461a      	mov	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	1ff80000 	.word	0x1ff80000

08005478 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7ff f960 	bl	800474e <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800548e:	2110      	movs	r1, #16
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7ff f9b9 	bl	8004808 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff f9da 	bl	8004850 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800549c:	2300      	movs	r3, #0
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	e01f      	b.n	80054e2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054b8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054c0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054c8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d6:	461a      	mov	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	3301      	adds	r3, #1
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b0f      	cmp	r3, #15
 80054e6:	d9dc      	bls.n	80054a2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80054e8:	2300      	movs	r3, #0
 80054ea:	613b      	str	r3, [r7, #16]
 80054ec:	e034      	b.n	8005558 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005504:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800550c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005514:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4413      	add	r3, r2
 800551e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005522:	461a      	mov	r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	3301      	adds	r3, #1
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005534:	d80c      	bhi.n	8005550 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4413      	add	r3, r2
 800553e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005548:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800554c:	d0ec      	beq.n	8005528 <USB_StopHost+0xb0>
 800554e:	e000      	b.n	8005552 <USB_StopHost+0xda>
        break;
 8005550:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	3301      	adds	r3, #1
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	2b0f      	cmp	r3, #15
 800555c:	d9c7      	bls.n	80054ee <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005564:	461a      	mov	r2, r3
 8005566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800556a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005572:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff f8d9 	bl	800472c <USB_EnableGlobalInt>

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005584:	b590      	push	{r4, r7, lr}
 8005586:	b089      	sub	sp, #36	; 0x24
 8005588:	af04      	add	r7, sp, #16
 800558a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800558c:	2301      	movs	r3, #1
 800558e:	2202      	movs	r2, #2
 8005590:	2102      	movs	r1, #2
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fc66 	bl	8005e64 <USBH_FindInterface>
 8005598:	4603      	mov	r3, r0
 800559a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2bff      	cmp	r3, #255	; 0xff
 80055a0:	d002      	beq.n	80055a8 <USBH_CDC_InterfaceInit+0x24>
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d901      	bls.n	80055ac <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80055a8:	2302      	movs	r3, #2
 80055aa:	e13d      	b.n	8005828 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
 80055ae:	4619      	mov	r1, r3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fc3b 	bl	8005e2c <USBH_SelectInterface>
 80055b6:	4603      	mov	r3, r0
 80055b8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80055ba:	7bbb      	ldrb	r3, [r7, #14]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80055c0:	2302      	movs	r3, #2
 80055c2:	e131      	b.n	8005828 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80055ca:	2050      	movs	r0, #80	; 0x50
 80055cc:	f001 fb12 	bl	8006bf4 <malloc>
 80055d0:	4603      	mov	r3, r0
 80055d2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80055e4:	2302      	movs	r3, #2
 80055e6:	e11f      	b.n	8005828 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80055e8:	2250      	movs	r2, #80	; 0x50
 80055ea:	2100      	movs	r1, #0
 80055ec:	68b8      	ldr	r0, [r7, #8]
 80055ee:	f001 fb11 	bl	8006c14 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	211a      	movs	r1, #26
 80055f8:	fb01 f303 	mul.w	r3, r1, r3
 80055fc:	4413      	add	r3, r2
 80055fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	b25b      	sxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	da15      	bge.n	8005636 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	211a      	movs	r1, #26
 8005610:	fb01 f303 	mul.w	r3, r1, r3
 8005614:	4413      	add	r3, r2
 8005616:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800561a:	781a      	ldrb	r2, [r3, #0]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005620:	7bfb      	ldrb	r3, [r7, #15]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	211a      	movs	r1, #26
 8005626:	fb01 f303 	mul.w	r3, r1, r3
 800562a:	4413      	add	r3, r2
 800562c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005630:	881a      	ldrh	r2, [r3, #0]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	785b      	ldrb	r3, [r3, #1]
 800563a:	4619      	mov	r1, r3
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 ff9c 	bl	800657a <USBH_AllocPipe>
 8005642:	4603      	mov	r3, r0
 8005644:	461a      	mov	r2, r3
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	7819      	ldrb	r1, [r3, #0]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	7858      	ldrb	r0, [r3, #1]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	8952      	ldrh	r2, [r2, #10]
 8005662:	9202      	str	r2, [sp, #8]
 8005664:	2203      	movs	r2, #3
 8005666:	9201      	str	r2, [sp, #4]
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	4623      	mov	r3, r4
 800566c:	4602      	mov	r2, r0
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 ff54 	bl	800651c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2200      	movs	r2, #0
 800567a:	4619      	mov	r1, r3
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f001 fa17 	bl	8006ab0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005682:	2300      	movs	r3, #0
 8005684:	2200      	movs	r2, #0
 8005686:	210a      	movs	r1, #10
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fbeb 	bl	8005e64 <USBH_FindInterface>
 800568e:	4603      	mov	r3, r0
 8005690:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005692:	7bfb      	ldrb	r3, [r7, #15]
 8005694:	2bff      	cmp	r3, #255	; 0xff
 8005696:	d002      	beq.n	800569e <USBH_CDC_InterfaceInit+0x11a>
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d901      	bls.n	80056a2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800569e:	2302      	movs	r3, #2
 80056a0:	e0c2      	b.n	8005828 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	211a      	movs	r1, #26
 80056a8:	fb01 f303 	mul.w	r3, r1, r3
 80056ac:	4413      	add	r3, r2
 80056ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	b25b      	sxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	da16      	bge.n	80056e8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	211a      	movs	r1, #26
 80056c0:	fb01 f303 	mul.w	r3, r1, r3
 80056c4:	4413      	add	r3, r2
 80056c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056ca:	781a      	ldrb	r2, [r3, #0]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	211a      	movs	r1, #26
 80056d6:	fb01 f303 	mul.w	r3, r1, r3
 80056da:	4413      	add	r3, r2
 80056dc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80056e0:	881a      	ldrh	r2, [r3, #0]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	835a      	strh	r2, [r3, #26]
 80056e6:	e015      	b.n	8005714 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	211a      	movs	r1, #26
 80056ee:	fb01 f303 	mul.w	r3, r1, r3
 80056f2:	4413      	add	r3, r2
 80056f4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056f8:	781a      	ldrb	r2, [r3, #0]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	211a      	movs	r1, #26
 8005704:	fb01 f303 	mul.w	r3, r1, r3
 8005708:	4413      	add	r3, r2
 800570a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800570e:	881a      	ldrh	r2, [r3, #0]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005714:	7bfb      	ldrb	r3, [r7, #15]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	211a      	movs	r1, #26
 800571a:	fb01 f303 	mul.w	r3, r1, r3
 800571e:	4413      	add	r3, r2
 8005720:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	b25b      	sxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	da16      	bge.n	800575a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	211a      	movs	r1, #26
 8005732:	fb01 f303 	mul.w	r3, r1, r3
 8005736:	4413      	add	r3, r2
 8005738:	f203 3356 	addw	r3, r3, #854	; 0x356
 800573c:	781a      	ldrb	r2, [r3, #0]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005742:	7bfb      	ldrb	r3, [r7, #15]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	211a      	movs	r1, #26
 8005748:	fb01 f303 	mul.w	r3, r1, r3
 800574c:	4413      	add	r3, r2
 800574e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005752:	881a      	ldrh	r2, [r3, #0]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	835a      	strh	r2, [r3, #26]
 8005758:	e015      	b.n	8005786 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800575a:	7bfb      	ldrb	r3, [r7, #15]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	211a      	movs	r1, #26
 8005760:	fb01 f303 	mul.w	r3, r1, r3
 8005764:	4413      	add	r3, r2
 8005766:	f203 3356 	addw	r3, r3, #854	; 0x356
 800576a:	781a      	ldrb	r2, [r3, #0]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	211a      	movs	r1, #26
 8005776:	fb01 f303 	mul.w	r3, r1, r3
 800577a:	4413      	add	r3, r2
 800577c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005780:	881a      	ldrh	r2, [r3, #0]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	7b9b      	ldrb	r3, [r3, #14]
 800578a:	4619      	mov	r1, r3
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 fef4 	bl	800657a <USBH_AllocPipe>
 8005792:	4603      	mov	r3, r0
 8005794:	461a      	mov	r2, r3
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	7bdb      	ldrb	r3, [r3, #15]
 800579e:	4619      	mov	r1, r3
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 feea 	bl	800657a <USBH_AllocPipe>
 80057a6:	4603      	mov	r3, r0
 80057a8:	461a      	mov	r2, r3
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	7b59      	ldrb	r1, [r3, #13]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	7b98      	ldrb	r0, [r3, #14]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	8b12      	ldrh	r2, [r2, #24]
 80057c6:	9202      	str	r2, [sp, #8]
 80057c8:	2202      	movs	r2, #2
 80057ca:	9201      	str	r2, [sp, #4]
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	4623      	mov	r3, r4
 80057d0:	4602      	mov	r2, r0
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fea2 	bl	800651c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	7b19      	ldrb	r1, [r3, #12]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	7bd8      	ldrb	r0, [r3, #15]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	8b52      	ldrh	r2, [r2, #26]
 80057f0:	9202      	str	r2, [sp, #8]
 80057f2:	2202      	movs	r2, #2
 80057f4:	9201      	str	r2, [sp, #4]
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	4623      	mov	r3, r4
 80057fa:	4602      	mov	r2, r0
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fe8d 	bl	800651c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	7b5b      	ldrb	r3, [r3, #13]
 800580e:	2200      	movs	r2, #0
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f001 f94c 	bl	8006ab0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	7b1b      	ldrb	r3, [r3, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f001 f945 	bl	8006ab0 <USBH_LL_SetToggle>

  return USBH_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	bd90      	pop	{r4, r7, pc}

08005830 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00e      	beq.n	8005868 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	4619      	mov	r1, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fe82 	bl	800655a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	4619      	mov	r1, r3
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fead 	bl	80065bc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	7b1b      	ldrb	r3, [r3, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00e      	beq.n	800588e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	7b1b      	ldrb	r3, [r3, #12]
 8005874:	4619      	mov	r1, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fe6f 	bl	800655a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	7b1b      	ldrb	r3, [r3, #12]
 8005880:	4619      	mov	r1, r3
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fe9a 	bl	80065bc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	7b5b      	ldrb	r3, [r3, #13]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00e      	beq.n	80058b4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	7b5b      	ldrb	r3, [r3, #13]
 800589a:	4619      	mov	r1, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fe5c 	bl	800655a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	7b5b      	ldrb	r3, [r3, #13]
 80058a6:	4619      	mov	r1, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fe87 	bl	80065bc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00b      	beq.n	80058d8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f001 f99b 	bl	8006c04 <free>
    phost->pActiveClass->pData = 0U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058d4:	2200      	movs	r2, #0
 80058d6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b084      	sub	sp, #16
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3340      	adds	r3, #64	; 0x40
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f8b1 	bl	8005a62 <GetLineCoding>
 8005900:	4603      	mov	r3, r0
 8005902:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005904:	7afb      	ldrb	r3, [r7, #11]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d105      	bne.n	8005916 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005910:	2102      	movs	r1, #2
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005916:	7afb      	ldrb	r3, [r7, #11]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005928:	2301      	movs	r3, #1
 800592a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005940:	2b04      	cmp	r3, #4
 8005942:	d877      	bhi.n	8005a34 <USBH_CDC_Process+0x114>
 8005944:	a201      	add	r2, pc, #4	; (adr r2, 800594c <USBH_CDC_Process+0x2c>)
 8005946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594a:	bf00      	nop
 800594c:	08005961 	.word	0x08005961
 8005950:	08005967 	.word	0x08005967
 8005954:	08005997 	.word	0x08005997
 8005958:	08005a0b 	.word	0x08005a0b
 800595c:	08005a19 	.word	0x08005a19
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	73fb      	strb	r3, [r7, #15]
      break;
 8005964:	e06d      	b.n	8005a42 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800596a:	4619      	mov	r1, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f897 	bl	8005aa0 <SetLineCoding>
 8005972:	4603      	mov	r3, r0
 8005974:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005976:	7bbb      	ldrb	r3, [r7, #14]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d104      	bne.n	8005986 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005984:	e058      	b.n	8005a38 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005986:	7bbb      	ldrb	r3, [r7, #14]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d055      	beq.n	8005a38 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2204      	movs	r2, #4
 8005990:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005994:	e050      	b.n	8005a38 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	3340      	adds	r3, #64	; 0x40
 800599a:	4619      	mov	r1, r3
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f860 	bl	8005a62 <GetLineCoding>
 80059a2:	4603      	mov	r3, r0
 80059a4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80059a6:	7bbb      	ldrb	r3, [r7, #14]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d126      	bne.n	80059fa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059be:	791b      	ldrb	r3, [r3, #4]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d13b      	bne.n	8005a3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ce:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d133      	bne.n	8005a3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059de:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d12b      	bne.n	8005a3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ec:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d124      	bne.n	8005a3c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f958 	bl	8005ca8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80059f8:	e020      	b.n	8005a3c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80059fa:	7bbb      	ldrb	r3, [r7, #14]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d01d      	beq.n	8005a3c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2204      	movs	r2, #4
 8005a04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005a08:	e018      	b.n	8005a3c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f867 	bl	8005ade <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f8da 	bl	8005bca <CDC_ProcessReception>
      break;
 8005a16:	e014      	b.n	8005a42 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005a18:	2100      	movs	r1, #0
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fb08 	bl	8006030 <USBH_ClrFeature>
 8005a20:	4603      	mov	r3, r0
 8005a22:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a24:	7bbb      	ldrb	r3, [r7, #14]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10a      	bne.n	8005a40 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005a32:	e005      	b.n	8005a40 <USBH_CDC_Process+0x120>

    default:
      break;
 8005a34:	bf00      	nop
 8005a36:	e004      	b.n	8005a42 <USBH_CDC_Process+0x122>
      break;
 8005a38:	bf00      	nop
 8005a3a:	e002      	b.n	8005a42 <USBH_CDC_Process+0x122>
      break;
 8005a3c:	bf00      	nop
 8005a3e:	e000      	b.n	8005a42 <USBH_CDC_Process+0x122>
      break;
 8005a40:	bf00      	nop

  }

  return status;
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b082      	sub	sp, #8
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	22a1      	movs	r2, #161	; 0xa1
 8005a70:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2221      	movs	r2, #33	; 0x21
 8005a76:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2207      	movs	r2, #7
 8005a88:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2207      	movs	r2, #7
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 faf1 	bl	8006078 <USBH_CtlReq>
 8005a96:	4603      	mov	r3, r0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2221      	movs	r2, #33	; 0x21
 8005aae:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2207      	movs	r2, #7
 8005ac6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2207      	movs	r2, #7
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fad2 	bl	8006078 <USBH_CtlReq>
 8005ad4:	4603      	mov	r3, r0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b086      	sub	sp, #24
 8005ae2:	af02      	add	r7, sp, #8
 8005ae4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005af0:	2300      	movs	r3, #0
 8005af2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d002      	beq.n	8005b04 <CDC_ProcessTransmission+0x26>
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d023      	beq.n	8005b4a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005b02:	e05e      	b.n	8005bc2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	8b12      	ldrh	r2, [r2, #24]
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d90b      	bls.n	8005b28 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	69d9      	ldr	r1, [r3, #28]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8b1a      	ldrh	r2, [r3, #24]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	7b5b      	ldrb	r3, [r3, #13]
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	9000      	str	r0, [sp, #0]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fcb8 	bl	8006496 <USBH_BulkSendData>
 8005b26:	e00b      	b.n	8005b40 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	7b5b      	ldrb	r3, [r3, #13]
 8005b36:	2001      	movs	r0, #1
 8005b38:	9000      	str	r0, [sp, #0]
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fcab 	bl	8006496 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b48:	e03b      	b.n	8005bc2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	7b5b      	ldrb	r3, [r3, #13]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 ff83 	bl	8006a5c <USBH_LL_GetURBState>
 8005b56:	4603      	mov	r3, r0
 8005b58:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005b5a:	7afb      	ldrb	r3, [r7, #11]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d128      	bne.n	8005bb2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	8b12      	ldrh	r2, [r2, #24]
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d90e      	bls.n	8005b8a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	8b12      	ldrh	r2, [r2, #24]
 8005b74:	1a9a      	subs	r2, r3, r2
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	8b12      	ldrh	r2, [r2, #24]
 8005b82:	441a      	add	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	61da      	str	r2, [r3, #28]
 8005b88:	e002      	b.n	8005b90 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d004      	beq.n	8005ba2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005ba0:	e00e      	b.n	8005bc0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f868 	bl	8005c80 <USBH_CDC_TransmitCallback>
      break;
 8005bb0:	e006      	b.n	8005bc0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005bb2:	7afb      	ldrb	r3, [r7, #11]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d103      	bne.n	8005bc0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005bc0:	bf00      	nop
  }
}
 8005bc2:	bf00      	nop
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b086      	sub	sp, #24
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d002      	beq.n	8005bf0 <CDC_ProcessReception+0x26>
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d00e      	beq.n	8005c0c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005bee:	e043      	b.n	8005c78 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	6a19      	ldr	r1, [r3, #32]
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	8b5a      	ldrh	r2, [r3, #26]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	7b1b      	ldrb	r3, [r3, #12]
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fc6f 	bl	80064e0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2204      	movs	r2, #4
 8005c06:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005c0a:	e035      	b.n	8005c78 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	7b1b      	ldrb	r3, [r3, #12]
 8005c10:	4619      	mov	r1, r3
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 ff22 	bl	8006a5c <USBH_LL_GetURBState>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005c1c:	7cfb      	ldrb	r3, [r7, #19]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d129      	bne.n	8005c76 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	7b1b      	ldrb	r3, [r3, #12]
 8005c26:	4619      	mov	r1, r3
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fe85 	bl	8006938 <USBH_LL_GetLastXferSize>
 8005c2e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d016      	beq.n	8005c68 <CDC_ProcessReception+0x9e>
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	8b5b      	ldrh	r3, [r3, #26]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d910      	bls.n	8005c68 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	1ad2      	subs	r2, r2, r3
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	6a1a      	ldr	r2, [r3, #32]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	441a      	add	r2, r3
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2203      	movs	r2, #3
 8005c62:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005c66:	e006      	b.n	8005c76 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f80f 	bl	8005c94 <USBH_CDC_ReceiveCallback>
      break;
 8005c76:	bf00      	nop
  }
}
 8005c78:	bf00      	nop
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e029      	b.n	8005d28 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	79fa      	ldrb	r2, [r7, #7]
 8005cd8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f81f 	bl	8005d30 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 fd97 	bl	8006854 <USBH_LL_Init>

  return USBH_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	e009      	b.n	8005d56 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	33e0      	adds	r3, #224	; 0xe0
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3301      	adds	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2b0e      	cmp	r3, #14
 8005d5a:	d9f2      	bls.n	8005d42 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	e009      	b.n	8005d76 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3301      	adds	r3, #1
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d7c:	d3f1      	bcc.n	8005d62 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2240      	movs	r2, #64	; 0x40
 8005da2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d016      	beq.n	8005e1a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10e      	bne.n	8005e14 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005dfc:	1c59      	adds	r1, r3, #1
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	33de      	adds	r3, #222	; 0xde
 8005e08:	6839      	ldr	r1, [r7, #0]
 8005e0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	73fb      	strb	r3, [r7, #15]
 8005e12:	e004      	b.n	8005e1e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005e14:	2302      	movs	r3, #2
 8005e16:	73fb      	strb	r3, [r7, #15]
 8005e18:	e001      	b.n	8005e1e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	460b      	mov	r3, r1
 8005e36:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005e42:	78fa      	ldrb	r2, [r7, #3]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d204      	bcs.n	8005e52 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	78fa      	ldrb	r2, [r7, #3]
 8005e4c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005e50:	e001      	b.n	8005e56 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005e52:	2302      	movs	r3, #2
 8005e54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	4608      	mov	r0, r1
 8005e6e:	4611      	mov	r1, r2
 8005e70:	461a      	mov	r2, r3
 8005e72:	4603      	mov	r3, r0
 8005e74:	70fb      	strb	r3, [r7, #3]
 8005e76:	460b      	mov	r3, r1
 8005e78:	70bb      	strb	r3, [r7, #2]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005e82:	2300      	movs	r3, #0
 8005e84:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005e8c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e8e:	e025      	b.n	8005edc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
 8005e92:	221a      	movs	r2, #26
 8005e94:	fb02 f303 	mul.w	r3, r2, r3
 8005e98:	3308      	adds	r3, #8
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	3302      	adds	r3, #2
 8005ea0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	795b      	ldrb	r3, [r3, #5]
 8005ea6:	78fa      	ldrb	r2, [r7, #3]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d002      	beq.n	8005eb2 <USBH_FindInterface+0x4e>
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	2bff      	cmp	r3, #255	; 0xff
 8005eb0:	d111      	bne.n	8005ed6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005eb6:	78ba      	ldrb	r2, [r7, #2]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d002      	beq.n	8005ec2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005ebc:	78bb      	ldrb	r3, [r7, #2]
 8005ebe:	2bff      	cmp	r3, #255	; 0xff
 8005ec0:	d109      	bne.n	8005ed6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005ec6:	787a      	ldrb	r2, [r7, #1]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d002      	beq.n	8005ed2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005ecc:	787b      	ldrb	r3, [r7, #1]
 8005ece:	2bff      	cmp	r3, #255	; 0xff
 8005ed0:	d101      	bne.n	8005ed6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
 8005ed4:	e006      	b.n	8005ee4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005ed6:	7dfb      	ldrb	r3, [r7, #23]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005edc:	7dfb      	ldrb	r3, [r7, #23]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d9d6      	bls.n	8005e90 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005ee2:	23ff      	movs	r3, #255	; 0xff
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	371c      	adds	r7, #28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fce7 	bl	80068cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005efe:	2101      	movs	r1, #1
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fdbe 	bl	8006a82 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b082      	sub	sp, #8
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f804 	bl	8005f52 <USBH_HandleSof>
}
 8005f4a:	bf00      	nop
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b082      	sub	sp, #8
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b0b      	cmp	r3, #11
 8005f62:	d10a      	bne.n	8005f7a <USBH_HandleSof+0x28>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	4798      	blx	r3
  }
}
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8005f92:	bf00      	nop
}
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005fae:	bf00      	nop
}
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fc7a 	bl	8006902 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	791b      	ldrb	r3, [r3, #4]
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fad1 	bl	80065bc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	795b      	ldrb	r3, [r3, #5]
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 facb 	bl	80065bc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	789b      	ldrb	r3, [r3, #2]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d10f      	bne.n	8006064 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006056:	78fb      	ldrb	r3, [r7, #3]
 8006058:	b29a      	uxth	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006064:	2200      	movs	r2, #0
 8006066:	2100      	movs	r1, #0
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f805 	bl	8006078 <USBH_CtlReq>
 800606e:	4603      	mov	r3, r0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	4613      	mov	r3, r2
 8006084:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006086:	2301      	movs	r3, #1
 8006088:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	789b      	ldrb	r3, [r3, #2]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d002      	beq.n	8006098 <USBH_CtlReq+0x20>
 8006092:	2b02      	cmp	r3, #2
 8006094:	d00f      	beq.n	80060b6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006096:	e027      	b.n	80060e8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	88fa      	ldrh	r2, [r7, #6]
 80060a2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2202      	movs	r2, #2
 80060ae:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80060b0:	2301      	movs	r3, #1
 80060b2:	75fb      	strb	r3, [r7, #23]
      break;
 80060b4:	e018      	b.n	80060e8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 f81c 	bl	80060f4 <USBH_HandleControl>
 80060bc:	4603      	mov	r3, r0
 80060be:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80060c0:	7dfb      	ldrb	r3, [r7, #23]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <USBH_CtlReq+0x54>
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d106      	bne.n	80060da <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2201      	movs	r2, #1
 80060d0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	761a      	strb	r2, [r3, #24]
      break;
 80060d8:	e005      	b.n	80060e6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80060da:	7dfb      	ldrb	r3, [r7, #23]
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d102      	bne.n	80060e6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2201      	movs	r2, #1
 80060e4:	709a      	strb	r2, [r3, #2]
      break;
 80060e6:	bf00      	nop
  }
  return status;
 80060e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80060fc:	2301      	movs	r3, #1
 80060fe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006100:	2300      	movs	r3, #0
 8006102:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	7e1b      	ldrb	r3, [r3, #24]
 8006108:	3b01      	subs	r3, #1
 800610a:	2b0a      	cmp	r3, #10
 800610c:	f200 8156 	bhi.w	80063bc <USBH_HandleControl+0x2c8>
 8006110:	a201      	add	r2, pc, #4	; (adr r2, 8006118 <USBH_HandleControl+0x24>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	08006145 	.word	0x08006145
 800611c:	0800615f 	.word	0x0800615f
 8006120:	080061c9 	.word	0x080061c9
 8006124:	080061ef 	.word	0x080061ef
 8006128:	08006227 	.word	0x08006227
 800612c:	08006251 	.word	0x08006251
 8006130:	080062a3 	.word	0x080062a3
 8006134:	080062c5 	.word	0x080062c5
 8006138:	08006301 	.word	0x08006301
 800613c:	08006327 	.word	0x08006327
 8006140:	08006365 	.word	0x08006365
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f103 0110 	add.w	r1, r3, #16
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	795b      	ldrb	r3, [r3, #5]
 800614e:	461a      	mov	r2, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f943 	bl	80063dc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2202      	movs	r2, #2
 800615a:	761a      	strb	r2, [r3, #24]
      break;
 800615c:	e139      	b.n	80063d2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	795b      	ldrb	r3, [r3, #5]
 8006162:	4619      	mov	r1, r3
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fc79 	bl	8006a5c <USBH_LL_GetURBState>
 800616a:	4603      	mov	r3, r0
 800616c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800616e:	7bbb      	ldrb	r3, [r7, #14]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d11e      	bne.n	80061b2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	7c1b      	ldrb	r3, [r3, #16]
 8006178:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800617c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	8adb      	ldrh	r3, [r3, #22]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006186:	7b7b      	ldrb	r3, [r7, #13]
 8006188:	2b80      	cmp	r3, #128	; 0x80
 800618a:	d103      	bne.n	8006194 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2203      	movs	r2, #3
 8006190:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006192:	e115      	b.n	80063c0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2205      	movs	r2, #5
 8006198:	761a      	strb	r2, [r3, #24]
      break;
 800619a:	e111      	b.n	80063c0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800619c:	7b7b      	ldrb	r3, [r7, #13]
 800619e:	2b80      	cmp	r3, #128	; 0x80
 80061a0:	d103      	bne.n	80061aa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2209      	movs	r2, #9
 80061a6:	761a      	strb	r2, [r3, #24]
      break;
 80061a8:	e10a      	b.n	80063c0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2207      	movs	r2, #7
 80061ae:	761a      	strb	r2, [r3, #24]
      break;
 80061b0:	e106      	b.n	80063c0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80061b2:	7bbb      	ldrb	r3, [r7, #14]
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d003      	beq.n	80061c0 <USBH_HandleControl+0xcc>
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	f040 8100 	bne.w	80063c0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	220b      	movs	r2, #11
 80061c4:	761a      	strb	r2, [r3, #24]
      break;
 80061c6:	e0fb      	b.n	80063c0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6899      	ldr	r1, [r3, #8]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	899a      	ldrh	r2, [r3, #12]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	791b      	ldrb	r3, [r3, #4]
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f93a 	bl	800645a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2204      	movs	r2, #4
 80061ea:	761a      	strb	r2, [r3, #24]
      break;
 80061ec:	e0f1      	b.n	80063d2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	791b      	ldrb	r3, [r3, #4]
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fc31 	bl	8006a5c <USBH_LL_GetURBState>
 80061fa:	4603      	mov	r3, r0
 80061fc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80061fe:	7bbb      	ldrb	r3, [r7, #14]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d102      	bne.n	800620a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2209      	movs	r2, #9
 8006208:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800620a:	7bbb      	ldrb	r3, [r7, #14]
 800620c:	2b05      	cmp	r3, #5
 800620e:	d102      	bne.n	8006216 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006210:	2303      	movs	r3, #3
 8006212:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006214:	e0d6      	b.n	80063c4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006216:	7bbb      	ldrb	r3, [r7, #14]
 8006218:	2b04      	cmp	r3, #4
 800621a:	f040 80d3 	bne.w	80063c4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	220b      	movs	r2, #11
 8006222:	761a      	strb	r2, [r3, #24]
      break;
 8006224:	e0ce      	b.n	80063c4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6899      	ldr	r1, [r3, #8]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	899a      	ldrh	r2, [r3, #12]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	795b      	ldrb	r3, [r3, #5]
 8006232:	2001      	movs	r0, #1
 8006234:	9000      	str	r0, [sp, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f8ea 	bl	8006410 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006242:	b29a      	uxth	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2206      	movs	r2, #6
 800624c:	761a      	strb	r2, [r3, #24]
      break;
 800624e:	e0c0      	b.n	80063d2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	795b      	ldrb	r3, [r3, #5]
 8006254:	4619      	mov	r1, r3
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fc00 	bl	8006a5c <USBH_LL_GetURBState>
 800625c:	4603      	mov	r3, r0
 800625e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006260:	7bbb      	ldrb	r3, [r7, #14]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d103      	bne.n	800626e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2207      	movs	r2, #7
 800626a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800626c:	e0ac      	b.n	80063c8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800626e:	7bbb      	ldrb	r3, [r7, #14]
 8006270:	2b05      	cmp	r3, #5
 8006272:	d105      	bne.n	8006280 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	220c      	movs	r2, #12
 8006278:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800627a:	2303      	movs	r3, #3
 800627c:	73fb      	strb	r3, [r7, #15]
      break;
 800627e:	e0a3      	b.n	80063c8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006280:	7bbb      	ldrb	r3, [r7, #14]
 8006282:	2b02      	cmp	r3, #2
 8006284:	d103      	bne.n	800628e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2205      	movs	r2, #5
 800628a:	761a      	strb	r2, [r3, #24]
      break;
 800628c:	e09c      	b.n	80063c8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800628e:	7bbb      	ldrb	r3, [r7, #14]
 8006290:	2b04      	cmp	r3, #4
 8006292:	f040 8099 	bne.w	80063c8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	220b      	movs	r2, #11
 800629a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800629c:	2302      	movs	r3, #2
 800629e:	73fb      	strb	r3, [r7, #15]
      break;
 80062a0:	e092      	b.n	80063c8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	791b      	ldrb	r3, [r3, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	2100      	movs	r1, #0
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f8d5 	bl	800645a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2208      	movs	r2, #8
 80062c0:	761a      	strb	r2, [r3, #24]

      break;
 80062c2:	e086      	b.n	80063d2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	791b      	ldrb	r3, [r3, #4]
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fbc6 	bl	8006a5c <USBH_LL_GetURBState>
 80062d0:	4603      	mov	r3, r0
 80062d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80062d4:	7bbb      	ldrb	r3, [r7, #14]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d105      	bne.n	80062e6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	220d      	movs	r2, #13
 80062de:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80062e4:	e072      	b.n	80063cc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80062e6:	7bbb      	ldrb	r3, [r7, #14]
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d103      	bne.n	80062f4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	220b      	movs	r2, #11
 80062f0:	761a      	strb	r2, [r3, #24]
      break;
 80062f2:	e06b      	b.n	80063cc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80062f4:	7bbb      	ldrb	r3, [r7, #14]
 80062f6:	2b05      	cmp	r3, #5
 80062f8:	d168      	bne.n	80063cc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80062fa:	2303      	movs	r3, #3
 80062fc:	73fb      	strb	r3, [r7, #15]
      break;
 80062fe:	e065      	b.n	80063cc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	795b      	ldrb	r3, [r3, #5]
 8006304:	2201      	movs	r2, #1
 8006306:	9200      	str	r2, [sp, #0]
 8006308:	2200      	movs	r2, #0
 800630a:	2100      	movs	r1, #0
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f87f 	bl	8006410 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006318:	b29a      	uxth	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	220a      	movs	r2, #10
 8006322:	761a      	strb	r2, [r3, #24]
      break;
 8006324:	e055      	b.n	80063d2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	795b      	ldrb	r3, [r3, #5]
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fb95 	bl	8006a5c <USBH_LL_GetURBState>
 8006332:	4603      	mov	r3, r0
 8006334:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d105      	bne.n	8006348 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	220d      	movs	r2, #13
 8006344:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006346:	e043      	b.n	80063d0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006348:	7bbb      	ldrb	r3, [r7, #14]
 800634a:	2b02      	cmp	r3, #2
 800634c:	d103      	bne.n	8006356 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2209      	movs	r2, #9
 8006352:	761a      	strb	r2, [r3, #24]
      break;
 8006354:	e03c      	b.n	80063d0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006356:	7bbb      	ldrb	r3, [r7, #14]
 8006358:	2b04      	cmp	r3, #4
 800635a:	d139      	bne.n	80063d0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	220b      	movs	r2, #11
 8006360:	761a      	strb	r2, [r3, #24]
      break;
 8006362:	e035      	b.n	80063d0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	7e5b      	ldrb	r3, [r3, #25]
 8006368:	3301      	adds	r3, #1
 800636a:	b2da      	uxtb	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	765a      	strb	r2, [r3, #25]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	7e5b      	ldrb	r3, [r3, #25]
 8006374:	2b02      	cmp	r3, #2
 8006376:	d806      	bhi.n	8006386 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006384:	e025      	b.n	80063d2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800638c:	2106      	movs	r1, #6
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	795b      	ldrb	r3, [r3, #5]
 800639c:	4619      	mov	r1, r3
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f90c 	bl	80065bc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	791b      	ldrb	r3, [r3, #4]
 80063a8:	4619      	mov	r1, r3
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f906 	bl	80065bc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80063b6:	2302      	movs	r3, #2
 80063b8:	73fb      	strb	r3, [r7, #15]
      break;
 80063ba:	e00a      	b.n	80063d2 <USBH_HandleControl+0x2de>

    default:
      break;
 80063bc:	bf00      	nop
 80063be:	e008      	b.n	80063d2 <USBH_HandleControl+0x2de>
      break;
 80063c0:	bf00      	nop
 80063c2:	e006      	b.n	80063d2 <USBH_HandleControl+0x2de>
      break;
 80063c4:	bf00      	nop
 80063c6:	e004      	b.n	80063d2 <USBH_HandleControl+0x2de>
      break;
 80063c8:	bf00      	nop
 80063ca:	e002      	b.n	80063d2 <USBH_HandleControl+0x2de>
      break;
 80063cc:	bf00      	nop
 80063ce:	e000      	b.n	80063d2 <USBH_HandleControl+0x2de>
      break;
 80063d0:	bf00      	nop
  }

  return status;
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af04      	add	r7, sp, #16
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	4613      	mov	r3, r2
 80063e8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80063ea:	79f9      	ldrb	r1, [r7, #7]
 80063ec:	2300      	movs	r3, #0
 80063ee:	9303      	str	r3, [sp, #12]
 80063f0:	2308      	movs	r3, #8
 80063f2:	9302      	str	r3, [sp, #8]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	9301      	str	r3, [sp, #4]
 80063f8:	2300      	movs	r3, #0
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	2300      	movs	r3, #0
 80063fe:	2200      	movs	r2, #0
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 fafa 	bl	80069fa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b088      	sub	sp, #32
 8006414:	af04      	add	r7, sp, #16
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	4611      	mov	r1, r2
 800641c:	461a      	mov	r2, r3
 800641e:	460b      	mov	r3, r1
 8006420:	80fb      	strh	r3, [r7, #6]
 8006422:	4613      	mov	r3, r2
 8006424:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006434:	7979      	ldrb	r1, [r7, #5]
 8006436:	7e3b      	ldrb	r3, [r7, #24]
 8006438:	9303      	str	r3, [sp, #12]
 800643a:	88fb      	ldrh	r3, [r7, #6]
 800643c:	9302      	str	r3, [sp, #8]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	9301      	str	r3, [sp, #4]
 8006442:	2301      	movs	r3, #1
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	2300      	movs	r3, #0
 8006448:	2200      	movs	r2, #0
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 fad5 	bl	80069fa <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b088      	sub	sp, #32
 800645e:	af04      	add	r7, sp, #16
 8006460:	60f8      	str	r0, [r7, #12]
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	4611      	mov	r1, r2
 8006466:	461a      	mov	r2, r3
 8006468:	460b      	mov	r3, r1
 800646a:	80fb      	strh	r3, [r7, #6]
 800646c:	4613      	mov	r3, r2
 800646e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006470:	7979      	ldrb	r1, [r7, #5]
 8006472:	2300      	movs	r3, #0
 8006474:	9303      	str	r3, [sp, #12]
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	9302      	str	r3, [sp, #8]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	9301      	str	r3, [sp, #4]
 800647e:	2301      	movs	r3, #1
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	2300      	movs	r3, #0
 8006484:	2201      	movs	r2, #1
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 fab7 	bl	80069fa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800648c:	2300      	movs	r3, #0

}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b088      	sub	sp, #32
 800649a:	af04      	add	r7, sp, #16
 800649c:	60f8      	str	r0, [r7, #12]
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	4611      	mov	r1, r2
 80064a2:	461a      	mov	r2, r3
 80064a4:	460b      	mov	r3, r1
 80064a6:	80fb      	strh	r3, [r7, #6]
 80064a8:	4613      	mov	r3, r2
 80064aa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80064ba:	7979      	ldrb	r1, [r7, #5]
 80064bc:	7e3b      	ldrb	r3, [r7, #24]
 80064be:	9303      	str	r3, [sp, #12]
 80064c0:	88fb      	ldrh	r3, [r7, #6]
 80064c2:	9302      	str	r3, [sp, #8]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	2301      	movs	r3, #1
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	2302      	movs	r3, #2
 80064ce:	2200      	movs	r2, #0
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 fa92 	bl	80069fa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af04      	add	r7, sp, #16
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	4611      	mov	r1, r2
 80064ec:	461a      	mov	r2, r3
 80064ee:	460b      	mov	r3, r1
 80064f0:	80fb      	strh	r3, [r7, #6]
 80064f2:	4613      	mov	r3, r2
 80064f4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80064f6:	7979      	ldrb	r1, [r7, #5]
 80064f8:	2300      	movs	r3, #0
 80064fa:	9303      	str	r3, [sp, #12]
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	9302      	str	r3, [sp, #8]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	9301      	str	r3, [sp, #4]
 8006504:	2301      	movs	r3, #1
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	2302      	movs	r3, #2
 800650a:	2201      	movs	r2, #1
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 fa74 	bl	80069fa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af04      	add	r7, sp, #16
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	4608      	mov	r0, r1
 8006526:	4611      	mov	r1, r2
 8006528:	461a      	mov	r2, r3
 800652a:	4603      	mov	r3, r0
 800652c:	70fb      	strb	r3, [r7, #3]
 800652e:	460b      	mov	r3, r1
 8006530:	70bb      	strb	r3, [r7, #2]
 8006532:	4613      	mov	r3, r2
 8006534:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006536:	7878      	ldrb	r0, [r7, #1]
 8006538:	78ba      	ldrb	r2, [r7, #2]
 800653a:	78f9      	ldrb	r1, [r7, #3]
 800653c:	8b3b      	ldrh	r3, [r7, #24]
 800653e:	9302      	str	r3, [sp, #8]
 8006540:	7d3b      	ldrb	r3, [r7, #20]
 8006542:	9301      	str	r3, [sp, #4]
 8006544:	7c3b      	ldrb	r3, [r7, #16]
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	4603      	mov	r3, r0
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fa07 	bl	800695e <USBH_LL_OpenPipe>

  return USBH_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b082      	sub	sp, #8
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	460b      	mov	r3, r1
 8006564:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8006566:	78fb      	ldrb	r3, [r7, #3]
 8006568:	4619      	mov	r1, r3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fa26 	bl	80069bc <USBH_LL_ClosePipe>

  return USBH_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b084      	sub	sp, #16
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	460b      	mov	r3, r1
 8006584:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f836 	bl	80065f8 <USBH_GetFreePipe>
 800658c:	4603      	mov	r3, r0
 800658e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006590:	89fb      	ldrh	r3, [r7, #14]
 8006592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006596:	4293      	cmp	r3, r2
 8006598:	d00a      	beq.n	80065b0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800659a:	78fa      	ldrb	r2, [r7, #3]
 800659c:	89fb      	ldrh	r3, [r7, #14]
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	33e0      	adds	r3, #224	; 0xe0
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	440b      	add	r3, r1
 80065ae:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80065b0:	89fb      	ldrh	r3, [r7, #14]
 80065b2:	b2db      	uxtb	r3, r3
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	2b0a      	cmp	r3, #10
 80065cc:	d80d      	bhi.n	80065ea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80065ce:	78fb      	ldrb	r3, [r7, #3]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	33e0      	adds	r3, #224	; 0xe0
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	33e0      	adds	r3, #224	; 0xe0
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	440b      	add	r3, r1
 80065e8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006604:	2300      	movs	r3, #0
 8006606:	73fb      	strb	r3, [r7, #15]
 8006608:	e00f      	b.n	800662a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800660a:	7bfb      	ldrb	r3, [r7, #15]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	33e0      	adds	r3, #224	; 0xe0
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d102      	bne.n	8006624 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800661e:	7bfb      	ldrb	r3, [r7, #15]
 8006620:	b29b      	uxth	r3, r3
 8006622:	e007      	b.n	8006634 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	3301      	adds	r3, #1
 8006628:	73fb      	strb	r3, [r7, #15]
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	2b0a      	cmp	r3, #10
 800662e:	d9ec      	bls.n	800660a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006630:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006644:	2201      	movs	r2, #1
 8006646:	490e      	ldr	r1, [pc, #56]	; (8006680 <MX_USB_HOST_Init+0x40>)
 8006648:	480e      	ldr	r0, [pc, #56]	; (8006684 <MX_USB_HOST_Init+0x44>)
 800664a:	f7ff fb37 	bl	8005cbc <USBH_Init>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006654:	f7fa f964 	bl	8000920 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006658:	490b      	ldr	r1, [pc, #44]	; (8006688 <MX_USB_HOST_Init+0x48>)
 800665a:	480a      	ldr	r0, [pc, #40]	; (8006684 <MX_USB_HOST_Init+0x44>)
 800665c:	f7ff fbbc 	bl	8005dd8 <USBH_RegisterClass>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006666:	f7fa f95b 	bl	8000920 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800666a:	4806      	ldr	r0, [pc, #24]	; (8006684 <MX_USB_HOST_Init+0x44>)
 800666c:	f7ff fc40 	bl	8005ef0 <USBH_Start>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006676:	f7fa f953 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800667a:	bf00      	nop
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	0800668d 	.word	0x0800668d
 8006684:	200001b4 	.word	0x200001b4
 8006688:	2000000c 	.word	0x2000000c

0800668c <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006698:	78fb      	ldrb	r3, [r7, #3]
 800669a:	3b01      	subs	r3, #1
 800669c:	2b04      	cmp	r3, #4
 800669e:	d819      	bhi.n	80066d4 <USBH_UserProcess+0x48>
 80066a0:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <USBH_UserProcess+0x1c>)
 80066a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a6:	bf00      	nop
 80066a8:	080066d5 	.word	0x080066d5
 80066ac:	080066c5 	.word	0x080066c5
 80066b0:	080066d5 	.word	0x080066d5
 80066b4:	080066cd 	.word	0x080066cd
 80066b8:	080066bd 	.word	0x080066bd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80066bc:	4b09      	ldr	r3, [pc, #36]	; (80066e4 <USBH_UserProcess+0x58>)
 80066be:	2203      	movs	r2, #3
 80066c0:	701a      	strb	r2, [r3, #0]
  break;
 80066c2:	e008      	b.n	80066d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80066c4:	4b07      	ldr	r3, [pc, #28]	; (80066e4 <USBH_UserProcess+0x58>)
 80066c6:	2202      	movs	r2, #2
 80066c8:	701a      	strb	r2, [r3, #0]
  break;
 80066ca:	e004      	b.n	80066d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80066cc:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <USBH_UserProcess+0x58>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	701a      	strb	r2, [r3, #0]
  break;
 80066d2:	e000      	b.n	80066d6 <USBH_UserProcess+0x4a>

  default:
  break;
 80066d4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	200000b0 	.word	0x200000b0

080066e8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08a      	sub	sp, #40	; 0x28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066f0:	f107 0314 	add.w	r3, r7, #20
 80066f4:	2200      	movs	r2, #0
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	605a      	str	r2, [r3, #4]
 80066fa:	609a      	str	r2, [r3, #8]
 80066fc:	60da      	str	r2, [r3, #12]
 80066fe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006708:	d147      	bne.n	800679a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800670a:	2300      	movs	r3, #0
 800670c:	613b      	str	r3, [r7, #16]
 800670e:	4b25      	ldr	r3, [pc, #148]	; (80067a4 <HAL_HCD_MspInit+0xbc>)
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	4a24      	ldr	r2, [pc, #144]	; (80067a4 <HAL_HCD_MspInit+0xbc>)
 8006714:	f043 0301 	orr.w	r3, r3, #1
 8006718:	6313      	str	r3, [r2, #48]	; 0x30
 800671a:	4b22      	ldr	r3, [pc, #136]	; (80067a4 <HAL_HCD_MspInit+0xbc>)
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800672a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800672c:	2300      	movs	r3, #0
 800672e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006730:	2300      	movs	r3, #0
 8006732:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006734:	f107 0314 	add.w	r3, r7, #20
 8006738:	4619      	mov	r1, r3
 800673a:	481b      	ldr	r0, [pc, #108]	; (80067a8 <HAL_HCD_MspInit+0xc0>)
 800673c:	f7fa fc64 	bl	8001008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006740:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006746:	2302      	movs	r3, #2
 8006748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800674a:	2300      	movs	r3, #0
 800674c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800674e:	2300      	movs	r3, #0
 8006750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006752:	230a      	movs	r3, #10
 8006754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006756:	f107 0314 	add.w	r3, r7, #20
 800675a:	4619      	mov	r1, r3
 800675c:	4812      	ldr	r0, [pc, #72]	; (80067a8 <HAL_HCD_MspInit+0xc0>)
 800675e:	f7fa fc53 	bl	8001008 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006762:	4b10      	ldr	r3, [pc, #64]	; (80067a4 <HAL_HCD_MspInit+0xbc>)
 8006764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006766:	4a0f      	ldr	r2, [pc, #60]	; (80067a4 <HAL_HCD_MspInit+0xbc>)
 8006768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676c:	6353      	str	r3, [r2, #52]	; 0x34
 800676e:	2300      	movs	r3, #0
 8006770:	60fb      	str	r3, [r7, #12]
 8006772:	4b0c      	ldr	r3, [pc, #48]	; (80067a4 <HAL_HCD_MspInit+0xbc>)
 8006774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006776:	4a0b      	ldr	r2, [pc, #44]	; (80067a4 <HAL_HCD_MspInit+0xbc>)
 8006778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800677c:	6453      	str	r3, [r2, #68]	; 0x44
 800677e:	4b09      	ldr	r3, [pc, #36]	; (80067a4 <HAL_HCD_MspInit+0xbc>)
 8006780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800678a:	2200      	movs	r2, #0
 800678c:	2100      	movs	r1, #0
 800678e:	2043      	movs	r0, #67	; 0x43
 8006790:	f7fa fc03 	bl	8000f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006794:	2043      	movs	r0, #67	; 0x43
 8006796:	f7fa fc1c 	bl	8000fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800679a:	bf00      	nop
 800679c:	3728      	adds	r7, #40	; 0x28
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	40023800 	.word	0x40023800
 80067a8:	40020000 	.word	0x40020000

080067ac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7ff fbb7 	bl	8005f2e <USBH_LL_IncTimer>
}
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff fbef 	bl	8005fba <USBH_LL_Connect>
}
 80067dc:	bf00      	nop
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7ff fbf8 	bl	8005fe8 <USBH_LL_Disconnect>
}
 80067f8:	bf00      	nop
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
 800680c:	4613      	mov	r3, r2
 800680e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff fba9 	bl	8005f82 <USBH_LL_PortEnabled>
}
 8006830:	bf00      	nop
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff fba9 	bl	8005f9e <USBH_LL_PortDisabled>
}
 800684c:	bf00      	nop
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006862:	2b01      	cmp	r3, #1
 8006864:	d12a      	bne.n	80068bc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006866:	4a18      	ldr	r2, [pc, #96]	; (80068c8 <USBH_LL_Init+0x74>)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a15      	ldr	r2, [pc, #84]	; (80068c8 <USBH_LL_Init+0x74>)
 8006872:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006876:	4b14      	ldr	r3, [pc, #80]	; (80068c8 <USBH_LL_Init+0x74>)
 8006878:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800687c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800687e:	4b12      	ldr	r3, [pc, #72]	; (80068c8 <USBH_LL_Init+0x74>)
 8006880:	2208      	movs	r2, #8
 8006882:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006884:	4b10      	ldr	r3, [pc, #64]	; (80068c8 <USBH_LL_Init+0x74>)
 8006886:	2201      	movs	r2, #1
 8006888:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800688a:	4b0f      	ldr	r3, [pc, #60]	; (80068c8 <USBH_LL_Init+0x74>)
 800688c:	2200      	movs	r2, #0
 800688e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006890:	4b0d      	ldr	r3, [pc, #52]	; (80068c8 <USBH_LL_Init+0x74>)
 8006892:	2202      	movs	r2, #2
 8006894:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006896:	4b0c      	ldr	r3, [pc, #48]	; (80068c8 <USBH_LL_Init+0x74>)
 8006898:	2200      	movs	r2, #0
 800689a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800689c:	480a      	ldr	r0, [pc, #40]	; (80068c8 <USBH_LL_Init+0x74>)
 800689e:	f7fa fd82 	bl	80013a6 <HAL_HCD_Init>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80068a8:	f7fa f83a 	bl	8000920 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80068ac:	4806      	ldr	r0, [pc, #24]	; (80068c8 <USBH_LL_Init+0x74>)
 80068ae:	f7fb f958 	bl	8001b62 <HAL_HCD_GetCurrentFrame>
 80068b2:	4603      	mov	r3, r0
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7ff fb2a 	bl	8005f10 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	2000058c 	.word	0x2000058c

080068cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fb f8d5 	bl	8001a92 <HAL_HCD_Start>
 80068e8:	4603      	mov	r3, r0
 80068ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 f90e 	bl	8006b10 <USBH_Get_USB_Status>
 80068f4:	4603      	mov	r3, r0
 80068f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006918:	4618      	mov	r0, r3
 800691a:	f7fb f8dd 	bl	8001ad8 <HAL_HCD_Stop>
 800691e:	4603      	mov	r3, r0
 8006920:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	4618      	mov	r0, r3
 8006926:	f000 f8f3 	bl	8006b10 <USBH_Get_USB_Status>
 800692a:	4603      	mov	r3, r0
 800692c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800692e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800694a:	78fa      	ldrb	r2, [r7, #3]
 800694c:	4611      	mov	r1, r2
 800694e:	4618      	mov	r0, r3
 8006950:	f7fb f8f3 	bl	8001b3a <HAL_HCD_HC_GetXferCount>
 8006954:	4603      	mov	r3, r0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800695e:	b590      	push	{r4, r7, lr}
 8006960:	b089      	sub	sp, #36	; 0x24
 8006962:	af04      	add	r7, sp, #16
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	4608      	mov	r0, r1
 8006968:	4611      	mov	r1, r2
 800696a:	461a      	mov	r2, r3
 800696c:	4603      	mov	r3, r0
 800696e:	70fb      	strb	r3, [r7, #3]
 8006970:	460b      	mov	r3, r1
 8006972:	70bb      	strb	r3, [r7, #2]
 8006974:	4613      	mov	r3, r2
 8006976:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006986:	787c      	ldrb	r4, [r7, #1]
 8006988:	78ba      	ldrb	r2, [r7, #2]
 800698a:	78f9      	ldrb	r1, [r7, #3]
 800698c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800698e:	9302      	str	r3, [sp, #8]
 8006990:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	f897 3020 	ldrb.w	r3, [r7, #32]
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	4623      	mov	r3, r4
 800699e:	f7fa fd64 	bl	800146a <HAL_HCD_HC_Init>
 80069a2:	4603      	mov	r3, r0
 80069a4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 f8b1 	bl	8006b10 <USBH_Get_USB_Status>
 80069ae:	4603      	mov	r3, r0
 80069b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd90      	pop	{r4, r7, pc}

080069bc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069c8:	2300      	movs	r3, #0
 80069ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80069d6:	78fa      	ldrb	r2, [r7, #3]
 80069d8:	4611      	mov	r1, r2
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fa fdd4 	bl	8001588 <HAL_HCD_HC_Halt>
 80069e0:	4603      	mov	r3, r0
 80069e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 f892 	bl	8006b10 <USBH_Get_USB_Status>
 80069ec:	4603      	mov	r3, r0
 80069ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80069fa:	b590      	push	{r4, r7, lr}
 80069fc:	b089      	sub	sp, #36	; 0x24
 80069fe:	af04      	add	r7, sp, #16
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	4608      	mov	r0, r1
 8006a04:	4611      	mov	r1, r2
 8006a06:	461a      	mov	r2, r3
 8006a08:	4603      	mov	r3, r0
 8006a0a:	70fb      	strb	r3, [r7, #3]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	70bb      	strb	r3, [r7, #2]
 8006a10:	4613      	mov	r3, r2
 8006a12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006a22:	787c      	ldrb	r4, [r7, #1]
 8006a24:	78ba      	ldrb	r2, [r7, #2]
 8006a26:	78f9      	ldrb	r1, [r7, #3]
 8006a28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a2c:	9303      	str	r3, [sp, #12]
 8006a2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a30:	9302      	str	r3, [sp, #8]
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	4623      	mov	r3, r4
 8006a3e:	f7fa fdc7 	bl	80015d0 <HAL_HCD_HC_SubmitRequest>
 8006a42:	4603      	mov	r3, r0
 8006a44:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006a46:	7bfb      	ldrb	r3, [r7, #15]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 f861 	bl	8006b10 <USBH_Get_USB_Status>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a52:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd90      	pop	{r4, r7, pc}

08006a5c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	460b      	mov	r3, r1
 8006a66:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a6e:	78fa      	ldrb	r2, [r7, #3]
 8006a70:	4611      	mov	r1, r2
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fb f84d 	bl	8001b12 <HAL_HCD_HC_GetURBState>
 8006a78:	4603      	mov	r3, r0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b082      	sub	sp, #8
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d103      	bne.n	8006aa0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 f864 	bl	8006b68 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006aa0:	20c8      	movs	r0, #200	; 0xc8
 8006aa2:	f7fa f97b 	bl	8000d9c <HAL_Delay>
  return USBH_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	70fb      	strb	r3, [r7, #3]
 8006abc:	4613      	mov	r3, r2
 8006abe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006ac6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006ac8:	78fb      	ldrb	r3, [r7, #3]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	212c      	movs	r1, #44	; 0x2c
 8006ace:	fb01 f303 	mul.w	r3, r1, r3
 8006ad2:	4413      	add	r3, r2
 8006ad4:	333b      	adds	r3, #59	; 0x3b
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d009      	beq.n	8006af0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	212c      	movs	r1, #44	; 0x2c
 8006ae2:	fb01 f303 	mul.w	r3, r1, r3
 8006ae6:	4413      	add	r3, r2
 8006ae8:	3354      	adds	r3, #84	; 0x54
 8006aea:	78ba      	ldrb	r2, [r7, #2]
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	e008      	b.n	8006b02 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	212c      	movs	r1, #44	; 0x2c
 8006af6:	fb01 f303 	mul.w	r3, r1, r3
 8006afa:	4413      	add	r3, r2
 8006afc:	3355      	adds	r3, #85	; 0x55
 8006afe:	78ba      	ldrb	r2, [r7, #2]
 8006b00:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	4603      	mov	r3, r0
 8006b18:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006b1e:	79fb      	ldrb	r3, [r7, #7]
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	d817      	bhi.n	8006b54 <USBH_Get_USB_Status+0x44>
 8006b24:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <USBH_Get_USB_Status+0x1c>)
 8006b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2a:	bf00      	nop
 8006b2c:	08006b3d 	.word	0x08006b3d
 8006b30:	08006b43 	.word	0x08006b43
 8006b34:	08006b49 	.word	0x08006b49
 8006b38:	08006b4f 	.word	0x08006b4f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8006b40:	e00b      	b.n	8006b5a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006b42:	2302      	movs	r3, #2
 8006b44:	73fb      	strb	r3, [r7, #15]
    break;
 8006b46:	e008      	b.n	8006b5a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8006b4c:	e005      	b.n	8006b5a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006b4e:	2302      	movs	r3, #2
 8006b50:	73fb      	strb	r3, [r7, #15]
    break;
 8006b52:	e002      	b.n	8006b5a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006b54:	2302      	movs	r3, #2
 8006b56:	73fb      	strb	r3, [r7, #15]
    break;
 8006b58:	bf00      	nop
  }
  return usb_status;
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	4603      	mov	r3, r0
 8006b70:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8006b72:	79fb      	ldrb	r3, [r7, #7]
 8006b74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006b76:	79fb      	ldrb	r3, [r7, #7]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d102      	bne.n	8006b82 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	73fb      	strb	r3, [r7, #15]
 8006b80:	e001      	b.n	8006b86 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8006b82:	2300      	movs	r3, #0
 8006b84:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	4803      	ldr	r0, [pc, #12]	; (8006b9c <MX_DriverVbusFS+0x34>)
 8006b8e:	f7fa fbd7 	bl	8001340 <HAL_GPIO_WritePin>
}
 8006b92:	bf00      	nop
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40020800 	.word	0x40020800

08006ba0 <__errno>:
 8006ba0:	4b01      	ldr	r3, [pc, #4]	; (8006ba8 <__errno+0x8>)
 8006ba2:	6818      	ldr	r0, [r3, #0]
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	2000002c 	.word	0x2000002c

08006bac <__libc_init_array>:
 8006bac:	b570      	push	{r4, r5, r6, lr}
 8006bae:	4d0d      	ldr	r5, [pc, #52]	; (8006be4 <__libc_init_array+0x38>)
 8006bb0:	4c0d      	ldr	r4, [pc, #52]	; (8006be8 <__libc_init_array+0x3c>)
 8006bb2:	1b64      	subs	r4, r4, r5
 8006bb4:	10a4      	asrs	r4, r4, #2
 8006bb6:	2600      	movs	r6, #0
 8006bb8:	42a6      	cmp	r6, r4
 8006bba:	d109      	bne.n	8006bd0 <__libc_init_array+0x24>
 8006bbc:	4d0b      	ldr	r5, [pc, #44]	; (8006bec <__libc_init_array+0x40>)
 8006bbe:	4c0c      	ldr	r4, [pc, #48]	; (8006bf0 <__libc_init_array+0x44>)
 8006bc0:	f000 f8f8 	bl	8006db4 <_init>
 8006bc4:	1b64      	subs	r4, r4, r5
 8006bc6:	10a4      	asrs	r4, r4, #2
 8006bc8:	2600      	movs	r6, #0
 8006bca:	42a6      	cmp	r6, r4
 8006bcc:	d105      	bne.n	8006bda <__libc_init_array+0x2e>
 8006bce:	bd70      	pop	{r4, r5, r6, pc}
 8006bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bd4:	4798      	blx	r3
 8006bd6:	3601      	adds	r6, #1
 8006bd8:	e7ee      	b.n	8006bb8 <__libc_init_array+0xc>
 8006bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bde:	4798      	blx	r3
 8006be0:	3601      	adds	r6, #1
 8006be2:	e7f2      	b.n	8006bca <__libc_init_array+0x1e>
 8006be4:	08006df0 	.word	0x08006df0
 8006be8:	08006df0 	.word	0x08006df0
 8006bec:	08006df0 	.word	0x08006df0
 8006bf0:	08006df4 	.word	0x08006df4

08006bf4 <malloc>:
 8006bf4:	4b02      	ldr	r3, [pc, #8]	; (8006c00 <malloc+0xc>)
 8006bf6:	4601      	mov	r1, r0
 8006bf8:	6818      	ldr	r0, [r3, #0]
 8006bfa:	f000 b863 	b.w	8006cc4 <_malloc_r>
 8006bfe:	bf00      	nop
 8006c00:	2000002c 	.word	0x2000002c

08006c04 <free>:
 8006c04:	4b02      	ldr	r3, [pc, #8]	; (8006c10 <free+0xc>)
 8006c06:	4601      	mov	r1, r0
 8006c08:	6818      	ldr	r0, [r3, #0]
 8006c0a:	f000 b80b 	b.w	8006c24 <_free_r>
 8006c0e:	bf00      	nop
 8006c10:	2000002c 	.word	0x2000002c

08006c14 <memset>:
 8006c14:	4402      	add	r2, r0
 8006c16:	4603      	mov	r3, r0
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d100      	bne.n	8006c1e <memset+0xa>
 8006c1c:	4770      	bx	lr
 8006c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c22:	e7f9      	b.n	8006c18 <memset+0x4>

08006c24 <_free_r>:
 8006c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c26:	2900      	cmp	r1, #0
 8006c28:	d048      	beq.n	8006cbc <_free_r+0x98>
 8006c2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c2e:	9001      	str	r0, [sp, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f1a1 0404 	sub.w	r4, r1, #4
 8006c36:	bfb8      	it	lt
 8006c38:	18e4      	addlt	r4, r4, r3
 8006c3a:	f000 f8ad 	bl	8006d98 <__malloc_lock>
 8006c3e:	4a20      	ldr	r2, [pc, #128]	; (8006cc0 <_free_r+0x9c>)
 8006c40:	9801      	ldr	r0, [sp, #4]
 8006c42:	6813      	ldr	r3, [r2, #0]
 8006c44:	4615      	mov	r5, r2
 8006c46:	b933      	cbnz	r3, 8006c56 <_free_r+0x32>
 8006c48:	6063      	str	r3, [r4, #4]
 8006c4a:	6014      	str	r4, [r2, #0]
 8006c4c:	b003      	add	sp, #12
 8006c4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c52:	f000 b8a7 	b.w	8006da4 <__malloc_unlock>
 8006c56:	42a3      	cmp	r3, r4
 8006c58:	d90b      	bls.n	8006c72 <_free_r+0x4e>
 8006c5a:	6821      	ldr	r1, [r4, #0]
 8006c5c:	1862      	adds	r2, r4, r1
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	bf04      	itt	eq
 8006c62:	681a      	ldreq	r2, [r3, #0]
 8006c64:	685b      	ldreq	r3, [r3, #4]
 8006c66:	6063      	str	r3, [r4, #4]
 8006c68:	bf04      	itt	eq
 8006c6a:	1852      	addeq	r2, r2, r1
 8006c6c:	6022      	streq	r2, [r4, #0]
 8006c6e:	602c      	str	r4, [r5, #0]
 8006c70:	e7ec      	b.n	8006c4c <_free_r+0x28>
 8006c72:	461a      	mov	r2, r3
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	b10b      	cbz	r3, 8006c7c <_free_r+0x58>
 8006c78:	42a3      	cmp	r3, r4
 8006c7a:	d9fa      	bls.n	8006c72 <_free_r+0x4e>
 8006c7c:	6811      	ldr	r1, [r2, #0]
 8006c7e:	1855      	adds	r5, r2, r1
 8006c80:	42a5      	cmp	r5, r4
 8006c82:	d10b      	bne.n	8006c9c <_free_r+0x78>
 8006c84:	6824      	ldr	r4, [r4, #0]
 8006c86:	4421      	add	r1, r4
 8006c88:	1854      	adds	r4, r2, r1
 8006c8a:	42a3      	cmp	r3, r4
 8006c8c:	6011      	str	r1, [r2, #0]
 8006c8e:	d1dd      	bne.n	8006c4c <_free_r+0x28>
 8006c90:	681c      	ldr	r4, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	6053      	str	r3, [r2, #4]
 8006c96:	4421      	add	r1, r4
 8006c98:	6011      	str	r1, [r2, #0]
 8006c9a:	e7d7      	b.n	8006c4c <_free_r+0x28>
 8006c9c:	d902      	bls.n	8006ca4 <_free_r+0x80>
 8006c9e:	230c      	movs	r3, #12
 8006ca0:	6003      	str	r3, [r0, #0]
 8006ca2:	e7d3      	b.n	8006c4c <_free_r+0x28>
 8006ca4:	6825      	ldr	r5, [r4, #0]
 8006ca6:	1961      	adds	r1, r4, r5
 8006ca8:	428b      	cmp	r3, r1
 8006caa:	bf04      	itt	eq
 8006cac:	6819      	ldreq	r1, [r3, #0]
 8006cae:	685b      	ldreq	r3, [r3, #4]
 8006cb0:	6063      	str	r3, [r4, #4]
 8006cb2:	bf04      	itt	eq
 8006cb4:	1949      	addeq	r1, r1, r5
 8006cb6:	6021      	streq	r1, [r4, #0]
 8006cb8:	6054      	str	r4, [r2, #4]
 8006cba:	e7c7      	b.n	8006c4c <_free_r+0x28>
 8006cbc:	b003      	add	sp, #12
 8006cbe:	bd30      	pop	{r4, r5, pc}
 8006cc0:	200000b4 	.word	0x200000b4

08006cc4 <_malloc_r>:
 8006cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc6:	1ccd      	adds	r5, r1, #3
 8006cc8:	f025 0503 	bic.w	r5, r5, #3
 8006ccc:	3508      	adds	r5, #8
 8006cce:	2d0c      	cmp	r5, #12
 8006cd0:	bf38      	it	cc
 8006cd2:	250c      	movcc	r5, #12
 8006cd4:	2d00      	cmp	r5, #0
 8006cd6:	4606      	mov	r6, r0
 8006cd8:	db01      	blt.n	8006cde <_malloc_r+0x1a>
 8006cda:	42a9      	cmp	r1, r5
 8006cdc:	d903      	bls.n	8006ce6 <_malloc_r+0x22>
 8006cde:	230c      	movs	r3, #12
 8006ce0:	6033      	str	r3, [r6, #0]
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ce6:	f000 f857 	bl	8006d98 <__malloc_lock>
 8006cea:	4921      	ldr	r1, [pc, #132]	; (8006d70 <_malloc_r+0xac>)
 8006cec:	680a      	ldr	r2, [r1, #0]
 8006cee:	4614      	mov	r4, r2
 8006cf0:	b99c      	cbnz	r4, 8006d1a <_malloc_r+0x56>
 8006cf2:	4f20      	ldr	r7, [pc, #128]	; (8006d74 <_malloc_r+0xb0>)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	b923      	cbnz	r3, 8006d02 <_malloc_r+0x3e>
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	f000 f83c 	bl	8006d78 <_sbrk_r>
 8006d00:	6038      	str	r0, [r7, #0]
 8006d02:	4629      	mov	r1, r5
 8006d04:	4630      	mov	r0, r6
 8006d06:	f000 f837 	bl	8006d78 <_sbrk_r>
 8006d0a:	1c43      	adds	r3, r0, #1
 8006d0c:	d123      	bne.n	8006d56 <_malloc_r+0x92>
 8006d0e:	230c      	movs	r3, #12
 8006d10:	6033      	str	r3, [r6, #0]
 8006d12:	4630      	mov	r0, r6
 8006d14:	f000 f846 	bl	8006da4 <__malloc_unlock>
 8006d18:	e7e3      	b.n	8006ce2 <_malloc_r+0x1e>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	1b5b      	subs	r3, r3, r5
 8006d1e:	d417      	bmi.n	8006d50 <_malloc_r+0x8c>
 8006d20:	2b0b      	cmp	r3, #11
 8006d22:	d903      	bls.n	8006d2c <_malloc_r+0x68>
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	441c      	add	r4, r3
 8006d28:	6025      	str	r5, [r4, #0]
 8006d2a:	e004      	b.n	8006d36 <_malloc_r+0x72>
 8006d2c:	6863      	ldr	r3, [r4, #4]
 8006d2e:	42a2      	cmp	r2, r4
 8006d30:	bf0c      	ite	eq
 8006d32:	600b      	streq	r3, [r1, #0]
 8006d34:	6053      	strne	r3, [r2, #4]
 8006d36:	4630      	mov	r0, r6
 8006d38:	f000 f834 	bl	8006da4 <__malloc_unlock>
 8006d3c:	f104 000b 	add.w	r0, r4, #11
 8006d40:	1d23      	adds	r3, r4, #4
 8006d42:	f020 0007 	bic.w	r0, r0, #7
 8006d46:	1ac2      	subs	r2, r0, r3
 8006d48:	d0cc      	beq.n	8006ce4 <_malloc_r+0x20>
 8006d4a:	1a1b      	subs	r3, r3, r0
 8006d4c:	50a3      	str	r3, [r4, r2]
 8006d4e:	e7c9      	b.n	8006ce4 <_malloc_r+0x20>
 8006d50:	4622      	mov	r2, r4
 8006d52:	6864      	ldr	r4, [r4, #4]
 8006d54:	e7cc      	b.n	8006cf0 <_malloc_r+0x2c>
 8006d56:	1cc4      	adds	r4, r0, #3
 8006d58:	f024 0403 	bic.w	r4, r4, #3
 8006d5c:	42a0      	cmp	r0, r4
 8006d5e:	d0e3      	beq.n	8006d28 <_malloc_r+0x64>
 8006d60:	1a21      	subs	r1, r4, r0
 8006d62:	4630      	mov	r0, r6
 8006d64:	f000 f808 	bl	8006d78 <_sbrk_r>
 8006d68:	3001      	adds	r0, #1
 8006d6a:	d1dd      	bne.n	8006d28 <_malloc_r+0x64>
 8006d6c:	e7cf      	b.n	8006d0e <_malloc_r+0x4a>
 8006d6e:	bf00      	nop
 8006d70:	200000b4 	.word	0x200000b4
 8006d74:	200000b8 	.word	0x200000b8

08006d78 <_sbrk_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4d06      	ldr	r5, [pc, #24]	; (8006d94 <_sbrk_r+0x1c>)
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4604      	mov	r4, r0
 8006d80:	4608      	mov	r0, r1
 8006d82:	602b      	str	r3, [r5, #0]
 8006d84:	f7f9 ff26 	bl	8000bd4 <_sbrk>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d102      	bne.n	8006d92 <_sbrk_r+0x1a>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	b103      	cbz	r3, 8006d92 <_sbrk_r+0x1a>
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	20000890 	.word	0x20000890

08006d98 <__malloc_lock>:
 8006d98:	4801      	ldr	r0, [pc, #4]	; (8006da0 <__malloc_lock+0x8>)
 8006d9a:	f000 b809 	b.w	8006db0 <__retarget_lock_acquire_recursive>
 8006d9e:	bf00      	nop
 8006da0:	20000898 	.word	0x20000898

08006da4 <__malloc_unlock>:
 8006da4:	4801      	ldr	r0, [pc, #4]	; (8006dac <__malloc_unlock+0x8>)
 8006da6:	f000 b804 	b.w	8006db2 <__retarget_lock_release_recursive>
 8006daa:	bf00      	nop
 8006dac:	20000898 	.word	0x20000898

08006db0 <__retarget_lock_acquire_recursive>:
 8006db0:	4770      	bx	lr

08006db2 <__retarget_lock_release_recursive>:
 8006db2:	4770      	bx	lr

08006db4 <_init>:
 8006db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db6:	bf00      	nop
 8006db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dba:	bc08      	pop	{r3}
 8006dbc:	469e      	mov	lr, r3
 8006dbe:	4770      	bx	lr

08006dc0 <_fini>:
 8006dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc2:	bf00      	nop
 8006dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc6:	bc08      	pop	{r3}
 8006dc8:	469e      	mov	lr, r3
 8006dca:	4770      	bx	lr
