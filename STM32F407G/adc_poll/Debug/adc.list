
adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008744  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080088d4  080088d4  000188d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008978  08008978  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008978  08008978  00018978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008980  08008980  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008980  08008980  00018980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008984  08008984  00018984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c74  200001e4  08008b6c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e58  08008b6c  00021e58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b87d  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d66  00000000  00000000  0003ba91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0003f7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  00040aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f9a  00000000  00000000  00041bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019677  00000000  00000000  00067b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d747c  00000000  00000000  000811e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158665  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005140  00000000  00000000  001586b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080088bc 	.word	0x080088bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080088bc 	.word	0x080088bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b092      	sub	sp, #72	; 0x48
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fca7 	bl	8000ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f82f 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f995 	bl	80008b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800058a:	f000 f8ff 	bl	800078c <MX_I2C1_Init>
  MX_I2S3_Init();
 800058e:	f000 f92b 	bl	80007e8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000592:	f000 f959 	bl	8000848 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000596:	f000 f8a7 	bl	80006e8 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 800059a:	f006 fff3 	bl	8007584 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t msg_buffer[64] = {'\0'};
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	223c      	movs	r2, #60	; 0x3c
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f007 fd3c 	bl	8008028 <memset>

	//uint32_t adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value

	//HAL_ADC_Stop(&hadc1); // stop adc

	uint32_t adc_val = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	647b      	str	r3, [r7, #68]	; 0x44

	snprintf(msg_buffer, sizeof(msg_buffer), "ADC value= %d\r\n", adc_val);
 80005b4:	1d38      	adds	r0, r7, #4
 80005b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005b8:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <main+0x68>)
 80005ba:	2140      	movs	r1, #64	; 0x40
 80005bc:	f007 fd3c 	bl	8008038 <sniprintf>
	CDC_Transmit_FS((uint8_t*)msg_buffer, strlen(msg_buffer));
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fe04 	bl	80001d0 <strlen>
 80005c8:	4602      	mov	r2, r0
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4611      	mov	r1, r2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f007 f896 	bl	8007700 <CDC_Transmit_FS>

	HAL_Delay (500); // wait for 500ms
 80005d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005d8:	f000 fcec 	bl	8000fb4 <HAL_Delay>
  {
 80005dc:	e7e8      	b.n	80005b0 <main+0x38>
 80005de:	bf00      	nop
 80005e0:	080088d4 	.word	0x080088d4

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b098      	sub	sp, #96	; 0x60
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f007 fd18 	bl	8008028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemClock_Config+0xfc>)
 800061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061e:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemClock_Config+0xfc>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	6413      	str	r3, [r2, #64]	; 0x40
 8000626:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemClock_Config+0xfc>)
 8000628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <SystemClock_Config+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a2a      	ldr	r2, [pc, #168]	; (80006e4 <SystemClock_Config+0x100>)
 800063c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064e:	2301      	movs	r3, #1
 8000650:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000652:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000662:	2308      	movs	r3, #8
 8000664:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000666:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800066a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000670:	2307      	movs	r3, #7
 8000672:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000678:	4618      	mov	r0, r3
 800067a:	f003 f951 	bl	8003920 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000684:	f000 fa14 	bl	8000ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000694:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	2105      	movs	r1, #5
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 fbb2 	bl	8003e10 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006b2:	f000 f9fd 	bl	8000ab0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006b6:	2301      	movs	r3, #1
 80006b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80006ba:	23c0      	movs	r3, #192	; 0xc0
 80006bc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 fd8a 	bl	80041e0 <HAL_RCCEx_PeriphCLKConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006d2:	f000 f9ed 	bl	8000ab0 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3760      	adds	r7, #96	; 0x60
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ee:	463b      	mov	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_ADC1_Init+0x98>)
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <MX_ADC1_Init+0x9c>)
 80006fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_ADC1_Init+0x98>)
 8000702:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000706:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000708:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_ADC1_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_ADC1_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000714:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_ADC1_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_ADC1_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_ADC1_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_ADC1_Init+0x98>)
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <MX_ADC1_Init+0xa0>)
 800072c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_ADC1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_ADC1_Init+0x98>)
 8000736:	2201      	movs	r2, #1
 8000738:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_ADC1_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_ADC1_Init+0x98>)
 8000744:	2201      	movs	r2, #1
 8000746:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <MX_ADC1_Init+0x98>)
 800074a:	f000 fc57 	bl	8000ffc <HAL_ADC_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000754:	f000 f9ac 	bl	8000ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000758:	2301      	movs	r3, #1
 800075a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000764:	463b      	mov	r3, r7
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_ADC1_Init+0x98>)
 800076a:	f000 fc8b 	bl	8001084 <HAL_ADC_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000774:	f000 f99c 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000484 	.word	0x20000484
 8000784:	40012000 	.word	0x40012000
 8000788:	0f000001 	.word	0x0f000001

0800078c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_I2C1_Init+0x50>)
 8000792:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <MX_I2C1_Init+0x54>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_I2C1_Init+0x50>)
 8000798:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x58>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_I2C1_Init+0x50>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_I2C1_Init+0x50>)
 80007ca:	f001 f941 	bl	8001a50 <HAL_I2C_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d4:	f000 f96c 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000430 	.word	0x20000430
 80007e0:	40005400 	.word	0x40005400
 80007e4:	000186a0 	.word	0x000186a0

080007e8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_I2S3_Init+0x54>)
 80007ee:	4a14      	ldr	r2, [pc, #80]	; (8000840 <MX_I2S3_Init+0x58>)
 80007f0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_I2S3_Init+0x54>)
 80007f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_I2S3_Init+0x54>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_I2S3_Init+0x54>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <MX_I2S3_Init+0x54>)
 8000808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_I2S3_Init+0x54>)
 8000810:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <MX_I2S3_Init+0x5c>)
 8000812:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_I2S3_Init+0x54>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_I2S3_Init+0x54>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_I2S3_Init+0x54>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_I2S3_Init+0x54>)
 8000828:	f001 fa56 	bl	8001cd8 <HAL_I2S_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000832:	f000 f93d 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000524 	.word	0x20000524
 8000840:	40003c00 	.word	0x40003c00
 8000844:	00017700 	.word	0x00017700

08000848 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800084c:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_SPI1_Init+0x64>)
 800084e:	4a18      	ldr	r2, [pc, #96]	; (80008b0 <MX_SPI1_Init+0x68>)
 8000850:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <MX_SPI1_Init+0x64>)
 8000854:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000858:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_SPI1_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_SPI1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_SPI1_Init+0x64>)
 8000874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000878:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_SPI1_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <MX_SPI1_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_SPI1_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <MX_SPI1_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_SPI1_Init+0x64>)
 8000894:	220a      	movs	r2, #10
 8000896:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_SPI1_Init+0x64>)
 800089a:	f003 fde1 	bl	8004460 <HAL_SPI_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008a4:	f000 f904 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200004cc 	.word	0x200004cc
 80008b0:	40013000 	.word	0x40013000

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	; 0x30
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
 80008ce:	4b72      	ldr	r3, [pc, #456]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a71      	ldr	r2, [pc, #452]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 80008d4:	f043 0310 	orr.w	r3, r3, #16
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b6f      	ldr	r3, [pc, #444]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0310 	and.w	r3, r3, #16
 80008e2:	61bb      	str	r3, [r7, #24]
 80008e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	4b6b      	ldr	r3, [pc, #428]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a6a      	ldr	r2, [pc, #424]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b68      	ldr	r3, [pc, #416]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b64      	ldr	r3, [pc, #400]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a63      	ldr	r2, [pc, #396]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 800090c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b61      	ldr	r3, [pc, #388]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b5d      	ldr	r3, [pc, #372]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a5c      	ldr	r2, [pc, #368]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b5a      	ldr	r3, [pc, #360]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	4b56      	ldr	r3, [pc, #344]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a55      	ldr	r2, [pc, #340]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b53      	ldr	r3, [pc, #332]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b4f      	ldr	r3, [pc, #316]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a4e      	ldr	r2, [pc, #312]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b4c      	ldr	r3, [pc, #304]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2108      	movs	r1, #8
 8000976:	4849      	ldr	r0, [pc, #292]	; (8000a9c <MX_GPIO_Init+0x1e8>)
 8000978:	f001 f850 	bl	8001a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	2101      	movs	r1, #1
 8000980:	4847      	ldr	r0, [pc, #284]	; (8000aa0 <MX_GPIO_Init+0x1ec>)
 8000982:	f001 f84b 	bl	8001a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000986:	2200      	movs	r2, #0
 8000988:	f24f 0110 	movw	r1, #61456	; 0xf010
 800098c:	4845      	ldr	r0, [pc, #276]	; (8000aa4 <MX_GPIO_Init+0x1f0>)
 800098e:	f001 f845 	bl	8001a1c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000992:	2308      	movs	r3, #8
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	483c      	ldr	r0, [pc, #240]	; (8000a9c <MX_GPIO_Init+0x1e8>)
 80009aa:	f000 fe9b 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4836      	ldr	r0, [pc, #216]	; (8000aa0 <MX_GPIO_Init+0x1ec>)
 80009c6:	f000 fe8d 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009ca:	2308      	movs	r3, #8
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009da:	2305      	movs	r3, #5
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	482e      	ldr	r0, [pc, #184]	; (8000aa0 <MX_GPIO_Init+0x1ec>)
 80009e6:	f000 fe7d 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	482a      	ldr	r0, [pc, #168]	; (8000aa8 <MX_GPIO_Init+0x1f4>)
 8000a00:	f000 fe70 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a04:	2304      	movs	r3, #4
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4825      	ldr	r0, [pc, #148]	; (8000aac <MX_GPIO_Init+0x1f8>)
 8000a18:	f000 fe64 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a2e:	2305      	movs	r3, #5
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	481c      	ldr	r0, [pc, #112]	; (8000aac <MX_GPIO_Init+0x1f8>)
 8000a3a:	f000 fe53 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a3e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a42:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4813      	ldr	r0, [pc, #76]	; (8000aa4 <MX_GPIO_Init+0x1f0>)
 8000a58:	f000 fe44 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <MX_GPIO_Init+0x1f0>)
 8000a70:	f000 fe38 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a78:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_GPIO_Init+0x1e8>)
 8000a8a:	f000 fe2b 	bl	80016e4 <HAL_GPIO_Init>

}
 8000a8e:	bf00      	nop
 8000a90:	3730      	adds	r7, #48	; 0x30
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40020c00 	.word	0x40020c00
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40020400 	.word	0x40020400

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000afa:	2007      	movs	r0, #7
 8000afc:	f000 fdb0 	bl	8001660 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <HAL_ADC_MspInit+0x7c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d127      	bne.n	8000b7e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <HAL_ADC_MspInit+0x80>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <HAL_ADC_MspInit+0x80>)
 8000b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <HAL_ADC_MspInit+0x80>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_ADC_MspInit+0x80>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_ADC_MspInit+0x80>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_ADC_MspInit+0x80>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b66:	2302      	movs	r3, #2
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <HAL_ADC_MspInit+0x84>)
 8000b7a:	f000 fdb3 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	; 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40012000 	.word	0x40012000
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020000 	.word	0x40020000

08000b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <HAL_I2C_MspInit+0x84>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d12c      	bne.n	8000c10 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bd2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd8:	2312      	movs	r3, #18
 8000bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be4:	2304      	movs	r3, #4
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	480c      	ldr	r0, [pc, #48]	; (8000c20 <HAL_I2C_MspInit+0x8c>)
 8000bf0:	f000 fd78 	bl	80016e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c02:	6413      	str	r3, [r2, #64]	; 0x40
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020400 	.word	0x40020400

08000c24 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a28      	ldr	r2, [pc, #160]	; (8000ce4 <HAL_I2S_MspInit+0xc0>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d14a      	bne.n	8000cdc <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <HAL_I2S_MspInit+0xc4>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <HAL_I2S_MspInit+0xc4>)
 8000c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
 8000c56:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <HAL_I2S_MspInit+0xc4>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <HAL_I2S_MspInit+0xc4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ce8 <HAL_I2S_MspInit+0xc4>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <HAL_I2S_MspInit+0xc4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <HAL_I2S_MspInit+0xc4>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a18      	ldr	r2, [pc, #96]	; (8000ce8 <HAL_I2S_MspInit+0xc4>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_I2S_MspInit+0xc4>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c9a:	2310      	movs	r3, #16
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000caa:	2306      	movs	r3, #6
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <HAL_I2S_MspInit+0xc8>)
 8000cb6:	f000 fd15 	bl	80016e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cba:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ccc:	2306      	movs	r3, #6
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <HAL_I2S_MspInit+0xcc>)
 8000cd8:	f000 fd04 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cdc:	bf00      	nop
 8000cde:	3728      	adds	r7, #40	; 0x28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40003c00 	.word	0x40003c00
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020800 	.word	0x40020800

08000cf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a19      	ldr	r2, [pc, #100]	; (8000d78 <HAL_SPI_MspInit+0x84>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d12b      	bne.n	8000d6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d24:	6453      	str	r3, [r2, #68]	; 0x44
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d4e:	23e0      	movs	r3, #224	; 0xe0
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <HAL_SPI_MspInit+0x8c>)
 8000d6a:	f000 fcbb 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40013000 	.word	0x40013000
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f8d0 	bl	8000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <OTG_FS_IRQHandler+0x10>)
 8000dde:	f001 fd6b 	bl	80028b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20001a40 	.word	0x20001a40

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f007 f8da 	bl	8007fd4 <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20020000 	.word	0x20020000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	20000200 	.word	0x20000200
 8000e54:	20001e58 	.word	0x20001e58

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <SystemInit+0x20>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <SystemInit+0x20>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e80:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e82:	490e      	ldr	r1, [pc, #56]	; (8000ebc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e84:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e88:	e002      	b.n	8000e90 <LoopCopyDataInit>

08000e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8e:	3304      	adds	r3, #4

08000e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e94:	d3f9      	bcc.n	8000e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e98:	4c0b      	ldr	r4, [pc, #44]	; (8000ec8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e9c:	e001      	b.n	8000ea2 <LoopFillZerobss>

08000e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea0:	3204      	adds	r2, #4

08000ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ea6:	f7ff ffd7 	bl	8000e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eaa:	f007 f899 	bl	8007fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eae:	f7ff fb63 	bl	8000578 <main>
  bx  lr    
 8000eb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ebc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000ec0:	08008988 	.word	0x08008988
  ldr r2, =_sbss
 8000ec4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000ec8:	20001e58 	.word	0x20001e58

08000ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC_IRQHandler>
	...

08000ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <HAL_Init+0x40>)
 8000eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <HAL_Init+0x40>)
 8000ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <HAL_Init+0x40>)
 8000ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 fbb1 	bl	8001660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efe:	2000      	movs	r0, #0
 8000f00:	f000 f808 	bl	8000f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f04:	f7ff fdda 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023c00 	.word	0x40023c00

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x54>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x58>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fbc9 	bl	80016ca <HAL_SYSTICK_Config>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00e      	b.n	8000f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d80a      	bhi.n	8000f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f50:	f000 fb91 	bl	8001676 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <HAL_InitTick+0x5c>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e000      	b.n	8000f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000004 	.word	0x20000004

08000f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x20>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x24>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_IncTick+0x24>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008
 8000f98:	2000056c 	.word	0x2000056c

08000f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_GetTick+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2000056c 	.word	0x2000056c

08000fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fbc:	f7ff ffee 	bl	8000f9c <HAL_GetTick>
 8000fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fcc:	d005      	beq.n	8000fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_Delay+0x44>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fda:	bf00      	nop
 8000fdc:	f7ff ffde 	bl	8000f9c <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8f7      	bhi.n	8000fdc <HAL_Delay+0x28>
  {
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000008 	.word	0x20000008

08000ffc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e033      	b.n	800107a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	2b00      	cmp	r3, #0
 8001018:	d109      	bne.n	800102e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fd76 	bl	8000b0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f003 0310 	and.w	r3, r3, #16
 8001036:	2b00      	cmp	r3, #0
 8001038:	d118      	bne.n	800106c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001042:	f023 0302 	bic.w	r3, r3, #2
 8001046:	f043 0202 	orr.w	r2, r3, #2
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f93a 	bl	80012c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f023 0303 	bic.w	r3, r3, #3
 8001062:	f043 0201 	orr.w	r2, r3, #1
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	641a      	str	r2, [r3, #64]	; 0x40
 800106a:	e001      	b.n	8001070 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001078:	7bfb      	ldrb	r3, [r7, #15]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001098:	2b01      	cmp	r3, #1
 800109a:	d101      	bne.n	80010a0 <HAL_ADC_ConfigChannel+0x1c>
 800109c:	2302      	movs	r3, #2
 800109e:	e105      	b.n	80012ac <HAL_ADC_ConfigChannel+0x228>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2201      	movs	r2, #1
 80010a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b09      	cmp	r3, #9
 80010ae:	d925      	bls.n	80010fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68d9      	ldr	r1, [r3, #12]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	4613      	mov	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	3b1e      	subs	r3, #30
 80010c6:	2207      	movs	r2, #7
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43da      	mvns	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	400a      	ands	r2, r1
 80010d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68d9      	ldr	r1, [r3, #12]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	4603      	mov	r3, r0
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4403      	add	r3, r0
 80010ee:	3b1e      	subs	r3, #30
 80010f0:	409a      	lsls	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	e022      	b.n	8001142 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6919      	ldr	r1, [r3, #16]
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	b29b      	uxth	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	2207      	movs	r2, #7
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	400a      	ands	r2, r1
 800111e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6919      	ldr	r1, [r3, #16]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	4618      	mov	r0, r3
 8001132:	4603      	mov	r3, r0
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4403      	add	r3, r0
 8001138:	409a      	lsls	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	430a      	orrs	r2, r1
 8001140:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b06      	cmp	r3, #6
 8001148:	d824      	bhi.n	8001194 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	3b05      	subs	r3, #5
 800115c:	221f      	movs	r2, #31
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	400a      	ands	r2, r1
 800116a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	3b05      	subs	r3, #5
 8001186:	fa00 f203 	lsl.w	r2, r0, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	430a      	orrs	r2, r1
 8001190:	635a      	str	r2, [r3, #52]	; 0x34
 8001192:	e04c      	b.n	800122e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b0c      	cmp	r3, #12
 800119a:	d824      	bhi.n	80011e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	3b23      	subs	r3, #35	; 0x23
 80011ae:	221f      	movs	r2, #31
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43da      	mvns	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	400a      	ands	r2, r1
 80011bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	3b23      	subs	r3, #35	; 0x23
 80011d8:	fa00 f203 	lsl.w	r2, r0, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	430a      	orrs	r2, r1
 80011e2:	631a      	str	r2, [r3, #48]	; 0x30
 80011e4:	e023      	b.n	800122e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	3b41      	subs	r3, #65	; 0x41
 80011f8:	221f      	movs	r2, #31
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	400a      	ands	r2, r1
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	4618      	mov	r0, r3
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	3b41      	subs	r3, #65	; 0x41
 8001222:	fa00 f203 	lsl.w	r2, r0, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800122e:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <HAL_ADC_ConfigChannel+0x234>)
 8001230:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a21      	ldr	r2, [pc, #132]	; (80012bc <HAL_ADC_ConfigChannel+0x238>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d109      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x1cc>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b12      	cmp	r3, #18
 8001242:	d105      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a19      	ldr	r2, [pc, #100]	; (80012bc <HAL_ADC_ConfigChannel+0x238>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d123      	bne.n	80012a2 <HAL_ADC_ConfigChannel+0x21e>
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b10      	cmp	r3, #16
 8001260:	d003      	beq.n	800126a <HAL_ADC_ConfigChannel+0x1e6>
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b11      	cmp	r3, #17
 8001268:	d11b      	bne.n	80012a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b10      	cmp	r3, #16
 800127c:	d111      	bne.n	80012a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <HAL_ADC_ConfigChannel+0x23c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a10      	ldr	r2, [pc, #64]	; (80012c4 <HAL_ADC_ConfigChannel+0x240>)
 8001284:	fba2 2303 	umull	r2, r3, r2, r3
 8001288:	0c9a      	lsrs	r2, r3, #18
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001294:	e002      	b.n	800129c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	3b01      	subs	r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f9      	bne.n	8001296 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	40012300 	.word	0x40012300
 80012bc:	40012000 	.word	0x40012000
 80012c0:	20000000 	.word	0x20000000
 80012c4:	431bde83 	.word	0x431bde83

080012c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012d0:	4b79      	ldr	r3, [pc, #484]	; (80014b8 <ADC_Init+0x1f0>)
 80012d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	431a      	orrs	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6859      	ldr	r1, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	021a      	lsls	r2, r3, #8
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001320:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6859      	ldr	r1, [r3, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001342:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6899      	ldr	r1, [r3, #8]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135a:	4a58      	ldr	r2, [pc, #352]	; (80014bc <ADC_Init+0x1f4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d022      	beq.n	80013a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800136e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6899      	ldr	r1, [r3, #8]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001390:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6899      	ldr	r1, [r3, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	e00f      	b.n	80013c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0202 	bic.w	r2, r2, #2
 80013d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6899      	ldr	r1, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7e1b      	ldrb	r3, [r3, #24]
 80013e0:	005a      	lsls	r2, r3, #1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d01b      	beq.n	800142c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001402:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001412:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6859      	ldr	r1, [r3, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	3b01      	subs	r3, #1
 8001420:	035a      	lsls	r2, r3, #13
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	e007      	b.n	800143c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800143a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800144a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	3b01      	subs	r3, #1
 8001458:	051a      	lsls	r2, r3, #20
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001470:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6899      	ldr	r1, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800147e:	025a      	lsls	r2, r3, #9
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	430a      	orrs	r2, r1
 8001486:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001496:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6899      	ldr	r1, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	029a      	lsls	r2, r3, #10
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	609a      	str	r2, [r3, #8]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	40012300 	.word	0x40012300
 80014bc:	0f000001 	.word	0x0f000001

080014c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014dc:	4013      	ands	r3, r2
 80014de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f2:	4a04      	ldr	r2, [pc, #16]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	60d3      	str	r3, [r2, #12]
}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <__NVIC_GetPriorityGrouping+0x18>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	0a1b      	lsrs	r3, r3, #8
 8001512:	f003 0307 	and.w	r3, r3, #7
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	2b00      	cmp	r3, #0
 8001534:	db0b      	blt.n	800154e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	f003 021f 	and.w	r2, r3, #31
 800153c:	4907      	ldr	r1, [pc, #28]	; (800155c <__NVIC_EnableIRQ+0x38>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	095b      	lsrs	r3, r3, #5
 8001544:	2001      	movs	r0, #1
 8001546:	fa00 f202 	lsl.w	r2, r0, r2
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000e100 	.word	0xe000e100

08001560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db0a      	blt.n	800158a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	490c      	ldr	r1, [pc, #48]	; (80015ac <__NVIC_SetPriority+0x4c>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	0112      	lsls	r2, r2, #4
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	440b      	add	r3, r1
 8001584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001588:	e00a      	b.n	80015a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4908      	ldr	r1, [pc, #32]	; (80015b0 <__NVIC_SetPriority+0x50>)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	3b04      	subs	r3, #4
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	440b      	add	r3, r1
 800159e:	761a      	strb	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000e100 	.word	0xe000e100
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f1c3 0307 	rsb	r3, r3, #7
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	bf28      	it	cs
 80015d2:	2304      	movcs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3304      	adds	r3, #4
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d902      	bls.n	80015e4 <NVIC_EncodePriority+0x30>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3b03      	subs	r3, #3
 80015e2:	e000      	b.n	80015e6 <NVIC_EncodePriority+0x32>
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	401a      	ands	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43d9      	mvns	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	4313      	orrs	r3, r2
         );
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	; 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800162c:	d301      	bcc.n	8001632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162e:	2301      	movs	r3, #1
 8001630:	e00f      	b.n	8001652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <SysTick_Config+0x40>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163a:	210f      	movs	r1, #15
 800163c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001640:	f7ff ff8e 	bl	8001560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <SysTick_Config+0x40>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <SysTick_Config+0x40>)
 800164c:	2207      	movs	r2, #7
 800164e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	e000e010 	.word	0xe000e010

08001660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ff29 	bl	80014c0 <__NVIC_SetPriorityGrouping>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001688:	f7ff ff3e 	bl	8001508 <__NVIC_GetPriorityGrouping>
 800168c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	6978      	ldr	r0, [r7, #20]
 8001694:	f7ff ff8e 	bl	80015b4 <NVIC_EncodePriority>
 8001698:	4602      	mov	r2, r0
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff5d 	bl	8001560 <__NVIC_SetPriority>
}
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff31 	bl	8001524 <__NVIC_EnableIRQ>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ffa2 	bl	800161c <SysTick_Config>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	e16b      	b.n	80019d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001700:	2201      	movs	r2, #1
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	429a      	cmp	r2, r3
 800171a:	f040 815a 	bne.w	80019d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b01      	cmp	r3, #1
 8001728:	d005      	beq.n	8001736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001732:	2b02      	cmp	r3, #2
 8001734:	d130      	bne.n	8001798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	2203      	movs	r2, #3
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800176c:	2201      	movs	r2, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 0201 	and.w	r2, r3, #1
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d017      	beq.n	80017d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	2203      	movs	r2, #3
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d123      	bne.n	8001828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	08da      	lsrs	r2, r3, #3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3208      	adds	r2, #8
 80017e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	220f      	movs	r2, #15
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	08da      	lsrs	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3208      	adds	r2, #8
 8001822:	69b9      	ldr	r1, [r7, #24]
 8001824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0203 	and.w	r2, r3, #3
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80b4 	beq.w	80019d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b60      	ldr	r3, [pc, #384]	; (80019f0 <HAL_GPIO_Init+0x30c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a5f      	ldr	r2, [pc, #380]	; (80019f0 <HAL_GPIO_Init+0x30c>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b5d      	ldr	r3, [pc, #372]	; (80019f0 <HAL_GPIO_Init+0x30c>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001886:	4a5b      	ldr	r2, [pc, #364]	; (80019f4 <HAL_GPIO_Init+0x310>)
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	3302      	adds	r3, #2
 800188e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	220f      	movs	r2, #15
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a52      	ldr	r2, [pc, #328]	; (80019f8 <HAL_GPIO_Init+0x314>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d02b      	beq.n	800190a <HAL_GPIO_Init+0x226>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a51      	ldr	r2, [pc, #324]	; (80019fc <HAL_GPIO_Init+0x318>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d025      	beq.n	8001906 <HAL_GPIO_Init+0x222>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a50      	ldr	r2, [pc, #320]	; (8001a00 <HAL_GPIO_Init+0x31c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d01f      	beq.n	8001902 <HAL_GPIO_Init+0x21e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4f      	ldr	r2, [pc, #316]	; (8001a04 <HAL_GPIO_Init+0x320>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d019      	beq.n	80018fe <HAL_GPIO_Init+0x21a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4e      	ldr	r2, [pc, #312]	; (8001a08 <HAL_GPIO_Init+0x324>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0x216>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4d      	ldr	r2, [pc, #308]	; (8001a0c <HAL_GPIO_Init+0x328>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d00d      	beq.n	80018f6 <HAL_GPIO_Init+0x212>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4c      	ldr	r2, [pc, #304]	; (8001a10 <HAL_GPIO_Init+0x32c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d007      	beq.n	80018f2 <HAL_GPIO_Init+0x20e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4b      	ldr	r2, [pc, #300]	; (8001a14 <HAL_GPIO_Init+0x330>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_GPIO_Init+0x20a>
 80018ea:	2307      	movs	r3, #7
 80018ec:	e00e      	b.n	800190c <HAL_GPIO_Init+0x228>
 80018ee:	2308      	movs	r3, #8
 80018f0:	e00c      	b.n	800190c <HAL_GPIO_Init+0x228>
 80018f2:	2306      	movs	r3, #6
 80018f4:	e00a      	b.n	800190c <HAL_GPIO_Init+0x228>
 80018f6:	2305      	movs	r3, #5
 80018f8:	e008      	b.n	800190c <HAL_GPIO_Init+0x228>
 80018fa:	2304      	movs	r3, #4
 80018fc:	e006      	b.n	800190c <HAL_GPIO_Init+0x228>
 80018fe:	2303      	movs	r3, #3
 8001900:	e004      	b.n	800190c <HAL_GPIO_Init+0x228>
 8001902:	2302      	movs	r3, #2
 8001904:	e002      	b.n	800190c <HAL_GPIO_Init+0x228>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <HAL_GPIO_Init+0x228>
 800190a:	2300      	movs	r3, #0
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	f002 0203 	and.w	r2, r2, #3
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	4093      	lsls	r3, r2
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800191c:	4935      	ldr	r1, [pc, #212]	; (80019f4 <HAL_GPIO_Init+0x310>)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800192a:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <HAL_GPIO_Init+0x334>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800194e:	4a32      	ldr	r2, [pc, #200]	; (8001a18 <HAL_GPIO_Init+0x334>)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001954:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_GPIO_Init+0x334>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001978:	4a27      	ldr	r2, [pc, #156]	; (8001a18 <HAL_GPIO_Init+0x334>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800197e:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <HAL_GPIO_Init+0x334>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019a2:	4a1d      	ldr	r2, [pc, #116]	; (8001a18 <HAL_GPIO_Init+0x334>)
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_GPIO_Init+0x334>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019cc:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <HAL_GPIO_Init+0x334>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3301      	adds	r3, #1
 80019d6:	61fb      	str	r3, [r7, #28]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	2b0f      	cmp	r3, #15
 80019dc:	f67f ae90 	bls.w	8001700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3724      	adds	r7, #36	; 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40013800 	.word	0x40013800
 80019f8:	40020000 	.word	0x40020000
 80019fc:	40020400 	.word	0x40020400
 8001a00:	40020800 	.word	0x40020800
 8001a04:	40020c00 	.word	0x40020c00
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40021400 	.word	0x40021400
 8001a10:	40021800 	.word	0x40021800
 8001a14:	40021c00 	.word	0x40021c00
 8001a18:	40013c00 	.word	0x40013c00

08001a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	807b      	strh	r3, [r7, #2]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a2c:	787b      	ldrb	r3, [r7, #1]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a38:	e003      	b.n	8001a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	041a      	lsls	r2, r3, #16
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	619a      	str	r2, [r3, #24]
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e12b      	b.n	8001cba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d106      	bne.n	8001a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff f88c 	bl	8000b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2224      	movs	r2, #36	; 0x24
 8001a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0201 	bic.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ab2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ab4:	f002 fb80 	bl	80041b8 <HAL_RCC_GetPCLK1Freq>
 8001ab8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4a81      	ldr	r2, [pc, #516]	; (8001cc4 <HAL_I2C_Init+0x274>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d807      	bhi.n	8001ad4 <HAL_I2C_Init+0x84>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4a80      	ldr	r2, [pc, #512]	; (8001cc8 <HAL_I2C_Init+0x278>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	bf94      	ite	ls
 8001acc:	2301      	movls	r3, #1
 8001ace:	2300      	movhi	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	e006      	b.n	8001ae2 <HAL_I2C_Init+0x92>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4a7d      	ldr	r2, [pc, #500]	; (8001ccc <HAL_I2C_Init+0x27c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	bf94      	ite	ls
 8001adc:	2301      	movls	r3, #1
 8001ade:	2300      	movhi	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e0e7      	b.n	8001cba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4a78      	ldr	r2, [pc, #480]	; (8001cd0 <HAL_I2C_Init+0x280>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	0c9b      	lsrs	r3, r3, #18
 8001af4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4a6a      	ldr	r2, [pc, #424]	; (8001cc4 <HAL_I2C_Init+0x274>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d802      	bhi.n	8001b24 <HAL_I2C_Init+0xd4>
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	3301      	adds	r3, #1
 8001b22:	e009      	b.n	8001b38 <HAL_I2C_Init+0xe8>
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b2a:	fb02 f303 	mul.w	r3, r2, r3
 8001b2e:	4a69      	ldr	r2, [pc, #420]	; (8001cd4 <HAL_I2C_Init+0x284>)
 8001b30:	fba2 2303 	umull	r2, r3, r2, r3
 8001b34:	099b      	lsrs	r3, r3, #6
 8001b36:	3301      	adds	r3, #1
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	495c      	ldr	r1, [pc, #368]	; (8001cc4 <HAL_I2C_Init+0x274>)
 8001b54:	428b      	cmp	r3, r1
 8001b56:	d819      	bhi.n	8001b8c <HAL_I2C_Init+0x13c>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1e59      	subs	r1, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b66:	1c59      	adds	r1, r3, #1
 8001b68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b6c:	400b      	ands	r3, r1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00a      	beq.n	8001b88 <HAL_I2C_Init+0x138>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1e59      	subs	r1, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b80:	3301      	adds	r3, #1
 8001b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b86:	e051      	b.n	8001c2c <HAL_I2C_Init+0x1dc>
 8001b88:	2304      	movs	r3, #4
 8001b8a:	e04f      	b.n	8001c2c <HAL_I2C_Init+0x1dc>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d111      	bne.n	8001bb8 <HAL_I2C_Init+0x168>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1e58      	subs	r0, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6859      	ldr	r1, [r3, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	440b      	add	r3, r1
 8001ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf0c      	ite	eq
 8001bb0:	2301      	moveq	r3, #1
 8001bb2:	2300      	movne	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	e012      	b.n	8001bde <HAL_I2C_Init+0x18e>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1e58      	subs	r0, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	0099      	lsls	r1, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf0c      	ite	eq
 8001bd8:	2301      	moveq	r3, #1
 8001bda:	2300      	movne	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_I2C_Init+0x196>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e022      	b.n	8001c2c <HAL_I2C_Init+0x1dc>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10e      	bne.n	8001c0c <HAL_I2C_Init+0x1bc>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1e58      	subs	r0, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6859      	ldr	r1, [r3, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	440b      	add	r3, r1
 8001bfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c00:	3301      	adds	r3, #1
 8001c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c0a:	e00f      	b.n	8001c2c <HAL_I2C_Init+0x1dc>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1e58      	subs	r0, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6859      	ldr	r1, [r3, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	0099      	lsls	r1, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	6809      	ldr	r1, [r1, #0]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69da      	ldr	r2, [r3, #28]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6911      	ldr	r1, [r2, #16]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68d2      	ldr	r2, [r2, #12]
 8001c66:	4311      	orrs	r1, r2
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	000186a0 	.word	0x000186a0
 8001cc8:	001e847f 	.word	0x001e847f
 8001ccc:	003d08ff 	.word	0x003d08ff
 8001cd0:	431bde83 	.word	0x431bde83
 8001cd4:	10624dd3 	.word	0x10624dd3

08001cd8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e128      	b.n	8001f3c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d109      	bne.n	8001d0a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a90      	ldr	r2, [pc, #576]	; (8001f44 <HAL_I2S_Init+0x26c>)
 8001d02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7fe ff8d 	bl	8000c24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d20:	f023 030f 	bic.w	r3, r3, #15
 8001d24:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d060      	beq.n	8001df8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d102      	bne.n	8001d44 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001d3e:	2310      	movs	r3, #16
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e001      	b.n	8001d48 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001d44:	2320      	movs	r3, #32
 8001d46:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b20      	cmp	r3, #32
 8001d4e:	d802      	bhi.n	8001d56 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001d56:	2001      	movs	r0, #1
 8001d58:	f002 fb24 	bl	80043a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d5c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d66:	d125      	bne.n	8001db4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d010      	beq.n	8001d92 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	461a      	mov	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8c:	3305      	adds	r3, #5
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	e01f      	b.n	8001dd2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	461a      	mov	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	3305      	adds	r3, #5
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	e00e      	b.n	8001dd2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	3305      	adds	r3, #5
 8001dd0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4a5c      	ldr	r2, [pc, #368]	; (8001f48 <HAL_I2S_Init+0x270>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	08db      	lsrs	r3, r3, #3
 8001ddc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	085b      	lsrs	r3, r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	021b      	lsls	r3, r3, #8
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	e003      	b.n	8001e00 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d902      	bls.n	8001e0c <HAL_I2S_Init+0x134>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	2bff      	cmp	r3, #255	; 0xff
 8001e0a:	d907      	bls.n	8001e1c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e10:	f043 0210 	orr.w	r2, r3, #16
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e08f      	b.n	8001f3c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	ea42 0103 	orr.w	r1, r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e3a:	f023 030f 	bic.w	r3, r3, #15
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6851      	ldr	r1, [r2, #4]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6892      	ldr	r2, [r2, #8]
 8001e46:	4311      	orrs	r1, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	68d2      	ldr	r2, [r2, #12]
 8001e4c:	4311      	orrs	r1, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6992      	ldr	r2, [r2, #24]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e5e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d161      	bne.n	8001f2c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a38      	ldr	r2, [pc, #224]	; (8001f4c <HAL_I2S_Init+0x274>)
 8001e6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a37      	ldr	r2, [pc, #220]	; (8001f50 <HAL_I2S_Init+0x278>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d101      	bne.n	8001e7c <HAL_I2S_Init+0x1a4>
 8001e78:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <HAL_I2S_Init+0x27c>)
 8001e7a:	e001      	b.n	8001e80 <HAL_I2S_Init+0x1a8>
 8001e7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	4932      	ldr	r1, [pc, #200]	; (8001f50 <HAL_I2S_Init+0x278>)
 8001e88:	428a      	cmp	r2, r1
 8001e8a:	d101      	bne.n	8001e90 <HAL_I2S_Init+0x1b8>
 8001e8c:	4a31      	ldr	r2, [pc, #196]	; (8001f54 <HAL_I2S_Init+0x27c>)
 8001e8e:	e001      	b.n	8001e94 <HAL_I2S_Init+0x1bc>
 8001e90:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001e94:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e98:	f023 030f 	bic.w	r3, r3, #15
 8001e9c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a2b      	ldr	r2, [pc, #172]	; (8001f50 <HAL_I2S_Init+0x278>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d101      	bne.n	8001eac <HAL_I2S_Init+0x1d4>
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <HAL_I2S_Init+0x27c>)
 8001eaa:	e001      	b.n	8001eb0 <HAL_I2S_Init+0x1d8>
 8001eac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a25      	ldr	r2, [pc, #148]	; (8001f50 <HAL_I2S_Init+0x278>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d101      	bne.n	8001ec2 <HAL_I2S_Init+0x1ea>
 8001ebe:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <HAL_I2S_Init+0x27c>)
 8001ec0:	e001      	b.n	8001ec6 <HAL_I2S_Init+0x1ee>
 8001ec2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ed2:	d003      	beq.n	8001edc <HAL_I2S_Init+0x204>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d103      	bne.n	8001ee4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	e001      	b.n	8001ee8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001efc:	4313      	orrs	r3, r2
 8001efe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f06:	4313      	orrs	r3, r2
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	897b      	ldrh	r3, [r7, #10]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f14:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <HAL_I2S_Init+0x278>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d101      	bne.n	8001f24 <HAL_I2S_Init+0x24c>
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <HAL_I2S_Init+0x27c>)
 8001f22:	e001      	b.n	8001f28 <HAL_I2S_Init+0x250>
 8001f24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f28:	897a      	ldrh	r2, [r7, #10]
 8001f2a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3720      	adds	r7, #32
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	0800204f 	.word	0x0800204f
 8001f48:	cccccccd 	.word	0xcccccccd
 8001f4c:	08002165 	.word	0x08002165
 8001f50:	40003800 	.word	0x40003800
 8001f54:	40003400 	.word	0x40003400

08001f58 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	881a      	ldrh	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	1c9a      	adds	r2, r3, #2
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10e      	bne.n	8001fe8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fd8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ffb8 	bl	8001f58 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	b292      	uxth	r2, r2
 8002004:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	1c9a      	adds	r2, r3, #2
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002014:	b29b      	uxth	r3, r3
 8002016:	3b01      	subs	r3, #1
 8002018:	b29a      	uxth	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10e      	bne.n	8002046 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002036:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ff93 	bl	8001f6c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b04      	cmp	r3, #4
 8002068:	d13a      	bne.n	80020e0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d109      	bne.n	8002088 <I2S_IRQHandler+0x3a>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207e:	2b40      	cmp	r3, #64	; 0x40
 8002080:	d102      	bne.n	8002088 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff ffb4 	bl	8001ff0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208e:	2b40      	cmp	r3, #64	; 0x40
 8002090:	d126      	bne.n	80020e0 <I2S_IRQHandler+0x92>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	2b20      	cmp	r3, #32
 800209e:	d11f      	bne.n	80020e0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	f043 0202 	orr.w	r2, r3, #2
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ff50 	bl	8001f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d136      	bne.n	800215a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d109      	bne.n	800210a <I2S_IRQHandler+0xbc>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002100:	2b80      	cmp	r3, #128	; 0x80
 8002102:	d102      	bne.n	800210a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ff45 	bl	8001f94 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b08      	cmp	r3, #8
 8002112:	d122      	bne.n	800215a <I2S_IRQHandler+0x10c>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	2b20      	cmp	r3, #32
 8002120:	d11b      	bne.n	800215a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002130:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214c:	f043 0204 	orr.w	r2, r3, #4
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ff13 	bl	8001f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800215a:	bf00      	nop
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4aa2      	ldr	r2, [pc, #648]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d101      	bne.n	8002182 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800217e:	4ba2      	ldr	r3, [pc, #648]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002180:	e001      	b.n	8002186 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002182:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a9b      	ldr	r2, [pc, #620]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d101      	bne.n	80021a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800219c:	4b9a      	ldr	r3, [pc, #616]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800219e:	e001      	b.n	80021a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80021a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b0:	d004      	beq.n	80021bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 8099 	bne.w	80022ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d107      	bne.n	80021d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f925 	bl	8002420 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d107      	bne.n	80021f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f9c8 	bl	8002580 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f6:	2b40      	cmp	r3, #64	; 0x40
 80021f8:	d13a      	bne.n	8002270 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	2b00      	cmp	r3, #0
 8002202:	d035      	beq.n	8002270 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a7e      	ldr	r2, [pc, #504]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d101      	bne.n	8002212 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800220e:	4b7e      	ldr	r3, [pc, #504]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002210:	e001      	b.n	8002216 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002212:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4979      	ldr	r1, [pc, #484]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800221e:	428b      	cmp	r3, r1
 8002220:	d101      	bne.n	8002226 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002222:	4b79      	ldr	r3, [pc, #484]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002224:	e001      	b.n	800222a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002226:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800222a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800222e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800223e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f043 0202 	orr.w	r2, r3, #2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff fe88 	bl	8001f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b08      	cmp	r3, #8
 8002278:	f040 80be 	bne.w	80023f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 80b8 	beq.w	80023f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002296:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a59      	ldr	r2, [pc, #356]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80022a2:	4b59      	ldr	r3, [pc, #356]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80022a4:	e001      	b.n	80022aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80022a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4954      	ldr	r1, [pc, #336]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80022b2:	428b      	cmp	r3, r1
 80022b4:	d101      	bne.n	80022ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80022b6:	4b54      	ldr	r3, [pc, #336]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80022b8:	e001      	b.n	80022be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80022ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	f043 0204 	orr.w	r2, r3, #4
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff fe4a 	bl	8001f80 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80022ec:	e084      	b.n	80023f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d107      	bne.n	8002308 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f8be 	bl	8002484 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d107      	bne.n	8002322 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f8fd 	bl	800251c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002328:	2b40      	cmp	r3, #64	; 0x40
 800232a:	d12f      	bne.n	800238c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f003 0320 	and.w	r3, r3, #32
 8002332:	2b00      	cmp	r3, #0
 8002334:	d02a      	beq.n	800238c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002344:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a2e      	ldr	r2, [pc, #184]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d101      	bne.n	8002354 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002350:	4b2d      	ldr	r3, [pc, #180]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002352:	e001      	b.n	8002358 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002354:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4929      	ldr	r1, [pc, #164]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002360:	428b      	cmp	r3, r1
 8002362:	d101      	bne.n	8002368 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002364:	4b28      	ldr	r3, [pc, #160]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002366:	e001      	b.n	800236c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002368:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800236c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002370:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	f043 0202 	orr.w	r2, r3, #2
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff fdfa 	bl	8001f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b08      	cmp	r3, #8
 8002394:	d131      	bne.n	80023fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b00      	cmp	r3, #0
 800239e:	d02c      	beq.n	80023fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a17      	ldr	r2, [pc, #92]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d101      	bne.n	80023ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80023aa:	4b17      	ldr	r3, [pc, #92]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023ac:	e001      	b.n	80023b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80023ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4912      	ldr	r1, [pc, #72]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023ba:	428b      	cmp	r3, r1
 80023bc:	d101      	bne.n	80023c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80023be:	4b12      	ldr	r3, [pc, #72]	; (8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023c0:	e001      	b.n	80023c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80023c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023ca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023da:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e8:	f043 0204 	orr.w	r2, r3, #4
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff fdc5 	bl	8001f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023f6:	e000      	b.n	80023fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80023f8:	bf00      	nop
}
 80023fa:	bf00      	nop
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40003800 	.word	0x40003800
 8002408:	40003400 	.word	0x40003400

0800240c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	1c99      	adds	r1, r3, #2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6251      	str	r1, [r2, #36]	; 0x24
 8002432:	881a      	ldrh	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244c:	b29b      	uxth	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d113      	bne.n	800247a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002460:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002466:	b29b      	uxth	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d106      	bne.n	800247a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ffc9 	bl	800240c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	1c99      	adds	r1, r3, #2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6251      	str	r1, [r2, #36]	; 0x24
 8002496:	8819      	ldrh	r1, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <I2SEx_TxISR_I2SExt+0x90>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d101      	bne.n	80024a6 <I2SEx_TxISR_I2SExt+0x22>
 80024a2:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <I2SEx_TxISR_I2SExt+0x94>)
 80024a4:	e001      	b.n	80024aa <I2SEx_TxISR_I2SExt+0x26>
 80024a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024aa:	460a      	mov	r2, r1
 80024ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d121      	bne.n	800250a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <I2SEx_TxISR_I2SExt+0x90>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d101      	bne.n	80024d4 <I2SEx_TxISR_I2SExt+0x50>
 80024d0:	4b11      	ldr	r3, [pc, #68]	; (8002518 <I2SEx_TxISR_I2SExt+0x94>)
 80024d2:	e001      	b.n	80024d8 <I2SEx_TxISR_I2SExt+0x54>
 80024d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	490d      	ldr	r1, [pc, #52]	; (8002514 <I2SEx_TxISR_I2SExt+0x90>)
 80024e0:	428b      	cmp	r3, r1
 80024e2:	d101      	bne.n	80024e8 <I2SEx_TxISR_I2SExt+0x64>
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <I2SEx_TxISR_I2SExt+0x94>)
 80024e6:	e001      	b.n	80024ec <I2SEx_TxISR_I2SExt+0x68>
 80024e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d106      	bne.n	800250a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ff81 	bl	800240c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40003800 	.word	0x40003800
 8002518:	40003400 	.word	0x40003400

0800251c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68d8      	ldr	r0, [r3, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	1c99      	adds	r1, r3, #2
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002534:	b282      	uxth	r2, r0
 8002536:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d113      	bne.n	8002578 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800255e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ff4a 	bl	800240c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a20      	ldr	r2, [pc, #128]	; (8002610 <I2SEx_RxISR_I2SExt+0x90>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d101      	bne.n	8002596 <I2SEx_RxISR_I2SExt+0x16>
 8002592:	4b20      	ldr	r3, [pc, #128]	; (8002614 <I2SEx_RxISR_I2SExt+0x94>)
 8002594:	e001      	b.n	800259a <I2SEx_RxISR_I2SExt+0x1a>
 8002596:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800259a:	68d8      	ldr	r0, [r3, #12]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	1c99      	adds	r1, r3, #2
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80025a6:	b282      	uxth	r2, r0
 80025a8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d121      	bne.n	8002606 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a12      	ldr	r2, [pc, #72]	; (8002610 <I2SEx_RxISR_I2SExt+0x90>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d101      	bne.n	80025d0 <I2SEx_RxISR_I2SExt+0x50>
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <I2SEx_RxISR_I2SExt+0x94>)
 80025ce:	e001      	b.n	80025d4 <I2SEx_RxISR_I2SExt+0x54>
 80025d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	490d      	ldr	r1, [pc, #52]	; (8002610 <I2SEx_RxISR_I2SExt+0x90>)
 80025dc:	428b      	cmp	r3, r1
 80025de:	d101      	bne.n	80025e4 <I2SEx_RxISR_I2SExt+0x64>
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <I2SEx_RxISR_I2SExt+0x94>)
 80025e2:	e001      	b.n	80025e8 <I2SEx_RxISR_I2SExt+0x68>
 80025e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025ec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d106      	bne.n	8002606 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff03 	bl	800240c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40003800 	.word	0x40003800
 8002614:	40003400 	.word	0x40003400

08002618 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261a:	b08f      	sub	sp, #60	; 0x3c
 800261c:	af0a      	add	r7, sp, #40	; 0x28
 800261e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e10f      	b.n	800284a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d106      	bne.n	800264a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f005 f9a3 	bl	8007990 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2203      	movs	r2, #3
 800264e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f002 f896 	bl	800479a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	687e      	ldr	r6, [r7, #4]
 8002676:	466d      	mov	r5, sp
 8002678:	f106 0410 	add.w	r4, r6, #16
 800267c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800267e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002684:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002688:	e885 0003 	stmia.w	r5, {r0, r1}
 800268c:	1d33      	adds	r3, r6, #4
 800268e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002690:	6838      	ldr	r0, [r7, #0]
 8002692:	f001 ff6e 	bl	8004572 <USB_CoreInit>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0d0      	b.n	800284a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f002 f884 	bl	80047bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]
 80026b8:	e04a      	b.n	8002750 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	333d      	adds	r3, #61	; 0x3d
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	333c      	adds	r3, #60	; 0x3c
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	b298      	uxth	r0, r3
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	3342      	adds	r3, #66	; 0x42
 80026f6:	4602      	mov	r2, r0
 80026f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	333f      	adds	r3, #63	; 0x3f
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	1a9b      	subs	r3, r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	3344      	adds	r3, #68	; 0x44
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3348      	adds	r3, #72	; 0x48
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	3350      	adds	r3, #80	; 0x50
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	3301      	adds	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	429a      	cmp	r2, r3
 8002758:	d3af      	bcc.n	80026ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800275a:	2300      	movs	r3, #0
 800275c:	73fb      	strb	r3, [r7, #15]
 800275e:	e044      	b.n	80027ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002788:	7bfa      	ldrb	r2, [r7, #15]
 800278a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	3301      	adds	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d3b5      	bcc.n	8002760 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	603b      	str	r3, [r7, #0]
 80027fa:	687e      	ldr	r6, [r7, #4]
 80027fc:	466d      	mov	r5, sp
 80027fe:	f106 0410 	add.w	r4, r6, #16
 8002802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800280a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800280e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002812:	1d33      	adds	r3, r6, #4
 8002814:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002816:	6838      	ldr	r0, [r7, #0]
 8002818:	f002 f81c 	bl	8004854 <USB_DevInit>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2202      	movs	r2, #2
 8002826:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e00d      	b.n	800284a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f003 f898 	bl	8005978 <USB_DevDisconnect>

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002852 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_PCD_Start+0x1c>
 800286a:	2302      	movs	r3, #2
 800286c:	e020      	b.n	80028b0 <HAL_PCD_Start+0x5e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	2b01      	cmp	r3, #1
 800287c:	d109      	bne.n	8002892 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002882:	2b01      	cmp	r3, #1
 8002884:	d005      	beq.n	8002892 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f001 ff6e 	bl	8004778 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f003 f848 	bl	8005936 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b08d      	sub	sp, #52	; 0x34
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f003 f906 	bl	8005ae0 <USB_GetMode>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f040 839d 	bne.w	8003016 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f003 f86a 	bl	80059ba <USB_ReadInterrupts>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 8393 	beq.w	8003014 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f003 f861 	bl	80059ba <USB_ReadInterrupts>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d107      	bne.n	8002912 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f002 0202 	and.w	r2, r2, #2
 8002910:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f003 f84f 	bl	80059ba <USB_ReadInterrupts>
 800291c:	4603      	mov	r3, r0
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	2b10      	cmp	r3, #16
 8002924:	d161      	bne.n	80029ea <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699a      	ldr	r2, [r3, #24]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0210 	bic.w	r2, r2, #16
 8002934:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	f003 020f 	and.w	r2, r3, #15
 8002942:	4613      	mov	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	1a9b      	subs	r3, r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	3304      	adds	r3, #4
 8002954:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	0c5b      	lsrs	r3, r3, #17
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	2b02      	cmp	r3, #2
 8002960:	d124      	bne.n	80029ac <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d035      	beq.n	80029da <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002978:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800297c:	b29b      	uxth	r3, r3
 800297e:	461a      	mov	r2, r3
 8002980:	6a38      	ldr	r0, [r7, #32]
 8002982:	f002 fe86 	bl	8005692 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002992:	441a      	add	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	699a      	ldr	r2, [r3, #24]
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029a4:	441a      	add	r2, r3
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	619a      	str	r2, [r3, #24]
 80029aa:	e016      	b.n	80029da <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	0c5b      	lsrs	r3, r3, #17
 80029b0:	f003 030f 	and.w	r3, r3, #15
 80029b4:	2b06      	cmp	r3, #6
 80029b6:	d110      	bne.n	80029da <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029be:	2208      	movs	r2, #8
 80029c0:	4619      	mov	r1, r3
 80029c2:	6a38      	ldr	r0, [r7, #32]
 80029c4:	f002 fe65 	bl	8005692 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	699a      	ldr	r2, [r3, #24]
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	091b      	lsrs	r3, r3, #4
 80029d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d4:	441a      	add	r2, r3
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699a      	ldr	r2, [r3, #24]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0210 	orr.w	r2, r2, #16
 80029e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f002 ffe3 	bl	80059ba <USB_ReadInterrupts>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029fe:	d16e      	bne.n	8002ade <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f002 ffe9 	bl	80059e0 <USB_ReadDevAllOutEpInterrupt>
 8002a0e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a10:	e062      	b.n	8002ad8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d057      	beq.n	8002acc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f003 f80e 	bl	8005a48 <USB_ReadDevOutEPInterrupt>
 8002a2c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00c      	beq.n	8002a52 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a44:	461a      	mov	r2, r3
 8002a46:	2301      	movs	r3, #1
 8002a48:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fdb1 	bl	80035b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00c      	beq.n	8002a76 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 feab 	bl	80037cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2310      	movs	r3, #16
 8002a90:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2320      	movs	r3, #32
 8002aac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d009      	beq.n	8002acc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002aca:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	3301      	adds	r3, #1
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d199      	bne.n	8002a12 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f002 ff69 	bl	80059ba <USB_ReadInterrupts>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002af2:	f040 80c0 	bne.w	8002c76 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f002 ff8a 	bl	8005a14 <USB_ReadDevAllInEpInterrupt>
 8002b00:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b06:	e0b2      	b.n	8002c6e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 80a7 	beq.w	8002c62 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f002 ffb0 	bl	8005a84 <USB_ReadDevInEPInterrupt>
 8002b24:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d057      	beq.n	8002be0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	2201      	movs	r2, #1
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69f9      	ldr	r1, [r7, #28]
 8002b4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b50:	4013      	ands	r3, r2
 8002b52:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b60:	461a      	mov	r2, r3
 8002b62:	2301      	movs	r3, #1
 8002b64:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d132      	bne.n	8002bd4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	3348      	adds	r3, #72	; 0x48
 8002b7e:	6819      	ldr	r1, [r3, #0]
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4403      	add	r3, r0
 8002b8e:	3344      	adds	r3, #68	; 0x44
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4419      	add	r1, r3
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4403      	add	r3, r0
 8002ba2:	3348      	adds	r3, #72	; 0x48
 8002ba4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d113      	bne.n	8002bd4 <HAL_PCD_IRQHandler+0x31c>
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	3350      	adds	r3, #80	; 0x50
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d108      	bne.n	8002bd4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2101      	movs	r1, #1
 8002bd0:	f002 ffb8 	bl	8005b44 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f004 ff67 	bl	8007aae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	2308      	movs	r3, #8
 8002bfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d008      	beq.n	8002c18 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c12:	461a      	mov	r2, r3
 8002c14:	2310      	movs	r3, #16
 8002c16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2340      	movs	r3, #64	; 0x40
 8002c32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fc1b 	bl	8003498 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	3301      	adds	r3, #1
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	085b      	lsrs	r3, r3, #1
 8002c6c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f47f af49 	bne.w	8002b08 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f002 fe9d 	bl	80059ba <USB_ReadInterrupts>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c8a:	d122      	bne.n	8002cd2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c9a:	f023 0301 	bic.w	r3, r3, #1
 8002c9e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d108      	bne.n	8002cbc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 fe27 	bl	8003908 <HAL_PCDEx_LPM_Callback>
 8002cba:	e002      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f004 ff6d 	bl	8007b9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002cd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f002 fe6f 	bl	80059ba <USB_ReadInterrupts>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ce6:	d112      	bne.n	8002d0e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d102      	bne.n	8002cfe <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f004 ff29 	bl	8007b50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d0c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f002 fe51 	bl	80059ba <USB_ReadInterrupts>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d22:	f040 80c7 	bne.w	8002eb4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	69fa      	ldr	r2, [r7, #28]
 8002d30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2110      	movs	r1, #16
 8002d40:	4618      	mov	r0, r3
 8002d42:	f001 feeb 	bl	8004b1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d4a:	e056      	b.n	8002dfa <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d5e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d62:	015a      	lsls	r2, r3, #5
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d70:	0151      	lsls	r1, r2, #5
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	440a      	add	r2, r1
 8002d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d7e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d90:	0151      	lsls	r1, r2, #5
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	440a      	add	r2, r1
 8002d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dac:	461a      	mov	r2, r3
 8002dae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002db2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc4:	0151      	lsls	r1, r2, #5
 8002dc6:	69fa      	ldr	r2, [r7, #28]
 8002dc8:	440a      	add	r2, r1
 8002dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002dce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dd2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002de4:	0151      	lsls	r1, r2, #5
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	440a      	add	r2, r1
 8002dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002dee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002df2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df6:	3301      	adds	r3, #1
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d3a3      	bcc.n	8002d4c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e12:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e16:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d016      	beq.n	8002e4e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e30:	f043 030b 	orr.w	r3, r3, #11
 8002e34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e46:	f043 030b 	orr.w	r3, r3, #11
 8002e4a:	6453      	str	r3, [r2, #68]	; 0x44
 8002e4c:	e015      	b.n	8002e7a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e60:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e64:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e74:	f043 030b 	orr.w	r3, r3, #11
 8002e78:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e88:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e8c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f002 fe50 	bl	8005b44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002eb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f002 fd7e 	bl	80059ba <USB_ReadInterrupts>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec8:	d124      	bne.n	8002f14 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f002 fe14 	bl	8005afc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f001 fe7c 	bl	8004bd6 <USB_GetDevSpeed>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681c      	ldr	r4, [r3, #0]
 8002eea:	f001 f959 	bl	80041a0 <HAL_RCC_GetHCLKFreq>
 8002eee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4620      	mov	r0, r4
 8002efa:	f001 fb9b 	bl	8004634 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f004 fdfd 	bl	8007afe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f12:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f002 fd4e 	bl	80059ba <USB_ReadInterrupts>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d10a      	bne.n	8002f3e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f004 fdda 	bl	8007ae2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f002 0208 	and.w	r2, r2, #8
 8002f3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f002 fd39 	bl	80059ba <USB_ReadInterrupts>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f52:	d10f      	bne.n	8002f74 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f004 fe3c 	bl	8007bdc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695a      	ldr	r2, [r3, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f002 fd1e 	bl	80059ba <USB_ReadInterrupts>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f88:	d10f      	bne.n	8002faa <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	4619      	mov	r1, r3
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f004 fe0f 	bl	8007bb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002fa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f002 fd03 	bl	80059ba <USB_ReadInterrupts>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbe:	d10a      	bne.n	8002fd6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f004 fe1d 	bl	8007c00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695a      	ldr	r2, [r3, #20]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002fd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f002 fced 	bl	80059ba <USB_ReadInterrupts>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d115      	bne.n	8003016 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f004 fe0d 	bl	8007c1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	e000      	b.n	8003016 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003014:	bf00      	nop
    }
  }
}
 8003016:	3734      	adds	r7, #52	; 0x34
 8003018:	46bd      	mov	sp, r7
 800301a:	bd90      	pop	{r4, r7, pc}

0800301c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_PCD_SetAddress+0x1a>
 8003032:	2302      	movs	r3, #2
 8003034:	e013      	b.n	800305e <HAL_PCD_SetAddress+0x42>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f002 fc4b 	bl	80058ea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	4608      	mov	r0, r1
 8003070:	4611      	mov	r1, r2
 8003072:	461a      	mov	r2, r3
 8003074:	4603      	mov	r3, r0
 8003076:	70fb      	strb	r3, [r7, #3]
 8003078:	460b      	mov	r3, r1
 800307a:	803b      	strh	r3, [r7, #0]
 800307c:	4613      	mov	r3, r2
 800307e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003088:	2b00      	cmp	r3, #0
 800308a:	da0f      	bge.n	80030ac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	f003 020f 	and.w	r2, r3, #15
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	3338      	adds	r3, #56	; 0x38
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	4413      	add	r3, r2
 80030a0:	3304      	adds	r3, #4
 80030a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	705a      	strb	r2, [r3, #1]
 80030aa:	e00f      	b.n	80030cc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	f003 020f 	and.w	r2, r3, #15
 80030b2:	4613      	mov	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	3304      	adds	r3, #4
 80030c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030d8:	883a      	ldrh	r2, [r7, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	78ba      	ldrb	r2, [r7, #2]
 80030e2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	785b      	ldrb	r3, [r3, #1]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d004      	beq.n	80030f6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030f6:	78bb      	ldrb	r3, [r7, #2]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d102      	bne.n	8003102 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_PCD_EP_Open+0xaa>
 800310c:	2302      	movs	r3, #2
 800310e:	e00e      	b.n	800312e <HAL_PCD_EP_Open+0xc8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68f9      	ldr	r1, [r7, #12]
 800311e:	4618      	mov	r0, r3
 8003120:	f001 fd7e 	bl	8004c20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800312c:	7afb      	ldrb	r3, [r7, #11]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003146:	2b00      	cmp	r3, #0
 8003148:	da0f      	bge.n	800316a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	f003 020f 	and.w	r2, r3, #15
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	3338      	adds	r3, #56	; 0x38
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	3304      	adds	r3, #4
 8003160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	705a      	strb	r2, [r3, #1]
 8003168:	e00f      	b.n	800318a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	f003 020f 	and.w	r2, r3, #15
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4413      	add	r3, r2
 8003180:	3304      	adds	r3, #4
 8003182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	f003 030f 	and.w	r3, r3, #15
 8003190:	b2da      	uxtb	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_PCD_EP_Close+0x6e>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e00e      	b.n	80031c2 <HAL_PCD_EP_Close+0x8c>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68f9      	ldr	r1, [r7, #12]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f001 fdbc 	bl	8004d30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b086      	sub	sp, #24
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
 80031d6:	460b      	mov	r3, r1
 80031d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031da:	7afb      	ldrb	r3, [r7, #11]
 80031dc:	f003 020f 	and.w	r2, r3, #15
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	3304      	adds	r3, #4
 80031f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2200      	movs	r2, #0
 8003204:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2200      	movs	r2, #0
 800320a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800320c:	7afb      	ldrb	r3, [r7, #11]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	b2da      	uxtb	r2, r3
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d102      	bne.n	8003226 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003226:	7afb      	ldrb	r3, [r7, #11]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	2b00      	cmp	r3, #0
 800322e:	d109      	bne.n	8003244 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	6979      	ldr	r1, [r7, #20]
 800323e:	f002 f897 	bl	8005370 <USB_EP0StartXfer>
 8003242:	e008      	b.n	8003256 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	461a      	mov	r2, r3
 8003250:	6979      	ldr	r1, [r7, #20]
 8003252:	f001 fe49 	bl	8004ee8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	f003 020f 	and.w	r2, r3, #15
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003282:	681b      	ldr	r3, [r3, #0]
}
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	607a      	str	r2, [r7, #4]
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	460b      	mov	r3, r1
 800329e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a0:	7afb      	ldrb	r3, [r7, #11]
 80032a2:	f003 020f 	and.w	r2, r3, #15
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	3338      	adds	r3, #56	; 0x38
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4413      	add	r3, r2
 80032b4:	3304      	adds	r3, #4
 80032b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2200      	movs	r2, #0
 80032c8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2201      	movs	r2, #1
 80032ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032d0:	7afb      	ldrb	r3, [r7, #11]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d102      	bne.n	80032ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032ea:	7afb      	ldrb	r3, [r7, #11]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d109      	bne.n	8003308 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	6979      	ldr	r1, [r7, #20]
 8003302:	f002 f835 	bl	8005370 <USB_EP0StartXfer>
 8003306:	e008      	b.n	800331a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	6979      	ldr	r1, [r7, #20]
 8003316:	f001 fde7 	bl	8004ee8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	f003 020f 	and.w	r2, r3, #15
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	429a      	cmp	r2, r3
 800333c:	d901      	bls.n	8003342 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e050      	b.n	80033e4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003346:	2b00      	cmp	r3, #0
 8003348:	da0f      	bge.n	800336a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	f003 020f 	and.w	r2, r3, #15
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	3338      	adds	r3, #56	; 0x38
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	3304      	adds	r3, #4
 8003360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	705a      	strb	r2, [r3, #1]
 8003368:	e00d      	b.n	8003386 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	4413      	add	r3, r2
 800337c:	3304      	adds	r3, #4
 800337e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	b2da      	uxtb	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_PCD_EP_SetStall+0x82>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e01e      	b.n	80033e4 <HAL_PCD_EP_SetStall+0xc0>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68f9      	ldr	r1, [r7, #12]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f002 f9c4 	bl	8005742 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033ba:	78fb      	ldrb	r3, [r7, #3]
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10a      	bne.n	80033da <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	b2d9      	uxtb	r1, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033d4:	461a      	mov	r2, r3
 80033d6:	f002 fbb5 	bl	8005b44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	f003 020f 	and.w	r2, r3, #15
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	429a      	cmp	r2, r3
 8003404:	d901      	bls.n	800340a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e042      	b.n	8003490 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800340a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800340e:	2b00      	cmp	r3, #0
 8003410:	da0f      	bge.n	8003432 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	f003 020f 	and.w	r2, r3, #15
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	3338      	adds	r3, #56	; 0x38
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	3304      	adds	r3, #4
 8003428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	705a      	strb	r2, [r3, #1]
 8003430:	e00f      	b.n	8003452 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003432:	78fb      	ldrb	r3, [r7, #3]
 8003434:	f003 020f 	and.w	r2, r3, #15
 8003438:	4613      	mov	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	4413      	add	r3, r2
 8003448:	3304      	adds	r3, #4
 800344a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	b2da      	uxtb	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_PCD_EP_ClrStall+0x86>
 800346e:	2302      	movs	r3, #2
 8003470:	e00e      	b.n	8003490 <HAL_PCD_EP_ClrStall+0xa4>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68f9      	ldr	r1, [r7, #12]
 8003480:	4618      	mov	r0, r3
 8003482:	f002 f9cc 	bl	800581e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08a      	sub	sp, #40	; 0x28
 800349c:	af02      	add	r7, sp, #8
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	3338      	adds	r3, #56	; 0x38
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4413      	add	r3, r2
 80034bc:	3304      	adds	r3, #4
 80034be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	699a      	ldr	r2, [r3, #24]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d901      	bls.n	80034d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e06c      	b.n	80035aa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	69fa      	ldr	r2, [r7, #28]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d902      	bls.n	80034ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	3303      	adds	r3, #3
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034f4:	e02b      	b.n	800354e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	69fa      	ldr	r2, [r7, #28]
 8003508:	429a      	cmp	r2, r3
 800350a:	d902      	bls.n	8003512 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3303      	adds	r3, #3
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	68d9      	ldr	r1, [r3, #12]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	b2da      	uxtb	r2, r3
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800352a:	b2db      	uxtb	r3, r3
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	4603      	mov	r3, r0
 8003530:	6978      	ldr	r0, [r7, #20]
 8003532:	f002 f870 	bl	8005616 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	441a      	add	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	441a      	add	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4413      	add	r3, r2
 8003556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	b29b      	uxth	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	429a      	cmp	r2, r3
 8003562:	d809      	bhi.n	8003578 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	699a      	ldr	r2, [r3, #24]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800356c:	429a      	cmp	r2, r3
 800356e:	d203      	bcs.n	8003578 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1be      	bne.n	80034f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	429a      	cmp	r2, r3
 8003582:	d811      	bhi.n	80035a8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	2201      	movs	r2, #1
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	43db      	mvns	r3, r3
 800359e:	6939      	ldr	r1, [r7, #16]
 80035a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035a4:	4013      	ands	r3, r2
 80035a6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	333c      	adds	r3, #60	; 0x3c
 80035cc:	3304      	adds	r3, #4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	f040 80a0 	bne.w	800372c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d015      	beq.n	8003622 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4a72      	ldr	r2, [pc, #456]	; (80037c4 <PCD_EP_OutXfrComplete_int+0x210>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	f240 80dd 	bls.w	80037ba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 80d7 	beq.w	80037ba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003618:	461a      	mov	r2, r3
 800361a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800361e:	6093      	str	r3, [r2, #8]
 8003620:	e0cb      	b.n	80037ba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b00      	cmp	r3, #0
 800362a:	d009      	beq.n	8003640 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003638:	461a      	mov	r2, r3
 800363a:	2320      	movs	r3, #32
 800363c:	6093      	str	r3, [r2, #8]
 800363e:	e0bc      	b.n	80037ba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003646:	2b00      	cmp	r3, #0
 8003648:	f040 80b7 	bne.w	80037ba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4a5d      	ldr	r2, [pc, #372]	; (80037c4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d90f      	bls.n	8003674 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366a:	461a      	mov	r2, r3
 800366c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003670:	6093      	str	r3, [r2, #8]
 8003672:	e0a2      	b.n	80037ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003686:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	0159      	lsls	r1, r3, #5
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	440b      	add	r3, r1
 8003690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800369a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4403      	add	r3, r0
 80036aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80036ae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	4613      	mov	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036c2:	6819      	ldr	r1, [r3, #0]
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4403      	add	r3, r0
 80036d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4419      	add	r1, r3
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4403      	add	r3, r0
 80036e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036ec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d114      	bne.n	800371e <PCD_EP_OutXfrComplete_int+0x16a>
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d108      	bne.n	800371e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003716:	461a      	mov	r2, r3
 8003718:	2101      	movs	r1, #1
 800371a:	f002 fa13 	bl	8005b44 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	4619      	mov	r1, r3
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f004 f9a7 	bl	8007a78 <HAL_PCD_DataOutStageCallback>
 800372a:	e046      	b.n	80037ba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4a26      	ldr	r2, [pc, #152]	; (80037c8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d124      	bne.n	800377e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374a:	461a      	mov	r2, r3
 800374c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003750:	6093      	str	r3, [r2, #8]
 8003752:	e032      	b.n	80037ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4413      	add	r3, r2
 8003766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800376a:	461a      	mov	r2, r3
 800376c:	2320      	movs	r3, #32
 800376e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f004 f97e 	bl	8007a78 <HAL_PCD_DataOutStageCallback>
 800377c:	e01d      	b.n	80037ba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d114      	bne.n	80037ae <PCD_EP_OutXfrComplete_int+0x1fa>
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	4613      	mov	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d108      	bne.n	80037ae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037a6:	461a      	mov	r2, r3
 80037a8:	2100      	movs	r1, #0
 80037aa:	f002 f9cb 	bl	8005b44 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	4619      	mov	r1, r3
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f004 f95f 	bl	8007a78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	4f54300a 	.word	0x4f54300a
 80037c8:	4f54310a 	.word	0x4f54310a

080037cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	333c      	adds	r3, #60	; 0x3c
 80037e4:	3304      	adds	r3, #4
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4a15      	ldr	r2, [pc, #84]	; (8003854 <PCD_EP_OutSetupPacket_int+0x88>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d90e      	bls.n	8003820 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003808:	2b00      	cmp	r3, #0
 800380a:	d009      	beq.n	8003820 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003818:	461a      	mov	r2, r3
 800381a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800381e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f004 f917 	bl	8007a54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a0a      	ldr	r2, [pc, #40]	; (8003854 <PCD_EP_OutSetupPacket_int+0x88>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d90c      	bls.n	8003848 <PCD_EP_OutSetupPacket_int+0x7c>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d108      	bne.n	8003848 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003840:	461a      	mov	r2, r3
 8003842:	2101      	movs	r1, #1
 8003844:	f002 f97e 	bl	8005b44 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	4f54300a 	.word	0x4f54300a

08003858 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	70fb      	strb	r3, [r7, #3]
 8003864:	4613      	mov	r3, r2
 8003866:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d107      	bne.n	8003886 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003876:	883b      	ldrh	r3, [r7, #0]
 8003878:	0419      	lsls	r1, r3, #16
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	430a      	orrs	r2, r1
 8003882:	629a      	str	r2, [r3, #40]	; 0x28
 8003884:	e028      	b.n	80038d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	0c1b      	lsrs	r3, r3, #16
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	4413      	add	r3, r2
 8003892:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003894:	2300      	movs	r3, #0
 8003896:	73fb      	strb	r3, [r7, #15]
 8003898:	e00d      	b.n	80038b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	3340      	adds	r3, #64	; 0x40
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	0c1b      	lsrs	r3, r3, #16
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	4413      	add	r3, r2
 80038ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	3301      	adds	r3, #1
 80038b4:	73fb      	strb	r3, [r7, #15]
 80038b6:	7bfa      	ldrb	r2, [r7, #15]
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	429a      	cmp	r2, r3
 80038be:	d3ec      	bcc.n	800389a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038c0:	883b      	ldrh	r3, [r7, #0]
 80038c2:	0418      	lsls	r0, r3, #16
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6819      	ldr	r1, [r3, #0]
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	4302      	orrs	r2, r0
 80038d0:	3340      	adds	r3, #64	; 0x40
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	460b      	mov	r3, r1
 80038f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	887a      	ldrh	r2, [r7, #2]
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e264      	b.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d075      	beq.n	8003a2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800393e:	4ba3      	ldr	r3, [pc, #652]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b04      	cmp	r3, #4
 8003948:	d00c      	beq.n	8003964 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800394a:	4ba0      	ldr	r3, [pc, #640]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003952:	2b08      	cmp	r3, #8
 8003954:	d112      	bne.n	800397c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003956:	4b9d      	ldr	r3, [pc, #628]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003962:	d10b      	bne.n	800397c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003964:	4b99      	ldr	r3, [pc, #612]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d05b      	beq.n	8003a28 <HAL_RCC_OscConfig+0x108>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d157      	bne.n	8003a28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e23f      	b.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003984:	d106      	bne.n	8003994 <HAL_RCC_OscConfig+0x74>
 8003986:	4b91      	ldr	r3, [pc, #580]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a90      	ldr	r2, [pc, #576]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 800398c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	e01d      	b.n	80039d0 <HAL_RCC_OscConfig+0xb0>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800399c:	d10c      	bne.n	80039b8 <HAL_RCC_OscConfig+0x98>
 800399e:	4b8b      	ldr	r3, [pc, #556]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a8a      	ldr	r2, [pc, #552]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	4b88      	ldr	r3, [pc, #544]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a87      	ldr	r2, [pc, #540]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	e00b      	b.n	80039d0 <HAL_RCC_OscConfig+0xb0>
 80039b8:	4b84      	ldr	r3, [pc, #528]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a83      	ldr	r2, [pc, #524]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 80039be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	4b81      	ldr	r3, [pc, #516]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a80      	ldr	r2, [pc, #512]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 80039ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d013      	beq.n	8003a00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7fd fae0 	bl	8000f9c <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e0:	f7fd fadc 	bl	8000f9c <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	; 0x64
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e204      	b.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f2:	4b76      	ldr	r3, [pc, #472]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0xc0>
 80039fe:	e014      	b.n	8003a2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7fd facc 	bl	8000f9c <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a08:	f7fd fac8 	bl	8000f9c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	; 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e1f0      	b.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a1a:	4b6c      	ldr	r3, [pc, #432]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0xe8>
 8003a26:	e000      	b.n	8003a2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d063      	beq.n	8003afe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a36:	4b65      	ldr	r3, [pc, #404]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a42:	4b62      	ldr	r3, [pc, #392]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d11c      	bne.n	8003a88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a4e:	4b5f      	ldr	r3, [pc, #380]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d116      	bne.n	8003a88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5a:	4b5c      	ldr	r3, [pc, #368]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_RCC_OscConfig+0x152>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d001      	beq.n	8003a72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e1c4      	b.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a72:	4b56      	ldr	r3, [pc, #344]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4952      	ldr	r1, [pc, #328]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a86:	e03a      	b.n	8003afe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d020      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a90:	4b4f      	ldr	r3, [pc, #316]	; (8003bd0 <HAL_RCC_OscConfig+0x2b0>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a96:	f7fd fa81 	bl	8000f9c <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a9e:	f7fd fa7d 	bl	8000f9c <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e1a5      	b.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab0:	4b46      	ldr	r3, [pc, #280]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f0      	beq.n	8003a9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abc:	4b43      	ldr	r3, [pc, #268]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4940      	ldr	r1, [pc, #256]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	600b      	str	r3, [r1, #0]
 8003ad0:	e015      	b.n	8003afe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ad2:	4b3f      	ldr	r3, [pc, #252]	; (8003bd0 <HAL_RCC_OscConfig+0x2b0>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad8:	f7fd fa60 	bl	8000f9c <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae0:	f7fd fa5c 	bl	8000f9c <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e184      	b.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003af2:	4b36      	ldr	r3, [pc, #216]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d030      	beq.n	8003b6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d016      	beq.n	8003b40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b12:	4b30      	ldr	r3, [pc, #192]	; (8003bd4 <HAL_RCC_OscConfig+0x2b4>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b18:	f7fd fa40 	bl	8000f9c <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b20:	f7fd fa3c 	bl	8000f9c <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e164      	b.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b32:	4b26      	ldr	r3, [pc, #152]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0f0      	beq.n	8003b20 <HAL_RCC_OscConfig+0x200>
 8003b3e:	e015      	b.n	8003b6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b40:	4b24      	ldr	r3, [pc, #144]	; (8003bd4 <HAL_RCC_OscConfig+0x2b4>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b46:	f7fd fa29 	bl	8000f9c <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b4e:	f7fd fa25 	bl	8000f9c <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e14d      	b.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b60:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f0      	bne.n	8003b4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80a0 	beq.w	8003cba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7e:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10f      	bne.n	8003baa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	4a0e      	ldr	r2, [pc, #56]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b98:	6413      	str	r3, [r2, #64]	; 0x40
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003baa:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <HAL_RCC_OscConfig+0x2b8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d121      	bne.n	8003bfa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb6:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <HAL_RCC_OscConfig+0x2b8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a07      	ldr	r2, [pc, #28]	; (8003bd8 <HAL_RCC_OscConfig+0x2b8>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc2:	f7fd f9eb 	bl	8000f9c <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	e011      	b.n	8003bee <HAL_RCC_OscConfig+0x2ce>
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	42470000 	.word	0x42470000
 8003bd4:	42470e80 	.word	0x42470e80
 8003bd8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bdc:	f7fd f9de 	bl	8000f9c <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e106      	b.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bee:	4b85      	ldr	r3, [pc, #532]	; (8003e04 <HAL_RCC_OscConfig+0x4e4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d106      	bne.n	8003c10 <HAL_RCC_OscConfig+0x2f0>
 8003c02:	4b81      	ldr	r3, [pc, #516]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	4a80      	ldr	r2, [pc, #512]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0e:	e01c      	b.n	8003c4a <HAL_RCC_OscConfig+0x32a>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b05      	cmp	r3, #5
 8003c16:	d10c      	bne.n	8003c32 <HAL_RCC_OscConfig+0x312>
 8003c18:	4b7b      	ldr	r3, [pc, #492]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	4a7a      	ldr	r2, [pc, #488]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003c1e:	f043 0304 	orr.w	r3, r3, #4
 8003c22:	6713      	str	r3, [r2, #112]	; 0x70
 8003c24:	4b78      	ldr	r3, [pc, #480]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c28:	4a77      	ldr	r2, [pc, #476]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c30:	e00b      	b.n	8003c4a <HAL_RCC_OscConfig+0x32a>
 8003c32:	4b75      	ldr	r3, [pc, #468]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	4a74      	ldr	r2, [pc, #464]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003c38:	f023 0301 	bic.w	r3, r3, #1
 8003c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c3e:	4b72      	ldr	r3, [pc, #456]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	4a71      	ldr	r2, [pc, #452]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003c44:	f023 0304 	bic.w	r3, r3, #4
 8003c48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d015      	beq.n	8003c7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c52:	f7fd f9a3 	bl	8000f9c <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c58:	e00a      	b.n	8003c70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5a:	f7fd f99f 	bl	8000f9c <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e0c5      	b.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c70:	4b65      	ldr	r3, [pc, #404]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0ee      	beq.n	8003c5a <HAL_RCC_OscConfig+0x33a>
 8003c7c:	e014      	b.n	8003ca8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c7e:	f7fd f98d 	bl	8000f9c <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c84:	e00a      	b.n	8003c9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c86:	f7fd f989 	bl	8000f9c <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e0af      	b.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c9c:	4b5a      	ldr	r3, [pc, #360]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1ee      	bne.n	8003c86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ca8:	7dfb      	ldrb	r3, [r7, #23]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d105      	bne.n	8003cba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cae:	4b56      	ldr	r3, [pc, #344]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	4a55      	ldr	r2, [pc, #340]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 809b 	beq.w	8003dfa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cc4:	4b50      	ldr	r3, [pc, #320]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 030c 	and.w	r3, r3, #12
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d05c      	beq.n	8003d8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d141      	bne.n	8003d5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd8:	4b4c      	ldr	r3, [pc, #304]	; (8003e0c <HAL_RCC_OscConfig+0x4ec>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cde:	f7fd f95d 	bl	8000f9c <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce6:	f7fd f959 	bl	8000f9c <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e081      	b.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf8:	4b43      	ldr	r3, [pc, #268]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f0      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	019b      	lsls	r3, r3, #6
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	041b      	lsls	r3, r3, #16
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	061b      	lsls	r3, r3, #24
 8003d28:	4937      	ldr	r1, [pc, #220]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d2e:	4b37      	ldr	r3, [pc, #220]	; (8003e0c <HAL_RCC_OscConfig+0x4ec>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7fd f932 	bl	8000f9c <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3c:	f7fd f92e 	bl	8000f9c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e056      	b.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d4e:	4b2e      	ldr	r3, [pc, #184]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0x41c>
 8003d5a:	e04e      	b.n	8003dfa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5c:	4b2b      	ldr	r3, [pc, #172]	; (8003e0c <HAL_RCC_OscConfig+0x4ec>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d62:	f7fd f91b 	bl	8000f9c <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6a:	f7fd f917 	bl	8000f9c <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e03f      	b.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7c:	4b22      	ldr	r3, [pc, #136]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1f0      	bne.n	8003d6a <HAL_RCC_OscConfig+0x44a>
 8003d88:	e037      	b.n	8003dfa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e032      	b.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d96:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <HAL_RCC_OscConfig+0x4e8>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d028      	beq.n	8003df6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d121      	bne.n	8003df6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d11a      	bne.n	8003df6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dcc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d111      	bne.n	8003df6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	3b01      	subs	r3, #1
 8003de0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d107      	bne.n	8003df6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d001      	beq.n	8003dfa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40007000 	.word	0x40007000
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	42470060 	.word	0x42470060

08003e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0cc      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e24:	4b68      	ldr	r3, [pc, #416]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d90c      	bls.n	8003e4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e32:	4b65      	ldr	r3, [pc, #404]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3a:	4b63      	ldr	r3, [pc, #396]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e0b8      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d020      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e64:	4b59      	ldr	r3, [pc, #356]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	4a58      	ldr	r2, [pc, #352]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e7c:	4b53      	ldr	r3, [pc, #332]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	4a52      	ldr	r2, [pc, #328]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e88:	4b50      	ldr	r3, [pc, #320]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	494d      	ldr	r1, [pc, #308]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d044      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d107      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eae:	4b47      	ldr	r3, [pc, #284]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d119      	bne.n	8003eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e07f      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d003      	beq.n	8003ece <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d107      	bne.n	8003ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ece:	4b3f      	ldr	r3, [pc, #252]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e06f      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ede:	4b3b      	ldr	r3, [pc, #236]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e067      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eee:	4b37      	ldr	r3, [pc, #220]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f023 0203 	bic.w	r2, r3, #3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4934      	ldr	r1, [pc, #208]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f00:	f7fd f84c 	bl	8000f9c <HAL_GetTick>
 8003f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f06:	e00a      	b.n	8003f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f08:	f7fd f848 	bl	8000f9c <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e04f      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1e:	4b2b      	ldr	r3, [pc, #172]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 020c 	and.w	r2, r3, #12
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d1eb      	bne.n	8003f08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f30:	4b25      	ldr	r3, [pc, #148]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d20c      	bcs.n	8003f58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3e:	4b22      	ldr	r3, [pc, #136]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f46:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e032      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f64:	4b19      	ldr	r3, [pc, #100]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4916      	ldr	r1, [pc, #88]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d009      	beq.n	8003f96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f82:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	490e      	ldr	r1, [pc, #56]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f96:	f000 f821 	bl	8003fdc <HAL_RCC_GetSysClockFreq>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	490a      	ldr	r1, [pc, #40]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa8:	5ccb      	ldrb	r3, [r1, r3]
 8003faa:	fa22 f303 	lsr.w	r3, r2, r3
 8003fae:	4a09      	ldr	r2, [pc, #36]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fb2:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fc ffac 	bl	8000f14 <HAL_InitTick>

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40023c00 	.word	0x40023c00
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	0800892c 	.word	0x0800892c
 8003fd4:	20000000 	.word	0x20000000
 8003fd8:	20000004 	.word	0x20000004

08003fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fdc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	607b      	str	r3, [r7, #4]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	2300      	movs	r3, #0
 8003fee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ff4:	4b67      	ldr	r3, [pc, #412]	; (8004194 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 030c 	and.w	r3, r3, #12
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d00d      	beq.n	800401c <HAL_RCC_GetSysClockFreq+0x40>
 8004000:	2b08      	cmp	r3, #8
 8004002:	f200 80bd 	bhi.w	8004180 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0x34>
 800400a:	2b04      	cmp	r3, #4
 800400c:	d003      	beq.n	8004016 <HAL_RCC_GetSysClockFreq+0x3a>
 800400e:	e0b7      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004010:	4b61      	ldr	r3, [pc, #388]	; (8004198 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004012:	60bb      	str	r3, [r7, #8]
       break;
 8004014:	e0b7      	b.n	8004186 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004016:	4b61      	ldr	r3, [pc, #388]	; (800419c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004018:	60bb      	str	r3, [r7, #8]
      break;
 800401a:	e0b4      	b.n	8004186 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800401c:	4b5d      	ldr	r3, [pc, #372]	; (8004194 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004024:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004026:	4b5b      	ldr	r3, [pc, #364]	; (8004194 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d04d      	beq.n	80040ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004032:	4b58      	ldr	r3, [pc, #352]	; (8004194 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	099b      	lsrs	r3, r3, #6
 8004038:	461a      	mov	r2, r3
 800403a:	f04f 0300 	mov.w	r3, #0
 800403e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004042:	f04f 0100 	mov.w	r1, #0
 8004046:	ea02 0800 	and.w	r8, r2, r0
 800404a:	ea03 0901 	and.w	r9, r3, r1
 800404e:	4640      	mov	r0, r8
 8004050:	4649      	mov	r1, r9
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	f04f 0300 	mov.w	r3, #0
 800405a:	014b      	lsls	r3, r1, #5
 800405c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004060:	0142      	lsls	r2, r0, #5
 8004062:	4610      	mov	r0, r2
 8004064:	4619      	mov	r1, r3
 8004066:	ebb0 0008 	subs.w	r0, r0, r8
 800406a:	eb61 0109 	sbc.w	r1, r1, r9
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	018b      	lsls	r3, r1, #6
 8004078:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800407c:	0182      	lsls	r2, r0, #6
 800407e:	1a12      	subs	r2, r2, r0
 8004080:	eb63 0301 	sbc.w	r3, r3, r1
 8004084:	f04f 0000 	mov.w	r0, #0
 8004088:	f04f 0100 	mov.w	r1, #0
 800408c:	00d9      	lsls	r1, r3, #3
 800408e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004092:	00d0      	lsls	r0, r2, #3
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	eb12 0208 	adds.w	r2, r2, r8
 800409c:	eb43 0309 	adc.w	r3, r3, r9
 80040a0:	f04f 0000 	mov.w	r0, #0
 80040a4:	f04f 0100 	mov.w	r1, #0
 80040a8:	0259      	lsls	r1, r3, #9
 80040aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80040ae:	0250      	lsls	r0, r2, #9
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4610      	mov	r0, r2
 80040b6:	4619      	mov	r1, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	461a      	mov	r2, r3
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	f7fc f8de 	bl	8000280 <__aeabi_uldivmod>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4613      	mov	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	e04a      	b.n	8004164 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ce:	4b31      	ldr	r3, [pc, #196]	; (8004194 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	099b      	lsrs	r3, r3, #6
 80040d4:	461a      	mov	r2, r3
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040de:	f04f 0100 	mov.w	r1, #0
 80040e2:	ea02 0400 	and.w	r4, r2, r0
 80040e6:	ea03 0501 	and.w	r5, r3, r1
 80040ea:	4620      	mov	r0, r4
 80040ec:	4629      	mov	r1, r5
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	014b      	lsls	r3, r1, #5
 80040f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040fc:	0142      	lsls	r2, r0, #5
 80040fe:	4610      	mov	r0, r2
 8004100:	4619      	mov	r1, r3
 8004102:	1b00      	subs	r0, r0, r4
 8004104:	eb61 0105 	sbc.w	r1, r1, r5
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	018b      	lsls	r3, r1, #6
 8004112:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004116:	0182      	lsls	r2, r0, #6
 8004118:	1a12      	subs	r2, r2, r0
 800411a:	eb63 0301 	sbc.w	r3, r3, r1
 800411e:	f04f 0000 	mov.w	r0, #0
 8004122:	f04f 0100 	mov.w	r1, #0
 8004126:	00d9      	lsls	r1, r3, #3
 8004128:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800412c:	00d0      	lsls	r0, r2, #3
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	1912      	adds	r2, r2, r4
 8004134:	eb45 0303 	adc.w	r3, r5, r3
 8004138:	f04f 0000 	mov.w	r0, #0
 800413c:	f04f 0100 	mov.w	r1, #0
 8004140:	0299      	lsls	r1, r3, #10
 8004142:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004146:	0290      	lsls	r0, r2, #10
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	4610      	mov	r0, r2
 800414e:	4619      	mov	r1, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	461a      	mov	r2, r3
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	f7fc f892 	bl	8000280 <__aeabi_uldivmod>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4613      	mov	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004164:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	0c1b      	lsrs	r3, r3, #16
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	3301      	adds	r3, #1
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	fbb2 f3f3 	udiv	r3, r2, r3
 800417c:	60bb      	str	r3, [r7, #8]
      break;
 800417e:	e002      	b.n	8004186 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004180:	4b05      	ldr	r3, [pc, #20]	; (8004198 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004182:	60bb      	str	r3, [r7, #8]
      break;
 8004184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004186:	68bb      	ldr	r3, [r7, #8]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004192:	bf00      	nop
 8004194:	40023800 	.word	0x40023800
 8004198:	00f42400 	.word	0x00f42400
 800419c:	007a1200 	.word	0x007a1200

080041a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041a6:	681b      	ldr	r3, [r3, #0]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20000000 	.word	0x20000000

080041b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041bc:	f7ff fff0 	bl	80041a0 <HAL_RCC_GetHCLKFreq>
 80041c0:	4602      	mov	r2, r0
 80041c2:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	0a9b      	lsrs	r3, r3, #10
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	4903      	ldr	r1, [pc, #12]	; (80041dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ce:	5ccb      	ldrb	r3, [r1, r3]
 80041d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40023800 	.word	0x40023800
 80041dc:	0800893c 	.word	0x0800893c

080041e0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d105      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004204:	2b00      	cmp	r3, #0
 8004206:	d035      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004208:	4b62      	ldr	r3, [pc, #392]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800420e:	f7fc fec5 	bl	8000f9c <HAL_GetTick>
 8004212:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004214:	e008      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004216:	f7fc fec1 	bl	8000f9c <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e0b0      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004228:	4b5b      	ldr	r3, [pc, #364]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1f0      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	019a      	lsls	r2, r3, #6
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	071b      	lsls	r3, r3, #28
 8004240:	4955      	ldr	r1, [pc, #340]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004248:	4b52      	ldr	r3, [pc, #328]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800424a:	2201      	movs	r2, #1
 800424c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800424e:	f7fc fea5 	bl	8000f9c <HAL_GetTick>
 8004252:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004254:	e008      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004256:	f7fc fea1 	bl	8000f9c <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e090      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004268:	4b4b      	ldr	r3, [pc, #300]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0f0      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8083 	beq.w	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	4b44      	ldr	r3, [pc, #272]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	4a43      	ldr	r2, [pc, #268]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800428c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004290:	6413      	str	r3, [r2, #64]	; 0x40
 8004292:	4b41      	ldr	r3, [pc, #260]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800429e:	4b3f      	ldr	r3, [pc, #252]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a3e      	ldr	r2, [pc, #248]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042aa:	f7fc fe77 	bl	8000f9c <HAL_GetTick>
 80042ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042b0:	e008      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042b2:	f7fc fe73 	bl	8000f9c <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e062      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042c4:	4b35      	ldr	r3, [pc, #212]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0f0      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042d0:	4b31      	ldr	r3, [pc, #196]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d02f      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d028      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042ee:	4b2a      	ldr	r3, [pc, #168]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042f8:	4b29      	ldr	r3, [pc, #164]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042fe:	4b28      	ldr	r3, [pc, #160]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004304:	4a24      	ldr	r2, [pc, #144]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800430a:	4b23      	ldr	r3, [pc, #140]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b01      	cmp	r3, #1
 8004314:	d114      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004316:	f7fc fe41 	bl	8000f9c <HAL_GetTick>
 800431a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431c:	e00a      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800431e:	f7fc fe3d 	bl	8000f9c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	f241 3288 	movw	r2, #5000	; 0x1388
 800432c:	4293      	cmp	r3, r2
 800432e:	d901      	bls.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e02a      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004334:	4b18      	ldr	r3, [pc, #96]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0ee      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800434c:	d10d      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800434e:	4b12      	ldr	r3, [pc, #72]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800435e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004362:	490d      	ldr	r1, [pc, #52]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004364:	4313      	orrs	r3, r2
 8004366:	608b      	str	r3, [r1, #8]
 8004368:	e005      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	4a0a      	ldr	r2, [pc, #40]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004370:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004374:	6093      	str	r3, [r2, #8]
 8004376:	4b08      	ldr	r3, [pc, #32]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004378:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004382:	4905      	ldr	r1, [pc, #20]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004384:	4313      	orrs	r3, r2
 8004386:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	42470068 	.word	0x42470068
 8004398:	40023800 	.word	0x40023800
 800439c:	40007000 	.word	0x40007000
 80043a0:	42470e40 	.word	0x42470e40

080043a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d13e      	bne.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80043c2:	4b23      	ldr	r3, [pc, #140]	; (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d005      	beq.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d12f      	bne.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80043d8:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043da:	617b      	str	r3, [r7, #20]
          break;
 80043dc:	e02f      	b.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043de:	4b1c      	ldr	r3, [pc, #112]	; (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ea:	d108      	bne.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043ec:	4b18      	ldr	r3, [pc, #96]	; (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f4:	4a18      	ldr	r2, [pc, #96]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80043f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	e007      	b.n	800440e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043fe:	4b14      	ldr	r3, [pc, #80]	; (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004406:	4a15      	ldr	r2, [pc, #84]	; (800445c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800440e:	4b10      	ldr	r3, [pc, #64]	; (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004414:	099b      	lsrs	r3, r3, #6
 8004416:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	fb02 f303 	mul.w	r3, r2, r3
 8004420:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004422:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004428:	0f1b      	lsrs	r3, r3, #28
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	617b      	str	r3, [r7, #20]
          break;
 8004436:	e002      	b.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
          break;
 800443c:	bf00      	nop
        }
      }
      break;
 800443e:	bf00      	nop
    }
  }
  return frequency;
 8004440:	697b      	ldr	r3, [r7, #20]
}
 8004442:	4618      	mov	r0, r3
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40023800 	.word	0x40023800
 8004454:	00bb8000 	.word	0x00bb8000
 8004458:	007a1200 	.word	0x007a1200
 800445c:	00f42400 	.word	0x00f42400

08004460 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e07b      	b.n	800456a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	2b00      	cmp	r3, #0
 8004478:	d108      	bne.n	800448c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004482:	d009      	beq.n	8004498 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	61da      	str	r2, [r3, #28]
 800448a:	e005      	b.n	8004498 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fc fc1e 	bl	8000cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	431a      	orrs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451c:	ea42 0103 	orr.w	r1, r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004524:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	0c1b      	lsrs	r3, r3, #16
 8004536:	f003 0104 	and.w	r1, r3, #4
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	f003 0210 	and.w	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69da      	ldr	r2, [r3, #28]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004558:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004572:	b084      	sub	sp, #16
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	f107 001c 	add.w	r0, r7, #28
 8004580:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	2b01      	cmp	r3, #1
 8004588:	d122      	bne.n	80045d0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800459e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d105      	bne.n	80045c4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f001 fb1b 	bl	8005c00 <USB_CoreReset>
 80045ca:	4603      	mov	r3, r0
 80045cc:	73fb      	strb	r3, [r7, #15]
 80045ce:	e01a      	b.n	8004606 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f001 fb0f 	bl	8005c00 <USB_CoreReset>
 80045e2:	4603      	mov	r3, r0
 80045e4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80045e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d106      	bne.n	80045fa <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	639a      	str	r2, [r3, #56]	; 0x38
 80045f8:	e005      	b.n	8004606 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	2b01      	cmp	r3, #1
 800460a:	d10b      	bne.n	8004624 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f043 0206 	orr.w	r2, r3, #6
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f043 0220 	orr.w	r2, r3, #32
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004624:	7bfb      	ldrb	r3, [r7, #15]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004630:	b004      	add	sp, #16
 8004632:	4770      	bx	lr

08004634 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	4613      	mov	r3, r2
 8004640:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	2b02      	cmp	r3, #2
 8004646:	d165      	bne.n	8004714 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4a41      	ldr	r2, [pc, #260]	; (8004750 <USB_SetTurnaroundTime+0x11c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d906      	bls.n	800465e <USB_SetTurnaroundTime+0x2a>
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4a40      	ldr	r2, [pc, #256]	; (8004754 <USB_SetTurnaroundTime+0x120>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d202      	bcs.n	800465e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004658:	230f      	movs	r3, #15
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	e062      	b.n	8004724 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4a3c      	ldr	r2, [pc, #240]	; (8004754 <USB_SetTurnaroundTime+0x120>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d306      	bcc.n	8004674 <USB_SetTurnaroundTime+0x40>
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4a3b      	ldr	r2, [pc, #236]	; (8004758 <USB_SetTurnaroundTime+0x124>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d202      	bcs.n	8004674 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800466e:	230e      	movs	r3, #14
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	e057      	b.n	8004724 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4a38      	ldr	r2, [pc, #224]	; (8004758 <USB_SetTurnaroundTime+0x124>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d306      	bcc.n	800468a <USB_SetTurnaroundTime+0x56>
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4a37      	ldr	r2, [pc, #220]	; (800475c <USB_SetTurnaroundTime+0x128>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d202      	bcs.n	800468a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004684:	230d      	movs	r3, #13
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	e04c      	b.n	8004724 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4a33      	ldr	r2, [pc, #204]	; (800475c <USB_SetTurnaroundTime+0x128>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d306      	bcc.n	80046a0 <USB_SetTurnaroundTime+0x6c>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	4a32      	ldr	r2, [pc, #200]	; (8004760 <USB_SetTurnaroundTime+0x12c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d802      	bhi.n	80046a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800469a:	230c      	movs	r3, #12
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	e041      	b.n	8004724 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4a2f      	ldr	r2, [pc, #188]	; (8004760 <USB_SetTurnaroundTime+0x12c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d906      	bls.n	80046b6 <USB_SetTurnaroundTime+0x82>
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4a2e      	ldr	r2, [pc, #184]	; (8004764 <USB_SetTurnaroundTime+0x130>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d802      	bhi.n	80046b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80046b0:	230b      	movs	r3, #11
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	e036      	b.n	8004724 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	4a2a      	ldr	r2, [pc, #168]	; (8004764 <USB_SetTurnaroundTime+0x130>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d906      	bls.n	80046cc <USB_SetTurnaroundTime+0x98>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	4a29      	ldr	r2, [pc, #164]	; (8004768 <USB_SetTurnaroundTime+0x134>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d802      	bhi.n	80046cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80046c6:	230a      	movs	r3, #10
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	e02b      	b.n	8004724 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4a26      	ldr	r2, [pc, #152]	; (8004768 <USB_SetTurnaroundTime+0x134>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d906      	bls.n	80046e2 <USB_SetTurnaroundTime+0xae>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4a25      	ldr	r2, [pc, #148]	; (800476c <USB_SetTurnaroundTime+0x138>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d202      	bcs.n	80046e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80046dc:	2309      	movs	r3, #9
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e020      	b.n	8004724 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	4a21      	ldr	r2, [pc, #132]	; (800476c <USB_SetTurnaroundTime+0x138>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d306      	bcc.n	80046f8 <USB_SetTurnaroundTime+0xc4>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	4a20      	ldr	r2, [pc, #128]	; (8004770 <USB_SetTurnaroundTime+0x13c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d802      	bhi.n	80046f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80046f2:	2308      	movs	r3, #8
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	e015      	b.n	8004724 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4a1d      	ldr	r2, [pc, #116]	; (8004770 <USB_SetTurnaroundTime+0x13c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d906      	bls.n	800470e <USB_SetTurnaroundTime+0xda>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4a1c      	ldr	r2, [pc, #112]	; (8004774 <USB_SetTurnaroundTime+0x140>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d202      	bcs.n	800470e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004708:	2307      	movs	r3, #7
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	e00a      	b.n	8004724 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800470e:	2306      	movs	r3, #6
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	e007      	b.n	8004724 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800471a:	2309      	movs	r3, #9
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	e001      	b.n	8004724 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004720:	2309      	movs	r3, #9
 8004722:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	029b      	lsls	r3, r3, #10
 8004738:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800473c:	431a      	orrs	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	00d8acbf 	.word	0x00d8acbf
 8004754:	00e4e1c0 	.word	0x00e4e1c0
 8004758:	00f42400 	.word	0x00f42400
 800475c:	01067380 	.word	0x01067380
 8004760:	011a499f 	.word	0x011a499f
 8004764:	01312cff 	.word	0x01312cff
 8004768:	014ca43f 	.word	0x014ca43f
 800476c:	016e3600 	.word	0x016e3600
 8004770:	01a6ab1f 	.word	0x01a6ab1f
 8004774:	01e84800 	.word	0x01e84800

08004778 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f043 0201 	orr.w	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f023 0201 	bic.w	r2, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d115      	bne.n	800480a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047ea:	2001      	movs	r0, #1
 80047ec:	f7fc fbe2 	bl	8000fb4 <HAL_Delay>
      ms++;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3301      	adds	r3, #1
 80047f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f001 f972 	bl	8005ae0 <USB_GetMode>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d01e      	beq.n	8004840 <USB_SetCurrentMode+0x84>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2b31      	cmp	r3, #49	; 0x31
 8004806:	d9f0      	bls.n	80047ea <USB_SetCurrentMode+0x2e>
 8004808:	e01a      	b.n	8004840 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d115      	bne.n	800483c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800481c:	2001      	movs	r0, #1
 800481e:	f7fc fbc9 	bl	8000fb4 <HAL_Delay>
      ms++;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3301      	adds	r3, #1
 8004826:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f001 f959 	bl	8005ae0 <USB_GetMode>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <USB_SetCurrentMode+0x84>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b31      	cmp	r3, #49	; 0x31
 8004838:	d9f0      	bls.n	800481c <USB_SetCurrentMode+0x60>
 800483a:	e001      	b.n	8004840 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e005      	b.n	800484c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b32      	cmp	r3, #50	; 0x32
 8004844:	d101      	bne.n	800484a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004854:	b084      	sub	sp, #16
 8004856:	b580      	push	{r7, lr}
 8004858:	b086      	sub	sp, #24
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004862:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800486e:	2300      	movs	r3, #0
 8004870:	613b      	str	r3, [r7, #16]
 8004872:	e009      	b.n	8004888 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	3340      	adds	r3, #64	; 0x40
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	2200      	movs	r2, #0
 8004880:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	3301      	adds	r3, #1
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	2b0e      	cmp	r3, #14
 800488c:	d9f2      	bls.n	8004874 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800488e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004890:	2b00      	cmp	r3, #0
 8004892:	d11c      	bne.n	80048ce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048a2:	f043 0302 	orr.w	r3, r3, #2
 80048a6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	639a      	str	r2, [r3, #56]	; 0x38
 80048cc:	e00b      	b.n	80048e6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048ec:	461a      	mov	r2, r3
 80048ee:	2300      	movs	r3, #0
 80048f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f8:	4619      	mov	r1, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004900:	461a      	mov	r2, r3
 8004902:	680b      	ldr	r3, [r1, #0]
 8004904:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004908:	2b01      	cmp	r3, #1
 800490a:	d10c      	bne.n	8004926 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800490c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490e:	2b00      	cmp	r3, #0
 8004910:	d104      	bne.n	800491c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004912:	2100      	movs	r1, #0
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f945 	bl	8004ba4 <USB_SetDevSpeed>
 800491a:	e008      	b.n	800492e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800491c:	2101      	movs	r1, #1
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f940 	bl	8004ba4 <USB_SetDevSpeed>
 8004924:	e003      	b.n	800492e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004926:	2103      	movs	r1, #3
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f93b 	bl	8004ba4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800492e:	2110      	movs	r1, #16
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f8f3 	bl	8004b1c <USB_FlushTxFifo>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f90f 	bl	8004b64 <USB_FlushRxFifo>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004956:	461a      	mov	r2, r3
 8004958:	2300      	movs	r3, #0
 800495a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004962:	461a      	mov	r2, r3
 8004964:	2300      	movs	r3, #0
 8004966:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496e:	461a      	mov	r2, r3
 8004970:	2300      	movs	r3, #0
 8004972:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004974:	2300      	movs	r3, #0
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	e043      	b.n	8004a02 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800498c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004990:	d118      	bne.n	80049c4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a4:	461a      	mov	r2, r3
 80049a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	e013      	b.n	80049d6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ba:	461a      	mov	r2, r3
 80049bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	e008      	b.n	80049d6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d0:	461a      	mov	r2, r3
 80049d2:	2300      	movs	r3, #0
 80049d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e2:	461a      	mov	r2, r3
 80049e4:	2300      	movs	r3, #0
 80049e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f4:	461a      	mov	r2, r3
 80049f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	3301      	adds	r3, #1
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d3b7      	bcc.n	800497a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	e043      	b.n	8004a98 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a26:	d118      	bne.n	8004a5a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10a      	bne.n	8004a44 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	e013      	b.n	8004a6c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a50:	461a      	mov	r2, r3
 8004a52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	e008      	b.n	8004a6c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a66:	461a      	mov	r2, r3
 8004a68:	2300      	movs	r3, #0
 8004a6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a78:	461a      	mov	r2, r3
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	3301      	adds	r3, #1
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d3b7      	bcc.n	8004a10 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ab2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ac0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d105      	bne.n	8004ad4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f043 0210 	orr.w	r2, r3, #16
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699a      	ldr	r2, [r3, #24]
 8004ad8:	4b0f      	ldr	r3, [pc, #60]	; (8004b18 <USB_DevInit+0x2c4>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	f043 0208 	orr.w	r2, r3, #8
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d107      	bne.n	8004b08 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b00:	f043 0304 	orr.w	r3, r3, #4
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b14:	b004      	add	sp, #16
 8004b16:	4770      	bx	lr
 8004b18:	803c3800 	.word	0x803c3800

08004b1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	019b      	lsls	r3, r3, #6
 8004b2e:	f043 0220 	orr.w	r2, r3, #32
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	4a08      	ldr	r2, [pc, #32]	; (8004b60 <USB_FlushTxFifo+0x44>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d901      	bls.n	8004b46 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e006      	b.n	8004b54 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b20      	cmp	r3, #32
 8004b50:	d0f1      	beq.n	8004b36 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	00030d40 	.word	0x00030d40

08004b64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2210      	movs	r2, #16
 8004b74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <USB_FlushRxFifo+0x3c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d901      	bls.n	8004b86 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e006      	b.n	8004b94 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	2b10      	cmp	r3, #16
 8004b90:	d0f1      	beq.n	8004b76 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	00030d40 	.word	0x00030d40

08004ba4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	68f9      	ldr	r1, [r7, #12]
 8004bc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b087      	sub	sp, #28
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 0306 	and.w	r3, r3, #6
 8004bee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d102      	bne.n	8004bfc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	75fb      	strb	r3, [r7, #23]
 8004bfa:	e00a      	b.n	8004c12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d002      	beq.n	8004c08 <USB_GetDevSpeed+0x32>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b06      	cmp	r3, #6
 8004c06:	d102      	bne.n	8004c0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	75fb      	strb	r3, [r7, #23]
 8004c0c:	e001      	b.n	8004c12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004c0e:	230f      	movs	r3, #15
 8004c10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	371c      	adds	r7, #28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	785b      	ldrb	r3, [r3, #1]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d13a      	bne.n	8004cb2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	68f9      	ldr	r1, [r7, #12]
 8004c56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d155      	bne.n	8004d20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	78db      	ldrb	r3, [r3, #3]
 8004c8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	059b      	lsls	r3, r3, #22
 8004c96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	0151      	lsls	r1, r2, #5
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	440a      	add	r2, r1
 8004ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	e036      	b.n	8004d20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb8:	69da      	ldr	r2, [r3, #28]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc8:	041b      	lsls	r3, r3, #16
 8004cca:	68f9      	ldr	r1, [r7, #12]
 8004ccc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d11a      	bne.n	8004d20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	78db      	ldrb	r3, [r3, #3]
 8004d04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d06:	430b      	orrs	r3, r1
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	0151      	lsls	r1, r2, #5
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	440a      	add	r2, r1
 8004d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
	...

08004d30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d161      	bne.n	8004e10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d62:	d11f      	bne.n	8004da4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	0151      	lsls	r1, r2, #5
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	440a      	add	r2, r1
 8004d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	0151      	lsls	r1, r2, #5
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	440a      	add	r2, r1
 8004d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004da2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	f003 030f 	and.w	r3, r3, #15
 8004db4:	2101      	movs	r1, #1
 8004db6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	68f9      	ldr	r1, [r7, #12]
 8004dc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	2101      	movs	r1, #1
 8004dda:	fa01 f303 	lsl.w	r3, r1, r3
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	43db      	mvns	r3, r3
 8004de2:	68f9      	ldr	r1, [r7, #12]
 8004de4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004de8:	4013      	ands	r3, r2
 8004dea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	0159      	lsls	r1, r3, #5
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	440b      	add	r3, r1
 8004e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e06:	4619      	mov	r1, r3
 8004e08:	4b35      	ldr	r3, [pc, #212]	; (8004ee0 <USB_DeactivateEndpoint+0x1b0>)
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	600b      	str	r3, [r1, #0]
 8004e0e:	e060      	b.n	8004ed2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e26:	d11f      	bne.n	8004e68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	0151      	lsls	r1, r2, #5
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	440a      	add	r2, r1
 8004e3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	2101      	movs	r1, #1
 8004e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7e:	041b      	lsls	r3, r3, #16
 8004e80:	43db      	mvns	r3, r3
 8004e82:	68f9      	ldr	r1, [r7, #12]
 8004e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e88:	4013      	ands	r3, r2
 8004e8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea2:	041b      	lsls	r3, r3, #16
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	68f9      	ldr	r1, [r7, #12]
 8004ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eac:	4013      	ands	r3, r2
 8004eae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	0159      	lsls	r1, r3, #5
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	440b      	add	r3, r1
 8004ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <USB_DeactivateEndpoint+0x1b4>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	ec337800 	.word	0xec337800
 8004ee4:	eff37800 	.word	0xeff37800

08004ee8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	; 0x28
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	785b      	ldrb	r3, [r3, #1]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	f040 815c 	bne.w	80051c2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d132      	bne.n	8004f78 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	0151      	lsls	r1, r2, #5
 8004f24:	69fa      	ldr	r2, [r7, #28]
 8004f26:	440a      	add	r2, r1
 8004f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	0151      	lsls	r1, r2, #5
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	0151      	lsls	r1, r2, #5
 8004f68:	69fa      	ldr	r2, [r7, #28]
 8004f6a:	440a      	add	r2, r1
 8004f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f70:	0cdb      	lsrs	r3, r3, #19
 8004f72:	04db      	lsls	r3, r3, #19
 8004f74:	6113      	str	r3, [r2, #16]
 8004f76:	e074      	b.n	8005062 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	0151      	lsls	r1, r2, #5
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	440a      	add	r2, r1
 8004f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f92:	0cdb      	lsrs	r3, r3, #19
 8004f94:	04db      	lsls	r3, r3, #19
 8004f96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	0151      	lsls	r1, r2, #5
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	440a      	add	r2, r1
 8004fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fb6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	6959      	ldr	r1, [r3, #20]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	440b      	add	r3, r1
 8004fd4:	1e59      	subs	r1, r3, #1
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fde:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004fe0:	4b9d      	ldr	r3, [pc, #628]	; (8005258 <USB_EPStartXfer+0x370>)
 8004fe2:	400b      	ands	r3, r1
 8004fe4:	69b9      	ldr	r1, [r7, #24]
 8004fe6:	0148      	lsls	r0, r1, #5
 8004fe8:	69f9      	ldr	r1, [r7, #28]
 8004fea:	4401      	add	r1, r0
 8004fec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800500a:	69b9      	ldr	r1, [r7, #24]
 800500c:	0148      	lsls	r0, r1, #5
 800500e:	69f9      	ldr	r1, [r7, #28]
 8005010:	4401      	add	r1, r0
 8005012:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005016:	4313      	orrs	r3, r2
 8005018:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	78db      	ldrb	r3, [r3, #3]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d11f      	bne.n	8005062 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	0151      	lsls	r1, r2, #5
 8005034:	69fa      	ldr	r2, [r7, #28]
 8005036:	440a      	add	r2, r1
 8005038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800503c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005040:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	0151      	lsls	r1, r2, #5
 8005054:	69fa      	ldr	r2, [r7, #28]
 8005056:	440a      	add	r2, r1
 8005058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005060:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d14b      	bne.n	8005100 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d009      	beq.n	8005084 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507c:	461a      	mov	r2, r3
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	78db      	ldrb	r3, [r3, #3]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d128      	bne.n	80050de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005098:	2b00      	cmp	r3, #0
 800509a:	d110      	bne.n	80050be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	0151      	lsls	r1, r2, #5
 80050ae:	69fa      	ldr	r2, [r7, #28]
 80050b0:	440a      	add	r2, r1
 80050b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	e00f      	b.n	80050de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	0151      	lsls	r1, r2, #5
 80050d0:	69fa      	ldr	r2, [r7, #28]
 80050d2:	440a      	add	r2, r1
 80050d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	0151      	lsls	r1, r2, #5
 80050f0:	69fa      	ldr	r2, [r7, #28]
 80050f2:	440a      	add	r2, r1
 80050f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	e12f      	b.n	8005360 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	0151      	lsls	r1, r2, #5
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	440a      	add	r2, r1
 8005116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800511a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800511e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	78db      	ldrb	r3, [r3, #3]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d015      	beq.n	8005154 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8117 	beq.w	8005360 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	2101      	movs	r1, #1
 8005144:	fa01 f303 	lsl.w	r3, r1, r3
 8005148:	69f9      	ldr	r1, [r7, #28]
 800514a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800514e:	4313      	orrs	r3, r2
 8005150:	634b      	str	r3, [r1, #52]	; 0x34
 8005152:	e105      	b.n	8005360 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d110      	bne.n	8005186 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	0151      	lsls	r1, r2, #5
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	440a      	add	r2, r1
 800517a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800517e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	e00f      	b.n	80051a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	0151      	lsls	r1, r2, #5
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	440a      	add	r2, r1
 800519c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	68d9      	ldr	r1, [r3, #12]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	781a      	ldrb	r2, [r3, #0]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	b298      	uxth	r0, r3
 80051b4:	79fb      	ldrb	r3, [r7, #7]
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	4603      	mov	r3, r0
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 fa2b 	bl	8005616 <USB_WritePacket>
 80051c0:	e0ce      	b.n	8005360 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051dc:	0cdb      	lsrs	r3, r3, #19
 80051de:	04db      	lsls	r3, r3, #19
 80051e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005200:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005204:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d126      	bne.n	800525c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521a:	691a      	ldr	r2, [r3, #16]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005224:	69b9      	ldr	r1, [r7, #24]
 8005226:	0148      	lsls	r0, r1, #5
 8005228:	69f9      	ldr	r1, [r7, #28]
 800522a:	4401      	add	r1, r0
 800522c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005230:	4313      	orrs	r3, r2
 8005232:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	440a      	add	r2, r1
 800524a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800524e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005252:	6113      	str	r3, [r2, #16]
 8005254:	e036      	b.n	80052c4 <USB_EPStartXfer+0x3dc>
 8005256:	bf00      	nop
 8005258:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	695a      	ldr	r2, [r3, #20]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	4413      	add	r3, r2
 8005266:	1e5a      	subs	r2, r3, #1
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005270:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527e:	691a      	ldr	r2, [r3, #16]
 8005280:	8afb      	ldrh	r3, [r7, #22]
 8005282:	04d9      	lsls	r1, r3, #19
 8005284:	4b39      	ldr	r3, [pc, #228]	; (800536c <USB_EPStartXfer+0x484>)
 8005286:	400b      	ands	r3, r1
 8005288:	69b9      	ldr	r1, [r7, #24]
 800528a:	0148      	lsls	r0, r1, #5
 800528c:	69f9      	ldr	r1, [r7, #28]
 800528e:	4401      	add	r1, r0
 8005290:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005294:	4313      	orrs	r3, r2
 8005296:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a4:	691a      	ldr	r2, [r3, #16]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	8af9      	ldrh	r1, [r7, #22]
 80052ac:	fb01 f303 	mul.w	r3, r1, r3
 80052b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052b4:	69b9      	ldr	r1, [r7, #24]
 80052b6:	0148      	lsls	r0, r1, #5
 80052b8:	69f9      	ldr	r1, [r7, #28]
 80052ba:	4401      	add	r1, r0
 80052bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052c0:	4313      	orrs	r3, r2
 80052c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d10d      	bne.n	80052e6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d009      	beq.n	80052e6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	68d9      	ldr	r1, [r3, #12]
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e2:	460a      	mov	r2, r1
 80052e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	78db      	ldrb	r3, [r3, #3]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d128      	bne.n	8005340 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d110      	bne.n	8005320 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	440a      	add	r2, r1
 8005314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005318:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	e00f      	b.n	8005340 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	0151      	lsls	r1, r2, #5
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	440a      	add	r2, r1
 8005336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800533a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	0151      	lsls	r1, r2, #5
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	440a      	add	r2, r1
 8005356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800535a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800535e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3720      	adds	r7, #32
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	1ff80000 	.word	0x1ff80000

08005370 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	4613      	mov	r3, r2
 800537c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	2b01      	cmp	r3, #1
 800538e:	f040 80cd 	bne.w	800552c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d132      	bne.n	8005400 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	0151      	lsls	r1, r2, #5
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	440a      	add	r2, r1
 80053b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	0151      	lsls	r1, r2, #5
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	440a      	add	r2, r1
 80053d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f8:	0cdb      	lsrs	r3, r3, #19
 80053fa:	04db      	lsls	r3, r3, #19
 80053fc:	6113      	str	r3, [r2, #16]
 80053fe:	e04e      	b.n	800549e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	0151      	lsls	r1, r2, #5
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	440a      	add	r2, r1
 8005416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541a:	0cdb      	lsrs	r3, r3, #19
 800541c:	04db      	lsls	r3, r3, #19
 800541e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	0151      	lsls	r1, r2, #5
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	440a      	add	r2, r1
 8005436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800543a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800543e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005442:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	695a      	ldr	r2, [r3, #20]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	429a      	cmp	r2, r3
 800544e:	d903      	bls.n	8005458 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	440a      	add	r2, r1
 800546e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005472:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005476:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005484:	691a      	ldr	r2, [r3, #16]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800548e:	6939      	ldr	r1, [r7, #16]
 8005490:	0148      	lsls	r0, r1, #5
 8005492:	6979      	ldr	r1, [r7, #20]
 8005494:	4401      	add	r1, r0
 8005496:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800549a:	4313      	orrs	r3, r2
 800549c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d11e      	bne.n	80054e2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d009      	beq.n	80054c0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b8:	461a      	mov	r2, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	e092      	b.n	8005608 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	0151      	lsls	r1, r2, #5
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005500:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d07e      	beq.n	8005608 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	2101      	movs	r1, #1
 800551c:	fa01 f303 	lsl.w	r3, r1, r3
 8005520:	6979      	ldr	r1, [r7, #20]
 8005522:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005526:	4313      	orrs	r3, r2
 8005528:	634b      	str	r3, [r1, #52]	; 0x34
 800552a:	e06d      	b.n	8005608 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	440a      	add	r2, r1
 8005542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005546:	0cdb      	lsrs	r3, r3, #19
 8005548:	04db      	lsls	r3, r3, #19
 800554a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	0151      	lsls	r1, r2, #5
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	440a      	add	r2, r1
 8005562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005566:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800556a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800556e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	0151      	lsls	r1, r2, #5
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	440a      	add	r2, r1
 8005596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800559a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800559e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ac:	691a      	ldr	r2, [r3, #16]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055b6:	6939      	ldr	r1, [r7, #16]
 80055b8:	0148      	lsls	r0, r1, #5
 80055ba:	6979      	ldr	r1, [r7, #20]
 80055bc:	4401      	add	r1, r0
 80055be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055c2:	4313      	orrs	r3, r2
 80055c4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d10d      	bne.n	80055e8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d009      	beq.n	80055e8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	68d9      	ldr	r1, [r3, #12]
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e4:	460a      	mov	r2, r1
 80055e6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	0151      	lsls	r1, r2, #5
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	440a      	add	r2, r1
 80055fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005602:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005606:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005616:	b480      	push	{r7}
 8005618:	b089      	sub	sp, #36	; 0x24
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	4611      	mov	r1, r2
 8005622:	461a      	mov	r2, r3
 8005624:	460b      	mov	r3, r1
 8005626:	71fb      	strb	r3, [r7, #7]
 8005628:	4613      	mov	r3, r2
 800562a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005634:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005638:	2b00      	cmp	r3, #0
 800563a:	d123      	bne.n	8005684 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800563c:	88bb      	ldrh	r3, [r7, #4]
 800563e:	3303      	adds	r3, #3
 8005640:	089b      	lsrs	r3, r3, #2
 8005642:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005644:	2300      	movs	r3, #0
 8005646:	61bb      	str	r3, [r7, #24]
 8005648:	e018      	b.n	800567c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	031a      	lsls	r2, r3, #12
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	4413      	add	r3, r2
 8005652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005656:	461a      	mov	r2, r3
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	3301      	adds	r3, #1
 8005662:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	3301      	adds	r3, #1
 8005668:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	3301      	adds	r3, #1
 800566e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	3301      	adds	r3, #1
 8005674:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	3301      	adds	r3, #1
 800567a:	61bb      	str	r3, [r7, #24]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	429a      	cmp	r2, r3
 8005682:	d3e2      	bcc.n	800564a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3724      	adds	r7, #36	; 0x24
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005692:	b480      	push	{r7}
 8005694:	b08b      	sub	sp, #44	; 0x2c
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	4613      	mov	r3, r2
 800569e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80056a8:	88fb      	ldrh	r3, [r7, #6]
 80056aa:	089b      	lsrs	r3, r3, #2
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80056b0:	88fb      	ldrh	r3, [r7, #6]
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80056b8:	2300      	movs	r3, #0
 80056ba:	623b      	str	r3, [r7, #32]
 80056bc:	e014      	b.n	80056e8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	601a      	str	r2, [r3, #0]
    pDest++;
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	3301      	adds	r3, #1
 80056ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	3301      	adds	r3, #1
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	3301      	adds	r3, #1
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	3301      	adds	r3, #1
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	3301      	adds	r3, #1
 80056e6:	623b      	str	r3, [r7, #32]
 80056e8:	6a3a      	ldr	r2, [r7, #32]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d3e6      	bcc.n	80056be <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80056f0:	8bfb      	ldrh	r3, [r7, #30]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d01e      	beq.n	8005734 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005700:	461a      	mov	r2, r3
 8005702:	f107 0310 	add.w	r3, r7, #16
 8005706:	6812      	ldr	r2, [r2, #0]
 8005708:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	fa22 f303 	lsr.w	r3, r2, r3
 8005716:	b2da      	uxtb	r2, r3
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	701a      	strb	r2, [r3, #0]
      i++;
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	3301      	adds	r3, #1
 8005720:	623b      	str	r3, [r7, #32]
      pDest++;
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	3301      	adds	r3, #1
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005728:	8bfb      	ldrh	r3, [r7, #30]
 800572a:	3b01      	subs	r3, #1
 800572c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800572e:	8bfb      	ldrh	r3, [r7, #30]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1ea      	bne.n	800570a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005736:	4618      	mov	r0, r3
 8005738:	372c      	adds	r7, #44	; 0x2c
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005742:	b480      	push	{r7}
 8005744:	b085      	sub	sp, #20
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	785b      	ldrb	r3, [r3, #1]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d12c      	bne.n	80057b8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	db12      	blt.n	8005796 <USB_EPSetStall+0x54>
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00f      	beq.n	8005796 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	0151      	lsls	r1, r2, #5
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	440a      	add	r2, r1
 800578c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005790:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005794:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	0151      	lsls	r1, r2, #5
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	440a      	add	r2, r1
 80057ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	e02b      	b.n	8005810 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	db12      	blt.n	80057f0 <USB_EPSetStall+0xae>
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00f      	beq.n	80057f0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	0151      	lsls	r1, r2, #5
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	440a      	add	r2, r1
 80057e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057ee:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	0151      	lsls	r1, r2, #5
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	440a      	add	r2, r1
 8005806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800580a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800580e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800581e:	b480      	push	{r7}
 8005820:	b085      	sub	sp, #20
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d128      	bne.n	800588c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	0151      	lsls	r1, r2, #5
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	440a      	add	r2, r1
 8005850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005854:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005858:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	78db      	ldrb	r3, [r3, #3]
 800585e:	2b03      	cmp	r3, #3
 8005860:	d003      	beq.n	800586a <USB_EPClearStall+0x4c>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	78db      	ldrb	r3, [r3, #3]
 8005866:	2b02      	cmp	r3, #2
 8005868:	d138      	bne.n	80058dc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	0151      	lsls	r1, r2, #5
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	440a      	add	r2, r1
 8005880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	e027      	b.n	80058dc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	0151      	lsls	r1, r2, #5
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	440a      	add	r2, r1
 80058a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	78db      	ldrb	r3, [r3, #3]
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d003      	beq.n	80058bc <USB_EPClearStall+0x9e>
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	78db      	ldrb	r3, [r3, #3]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d10f      	bne.n	80058dc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	0151      	lsls	r1, r2, #5
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	440a      	add	r2, r1
 80058d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058da:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b085      	sub	sp, #20
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	460b      	mov	r3, r1
 80058f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005908:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800590c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800591e:	68f9      	ldr	r1, [r7, #12]
 8005920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005924:	4313      	orrs	r3, r2
 8005926:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005936:	b480      	push	{r7}
 8005938:	b085      	sub	sp, #20
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005950:	f023 0303 	bic.w	r3, r3, #3
 8005954:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005964:	f023 0302 	bic.w	r3, r3, #2
 8005968:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005992:	f023 0303 	bic.w	r3, r3, #3
 8005996:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059a6:	f043 0302 	orr.w	r3, r3, #2
 80059aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b085      	sub	sp, #20
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4013      	ands	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059d2:	68fb      	ldr	r3, [r7, #12]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	4013      	ands	r3, r2
 8005a02:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	0c1b      	lsrs	r3, r3, #16
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	4013      	ands	r3, r2
 8005a36:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	b29b      	uxth	r3, r3
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	460b      	mov	r3, r1
 8005a52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	4013      	ands	r3, r2
 8005a74:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a76:	68bb      	ldr	r3, [r7, #8]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005aa8:	78fb      	ldrb	r3, [r7, #3]
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab4:	01db      	lsls	r3, r3, #7
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005abe:	78fb      	ldrb	r3, [r7, #3]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	371c      	adds	r7, #28
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	f003 0301 	and.w	r3, r3, #1
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b16:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005b1a:	f023 0307 	bic.w	r3, r3, #7
 8005b1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	333c      	adds	r3, #60	; 0x3c
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	4a26      	ldr	r2, [pc, #152]	; (8005bfc <USB_EP0_OutStart+0xb8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d90a      	bls.n	8005b7e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b78:	d101      	bne.n	8005b7e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e037      	b.n	8005bee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b84:	461a      	mov	r2, r3
 8005b86:	2300      	movs	r3, #0
 8005b88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bac:	f043 0318 	orr.w	r3, r3, #24
 8005bb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005bc4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005bc6:	7afb      	ldrb	r3, [r7, #11]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d10f      	bne.n	8005bec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005bea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	4f54300a 	.word	0x4f54300a

08005c00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	4a13      	ldr	r2, [pc, #76]	; (8005c60 <USB_CoreReset+0x60>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d901      	bls.n	8005c1c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e01a      	b.n	8005c52 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	daf3      	bge.n	8005c0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f043 0201 	orr.w	r2, r3, #1
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3301      	adds	r3, #1
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <USB_CoreReset+0x60>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d901      	bls.n	8005c44 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e006      	b.n	8005c52 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d0f1      	beq.n	8005c34 <USB_CoreReset+0x34>

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	00030d40 	.word	0x00030d40

08005c64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c70:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005c74:	f002 f96a 	bl	8007f4c <USBD_static_malloc>
 8005c78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d105      	bne.n	8005c8c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e066      	b.n	8005d5a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	7c1b      	ldrb	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d119      	bne.n	8005cd0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	2181      	movs	r1, #129	; 0x81
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f002 f82e 	bl	8007d06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f002 f824 	bl	8007d06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2210      	movs	r2, #16
 8005cca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005cce:	e016      	b.n	8005cfe <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005cd0:	2340      	movs	r3, #64	; 0x40
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	2181      	movs	r1, #129	; 0x81
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f002 f815 	bl	8007d06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ce2:	2340      	movs	r3, #64	; 0x40
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f002 f80c 	bl	8007d06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2210      	movs	r2, #16
 8005cfa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005cfe:	2308      	movs	r3, #8
 8005d00:	2203      	movs	r2, #3
 8005d02:	2182      	movs	r1, #130	; 0x82
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f001 fffe 	bl	8007d06 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	7c1b      	ldrb	r3, [r3, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d109      	bne.n	8005d48 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d3e:	2101      	movs	r1, #1
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f002 f8cf 	bl	8007ee4 <USBD_LL_PrepareReceive>
 8005d46:	e007      	b.n	8005d58 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d4e:	2340      	movs	r3, #64	; 0x40
 8005d50:	2101      	movs	r1, #1
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f002 f8c6 	bl	8007ee4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b082      	sub	sp, #8
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005d6e:	2181      	movs	r1, #129	; 0x81
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f001 ffee 	bl	8007d52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f001 ffe7 	bl	8007d52 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005d8c:	2182      	movs	r1, #130	; 0x82
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f001 ffdf 	bl	8007d52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00e      	beq.n	8005dcc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f002 f8d2 	bl	8007f68 <USBD_static_free>
    pdev->pClassData = NULL;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005de8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e0af      	b.n	8005f60 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d03f      	beq.n	8005e8c <USBD_CDC_Setup+0xb4>
 8005e0c:	2b20      	cmp	r3, #32
 8005e0e:	f040 809f 	bne.w	8005f50 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	88db      	ldrh	r3, [r3, #6]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d02e      	beq.n	8005e78 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	b25b      	sxtb	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	da16      	bge.n	8005e52 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005e30:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	88d2      	ldrh	r2, [r2, #6]
 8005e36:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	88db      	ldrh	r3, [r3, #6]
 8005e3c:	2b07      	cmp	r3, #7
 8005e3e:	bf28      	it	cs
 8005e40:	2307      	movcs	r3, #7
 8005e42:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	89fa      	ldrh	r2, [r7, #14]
 8005e48:	4619      	mov	r1, r3
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f001 fb19 	bl	8007482 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005e50:	e085      	b.n	8005f5e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	785a      	ldrb	r2, [r3, #1]
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	88db      	ldrh	r3, [r3, #6]
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005e68:	6939      	ldr	r1, [r7, #16]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	88db      	ldrh	r3, [r3, #6]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f001 fb32 	bl	80074da <USBD_CtlPrepareRx>
      break;
 8005e76:	e072      	b.n	8005f5e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	7850      	ldrb	r0, [r2, #1]
 8005e84:	2200      	movs	r2, #0
 8005e86:	6839      	ldr	r1, [r7, #0]
 8005e88:	4798      	blx	r3
      break;
 8005e8a:	e068      	b.n	8005f5e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	2b0b      	cmp	r3, #11
 8005e92:	d852      	bhi.n	8005f3a <USBD_CDC_Setup+0x162>
 8005e94:	a201      	add	r2, pc, #4	; (adr r2, 8005e9c <USBD_CDC_Setup+0xc4>)
 8005e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9a:	bf00      	nop
 8005e9c:	08005ecd 	.word	0x08005ecd
 8005ea0:	08005f49 	.word	0x08005f49
 8005ea4:	08005f3b 	.word	0x08005f3b
 8005ea8:	08005f3b 	.word	0x08005f3b
 8005eac:	08005f3b 	.word	0x08005f3b
 8005eb0:	08005f3b 	.word	0x08005f3b
 8005eb4:	08005f3b 	.word	0x08005f3b
 8005eb8:	08005f3b 	.word	0x08005f3b
 8005ebc:	08005f3b 	.word	0x08005f3b
 8005ec0:	08005f3b 	.word	0x08005f3b
 8005ec4:	08005ef7 	.word	0x08005ef7
 8005ec8:	08005f21 	.word	0x08005f21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	d107      	bne.n	8005ee8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005ed8:	f107 030a 	add.w	r3, r7, #10
 8005edc:	2202      	movs	r2, #2
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f001 face 	bl	8007482 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ee6:	e032      	b.n	8005f4e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f001 fa58 	bl	80073a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	75fb      	strb	r3, [r7, #23]
          break;
 8005ef4:	e02b      	b.n	8005f4e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d107      	bne.n	8005f12 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005f02:	f107 030d 	add.w	r3, r7, #13
 8005f06:	2201      	movs	r2, #1
 8005f08:	4619      	mov	r1, r3
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f001 fab9 	bl	8007482 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f10:	e01d      	b.n	8005f4e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005f12:	6839      	ldr	r1, [r7, #0]
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f001 fa43 	bl	80073a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f1e:	e016      	b.n	8005f4e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d00f      	beq.n	8005f4c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f001 fa36 	bl	80073a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f34:	2303      	movs	r3, #3
 8005f36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005f38:	e008      	b.n	8005f4c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f001 fa2f 	bl	80073a0 <USBD_CtlError>
          ret = USBD_FAIL;
 8005f42:	2303      	movs	r3, #3
 8005f44:	75fb      	strb	r3, [r7, #23]
          break;
 8005f46:	e002      	b.n	8005f4e <USBD_CDC_Setup+0x176>
          break;
 8005f48:	bf00      	nop
 8005f4a:	e008      	b.n	8005f5e <USBD_CDC_Setup+0x186>
          break;
 8005f4c:	bf00      	nop
      }
      break;
 8005f4e:	e006      	b.n	8005f5e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005f50:	6839      	ldr	r1, [r7, #0]
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f001 fa24 	bl	80073a0 <USBD_CtlError>
      ret = USBD_FAIL;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f5c:	bf00      	nop
  }

  return (uint8_t)ret;
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e04f      	b.n	800602a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f90:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005f92:	78fa      	ldrb	r2, [r7, #3]
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	3318      	adds	r3, #24
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d029      	beq.n	8005ffc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005fa8:	78fa      	ldrb	r2, [r7, #3]
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	440b      	add	r3, r1
 8005fb6:	3318      	adds	r3, #24
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	78f9      	ldrb	r1, [r7, #3]
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	1a5b      	subs	r3, r3, r1
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4403      	add	r3, r0
 8005fc8:	3344      	adds	r3, #68	; 0x44
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	fbb2 f1f3 	udiv	r1, r2, r3
 8005fd0:	fb03 f301 	mul.w	r3, r3, r1
 8005fd4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d110      	bne.n	8005ffc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005fda:	78fa      	ldrb	r2, [r7, #3]
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	440b      	add	r3, r1
 8005fe8:	3318      	adds	r3, #24
 8005fea:	2200      	movs	r2, #0
 8005fec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005fee:	78f9      	ldrb	r1, [r7, #3]
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f001 ff54 	bl	8007ea2 <USBD_LL_Transmit>
 8005ffa:	e015      	b.n	8006028 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00b      	beq.n	8006028 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006024:	78fa      	ldrb	r2, [r7, #3]
 8006026:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b084      	sub	sp, #16
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	460b      	mov	r3, r1
 800603c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006044:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006050:	2303      	movs	r3, #3
 8006052:	e015      	b.n	8006080 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f001 ff64 	bl	8007f26 <USBD_LL_GetRxDataSize>
 800605e:	4602      	mov	r2, r0
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800607a:	4611      	mov	r1, r2
 800607c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006096:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800609e:	2303      	movs	r3, #3
 80060a0:	e01b      	b.n	80060da <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d015      	beq.n	80060d8 <USBD_CDC_EP0_RxReady+0x50>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80060b2:	2bff      	cmp	r3, #255	; 0xff
 80060b4:	d010      	beq.n	80060d8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80060c4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80060cc:	b292      	uxth	r2, r2
 80060ce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	22ff      	movs	r2, #255	; 0xff
 80060d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
	...

080060e4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2243      	movs	r2, #67	; 0x43
 80060f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80060f2:	4b03      	ldr	r3, [pc, #12]	; (8006100 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	20000094 	.word	0x20000094

08006104 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2243      	movs	r2, #67	; 0x43
 8006110:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006112:	4b03      	ldr	r3, [pc, #12]	; (8006120 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	20000050 	.word	0x20000050

08006124 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2243      	movs	r2, #67	; 0x43
 8006130:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006132:	4b03      	ldr	r3, [pc, #12]	; (8006140 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006134:	4618      	mov	r0, r3
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	200000d8 	.word	0x200000d8

08006144 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	220a      	movs	r2, #10
 8006150:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006152:	4b03      	ldr	r3, [pc, #12]	; (8006160 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006154:	4618      	mov	r0, r3
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	2000000c 	.word	0x2000000c

08006164 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006174:	2303      	movs	r3, #3
 8006176:	e004      	b.n	8006182 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800618e:	b480      	push	{r7}
 8006190:	b087      	sub	sp, #28
 8006192:	af00      	add	r7, sp, #0
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061a0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e008      	b.n	80061be <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b085      	sub	sp, #20
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e004      	b.n	80061f0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800620a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800620c:	2301      	movs	r3, #1
 800620e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800621a:	2303      	movs	r3, #3
 800621c:	e01a      	b.n	8006254 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006224:	2b00      	cmp	r3, #0
 8006226:	d114      	bne.n	8006252 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2201      	movs	r2, #1
 800622c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006246:	2181      	movs	r1, #129	; 0x81
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 fe2a 	bl	8007ea2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006252:	7bfb      	ldrb	r3, [r7, #15]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800626a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006276:	2303      	movs	r3, #3
 8006278:	e016      	b.n	80062a8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	7c1b      	ldrb	r3, [r3, #16]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d109      	bne.n	8006296 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800628c:	2101      	movs	r1, #1
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f001 fe28 	bl	8007ee4 <USBD_LL_PrepareReceive>
 8006294:	e007      	b.n	80062a6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800629c:	2340      	movs	r3, #64	; 0x40
 800629e:	2101      	movs	r1, #1
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f001 fe1f 	bl	8007ee4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	4613      	mov	r3, r2
 80062bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e01f      	b.n	8006308 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	79fa      	ldrb	r2, [r7, #7]
 80062fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f001 fc9b 	bl	8007c38 <USBD_LL_Init>
 8006302:	4603      	mov	r3, r0
 8006304:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006306:	7dfb      	ldrb	r3, [r7, #23]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006324:	2303      	movs	r3, #3
 8006326:	e016      	b.n	8006356 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00b      	beq.n	8006354 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	f107 020e 	add.w	r2, r7, #14
 8006348:	4610      	mov	r0, r2
 800634a:	4798      	blx	r3
 800634c:	4602      	mov	r2, r0
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b082      	sub	sp, #8
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f001 fcb2 	bl	8007cd0 <USBD_LL_Start>
 800636c:	4603      	mov	r3, r0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006398:	2303      	movs	r3, #3
 800639a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d009      	beq.n	80063ba <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	78fa      	ldrb	r2, [r7, #3]
 80063b0:	4611      	mov	r1, r2
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	4798      	blx	r3
 80063b6:	4603      	mov	r3, r0
 80063b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d007      	beq.n	80063ea <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	78fa      	ldrb	r2, [r7, #3]
 80063e4:	4611      	mov	r1, r2
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	4798      	blx	r3
  }

  return USBD_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	4618      	mov	r0, r3
 8006408:	f000 ff90 	bl	800732c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800641a:	461a      	mov	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006428:	f003 031f 	and.w	r3, r3, #31
 800642c:	2b02      	cmp	r3, #2
 800642e:	d01a      	beq.n	8006466 <USBD_LL_SetupStage+0x72>
 8006430:	2b02      	cmp	r3, #2
 8006432:	d822      	bhi.n	800647a <USBD_LL_SetupStage+0x86>
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <USBD_LL_SetupStage+0x4a>
 8006438:	2b01      	cmp	r3, #1
 800643a:	d00a      	beq.n	8006452 <USBD_LL_SetupStage+0x5e>
 800643c:	e01d      	b.n	800647a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fa62 	bl	8006910 <USBD_StdDevReq>
 800644c:	4603      	mov	r3, r0
 800644e:	73fb      	strb	r3, [r7, #15]
      break;
 8006450:	e020      	b.n	8006494 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006458:	4619      	mov	r1, r3
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fac6 	bl	80069ec <USBD_StdItfReq>
 8006460:	4603      	mov	r3, r0
 8006462:	73fb      	strb	r3, [r7, #15]
      break;
 8006464:	e016      	b.n	8006494 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fb05 	bl	8006a7e <USBD_StdEPReq>
 8006474:	4603      	mov	r3, r0
 8006476:	73fb      	strb	r3, [r7, #15]
      break;
 8006478:	e00c      	b.n	8006494 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006480:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006484:	b2db      	uxtb	r3, r3
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f001 fc81 	bl	8007d90 <USBD_LL_StallEP>
 800648e:	4603      	mov	r3, r0
 8006490:	73fb      	strb	r3, [r7, #15]
      break;
 8006492:	bf00      	nop
  }

  return ret;
 8006494:	7bfb      	ldrb	r3, [r7, #15]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b086      	sub	sp, #24
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	460b      	mov	r3, r1
 80064a8:	607a      	str	r2, [r7, #4]
 80064aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80064ac:	7afb      	ldrb	r3, [r7, #11]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d138      	bne.n	8006524 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80064b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d14a      	bne.n	800655a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d913      	bls.n	80064f8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	1ad2      	subs	r2, r2, r3
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	4293      	cmp	r3, r2
 80064e8:	bf28      	it	cs
 80064ea:	4613      	movcs	r3, r2
 80064ec:	461a      	mov	r2, r3
 80064ee:	6879      	ldr	r1, [r7, #4]
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f001 f80f 	bl	8007514 <USBD_CtlContinueRx>
 80064f6:	e030      	b.n	800655a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b03      	cmp	r3, #3
 8006502:	d10b      	bne.n	800651c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d005      	beq.n	800651c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f001 f80a 	bl	8007536 <USBD_CtlSendStatus>
 8006522:	e01a      	b.n	800655a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b03      	cmp	r3, #3
 800652e:	d114      	bne.n	800655a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00e      	beq.n	800655a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	7afa      	ldrb	r2, [r7, #11]
 8006546:	4611      	mov	r1, r2
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	4798      	blx	r3
 800654c:	4603      	mov	r3, r0
 800654e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006550:	7dfb      	ldrb	r3, [r7, #23]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006556:	7dfb      	ldrb	r3, [r7, #23]
 8006558:	e000      	b.n	800655c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	460b      	mov	r3, r1
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006572:	7afb      	ldrb	r3, [r7, #11]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d16b      	bne.n	8006650 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	3314      	adds	r3, #20
 800657c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006584:	2b02      	cmp	r3, #2
 8006586:	d156      	bne.n	8006636 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	429a      	cmp	r2, r3
 8006592:	d914      	bls.n	80065be <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	1ad2      	subs	r2, r2, r3
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	461a      	mov	r2, r3
 80065a8:	6879      	ldr	r1, [r7, #4]
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 ff84 	bl	80074b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065b0:	2300      	movs	r3, #0
 80065b2:	2200      	movs	r2, #0
 80065b4:	2100      	movs	r1, #0
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f001 fc94 	bl	8007ee4 <USBD_LL_PrepareReceive>
 80065bc:	e03b      	b.n	8006636 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d11c      	bne.n	8006604 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d316      	bcc.n	8006604 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d20f      	bcs.n	8006604 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80065e4:	2200      	movs	r2, #0
 80065e6:	2100      	movs	r1, #0
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 ff65 	bl	80074b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065f6:	2300      	movs	r3, #0
 80065f8:	2200      	movs	r2, #0
 80065fa:	2100      	movs	r1, #0
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f001 fc71 	bl	8007ee4 <USBD_LL_PrepareReceive>
 8006602:	e018      	b.n	8006636 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b03      	cmp	r3, #3
 800660e:	d10b      	bne.n	8006628 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d005      	beq.n	8006628 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006628:	2180      	movs	r1, #128	; 0x80
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f001 fbb0 	bl	8007d90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 ff93 	bl	800755c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800663c:	2b01      	cmp	r3, #1
 800663e:	d122      	bne.n	8006686 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f7ff fe98 	bl	8006376 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800664e:	e01a      	b.n	8006686 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b03      	cmp	r3, #3
 800665a:	d114      	bne.n	8006686 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00e      	beq.n	8006686 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	7afa      	ldrb	r2, [r7, #11]
 8006672:	4611      	mov	r1, r2
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	4798      	blx	r3
 8006678:	4603      	mov	r3, r0
 800667a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800667c:	7dfb      	ldrb	r3, [r7, #23]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006682:	7dfb      	ldrb	r3, [r7, #23]
 8006684:	e000      	b.n	8006688 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e02f      	b.n	8006724 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00f      	beq.n	80066ee <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d009      	beq.n	80066ee <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6852      	ldr	r2, [r2, #4]
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	4611      	mov	r1, r2
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066ee:	2340      	movs	r3, #64	; 0x40
 80066f0:	2200      	movs	r2, #0
 80066f2:	2100      	movs	r1, #0
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f001 fb06 	bl	8007d06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2240      	movs	r2, #64	; 0x40
 8006706:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800670a:	2340      	movs	r3, #64	; 0x40
 800670c:	2200      	movs	r2, #0
 800670e:	2180      	movs	r1, #128	; 0x80
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f001 faf8 	bl	8007d06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2240      	movs	r2, #64	; 0x40
 8006720:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	78fa      	ldrb	r2, [r7, #3]
 800673c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800675a:	b2da      	uxtb	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2204      	movs	r2, #4
 8006766:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b04      	cmp	r3, #4
 800678a:	d106      	bne.n	800679a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006792:	b2da      	uxtb	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e012      	b.n	80067e4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d10b      	bne.n	80067e2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d005      	beq.n	80067e2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006802:	2303      	movs	r3, #3
 8006804:	e014      	b.n	8006830 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b03      	cmp	r3, #3
 8006810:	d10d      	bne.n	800682e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d007      	beq.n	800682e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	78fa      	ldrb	r2, [r7, #3]
 8006828:	4611      	mov	r1, r2
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800684e:	2303      	movs	r3, #3
 8006850:	e014      	b.n	800687c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b03      	cmp	r3, #3
 800685c:	d10d      	bne.n	800687a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	2b00      	cmp	r3, #0
 8006868:	d007      	beq.n	800687a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006872:	78fa      	ldrb	r2, [r7, #3]
 8006874:	4611      	mov	r1, r2
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d009      	beq.n	80068c8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6852      	ldr	r2, [r2, #4]
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	4611      	mov	r1, r2
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	4798      	blx	r3
  }

  return USBD_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b087      	sub	sp, #28
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	3301      	adds	r3, #1
 80068e8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80068f0:	8a3b      	ldrh	r3, [r7, #16]
 80068f2:	021b      	lsls	r3, r3, #8
 80068f4:	b21a      	sxth	r2, r3
 80068f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	b21b      	sxth	r3, r3
 80068fe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006900:	89fb      	ldrh	r3, [r7, #14]
}
 8006902:	4618      	mov	r0, r3
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
	...

08006910 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006926:	2b40      	cmp	r3, #64	; 0x40
 8006928:	d005      	beq.n	8006936 <USBD_StdDevReq+0x26>
 800692a:	2b40      	cmp	r3, #64	; 0x40
 800692c:	d853      	bhi.n	80069d6 <USBD_StdDevReq+0xc6>
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00b      	beq.n	800694a <USBD_StdDevReq+0x3a>
 8006932:	2b20      	cmp	r3, #32
 8006934:	d14f      	bne.n	80069d6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	4798      	blx	r3
 8006944:	4603      	mov	r3, r0
 8006946:	73fb      	strb	r3, [r7, #15]
      break;
 8006948:	e04a      	b.n	80069e0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	785b      	ldrb	r3, [r3, #1]
 800694e:	2b09      	cmp	r3, #9
 8006950:	d83b      	bhi.n	80069ca <USBD_StdDevReq+0xba>
 8006952:	a201      	add	r2, pc, #4	; (adr r2, 8006958 <USBD_StdDevReq+0x48>)
 8006954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006958:	080069ad 	.word	0x080069ad
 800695c:	080069c1 	.word	0x080069c1
 8006960:	080069cb 	.word	0x080069cb
 8006964:	080069b7 	.word	0x080069b7
 8006968:	080069cb 	.word	0x080069cb
 800696c:	0800698b 	.word	0x0800698b
 8006970:	08006981 	.word	0x08006981
 8006974:	080069cb 	.word	0x080069cb
 8006978:	080069a3 	.word	0x080069a3
 800697c:	08006995 	.word	0x08006995
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f9de 	bl	8006d44 <USBD_GetDescriptor>
          break;
 8006988:	e024      	b.n	80069d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fb43 	bl	8007018 <USBD_SetAddress>
          break;
 8006992:	e01f      	b.n	80069d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006994:	6839      	ldr	r1, [r7, #0]
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fb82 	bl	80070a0 <USBD_SetConfig>
 800699c:	4603      	mov	r3, r0
 800699e:	73fb      	strb	r3, [r7, #15]
          break;
 80069a0:	e018      	b.n	80069d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fc21 	bl	80071ec <USBD_GetConfig>
          break;
 80069aa:	e013      	b.n	80069d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fc52 	bl	8007258 <USBD_GetStatus>
          break;
 80069b4:	e00e      	b.n	80069d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fc81 	bl	80072c0 <USBD_SetFeature>
          break;
 80069be:	e009      	b.n	80069d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fc90 	bl	80072e8 <USBD_ClrFeature>
          break;
 80069c8:	e004      	b.n	80069d4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fce7 	bl	80073a0 <USBD_CtlError>
          break;
 80069d2:	bf00      	nop
      }
      break;
 80069d4:	e004      	b.n	80069e0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80069d6:	6839      	ldr	r1, [r7, #0]
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fce1 	bl	80073a0 <USBD_CtlError>
      break;
 80069de:	bf00      	nop
  }

  return ret;
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop

080069ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a02:	2b40      	cmp	r3, #64	; 0x40
 8006a04:	d005      	beq.n	8006a12 <USBD_StdItfReq+0x26>
 8006a06:	2b40      	cmp	r3, #64	; 0x40
 8006a08:	d82f      	bhi.n	8006a6a <USBD_StdItfReq+0x7e>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <USBD_StdItfReq+0x26>
 8006a0e:	2b20      	cmp	r3, #32
 8006a10:	d12b      	bne.n	8006a6a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d81d      	bhi.n	8006a5c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	889b      	ldrh	r3, [r3, #4]
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d813      	bhi.n	8006a52 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	4798      	blx	r3
 8006a38:	4603      	mov	r3, r0
 8006a3a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	88db      	ldrh	r3, [r3, #6]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d110      	bne.n	8006a66 <USBD_StdItfReq+0x7a>
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10d      	bne.n	8006a66 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fd73 	bl	8007536 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a50:	e009      	b.n	8006a66 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fca3 	bl	80073a0 <USBD_CtlError>
          break;
 8006a5a:	e004      	b.n	8006a66 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fc9e 	bl	80073a0 <USBD_CtlError>
          break;
 8006a64:	e000      	b.n	8006a68 <USBD_StdItfReq+0x7c>
          break;
 8006a66:	bf00      	nop
      }
      break;
 8006a68:	e004      	b.n	8006a74 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fc97 	bl	80073a0 <USBD_CtlError>
      break;
 8006a72:	bf00      	nop
  }

  return ret;
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b084      	sub	sp, #16
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	889b      	ldrh	r3, [r3, #4]
 8006a90:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a9a:	2b40      	cmp	r3, #64	; 0x40
 8006a9c:	d007      	beq.n	8006aae <USBD_StdEPReq+0x30>
 8006a9e:	2b40      	cmp	r3, #64	; 0x40
 8006aa0:	f200 8145 	bhi.w	8006d2e <USBD_StdEPReq+0x2b0>
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00c      	beq.n	8006ac2 <USBD_StdEPReq+0x44>
 8006aa8:	2b20      	cmp	r3, #32
 8006aaa:	f040 8140 	bne.w	8006d2e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	4798      	blx	r3
 8006abc:	4603      	mov	r3, r0
 8006abe:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac0:	e13a      	b.n	8006d38 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	785b      	ldrb	r3, [r3, #1]
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d007      	beq.n	8006ada <USBD_StdEPReq+0x5c>
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	f300 8129 	bgt.w	8006d22 <USBD_StdEPReq+0x2a4>
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d07f      	beq.n	8006bd4 <USBD_StdEPReq+0x156>
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d03c      	beq.n	8006b52 <USBD_StdEPReq+0xd4>
 8006ad8:	e123      	b.n	8006d22 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d002      	beq.n	8006aec <USBD_StdEPReq+0x6e>
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d016      	beq.n	8006b18 <USBD_StdEPReq+0x9a>
 8006aea:	e02c      	b.n	8006b46 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006aec:	7bbb      	ldrb	r3, [r7, #14]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00d      	beq.n	8006b0e <USBD_StdEPReq+0x90>
 8006af2:	7bbb      	ldrb	r3, [r7, #14]
 8006af4:	2b80      	cmp	r3, #128	; 0x80
 8006af6:	d00a      	beq.n	8006b0e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006af8:	7bbb      	ldrb	r3, [r7, #14]
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 f947 	bl	8007d90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b02:	2180      	movs	r1, #128	; 0x80
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f001 f943 	bl	8007d90 <USBD_LL_StallEP>
 8006b0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b0c:	e020      	b.n	8006b50 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fc45 	bl	80073a0 <USBD_CtlError>
              break;
 8006b16:	e01b      	b.n	8006b50 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	885b      	ldrh	r3, [r3, #2]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10e      	bne.n	8006b3e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b20:	7bbb      	ldrb	r3, [r7, #14]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00b      	beq.n	8006b3e <USBD_StdEPReq+0xc0>
 8006b26:	7bbb      	ldrb	r3, [r7, #14]
 8006b28:	2b80      	cmp	r3, #128	; 0x80
 8006b2a:	d008      	beq.n	8006b3e <USBD_StdEPReq+0xc0>
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	88db      	ldrh	r3, [r3, #6]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d104      	bne.n	8006b3e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b34:	7bbb      	ldrb	r3, [r7, #14]
 8006b36:	4619      	mov	r1, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f001 f929 	bl	8007d90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fcf9 	bl	8007536 <USBD_CtlSendStatus>

              break;
 8006b44:	e004      	b.n	8006b50 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fc29 	bl	80073a0 <USBD_CtlError>
              break;
 8006b4e:	bf00      	nop
          }
          break;
 8006b50:	e0ec      	b.n	8006d2c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d002      	beq.n	8006b64 <USBD_StdEPReq+0xe6>
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d016      	beq.n	8006b90 <USBD_StdEPReq+0x112>
 8006b62:	e030      	b.n	8006bc6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b64:	7bbb      	ldrb	r3, [r7, #14]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00d      	beq.n	8006b86 <USBD_StdEPReq+0x108>
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	2b80      	cmp	r3, #128	; 0x80
 8006b6e:	d00a      	beq.n	8006b86 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b70:	7bbb      	ldrb	r3, [r7, #14]
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f001 f90b 	bl	8007d90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b7a:	2180      	movs	r1, #128	; 0x80
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 f907 	bl	8007d90 <USBD_LL_StallEP>
 8006b82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b84:	e025      	b.n	8006bd2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fc09 	bl	80073a0 <USBD_CtlError>
              break;
 8006b8e:	e020      	b.n	8006bd2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	885b      	ldrh	r3, [r3, #2]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d11b      	bne.n	8006bd0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b98:	7bbb      	ldrb	r3, [r7, #14]
 8006b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d004      	beq.n	8006bac <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 f911 	bl	8007dce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fcc2 	bl	8007536 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	4798      	blx	r3
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006bc4:	e004      	b.n	8006bd0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006bc6:	6839      	ldr	r1, [r7, #0]
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fbe9 	bl	80073a0 <USBD_CtlError>
              break;
 8006bce:	e000      	b.n	8006bd2 <USBD_StdEPReq+0x154>
              break;
 8006bd0:	bf00      	nop
          }
          break;
 8006bd2:	e0ab      	b.n	8006d2c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d002      	beq.n	8006be6 <USBD_StdEPReq+0x168>
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d032      	beq.n	8006c4a <USBD_StdEPReq+0x1cc>
 8006be4:	e097      	b.n	8006d16 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006be6:	7bbb      	ldrb	r3, [r7, #14]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d007      	beq.n	8006bfc <USBD_StdEPReq+0x17e>
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
 8006bee:	2b80      	cmp	r3, #128	; 0x80
 8006bf0:	d004      	beq.n	8006bfc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006bf2:	6839      	ldr	r1, [r7, #0]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fbd3 	bl	80073a0 <USBD_CtlError>
                break;
 8006bfa:	e091      	b.n	8006d20 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	da0b      	bge.n	8006c1c <USBD_StdEPReq+0x19e>
 8006c04:	7bbb      	ldrb	r3, [r7, #14]
 8006c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	3310      	adds	r3, #16
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	4413      	add	r3, r2
 8006c18:	3304      	adds	r3, #4
 8006c1a:	e00b      	b.n	8006c34 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c1c:	7bbb      	ldrb	r3, [r7, #14]
 8006c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c22:	4613      	mov	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	4413      	add	r3, r2
 8006c32:	3304      	adds	r3, #4
 8006c34:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fc1d 	bl	8007482 <USBD_CtlSendData>
              break;
 8006c48:	e06a      	b.n	8006d20 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	da11      	bge.n	8006c76 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c52:	7bbb      	ldrb	r3, [r7, #14]
 8006c54:	f003 020f 	and.w	r2, r3, #15
 8006c58:	6879      	ldr	r1, [r7, #4]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	440b      	add	r3, r1
 8006c64:	3324      	adds	r3, #36	; 0x24
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d117      	bne.n	8006c9c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fb96 	bl	80073a0 <USBD_CtlError>
                  break;
 8006c74:	e054      	b.n	8006d20 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
 8006c78:	f003 020f 	and.w	r2, r3, #15
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	440b      	add	r3, r1
 8006c88:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d104      	bne.n	8006c9c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fb83 	bl	80073a0 <USBD_CtlError>
                  break;
 8006c9a:	e041      	b.n	8006d20 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	da0b      	bge.n	8006cbc <USBD_StdEPReq+0x23e>
 8006ca4:	7bbb      	ldrb	r3, [r7, #14]
 8006ca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006caa:	4613      	mov	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	3310      	adds	r3, #16
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	3304      	adds	r3, #4
 8006cba:	e00b      	b.n	8006cd4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <USBD_StdEPReq+0x264>
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	2b80      	cmp	r3, #128	; 0x80
 8006ce0:	d103      	bne.n	8006cea <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	e00e      	b.n	8006d08 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006cea:	7bbb      	ldrb	r3, [r7, #14]
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f001 f88c 	bl	8007e0c <USBD_LL_IsStallEP>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	e002      	b.n	8006d08 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2200      	movs	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fbb7 	bl	8007482 <USBD_CtlSendData>
              break;
 8006d14:	e004      	b.n	8006d20 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fb41 	bl	80073a0 <USBD_CtlError>
              break;
 8006d1e:	bf00      	nop
          }
          break;
 8006d20:	e004      	b.n	8006d2c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fb3b 	bl	80073a0 <USBD_CtlError>
          break;
 8006d2a:	bf00      	nop
      }
      break;
 8006d2c:	e004      	b.n	8006d38 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fb35 	bl	80073a0 <USBD_CtlError>
      break;
 8006d36:	bf00      	nop
  }

  return ret;
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	885b      	ldrh	r3, [r3, #2]
 8006d5e:	0a1b      	lsrs	r3, r3, #8
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	3b01      	subs	r3, #1
 8006d64:	2b06      	cmp	r3, #6
 8006d66:	f200 8128 	bhi.w	8006fba <USBD_GetDescriptor+0x276>
 8006d6a:	a201      	add	r2, pc, #4	; (adr r2, 8006d70 <USBD_GetDescriptor+0x2c>)
 8006d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d70:	08006d8d 	.word	0x08006d8d
 8006d74:	08006da5 	.word	0x08006da5
 8006d78:	08006de5 	.word	0x08006de5
 8006d7c:	08006fbb 	.word	0x08006fbb
 8006d80:	08006fbb 	.word	0x08006fbb
 8006d84:	08006f5b 	.word	0x08006f5b
 8006d88:	08006f87 	.word	0x08006f87
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	7c12      	ldrb	r2, [r2, #16]
 8006d98:	f107 0108 	add.w	r1, r7, #8
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	4798      	blx	r3
 8006da0:	60f8      	str	r0, [r7, #12]
      break;
 8006da2:	e112      	b.n	8006fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	7c1b      	ldrb	r3, [r3, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10d      	bne.n	8006dc8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db4:	f107 0208 	add.w	r2, r7, #8
 8006db8:	4610      	mov	r0, r2
 8006dba:	4798      	blx	r3
 8006dbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006dc6:	e100      	b.n	8006fca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	f107 0208 	add.w	r2, r7, #8
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	4798      	blx	r3
 8006dd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	2202      	movs	r2, #2
 8006de0:	701a      	strb	r2, [r3, #0]
      break;
 8006de2:	e0f2      	b.n	8006fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	885b      	ldrh	r3, [r3, #2]
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b05      	cmp	r3, #5
 8006dec:	f200 80ac 	bhi.w	8006f48 <USBD_GetDescriptor+0x204>
 8006df0:	a201      	add	r2, pc, #4	; (adr r2, 8006df8 <USBD_GetDescriptor+0xb4>)
 8006df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df6:	bf00      	nop
 8006df8:	08006e11 	.word	0x08006e11
 8006dfc:	08006e45 	.word	0x08006e45
 8006e00:	08006e79 	.word	0x08006e79
 8006e04:	08006ead 	.word	0x08006ead
 8006e08:	08006ee1 	.word	0x08006ee1
 8006e0c:	08006f15 	.word	0x08006f15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00b      	beq.n	8006e34 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	7c12      	ldrb	r2, [r2, #16]
 8006e28:	f107 0108 	add.w	r1, r7, #8
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	4798      	blx	r3
 8006e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e32:	e091      	b.n	8006f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fab2 	bl	80073a0 <USBD_CtlError>
            err++;
 8006e3c:	7afb      	ldrb	r3, [r7, #11]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	72fb      	strb	r3, [r7, #11]
          break;
 8006e42:	e089      	b.n	8006f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00b      	beq.n	8006e68 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	7c12      	ldrb	r2, [r2, #16]
 8006e5c:	f107 0108 	add.w	r1, r7, #8
 8006e60:	4610      	mov	r0, r2
 8006e62:	4798      	blx	r3
 8006e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e66:	e077      	b.n	8006f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa98 	bl	80073a0 <USBD_CtlError>
            err++;
 8006e70:	7afb      	ldrb	r3, [r7, #11]
 8006e72:	3301      	adds	r3, #1
 8006e74:	72fb      	strb	r3, [r7, #11]
          break;
 8006e76:	e06f      	b.n	8006f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00b      	beq.n	8006e9c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	7c12      	ldrb	r2, [r2, #16]
 8006e90:	f107 0108 	add.w	r1, r7, #8
 8006e94:	4610      	mov	r0, r2
 8006e96:	4798      	blx	r3
 8006e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e9a:	e05d      	b.n	8006f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fa7e 	bl	80073a0 <USBD_CtlError>
            err++;
 8006ea4:	7afb      	ldrb	r3, [r7, #11]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eaa:	e055      	b.n	8006f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00b      	beq.n	8006ed0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	7c12      	ldrb	r2, [r2, #16]
 8006ec4:	f107 0108 	add.w	r1, r7, #8
 8006ec8:	4610      	mov	r0, r2
 8006eca:	4798      	blx	r3
 8006ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ece:	e043      	b.n	8006f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fa64 	bl	80073a0 <USBD_CtlError>
            err++;
 8006ed8:	7afb      	ldrb	r3, [r7, #11]
 8006eda:	3301      	adds	r3, #1
 8006edc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ede:	e03b      	b.n	8006f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00b      	beq.n	8006f04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	7c12      	ldrb	r2, [r2, #16]
 8006ef8:	f107 0108 	add.w	r1, r7, #8
 8006efc:	4610      	mov	r0, r2
 8006efe:	4798      	blx	r3
 8006f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f02:	e029      	b.n	8006f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fa4a 	bl	80073a0 <USBD_CtlError>
            err++;
 8006f0c:	7afb      	ldrb	r3, [r7, #11]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	72fb      	strb	r3, [r7, #11]
          break;
 8006f12:	e021      	b.n	8006f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00b      	beq.n	8006f38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	7c12      	ldrb	r2, [r2, #16]
 8006f2c:	f107 0108 	add.w	r1, r7, #8
 8006f30:	4610      	mov	r0, r2
 8006f32:	4798      	blx	r3
 8006f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f36:	e00f      	b.n	8006f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fa30 	bl	80073a0 <USBD_CtlError>
            err++;
 8006f40:	7afb      	ldrb	r3, [r7, #11]
 8006f42:	3301      	adds	r3, #1
 8006f44:	72fb      	strb	r3, [r7, #11]
          break;
 8006f46:	e007      	b.n	8006f58 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fa28 	bl	80073a0 <USBD_CtlError>
          err++;
 8006f50:	7afb      	ldrb	r3, [r7, #11]
 8006f52:	3301      	adds	r3, #1
 8006f54:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006f56:	bf00      	nop
      }
      break;
 8006f58:	e037      	b.n	8006fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	7c1b      	ldrb	r3, [r3, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d109      	bne.n	8006f76 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6a:	f107 0208 	add.w	r2, r7, #8
 8006f6e:	4610      	mov	r0, r2
 8006f70:	4798      	blx	r3
 8006f72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f74:	e029      	b.n	8006fca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fa11 	bl	80073a0 <USBD_CtlError>
        err++;
 8006f7e:	7afb      	ldrb	r3, [r7, #11]
 8006f80:	3301      	adds	r3, #1
 8006f82:	72fb      	strb	r3, [r7, #11]
      break;
 8006f84:	e021      	b.n	8006fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	7c1b      	ldrb	r3, [r3, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10d      	bne.n	8006faa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f96:	f107 0208 	add.w	r2, r7, #8
 8006f9a:	4610      	mov	r0, r2
 8006f9c:	4798      	blx	r3
 8006f9e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	2207      	movs	r2, #7
 8006fa6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fa8:	e00f      	b.n	8006fca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f9f7 	bl	80073a0 <USBD_CtlError>
        err++;
 8006fb2:	7afb      	ldrb	r3, [r7, #11]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	72fb      	strb	r3, [r7, #11]
      break;
 8006fb8:	e007      	b.n	8006fca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f9ef 	bl	80073a0 <USBD_CtlError>
      err++;
 8006fc2:	7afb      	ldrb	r3, [r7, #11]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	72fb      	strb	r3, [r7, #11]
      break;
 8006fc8:	bf00      	nop
  }

  if (err != 0U)
 8006fca:	7afb      	ldrb	r3, [r7, #11]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d11e      	bne.n	800700e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	88db      	ldrh	r3, [r3, #6]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d016      	beq.n	8007006 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006fd8:	893b      	ldrh	r3, [r7, #8]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00e      	beq.n	8006ffc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	88da      	ldrh	r2, [r3, #6]
 8006fe2:	893b      	ldrh	r3, [r7, #8]
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	bf28      	it	cs
 8006fe8:	4613      	movcs	r3, r2
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fee:	893b      	ldrh	r3, [r7, #8]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	68f9      	ldr	r1, [r7, #12]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fa44 	bl	8007482 <USBD_CtlSendData>
 8006ffa:	e009      	b.n	8007010 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f9ce 	bl	80073a0 <USBD_CtlError>
 8007004:	e004      	b.n	8007010 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fa95 	bl	8007536 <USBD_CtlSendStatus>
 800700c:	e000      	b.n	8007010 <USBD_GetDescriptor+0x2cc>
    return;
 800700e:	bf00      	nop
  }
}
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop

08007018 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	889b      	ldrh	r3, [r3, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d131      	bne.n	800708e <USBD_SetAddress+0x76>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	88db      	ldrh	r3, [r3, #6]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d12d      	bne.n	800708e <USBD_SetAddress+0x76>
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	885b      	ldrh	r3, [r3, #2]
 8007036:	2b7f      	cmp	r3, #127	; 0x7f
 8007038:	d829      	bhi.n	800708e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	885b      	ldrh	r3, [r3, #2]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007044:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b03      	cmp	r3, #3
 8007050:	d104      	bne.n	800705c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f9a3 	bl	80073a0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800705a:	e01d      	b.n	8007098 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	7bfa      	ldrb	r2, [r7, #15]
 8007060:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fefb 	bl	8007e64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fa61 	bl	8007536 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007074:	7bfb      	ldrb	r3, [r7, #15]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d004      	beq.n	8007084 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2202      	movs	r2, #2
 800707e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007082:	e009      	b.n	8007098 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800708c:	e004      	b.n	8007098 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f985 	bl	80073a0 <USBD_CtlError>
  }
}
 8007096:	bf00      	nop
 8007098:	bf00      	nop
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	885b      	ldrh	r3, [r3, #2]
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	4b4c      	ldr	r3, [pc, #304]	; (80071e8 <USBD_SetConfig+0x148>)
 80070b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80070b8:	4b4b      	ldr	r3, [pc, #300]	; (80071e8 <USBD_SetConfig+0x148>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d905      	bls.n	80070cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f96c 	bl	80073a0 <USBD_CtlError>
    return USBD_FAIL;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e088      	b.n	80071de <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d002      	beq.n	80070de <USBD_SetConfig+0x3e>
 80070d8:	2b03      	cmp	r3, #3
 80070da:	d025      	beq.n	8007128 <USBD_SetConfig+0x88>
 80070dc:	e071      	b.n	80071c2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80070de:	4b42      	ldr	r3, [pc, #264]	; (80071e8 <USBD_SetConfig+0x148>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d01c      	beq.n	8007120 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80070e6:	4b40      	ldr	r3, [pc, #256]	; (80071e8 <USBD_SetConfig+0x148>)
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070f0:	4b3d      	ldr	r3, [pc, #244]	; (80071e8 <USBD_SetConfig+0x148>)
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	4619      	mov	r1, r3
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff f948 	bl	800638c <USBD_SetClassConfig>
 80070fc:	4603      	mov	r3, r0
 80070fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007100:	7bfb      	ldrb	r3, [r7, #15]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d004      	beq.n	8007110 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f949 	bl	80073a0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800710e:	e065      	b.n	80071dc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fa10 	bl	8007536 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2203      	movs	r2, #3
 800711a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800711e:	e05d      	b.n	80071dc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fa08 	bl	8007536 <USBD_CtlSendStatus>
      break;
 8007126:	e059      	b.n	80071dc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007128:	4b2f      	ldr	r3, [pc, #188]	; (80071e8 <USBD_SetConfig+0x148>)
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d112      	bne.n	8007156 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2202      	movs	r2, #2
 8007134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007138:	4b2b      	ldr	r3, [pc, #172]	; (80071e8 <USBD_SetConfig+0x148>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	461a      	mov	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007142:	4b29      	ldr	r3, [pc, #164]	; (80071e8 <USBD_SetConfig+0x148>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff f93b 	bl	80063c4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f9f1 	bl	8007536 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007154:	e042      	b.n	80071dc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007156:	4b24      	ldr	r3, [pc, #144]	; (80071e8 <USBD_SetConfig+0x148>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	429a      	cmp	r2, r3
 8007162:	d02a      	beq.n	80071ba <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	b2db      	uxtb	r3, r3
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7ff f929 	bl	80063c4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007172:	4b1d      	ldr	r3, [pc, #116]	; (80071e8 <USBD_SetConfig+0x148>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800717c:	4b1a      	ldr	r3, [pc, #104]	; (80071e8 <USBD_SetConfig+0x148>)
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff f902 	bl	800638c <USBD_SetClassConfig>
 8007188:	4603      	mov	r3, r0
 800718a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800718c:	7bfb      	ldrb	r3, [r7, #15]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00f      	beq.n	80071b2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f903 	bl	80073a0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7ff f90e 	bl	80063c4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2202      	movs	r2, #2
 80071ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80071b0:	e014      	b.n	80071dc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f9bf 	bl	8007536 <USBD_CtlSendStatus>
      break;
 80071b8:	e010      	b.n	80071dc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f9bb 	bl	8007536 <USBD_CtlSendStatus>
      break;
 80071c0:	e00c      	b.n	80071dc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f8eb 	bl	80073a0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071ca:	4b07      	ldr	r3, [pc, #28]	; (80071e8 <USBD_SetConfig+0x148>)
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7ff f8f7 	bl	80063c4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80071d6:	2303      	movs	r3, #3
 80071d8:	73fb      	strb	r3, [r7, #15]
      break;
 80071da:	bf00      	nop
  }

  return ret;
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20000204 	.word	0x20000204

080071ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	88db      	ldrh	r3, [r3, #6]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d004      	beq.n	8007208 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f8cd 	bl	80073a0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007206:	e023      	b.n	8007250 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b02      	cmp	r3, #2
 8007212:	dc02      	bgt.n	800721a <USBD_GetConfig+0x2e>
 8007214:	2b00      	cmp	r3, #0
 8007216:	dc03      	bgt.n	8007220 <USBD_GetConfig+0x34>
 8007218:	e015      	b.n	8007246 <USBD_GetConfig+0x5a>
 800721a:	2b03      	cmp	r3, #3
 800721c:	d00b      	beq.n	8007236 <USBD_GetConfig+0x4a>
 800721e:	e012      	b.n	8007246 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	3308      	adds	r3, #8
 800722a:	2201      	movs	r2, #1
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f927 	bl	8007482 <USBD_CtlSendData>
        break;
 8007234:	e00c      	b.n	8007250 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	3304      	adds	r3, #4
 800723a:	2201      	movs	r2, #1
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f91f 	bl	8007482 <USBD_CtlSendData>
        break;
 8007244:	e004      	b.n	8007250 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f8a9 	bl	80073a0 <USBD_CtlError>
        break;
 800724e:	bf00      	nop
}
 8007250:	bf00      	nop
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007268:	b2db      	uxtb	r3, r3
 800726a:	3b01      	subs	r3, #1
 800726c:	2b02      	cmp	r3, #2
 800726e:	d81e      	bhi.n	80072ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	88db      	ldrh	r3, [r3, #6]
 8007274:	2b02      	cmp	r3, #2
 8007276:	d004      	beq.n	8007282 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f890 	bl	80073a0 <USBD_CtlError>
        break;
 8007280:	e01a      	b.n	80072b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800728e:	2b00      	cmp	r3, #0
 8007290:	d005      	beq.n	800729e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f043 0202 	orr.w	r2, r3, #2
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	330c      	adds	r3, #12
 80072a2:	2202      	movs	r2, #2
 80072a4:	4619      	mov	r1, r3
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f8eb 	bl	8007482 <USBD_CtlSendData>
      break;
 80072ac:	e004      	b.n	80072b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f875 	bl	80073a0 <USBD_CtlError>
      break;
 80072b6:	bf00      	nop
  }
}
 80072b8:	bf00      	nop
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	885b      	ldrh	r3, [r3, #2]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d106      	bne.n	80072e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f92b 	bl	8007536 <USBD_CtlSendStatus>
  }
}
 80072e0:	bf00      	nop
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	3b01      	subs	r3, #1
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d80b      	bhi.n	8007318 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	885b      	ldrh	r3, [r3, #2]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d10c      	bne.n	8007322 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f910 	bl	8007536 <USBD_CtlSendStatus>
      }
      break;
 8007316:	e004      	b.n	8007322 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f840 	bl	80073a0 <USBD_CtlError>
      break;
 8007320:	e000      	b.n	8007324 <USBD_ClrFeature+0x3c>
      break;
 8007322:	bf00      	nop
  }
}
 8007324:	bf00      	nop
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	781a      	ldrb	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	3301      	adds	r3, #1
 8007346:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	781a      	ldrb	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	3301      	adds	r3, #1
 8007354:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f7ff fabb 	bl	80068d2 <SWAPBYTE>
 800735c:	4603      	mov	r3, r0
 800735e:	461a      	mov	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	3301      	adds	r3, #1
 8007368:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3301      	adds	r3, #1
 800736e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f7ff faae 	bl	80068d2 <SWAPBYTE>
 8007376:	4603      	mov	r3, r0
 8007378:	461a      	mov	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3301      	adds	r3, #1
 8007382:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3301      	adds	r3, #1
 8007388:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f7ff faa1 	bl	80068d2 <SWAPBYTE>
 8007390:	4603      	mov	r3, r0
 8007392:	461a      	mov	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	80da      	strh	r2, [r3, #6]
}
 8007398:	bf00      	nop
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80073aa:	2180      	movs	r1, #128	; 0x80
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fcef 	bl	8007d90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80073b2:	2100      	movs	r1, #0
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fceb 	bl	8007d90 <USBD_LL_StallEP>
}
 80073ba:	bf00      	nop
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b086      	sub	sp, #24
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d036      	beq.n	8007446 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80073dc:	6938      	ldr	r0, [r7, #16]
 80073de:	f000 f836 	bl	800744e <USBD_GetLen>
 80073e2:	4603      	mov	r3, r0
 80073e4:	3301      	adds	r3, #1
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80073f0:	7dfb      	ldrb	r3, [r7, #23]
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	4413      	add	r3, r2
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	7812      	ldrb	r2, [r2, #0]
 80073fa:	701a      	strb	r2, [r3, #0]
  idx++;
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
 80073fe:	3301      	adds	r3, #1
 8007400:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007402:	7dfb      	ldrb	r3, [r7, #23]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	4413      	add	r3, r2
 8007408:	2203      	movs	r2, #3
 800740a:	701a      	strb	r2, [r3, #0]
  idx++;
 800740c:	7dfb      	ldrb	r3, [r7, #23]
 800740e:	3301      	adds	r3, #1
 8007410:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007412:	e013      	b.n	800743c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007414:	7dfb      	ldrb	r3, [r7, #23]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	4413      	add	r3, r2
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	7812      	ldrb	r2, [r2, #0]
 800741e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	3301      	adds	r3, #1
 8007424:	613b      	str	r3, [r7, #16]
    idx++;
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	3301      	adds	r3, #1
 800742a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800742c:	7dfb      	ldrb	r3, [r7, #23]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	4413      	add	r3, r2
 8007432:	2200      	movs	r2, #0
 8007434:	701a      	strb	r2, [r3, #0]
    idx++;
 8007436:	7dfb      	ldrb	r3, [r7, #23]
 8007438:	3301      	adds	r3, #1
 800743a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1e7      	bne.n	8007414 <USBD_GetString+0x52>
 8007444:	e000      	b.n	8007448 <USBD_GetString+0x86>
    return;
 8007446:	bf00      	nop
  }
}
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800744e:	b480      	push	{r7}
 8007450:	b085      	sub	sp, #20
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800745e:	e005      	b.n	800746c <USBD_GetLen+0x1e>
  {
    len++;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	3301      	adds	r3, #1
 8007464:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	3301      	adds	r3, #1
 800746a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1f5      	bne.n	8007460 <USBD_GetLen+0x12>
  }

  return len;
 8007474:	7bfb      	ldrb	r3, [r7, #15]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b084      	sub	sp, #16
 8007486:	af00      	add	r7, sp, #0
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2202      	movs	r2, #2
 8007492:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	2100      	movs	r1, #0
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 fcfa 	bl	8007ea2 <USBD_LL_Transmit>

  return USBD_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	2100      	movs	r1, #0
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 fce9 	bl	8007ea2 <USBD_LL_Transmit>

  return USBD_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2203      	movs	r2, #3
 80074ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	2100      	movs	r1, #0
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 fced 	bl	8007ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	2100      	movs	r1, #0
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 fcdc 	bl	8007ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b082      	sub	sp, #8
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2204      	movs	r2, #4
 8007542:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007546:	2300      	movs	r3, #0
 8007548:	2200      	movs	r2, #0
 800754a:	2100      	movs	r1, #0
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fca8 	bl	8007ea2 <USBD_LL_Transmit>

  return USBD_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2205      	movs	r2, #5
 8007568:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800756c:	2300      	movs	r3, #0
 800756e:	2200      	movs	r2, #0
 8007570:	2100      	movs	r1, #0
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fcb6 	bl	8007ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007588:	2200      	movs	r2, #0
 800758a:	4912      	ldr	r1, [pc, #72]	; (80075d4 <MX_USB_DEVICE_Init+0x50>)
 800758c:	4812      	ldr	r0, [pc, #72]	; (80075d8 <MX_USB_DEVICE_Init+0x54>)
 800758e:	f7fe fe8f 	bl	80062b0 <USBD_Init>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007598:	f7f9 fa8a 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800759c:	490f      	ldr	r1, [pc, #60]	; (80075dc <MX_USB_DEVICE_Init+0x58>)
 800759e:	480e      	ldr	r0, [pc, #56]	; (80075d8 <MX_USB_DEVICE_Init+0x54>)
 80075a0:	f7fe feb6 	bl	8006310 <USBD_RegisterClass>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80075aa:	f7f9 fa81 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80075ae:	490c      	ldr	r1, [pc, #48]	; (80075e0 <MX_USB_DEVICE_Init+0x5c>)
 80075b0:	4809      	ldr	r0, [pc, #36]	; (80075d8 <MX_USB_DEVICE_Init+0x54>)
 80075b2:	f7fe fdd7 	bl	8006164 <USBD_CDC_RegisterInterface>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80075bc:	f7f9 fa78 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80075c0:	4805      	ldr	r0, [pc, #20]	; (80075d8 <MX_USB_DEVICE_Init+0x54>)
 80075c2:	f7fe fecc 	bl	800635e <USBD_Start>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80075cc:	f7f9 fa70 	bl	8000ab0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80075d0:	bf00      	nop
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	20000130 	.word	0x20000130
 80075d8:	20000570 	.word	0x20000570
 80075dc:	20000018 	.word	0x20000018
 80075e0:	2000011c 	.word	0x2000011c

080075e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80075e8:	2200      	movs	r2, #0
 80075ea:	4905      	ldr	r1, [pc, #20]	; (8007600 <CDC_Init_FS+0x1c>)
 80075ec:	4805      	ldr	r0, [pc, #20]	; (8007604 <CDC_Init_FS+0x20>)
 80075ee:	f7fe fdce 	bl	800618e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80075f2:	4905      	ldr	r1, [pc, #20]	; (8007608 <CDC_Init_FS+0x24>)
 80075f4:	4803      	ldr	r0, [pc, #12]	; (8007604 <CDC_Init_FS+0x20>)
 80075f6:	f7fe fde8 	bl	80061ca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80075fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	20001040 	.word	0x20001040
 8007604:	20000570 	.word	0x20000570
 8007608:	20000840 	.word	0x20000840

0800760c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800760c:	b480      	push	{r7}
 800760e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007610:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007612:	4618      	mov	r0, r3
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	4603      	mov	r3, r0
 8007624:	6039      	str	r1, [r7, #0]
 8007626:	71fb      	strb	r3, [r7, #7]
 8007628:	4613      	mov	r3, r2
 800762a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800762c:	79fb      	ldrb	r3, [r7, #7]
 800762e:	2b23      	cmp	r3, #35	; 0x23
 8007630:	d84a      	bhi.n	80076c8 <CDC_Control_FS+0xac>
 8007632:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <CDC_Control_FS+0x1c>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	080076c9 	.word	0x080076c9
 800763c:	080076c9 	.word	0x080076c9
 8007640:	080076c9 	.word	0x080076c9
 8007644:	080076c9 	.word	0x080076c9
 8007648:	080076c9 	.word	0x080076c9
 800764c:	080076c9 	.word	0x080076c9
 8007650:	080076c9 	.word	0x080076c9
 8007654:	080076c9 	.word	0x080076c9
 8007658:	080076c9 	.word	0x080076c9
 800765c:	080076c9 	.word	0x080076c9
 8007660:	080076c9 	.word	0x080076c9
 8007664:	080076c9 	.word	0x080076c9
 8007668:	080076c9 	.word	0x080076c9
 800766c:	080076c9 	.word	0x080076c9
 8007670:	080076c9 	.word	0x080076c9
 8007674:	080076c9 	.word	0x080076c9
 8007678:	080076c9 	.word	0x080076c9
 800767c:	080076c9 	.word	0x080076c9
 8007680:	080076c9 	.word	0x080076c9
 8007684:	080076c9 	.word	0x080076c9
 8007688:	080076c9 	.word	0x080076c9
 800768c:	080076c9 	.word	0x080076c9
 8007690:	080076c9 	.word	0x080076c9
 8007694:	080076c9 	.word	0x080076c9
 8007698:	080076c9 	.word	0x080076c9
 800769c:	080076c9 	.word	0x080076c9
 80076a0:	080076c9 	.word	0x080076c9
 80076a4:	080076c9 	.word	0x080076c9
 80076a8:	080076c9 	.word	0x080076c9
 80076ac:	080076c9 	.word	0x080076c9
 80076b0:	080076c9 	.word	0x080076c9
 80076b4:	080076c9 	.word	0x080076c9
 80076b8:	080076c9 	.word	0x080076c9
 80076bc:	080076c9 	.word	0x080076c9
 80076c0:	080076c9 	.word	0x080076c9
 80076c4:	080076c9 	.word	0x080076c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80076c8:	bf00      	nop
  }

  return (USBD_OK);
 80076ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80076e2:	6879      	ldr	r1, [r7, #4]
 80076e4:	4805      	ldr	r0, [pc, #20]	; (80076fc <CDC_Receive_FS+0x24>)
 80076e6:	f7fe fd70 	bl	80061ca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80076ea:	4804      	ldr	r0, [pc, #16]	; (80076fc <CDC_Receive_FS+0x24>)
 80076ec:	f7fe fdb6 	bl	800625c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80076f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	20000570 	.word	0x20000570

08007700 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800770c:	2300      	movs	r3, #0
 800770e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007710:	4b0d      	ldr	r3, [pc, #52]	; (8007748 <CDC_Transmit_FS+0x48>)
 8007712:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007716:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007722:	2301      	movs	r3, #1
 8007724:	e00b      	b.n	800773e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007726:	887b      	ldrh	r3, [r7, #2]
 8007728:	461a      	mov	r2, r3
 800772a:	6879      	ldr	r1, [r7, #4]
 800772c:	4806      	ldr	r0, [pc, #24]	; (8007748 <CDC_Transmit_FS+0x48>)
 800772e:	f7fe fd2e 	bl	800618e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007732:	4805      	ldr	r0, [pc, #20]	; (8007748 <CDC_Transmit_FS+0x48>)
 8007734:	f7fe fd62 	bl	80061fc <USBD_CDC_TransmitPacket>
 8007738:	4603      	mov	r3, r0
 800773a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800773c:	7bfb      	ldrb	r3, [r7, #15]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	20000570 	.word	0x20000570

0800774c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	4613      	mov	r3, r2
 8007758:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800775e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007762:	4618      	mov	r0, r3
 8007764:	371c      	adds	r7, #28
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
	...

08007770 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	4603      	mov	r3, r0
 8007778:	6039      	str	r1, [r7, #0]
 800777a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2212      	movs	r2, #18
 8007780:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007782:	4b03      	ldr	r3, [pc, #12]	; (8007790 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007784:	4618      	mov	r0, r3
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	2000014c 	.word	0x2000014c

08007794 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	6039      	str	r1, [r7, #0]
 800779e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2204      	movs	r2, #4
 80077a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077a6:	4b03      	ldr	r3, [pc, #12]	; (80077b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	20000160 	.word	0x20000160

080077b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	4603      	mov	r3, r0
 80077c0:	6039      	str	r1, [r7, #0]
 80077c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077c4:	79fb      	ldrb	r3, [r7, #7]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d105      	bne.n	80077d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	4907      	ldr	r1, [pc, #28]	; (80077ec <USBD_FS_ProductStrDescriptor+0x34>)
 80077ce:	4808      	ldr	r0, [pc, #32]	; (80077f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80077d0:	f7ff fdf7 	bl	80073c2 <USBD_GetString>
 80077d4:	e004      	b.n	80077e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	4904      	ldr	r1, [pc, #16]	; (80077ec <USBD_FS_ProductStrDescriptor+0x34>)
 80077da:	4805      	ldr	r0, [pc, #20]	; (80077f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80077dc:	f7ff fdf1 	bl	80073c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077e0:	4b02      	ldr	r3, [pc, #8]	; (80077ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	20001840 	.word	0x20001840
 80077f0:	080088e4 	.word	0x080088e4

080077f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	6039      	str	r1, [r7, #0]
 80077fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	4904      	ldr	r1, [pc, #16]	; (8007814 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007804:	4804      	ldr	r0, [pc, #16]	; (8007818 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007806:	f7ff fddc 	bl	80073c2 <USBD_GetString>
  return USBD_StrDesc;
 800780a:	4b02      	ldr	r3, [pc, #8]	; (8007814 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	20001840 	.word	0x20001840
 8007818:	080088fc 	.word	0x080088fc

0800781c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	4603      	mov	r3, r0
 8007824:	6039      	str	r1, [r7, #0]
 8007826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	221a      	movs	r2, #26
 800782c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800782e:	f000 f843 	bl	80078b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007832:	4b02      	ldr	r3, [pc, #8]	; (800783c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	20000164 	.word	0x20000164

08007840 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	4603      	mov	r3, r0
 8007848:	6039      	str	r1, [r7, #0]
 800784a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800784c:	79fb      	ldrb	r3, [r7, #7]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d105      	bne.n	800785e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	4907      	ldr	r1, [pc, #28]	; (8007874 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007856:	4808      	ldr	r0, [pc, #32]	; (8007878 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007858:	f7ff fdb3 	bl	80073c2 <USBD_GetString>
 800785c:	e004      	b.n	8007868 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	4904      	ldr	r1, [pc, #16]	; (8007874 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007862:	4805      	ldr	r0, [pc, #20]	; (8007878 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007864:	f7ff fdad 	bl	80073c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007868:	4b02      	ldr	r3, [pc, #8]	; (8007874 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800786a:	4618      	mov	r0, r3
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	20001840 	.word	0x20001840
 8007878:	08008910 	.word	0x08008910

0800787c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	4603      	mov	r3, r0
 8007884:	6039      	str	r1, [r7, #0]
 8007886:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007888:	79fb      	ldrb	r3, [r7, #7]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d105      	bne.n	800789a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	4907      	ldr	r1, [pc, #28]	; (80078b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007892:	4808      	ldr	r0, [pc, #32]	; (80078b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007894:	f7ff fd95 	bl	80073c2 <USBD_GetString>
 8007898:	e004      	b.n	80078a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	4904      	ldr	r1, [pc, #16]	; (80078b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800789e:	4805      	ldr	r0, [pc, #20]	; (80078b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078a0:	f7ff fd8f 	bl	80073c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078a4:	4b02      	ldr	r3, [pc, #8]	; (80078b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20001840 	.word	0x20001840
 80078b4:	0800891c 	.word	0x0800891c

080078b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078be:	4b0f      	ldr	r3, [pc, #60]	; (80078fc <Get_SerialNum+0x44>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078c4:	4b0e      	ldr	r3, [pc, #56]	; (8007900 <Get_SerialNum+0x48>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80078ca:	4b0e      	ldr	r3, [pc, #56]	; (8007904 <Get_SerialNum+0x4c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4413      	add	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d009      	beq.n	80078f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80078de:	2208      	movs	r2, #8
 80078e0:	4909      	ldr	r1, [pc, #36]	; (8007908 <Get_SerialNum+0x50>)
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 f814 	bl	8007910 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80078e8:	2204      	movs	r2, #4
 80078ea:	4908      	ldr	r1, [pc, #32]	; (800790c <Get_SerialNum+0x54>)
 80078ec:	68b8      	ldr	r0, [r7, #8]
 80078ee:	f000 f80f 	bl	8007910 <IntToUnicode>
  }
}
 80078f2:	bf00      	nop
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	1fff7a10 	.word	0x1fff7a10
 8007900:	1fff7a14 	.word	0x1fff7a14
 8007904:	1fff7a18 	.word	0x1fff7a18
 8007908:	20000166 	.word	0x20000166
 800790c:	20000176 	.word	0x20000176

08007910 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007910:	b480      	push	{r7}
 8007912:	b087      	sub	sp, #28
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	4613      	mov	r3, r2
 800791c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007922:	2300      	movs	r3, #0
 8007924:	75fb      	strb	r3, [r7, #23]
 8007926:	e027      	b.n	8007978 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	0f1b      	lsrs	r3, r3, #28
 800792c:	2b09      	cmp	r3, #9
 800792e:	d80b      	bhi.n	8007948 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	0f1b      	lsrs	r3, r3, #28
 8007934:	b2da      	uxtb	r2, r3
 8007936:	7dfb      	ldrb	r3, [r7, #23]
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	4619      	mov	r1, r3
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	440b      	add	r3, r1
 8007940:	3230      	adds	r2, #48	; 0x30
 8007942:	b2d2      	uxtb	r2, r2
 8007944:	701a      	strb	r2, [r3, #0]
 8007946:	e00a      	b.n	800795e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	0f1b      	lsrs	r3, r3, #28
 800794c:	b2da      	uxtb	r2, r3
 800794e:	7dfb      	ldrb	r3, [r7, #23]
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	4619      	mov	r1, r3
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	440b      	add	r3, r1
 8007958:	3237      	adds	r2, #55	; 0x37
 800795a:	b2d2      	uxtb	r2, r2
 800795c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	011b      	lsls	r3, r3, #4
 8007962:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007964:	7dfb      	ldrb	r3, [r7, #23]
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	3301      	adds	r3, #1
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	4413      	add	r3, r2
 800796e:	2200      	movs	r2, #0
 8007970:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007972:	7dfb      	ldrb	r3, [r7, #23]
 8007974:	3301      	adds	r3, #1
 8007976:	75fb      	strb	r3, [r7, #23]
 8007978:	7dfa      	ldrb	r2, [r7, #23]
 800797a:	79fb      	ldrb	r3, [r7, #7]
 800797c:	429a      	cmp	r2, r3
 800797e:	d3d3      	bcc.n	8007928 <IntToUnicode+0x18>
  }
}
 8007980:	bf00      	nop
 8007982:	bf00      	nop
 8007984:	371c      	adds	r7, #28
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
	...

08007990 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b08a      	sub	sp, #40	; 0x28
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007998:	f107 0314 	add.w	r3, r7, #20
 800799c:	2200      	movs	r2, #0
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	605a      	str	r2, [r3, #4]
 80079a2:	609a      	str	r2, [r3, #8]
 80079a4:	60da      	str	r2, [r3, #12]
 80079a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079b0:	d147      	bne.n	8007a42 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079b2:	2300      	movs	r3, #0
 80079b4:	613b      	str	r3, [r7, #16]
 80079b6:	4b25      	ldr	r3, [pc, #148]	; (8007a4c <HAL_PCD_MspInit+0xbc>)
 80079b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ba:	4a24      	ldr	r2, [pc, #144]	; (8007a4c <HAL_PCD_MspInit+0xbc>)
 80079bc:	f043 0301 	orr.w	r3, r3, #1
 80079c0:	6313      	str	r3, [r2, #48]	; 0x30
 80079c2:	4b22      	ldr	r3, [pc, #136]	; (8007a4c <HAL_PCD_MspInit+0xbc>)
 80079c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	613b      	str	r3, [r7, #16]
 80079cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80079ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079d4:	2300      	movs	r3, #0
 80079d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079d8:	2300      	movs	r3, #0
 80079da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80079dc:	f107 0314 	add.w	r3, r7, #20
 80079e0:	4619      	mov	r1, r3
 80079e2:	481b      	ldr	r0, [pc, #108]	; (8007a50 <HAL_PCD_MspInit+0xc0>)
 80079e4:	f7f9 fe7e 	bl	80016e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80079e8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80079ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079ee:	2302      	movs	r3, #2
 80079f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079f6:	2300      	movs	r3, #0
 80079f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80079fa:	230a      	movs	r3, #10
 80079fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079fe:	f107 0314 	add.w	r3, r7, #20
 8007a02:	4619      	mov	r1, r3
 8007a04:	4812      	ldr	r0, [pc, #72]	; (8007a50 <HAL_PCD_MspInit+0xc0>)
 8007a06:	f7f9 fe6d 	bl	80016e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a0a:	4b10      	ldr	r3, [pc, #64]	; (8007a4c <HAL_PCD_MspInit+0xbc>)
 8007a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a0e:	4a0f      	ldr	r2, [pc, #60]	; (8007a4c <HAL_PCD_MspInit+0xbc>)
 8007a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a14:	6353      	str	r3, [r2, #52]	; 0x34
 8007a16:	2300      	movs	r3, #0
 8007a18:	60fb      	str	r3, [r7, #12]
 8007a1a:	4b0c      	ldr	r3, [pc, #48]	; (8007a4c <HAL_PCD_MspInit+0xbc>)
 8007a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1e:	4a0b      	ldr	r2, [pc, #44]	; (8007a4c <HAL_PCD_MspInit+0xbc>)
 8007a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a24:	6453      	str	r3, [r2, #68]	; 0x44
 8007a26:	4b09      	ldr	r3, [pc, #36]	; (8007a4c <HAL_PCD_MspInit+0xbc>)
 8007a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a32:	2200      	movs	r2, #0
 8007a34:	2100      	movs	r1, #0
 8007a36:	2043      	movs	r0, #67	; 0x43
 8007a38:	f7f9 fe1d 	bl	8001676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a3c:	2043      	movs	r0, #67	; 0x43
 8007a3e:	f7f9 fe36 	bl	80016ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a42:	bf00      	nop
 8007a44:	3728      	adds	r7, #40	; 0x28
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	40023800 	.word	0x40023800
 8007a50:	40020000 	.word	0x40020000

08007a54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	f7fe fcc2 	bl	80063f4 <USBD_LL_SetupStage>
}
 8007a70:	bf00      	nop
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	460b      	mov	r3, r1
 8007a82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007a8a:	78fa      	ldrb	r2, [r7, #3]
 8007a8c:	6879      	ldr	r1, [r7, #4]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	00db      	lsls	r3, r3, #3
 8007a92:	1a9b      	subs	r3, r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	440b      	add	r3, r1
 8007a98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	78fb      	ldrb	r3, [r7, #3]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	f7fe fcfc 	bl	800649e <USBD_LL_DataOutStage>
}
 8007aa6:	bf00      	nop
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b082      	sub	sp, #8
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007ac0:	78fa      	ldrb	r2, [r7, #3]
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	00db      	lsls	r3, r3, #3
 8007ac8:	1a9b      	subs	r3, r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	440b      	add	r3, r1
 8007ace:	3348      	adds	r3, #72	; 0x48
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	78fb      	ldrb	r3, [r7, #3]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	f7fe fd45 	bl	8006564 <USBD_LL_DataInStage>
}
 8007ada:	bf00      	nop
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b082      	sub	sp, #8
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7fe fe59 	bl	80067a8 <USBD_LL_SOF>
}
 8007af6:	bf00      	nop
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b06:	2301      	movs	r3, #1
 8007b08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007b12:	2300      	movs	r3, #0
 8007b14:	73fb      	strb	r3, [r7, #15]
 8007b16:	e008      	b.n	8007b2a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d102      	bne.n	8007b26 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007b20:	2301      	movs	r3, #1
 8007b22:	73fb      	strb	r3, [r7, #15]
 8007b24:	e001      	b.n	8007b2a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007b26:	f7f8 ffc3 	bl	8000ab0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b30:	7bfa      	ldrb	r2, [r7, #15]
 8007b32:	4611      	mov	r1, r2
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fe fdf9 	bl	800672c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fe fda5 	bl	8006690 <USBD_LL_Reset>
}
 8007b46:	bf00      	nop
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe fdf4 	bl	800674c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	6812      	ldr	r2, [r2, #0]
 8007b72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b76:	f043 0301 	orr.w	r3, r3, #1
 8007b7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d005      	beq.n	8007b90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b84:	4b04      	ldr	r3, [pc, #16]	; (8007b98 <HAL_PCD_SuspendCallback+0x48>)
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	4a03      	ldr	r2, [pc, #12]	; (8007b98 <HAL_PCD_SuspendCallback+0x48>)
 8007b8a:	f043 0306 	orr.w	r3, r3, #6
 8007b8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	e000ed00 	.word	0xe000ed00

08007b9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fe fde4 	bl	8006778 <USBD_LL_Resume>
}
 8007bb0:	bf00      	nop
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bca:	78fa      	ldrb	r2, [r7, #3]
 8007bcc:	4611      	mov	r1, r2
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fe fe32 	bl	8006838 <USBD_LL_IsoOUTIncomplete>
}
 8007bd4:	bf00      	nop
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bee:	78fa      	ldrb	r2, [r7, #3]
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fe fdfa 	bl	80067ec <USBD_LL_IsoINIncomplete>
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fe fe38 	bl	8006884 <USBD_LL_DevConnected>
}
 8007c14:	bf00      	nop
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fe fe35 	bl	800689a <USBD_LL_DevDisconnected>
}
 8007c30:	bf00      	nop
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d13c      	bne.n	8007cc2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007c48:	4a20      	ldr	r2, [pc, #128]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a1e      	ldr	r2, [pc, #120]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c54:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007c58:	4b1c      	ldr	r3, [pc, #112]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007c5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007c60:	4b1a      	ldr	r3, [pc, #104]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c62:	2204      	movs	r2, #4
 8007c64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007c66:	4b19      	ldr	r3, [pc, #100]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c68:	2202      	movs	r2, #2
 8007c6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c6c:	4b17      	ldr	r3, [pc, #92]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c72:	4b16      	ldr	r3, [pc, #88]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c74:	2202      	movs	r2, #2
 8007c76:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c78:	4b14      	ldr	r3, [pc, #80]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c7e:	4b13      	ldr	r3, [pc, #76]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c84:	4b11      	ldr	r3, [pc, #68]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007c8a:	4b10      	ldr	r3, [pc, #64]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007c90:	4b0e      	ldr	r3, [pc, #56]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c96:	480d      	ldr	r0, [pc, #52]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c98:	f7fa fcbe 	bl	8002618 <HAL_PCD_Init>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007ca2:	f7f8 ff05 	bl	8000ab0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ca6:	2180      	movs	r1, #128	; 0x80
 8007ca8:	4808      	ldr	r0, [pc, #32]	; (8007ccc <USBD_LL_Init+0x94>)
 8007caa:	f7fb fe1c 	bl	80038e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007cae:	2240      	movs	r2, #64	; 0x40
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	4806      	ldr	r0, [pc, #24]	; (8007ccc <USBD_LL_Init+0x94>)
 8007cb4:	f7fb fdd0 	bl	8003858 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007cb8:	2280      	movs	r2, #128	; 0x80
 8007cba:	2101      	movs	r1, #1
 8007cbc:	4803      	ldr	r0, [pc, #12]	; (8007ccc <USBD_LL_Init+0x94>)
 8007cbe:	f7fb fdcb 	bl	8003858 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	20001a40 	.word	0x20001a40

08007cd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fa fdb3 	bl	8002852 <HAL_PCD_Start>
 8007cec:	4603      	mov	r3, r0
 8007cee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 f942 	bl	8007f7c <USBD_Get_USB_Status>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b084      	sub	sp, #16
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	4608      	mov	r0, r1
 8007d10:	4611      	mov	r1, r2
 8007d12:	461a      	mov	r2, r3
 8007d14:	4603      	mov	r3, r0
 8007d16:	70fb      	strb	r3, [r7, #3]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	70bb      	strb	r3, [r7, #2]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d2e:	78bb      	ldrb	r3, [r7, #2]
 8007d30:	883a      	ldrh	r2, [r7, #0]
 8007d32:	78f9      	ldrb	r1, [r7, #3]
 8007d34:	f7fb f997 	bl	8003066 <HAL_PCD_EP_Open>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 f91c 	bl	8007f7c <USBD_Get_USB_Status>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d6c:	78fa      	ldrb	r2, [r7, #3]
 8007d6e:	4611      	mov	r1, r2
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fb f9e0 	bl	8003136 <HAL_PCD_EP_Close>
 8007d76:	4603      	mov	r3, r0
 8007d78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 f8fd 	bl	8007f7c <USBD_Get_USB_Status>
 8007d82:	4603      	mov	r3, r0
 8007d84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d86:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007daa:	78fa      	ldrb	r2, [r7, #3]
 8007dac:	4611      	mov	r1, r2
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fb fab8 	bl	8003324 <HAL_PCD_EP_SetStall>
 8007db4:	4603      	mov	r3, r0
 8007db6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 f8de 	bl	8007f7c <USBD_Get_USB_Status>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007de8:	78fa      	ldrb	r2, [r7, #3]
 8007dea:	4611      	mov	r1, r2
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fb fafd 	bl	80033ec <HAL_PCD_EP_ClrStall>
 8007df2:	4603      	mov	r3, r0
 8007df4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 f8bf 	bl	8007f7c <USBD_Get_USB_Status>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e02:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	da0b      	bge.n	8007e40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e2e:	68f9      	ldr	r1, [r7, #12]
 8007e30:	4613      	mov	r3, r2
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	1a9b      	subs	r3, r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	440b      	add	r3, r1
 8007e3a:	333e      	adds	r3, #62	; 0x3e
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	e00b      	b.n	8007e58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e46:	68f9      	ldr	r1, [r7, #12]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	00db      	lsls	r3, r3, #3
 8007e4c:	1a9b      	subs	r3, r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	440b      	add	r3, r1
 8007e52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e7e:	78fa      	ldrb	r2, [r7, #3]
 8007e80:	4611      	mov	r1, r2
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fb f8ca 	bl	800301c <HAL_PCD_SetAddress>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 f874 	bl	8007f7c <USBD_Get_USB_Status>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b086      	sub	sp, #24
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	603b      	str	r3, [r7, #0]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ec0:	7af9      	ldrb	r1, [r7, #11]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	f7fb f9e3 	bl	8003290 <HAL_PCD_EP_Transmit>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 f853 	bl	8007f7c <USBD_Get_USB_Status>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007eda:	7dbb      	ldrb	r3, [r7, #22]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	607a      	str	r2, [r7, #4]
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f02:	7af9      	ldrb	r1, [r7, #11]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	f7fb f95f 	bl	80031ca <HAL_PCD_EP_Receive>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 f832 	bl	8007f7c <USBD_Get_USB_Status>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f1c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b082      	sub	sp, #8
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f38:	78fa      	ldrb	r2, [r7, #3]
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fb f98f 	bl	8003260 <HAL_PCD_EP_GetRxCount>
 8007f42:	4603      	mov	r3, r0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f54:	4b03      	ldr	r3, [pc, #12]	; (8007f64 <USBD_static_malloc+0x18>)
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	20000208 	.word	0x20000208

08007f68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]

}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	4603      	mov	r3, r0
 8007f84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f8a:	79fb      	ldrb	r3, [r7, #7]
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d817      	bhi.n	8007fc0 <USBD_Get_USB_Status+0x44>
 8007f90:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <USBD_Get_USB_Status+0x1c>)
 8007f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f96:	bf00      	nop
 8007f98:	08007fa9 	.word	0x08007fa9
 8007f9c:	08007faf 	.word	0x08007faf
 8007fa0:	08007fb5 	.word	0x08007fb5
 8007fa4:	08007fbb 	.word	0x08007fbb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73fb      	strb	r3, [r7, #15]
    break;
 8007fac:	e00b      	b.n	8007fc6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb2:	e008      	b.n	8007fc6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb8:	e005      	b.n	8007fc6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	73fb      	strb	r3, [r7, #15]
    break;
 8007fbe:	e002      	b.n	8007fc6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc4:	bf00      	nop
  }
  return usb_status;
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <__errno>:
 8007fd4:	4b01      	ldr	r3, [pc, #4]	; (8007fdc <__errno+0x8>)
 8007fd6:	6818      	ldr	r0, [r3, #0]
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	20000180 	.word	0x20000180

08007fe0 <__libc_init_array>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	4d0d      	ldr	r5, [pc, #52]	; (8008018 <__libc_init_array+0x38>)
 8007fe4:	4c0d      	ldr	r4, [pc, #52]	; (800801c <__libc_init_array+0x3c>)
 8007fe6:	1b64      	subs	r4, r4, r5
 8007fe8:	10a4      	asrs	r4, r4, #2
 8007fea:	2600      	movs	r6, #0
 8007fec:	42a6      	cmp	r6, r4
 8007fee:	d109      	bne.n	8008004 <__libc_init_array+0x24>
 8007ff0:	4d0b      	ldr	r5, [pc, #44]	; (8008020 <__libc_init_array+0x40>)
 8007ff2:	4c0c      	ldr	r4, [pc, #48]	; (8008024 <__libc_init_array+0x44>)
 8007ff4:	f000 fc62 	bl	80088bc <_init>
 8007ff8:	1b64      	subs	r4, r4, r5
 8007ffa:	10a4      	asrs	r4, r4, #2
 8007ffc:	2600      	movs	r6, #0
 8007ffe:	42a6      	cmp	r6, r4
 8008000:	d105      	bne.n	800800e <__libc_init_array+0x2e>
 8008002:	bd70      	pop	{r4, r5, r6, pc}
 8008004:	f855 3b04 	ldr.w	r3, [r5], #4
 8008008:	4798      	blx	r3
 800800a:	3601      	adds	r6, #1
 800800c:	e7ee      	b.n	8007fec <__libc_init_array+0xc>
 800800e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008012:	4798      	blx	r3
 8008014:	3601      	adds	r6, #1
 8008016:	e7f2      	b.n	8007ffe <__libc_init_array+0x1e>
 8008018:	08008980 	.word	0x08008980
 800801c:	08008980 	.word	0x08008980
 8008020:	08008980 	.word	0x08008980
 8008024:	08008984 	.word	0x08008984

08008028 <memset>:
 8008028:	4402      	add	r2, r0
 800802a:	4603      	mov	r3, r0
 800802c:	4293      	cmp	r3, r2
 800802e:	d100      	bne.n	8008032 <memset+0xa>
 8008030:	4770      	bx	lr
 8008032:	f803 1b01 	strb.w	r1, [r3], #1
 8008036:	e7f9      	b.n	800802c <memset+0x4>

08008038 <sniprintf>:
 8008038:	b40c      	push	{r2, r3}
 800803a:	b530      	push	{r4, r5, lr}
 800803c:	4b17      	ldr	r3, [pc, #92]	; (800809c <sniprintf+0x64>)
 800803e:	1e0c      	subs	r4, r1, #0
 8008040:	681d      	ldr	r5, [r3, #0]
 8008042:	b09d      	sub	sp, #116	; 0x74
 8008044:	da08      	bge.n	8008058 <sniprintf+0x20>
 8008046:	238b      	movs	r3, #139	; 0x8b
 8008048:	602b      	str	r3, [r5, #0]
 800804a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800804e:	b01d      	add	sp, #116	; 0x74
 8008050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008054:	b002      	add	sp, #8
 8008056:	4770      	bx	lr
 8008058:	f44f 7302 	mov.w	r3, #520	; 0x208
 800805c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008060:	bf14      	ite	ne
 8008062:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008066:	4623      	moveq	r3, r4
 8008068:	9304      	str	r3, [sp, #16]
 800806a:	9307      	str	r3, [sp, #28]
 800806c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008070:	9002      	str	r0, [sp, #8]
 8008072:	9006      	str	r0, [sp, #24]
 8008074:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008078:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800807a:	ab21      	add	r3, sp, #132	; 0x84
 800807c:	a902      	add	r1, sp, #8
 800807e:	4628      	mov	r0, r5
 8008080:	9301      	str	r3, [sp, #4]
 8008082:	f000 f869 	bl	8008158 <_svfiprintf_r>
 8008086:	1c43      	adds	r3, r0, #1
 8008088:	bfbc      	itt	lt
 800808a:	238b      	movlt	r3, #139	; 0x8b
 800808c:	602b      	strlt	r3, [r5, #0]
 800808e:	2c00      	cmp	r4, #0
 8008090:	d0dd      	beq.n	800804e <sniprintf+0x16>
 8008092:	9b02      	ldr	r3, [sp, #8]
 8008094:	2200      	movs	r2, #0
 8008096:	701a      	strb	r2, [r3, #0]
 8008098:	e7d9      	b.n	800804e <sniprintf+0x16>
 800809a:	bf00      	nop
 800809c:	20000180 	.word	0x20000180

080080a0 <__ssputs_r>:
 80080a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a4:	688e      	ldr	r6, [r1, #8]
 80080a6:	429e      	cmp	r6, r3
 80080a8:	4682      	mov	sl, r0
 80080aa:	460c      	mov	r4, r1
 80080ac:	4690      	mov	r8, r2
 80080ae:	461f      	mov	r7, r3
 80080b0:	d838      	bhi.n	8008124 <__ssputs_r+0x84>
 80080b2:	898a      	ldrh	r2, [r1, #12]
 80080b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080b8:	d032      	beq.n	8008120 <__ssputs_r+0x80>
 80080ba:	6825      	ldr	r5, [r4, #0]
 80080bc:	6909      	ldr	r1, [r1, #16]
 80080be:	eba5 0901 	sub.w	r9, r5, r1
 80080c2:	6965      	ldr	r5, [r4, #20]
 80080c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080cc:	3301      	adds	r3, #1
 80080ce:	444b      	add	r3, r9
 80080d0:	106d      	asrs	r5, r5, #1
 80080d2:	429d      	cmp	r5, r3
 80080d4:	bf38      	it	cc
 80080d6:	461d      	movcc	r5, r3
 80080d8:	0553      	lsls	r3, r2, #21
 80080da:	d531      	bpl.n	8008140 <__ssputs_r+0xa0>
 80080dc:	4629      	mov	r1, r5
 80080de:	f000 fb47 	bl	8008770 <_malloc_r>
 80080e2:	4606      	mov	r6, r0
 80080e4:	b950      	cbnz	r0, 80080fc <__ssputs_r+0x5c>
 80080e6:	230c      	movs	r3, #12
 80080e8:	f8ca 3000 	str.w	r3, [sl]
 80080ec:	89a3      	ldrh	r3, [r4, #12]
 80080ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f2:	81a3      	strh	r3, [r4, #12]
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fc:	6921      	ldr	r1, [r4, #16]
 80080fe:	464a      	mov	r2, r9
 8008100:	f000 fabe 	bl	8008680 <memcpy>
 8008104:	89a3      	ldrh	r3, [r4, #12]
 8008106:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800810a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800810e:	81a3      	strh	r3, [r4, #12]
 8008110:	6126      	str	r6, [r4, #16]
 8008112:	6165      	str	r5, [r4, #20]
 8008114:	444e      	add	r6, r9
 8008116:	eba5 0509 	sub.w	r5, r5, r9
 800811a:	6026      	str	r6, [r4, #0]
 800811c:	60a5      	str	r5, [r4, #8]
 800811e:	463e      	mov	r6, r7
 8008120:	42be      	cmp	r6, r7
 8008122:	d900      	bls.n	8008126 <__ssputs_r+0x86>
 8008124:	463e      	mov	r6, r7
 8008126:	4632      	mov	r2, r6
 8008128:	6820      	ldr	r0, [r4, #0]
 800812a:	4641      	mov	r1, r8
 800812c:	f000 fab6 	bl	800869c <memmove>
 8008130:	68a3      	ldr	r3, [r4, #8]
 8008132:	6822      	ldr	r2, [r4, #0]
 8008134:	1b9b      	subs	r3, r3, r6
 8008136:	4432      	add	r2, r6
 8008138:	60a3      	str	r3, [r4, #8]
 800813a:	6022      	str	r2, [r4, #0]
 800813c:	2000      	movs	r0, #0
 800813e:	e7db      	b.n	80080f8 <__ssputs_r+0x58>
 8008140:	462a      	mov	r2, r5
 8008142:	f000 fb6f 	bl	8008824 <_realloc_r>
 8008146:	4606      	mov	r6, r0
 8008148:	2800      	cmp	r0, #0
 800814a:	d1e1      	bne.n	8008110 <__ssputs_r+0x70>
 800814c:	6921      	ldr	r1, [r4, #16]
 800814e:	4650      	mov	r0, sl
 8008150:	f000 fabe 	bl	80086d0 <_free_r>
 8008154:	e7c7      	b.n	80080e6 <__ssputs_r+0x46>
	...

08008158 <_svfiprintf_r>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	4698      	mov	r8, r3
 800815e:	898b      	ldrh	r3, [r1, #12]
 8008160:	061b      	lsls	r3, r3, #24
 8008162:	b09d      	sub	sp, #116	; 0x74
 8008164:	4607      	mov	r7, r0
 8008166:	460d      	mov	r5, r1
 8008168:	4614      	mov	r4, r2
 800816a:	d50e      	bpl.n	800818a <_svfiprintf_r+0x32>
 800816c:	690b      	ldr	r3, [r1, #16]
 800816e:	b963      	cbnz	r3, 800818a <_svfiprintf_r+0x32>
 8008170:	2140      	movs	r1, #64	; 0x40
 8008172:	f000 fafd 	bl	8008770 <_malloc_r>
 8008176:	6028      	str	r0, [r5, #0]
 8008178:	6128      	str	r0, [r5, #16]
 800817a:	b920      	cbnz	r0, 8008186 <_svfiprintf_r+0x2e>
 800817c:	230c      	movs	r3, #12
 800817e:	603b      	str	r3, [r7, #0]
 8008180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008184:	e0d1      	b.n	800832a <_svfiprintf_r+0x1d2>
 8008186:	2340      	movs	r3, #64	; 0x40
 8008188:	616b      	str	r3, [r5, #20]
 800818a:	2300      	movs	r3, #0
 800818c:	9309      	str	r3, [sp, #36]	; 0x24
 800818e:	2320      	movs	r3, #32
 8008190:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008194:	f8cd 800c 	str.w	r8, [sp, #12]
 8008198:	2330      	movs	r3, #48	; 0x30
 800819a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008344 <_svfiprintf_r+0x1ec>
 800819e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081a2:	f04f 0901 	mov.w	r9, #1
 80081a6:	4623      	mov	r3, r4
 80081a8:	469a      	mov	sl, r3
 80081aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081ae:	b10a      	cbz	r2, 80081b4 <_svfiprintf_r+0x5c>
 80081b0:	2a25      	cmp	r2, #37	; 0x25
 80081b2:	d1f9      	bne.n	80081a8 <_svfiprintf_r+0x50>
 80081b4:	ebba 0b04 	subs.w	fp, sl, r4
 80081b8:	d00b      	beq.n	80081d2 <_svfiprintf_r+0x7a>
 80081ba:	465b      	mov	r3, fp
 80081bc:	4622      	mov	r2, r4
 80081be:	4629      	mov	r1, r5
 80081c0:	4638      	mov	r0, r7
 80081c2:	f7ff ff6d 	bl	80080a0 <__ssputs_r>
 80081c6:	3001      	adds	r0, #1
 80081c8:	f000 80aa 	beq.w	8008320 <_svfiprintf_r+0x1c8>
 80081cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081ce:	445a      	add	r2, fp
 80081d0:	9209      	str	r2, [sp, #36]	; 0x24
 80081d2:	f89a 3000 	ldrb.w	r3, [sl]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f000 80a2 	beq.w	8008320 <_svfiprintf_r+0x1c8>
 80081dc:	2300      	movs	r3, #0
 80081de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081e6:	f10a 0a01 	add.w	sl, sl, #1
 80081ea:	9304      	str	r3, [sp, #16]
 80081ec:	9307      	str	r3, [sp, #28]
 80081ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081f2:	931a      	str	r3, [sp, #104]	; 0x68
 80081f4:	4654      	mov	r4, sl
 80081f6:	2205      	movs	r2, #5
 80081f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081fc:	4851      	ldr	r0, [pc, #324]	; (8008344 <_svfiprintf_r+0x1ec>)
 80081fe:	f7f7 ffef 	bl	80001e0 <memchr>
 8008202:	9a04      	ldr	r2, [sp, #16]
 8008204:	b9d8      	cbnz	r0, 800823e <_svfiprintf_r+0xe6>
 8008206:	06d0      	lsls	r0, r2, #27
 8008208:	bf44      	itt	mi
 800820a:	2320      	movmi	r3, #32
 800820c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008210:	0711      	lsls	r1, r2, #28
 8008212:	bf44      	itt	mi
 8008214:	232b      	movmi	r3, #43	; 0x2b
 8008216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800821a:	f89a 3000 	ldrb.w	r3, [sl]
 800821e:	2b2a      	cmp	r3, #42	; 0x2a
 8008220:	d015      	beq.n	800824e <_svfiprintf_r+0xf6>
 8008222:	9a07      	ldr	r2, [sp, #28]
 8008224:	4654      	mov	r4, sl
 8008226:	2000      	movs	r0, #0
 8008228:	f04f 0c0a 	mov.w	ip, #10
 800822c:	4621      	mov	r1, r4
 800822e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008232:	3b30      	subs	r3, #48	; 0x30
 8008234:	2b09      	cmp	r3, #9
 8008236:	d94e      	bls.n	80082d6 <_svfiprintf_r+0x17e>
 8008238:	b1b0      	cbz	r0, 8008268 <_svfiprintf_r+0x110>
 800823a:	9207      	str	r2, [sp, #28]
 800823c:	e014      	b.n	8008268 <_svfiprintf_r+0x110>
 800823e:	eba0 0308 	sub.w	r3, r0, r8
 8008242:	fa09 f303 	lsl.w	r3, r9, r3
 8008246:	4313      	orrs	r3, r2
 8008248:	9304      	str	r3, [sp, #16]
 800824a:	46a2      	mov	sl, r4
 800824c:	e7d2      	b.n	80081f4 <_svfiprintf_r+0x9c>
 800824e:	9b03      	ldr	r3, [sp, #12]
 8008250:	1d19      	adds	r1, r3, #4
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	9103      	str	r1, [sp, #12]
 8008256:	2b00      	cmp	r3, #0
 8008258:	bfbb      	ittet	lt
 800825a:	425b      	neglt	r3, r3
 800825c:	f042 0202 	orrlt.w	r2, r2, #2
 8008260:	9307      	strge	r3, [sp, #28]
 8008262:	9307      	strlt	r3, [sp, #28]
 8008264:	bfb8      	it	lt
 8008266:	9204      	strlt	r2, [sp, #16]
 8008268:	7823      	ldrb	r3, [r4, #0]
 800826a:	2b2e      	cmp	r3, #46	; 0x2e
 800826c:	d10c      	bne.n	8008288 <_svfiprintf_r+0x130>
 800826e:	7863      	ldrb	r3, [r4, #1]
 8008270:	2b2a      	cmp	r3, #42	; 0x2a
 8008272:	d135      	bne.n	80082e0 <_svfiprintf_r+0x188>
 8008274:	9b03      	ldr	r3, [sp, #12]
 8008276:	1d1a      	adds	r2, r3, #4
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	9203      	str	r2, [sp, #12]
 800827c:	2b00      	cmp	r3, #0
 800827e:	bfb8      	it	lt
 8008280:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008284:	3402      	adds	r4, #2
 8008286:	9305      	str	r3, [sp, #20]
 8008288:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008354 <_svfiprintf_r+0x1fc>
 800828c:	7821      	ldrb	r1, [r4, #0]
 800828e:	2203      	movs	r2, #3
 8008290:	4650      	mov	r0, sl
 8008292:	f7f7 ffa5 	bl	80001e0 <memchr>
 8008296:	b140      	cbz	r0, 80082aa <_svfiprintf_r+0x152>
 8008298:	2340      	movs	r3, #64	; 0x40
 800829a:	eba0 000a 	sub.w	r0, r0, sl
 800829e:	fa03 f000 	lsl.w	r0, r3, r0
 80082a2:	9b04      	ldr	r3, [sp, #16]
 80082a4:	4303      	orrs	r3, r0
 80082a6:	3401      	adds	r4, #1
 80082a8:	9304      	str	r3, [sp, #16]
 80082aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ae:	4826      	ldr	r0, [pc, #152]	; (8008348 <_svfiprintf_r+0x1f0>)
 80082b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082b4:	2206      	movs	r2, #6
 80082b6:	f7f7 ff93 	bl	80001e0 <memchr>
 80082ba:	2800      	cmp	r0, #0
 80082bc:	d038      	beq.n	8008330 <_svfiprintf_r+0x1d8>
 80082be:	4b23      	ldr	r3, [pc, #140]	; (800834c <_svfiprintf_r+0x1f4>)
 80082c0:	bb1b      	cbnz	r3, 800830a <_svfiprintf_r+0x1b2>
 80082c2:	9b03      	ldr	r3, [sp, #12]
 80082c4:	3307      	adds	r3, #7
 80082c6:	f023 0307 	bic.w	r3, r3, #7
 80082ca:	3308      	adds	r3, #8
 80082cc:	9303      	str	r3, [sp, #12]
 80082ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d0:	4433      	add	r3, r6
 80082d2:	9309      	str	r3, [sp, #36]	; 0x24
 80082d4:	e767      	b.n	80081a6 <_svfiprintf_r+0x4e>
 80082d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80082da:	460c      	mov	r4, r1
 80082dc:	2001      	movs	r0, #1
 80082de:	e7a5      	b.n	800822c <_svfiprintf_r+0xd4>
 80082e0:	2300      	movs	r3, #0
 80082e2:	3401      	adds	r4, #1
 80082e4:	9305      	str	r3, [sp, #20]
 80082e6:	4619      	mov	r1, r3
 80082e8:	f04f 0c0a 	mov.w	ip, #10
 80082ec:	4620      	mov	r0, r4
 80082ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082f2:	3a30      	subs	r2, #48	; 0x30
 80082f4:	2a09      	cmp	r2, #9
 80082f6:	d903      	bls.n	8008300 <_svfiprintf_r+0x1a8>
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d0c5      	beq.n	8008288 <_svfiprintf_r+0x130>
 80082fc:	9105      	str	r1, [sp, #20]
 80082fe:	e7c3      	b.n	8008288 <_svfiprintf_r+0x130>
 8008300:	fb0c 2101 	mla	r1, ip, r1, r2
 8008304:	4604      	mov	r4, r0
 8008306:	2301      	movs	r3, #1
 8008308:	e7f0      	b.n	80082ec <_svfiprintf_r+0x194>
 800830a:	ab03      	add	r3, sp, #12
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	462a      	mov	r2, r5
 8008310:	4b0f      	ldr	r3, [pc, #60]	; (8008350 <_svfiprintf_r+0x1f8>)
 8008312:	a904      	add	r1, sp, #16
 8008314:	4638      	mov	r0, r7
 8008316:	f3af 8000 	nop.w
 800831a:	1c42      	adds	r2, r0, #1
 800831c:	4606      	mov	r6, r0
 800831e:	d1d6      	bne.n	80082ce <_svfiprintf_r+0x176>
 8008320:	89ab      	ldrh	r3, [r5, #12]
 8008322:	065b      	lsls	r3, r3, #25
 8008324:	f53f af2c 	bmi.w	8008180 <_svfiprintf_r+0x28>
 8008328:	9809      	ldr	r0, [sp, #36]	; 0x24
 800832a:	b01d      	add	sp, #116	; 0x74
 800832c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008330:	ab03      	add	r3, sp, #12
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	462a      	mov	r2, r5
 8008336:	4b06      	ldr	r3, [pc, #24]	; (8008350 <_svfiprintf_r+0x1f8>)
 8008338:	a904      	add	r1, sp, #16
 800833a:	4638      	mov	r0, r7
 800833c:	f000 f87a 	bl	8008434 <_printf_i>
 8008340:	e7eb      	b.n	800831a <_svfiprintf_r+0x1c2>
 8008342:	bf00      	nop
 8008344:	08008944 	.word	0x08008944
 8008348:	0800894e 	.word	0x0800894e
 800834c:	00000000 	.word	0x00000000
 8008350:	080080a1 	.word	0x080080a1
 8008354:	0800894a 	.word	0x0800894a

08008358 <_printf_common>:
 8008358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800835c:	4616      	mov	r6, r2
 800835e:	4699      	mov	r9, r3
 8008360:	688a      	ldr	r2, [r1, #8]
 8008362:	690b      	ldr	r3, [r1, #16]
 8008364:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008368:	4293      	cmp	r3, r2
 800836a:	bfb8      	it	lt
 800836c:	4613      	movlt	r3, r2
 800836e:	6033      	str	r3, [r6, #0]
 8008370:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008374:	4607      	mov	r7, r0
 8008376:	460c      	mov	r4, r1
 8008378:	b10a      	cbz	r2, 800837e <_printf_common+0x26>
 800837a:	3301      	adds	r3, #1
 800837c:	6033      	str	r3, [r6, #0]
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	0699      	lsls	r1, r3, #26
 8008382:	bf42      	ittt	mi
 8008384:	6833      	ldrmi	r3, [r6, #0]
 8008386:	3302      	addmi	r3, #2
 8008388:	6033      	strmi	r3, [r6, #0]
 800838a:	6825      	ldr	r5, [r4, #0]
 800838c:	f015 0506 	ands.w	r5, r5, #6
 8008390:	d106      	bne.n	80083a0 <_printf_common+0x48>
 8008392:	f104 0a19 	add.w	sl, r4, #25
 8008396:	68e3      	ldr	r3, [r4, #12]
 8008398:	6832      	ldr	r2, [r6, #0]
 800839a:	1a9b      	subs	r3, r3, r2
 800839c:	42ab      	cmp	r3, r5
 800839e:	dc26      	bgt.n	80083ee <_printf_common+0x96>
 80083a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083a4:	1e13      	subs	r3, r2, #0
 80083a6:	6822      	ldr	r2, [r4, #0]
 80083a8:	bf18      	it	ne
 80083aa:	2301      	movne	r3, #1
 80083ac:	0692      	lsls	r2, r2, #26
 80083ae:	d42b      	bmi.n	8008408 <_printf_common+0xb0>
 80083b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083b4:	4649      	mov	r1, r9
 80083b6:	4638      	mov	r0, r7
 80083b8:	47c0      	blx	r8
 80083ba:	3001      	adds	r0, #1
 80083bc:	d01e      	beq.n	80083fc <_printf_common+0xa4>
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	68e5      	ldr	r5, [r4, #12]
 80083c2:	6832      	ldr	r2, [r6, #0]
 80083c4:	f003 0306 	and.w	r3, r3, #6
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	bf08      	it	eq
 80083cc:	1aad      	subeq	r5, r5, r2
 80083ce:	68a3      	ldr	r3, [r4, #8]
 80083d0:	6922      	ldr	r2, [r4, #16]
 80083d2:	bf0c      	ite	eq
 80083d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083d8:	2500      	movne	r5, #0
 80083da:	4293      	cmp	r3, r2
 80083dc:	bfc4      	itt	gt
 80083de:	1a9b      	subgt	r3, r3, r2
 80083e0:	18ed      	addgt	r5, r5, r3
 80083e2:	2600      	movs	r6, #0
 80083e4:	341a      	adds	r4, #26
 80083e6:	42b5      	cmp	r5, r6
 80083e8:	d11a      	bne.n	8008420 <_printf_common+0xc8>
 80083ea:	2000      	movs	r0, #0
 80083ec:	e008      	b.n	8008400 <_printf_common+0xa8>
 80083ee:	2301      	movs	r3, #1
 80083f0:	4652      	mov	r2, sl
 80083f2:	4649      	mov	r1, r9
 80083f4:	4638      	mov	r0, r7
 80083f6:	47c0      	blx	r8
 80083f8:	3001      	adds	r0, #1
 80083fa:	d103      	bne.n	8008404 <_printf_common+0xac>
 80083fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008404:	3501      	adds	r5, #1
 8008406:	e7c6      	b.n	8008396 <_printf_common+0x3e>
 8008408:	18e1      	adds	r1, r4, r3
 800840a:	1c5a      	adds	r2, r3, #1
 800840c:	2030      	movs	r0, #48	; 0x30
 800840e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008412:	4422      	add	r2, r4
 8008414:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008418:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800841c:	3302      	adds	r3, #2
 800841e:	e7c7      	b.n	80083b0 <_printf_common+0x58>
 8008420:	2301      	movs	r3, #1
 8008422:	4622      	mov	r2, r4
 8008424:	4649      	mov	r1, r9
 8008426:	4638      	mov	r0, r7
 8008428:	47c0      	blx	r8
 800842a:	3001      	adds	r0, #1
 800842c:	d0e6      	beq.n	80083fc <_printf_common+0xa4>
 800842e:	3601      	adds	r6, #1
 8008430:	e7d9      	b.n	80083e6 <_printf_common+0x8e>
	...

08008434 <_printf_i>:
 8008434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008438:	460c      	mov	r4, r1
 800843a:	4691      	mov	r9, r2
 800843c:	7e27      	ldrb	r7, [r4, #24]
 800843e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008440:	2f78      	cmp	r7, #120	; 0x78
 8008442:	4680      	mov	r8, r0
 8008444:	469a      	mov	sl, r3
 8008446:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800844a:	d807      	bhi.n	800845c <_printf_i+0x28>
 800844c:	2f62      	cmp	r7, #98	; 0x62
 800844e:	d80a      	bhi.n	8008466 <_printf_i+0x32>
 8008450:	2f00      	cmp	r7, #0
 8008452:	f000 80d8 	beq.w	8008606 <_printf_i+0x1d2>
 8008456:	2f58      	cmp	r7, #88	; 0x58
 8008458:	f000 80a3 	beq.w	80085a2 <_printf_i+0x16e>
 800845c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008460:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008464:	e03a      	b.n	80084dc <_printf_i+0xa8>
 8008466:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800846a:	2b15      	cmp	r3, #21
 800846c:	d8f6      	bhi.n	800845c <_printf_i+0x28>
 800846e:	a001      	add	r0, pc, #4	; (adr r0, 8008474 <_printf_i+0x40>)
 8008470:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008474:	080084cd 	.word	0x080084cd
 8008478:	080084e1 	.word	0x080084e1
 800847c:	0800845d 	.word	0x0800845d
 8008480:	0800845d 	.word	0x0800845d
 8008484:	0800845d 	.word	0x0800845d
 8008488:	0800845d 	.word	0x0800845d
 800848c:	080084e1 	.word	0x080084e1
 8008490:	0800845d 	.word	0x0800845d
 8008494:	0800845d 	.word	0x0800845d
 8008498:	0800845d 	.word	0x0800845d
 800849c:	0800845d 	.word	0x0800845d
 80084a0:	080085ed 	.word	0x080085ed
 80084a4:	08008511 	.word	0x08008511
 80084a8:	080085cf 	.word	0x080085cf
 80084ac:	0800845d 	.word	0x0800845d
 80084b0:	0800845d 	.word	0x0800845d
 80084b4:	0800860f 	.word	0x0800860f
 80084b8:	0800845d 	.word	0x0800845d
 80084bc:	08008511 	.word	0x08008511
 80084c0:	0800845d 	.word	0x0800845d
 80084c4:	0800845d 	.word	0x0800845d
 80084c8:	080085d7 	.word	0x080085d7
 80084cc:	680b      	ldr	r3, [r1, #0]
 80084ce:	1d1a      	adds	r2, r3, #4
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	600a      	str	r2, [r1, #0]
 80084d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084dc:	2301      	movs	r3, #1
 80084de:	e0a3      	b.n	8008628 <_printf_i+0x1f4>
 80084e0:	6825      	ldr	r5, [r4, #0]
 80084e2:	6808      	ldr	r0, [r1, #0]
 80084e4:	062e      	lsls	r6, r5, #24
 80084e6:	f100 0304 	add.w	r3, r0, #4
 80084ea:	d50a      	bpl.n	8008502 <_printf_i+0xce>
 80084ec:	6805      	ldr	r5, [r0, #0]
 80084ee:	600b      	str	r3, [r1, #0]
 80084f0:	2d00      	cmp	r5, #0
 80084f2:	da03      	bge.n	80084fc <_printf_i+0xc8>
 80084f4:	232d      	movs	r3, #45	; 0x2d
 80084f6:	426d      	negs	r5, r5
 80084f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084fc:	485e      	ldr	r0, [pc, #376]	; (8008678 <_printf_i+0x244>)
 80084fe:	230a      	movs	r3, #10
 8008500:	e019      	b.n	8008536 <_printf_i+0x102>
 8008502:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008506:	6805      	ldr	r5, [r0, #0]
 8008508:	600b      	str	r3, [r1, #0]
 800850a:	bf18      	it	ne
 800850c:	b22d      	sxthne	r5, r5
 800850e:	e7ef      	b.n	80084f0 <_printf_i+0xbc>
 8008510:	680b      	ldr	r3, [r1, #0]
 8008512:	6825      	ldr	r5, [r4, #0]
 8008514:	1d18      	adds	r0, r3, #4
 8008516:	6008      	str	r0, [r1, #0]
 8008518:	0628      	lsls	r0, r5, #24
 800851a:	d501      	bpl.n	8008520 <_printf_i+0xec>
 800851c:	681d      	ldr	r5, [r3, #0]
 800851e:	e002      	b.n	8008526 <_printf_i+0xf2>
 8008520:	0669      	lsls	r1, r5, #25
 8008522:	d5fb      	bpl.n	800851c <_printf_i+0xe8>
 8008524:	881d      	ldrh	r5, [r3, #0]
 8008526:	4854      	ldr	r0, [pc, #336]	; (8008678 <_printf_i+0x244>)
 8008528:	2f6f      	cmp	r7, #111	; 0x6f
 800852a:	bf0c      	ite	eq
 800852c:	2308      	moveq	r3, #8
 800852e:	230a      	movne	r3, #10
 8008530:	2100      	movs	r1, #0
 8008532:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008536:	6866      	ldr	r6, [r4, #4]
 8008538:	60a6      	str	r6, [r4, #8]
 800853a:	2e00      	cmp	r6, #0
 800853c:	bfa2      	ittt	ge
 800853e:	6821      	ldrge	r1, [r4, #0]
 8008540:	f021 0104 	bicge.w	r1, r1, #4
 8008544:	6021      	strge	r1, [r4, #0]
 8008546:	b90d      	cbnz	r5, 800854c <_printf_i+0x118>
 8008548:	2e00      	cmp	r6, #0
 800854a:	d04d      	beq.n	80085e8 <_printf_i+0x1b4>
 800854c:	4616      	mov	r6, r2
 800854e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008552:	fb03 5711 	mls	r7, r3, r1, r5
 8008556:	5dc7      	ldrb	r7, [r0, r7]
 8008558:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800855c:	462f      	mov	r7, r5
 800855e:	42bb      	cmp	r3, r7
 8008560:	460d      	mov	r5, r1
 8008562:	d9f4      	bls.n	800854e <_printf_i+0x11a>
 8008564:	2b08      	cmp	r3, #8
 8008566:	d10b      	bne.n	8008580 <_printf_i+0x14c>
 8008568:	6823      	ldr	r3, [r4, #0]
 800856a:	07df      	lsls	r7, r3, #31
 800856c:	d508      	bpl.n	8008580 <_printf_i+0x14c>
 800856e:	6923      	ldr	r3, [r4, #16]
 8008570:	6861      	ldr	r1, [r4, #4]
 8008572:	4299      	cmp	r1, r3
 8008574:	bfde      	ittt	le
 8008576:	2330      	movle	r3, #48	; 0x30
 8008578:	f806 3c01 	strble.w	r3, [r6, #-1]
 800857c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008580:	1b92      	subs	r2, r2, r6
 8008582:	6122      	str	r2, [r4, #16]
 8008584:	f8cd a000 	str.w	sl, [sp]
 8008588:	464b      	mov	r3, r9
 800858a:	aa03      	add	r2, sp, #12
 800858c:	4621      	mov	r1, r4
 800858e:	4640      	mov	r0, r8
 8008590:	f7ff fee2 	bl	8008358 <_printf_common>
 8008594:	3001      	adds	r0, #1
 8008596:	d14c      	bne.n	8008632 <_printf_i+0x1fe>
 8008598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800859c:	b004      	add	sp, #16
 800859e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a2:	4835      	ldr	r0, [pc, #212]	; (8008678 <_printf_i+0x244>)
 80085a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085a8:	6823      	ldr	r3, [r4, #0]
 80085aa:	680e      	ldr	r6, [r1, #0]
 80085ac:	061f      	lsls	r7, r3, #24
 80085ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80085b2:	600e      	str	r6, [r1, #0]
 80085b4:	d514      	bpl.n	80085e0 <_printf_i+0x1ac>
 80085b6:	07d9      	lsls	r1, r3, #31
 80085b8:	bf44      	itt	mi
 80085ba:	f043 0320 	orrmi.w	r3, r3, #32
 80085be:	6023      	strmi	r3, [r4, #0]
 80085c0:	b91d      	cbnz	r5, 80085ca <_printf_i+0x196>
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	f023 0320 	bic.w	r3, r3, #32
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	2310      	movs	r3, #16
 80085cc:	e7b0      	b.n	8008530 <_printf_i+0xfc>
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	f043 0320 	orr.w	r3, r3, #32
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	2378      	movs	r3, #120	; 0x78
 80085d8:	4828      	ldr	r0, [pc, #160]	; (800867c <_printf_i+0x248>)
 80085da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085de:	e7e3      	b.n	80085a8 <_printf_i+0x174>
 80085e0:	065e      	lsls	r6, r3, #25
 80085e2:	bf48      	it	mi
 80085e4:	b2ad      	uxthmi	r5, r5
 80085e6:	e7e6      	b.n	80085b6 <_printf_i+0x182>
 80085e8:	4616      	mov	r6, r2
 80085ea:	e7bb      	b.n	8008564 <_printf_i+0x130>
 80085ec:	680b      	ldr	r3, [r1, #0]
 80085ee:	6826      	ldr	r6, [r4, #0]
 80085f0:	6960      	ldr	r0, [r4, #20]
 80085f2:	1d1d      	adds	r5, r3, #4
 80085f4:	600d      	str	r5, [r1, #0]
 80085f6:	0635      	lsls	r5, r6, #24
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	d501      	bpl.n	8008600 <_printf_i+0x1cc>
 80085fc:	6018      	str	r0, [r3, #0]
 80085fe:	e002      	b.n	8008606 <_printf_i+0x1d2>
 8008600:	0671      	lsls	r1, r6, #25
 8008602:	d5fb      	bpl.n	80085fc <_printf_i+0x1c8>
 8008604:	8018      	strh	r0, [r3, #0]
 8008606:	2300      	movs	r3, #0
 8008608:	6123      	str	r3, [r4, #16]
 800860a:	4616      	mov	r6, r2
 800860c:	e7ba      	b.n	8008584 <_printf_i+0x150>
 800860e:	680b      	ldr	r3, [r1, #0]
 8008610:	1d1a      	adds	r2, r3, #4
 8008612:	600a      	str	r2, [r1, #0]
 8008614:	681e      	ldr	r6, [r3, #0]
 8008616:	6862      	ldr	r2, [r4, #4]
 8008618:	2100      	movs	r1, #0
 800861a:	4630      	mov	r0, r6
 800861c:	f7f7 fde0 	bl	80001e0 <memchr>
 8008620:	b108      	cbz	r0, 8008626 <_printf_i+0x1f2>
 8008622:	1b80      	subs	r0, r0, r6
 8008624:	6060      	str	r0, [r4, #4]
 8008626:	6863      	ldr	r3, [r4, #4]
 8008628:	6123      	str	r3, [r4, #16]
 800862a:	2300      	movs	r3, #0
 800862c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008630:	e7a8      	b.n	8008584 <_printf_i+0x150>
 8008632:	6923      	ldr	r3, [r4, #16]
 8008634:	4632      	mov	r2, r6
 8008636:	4649      	mov	r1, r9
 8008638:	4640      	mov	r0, r8
 800863a:	47d0      	blx	sl
 800863c:	3001      	adds	r0, #1
 800863e:	d0ab      	beq.n	8008598 <_printf_i+0x164>
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	079b      	lsls	r3, r3, #30
 8008644:	d413      	bmi.n	800866e <_printf_i+0x23a>
 8008646:	68e0      	ldr	r0, [r4, #12]
 8008648:	9b03      	ldr	r3, [sp, #12]
 800864a:	4298      	cmp	r0, r3
 800864c:	bfb8      	it	lt
 800864e:	4618      	movlt	r0, r3
 8008650:	e7a4      	b.n	800859c <_printf_i+0x168>
 8008652:	2301      	movs	r3, #1
 8008654:	4632      	mov	r2, r6
 8008656:	4649      	mov	r1, r9
 8008658:	4640      	mov	r0, r8
 800865a:	47d0      	blx	sl
 800865c:	3001      	adds	r0, #1
 800865e:	d09b      	beq.n	8008598 <_printf_i+0x164>
 8008660:	3501      	adds	r5, #1
 8008662:	68e3      	ldr	r3, [r4, #12]
 8008664:	9903      	ldr	r1, [sp, #12]
 8008666:	1a5b      	subs	r3, r3, r1
 8008668:	42ab      	cmp	r3, r5
 800866a:	dcf2      	bgt.n	8008652 <_printf_i+0x21e>
 800866c:	e7eb      	b.n	8008646 <_printf_i+0x212>
 800866e:	2500      	movs	r5, #0
 8008670:	f104 0619 	add.w	r6, r4, #25
 8008674:	e7f5      	b.n	8008662 <_printf_i+0x22e>
 8008676:	bf00      	nop
 8008678:	08008955 	.word	0x08008955
 800867c:	08008966 	.word	0x08008966

08008680 <memcpy>:
 8008680:	440a      	add	r2, r1
 8008682:	4291      	cmp	r1, r2
 8008684:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008688:	d100      	bne.n	800868c <memcpy+0xc>
 800868a:	4770      	bx	lr
 800868c:	b510      	push	{r4, lr}
 800868e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008692:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008696:	4291      	cmp	r1, r2
 8008698:	d1f9      	bne.n	800868e <memcpy+0xe>
 800869a:	bd10      	pop	{r4, pc}

0800869c <memmove>:
 800869c:	4288      	cmp	r0, r1
 800869e:	b510      	push	{r4, lr}
 80086a0:	eb01 0402 	add.w	r4, r1, r2
 80086a4:	d902      	bls.n	80086ac <memmove+0x10>
 80086a6:	4284      	cmp	r4, r0
 80086a8:	4623      	mov	r3, r4
 80086aa:	d807      	bhi.n	80086bc <memmove+0x20>
 80086ac:	1e43      	subs	r3, r0, #1
 80086ae:	42a1      	cmp	r1, r4
 80086b0:	d008      	beq.n	80086c4 <memmove+0x28>
 80086b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086ba:	e7f8      	b.n	80086ae <memmove+0x12>
 80086bc:	4402      	add	r2, r0
 80086be:	4601      	mov	r1, r0
 80086c0:	428a      	cmp	r2, r1
 80086c2:	d100      	bne.n	80086c6 <memmove+0x2a>
 80086c4:	bd10      	pop	{r4, pc}
 80086c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086ce:	e7f7      	b.n	80086c0 <memmove+0x24>

080086d0 <_free_r>:
 80086d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086d2:	2900      	cmp	r1, #0
 80086d4:	d048      	beq.n	8008768 <_free_r+0x98>
 80086d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086da:	9001      	str	r0, [sp, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f1a1 0404 	sub.w	r4, r1, #4
 80086e2:	bfb8      	it	lt
 80086e4:	18e4      	addlt	r4, r4, r3
 80086e6:	f000 f8d3 	bl	8008890 <__malloc_lock>
 80086ea:	4a20      	ldr	r2, [pc, #128]	; (800876c <_free_r+0x9c>)
 80086ec:	9801      	ldr	r0, [sp, #4]
 80086ee:	6813      	ldr	r3, [r2, #0]
 80086f0:	4615      	mov	r5, r2
 80086f2:	b933      	cbnz	r3, 8008702 <_free_r+0x32>
 80086f4:	6063      	str	r3, [r4, #4]
 80086f6:	6014      	str	r4, [r2, #0]
 80086f8:	b003      	add	sp, #12
 80086fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086fe:	f000 b8cd 	b.w	800889c <__malloc_unlock>
 8008702:	42a3      	cmp	r3, r4
 8008704:	d90b      	bls.n	800871e <_free_r+0x4e>
 8008706:	6821      	ldr	r1, [r4, #0]
 8008708:	1862      	adds	r2, r4, r1
 800870a:	4293      	cmp	r3, r2
 800870c:	bf04      	itt	eq
 800870e:	681a      	ldreq	r2, [r3, #0]
 8008710:	685b      	ldreq	r3, [r3, #4]
 8008712:	6063      	str	r3, [r4, #4]
 8008714:	bf04      	itt	eq
 8008716:	1852      	addeq	r2, r2, r1
 8008718:	6022      	streq	r2, [r4, #0]
 800871a:	602c      	str	r4, [r5, #0]
 800871c:	e7ec      	b.n	80086f8 <_free_r+0x28>
 800871e:	461a      	mov	r2, r3
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	b10b      	cbz	r3, 8008728 <_free_r+0x58>
 8008724:	42a3      	cmp	r3, r4
 8008726:	d9fa      	bls.n	800871e <_free_r+0x4e>
 8008728:	6811      	ldr	r1, [r2, #0]
 800872a:	1855      	adds	r5, r2, r1
 800872c:	42a5      	cmp	r5, r4
 800872e:	d10b      	bne.n	8008748 <_free_r+0x78>
 8008730:	6824      	ldr	r4, [r4, #0]
 8008732:	4421      	add	r1, r4
 8008734:	1854      	adds	r4, r2, r1
 8008736:	42a3      	cmp	r3, r4
 8008738:	6011      	str	r1, [r2, #0]
 800873a:	d1dd      	bne.n	80086f8 <_free_r+0x28>
 800873c:	681c      	ldr	r4, [r3, #0]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	6053      	str	r3, [r2, #4]
 8008742:	4421      	add	r1, r4
 8008744:	6011      	str	r1, [r2, #0]
 8008746:	e7d7      	b.n	80086f8 <_free_r+0x28>
 8008748:	d902      	bls.n	8008750 <_free_r+0x80>
 800874a:	230c      	movs	r3, #12
 800874c:	6003      	str	r3, [r0, #0]
 800874e:	e7d3      	b.n	80086f8 <_free_r+0x28>
 8008750:	6825      	ldr	r5, [r4, #0]
 8008752:	1961      	adds	r1, r4, r5
 8008754:	428b      	cmp	r3, r1
 8008756:	bf04      	itt	eq
 8008758:	6819      	ldreq	r1, [r3, #0]
 800875a:	685b      	ldreq	r3, [r3, #4]
 800875c:	6063      	str	r3, [r4, #4]
 800875e:	bf04      	itt	eq
 8008760:	1949      	addeq	r1, r1, r5
 8008762:	6021      	streq	r1, [r4, #0]
 8008764:	6054      	str	r4, [r2, #4]
 8008766:	e7c7      	b.n	80086f8 <_free_r+0x28>
 8008768:	b003      	add	sp, #12
 800876a:	bd30      	pop	{r4, r5, pc}
 800876c:	20000428 	.word	0x20000428

08008770 <_malloc_r>:
 8008770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008772:	1ccd      	adds	r5, r1, #3
 8008774:	f025 0503 	bic.w	r5, r5, #3
 8008778:	3508      	adds	r5, #8
 800877a:	2d0c      	cmp	r5, #12
 800877c:	bf38      	it	cc
 800877e:	250c      	movcc	r5, #12
 8008780:	2d00      	cmp	r5, #0
 8008782:	4606      	mov	r6, r0
 8008784:	db01      	blt.n	800878a <_malloc_r+0x1a>
 8008786:	42a9      	cmp	r1, r5
 8008788:	d903      	bls.n	8008792 <_malloc_r+0x22>
 800878a:	230c      	movs	r3, #12
 800878c:	6033      	str	r3, [r6, #0]
 800878e:	2000      	movs	r0, #0
 8008790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008792:	f000 f87d 	bl	8008890 <__malloc_lock>
 8008796:	4921      	ldr	r1, [pc, #132]	; (800881c <_malloc_r+0xac>)
 8008798:	680a      	ldr	r2, [r1, #0]
 800879a:	4614      	mov	r4, r2
 800879c:	b99c      	cbnz	r4, 80087c6 <_malloc_r+0x56>
 800879e:	4f20      	ldr	r7, [pc, #128]	; (8008820 <_malloc_r+0xb0>)
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	b923      	cbnz	r3, 80087ae <_malloc_r+0x3e>
 80087a4:	4621      	mov	r1, r4
 80087a6:	4630      	mov	r0, r6
 80087a8:	f000 f862 	bl	8008870 <_sbrk_r>
 80087ac:	6038      	str	r0, [r7, #0]
 80087ae:	4629      	mov	r1, r5
 80087b0:	4630      	mov	r0, r6
 80087b2:	f000 f85d 	bl	8008870 <_sbrk_r>
 80087b6:	1c43      	adds	r3, r0, #1
 80087b8:	d123      	bne.n	8008802 <_malloc_r+0x92>
 80087ba:	230c      	movs	r3, #12
 80087bc:	6033      	str	r3, [r6, #0]
 80087be:	4630      	mov	r0, r6
 80087c0:	f000 f86c 	bl	800889c <__malloc_unlock>
 80087c4:	e7e3      	b.n	800878e <_malloc_r+0x1e>
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	1b5b      	subs	r3, r3, r5
 80087ca:	d417      	bmi.n	80087fc <_malloc_r+0x8c>
 80087cc:	2b0b      	cmp	r3, #11
 80087ce:	d903      	bls.n	80087d8 <_malloc_r+0x68>
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	441c      	add	r4, r3
 80087d4:	6025      	str	r5, [r4, #0]
 80087d6:	e004      	b.n	80087e2 <_malloc_r+0x72>
 80087d8:	6863      	ldr	r3, [r4, #4]
 80087da:	42a2      	cmp	r2, r4
 80087dc:	bf0c      	ite	eq
 80087de:	600b      	streq	r3, [r1, #0]
 80087e0:	6053      	strne	r3, [r2, #4]
 80087e2:	4630      	mov	r0, r6
 80087e4:	f000 f85a 	bl	800889c <__malloc_unlock>
 80087e8:	f104 000b 	add.w	r0, r4, #11
 80087ec:	1d23      	adds	r3, r4, #4
 80087ee:	f020 0007 	bic.w	r0, r0, #7
 80087f2:	1ac2      	subs	r2, r0, r3
 80087f4:	d0cc      	beq.n	8008790 <_malloc_r+0x20>
 80087f6:	1a1b      	subs	r3, r3, r0
 80087f8:	50a3      	str	r3, [r4, r2]
 80087fa:	e7c9      	b.n	8008790 <_malloc_r+0x20>
 80087fc:	4622      	mov	r2, r4
 80087fe:	6864      	ldr	r4, [r4, #4]
 8008800:	e7cc      	b.n	800879c <_malloc_r+0x2c>
 8008802:	1cc4      	adds	r4, r0, #3
 8008804:	f024 0403 	bic.w	r4, r4, #3
 8008808:	42a0      	cmp	r0, r4
 800880a:	d0e3      	beq.n	80087d4 <_malloc_r+0x64>
 800880c:	1a21      	subs	r1, r4, r0
 800880e:	4630      	mov	r0, r6
 8008810:	f000 f82e 	bl	8008870 <_sbrk_r>
 8008814:	3001      	adds	r0, #1
 8008816:	d1dd      	bne.n	80087d4 <_malloc_r+0x64>
 8008818:	e7cf      	b.n	80087ba <_malloc_r+0x4a>
 800881a:	bf00      	nop
 800881c:	20000428 	.word	0x20000428
 8008820:	2000042c 	.word	0x2000042c

08008824 <_realloc_r>:
 8008824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008826:	4607      	mov	r7, r0
 8008828:	4614      	mov	r4, r2
 800882a:	460e      	mov	r6, r1
 800882c:	b921      	cbnz	r1, 8008838 <_realloc_r+0x14>
 800882e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008832:	4611      	mov	r1, r2
 8008834:	f7ff bf9c 	b.w	8008770 <_malloc_r>
 8008838:	b922      	cbnz	r2, 8008844 <_realloc_r+0x20>
 800883a:	f7ff ff49 	bl	80086d0 <_free_r>
 800883e:	4625      	mov	r5, r4
 8008840:	4628      	mov	r0, r5
 8008842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008844:	f000 f830 	bl	80088a8 <_malloc_usable_size_r>
 8008848:	42a0      	cmp	r0, r4
 800884a:	d20f      	bcs.n	800886c <_realloc_r+0x48>
 800884c:	4621      	mov	r1, r4
 800884e:	4638      	mov	r0, r7
 8008850:	f7ff ff8e 	bl	8008770 <_malloc_r>
 8008854:	4605      	mov	r5, r0
 8008856:	2800      	cmp	r0, #0
 8008858:	d0f2      	beq.n	8008840 <_realloc_r+0x1c>
 800885a:	4631      	mov	r1, r6
 800885c:	4622      	mov	r2, r4
 800885e:	f7ff ff0f 	bl	8008680 <memcpy>
 8008862:	4631      	mov	r1, r6
 8008864:	4638      	mov	r0, r7
 8008866:	f7ff ff33 	bl	80086d0 <_free_r>
 800886a:	e7e9      	b.n	8008840 <_realloc_r+0x1c>
 800886c:	4635      	mov	r5, r6
 800886e:	e7e7      	b.n	8008840 <_realloc_r+0x1c>

08008870 <_sbrk_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	4d06      	ldr	r5, [pc, #24]	; (800888c <_sbrk_r+0x1c>)
 8008874:	2300      	movs	r3, #0
 8008876:	4604      	mov	r4, r0
 8008878:	4608      	mov	r0, r1
 800887a:	602b      	str	r3, [r5, #0]
 800887c:	f7f8 fab6 	bl	8000dec <_sbrk>
 8008880:	1c43      	adds	r3, r0, #1
 8008882:	d102      	bne.n	800888a <_sbrk_r+0x1a>
 8008884:	682b      	ldr	r3, [r5, #0]
 8008886:	b103      	cbz	r3, 800888a <_sbrk_r+0x1a>
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	bd38      	pop	{r3, r4, r5, pc}
 800888c:	20001e48 	.word	0x20001e48

08008890 <__malloc_lock>:
 8008890:	4801      	ldr	r0, [pc, #4]	; (8008898 <__malloc_lock+0x8>)
 8008892:	f000 b811 	b.w	80088b8 <__retarget_lock_acquire_recursive>
 8008896:	bf00      	nop
 8008898:	20001e50 	.word	0x20001e50

0800889c <__malloc_unlock>:
 800889c:	4801      	ldr	r0, [pc, #4]	; (80088a4 <__malloc_unlock+0x8>)
 800889e:	f000 b80c 	b.w	80088ba <__retarget_lock_release_recursive>
 80088a2:	bf00      	nop
 80088a4:	20001e50 	.word	0x20001e50

080088a8 <_malloc_usable_size_r>:
 80088a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088ac:	1f18      	subs	r0, r3, #4
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	bfbc      	itt	lt
 80088b2:	580b      	ldrlt	r3, [r1, r0]
 80088b4:	18c0      	addlt	r0, r0, r3
 80088b6:	4770      	bx	lr

080088b8 <__retarget_lock_acquire_recursive>:
 80088b8:	4770      	bx	lr

080088ba <__retarget_lock_release_recursive>:
 80088ba:	4770      	bx	lr

080088bc <_init>:
 80088bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088be:	bf00      	nop
 80088c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c2:	bc08      	pop	{r3}
 80088c4:	469e      	mov	lr, r3
 80088c6:	4770      	bx	lr

080088c8 <_fini>:
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	bf00      	nop
 80088cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ce:	bc08      	pop	{r3}
 80088d0:	469e      	mov	lr, r3
 80088d2:	4770      	bx	lr
