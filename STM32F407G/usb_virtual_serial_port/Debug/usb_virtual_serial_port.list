
usb_virtual_serial_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e374  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800e508  0800e508  0001e508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9f4  0800e9f4  00020354  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9f4  0800e9f4  0001e9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9fc  0800e9fc  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9fc  0800e9fc  0001e9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea00  0800ea00  0001ea00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800ea04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d34  20000354  0800ed58  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002088  0800ed58  00022088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   000222e0  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048e2  00000000  00000000  00042664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  00046f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  00048598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002659e  00000000  00000000  00049a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ddbd  00000000  00000000  0006fff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cedac  00000000  00000000  0008ddb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015cb5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f74  00000000  00000000  0015cbb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000354 	.word	0x20000354
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e4ec 	.word	0x0800e4ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000358 	.word	0x20000358
 80001cc:	0800e4ec 	.word	0x0800e4ec

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c86:	f000 b9b9 	b.w	8000ffc <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d1c:	f000 b96e 	b.w	8000ffc <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	4604      	mov	r4, r0
 8000d40:	468c      	mov	ip, r1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8083 	bne.w	8000e4e <__udivmoddi4+0x116>
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	4617      	mov	r7, r2
 8000d4c:	d947      	bls.n	8000dde <__udivmoddi4+0xa6>
 8000d4e:	fab2 f282 	clz	r2, r2
 8000d52:	b142      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d54:	f1c2 0020 	rsb	r0, r2, #32
 8000d58:	fa24 f000 	lsr.w	r0, r4, r0
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	4097      	lsls	r7, r2
 8000d60:	ea40 0c01 	orr.w	ip, r0, r1
 8000d64:	4094      	lsls	r4, r2
 8000d66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d70:	fa1f fe87 	uxth.w	lr, r7
 8000d74:	fb08 c116 	mls	r1, r8, r6, ip
 8000d78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x60>
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d8a:	f080 8119 	bcs.w	8000fc0 <__udivmoddi4+0x288>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 8116 	bls.w	8000fc0 <__udivmoddi4+0x288>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	443b      	add	r3, r7
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x8c>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db6:	f080 8105 	bcs.w	8000fc4 <__udivmoddi4+0x28c>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8102 	bls.w	8000fc4 <__udivmoddi4+0x28c>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa0>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	b902      	cbnz	r2, 8000de2 <__udivmoddi4+0xaa>
 8000de0:	deff      	udf	#255	; 0xff
 8000de2:	fab2 f282 	clz	r2, r2
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d150      	bne.n	8000e8c <__udivmoddi4+0x154>
 8000dea:	1bcb      	subs	r3, r1, r7
 8000dec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df0:	fa1f f887 	uxth.w	r8, r7
 8000df4:	2601      	movs	r6, #1
 8000df6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dfa:	0c21      	lsrs	r1, r4, #16
 8000dfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb08 f30c 	mul.w	r3, r8, ip
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0xe4>
 8000e0c:	1879      	adds	r1, r7, r1
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0xe2>
 8000e14:	428b      	cmp	r3, r1
 8000e16:	f200 80e9 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1ac9      	subs	r1, r1, r3
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x10c>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x10a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80d9 	bhi.w	8000ff4 <__udivmoddi4+0x2bc>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e7bf      	b.n	8000dce <__udivmoddi4+0x96>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d909      	bls.n	8000e66 <__udivmoddi4+0x12e>
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	f000 80b1 	beq.w	8000fba <__udivmoddi4+0x282>
 8000e58:	2600      	movs	r6, #0
 8000e5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5e:	4630      	mov	r0, r6
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	fab3 f683 	clz	r6, r3
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d14a      	bne.n	8000f04 <__udivmoddi4+0x1cc>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d302      	bcc.n	8000e78 <__udivmoddi4+0x140>
 8000e72:	4282      	cmp	r2, r0
 8000e74:	f200 80b8 	bhi.w	8000fe8 <__udivmoddi4+0x2b0>
 8000e78:	1a84      	subs	r4, r0, r2
 8000e7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	468c      	mov	ip, r1
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d0a8      	beq.n	8000dd8 <__udivmoddi4+0xa0>
 8000e86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e8a:	e7a5      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f603 	lsr.w	r6, r0, r3
 8000e94:	4097      	lsls	r7, r2
 8000e96:	fa01 f002 	lsl.w	r0, r1, r2
 8000e9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9e:	40d9      	lsrs	r1, r3
 8000ea0:	4330      	orrs	r0, r6
 8000ea2:	0c03      	lsrs	r3, r0, #16
 8000ea4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea8:	fa1f f887 	uxth.w	r8, r7
 8000eac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb4:	fb06 f108 	mul.w	r1, r6, r8
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x19c>
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ec6:	f080 808d 	bcs.w	8000fe4 <__udivmoddi4+0x2ac>
 8000eca:	4299      	cmp	r1, r3
 8000ecc:	f240 808a 	bls.w	8000fe4 <__udivmoddi4+0x2ac>
 8000ed0:	3e02      	subs	r6, #2
 8000ed2:	443b      	add	r3, r7
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b281      	uxth	r1, r0
 8000ed8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000edc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ee0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee4:	fb00 f308 	mul.w	r3, r0, r8
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d907      	bls.n	8000efc <__udivmoddi4+0x1c4>
 8000eec:	1879      	adds	r1, r7, r1
 8000eee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ef2:	d273      	bcs.n	8000fdc <__udivmoddi4+0x2a4>
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d971      	bls.n	8000fdc <__udivmoddi4+0x2a4>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	4439      	add	r1, r7
 8000efc:	1acb      	subs	r3, r1, r3
 8000efe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f02:	e778      	b.n	8000df6 <__udivmoddi4+0xbe>
 8000f04:	f1c6 0c20 	rsb	ip, r6, #32
 8000f08:	fa03 f406 	lsl.w	r4, r3, r6
 8000f0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f10:	431c      	orrs	r4, r3
 8000f12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f16:	fa01 f306 	lsl.w	r3, r1, r6
 8000f1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f22:	431f      	orrs	r7, r3
 8000f24:	0c3b      	lsrs	r3, r7, #16
 8000f26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2a:	fa1f f884 	uxth.w	r8, r4
 8000f2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f36:	fb09 fa08 	mul.w	sl, r9, r8
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f40:	fa00 f306 	lsl.w	r3, r0, r6
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x220>
 8000f46:	1861      	adds	r1, r4, r1
 8000f48:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f4c:	d248      	bcs.n	8000fe0 <__udivmoddi4+0x2a8>
 8000f4e:	458a      	cmp	sl, r1
 8000f50:	d946      	bls.n	8000fe0 <__udivmoddi4+0x2a8>
 8000f52:	f1a9 0902 	sub.w	r9, r9, #2
 8000f56:	4421      	add	r1, r4
 8000f58:	eba1 010a 	sub.w	r1, r1, sl
 8000f5c:	b2bf      	uxth	r7, r7
 8000f5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f6a:	fb00 f808 	mul.w	r8, r0, r8
 8000f6e:	45b8      	cmp	r8, r7
 8000f70:	d907      	bls.n	8000f82 <__udivmoddi4+0x24a>
 8000f72:	19e7      	adds	r7, r4, r7
 8000f74:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f78:	d22e      	bcs.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d92c      	bls.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	4427      	add	r7, r4
 8000f82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f86:	eba7 0708 	sub.w	r7, r7, r8
 8000f8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8e:	454f      	cmp	r7, r9
 8000f90:	46c6      	mov	lr, r8
 8000f92:	4649      	mov	r1, r9
 8000f94:	d31a      	bcc.n	8000fcc <__udivmoddi4+0x294>
 8000f96:	d017      	beq.n	8000fc8 <__udivmoddi4+0x290>
 8000f98:	b15d      	cbz	r5, 8000fb2 <__udivmoddi4+0x27a>
 8000f9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000fa2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa6:	40f2      	lsrs	r2, r6
 8000fa8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fac:	40f7      	lsrs	r7, r6
 8000fae:	e9c5 2700 	strd	r2, r7, [r5]
 8000fb2:	2600      	movs	r6, #0
 8000fb4:	4631      	mov	r1, r6
 8000fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e70b      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0x60>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6fd      	b.n	8000dc4 <__udivmoddi4+0x8c>
 8000fc8:	4543      	cmp	r3, r8
 8000fca:	d2e5      	bcs.n	8000f98 <__udivmoddi4+0x260>
 8000fcc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fd0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7df      	b.n	8000f98 <__udivmoddi4+0x260>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e7d2      	b.n	8000f82 <__udivmoddi4+0x24a>
 8000fdc:	4660      	mov	r0, ip
 8000fde:	e78d      	b.n	8000efc <__udivmoddi4+0x1c4>
 8000fe0:	4681      	mov	r9, r0
 8000fe2:	e7b9      	b.n	8000f58 <__udivmoddi4+0x220>
 8000fe4:	4666      	mov	r6, ip
 8000fe6:	e775      	b.n	8000ed4 <__udivmoddi4+0x19c>
 8000fe8:	4630      	mov	r0, r6
 8000fea:	e74a      	b.n	8000e82 <__udivmoddi4+0x14a>
 8000fec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ff0:	4439      	add	r1, r7
 8000ff2:	e713      	b.n	8000e1c <__udivmoddi4+0xe4>
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	443c      	add	r4, r7
 8000ff8:	e724      	b.n	8000e44 <__udivmoddi4+0x10c>
 8000ffa:	bf00      	nop

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08c      	sub	sp, #48	; 0x30
 8001004:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8001006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	2319      	movs	r3, #25
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	463b      	mov	r3, r7
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2301      	movs	r3, #1
 8001016:	2288      	movs	r2, #136	; 0x88
 8001018:	21ec      	movs	r1, #236	; 0xec
 800101a:	4857      	ldr	r0, [pc, #348]	; (8001178 <TrimRead+0x178>)
 800101c:	f002 fdd2 	bl	8003bc4 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8001020:	463b      	mov	r3, r7
 8001022:	3319      	adds	r3, #25
 8001024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001028:	9202      	str	r2, [sp, #8]
 800102a:	2207      	movs	r2, #7
 800102c:	9201      	str	r2, [sp, #4]
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	22e1      	movs	r2, #225	; 0xe1
 8001034:	21ec      	movs	r1, #236	; 0xec
 8001036:	4850      	ldr	r0, [pc, #320]	; (8001178 <TrimRead+0x178>)
 8001038:	f002 fdc4 	bl	8003bc4 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 800103c:	787b      	ldrb	r3, [r7, #1]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	783b      	ldrb	r3, [r7, #0]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21b      	sxth	r3, r3
 800104a:	b29a      	uxth	r2, r3
 800104c:	4b4b      	ldr	r3, [pc, #300]	; (800117c <TrimRead+0x17c>)
 800104e:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	78bb      	ldrb	r3, [r7, #2]
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21a      	sxth	r2, r3
 800105e:	4b48      	ldr	r3, [pc, #288]	; (8001180 <TrimRead+0x180>)
 8001060:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001062:	797b      	ldrb	r3, [r7, #5]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	793b      	ldrb	r3, [r7, #4]
 800106a:	b21b      	sxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b21a      	sxth	r2, r3
 8001070:	4b44      	ldr	r3, [pc, #272]	; (8001184 <TrimRead+0x184>)
 8001072:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	797b      	ldrb	r3, [r7, #5]
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21b      	sxth	r3, r3
 8001082:	b29a      	uxth	r2, r3
 8001084:	4b40      	ldr	r3, [pc, #256]	; (8001188 <TrimRead+0x188>)
 8001086:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001088:	7a7b      	ldrb	r3, [r7, #9]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21a      	sxth	r2, r3
 800108e:	79bb      	ldrb	r3, [r7, #6]
 8001090:	b21b      	sxth	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b21a      	sxth	r2, r3
 8001096:	4b3d      	ldr	r3, [pc, #244]	; (800118c <TrimRead+0x18c>)
 8001098:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800109a:	7afb      	ldrb	r3, [r7, #11]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b21a      	sxth	r2, r3
 80010a0:	7abb      	ldrb	r3, [r7, #10]
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	4b39      	ldr	r3, [pc, #228]	; (8001190 <TrimRead+0x190>)
 80010aa:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 80010ac:	7b7b      	ldrb	r3, [r7, #13]
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	7b3b      	ldrb	r3, [r7, #12]
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	4b36      	ldr	r3, [pc, #216]	; (8001194 <TrimRead+0x194>)
 80010bc:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	7bbb      	ldrb	r3, [r7, #14]
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	4b32      	ldr	r3, [pc, #200]	; (8001198 <TrimRead+0x198>)
 80010ce:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80010d0:	7c7b      	ldrb	r3, [r7, #17]
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	7c3b      	ldrb	r3, [r7, #16]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	4313      	orrs	r3, r2
 80010dc:	b21a      	sxth	r2, r3
 80010de:	4b2f      	ldr	r3, [pc, #188]	; (800119c <TrimRead+0x19c>)
 80010e0:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80010e2:	7cfb      	ldrb	r3, [r7, #19]
 80010e4:	021b      	lsls	r3, r3, #8
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	7cbb      	ldrb	r3, [r7, #18]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	4313      	orrs	r3, r2
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <TrimRead+0x1a0>)
 80010f2:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80010f4:	7d7b      	ldrb	r3, [r7, #21]
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	7d3b      	ldrb	r3, [r7, #20]
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	4313      	orrs	r3, r2
 8001100:	b21a      	sxth	r2, r3
 8001102:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <TrimRead+0x1a4>)
 8001104:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	b21a      	sxth	r2, r3
 800110c:	7dbb      	ldrb	r3, [r7, #22]
 800110e:	b21b      	sxth	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	b21a      	sxth	r2, r3
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <TrimRead+0x1a8>)
 8001116:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8001118:	7e3b      	ldrb	r3, [r7, #24]
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <TrimRead+0x1ac>)
 800111e:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001120:	7ebb      	ldrb	r3, [r7, #26]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	7e7b      	ldrb	r3, [r7, #25]
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	b21a      	sxth	r2, r3
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <TrimRead+0x1b0>)
 8001130:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8001132:	7efb      	ldrb	r3, [r7, #27]
 8001134:	b29a      	uxth	r2, r3
 8001136:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <TrimRead+0x1b4>)
 8001138:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 800113a:	7f3b      	ldrb	r3, [r7, #28]
 800113c:	011b      	lsls	r3, r3, #4
 800113e:	b21a      	sxth	r2, r3
 8001140:	7f7b      	ldrb	r3, [r7, #29]
 8001142:	b21b      	sxth	r3, r3
 8001144:	f003 030f 	and.w	r3, r3, #15
 8001148:	b21b      	sxth	r3, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	b21a      	sxth	r2, r3
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <TrimRead+0x1b8>)
 8001150:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8001152:	7fbb      	ldrb	r3, [r7, #30]
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	b21a      	sxth	r2, r3
 8001158:	7f7b      	ldrb	r3, [r7, #29]
 800115a:	091b      	lsrs	r3, r3, #4
 800115c:	b2db      	uxtb	r3, r3
 800115e:	b21b      	sxth	r3, r3
 8001160:	4313      	orrs	r3, r2
 8001162:	b21a      	sxth	r2, r3
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <TrimRead+0x1bc>)
 8001166:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001168:	7ffb      	ldrb	r3, [r7, #31]
 800116a:	b21a      	sxth	r2, r3
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <TrimRead+0x1c0>)
 800116e:	801a      	strh	r2, [r3, #0]
}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000628 	.word	0x20000628
 800117c:	200005a2 	.word	0x200005a2
 8001180:	200005a6 	.word	0x200005a6
 8001184:	200005c6 	.word	0x200005c6
 8001188:	200005b8 	.word	0x200005b8
 800118c:	200005aa 	.word	0x200005aa
 8001190:	200005ba 	.word	0x200005ba
 8001194:	200005ac 	.word	0x200005ac
 8001198:	200005b0 	.word	0x200005b0
 800119c:	200005ec 	.word	0x200005ec
 80011a0:	200005a0 	.word	0x200005a0
 80011a4:	200005bc 	.word	0x200005bc
 80011a8:	200005c4 	.word	0x200005c4
 80011ac:	200005a8 	.word	0x200005a8
 80011b0:	200005f4 	.word	0x200005f4
 80011b4:	200005c2 	.word	0x200005c2
 80011b8:	200005a4 	.word	0x200005a4
 80011bc:	200005be 	.word	0x200005be
 80011c0:	200005ae 	.word	0x200005ae

080011c4 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af04      	add	r7, sp, #16
 80011ca:	4604      	mov	r4, r0
 80011cc:	4608      	mov	r0, r1
 80011ce:	4611      	mov	r1, r2
 80011d0:	461a      	mov	r2, r3
 80011d2:	4623      	mov	r3, r4
 80011d4:	71fb      	strb	r3, [r7, #7]
 80011d6:	4603      	mov	r3, r0
 80011d8:	71bb      	strb	r3, [r7, #6]
 80011da:	460b      	mov	r3, r1
 80011dc:	717b      	strb	r3, [r7, #5]
 80011de:	4613      	mov	r3, r2
 80011e0:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80011e2:	f7ff ff0d 	bl	8001000 <TrimRead>


	uint8_t datatowrite = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80011ee:	23b6      	movs	r3, #182	; 0xb6
 80011f0:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	2301      	movs	r3, #1
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	f107 030f 	add.w	r3, r7, #15
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2301      	movs	r3, #1
 8001204:	22e0      	movs	r2, #224	; 0xe0
 8001206:	21ec      	movs	r1, #236	; 0xec
 8001208:	4858      	ldr	r0, [pc, #352]	; (800136c <BME280_Config+0x1a8>)
 800120a:	f002 fbe1 	bl	80039d0 <HAL_I2C_Mem_Write>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d002      	beq.n	800121a <BME280_Config+0x56>
	{
		return -1;
 8001214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001218:	e0a3      	b.n	8001362 <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 800121a:	2064      	movs	r0, #100	; 0x64
 800121c:	f001 fefc 	bl	8003018 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001220:	797b      	ldrb	r3, [r7, #5]
 8001222:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2301      	movs	r3, #1
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	f107 030f 	add.w	r3, r7, #15
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	22f2      	movs	r2, #242	; 0xf2
 8001238:	21ec      	movs	r1, #236	; 0xec
 800123a:	484c      	ldr	r0, [pc, #304]	; (800136c <BME280_Config+0x1a8>)
 800123c:	f002 fbc8 	bl	80039d0 <HAL_I2C_Mem_Write>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <BME280_Config+0x88>
	{
		return -1;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800124a:	e08a      	b.n	8001362 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 800124c:	2064      	movs	r0, #100	; 0x64
 800124e:	f001 fee3 	bl	8003018 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8001252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	2301      	movs	r3, #1
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	f107 030e 	add.w	r3, r7, #14
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	22f2      	movs	r2, #242	; 0xf2
 8001266:	21ec      	movs	r1, #236	; 0xec
 8001268:	4840      	ldr	r0, [pc, #256]	; (800136c <BME280_Config+0x1a8>)
 800126a:	f002 fcab 	bl	8003bc4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800126e:	7bba      	ldrb	r2, [r7, #14]
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	429a      	cmp	r2, r3
 8001274:	d002      	beq.n	800127c <BME280_Config+0xb8>
	{
		return -1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800127a:	e072      	b.n	8001362 <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 800127c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001280:	015b      	lsls	r3, r3, #5
 8001282:	b25a      	sxtb	r2, r3
 8001284:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	b25b      	sxtb	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b25b      	sxtb	r3, r3
 8001290:	b2db      	uxtb	r3, r3
 8001292:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001294:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001298:	9302      	str	r3, [sp, #8]
 800129a:	2301      	movs	r3, #1
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	f107 030f 	add.w	r3, r7, #15
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2301      	movs	r3, #1
 80012a6:	22f5      	movs	r2, #245	; 0xf5
 80012a8:	21ec      	movs	r1, #236	; 0xec
 80012aa:	4830      	ldr	r0, [pc, #192]	; (800136c <BME280_Config+0x1a8>)
 80012ac:	f002 fb90 	bl	80039d0 <HAL_I2C_Mem_Write>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <BME280_Config+0xf8>
	{
		return -1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ba:	e052      	b.n	8001362 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012bc:	2064      	movs	r0, #100	; 0x64
 80012be:	f001 feab 	bl	8003018 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	2301      	movs	r3, #1
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	f107 030e 	add.w	r3, r7, #14
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	22f5      	movs	r2, #245	; 0xf5
 80012d6:	21ec      	movs	r1, #236	; 0xec
 80012d8:	4824      	ldr	r0, [pc, #144]	; (800136c <BME280_Config+0x1a8>)
 80012da:	f002 fc73 	bl	8003bc4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012de:	7bba      	ldrb	r2, [r7, #14]
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d002      	beq.n	80012ec <BME280_Config+0x128>
	{
		return -1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ea:	e03a      	b.n	8001362 <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	015b      	lsls	r3, r3, #5
 80012f0:	b25a      	sxtb	r2, r3
 80012f2:	79bb      	ldrb	r3, [r7, #6]
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b25a      	sxtb	r2, r3
 80012fc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001300:	4313      	orrs	r3, r2
 8001302:	b25b      	sxtb	r3, r3
 8001304:	b2db      	uxtb	r3, r3
 8001306:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001308:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130c:	9302      	str	r3, [sp, #8]
 800130e:	2301      	movs	r3, #1
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	f107 030f 	add.w	r3, r7, #15
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2301      	movs	r3, #1
 800131a:	22f4      	movs	r2, #244	; 0xf4
 800131c:	21ec      	movs	r1, #236	; 0xec
 800131e:	4813      	ldr	r0, [pc, #76]	; (800136c <BME280_Config+0x1a8>)
 8001320:	f002 fb56 	bl	80039d0 <HAL_I2C_Mem_Write>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <BME280_Config+0x16c>
	{
		return -1;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800132e:	e018      	b.n	8001362 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001330:	2064      	movs	r0, #100	; 0x64
 8001332:	f001 fe71 	bl	8003018 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	9302      	str	r3, [sp, #8]
 800133c:	2301      	movs	r3, #1
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	f107 030e 	add.w	r3, r7, #14
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2301      	movs	r3, #1
 8001348:	22f4      	movs	r2, #244	; 0xf4
 800134a:	21ec      	movs	r1, #236	; 0xec
 800134c:	4807      	ldr	r0, [pc, #28]	; (800136c <BME280_Config+0x1a8>)
 800134e:	f002 fc39 	bl	8003bc4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001352:	7bba      	ldrb	r2, [r7, #14]
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	429a      	cmp	r2, r3
 8001358:	d002      	beq.n	8001360 <BME280_Config+0x19c>
	{
		return -1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800135e:	e000      	b.n	8001362 <BME280_Config+0x19e>
	}

	return 0;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bd90      	pop	{r4, r7, pc}
 800136a:	bf00      	nop
 800136c:	20000628 	.word	0x20000628

08001370 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	9302      	str	r3, [sp, #8]
 800137c:	2301      	movs	r3, #1
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <BMEReadRaw+0x8c>)
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2301      	movs	r3, #1
 8001386:	22d0      	movs	r2, #208	; 0xd0
 8001388:	21ec      	movs	r1, #236	; 0xec
 800138a:	481d      	ldr	r0, [pc, #116]	; (8001400 <BMEReadRaw+0x90>)
 800138c:	f002 fc1a 	bl	8003bc4 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <BMEReadRaw+0x8c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b60      	cmp	r3, #96	; 0x60
 8001396:	d12a      	bne.n	80013ee <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	2308      	movs	r3, #8
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	463b      	mov	r3, r7
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	22f7      	movs	r2, #247	; 0xf7
 80013aa:	21ec      	movs	r1, #236	; 0xec
 80013ac:	4814      	ldr	r0, [pc, #80]	; (8001400 <BMEReadRaw+0x90>)
 80013ae:	f002 fc09 	bl	8003bc4 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80013b2:	783b      	ldrb	r3, [r7, #0]
 80013b4:	031a      	lsls	r2, r3, #12
 80013b6:	787b      	ldrb	r3, [r7, #1]
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	4313      	orrs	r3, r2
 80013bc:	78ba      	ldrb	r2, [r7, #2]
 80013be:	0912      	lsrs	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	4313      	orrs	r3, r2
 80013c4:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <BMEReadRaw+0x94>)
 80013c6:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	031a      	lsls	r2, r3, #12
 80013cc:	793b      	ldrb	r3, [r7, #4]
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	4313      	orrs	r3, r2
 80013d2:	797a      	ldrb	r2, [r7, #5]
 80013d4:	0912      	lsrs	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	4313      	orrs	r3, r2
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <BMEReadRaw+0x98>)
 80013dc:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80013de:	79bb      	ldrb	r3, [r7, #6]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	79fa      	ldrb	r2, [r7, #7]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	4a09      	ldr	r2, [pc, #36]	; (800140c <BMEReadRaw+0x9c>)
 80013e8:	6013      	str	r3, [r2, #0]

		return 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	e001      	b.n	80013f2 <BMEReadRaw+0x82>
	}

	else return -1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200005c0 	.word	0x200005c0
 8001400:	20000628 	.word	0x20000628
 8001404:	200005f0 	.word	0x200005f0
 8001408:	200005b4 	.word	0x200005b4
 800140c:	200005fc 	.word	0x200005fc

08001410 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	10da      	asrs	r2, r3, #3
 800141c:	4b19      	ldr	r3, [pc, #100]	; (8001484 <BME280_compensate_T_int32+0x74>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	4a18      	ldr	r2, [pc, #96]	; (8001488 <BME280_compensate_T_int32+0x78>)
 8001426:	f9b2 2000 	ldrsh.w	r2, [r2]
 800142a:	fb02 f303 	mul.w	r3, r2, r3
 800142e:	12db      	asrs	r3, r3, #11
 8001430:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	111b      	asrs	r3, r3, #4
 8001436:	4a13      	ldr	r2, [pc, #76]	; (8001484 <BME280_compensate_T_int32+0x74>)
 8001438:	8812      	ldrh	r2, [r2, #0]
 800143a:	1a9b      	subs	r3, r3, r2
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	1112      	asrs	r2, r2, #4
 8001440:	4910      	ldr	r1, [pc, #64]	; (8001484 <BME280_compensate_T_int32+0x74>)
 8001442:	8809      	ldrh	r1, [r1, #0]
 8001444:	1a52      	subs	r2, r2, r1
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	131b      	asrs	r3, r3, #12
 800144c:	4a0f      	ldr	r2, [pc, #60]	; (800148c <BME280_compensate_T_int32+0x7c>)
 800144e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001452:	fb02 f303 	mul.w	r3, r2, r3
 8001456:	139b      	asrs	r3, r3, #14
 8001458:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4413      	add	r3, r2
 8001460:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <BME280_compensate_T_int32+0x80>)
 8001462:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <BME280_compensate_T_int32+0x80>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3380      	adds	r3, #128	; 0x80
 8001470:	121b      	asrs	r3, r3, #8
 8001472:	60fb      	str	r3, [r7, #12]
	return T;
 8001474:	68fb      	ldr	r3, [r7, #12]
}
 8001476:	4618      	mov	r0, r3
 8001478:	371c      	adds	r7, #28
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	200005a2 	.word	0x200005a2
 8001488:	200005a6 	.word	0x200005a6
 800148c:	200005c6 	.word	0x200005c6
 8001490:	200005f8 	.word	0x200005f8

08001494 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001498:	b09a      	sub	sp, #104	; 0x68
 800149a:	af00      	add	r7, sp, #0
 800149c:	64f8      	str	r0, [r7, #76]	; 0x4c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 800149e:	4b6b      	ldr	r3, [pc, #428]	; (800164c <BME280_compensate_P_int64+0x1b8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014a8:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 80014ac:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 80014b0:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	var2 = var1 * var1 * (int64_t)dig_P6;
 80014b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014b8:	fb03 f102 	mul.w	r1, r3, r2
 80014bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014c0:	fb03 f302 	mul.w	r3, r3, r2
 80014c4:	18ca      	adds	r2, r1, r3
 80014c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014c8:	fba3 4503 	umull	r4, r5, r3, r3
 80014cc:	1953      	adds	r3, r2, r5
 80014ce:	461d      	mov	r5, r3
 80014d0:	4b5f      	ldr	r3, [pc, #380]	; (8001650 <BME280_compensate_P_int64+0x1bc>)
 80014d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014dc:	fb02 f005 	mul.w	r0, r2, r5
 80014e0:	fb04 f103 	mul.w	r1, r4, r3
 80014e4:	4401      	add	r1, r0
 80014e6:	fba4 2302 	umull	r2, r3, r4, r2
 80014ea:	4419      	add	r1, r3
 80014ec:	460b      	mov	r3, r1
 80014ee:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80014f2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80014f6:	4b57      	ldr	r3, [pc, #348]	; (8001654 <BME280_compensate_P_int64+0x1c0>)
 80014f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001502:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001504:	fb03 f001 	mul.w	r0, r3, r1
 8001508:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800150a:	fb02 f101 	mul.w	r1, r2, r1
 800150e:	4408      	add	r0, r1
 8001510:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001512:	fba1 2302 	umull	r2, r3, r1, r2
 8001516:	18c1      	adds	r1, r0, r3
 8001518:	460b      	mov	r3, r1
 800151a:	f04f 0000 	mov.w	r0, #0
 800151e:	f04f 0100 	mov.w	r1, #0
 8001522:	0459      	lsls	r1, r3, #17
 8001524:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001528:	0450      	lsls	r0, r2, #17
 800152a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800152e:	eb12 0800 	adds.w	r8, r2, r0
 8001532:	eb43 0901 	adc.w	r9, r3, r1
 8001536:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	var2 = var2 + (((int64_t)dig_P4)<<35);
 800153a:	4b47      	ldr	r3, [pc, #284]	; (8001658 <BME280_compensate_P_int64+0x1c4>)
 800153c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001540:	b21a      	sxth	r2, r3
 8001542:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001546:	f04f 0000 	mov.w	r0, #0
 800154a:	f04f 0100 	mov.w	r1, #0
 800154e:	00d1      	lsls	r1, r2, #3
 8001550:	2000      	movs	r0, #0
 8001552:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001556:	1814      	adds	r4, r2, r0
 8001558:	61bc      	str	r4, [r7, #24]
 800155a:	414b      	adcs	r3, r1
 800155c:	61fb      	str	r3, [r7, #28]
 800155e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001562:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001566:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800156a:	fb03 f102 	mul.w	r1, r3, r2
 800156e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001572:	fb03 f302 	mul.w	r3, r3, r2
 8001576:	18ca      	adds	r2, r1, r3
 8001578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800157a:	fba3 4503 	umull	r4, r5, r3, r3
 800157e:	1953      	adds	r3, r2, r5
 8001580:	461d      	mov	r5, r3
 8001582:	4b36      	ldr	r3, [pc, #216]	; (800165c <BME280_compensate_P_int64+0x1c8>)
 8001584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001588:	b21a      	sxth	r2, r3
 800158a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800158e:	fb02 f005 	mul.w	r0, r2, r5
 8001592:	fb04 f103 	mul.w	r1, r4, r3
 8001596:	4401      	add	r1, r0
 8001598:	fba4 2302 	umull	r2, r3, r4, r2
 800159c:	4419      	add	r1, r3
 800159e:	460b      	mov	r3, r1
 80015a0:	f04f 0800 	mov.w	r8, #0
 80015a4:	f04f 0900 	mov.w	r9, #0
 80015a8:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80015ac:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 80015b0:	ea4f 2923 	mov.w	r9, r3, asr #8
 80015b4:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <BME280_compensate_P_int64+0x1cc>)
 80015b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015c0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80015c2:	fb03 f001 	mul.w	r0, r3, r1
 80015c6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80015c8:	fb02 f101 	mul.w	r1, r2, r1
 80015cc:	1844      	adds	r4, r0, r1
 80015ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80015d0:	fba1 0102 	umull	r0, r1, r1, r2
 80015d4:	1863      	adds	r3, r4, r1
 80015d6:	4619      	mov	r1, r3
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	030b      	lsls	r3, r1, #12
 80015e2:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 80015e6:	0302      	lsls	r2, r0, #12
 80015e8:	eb18 0102 	adds.w	r1, r8, r2
 80015ec:	6139      	str	r1, [r7, #16]
 80015ee:	eb49 0303 	adc.w	r3, r9, r3
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80015f8:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80015fc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001600:	1c11      	adds	r1, r2, #0
 8001602:	6439      	str	r1, [r7, #64]	; 0x40
 8001604:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8001608:	647b      	str	r3, [r7, #68]	; 0x44
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <BME280_compensate_P_int64+0x1d0>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	b29a      	uxth	r2, r3
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001618:	4629      	mov	r1, r5
 800161a:	fb02 f001 	mul.w	r0, r2, r1
 800161e:	4621      	mov	r1, r4
 8001620:	fb01 f103 	mul.w	r1, r1, r3
 8001624:	4401      	add	r1, r0
 8001626:	4620      	mov	r0, r4
 8001628:	fba0 2302 	umull	r2, r3, r0, r2
 800162c:	4419      	add	r1, r3
 800162e:	460b      	mov	r3, r1
 8001630:	f04f 0000 	mov.w	r0, #0
 8001634:	f04f 0100 	mov.w	r1, #0
 8001638:	1058      	asrs	r0, r3, #1
 800163a:	17d9      	asrs	r1, r3, #31
 800163c:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
	if (var1 == 0)
 8001640:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001644:	4313      	orrs	r3, r2
 8001646:	d10f      	bne.n	8001668 <BME280_compensate_P_int64+0x1d4>
	{
		return 0; // avoid exception caused by division by zero
 8001648:	2300      	movs	r3, #0
 800164a:	e0ef      	b.n	800182c <BME280_compensate_P_int64+0x398>
 800164c:	200005f8 	.word	0x200005f8
 8001650:	200005ec 	.word	0x200005ec
 8001654:	200005b0 	.word	0x200005b0
 8001658:	200005ac 	.word	0x200005ac
 800165c:	200005ba 	.word	0x200005ba
 8001660:	200005aa 	.word	0x200005aa
 8001664:	200005b8 	.word	0x200005b8
	}
	p = 1048576-adc_P;
 8001668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800166a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800166e:	461a      	mov	r2, r3
 8001670:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001674:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	p = (((p<<31)-var2)*3125)/var1;
 8001678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800167a:	105b      	asrs	r3, r3, #1
 800167c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800167e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001680:	07db      	lsls	r3, r3, #31
 8001682:	63bb      	str	r3, [r7, #56]	; 0x38
 8001684:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001688:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800168c:	4621      	mov	r1, r4
 800168e:	ebb1 0a02 	subs.w	sl, r1, r2
 8001692:	4629      	mov	r1, r5
 8001694:	eb61 0b03 	sbc.w	fp, r1, r3
 8001698:	4652      	mov	r2, sl
 800169a:	465b      	mov	r3, fp
 800169c:	1891      	adds	r1, r2, r2
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	415b      	adcs	r3, r3
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016a8:	eb12 020a 	adds.w	r2, r2, sl
 80016ac:	eb43 030b 	adc.w	r3, r3, fp
 80016b0:	f04f 0000 	mov.w	r0, #0
 80016b4:	f04f 0100 	mov.w	r1, #0
 80016b8:	0199      	lsls	r1, r3, #6
 80016ba:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 80016be:	0190      	lsls	r0, r2, #6
 80016c0:	1812      	adds	r2, r2, r0
 80016c2:	eb41 0303 	adc.w	r3, r1, r3
 80016c6:	f04f 0000 	mov.w	r0, #0
 80016ca:	f04f 0100 	mov.w	r1, #0
 80016ce:	0099      	lsls	r1, r3, #2
 80016d0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80016d4:	0090      	lsls	r0, r2, #2
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	eb12 020a 	adds.w	r2, r2, sl
 80016de:	eb43 030b 	adc.w	r3, r3, fp
 80016e2:	f04f 0000 	mov.w	r0, #0
 80016e6:	f04f 0100 	mov.w	r1, #0
 80016ea:	0099      	lsls	r1, r3, #2
 80016ec:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80016f0:	0090      	lsls	r0, r2, #2
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	eb12 010a 	adds.w	r1, r2, sl
 80016fa:	6339      	str	r1, [r7, #48]	; 0x30
 80016fc:	eb43 030b 	adc.w	r3, r3, fp
 8001700:	637b      	str	r3, [r7, #52]	; 0x34
 8001702:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001706:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800170a:	f7ff faad 	bl	8000c68 <__aeabi_ldivmod>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001716:	4b48      	ldr	r3, [pc, #288]	; (8001838 <BME280_compensate_P_int64+0x3a4>)
 8001718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171c:	b218      	sxth	r0, r3
 800171e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001722:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	0b62      	lsrs	r2, r4, #13
 8001730:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001734:	136b      	asrs	r3, r5, #13
 8001736:	fb02 f501 	mul.w	r5, r2, r1
 800173a:	fb00 f403 	mul.w	r4, r0, r3
 800173e:	442c      	add	r4, r5
 8001740:	fba0 0102 	umull	r0, r1, r0, r2
 8001744:	1863      	adds	r3, r4, r1
 8001746:	4619      	mov	r1, r3
 8001748:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	0b62      	lsrs	r2, r4, #13
 8001756:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 800175a:	136b      	asrs	r3, r5, #13
 800175c:	fb02 f501 	mul.w	r5, r2, r1
 8001760:	fb00 f403 	mul.w	r4, r0, r3
 8001764:	442c      	add	r4, r5
 8001766:	fba0 0102 	umull	r0, r1, r0, r2
 800176a:	1863      	adds	r3, r4, r1
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	0e42      	lsrs	r2, r0, #25
 8001778:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800177c:	164b      	asrs	r3, r1, #25
 800177e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001782:	4b2e      	ldr	r3, [pc, #184]	; (800183c <BME280_compensate_P_int64+0x3a8>)
 8001784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001788:	b21a      	sxth	r2, r3
 800178a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800178e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001790:	fb03 f001 	mul.w	r0, r3, r1
 8001794:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001796:	fb02 f101 	mul.w	r1, r2, r1
 800179a:	1844      	adds	r4, r0, r1
 800179c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800179e:	fba1 0102 	umull	r0, r1, r1, r2
 80017a2:	1863      	adds	r3, r4, r1
 80017a4:	4619      	mov	r1, r3
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	0cc2      	lsrs	r2, r0, #19
 80017b0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80017b4:	14cb      	asrs	r3, r1, #19
 80017b6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 80017ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80017be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80017c2:	1884      	adds	r4, r0, r2
 80017c4:	62bc      	str	r4, [r7, #40]	; 0x28
 80017c6:	eb41 0303 	adc.w	r3, r1, r3
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80017d0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80017d4:	4621      	mov	r1, r4
 80017d6:	1889      	adds	r1, r1, r2
 80017d8:	6239      	str	r1, [r7, #32]
 80017da:	4629      	mov	r1, r5
 80017dc:	eb43 0101 	adc.w	r1, r3, r1
 80017e0:	6279      	str	r1, [r7, #36]	; 0x24
 80017e2:	f04f 0000 	mov.w	r0, #0
 80017e6:	f04f 0100 	mov.w	r1, #0
 80017ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017ee:	4623      	mov	r3, r4
 80017f0:	0a18      	lsrs	r0, r3, #8
 80017f2:	462b      	mov	r3, r5
 80017f4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80017f8:	462b      	mov	r3, r5
 80017fa:	1219      	asrs	r1, r3, #8
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <BME280_compensate_P_int64+0x3ac>)
 80017fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001802:	b21c      	sxth	r4, r3
 8001804:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	012b      	lsls	r3, r5, #4
 8001812:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001816:	0122      	lsls	r2, r4, #4
 8001818:	1884      	adds	r4, r0, r2
 800181a:	603c      	str	r4, [r7, #0]
 800181c:	eb41 0303 	adc.w	r3, r1, r3
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001826:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	return (uint32_t)p;
 800182a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800182c:	4618      	mov	r0, r3
 800182e:	3768      	adds	r7, #104	; 0x68
 8001830:	46bd      	mov	sp, r7
 8001832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001836:	bf00      	nop
 8001838:	200005c4 	.word	0x200005c4
 800183c:	200005bc 	.word	0x200005bc
 8001840:	200005a0 	.word	0x200005a0

08001844 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 800184c:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <bme280_compensate_H_int32+0xbc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001854:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	039a      	lsls	r2, r3, #14
 800185a:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <bme280_compensate_H_int32+0xc0>)
 800185c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001860:	051b      	lsls	r3, r3, #20
 8001862:	1ad2      	subs	r2, r2, r3
 8001864:	4b28      	ldr	r3, [pc, #160]	; (8001908 <bme280_compensate_H_int32+0xc4>)
 8001866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186a:	4619      	mov	r1, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	fb03 f301 	mul.w	r3, r3, r1
 8001872:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001874:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001878:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 800187a:	4a24      	ldr	r2, [pc, #144]	; (800190c <bme280_compensate_H_int32+0xc8>)
 800187c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001880:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	fb02 f201 	mul.w	r2, r2, r1
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001888:	1292      	asrs	r2, r2, #10
 800188a:	4921      	ldr	r1, [pc, #132]	; (8001910 <bme280_compensate_H_int32+0xcc>)
 800188c:	8809      	ldrh	r1, [r1, #0]
 800188e:	4608      	mov	r0, r1
 8001890:	68f9      	ldr	r1, [r7, #12]
 8001892:	fb01 f100 	mul.w	r1, r1, r0
 8001896:	12c9      	asrs	r1, r1, #11
 8001898:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 800189c:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 80018a0:	1292      	asrs	r2, r2, #10
 80018a2:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80018a6:	491b      	ldr	r1, [pc, #108]	; (8001914 <bme280_compensate_H_int32+0xd0>)
 80018a8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80018ac:	fb01 f202 	mul.w	r2, r1, r2
 80018b0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 80018b4:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80018b6:	fb02 f303 	mul.w	r3, r2, r3
 80018ba:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	13db      	asrs	r3, r3, #15
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	13d2      	asrs	r2, r2, #15
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 80018ca:	4a13      	ldr	r2, [pc, #76]	; (8001918 <bme280_compensate_H_int32+0xd4>)
 80018cc:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 80018d2:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80018e0:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80018e8:	bfa8      	it	ge
 80018ea:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80018ee:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	131b      	asrs	r3, r3, #12
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	200005f8 	.word	0x200005f8
 8001904:	200005a4 	.word	0x200005a4
 8001908:	200005be 	.word	0x200005be
 800190c:	200005ae 	.word	0x200005ae
 8001910:	200005c2 	.word	0x200005c2
 8001914:	200005f4 	.word	0x200005f4
 8001918:	200005a8 	.word	0x200005a8

0800191c <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001920:	f7ff fd26 	bl	8001370 <BMEReadRaw>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d163      	bne.n	80019f2 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 800192a:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <BME280_Measure+0xf4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001932:	d104      	bne.n	800193e <BME280_Measure+0x22>
 8001934:	4b37      	ldr	r3, [pc, #220]	; (8001a14 <BME280_Measure+0xf8>)
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	e016      	b.n	800196c <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 800193e:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <BME280_Measure+0xf4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fd64 	bl	8001410 <BME280_compensate_T_int32>
 8001948:	4603      	mov	r3, r0
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fdfa 	bl	8000544 <__aeabi_i2d>
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <BME280_Measure+0xfc>)
 8001956:	f7fe ff89 	bl	800086c <__aeabi_ddiv>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	f7ff f931 	bl	8000bc8 <__aeabi_d2f>
 8001966:	4603      	mov	r3, r0
 8001968:	4a2a      	ldr	r2, [pc, #168]	; (8001a14 <BME280_Measure+0xf8>)
 800196a:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 800196c:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <BME280_Measure+0x100>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001974:	d104      	bne.n	8001980 <BME280_Measure+0x64>
 8001976:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <BME280_Measure+0x104>)
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	e016      	b.n	80019ae <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001980:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <BME280_Measure+0x100>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fd85 	bl	8001494 <BME280_compensate_P_int64>
 800198a:	4603      	mov	r3, r0
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fdc9 	bl	8000524 <__aeabi_ui2d>
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <BME280_Measure+0x108>)
 8001998:	f7fe ff68 	bl	800086c <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7ff f910 	bl	8000bc8 <__aeabi_d2f>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <BME280_Measure+0x104>)
 80019ac:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 80019ae:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <BME280_Measure+0x10c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019b6:	d104      	bne.n	80019c2 <BME280_Measure+0xa6>
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <BME280_Measure+0x110>)
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 80019c0:	e023      	b.n	8001a0a <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 80019c2:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <BME280_Measure+0x10c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ff3c 	bl	8001844 <bme280_compensate_H_int32>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fda8 	bl	8000524 <__aeabi_ui2d>
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <BME280_Measure+0x114>)
 80019da:	f7fe ff47 	bl	800086c <__aeabi_ddiv>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff f8ef 	bl	8000bc8 <__aeabi_d2f>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4a0f      	ldr	r2, [pc, #60]	; (8001a2c <BME280_Measure+0x110>)
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	e00b      	b.n	8001a0a <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <BME280_Measure+0x110>)
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <BME280_Measure+0x110>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <BME280_Measure+0x104>)
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <BME280_Measure+0x104>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a03      	ldr	r2, [pc, #12]	; (8001a14 <BME280_Measure+0xf8>)
 8001a08:	6013      	str	r3, [r2, #0]
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200005b4 	.word	0x200005b4
 8001a14:	20000624 	.word	0x20000624
 8001a18:	40590000 	.word	0x40590000
 8001a1c:	200005f0 	.word	0x200005f0
 8001a20:	20000718 	.word	0x20000718
 8001a24:	40700000 	.word	0x40700000
 8001a28:	200005fc 	.word	0x200005fc
 8001a2c:	2000071c 	.word	0x2000071c
 8001a30:	40900000 	.word	0x40900000

08001a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a38:	b096      	sub	sp, #88	; 0x58
 8001a3a:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a3c:	f001 fa7a 	bl	8002f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a40:	f000 f876 	bl	8001b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a44:	f000 f9b4 	bl	8001db0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a48:	f000 f8f4 	bl	8001c34 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001a4c:	f000 f920 	bl	8001c90 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001a50:	f000 f94e 	bl	8001cf0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001a54:	f009 f912 	bl	800ac7c <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8001a58:	f000 f980 	bl	8001d5c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  get_ROMid();
 8001a5c:	f000 fe6e 	bl	800273c <get_ROMid>
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001a60:	2304      	movs	r3, #4
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	2300      	movs	r3, #0
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2303      	movs	r3, #3
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2105      	movs	r1, #5
 8001a6e:	2002      	movs	r0, #2
 8001a70:	f7ff fba8 	bl	80011c4 <BME280_Config>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	uint8_t msg_buffer[64];

	get_Temperature();
 8001a74:	f000 ff20 	bl	80028b8 <get_Temperature>
	snprintf(msg_buffer, sizeof(msg_buffer), "DS18B20 temp = %.1f\r\n", Temp[0]);
 8001a78:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <main+0xe0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fd73 	bl	8000568 <__aeabi_f2d>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4638      	mov	r0, r7
 8001a88:	e9cd 2300 	strd	r2, r3, [sp]
 8001a8c:	4a22      	ldr	r2, [pc, #136]	; (8001b18 <main+0xe4>)
 8001a8e:	2140      	movs	r1, #64	; 0x40
 8001a90:	f00a face 	bl	800c030 <sniprintf>
	CDC_Transmit_FS((uint8_t*)msg_buffer, strlen(msg_buffer));
 8001a94:	463b      	mov	r3, r7
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fba4 	bl	80001e4 <strlen>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f009 f9be 	bl	800ae24 <CDC_Transmit_FS>

	BME280_Measure();
 8001aa8:	f7ff ff38 	bl	800191c <BME280_Measure>
	snprintf(msg_buffer, sizeof(msg_buffer), "BME280 temp = %.1f, pressure = %.1f, humidity = %.1f\r\n", Temperature, Pressure, Humidity);
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <main+0xe8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fd59 	bl	8000568 <__aeabi_f2d>
 8001ab6:	4604      	mov	r4, r0
 8001ab8:	460d      	mov	r5, r1
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <main+0xec>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fd52 	bl	8000568 <__aeabi_f2d>
 8001ac4:	4680      	mov	r8, r0
 8001ac6:	4689      	mov	r9, r1
 8001ac8:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <main+0xf0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fd4b 	bl	8000568 <__aeabi_f2d>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4638      	mov	r0, r7
 8001ad8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001adc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ae0:	e9cd 4500 	strd	r4, r5, [sp]
 8001ae4:	4a10      	ldr	r2, [pc, #64]	; (8001b28 <main+0xf4>)
 8001ae6:	2140      	movs	r1, #64	; 0x40
 8001ae8:	f00a faa2 	bl	800c030 <sniprintf>
	CDC_Transmit_FS((uint8_t*)msg_buffer, strlen(msg_buffer));
 8001aec:	463b      	mov	r3, r7
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fb78 	bl	80001e4 <strlen>
 8001af4:	4602      	mov	r2, r0
 8001af6:	463b      	mov	r3, r7
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f009 f992 	bl	800ae24 <CDC_Transmit_FS>

	HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_12);
 8001b00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b04:	4809      	ldr	r0, [pc, #36]	; (8001b2c <main+0xf8>)
 8001b06:	f001 fe04 	bl	8003712 <HAL_GPIO_TogglePin>
	HAL_Delay (2000);   /* Insert delay 1 s */
 8001b0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b0e:	f001 fa83 	bl	8003018 <HAL_Delay>
  {
 8001b12:	e7af      	b.n	8001a74 <main+0x40>
 8001b14:	20000780 	.word	0x20000780
 8001b18:	0800e508 	.word	0x0800e508
 8001b1c:	20000624 	.word	0x20000624
 8001b20:	20000718 	.word	0x20000718
 8001b24:	2000071c 	.word	0x2000071c
 8001b28:	0800e520 	.word	0x0800e520
 8001b2c:	40020c00 	.word	0x40020c00

08001b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b098      	sub	sp, #96	; 0x60
 8001b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b3a:	2230      	movs	r2, #48	; 0x30
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f009 fe04 	bl	800b74c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <SystemClock_Config+0xfc>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a30      	ldr	r2, [pc, #192]	; (8001c2c <SystemClock_Config+0xfc>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <SystemClock_Config+0xfc>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <SystemClock_Config+0x100>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a2a      	ldr	r2, [pc, #168]	; (8001c30 <SystemClock_Config+0x100>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <SystemClock_Config+0x100>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ba2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ba8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bae:	2308      	movs	r3, #8
 8001bb0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bb2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001bb6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bbc:	2307      	movs	r3, #7
 8001bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f004 fba3 	bl	8006310 <HAL_RCC_OscConfig>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001bd0:	f000 f9ec 	bl	8001fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bd4:	230f      	movs	r3, #15
 8001bd6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001be0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	2105      	movs	r1, #5
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f004 fe04 	bl	8006800 <HAL_RCC_ClockConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001bfe:	f000 f9d5 	bl	8001fac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001c02:	2301      	movs	r3, #1
 8001c04:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001c06:	23c0      	movs	r3, #192	; 0xc0
 8001c08:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 fff0 	bl	8006bf8 <HAL_RCCEx_PeriphCLKConfig>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001c1e:	f000 f9c5 	bl	8001fac <Error_Handler>
  }
}
 8001c22:	bf00      	nop
 8001c24:	3760      	adds	r7, #96	; 0x60
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40007000 	.word	0x40007000

08001c34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c3a:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <MX_I2C1_Init+0x54>)
 8001c3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c40:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <MX_I2C1_Init+0x58>)
 8001c42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c64:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c70:	4804      	ldr	r0, [pc, #16]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c72:	f001 fd69 	bl	8003748 <HAL_I2C_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c7c:	f000 f996 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000628 	.word	0x20000628
 8001c88:	40005400 	.word	0x40005400
 8001c8c:	000186a0 	.word	0x000186a0

08001c90 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <MX_I2S3_Init+0x54>)
 8001c96:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <MX_I2S3_Init+0x58>)
 8001c98:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <MX_I2S3_Init+0x54>)
 8001c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <MX_I2S3_Init+0x54>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <MX_I2S3_Init+0x54>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <MX_I2S3_Init+0x54>)
 8001cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <MX_I2S3_Init+0x54>)
 8001cb8:	4a0c      	ldr	r2, [pc, #48]	; (8001cec <MX_I2S3_Init+0x5c>)
 8001cba:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <MX_I2S3_Init+0x54>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <MX_I2S3_Init+0x54>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <MX_I2S3_Init+0x54>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001cce:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_I2S3_Init+0x54>)
 8001cd0:	f002 fcfa 	bl	80046c8 <HAL_I2S_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001cda:	f000 f967 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000720 	.word	0x20000720
 8001ce8:	40003c00 	.word	0x40003c00
 8001cec:	00017700 	.word	0x00017700

08001cf0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001cf6:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <MX_SPI1_Init+0x68>)
 8001cf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001cfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d02:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d28:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d3c:	220a      	movs	r2, #10
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d40:	4804      	ldr	r0, [pc, #16]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d42:	f005 f899 	bl	8006e78 <HAL_SPI_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d4c:	f000 f92e 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	2000067c 	.word	0x2000067c
 8001d58:	40013000 	.word	0x40013000

08001d5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d62:	4a12      	ldr	r2, [pc, #72]	; (8001dac <MX_USART2_UART_Init+0x50>)
 8001d64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d82:	220c      	movs	r2, #12
 8001d84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8001d92:	4805      	ldr	r0, [pc, #20]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d94:	f005 f8f9 	bl	8006f8a <HAL_HalfDuplex_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d9e:	f000 f905 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200006d4 	.word	0x200006d4
 8001dac:	40004400 	.word	0x40004400

08001db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08c      	sub	sp, #48	; 0x30
 8001db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db6:	f107 031c 	add.w	r3, r7, #28
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
 8001dc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	4b72      	ldr	r3, [pc, #456]	; (8001f94 <MX_GPIO_Init+0x1e4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a71      	ldr	r2, [pc, #452]	; (8001f94 <MX_GPIO_Init+0x1e4>)
 8001dd0:	f043 0310 	orr.w	r3, r3, #16
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b6f      	ldr	r3, [pc, #444]	; (8001f94 <MX_GPIO_Init+0x1e4>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	4b6b      	ldr	r3, [pc, #428]	; (8001f94 <MX_GPIO_Init+0x1e4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a6a      	ldr	r2, [pc, #424]	; (8001f94 <MX_GPIO_Init+0x1e4>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b68      	ldr	r3, [pc, #416]	; (8001f94 <MX_GPIO_Init+0x1e4>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	4b64      	ldr	r3, [pc, #400]	; (8001f94 <MX_GPIO_Init+0x1e4>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a63      	ldr	r2, [pc, #396]	; (8001f94 <MX_GPIO_Init+0x1e4>)
 8001e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b61      	ldr	r3, [pc, #388]	; (8001f94 <MX_GPIO_Init+0x1e4>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b5d      	ldr	r3, [pc, #372]	; (8001f94 <MX_GPIO_Init+0x1e4>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a5c      	ldr	r2, [pc, #368]	; (8001f94 <MX_GPIO_Init+0x1e4>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b5a      	ldr	r3, [pc, #360]	; (8001f94 <MX_GPIO_Init+0x1e4>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	4b56      	ldr	r3, [pc, #344]	; (8001f94 <MX_GPIO_Init+0x1e4>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a55      	ldr	r2, [pc, #340]	; (8001f94 <MX_GPIO_Init+0x1e4>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b53      	ldr	r3, [pc, #332]	; (8001f94 <MX_GPIO_Init+0x1e4>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	4b4f      	ldr	r3, [pc, #316]	; (8001f94 <MX_GPIO_Init+0x1e4>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a4e      	ldr	r2, [pc, #312]	; (8001f94 <MX_GPIO_Init+0x1e4>)
 8001e5c:	f043 0308 	orr.w	r3, r3, #8
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <MX_GPIO_Init+0x1e4>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2108      	movs	r1, #8
 8001e72:	4849      	ldr	r0, [pc, #292]	; (8001f98 <MX_GPIO_Init+0x1e8>)
 8001e74:	f001 fc34 	bl	80036e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	4847      	ldr	r0, [pc, #284]	; (8001f9c <MX_GPIO_Init+0x1ec>)
 8001e7e:	f001 fc2f 	bl	80036e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001e82:	2200      	movs	r2, #0
 8001e84:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001e88:	4845      	ldr	r0, [pc, #276]	; (8001fa0 <MX_GPIO_Init+0x1f0>)
 8001e8a:	f001 fc29 	bl	80036e0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001e8e:	2308      	movs	r3, #8
 8001e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e92:	2301      	movs	r3, #1
 8001e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001e9e:	f107 031c 	add.w	r3, r7, #28
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	483c      	ldr	r0, [pc, #240]	; (8001f98 <MX_GPIO_Init+0x1e8>)
 8001ea6:	f001 fa7f 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001eba:	f107 031c 	add.w	r3, r7, #28
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4836      	ldr	r0, [pc, #216]	; (8001f9c <MX_GPIO_Init+0x1ec>)
 8001ec2:	f001 fa71 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001ec6:	2308      	movs	r3, #8
 8001ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ed6:	2305      	movs	r3, #5
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	4619      	mov	r1, r3
 8001ee0:	482e      	ldr	r0, [pc, #184]	; (8001f9c <MX_GPIO_Init+0x1ec>)
 8001ee2:	f001 fa61 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001eea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ef4:	f107 031c 	add.w	r3, r7, #28
 8001ef8:	4619      	mov	r1, r3
 8001efa:	482a      	ldr	r0, [pc, #168]	; (8001fa4 <MX_GPIO_Init+0x1f4>)
 8001efc:	f001 fa54 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001f00:	2304      	movs	r3, #4
 8001f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f04:	2300      	movs	r3, #0
 8001f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001f0c:	f107 031c 	add.w	r3, r7, #28
 8001f10:	4619      	mov	r1, r3
 8001f12:	4825      	ldr	r0, [pc, #148]	; (8001fa8 <MX_GPIO_Init+0x1f8>)
 8001f14:	f001 fa48 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001f18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f2a:	2305      	movs	r3, #5
 8001f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001f2e:	f107 031c 	add.w	r3, r7, #28
 8001f32:	4619      	mov	r1, r3
 8001f34:	481c      	ldr	r0, [pc, #112]	; (8001fa8 <MX_GPIO_Init+0x1f8>)
 8001f36:	f001 fa37 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001f3a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001f3e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f4c:	f107 031c 	add.w	r3, r7, #28
 8001f50:	4619      	mov	r1, r3
 8001f52:	4813      	ldr	r0, [pc, #76]	; (8001fa0 <MX_GPIO_Init+0x1f0>)
 8001f54:	f001 fa28 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001f58:	2320      	movs	r3, #32
 8001f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	4619      	mov	r1, r3
 8001f6a:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <MX_GPIO_Init+0x1f0>)
 8001f6c:	f001 fa1c 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001f70:	2302      	movs	r3, #2
 8001f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f74:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001f78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001f7e:	f107 031c 	add.w	r3, r7, #28
 8001f82:	4619      	mov	r1, r3
 8001f84:	4804      	ldr	r0, [pc, #16]	; (8001f98 <MX_GPIO_Init+0x1e8>)
 8001f86:	f001 fa0f 	bl	80033a8 <HAL_GPIO_Init>

}
 8001f8a:	bf00      	nop
 8001f8c:	3730      	adds	r7, #48	; 0x30
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	40020c00 	.word	0x40020c00
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	40020400 	.word	0x40020400

08001fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb0:	b672      	cpsid	i
}
 8001fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <Error_Handler+0x8>

08001fb6 <USART_ReceiveData>:


char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc8:	b29b      	uxth	r3, r3
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001fe2:	887b      	ldrh	r3, [r7, #2]
 8001fe4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	605a      	str	r2, [r3, #4]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <usart_setup>:


uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 8002000:	4b15      	ldr	r3, [pc, #84]	; (8002058 <usart_setup+0x60>)
 8002002:	4a16      	ldr	r2, [pc, #88]	; (800205c <usart_setup+0x64>)
 8002004:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 8002006:	4a14      	ldr	r2, [pc, #80]	; (8002058 <usart_setup+0x60>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <usart_setup+0x60>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <usart_setup+0x60>)
 8002014:	2200      	movs	r2, #0
 8002016:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <usart_setup+0x60>)
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <usart_setup+0x60>)
 8002020:	220c      	movs	r2, #12
 8002022:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <usart_setup+0x60>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <usart_setup+0x60>)
 800202c:	2200      	movs	r2, #0
 800202e:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 8002030:	4809      	ldr	r0, [pc, #36]	; (8002058 <usart_setup+0x60>)
 8002032:	f004 ffaa 	bl	8006f8a <HAL_HalfDuplex_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d000      	beq.n	800203e <usart_setup+0x46>
	{
		//	    Error_Handler();
		__asm__("NOP");
 800203c:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <usart_setup+0x60>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <usart_setup+0x60>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0220 	orr.w	r2, r2, #32
 800204c:	60da      	str	r2, [r3, #12]
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200006d4 	.word	0x200006d4
 800205c:	40004400 	.word	0x40004400

08002060 <owInit>:

void owInit(OneWire *ow) {
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	2300      	movs	r3, #0
 800206e:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8002070:	e015      	b.n	800209e <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
    k=0;
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 8002080:	e007      	b.n	8002092 <owInit+0x32>
    r[k] = 0;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	3301      	adds	r3, #1
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	2b07      	cmp	r3, #7
 8002096:	ddf4      	ble.n	8002082 <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	3301      	adds	r3, #1
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	dde6      	ble.n	8002072 <owInit+0x12>
  }
  k=0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 80020a8:	e008      	b.n	80020bc <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4413      	add	r3, r2
 80020b0:	330c      	adds	r3, #12
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	3301      	adds	r3, #1
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	2b07      	cmp	r3, #7
 80020c0:	ddf3      	ble.n	80020aa <owInit+0x4a>
  ow->lastDiscrepancy = 64;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2240      	movs	r2, #64	; 0x40
 80020c6:	609a      	str	r2, [r3, #8]

}
 80020c8:	bf00      	nop
 80020ca:	371c      	adds	r7, #28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <owReadHandler>:

void owReadHandler() { //обработчик прерыания USART
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 80020da:	f000 f850 	bl	800217e <getUsartIndex>
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
  /* Проверяем, что мы вызвали прерывание из-за RXNE. */
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 80020e2:	4b18      	ldr	r3, [pc, #96]	; (8002144 <owReadHandler+0x70>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f003 0320 	and.w	r3, r3, #32
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d025      	beq.n	800213a <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <owReadHandler+0x70>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d01f      	beq.n	800213a <owReadHandler+0x66>

    /* Получаем данные из периферии и сбрасываем флаг*/
		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 80020fa:	bf00      	nop
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <owReadHandler+0x70>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f9      	beq.n	80020fc <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);
 8002108:	79fc      	ldrb	r4, [r7, #7]
 800210a:	480e      	ldr	r0, [pc, #56]	; (8002144 <owReadHandler+0x70>)
 800210c:	f7ff ff53 	bl	8001fb6 <USART_ReceiveData>
 8002110:	4603      	mov	r3, r0
 8002112:	461a      	mov	r2, r3
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <owReadHandler+0x74>)
 8002116:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);//сбрасываем флаг ответ получен после
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	2201      	movs	r2, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	b25b      	sxtb	r3, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	b25a      	sxtb	r2, r3
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <owReadHandler+0x78>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	b25b      	sxtb	r3, r3
 8002130:	4013      	ands	r3, r2
 8002132:	b25b      	sxtb	r3, r3
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <owReadHandler+0x78>)
 8002138:	701a      	strb	r2, [r3, #0]
  }
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	bd90      	pop	{r4, r7, pc}
 8002142:	bf00      	nop
 8002144:	40004400 	.word	0x40004400
 8002148:	20000788 	.word	0x20000788
 800214c:	20000792 	.word	0x20000792

08002150 <owResetCmd>:
 *
 * @param N usart -- выбранный для реализации 1wire usart
 * @return Возвращает 1 если на шине кто-то есть и 0 в противном случае
 */

  uint16_t owResetCmd() {
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
	uint16_t owPresence;

	usart_setup(9600);
 8002156:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800215a:	f7ff ff4d 	bl	8001ff8 <usart_setup>

  owSend(0xF0); // Send RESET отправляем импуль сброса
 800215e:	20f0      	movs	r0, #240	; 0xf0
 8002160:	f000 f816 	bl	8002190 <owSend>
  owPresence = owEchoRead(); // Ждём PRESENCE на шине и вовзращаем, что есть
 8002164:	f000 f854 	bl	8002210 <owEchoRead>
 8002168:	4603      	mov	r3, r0
 800216a:	80fb      	strh	r3, [r7, #6]

	usart_setup(115200);// перенастраиваем скорость UART
 800216c:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8002170:	f7ff ff42 	bl	8001ff8 <usart_setup>
  return owPresence;
 8002174:	88fb      	ldrh	r3, [r7, #6]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <getUsartIndex>:

uint8_t getUsartIndex() {// смотрит по номеру UART c каким будет идти работа
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
//	uint8_t result;
//	if(OW_USART==USART1)result = 0;
//	else if (OW_USART==USART2)result = 1;
//	else if (OW_USART==USART3)result = 2;
	return 0;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <owSend>:

void owSend(uint16_t data) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());//устанавливаем флаг если попадем в обработчик прерывания там он сбросится
 800219a:	f7ff fff0 	bl	800217e <getUsartIndex>
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	2301      	movs	r3, #1
 80021a4:	4093      	lsls	r3, r2
 80021a6:	b25a      	sxtb	r2, r3
 80021a8:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <owSend+0x50>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	b25b      	sxtb	r3, r3
 80021b0:	4313      	orrs	r3, r2
 80021b2:	b25b      	sxtb	r3, r3
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <owSend+0x50>)
 80021b8:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);//отправляем данные
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	4619      	mov	r1, r3
 80021be:	4809      	ldr	r0, [pc, #36]	; (80021e4 <owSend+0x54>)
 80021c0:	f7ff ff09 	bl	8001fd6 <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);//ждем пока передача закончится
 80021c4:	bf00      	nop
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <owSend+0x58>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d0:	2b40      	cmp	r3, #64	; 0x40
 80021d2:	d1f8      	bne.n	80021c6 <owSend+0x36>
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000792 	.word	0x20000792
 80021e4:	40004400 	.word	0x40004400
 80021e8:	200006d4 	.word	0x200006d4

080021ec <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {//читаем у нас пришла единица или ноль в ответ
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0; //если пришло 0xFF, то бит = 1, что то другое бит = 0
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	2bff      	cmp	r3, #255	; 0xff
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <owEchoRead>:

uint16_t owEchoRead() {//
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();//получаем номер USART
 8002216:	f7ff ffb2 	bl	800217e <getUsartIndex>
 800221a:	4603      	mov	r3, r0
 800221c:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 800221e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002222:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);// ждем пока кто-то не ответит но не больше паузы
 8002224:	bf00      	nop
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <owEchoRead+0x48>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	797b      	ldrb	r3, [r7, #5]
 8002230:	fa42 f303 	asr.w	r3, r2, r3
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d004      	beq.n	8002246 <owEchoRead+0x36>
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	1e5a      	subs	r2, r3, #1
 8002240:	80fa      	strh	r2, [r7, #6]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1ef      	bne.n	8002226 <owEchoRead+0x16>
  return rc_buffer[i];//в зависимости от используемого номера UART
 8002246:	797b      	ldrb	r3, [r7, #5]
 8002248:	4a04      	ldr	r2, [pc, #16]	; (800225c <owEchoRead+0x4c>)
 800224a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800224e:	b29b      	uxth	r3, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000792 	.word	0x20000792
 800225c:	20000788 	.word	0x20000788

08002260 <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {//разлагаем 1 байт на 8 байт ,кодируем так скасказать в посылку для 1wire
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 800226c:	2300      	movs	r3, #0
 800226e:	73fb      	strb	r3, [r7, #15]
 8002270:	e014      	b.n	800229c <byteToBits+0x3c>
    if (ow_byte & 0x01) {//если текущий бит в байте ==1 то
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <byteToBits+0x24>
      *bits = WIRE_1; //заменяем на число которое при передаче по USART для 1wire будет единцией t.e 0xFF
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	22ff      	movs	r2, #255	; 0xff
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	e002      	b.n	800228a <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;// тоже самое только для 0
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1; //сдвигаем обработанный бит
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	085b      	lsrs	r3, r3, #1
 8002294:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	3301      	adds	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	2b07      	cmp	r3, #7
 80022a0:	d9e7      	bls.n	8002272 <byteToBits+0x12>
  }
  return bits; //возвращае массив для передачи
 80022a2:	683b      	ldr	r3, [r7, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <owSendByte>:
/**
 * Метод пересылает последовательно 8 байт по одному на каждый бит в data
 * @param usart -- выбранный для эмуляции 1wire UART
 * @param d -- данные
 */
void owSendByte(uint8_t d) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);//преобразовываем байт в биты "массив байт для  передачи UART и эмуляции 1WIRE"
 80022ba:	f107 020c 	add.w	r2, r7, #12
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff ffcc 	bl	8002260 <byteToBits>
  for (i = 0; i < 8; ++i) {
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	e00b      	b.n	80022e6 <owSendByte+0x36>
    owSend(data[i]);
 80022ce:	f107 020c 	add.w	r2, r7, #12
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	4413      	add	r3, r2
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ff58 	bl	8002190 <owSend>
  for (i = 0; i < 8; ++i) {
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	3301      	adds	r3, #1
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2b07      	cmp	r3, #7
 80022ea:	ddf0      	ble.n	80022ce <owSendByte+0x1e>
  }
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <owCRC>:
  }
  return target_byte; //возвращаем полученный байт
}

/* Подсчет CRC8 массива mas длиной Len */
uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 80022f6:	b480      	push	{r7}
 80022f8:	b085      	sub	sp, #20
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	460b      	mov	r3, r1
 8002300:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	733b      	strb	r3, [r7, #12]
  crc = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 800230a:	7b3b      	ldrb	r3, [r7, #12]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	4413      	add	r3, r2
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
 8002318:	e018      	b.n	800234c <owCRC+0x56>
      fb = crc ^ dat;
 800231a:	7b7a      	ldrb	r2, [r7, #13]
 800231c:	7bbb      	ldrb	r3, [r7, #14]
 800231e:	4053      	eors	r3, r2
 8002320:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 8002322:	7afb      	ldrb	r3, [r7, #11]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 800232a:	7b7b      	ldrb	r3, [r7, #13]
 800232c:	085b      	lsrs	r3, r3, #1
 800232e:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 8002330:	7bbb      	ldrb	r3, [r7, #14]
 8002332:	085b      	lsrs	r3, r3, #1
 8002334:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c; // полином
 8002336:	7afb      	ldrb	r3, [r7, #11]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d104      	bne.n	8002346 <owCRC+0x50>
 800233c:	7b7b      	ldrb	r3, [r7, #13]
 800233e:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8002342:	43db      	mvns	r3, r3
 8002344:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	3301      	adds	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	2b07      	cmp	r3, #7
 8002350:	d9e3      	bls.n	800231a <owCRC+0x24>
    }
    st_byt++;
 8002352:	7b3b      	ldrb	r3, [r7, #12]
 8002354:	3301      	adds	r3, #1
 8002356:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len); // счетчик байтов в массиве
 8002358:	7b3a      	ldrb	r2, [r7, #12]
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	429a      	cmp	r2, r3
 800235e:	d3d4      	bcc.n	800230a <owCRC+0x14>
  return crc;
 8002360:	7b7b      	ldrb	r3, [r7, #13]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);
 8002376:	2107      	movs	r1, #7
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ffbc 	bl	80022f6 <owCRC>
 800237e:	4603      	mov	r3, r0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <hasNextRom>:
 * return 0 if hasn't
 * return -1 if error reading happened
 *
 * переделать на функции обратного вызова для реакции на ошибки
 */
int hasNextRom(OneWire *ow, uint8_t *ROM) {//
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 8002396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800239a:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) { //есть ли кто на шине
 80023a0:	f7ff fed6 	bl	8002150 <owResetCmd>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2bf0      	cmp	r3, #240	; 0xf0
 80023a8:	d101      	bne.n	80023ae <hasNextRom+0x26>
    return 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e097      	b.n	80024de <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);//
 80023ae:	20f0      	movs	r0, #240	; 0xf0
 80023b0:	f7ff ff7e 	bl	80022b0 <owSendByte>
  do {
		uint8_t answerBit =0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 80023b8:	7ffb      	ldrb	r3, [r7, #31]
 80023ba:	08db      	lsrs	r3, r3, #3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	4413      	add	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ); // чтение прямого бита
 80023cc:	20ff      	movs	r0, #255	; 0xff
 80023ce:	f7ff fedf 	bl	8002190 <owSend>
    cB = owReadSlot(owEchoRead());//ответ от датчика
 80023d2:	f7ff ff1d 	bl	8002210 <owEchoRead>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff07 	bl	80021ec <owReadSlot>
 80023de:	4603      	mov	r3, r0
 80023e0:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ); // чтение инверсного бита
 80023e2:	20ff      	movs	r0, #255	; 0xff
 80023e4:	f7ff fed4 	bl	8002190 <owSend>
    cmp_cB = owReadSlot(owEchoRead());//ответ от датчика
 80023e8:	f7ff ff12 	bl	8002210 <owEchoRead>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fefc 	bl	80021ec <owReadSlot>
 80023f4:	4603      	mov	r3, r0
 80023f6:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)//сравниваем два ответа
 80023f8:	7afa      	ldrb	r2, [r7, #11]
 80023fa:	7abb      	ldrb	r3, [r7, #10]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d105      	bne.n	800240c <hasNextRom+0x84>
 8002400:	7afb      	ldrb	r3, [r7, #11]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d102      	bne.n	800240c <hasNextRom+0x84>
      return -1;//ошибка никто не ответил
 8002406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800240a:	e068      	b.n	80024de <hasNextRom+0x156>
    if (cB != cmp_cB) { //нормальная ситуация пришло либо 10 либо 01
 800240c:	7afa      	ldrb	r2, [r7, #11]
 800240e:	7abb      	ldrb	r3, [r7, #10]
 8002410:	429a      	cmp	r2, r3
 8002412:	d002      	beq.n	800241a <hasNextRom+0x92>
      searchDirection = cB;//выбираем в каком направлении будем двигатся дальше
 8002414:	7afb      	ldrb	r3, [r7, #11]
 8002416:	75bb      	strb	r3, [r7, #22]
 8002418:	e023      	b.n	8002462 <hasNextRom+0xda>
			} else {//колизия пришло 00 т.е текущий бит у ROM-ов разный
				if (ui32BitNumber == ow->lastDiscrepancy)//если текущая позиция колизии равна прошлой
 800241a:	7ffa      	ldrb	r2, [r7, #31]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	429a      	cmp	r2, r3
 8002422:	d102      	bne.n	800242a <hasNextRom+0xa2>
        searchDirection = 1;//выбираем в каком направлении будем двигатся дальше
 8002424:	2301      	movs	r3, #1
 8002426:	75bb      	strb	r3, [r7, #22]
 8002428:	e01b      	b.n	8002462 <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {//если мы зашили дальше
 800242a:	7ffa      	ldrb	r2, [r7, #31]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	429a      	cmp	r2, r3
 8002432:	dd02      	ble.n	800243a <hasNextRom+0xb2>
          searchDirection = 0;//выбираем в каком направлении будем двигатся дальше
 8002434:	2300      	movs	r3, #0
 8002436:	75bb      	strb	r3, [r7, #22]
 8002438:	e00e      	b.n	8002458 <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	330c      	adds	r3, #12
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	7ffb      	ldrb	r3, [r7, #31]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	fa42 f303 	asr.w	r3, r2, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 8002458:	7dbb      	ldrb	r3, [r7, #22]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <hasNextRom+0xda>
          zeroFork = ui32BitNumber;//запоминаем развилку
 800245e:	7ffb      	ldrb	r3, [r7, #31]
 8002460:	61bb      	str	r3, [r7, #24]
      }
    }
    // сохраняем бит
    if (searchDirection)
 8002462:	7dbb      	ldrb	r3, [r7, #22]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00e      	beq.n	8002486 <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;//выставляем бит в текущем байте байте
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	b25a      	sxtb	r2, r3
 800246e:	7ffb      	ldrb	r3, [r7, #31]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	2101      	movs	r1, #1
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	b25b      	sxtb	r3, r3
 800247c:	4313      	orrs	r3, r2
 800247e:	b25b      	sxtb	r3, r3
 8002480:	b2da      	uxtb	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);// решаем кого отключить
 8002486:	7dbb      	ldrb	r3, [r7, #22]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <hasNextRom+0x108>
 800248c:	2300      	movs	r3, #0
 800248e:	e000      	b.n	8002492 <hasNextRom+0x10a>
 8002490:	23ff      	movs	r3, #255	; 0xff
 8002492:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);//вырубаем "мешающие" устройсва
 8002494:	7d7b      	ldrb	r3, [r7, #21]
 8002496:	b29b      	uxth	r3, r3
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fe79 	bl	8002190 <owSend>
    ui32BitNumber++;//ищем следующий бит
 800249e:	7ffb      	ldrb	r3, [r7, #31]
 80024a0:	3301      	adds	r3, #1
 80024a2:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);//пока не найден весь ROM все биты
 80024a4:	7ffb      	ldrb	r3, [r7, #31]
 80024a6:	2b3f      	cmp	r3, #63	; 0x3f
 80024a8:	d984      	bls.n	80023b4 <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;//запоминаем развилку
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	609a      	str	r2, [r3, #8]
  for (; i < 7; i++)
 80024b0:	e00b      	b.n	80024ca <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];//запоминаем последний ROM
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	441a      	add	r2, r3
 80024b8:	7dfb      	ldrb	r3, [r7, #23]
 80024ba:	7811      	ldrb	r1, [r2, #0]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	4413      	add	r3, r2
 80024c0:	460a      	mov	r2, r1
 80024c2:	731a      	strb	r2, [r3, #12]
  for (; i < 7; i++)
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
 80024c6:	3301      	adds	r3, #1
 80024c8:	75fb      	strb	r3, [r7, #23]
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
 80024cc:	2b06      	cmp	r3, #6
 80024ce:	d9f0      	bls.n	80024b2 <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bfcc      	ite	gt
 80024d8:	2301      	movgt	r3, #1
 80024da:	2300      	movle	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3720      	adds	r7, #32
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <owSearchCmd>:

// Возвращает количество устройств на шине или код ошибки, если значение меньше 0
int owSearchCmd(OneWire *ow) {
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff fdb4 	bl	8002060 <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device])); //передаем указатель на структуру куда положить след.ROM
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	4413      	add	r3, r2
 8002500:	4619      	mov	r1, r3
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ff40 	bl	8002388 <hasNextRom>
 8002508:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	da02      	bge.n	8002516 <owSearchCmd+0x30>
      return -1;
 8002510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002514:	e009      	b.n	800252a <owSearchCmd+0x44>
    device++;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3301      	adds	r3, #1
 800251a:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);//ищем пока кто-то есть и этих кто-то не больше дефайна
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <owSearchCmd+0x42>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	dde7      	ble.n	80024f8 <owSearchCmd+0x12>
		return device;//возвращаем порядковый номер датчика (устройства) на шине
 8002528:	68fb      	ldr	r3, [r7, #12]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <owMatchRomCmd>:
void owSkipRomCmd(OneWire *ow) {//отправляет команду пропуска ROM после этого следующая команда будет
  owResetCmd();                 //для всех устройств на шине
  owSendByte(ONEWIRE_SKIP_ROM);
}

void owMatchRomCmd(RomCode *rom) {//позволяет мастеру обращаться к конкретному  ведомому устройству
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
	int i = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
  owResetCmd();
 800253e:	f7ff fe07 	bl	8002150 <owResetCmd>
  owSendByte(ONEWIRE_MATCH_ROM);//обращаемся к конкретному устройсву
 8002542:	2055      	movs	r0, #85	; 0x55
 8002544:	f7ff feb4 	bl	80022b0 <owSendByte>
  for (; i < 8; i++)
 8002548:	e009      	b.n	800255e <owMatchRomCmd+0x2c>
	owSendByte(*(((uint8_t *) rom) + i));//"перебираемся по структуре как по массиву" первой звездочкой получаем i тый байт из структуры
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff feac 	bl	80022b0 <owSendByte>
  for (; i < 8; i++)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3301      	adds	r3, #1
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b07      	cmp	r3, #7
 8002562:	ddf2      	ble.n	800254a <owMatchRomCmd+0x18>
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <owConvertTemperatureCmd>:

void owConvertTemperatureCmd(OneWire *ow, RomCode *rom) {
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	6039      	str	r1, [r7, #0]
  owMatchRomCmd(rom);//позволяет мастеру обращаться к конкретному  ведомому устройству
 8002578:	6838      	ldr	r0, [r7, #0]
 800257a:	f7ff ffda 	bl	8002532 <owMatchRomCmd>
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);//говорим датчику пора бы преобразовать температуру
 800257e:	2044      	movs	r0, #68	; 0x44
 8002580:	f7ff fe96 	bl	80022b0 <owSendByte>
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <owReadScratchpadCmd>:
 * @param ow -- OneWire pointer
 * @param rom -- selected device on the bus
 * @param data -- buffer for data
 * @return data
 */
uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {//читаем память датчика
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  uint16_t b = 0, p;
 8002598:	2300      	movs	r3, #0
 800259a:	82fb      	strh	r3, [r7, #22]
  switch (rom->family) {
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b10      	cmp	r3, #16
 80025a2:	d001      	beq.n	80025a8 <owReadScratchpadCmd+0x1c>
 80025a4:	2b28      	cmp	r3, #40	; 0x28
 80025a6:	d109      	bne.n	80025bc <owReadScratchpadCmd+0x30>
    case DS18B20:
    case DS18S20:
      p = 72;  //9*8 =72 == равняется 9 байт данных
 80025a8:	2348      	movs	r3, #72	; 0x48
 80025aa:	82bb      	strh	r3, [r7, #20]
      break;
 80025ac:	bf00      	nop
    default:
      return data;

  }
  owMatchRomCmd(rom);
 80025ae:	68b8      	ldr	r0, [r7, #8]
 80025b0:	f7ff ffbf 	bl	8002532 <owMatchRomCmd>
  owSendByte(ONEWIRE_READ_SCRATCHPAD);//отправляем команду на чтение памяти
 80025b4:	20be      	movs	r0, #190	; 0xbe
 80025b6:	f7ff fe7b 	bl	80022b0 <owSendByte>
  while (b < p) {// пока мы не обработали 9 байт
 80025ba:	e048      	b.n	800264e <owReadScratchpadCmd+0xc2>
      return data;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	e04b      	b.n	8002658 <owReadScratchpadCmd+0xcc>
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8)); //позиция обрабатываемого байта
 80025c0:	8abb      	ldrh	r3, [r7, #20]
 80025c2:	3b08      	subs	r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	da00      	bge.n	80025ca <owReadScratchpadCmd+0x3e>
 80025c8:	3307      	adds	r3, #7
 80025ca:	10db      	asrs	r3, r3, #3
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	8afb      	ldrh	r3, [r7, #22]
 80025d0:	08db      	lsrs	r3, r3, #3
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	74fb      	strb	r3, [r7, #19]
    uint8_t bt;
		owSend(OW_READ);
 80025da:	20ff      	movs	r0, #255	; 0xff
 80025dc:	f7ff fdd8 	bl	8002190 <owSend>
    bt = owReadSlot(owEchoRead());//читаем данные
 80025e0:	f7ff fe16 	bl	8002210 <owEchoRead>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fe00 	bl	80021ec <owReadSlot>
 80025ec:	4603      	mov	r3, r0
 80025ee:	74bb      	strb	r3, [r7, #18]
    if (bt == 1)
 80025f0:	7cbb      	ldrb	r3, [r7, #18]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d113      	bne.n	800261e <owReadScratchpadCmd+0x92>
      data[pos] |= 1 << b % 8;//выставляем бит в нужной позиции
 80025f6:	7cfb      	ldrb	r3, [r7, #19]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	4413      	add	r3, r2
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	b25a      	sxtb	r2, r3
 8002600:	8afb      	ldrh	r3, [r7, #22]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	2101      	movs	r1, #1
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	b25b      	sxtb	r3, r3
 800260e:	4313      	orrs	r3, r2
 8002610:	b259      	sxtb	r1, r3
 8002612:	7cfb      	ldrb	r3, [r7, #19]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	4413      	add	r3, r2
 8002618:	b2ca      	uxtb	r2, r1
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	e014      	b.n	8002648 <owReadScratchpadCmd+0xbc>
    else
      data[pos] &= ~(1 << b % 8);//сбрасываем бит в нужной позиции
 800261e:	7cfb      	ldrb	r3, [r7, #19]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	4413      	add	r3, r2
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	b25a      	sxtb	r2, r3
 8002628:	8afb      	ldrh	r3, [r7, #22]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	2101      	movs	r1, #1
 8002630:	fa01 f303 	lsl.w	r3, r1, r3
 8002634:	b25b      	sxtb	r3, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	b25b      	sxtb	r3, r3
 800263a:	4013      	ands	r3, r2
 800263c:	b259      	sxtb	r1, r3
 800263e:	7cfb      	ldrb	r3, [r7, #19]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	4413      	add	r3, r2
 8002644:	b2ca      	uxtb	r2, r1
 8002646:	701a      	strb	r2, [r3, #0]
    b++;//следующий бит
 8002648:	8afb      	ldrh	r3, [r7, #22]
 800264a:	3301      	adds	r3, #1
 800264c:	82fb      	strh	r3, [r7, #22]
  while (b < p) {// пока мы не обработали 9 байт
 800264e:	8afa      	ldrh	r2, [r7, #22]
 8002650:	8abb      	ldrh	r3, [r7, #20]
 8002652:	429a      	cmp	r2, r3
 8002654:	d3b4      	bcc.n	80025c0 <owReadScratchpadCmd+0x34>
  }
  return data;
 8002656:	687b      	ldr	r3, [r7, #4]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <readTemperature>:
 * @param ow -- OneWire bus pointer
 * @param rom -- selected device
 * @param reSense -- do you want resense temp for next time?
 * @return struct with data
 */
Temperature_t readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 8002660:	b580      	push	{r7, lr}
 8002662:	b08c      	sub	sp, #48	; 0x30
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	4613      	mov	r3, r2
 800266c:	71fb      	strb	r3, [r7, #7]
	Scratchpad_DS18B20 *sp;
	Scratchpad_DS18S20 *spP;
  Temperature_t t;
	uint8_t pad[9];
  t.inCelsus = 0x00;
 800266e:	2300      	movs	r3, #0
 8002670:	f887 3020 	strb.w	r3, [r7, #32]
  t.frac = 0x00;
 8002674:	2300      	movs	r3, #0
 8002676:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sp = (Scratchpad_DS18B20 *) &pad;
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
  spP = (Scratchpad_DS18S20 *) &pad;
 8002680:	f107 0314 	add.w	r3, r7, #20
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
  switch (rom->family) {
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b10      	cmp	r3, #16
 800268c:	d022      	beq.n	80026d4 <readTemperature+0x74>
 800268e:	2b28      	cmp	r3, #40	; 0x28
 8002690:	d13a      	bne.n	8002708 <readTemperature+0xa8>
    case DS18B20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18B20
 8002692:	f107 0314 	add.w	r3, r7, #20
 8002696:	461a      	mov	r2, r3
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f7ff ff76 	bl	800258c <owReadScratchpadCmd>
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);//целая часть
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	79db      	ldrb	r3, [r3, #7]
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	b25a      	sxtb	r2, r3
 80026a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026aa:	7a1b      	ldrb	r3, [r3, #8]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	b25b      	sxtb	r3, r3
 80026b2:	4313      	orrs	r3, r2
 80026b4:	b25b      	sxtb	r3, r3
 80026b6:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);//дробная
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	7a1b      	ldrb	r3, [r3, #8]
 80026be:	f003 020f 	and.w	r2, r3, #15
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	111b      	asrs	r3, r3, #4
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 80026d2:	e01c      	b.n	800270e <readTemperature+0xae>
    case DS18S20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18S20
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	461a      	mov	r2, r3
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f7ff ff55 	bl	800258c <owReadScratchpadCmd>
      t.inCelsus = spP->temp_lsb >> 1;
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	7a1b      	ldrb	r3, [r3, #8]
 80026e6:	085b      	lsrs	r3, r3, #1
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	b25b      	sxtb	r3, r3
 80026ec:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	7a1b      	ldrb	r3, [r3, #8]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	0092      	lsls	r2, r2, #2
 80026fe:	4413      	add	r3, r2
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 8002706:	e002      	b.n	800270e <readTemperature+0xae>
    default:
      return t;
 8002708:	8c3b      	ldrh	r3, [r7, #32]
 800270a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800270c:	e008      	b.n	8002720 <readTemperature+0xc0>
  }
  if (reSense) {
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <readTemperature+0xbc>
    owConvertTemperatureCmd(ow, rom);//можно сразу после как забрали данные отдаем датчику команду на преобразования температуры
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f7ff ff29 	bl	800256e <owConvertTemperatureCmd>
  }
  return t;
 800271c:	8c3b      	ldrh	r3, [r7, #32]
 800271e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002720:	2300      	movs	r3, #0
 8002722:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002726:	f362 0307 	bfi	r3, r2, #0, #8
 800272a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800272e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8002732:	4618      	mov	r0, r3
 8002734:	3730      	adds	r7, #48	; 0x30
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <get_ROMid>:
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}


int get_ROMid (void){
 800273c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800273e:	b089      	sub	sp, #36	; 0x24
 8002740:	af06      	add	r7, sp, #24
	if (owResetCmd() != ONEWIRE_NOBODY) {    // is anybody on the bus?
 8002742:	f7ff fd05 	bl	8002150 <owResetCmd>
 8002746:	4603      	mov	r3, r0
 8002748:	2bf0      	cmp	r3, #240	; 0xf0
 800274a:	d079      	beq.n	8002840 <get_ROMid+0x104>
		devices = owSearchCmd(&ow);        // получить ROMid в�?ех у�?трой�?т на шине или вернуть код ошибки
 800274c:	484e      	ldr	r0, [pc, #312]	; (8002888 <get_ROMid+0x14c>)
 800274e:	f7ff feca 	bl	80024e6 <owSearchCmd>
 8002752:	4603      	mov	r3, r0
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4b4d      	ldr	r3, [pc, #308]	; (800288c <get_ROMid+0x150>)
 8002758:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 800275a:	4b4c      	ldr	r3, [pc, #304]	; (800288c <get_ROMid+0x150>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d113      	bne.n	800278a <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 8002762:	4b4b      	ldr	r3, [pc, #300]	; (8002890 <get_ROMid+0x154>)
 8002764:	4a4b      	ldr	r2, [pc, #300]	; (8002894 <get_ROMid+0x158>)
 8002766:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 8002768:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <get_ROMid+0x15c>)
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	e005      	b.n	800277c <get_ROMid+0x40>
					__asm__("nop");
 8002770:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 8002772:	4b49      	ldr	r3, [pc, #292]	; (8002898 <get_ROMid+0x15c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3301      	adds	r3, #1
 8002778:	4a47      	ldr	r2, [pc, #284]	; (8002898 <get_ROMid+0x15c>)
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	4b46      	ldr	r3, [pc, #280]	; (8002898 <get_ROMid+0x15c>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b43      	ldr	r3, [pc, #268]	; (8002890 <get_ROMid+0x154>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d3f3      	bcc.n	8002770 <get_ROMid+0x34>
				pDelay = 1000000;
 8002788:	e7eb      	b.n	8002762 <get_ROMid+0x26>
			}

		}
		i = 0;
 800278a:	4b43      	ldr	r3, [pc, #268]	; (8002898 <get_ROMid+0x15c>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 8002790:	e04f      	b.n	8002832 <get_ROMid+0xf6>
			RomCode *r = &ow.ids[i];
 8002792:	4b41      	ldr	r3, [pc, #260]	; (8002898 <get_ROMid+0x15c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4a3b      	ldr	r2, [pc, #236]	; (8002888 <get_ROMid+0x14c>)
 800279a:	4413      	add	r3, r2
 800279c:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff fde5 	bl	800236e <owCRC8>
 80027a4:	4603      	mov	r3, r0
 80027a6:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	79db      	ldrb	r3, [r3, #7]
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d101      	bne.n	80027b6 <get_ROMid+0x7a>
 80027b2:	4b3a      	ldr	r3, [pc, #232]	; (800289c <get_ROMid+0x160>)
 80027b4:	e000      	b.n	80027b8 <get_ROMid+0x7c>
 80027b6:	4b3a      	ldr	r3, [pc, #232]	; (80028a0 <get_ROMid+0x164>)
 80027b8:	4a3a      	ldr	r2, [pc, #232]	; (80028a4 <get_ROMid+0x168>)
 80027ba:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 80027bc:	4b36      	ldr	r3, [pc, #216]	; (8002898 <get_ROMid+0x15c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b39      	ldr	r3, [pc, #228]	; (80028a8 <get_ROMid+0x16c>)
 80027c4:	601a      	str	r2, [r3, #0]

			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	461e      	mov	r6, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	799b      	ldrb	r3, [r3, #6]
 80027d0:	469c      	mov	ip, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	795b      	ldrb	r3, [r3, #5]
 80027d6:	461a      	mov	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	791b      	ldrb	r3, [r3, #4]
 80027dc:	4619      	mov	r1, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	78db      	ldrb	r3, [r3, #3]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 80027e2:	4618      	mov	r0, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	789b      	ldrb	r3, [r3, #2]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 80027e8:	461c      	mov	r4, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	785b      	ldrb	r3, [r3, #1]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 80027ee:	461d      	mov	r5, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	79db      	ldrb	r3, [r3, #7]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 80027f4:	9305      	str	r3, [sp, #20]
 80027f6:	9504      	str	r5, [sp, #16]
 80027f8:	9403      	str	r4, [sp, #12]
 80027fa:	9002      	str	r0, [sp, #8]
 80027fc:	9101      	str	r1, [sp, #4]
 80027fe:	9200      	str	r2, [sp, #0]
 8002800:	4663      	mov	r3, ip
 8002802:	4632      	mov	r2, r6
 8002804:	4929      	ldr	r1, [pc, #164]	; (80028ac <get_ROMid+0x170>)
 8002806:	482a      	ldr	r0, [pc, #168]	; (80028b0 <get_ROMid+0x174>)
 8002808:	f009 fc46 	bl	800c098 <siprintf>

			if (crc != r->crc) {
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	79db      	ldrb	r3, [r3, #7]
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	429a      	cmp	r2, r3
 8002814:	d008      	beq.n	8002828 <get_ROMid+0xec>
				devInfo.device = i;
 8002816:	4b20      	ldr	r3, [pc, #128]	; (8002898 <get_ROMid+0x15c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <get_ROMid+0x16c>)
 800281e:	601a      	str	r2, [r3, #0]
				sprintf (devInfo.info,"\n can't read cause CNC error");
 8002820:	4924      	ldr	r1, [pc, #144]	; (80028b4 <get_ROMid+0x178>)
 8002822:	4823      	ldr	r0, [pc, #140]	; (80028b0 <get_ROMid+0x174>)
 8002824:	f009 fc38 	bl	800c098 <siprintf>
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 8002828:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <get_ROMid+0x15c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3301      	adds	r3, #1
 800282e:	4a1a      	ldr	r2, [pc, #104]	; (8002898 <get_ROMid+0x15c>)
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b16      	ldr	r3, [pc, #88]	; (800288c <get_ROMid+0x150>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	4b17      	ldr	r3, [pc, #92]	; (8002898 <get_ROMid+0x15c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d8a8      	bhi.n	8002792 <get_ROMid+0x56>
			}
		}

	}
	pDelay = 1000000;
 8002840:	4b13      	ldr	r3, [pc, #76]	; (8002890 <get_ROMid+0x154>)
 8002842:	4a14      	ldr	r2, [pc, #80]	; (8002894 <get_ROMid+0x158>)
 8002844:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 8002846:	4b14      	ldr	r3, [pc, #80]	; (8002898 <get_ROMid+0x15c>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	e005      	b.n	800285a <get_ROMid+0x11e>
		__asm__("nop");
 800284e:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <get_ROMid+0x15c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	4a10      	ldr	r2, [pc, #64]	; (8002898 <get_ROMid+0x15c>)
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <get_ROMid+0x15c>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <get_ROMid+0x154>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d3f3      	bcc.n	800284e <get_ROMid+0x112>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 8002866:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <get_ROMid+0x168>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	490c      	ldr	r1, [pc, #48]	; (800289c <get_ROMid+0x160>)
 800286c:	4618      	mov	r0, r3
 800286e:	f7fd fcaf 	bl	80001d0 <strcmp>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <get_ROMid+0x140>
 8002878:	2300      	movs	r3, #0
 800287a:	e001      	b.n	8002880 <get_ROMid+0x144>
	else return -1;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002888:	2000076c 	.word	0x2000076c
 800288c:	20000794 	.word	0x20000794
 8002890:	20000000 	.word	0x20000000
 8002894:	000f4240 	.word	0x000f4240
 8002898:	20000784 	.word	0x20000784
 800289c:	0800e558 	.word	0x0800e558
 80028a0:	0800e560 	.word	0x0800e560
 80028a4:	20000798 	.word	0x20000798
 80028a8:	20000600 	.word	0x20000600
 80028ac:	0800e56c 	.word	0x0800e56c
 80028b0:	20000604 	.word	0x20000604
 80028b4:	0800e594 	.word	0x0800e594

080028b8 <get_Temperature>:

void get_Temperature (void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
	i=0;
 80028bc:	4b3f      	ldr	r3, [pc, #252]	; (80029bc <get_Temperature+0x104>)
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
	for (; i < devices; i++) {
 80028c2:	e071      	b.n	80029a8 <get_Temperature+0xf0>
		switch ((ow.ids[i]).family) {//че у нас за датчик
 80028c4:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <get_Temperature+0x104>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a3d      	ldr	r2, [pc, #244]	; (80029c0 <get_Temperature+0x108>)
 80028ca:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80028ce:	2b28      	cmp	r3, #40	; 0x28
 80028d0:	d006      	beq.n	80028e0 <get_Temperature+0x28>
 80028d2:	2b28      	cmp	r3, #40	; 0x28
 80028d4:	dc60      	bgt.n	8002998 <get_Temperature+0xe0>
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d060      	beq.n	800299c <get_Temperature+0xe4>
 80028da:	2b10      	cmp	r3, #16
 80028dc:	d02e      	beq.n	800293c <get_Temperature+0x84>
			break;
		case 0x00:
			break;
		default:
			// error handler
			break;
 80028de:	e05b      	b.n	8002998 <get_Temperature+0xe0>
			t = readTemperature(&ow, &ow.ids[i], 1);
 80028e0:	4b36      	ldr	r3, [pc, #216]	; (80029bc <get_Temperature+0x104>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4a36      	ldr	r2, [pc, #216]	; (80029c0 <get_Temperature+0x108>)
 80028e8:	4413      	add	r3, r2
 80028ea:	2201      	movs	r2, #1
 80028ec:	4619      	mov	r1, r3
 80028ee:	4834      	ldr	r0, [pc, #208]	; (80029c0 <get_Temperature+0x108>)
 80028f0:	f7ff feb6 	bl	8002660 <readTemperature>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b33      	ldr	r3, [pc, #204]	; (80029c4 <get_Temperature+0x10c>)
 80028f8:	b212      	sxth	r2, r2
 80028fa:	4611      	mov	r1, r2
 80028fc:	7019      	strb	r1, [r3, #0]
 80028fe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002902:	705a      	strb	r2, [r3, #1]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8002904:	4b2f      	ldr	r3, [pc, #188]	; (80029c4 <get_Temperature+0x10c>)
 8002906:	f993 3000 	ldrsb.w	r3, [r3]
 800290a:	461a      	mov	r2, r3
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	461a      	mov	r2, r3
 8002916:	4b2b      	ldr	r3, [pc, #172]	; (80029c4 <get_Temperature+0x10c>)
 8002918:	785b      	ldrb	r3, [r3, #1]
 800291a:	4413      	add	r3, r2
 800291c:	ee07 3a90 	vmov	s15, r3
 8002920:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002924:	4b25      	ldr	r3, [pc, #148]	; (80029bc <get_Temperature+0x104>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800292c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002930:	4a25      	ldr	r2, [pc, #148]	; (80029c8 <get_Temperature+0x110>)
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	edc3 7a00 	vstr	s15, [r3]
			break;
 800293a:	e030      	b.n	800299e <get_Temperature+0xe6>
			t = readTemperature(&ow, &ow.ids[i], 1);
 800293c:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <get_Temperature+0x104>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4a1f      	ldr	r2, [pc, #124]	; (80029c0 <get_Temperature+0x108>)
 8002944:	4413      	add	r3, r2
 8002946:	2201      	movs	r2, #1
 8002948:	4619      	mov	r1, r3
 800294a:	481d      	ldr	r0, [pc, #116]	; (80029c0 <get_Temperature+0x108>)
 800294c:	f7ff fe88 	bl	8002660 <readTemperature>
 8002950:	4602      	mov	r2, r0
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <get_Temperature+0x10c>)
 8002954:	b212      	sxth	r2, r2
 8002956:	4611      	mov	r1, r2
 8002958:	7019      	strb	r1, [r3, #0]
 800295a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800295e:	705a      	strb	r2, [r3, #1]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8002960:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <get_Temperature+0x10c>)
 8002962:	f993 3000 	ldrsb.w	r3, [r3]
 8002966:	461a      	mov	r2, r3
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	461a      	mov	r2, r3
 8002972:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <get_Temperature+0x10c>)
 8002974:	785b      	ldrb	r3, [r3, #1]
 8002976:	4413      	add	r3, r2
 8002978:	ee07 3a90 	vmov	s15, r3
 800297c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <get_Temperature+0x104>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002988:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800298c:	4a0e      	ldr	r2, [pc, #56]	; (80029c8 <get_Temperature+0x110>)
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	edc3 7a00 	vstr	s15, [r3]
			break;
 8002996:	e002      	b.n	800299e <get_Temperature+0xe6>
			break;
 8002998:	bf00      	nop
 800299a:	e000      	b.n	800299e <get_Temperature+0xe6>
			break;
 800299c:	bf00      	nop
	for (; i < devices; i++) {
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <get_Temperature+0x104>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	3301      	adds	r3, #1
 80029a4:	4a05      	ldr	r2, [pc, #20]	; (80029bc <get_Temperature+0x104>)
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <get_Temperature+0x114>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	4b03      	ldr	r3, [pc, #12]	; (80029bc <get_Temperature+0x104>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d886      	bhi.n	80028c4 <get_Temperature+0xc>
		}
	}
//	pDelay = 4000000;
//	for (i = 0; i < pDelay * 1; i++){}   /* Wait a bit. */
}
 80029b6:	bf00      	nop
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000784 	.word	0x20000784
 80029c0:	2000076c 	.word	0x2000076c
 80029c4:	20000768 	.word	0x20000768
 80029c8:	20000780 	.word	0x20000780
 80029cc:	20000794 	.word	0x20000794

080029d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <HAL_MspInit+0x4c>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	4a0f      	ldr	r2, [pc, #60]	; (8002a1c <HAL_MspInit+0x4c>)
 80029e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e4:	6453      	str	r3, [r2, #68]	; 0x44
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <HAL_MspInit+0x4c>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_MspInit+0x4c>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	4a08      	ldr	r2, [pc, #32]	; (8002a1c <HAL_MspInit+0x4c>)
 80029fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a00:	6413      	str	r3, [r2, #64]	; 0x40
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_MspInit+0x4c>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a0e:	2007      	movs	r0, #7
 8002a10:	f000 fbf6 	bl	8003200 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40023800 	.word	0x40023800

08002a20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08a      	sub	sp, #40	; 0x28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a19      	ldr	r2, [pc, #100]	; (8002aa4 <HAL_I2C_MspInit+0x84>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d12c      	bne.n	8002a9c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	4b18      	ldr	r3, [pc, #96]	; (8002aa8 <HAL_I2C_MspInit+0x88>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	4a17      	ldr	r2, [pc, #92]	; (8002aa8 <HAL_I2C_MspInit+0x88>)
 8002a4c:	f043 0302 	orr.w	r3, r3, #2
 8002a50:	6313      	str	r3, [r2, #48]	; 0x30
 8002a52:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <HAL_I2C_MspInit+0x88>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002a5e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a64:	2312      	movs	r3, #18
 8002a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a70:	2304      	movs	r3, #4
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a74:	f107 0314 	add.w	r3, r7, #20
 8002a78:	4619      	mov	r1, r3
 8002a7a:	480c      	ldr	r0, [pc, #48]	; (8002aac <HAL_I2C_MspInit+0x8c>)
 8002a7c:	f000 fc94 	bl	80033a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <HAL_I2C_MspInit+0x88>)
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	4a07      	ldr	r2, [pc, #28]	; (8002aa8 <HAL_I2C_MspInit+0x88>)
 8002a8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_I2C_MspInit+0x88>)
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a9c:	bf00      	nop
 8002a9e:	3728      	adds	r7, #40	; 0x28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40005400 	.word	0x40005400
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40020400 	.word	0x40020400

08002ab0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a28      	ldr	r2, [pc, #160]	; (8002b70 <HAL_I2S_MspInit+0xc0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d14a      	bne.n	8002b68 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	4b27      	ldr	r3, [pc, #156]	; (8002b74 <HAL_I2S_MspInit+0xc4>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	4a26      	ldr	r2, [pc, #152]	; (8002b74 <HAL_I2S_MspInit+0xc4>)
 8002adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae2:	4b24      	ldr	r3, [pc, #144]	; (8002b74 <HAL_I2S_MspInit+0xc4>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <HAL_I2S_MspInit+0xc4>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a1f      	ldr	r2, [pc, #124]	; (8002b74 <HAL_I2S_MspInit+0xc4>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
 8002afe:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <HAL_I2S_MspInit+0xc4>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_I2S_MspInit+0xc4>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	4a18      	ldr	r2, [pc, #96]	; (8002b74 <HAL_I2S_MspInit+0xc4>)
 8002b14:	f043 0304 	orr.w	r3, r3, #4
 8002b18:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1a:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <HAL_I2S_MspInit+0xc4>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002b26:	2310      	movs	r3, #16
 8002b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b36:	2306      	movs	r3, #6
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002b3a:	f107 0314 	add.w	r3, r7, #20
 8002b3e:	4619      	mov	r1, r3
 8002b40:	480d      	ldr	r0, [pc, #52]	; (8002b78 <HAL_I2S_MspInit+0xc8>)
 8002b42:	f000 fc31 	bl	80033a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002b46:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b54:	2300      	movs	r3, #0
 8002b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b58:	2306      	movs	r3, #6
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	4619      	mov	r1, r3
 8002b62:	4806      	ldr	r0, [pc, #24]	; (8002b7c <HAL_I2S_MspInit+0xcc>)
 8002b64:	f000 fc20 	bl	80033a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002b68:	bf00      	nop
 8002b6a:	3728      	adds	r7, #40	; 0x28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40003c00 	.word	0x40003c00
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020000 	.word	0x40020000
 8002b7c:	40020800 	.word	0x40020800

08002b80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	; 0x28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a19      	ldr	r2, [pc, #100]	; (8002c04 <HAL_SPI_MspInit+0x84>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d12b      	bne.n	8002bfa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <HAL_SPI_MspInit+0x88>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	4a17      	ldr	r2, [pc, #92]	; (8002c08 <HAL_SPI_MspInit+0x88>)
 8002bac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <HAL_SPI_MspInit+0x88>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_SPI_MspInit+0x88>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	4a10      	ldr	r2, [pc, #64]	; (8002c08 <HAL_SPI_MspInit+0x88>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <HAL_SPI_MspInit+0x88>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002bda:	23e0      	movs	r3, #224	; 0xe0
 8002bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bde:	2302      	movs	r3, #2
 8002be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be6:	2300      	movs	r3, #0
 8002be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bea:	2305      	movs	r3, #5
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bee:	f107 0314 	add.w	r3, r7, #20
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4805      	ldr	r0, [pc, #20]	; (8002c0c <HAL_SPI_MspInit+0x8c>)
 8002bf6:	f000 fbd7 	bl	80033a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002bfa:	bf00      	nop
 8002bfc:	3728      	adds	r7, #40	; 0x28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40013000 	.word	0x40013000
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40020000 	.word	0x40020000

08002c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	; 0x28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ca4 <HAL_UART_MspInit+0x94>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d133      	bne.n	8002c9a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <HAL_UART_MspInit+0x98>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	4a1b      	ldr	r2, [pc, #108]	; (8002ca8 <HAL_UART_MspInit+0x98>)
 8002c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c40:	6413      	str	r3, [r2, #64]	; 0x40
 8002c42:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <HAL_UART_MspInit+0x98>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <HAL_UART_MspInit+0x98>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <HAL_UART_MspInit+0x98>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_UART_MspInit+0x98>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c6a:	2304      	movs	r3, #4
 8002c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c6e:	2312      	movs	r3, #18
 8002c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c76:	2303      	movs	r3, #3
 8002c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7e:	f107 0314 	add.w	r3, r7, #20
 8002c82:	4619      	mov	r1, r3
 8002c84:	4809      	ldr	r0, [pc, #36]	; (8002cac <HAL_UART_MspInit+0x9c>)
 8002c86:	f000 fb8f 	bl	80033a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	2026      	movs	r0, #38	; 0x26
 8002c90:	f000 fac1 	bl	8003216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c94:	2026      	movs	r0, #38	; 0x26
 8002c96:	f000 fada 	bl	800324e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c9a:	bf00      	nop
 8002c9c:	3728      	adds	r7, #40	; 0x28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40004400 	.word	0x40004400
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40020000 	.word	0x40020000

08002cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cb4:	e7fe      	b.n	8002cb4 <NMI_Handler+0x4>

08002cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cba:	e7fe      	b.n	8002cba <HardFault_Handler+0x4>

08002cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cc0:	e7fe      	b.n	8002cc0 <MemManage_Handler+0x4>

08002cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cc6:	e7fe      	b.n	8002cc6 <BusFault_Handler+0x4>

08002cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <UsageFault_Handler+0x4>

08002cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cfc:	f000 f96c 	bl	8002fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  owReadHandler();
 8002d08:	f7ff f9e4 	bl	80020d4 <owReadHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d0c:	4802      	ldr	r0, [pc, #8]	; (8002d18 <USART2_IRQHandler+0x14>)
 8002d0e:	f004 f991 	bl	8007034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	200006d4 	.word	0x200006d4

08002d1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002d20:	4802      	ldr	r0, [pc, #8]	; (8002d2c <OTG_FS_IRQHandler+0x10>)
 8002d22:	f002 fac1 	bl	80052a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20001c70 	.word	0x20001c70

08002d30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
	return 1;
 8002d34:	2301      	movs	r3, #1
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <_kill>:

int _kill(int pid, int sig)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d4a:	f008 fcd5 	bl	800b6f8 <__errno>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2216      	movs	r2, #22
 8002d52:	601a      	str	r2, [r3, #0]
	return -1;
 8002d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <_exit>:

void _exit (int status)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ffe7 	bl	8002d40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d72:	e7fe      	b.n	8002d72 <_exit+0x12>

08002d74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	e00a      	b.n	8002d9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d86:	f3af 8000 	nop.w
 8002d8a:	4601      	mov	r1, r0
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	60ba      	str	r2, [r7, #8]
 8002d92:	b2ca      	uxtb	r2, r1
 8002d94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	dbf0      	blt.n	8002d86 <_read+0x12>
	}

return len;
 8002da4:	687b      	ldr	r3, [r7, #4]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	e009      	b.n	8002dd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	60ba      	str	r2, [r7, #8]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	dbf1      	blt.n	8002dc0 <_write+0x12>
	}
	return len;
 8002ddc:	687b      	ldr	r3, [r7, #4]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <_close>:

int _close(int file)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
	return -1;
 8002dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e0e:	605a      	str	r2, [r3, #4]
	return 0;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <_isatty>:

int _isatty(int file)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
	return 1;
 8002e26:	2301      	movs	r3, #1
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
	return 0;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e58:	4a14      	ldr	r2, [pc, #80]	; (8002eac <_sbrk+0x5c>)
 8002e5a:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <_sbrk+0x60>)
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e64:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <_sbrk+0x64>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d102      	bne.n	8002e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <_sbrk+0x64>)
 8002e6e:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <_sbrk+0x68>)
 8002e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e72:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <_sbrk+0x64>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4413      	add	r3, r2
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d207      	bcs.n	8002e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e80:	f008 fc3a 	bl	800b6f8 <__errno>
 8002e84:	4603      	mov	r3, r0
 8002e86:	220c      	movs	r2, #12
 8002e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e8e:	e009      	b.n	8002ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e90:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <_sbrk+0x64>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e96:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <_sbrk+0x64>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	4a05      	ldr	r2, [pc, #20]	; (8002eb4 <_sbrk+0x64>)
 8002ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20020000 	.word	0x20020000
 8002eb0:	00000400 	.word	0x00000400
 8002eb4:	20000370 	.word	0x20000370
 8002eb8:	20002088 	.word	0x20002088

08002ebc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <SystemInit+0x20>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	4a05      	ldr	r2, [pc, #20]	; (8002edc <SystemInit+0x20>)
 8002ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ed0:	bf00      	nop
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ee4:	480d      	ldr	r0, [pc, #52]	; (8002f1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ee6:	490e      	ldr	r1, [pc, #56]	; (8002f20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ee8:	4a0e      	ldr	r2, [pc, #56]	; (8002f24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eec:	e002      	b.n	8002ef4 <LoopCopyDataInit>

08002eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ef2:	3304      	adds	r3, #4

08002ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef8:	d3f9      	bcc.n	8002eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002efa:	4a0b      	ldr	r2, [pc, #44]	; (8002f28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002efc:	4c0b      	ldr	r4, [pc, #44]	; (8002f2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f00:	e001      	b.n	8002f06 <LoopFillZerobss>

08002f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f04:	3204      	adds	r2, #4

08002f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f08:	d3fb      	bcc.n	8002f02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f0a:	f7ff ffd7 	bl	8002ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f0e:	f008 fbf9 	bl	800b704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f12:	f7fe fd8f 	bl	8001a34 <main>
  bx  lr    
 8002f16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f20:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8002f24:	0800ea04 	.word	0x0800ea04
  ldr r2, =_sbss
 8002f28:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8002f2c:	20002088 	.word	0x20002088

08002f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f30:	e7fe      	b.n	8002f30 <ADC_IRQHandler>
	...

08002f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f38:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <HAL_Init+0x40>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a0d      	ldr	r2, [pc, #52]	; (8002f74 <HAL_Init+0x40>)
 8002f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_Init+0x40>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <HAL_Init+0x40>)
 8002f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f50:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <HAL_Init+0x40>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a07      	ldr	r2, [pc, #28]	; (8002f74 <HAL_Init+0x40>)
 8002f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f5c:	2003      	movs	r0, #3
 8002f5e:	f000 f94f 	bl	8003200 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f62:	2000      	movs	r0, #0
 8002f64:	f000 f808 	bl	8002f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f68:	f7ff fd32 	bl	80029d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40023c00 	.word	0x40023c00

08002f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f80:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <HAL_InitTick+0x54>)
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_InitTick+0x58>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 f967 	bl	800326a <HAL_SYSTICK_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e00e      	b.n	8002fc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b0f      	cmp	r3, #15
 8002faa:	d80a      	bhi.n	8002fc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fac:	2200      	movs	r2, #0
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fb4:	f000 f92f 	bl	8003216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fb8:	4a06      	ldr	r2, [pc, #24]	; (8002fd4 <HAL_InitTick+0x5c>)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	e000      	b.n	8002fc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20000004 	.word	0x20000004
 8002fd0:	2000000c 	.word	0x2000000c
 8002fd4:	20000008 	.word	0x20000008

08002fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_IncTick+0x20>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_IncTick+0x24>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	4a04      	ldr	r2, [pc, #16]	; (8002ffc <HAL_IncTick+0x24>)
 8002fea:	6013      	str	r3, [r2, #0]
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	2000000c 	.word	0x2000000c
 8002ffc:	2000079c 	.word	0x2000079c

08003000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return uwTick;
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <HAL_GetTick+0x14>)
 8003006:	681b      	ldr	r3, [r3, #0]
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	2000079c 	.word	0x2000079c

08003018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003020:	f7ff ffee 	bl	8003000 <HAL_GetTick>
 8003024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003030:	d005      	beq.n	800303e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <HAL_Delay+0x44>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4413      	add	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800303e:	bf00      	nop
 8003040:	f7ff ffde 	bl	8003000 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	429a      	cmp	r2, r3
 800304e:	d8f7      	bhi.n	8003040 <HAL_Delay+0x28>
  {
  }
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	2000000c 	.word	0x2000000c

08003060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003070:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800307c:	4013      	ands	r3, r2
 800307e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800308c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003092:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	60d3      	str	r3, [r2, #12]
}
 8003098:	bf00      	nop
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	e000ed00 	.word	0xe000ed00

080030a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <__NVIC_GetPriorityGrouping+0x18>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	0a1b      	lsrs	r3, r3, #8
 80030b2:	f003 0307 	and.w	r3, r3, #7
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	db0b      	blt.n	80030ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	f003 021f 	and.w	r2, r3, #31
 80030dc:	4907      	ldr	r1, [pc, #28]	; (80030fc <__NVIC_EnableIRQ+0x38>)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	2001      	movs	r0, #1
 80030e6:	fa00 f202 	lsl.w	r2, r0, r2
 80030ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	e000e100 	.word	0xe000e100

08003100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	6039      	str	r1, [r7, #0]
 800310a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003110:	2b00      	cmp	r3, #0
 8003112:	db0a      	blt.n	800312a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	b2da      	uxtb	r2, r3
 8003118:	490c      	ldr	r1, [pc, #48]	; (800314c <__NVIC_SetPriority+0x4c>)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	0112      	lsls	r2, r2, #4
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	440b      	add	r3, r1
 8003124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003128:	e00a      	b.n	8003140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	4908      	ldr	r1, [pc, #32]	; (8003150 <__NVIC_SetPriority+0x50>)
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	3b04      	subs	r3, #4
 8003138:	0112      	lsls	r2, r2, #4
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	440b      	add	r3, r1
 800313e:	761a      	strb	r2, [r3, #24]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000e100 	.word	0xe000e100
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003154:	b480      	push	{r7}
 8003156:	b089      	sub	sp, #36	; 0x24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f1c3 0307 	rsb	r3, r3, #7
 800316e:	2b04      	cmp	r3, #4
 8003170:	bf28      	it	cs
 8003172:	2304      	movcs	r3, #4
 8003174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3304      	adds	r3, #4
 800317a:	2b06      	cmp	r3, #6
 800317c:	d902      	bls.n	8003184 <NVIC_EncodePriority+0x30>
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3b03      	subs	r3, #3
 8003182:	e000      	b.n	8003186 <NVIC_EncodePriority+0x32>
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43da      	mvns	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	401a      	ands	r2, r3
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800319c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	fa01 f303 	lsl.w	r3, r1, r3
 80031a6:	43d9      	mvns	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ac:	4313      	orrs	r3, r2
         );
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3724      	adds	r7, #36	; 0x24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031cc:	d301      	bcc.n	80031d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ce:	2301      	movs	r3, #1
 80031d0:	e00f      	b.n	80031f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031d2:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <SysTick_Config+0x40>)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031da:	210f      	movs	r1, #15
 80031dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031e0:	f7ff ff8e 	bl	8003100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <SysTick_Config+0x40>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ea:	4b04      	ldr	r3, [pc, #16]	; (80031fc <SysTick_Config+0x40>)
 80031ec:	2207      	movs	r2, #7
 80031ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	e000e010 	.word	0xe000e010

08003200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff ff29 	bl	8003060 <__NVIC_SetPriorityGrouping>
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003216:	b580      	push	{r7, lr}
 8003218:	b086      	sub	sp, #24
 800321a:	af00      	add	r7, sp, #0
 800321c:	4603      	mov	r3, r0
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	607a      	str	r2, [r7, #4]
 8003222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003228:	f7ff ff3e 	bl	80030a8 <__NVIC_GetPriorityGrouping>
 800322c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	68b9      	ldr	r1, [r7, #8]
 8003232:	6978      	ldr	r0, [r7, #20]
 8003234:	f7ff ff8e 	bl	8003154 <NVIC_EncodePriority>
 8003238:	4602      	mov	r2, r0
 800323a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff ff5d 	bl	8003100 <__NVIC_SetPriority>
}
 8003246:	bf00      	nop
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	4603      	mov	r3, r0
 8003256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff ff31 	bl	80030c4 <__NVIC_EnableIRQ>
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff ffa2 	bl	80031bc <SysTick_Config>
 8003278:	4603      	mov	r3, r0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003290:	f7ff feb6 	bl	8003000 <HAL_GetTick>
 8003294:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d008      	beq.n	80032b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2280      	movs	r2, #128	; 0x80
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e052      	b.n	800335a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0216 	bic.w	r2, r2, #22
 80032c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d103      	bne.n	80032e4 <HAL_DMA_Abort+0x62>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0208 	bic.w	r2, r2, #8
 80032f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003304:	e013      	b.n	800332e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003306:	f7ff fe7b 	bl	8003000 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b05      	cmp	r3, #5
 8003312:	d90c      	bls.n	800332e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2203      	movs	r2, #3
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e015      	b.n	800335a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e4      	bne.n	8003306 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003340:	223f      	movs	r2, #63	; 0x3f
 8003342:	409a      	lsls	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d004      	beq.n	8003380 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2280      	movs	r2, #128	; 0x80
 800337a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e00c      	b.n	800339a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2205      	movs	r2, #5
 8003384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0201 	bic.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	; 0x24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	e16b      	b.n	800369c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033c4:	2201      	movs	r2, #1
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4013      	ands	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	429a      	cmp	r2, r3
 80033de:	f040 815a 	bne.w	8003696 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d005      	beq.n	80033fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d130      	bne.n	800345c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	2203      	movs	r2, #3
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003430:	2201      	movs	r2, #1
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 0201 	and.w	r2, r3, #1
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	2b03      	cmp	r3, #3
 8003466:	d017      	beq.n	8003498 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	2203      	movs	r2, #3
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d123      	bne.n	80034ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	08da      	lsrs	r2, r3, #3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3208      	adds	r2, #8
 80034ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	220f      	movs	r2, #15
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	08da      	lsrs	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3208      	adds	r2, #8
 80034e6:	69b9      	ldr	r1, [r7, #24]
 80034e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	2203      	movs	r2, #3
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0203 	and.w	r2, r3, #3
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80b4 	beq.w	8003696 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	4b60      	ldr	r3, [pc, #384]	; (80036b4 <HAL_GPIO_Init+0x30c>)
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	4a5f      	ldr	r2, [pc, #380]	; (80036b4 <HAL_GPIO_Init+0x30c>)
 8003538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800353c:	6453      	str	r3, [r2, #68]	; 0x44
 800353e:	4b5d      	ldr	r3, [pc, #372]	; (80036b4 <HAL_GPIO_Init+0x30c>)
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800354a:	4a5b      	ldr	r2, [pc, #364]	; (80036b8 <HAL_GPIO_Init+0x310>)
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	089b      	lsrs	r3, r3, #2
 8003550:	3302      	adds	r3, #2
 8003552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	220f      	movs	r2, #15
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43db      	mvns	r3, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4013      	ands	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a52      	ldr	r2, [pc, #328]	; (80036bc <HAL_GPIO_Init+0x314>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d02b      	beq.n	80035ce <HAL_GPIO_Init+0x226>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a51      	ldr	r2, [pc, #324]	; (80036c0 <HAL_GPIO_Init+0x318>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d025      	beq.n	80035ca <HAL_GPIO_Init+0x222>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a50      	ldr	r2, [pc, #320]	; (80036c4 <HAL_GPIO_Init+0x31c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01f      	beq.n	80035c6 <HAL_GPIO_Init+0x21e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a4f      	ldr	r2, [pc, #316]	; (80036c8 <HAL_GPIO_Init+0x320>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d019      	beq.n	80035c2 <HAL_GPIO_Init+0x21a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a4e      	ldr	r2, [pc, #312]	; (80036cc <HAL_GPIO_Init+0x324>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <HAL_GPIO_Init+0x216>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a4d      	ldr	r2, [pc, #308]	; (80036d0 <HAL_GPIO_Init+0x328>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00d      	beq.n	80035ba <HAL_GPIO_Init+0x212>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a4c      	ldr	r2, [pc, #304]	; (80036d4 <HAL_GPIO_Init+0x32c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d007      	beq.n	80035b6 <HAL_GPIO_Init+0x20e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a4b      	ldr	r2, [pc, #300]	; (80036d8 <HAL_GPIO_Init+0x330>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d101      	bne.n	80035b2 <HAL_GPIO_Init+0x20a>
 80035ae:	2307      	movs	r3, #7
 80035b0:	e00e      	b.n	80035d0 <HAL_GPIO_Init+0x228>
 80035b2:	2308      	movs	r3, #8
 80035b4:	e00c      	b.n	80035d0 <HAL_GPIO_Init+0x228>
 80035b6:	2306      	movs	r3, #6
 80035b8:	e00a      	b.n	80035d0 <HAL_GPIO_Init+0x228>
 80035ba:	2305      	movs	r3, #5
 80035bc:	e008      	b.n	80035d0 <HAL_GPIO_Init+0x228>
 80035be:	2304      	movs	r3, #4
 80035c0:	e006      	b.n	80035d0 <HAL_GPIO_Init+0x228>
 80035c2:	2303      	movs	r3, #3
 80035c4:	e004      	b.n	80035d0 <HAL_GPIO_Init+0x228>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e002      	b.n	80035d0 <HAL_GPIO_Init+0x228>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <HAL_GPIO_Init+0x228>
 80035ce:	2300      	movs	r3, #0
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	f002 0203 	and.w	r2, r2, #3
 80035d6:	0092      	lsls	r2, r2, #2
 80035d8:	4093      	lsls	r3, r2
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035e0:	4935      	ldr	r1, [pc, #212]	; (80036b8 <HAL_GPIO_Init+0x310>)
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	089b      	lsrs	r3, r3, #2
 80035e6:	3302      	adds	r3, #2
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ee:	4b3b      	ldr	r3, [pc, #236]	; (80036dc <HAL_GPIO_Init+0x334>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4013      	ands	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003612:	4a32      	ldr	r2, [pc, #200]	; (80036dc <HAL_GPIO_Init+0x334>)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003618:	4b30      	ldr	r3, [pc, #192]	; (80036dc <HAL_GPIO_Init+0x334>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	43db      	mvns	r3, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4013      	ands	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800363c:	4a27      	ldr	r2, [pc, #156]	; (80036dc <HAL_GPIO_Init+0x334>)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003642:	4b26      	ldr	r3, [pc, #152]	; (80036dc <HAL_GPIO_Init+0x334>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	43db      	mvns	r3, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003666:	4a1d      	ldr	r2, [pc, #116]	; (80036dc <HAL_GPIO_Init+0x334>)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800366c:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <HAL_GPIO_Init+0x334>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	43db      	mvns	r3, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003690:	4a12      	ldr	r2, [pc, #72]	; (80036dc <HAL_GPIO_Init+0x334>)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	3301      	adds	r3, #1
 800369a:	61fb      	str	r3, [r7, #28]
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	2b0f      	cmp	r3, #15
 80036a0:	f67f ae90 	bls.w	80033c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036a4:	bf00      	nop
 80036a6:	bf00      	nop
 80036a8:	3724      	adds	r7, #36	; 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40013800 	.word	0x40013800
 80036bc:	40020000 	.word	0x40020000
 80036c0:	40020400 	.word	0x40020400
 80036c4:	40020800 	.word	0x40020800
 80036c8:	40020c00 	.word	0x40020c00
 80036cc:	40021000 	.word	0x40021000
 80036d0:	40021400 	.word	0x40021400
 80036d4:	40021800 	.word	0x40021800
 80036d8:	40021c00 	.word	0x40021c00
 80036dc:	40013c00 	.word	0x40013c00

080036e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
 80036ec:	4613      	mov	r3, r2
 80036ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036f0:	787b      	ldrb	r3, [r7, #1]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036f6:	887a      	ldrh	r2, [r7, #2]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036fc:	e003      	b.n	8003706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036fe:	887b      	ldrh	r3, [r7, #2]
 8003700:	041a      	lsls	r2, r3, #16
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	619a      	str	r2, [r3, #24]
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003712:	b480      	push	{r7}
 8003714:	b085      	sub	sp, #20
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	460b      	mov	r3, r1
 800371c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003724:	887a      	ldrh	r2, [r7, #2]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4013      	ands	r3, r2
 800372a:	041a      	lsls	r2, r3, #16
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	43d9      	mvns	r1, r3
 8003730:	887b      	ldrh	r3, [r7, #2]
 8003732:	400b      	ands	r3, r1
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	619a      	str	r2, [r3, #24]
}
 800373a:	bf00      	nop
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e12b      	b.n	80039b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff f956 	bl	8002a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2224      	movs	r2, #36	; 0x24
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0201 	bic.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800379a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037ac:	f003 f9fc 	bl	8006ba8 <HAL_RCC_GetPCLK1Freq>
 80037b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4a81      	ldr	r2, [pc, #516]	; (80039bc <HAL_I2C_Init+0x274>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d807      	bhi.n	80037cc <HAL_I2C_Init+0x84>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4a80      	ldr	r2, [pc, #512]	; (80039c0 <HAL_I2C_Init+0x278>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	bf94      	ite	ls
 80037c4:	2301      	movls	r3, #1
 80037c6:	2300      	movhi	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	e006      	b.n	80037da <HAL_I2C_Init+0x92>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a7d      	ldr	r2, [pc, #500]	; (80039c4 <HAL_I2C_Init+0x27c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	bf94      	ite	ls
 80037d4:	2301      	movls	r3, #1
 80037d6:	2300      	movhi	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e0e7      	b.n	80039b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4a78      	ldr	r2, [pc, #480]	; (80039c8 <HAL_I2C_Init+0x280>)
 80037e6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ea:	0c9b      	lsrs	r3, r3, #18
 80037ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	430a      	orrs	r2, r1
 8003800:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	4a6a      	ldr	r2, [pc, #424]	; (80039bc <HAL_I2C_Init+0x274>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d802      	bhi.n	800381c <HAL_I2C_Init+0xd4>
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	3301      	adds	r3, #1
 800381a:	e009      	b.n	8003830 <HAL_I2C_Init+0xe8>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003822:	fb02 f303 	mul.w	r3, r2, r3
 8003826:	4a69      	ldr	r2, [pc, #420]	; (80039cc <HAL_I2C_Init+0x284>)
 8003828:	fba2 2303 	umull	r2, r3, r2, r3
 800382c:	099b      	lsrs	r3, r3, #6
 800382e:	3301      	adds	r3, #1
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	430b      	orrs	r3, r1
 8003836:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003842:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	495c      	ldr	r1, [pc, #368]	; (80039bc <HAL_I2C_Init+0x274>)
 800384c:	428b      	cmp	r3, r1
 800384e:	d819      	bhi.n	8003884 <HAL_I2C_Init+0x13c>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1e59      	subs	r1, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	fbb1 f3f3 	udiv	r3, r1, r3
 800385e:	1c59      	adds	r1, r3, #1
 8003860:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003864:	400b      	ands	r3, r1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_I2C_Init+0x138>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1e59      	subs	r1, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	fbb1 f3f3 	udiv	r3, r1, r3
 8003878:	3301      	adds	r3, #1
 800387a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387e:	e051      	b.n	8003924 <HAL_I2C_Init+0x1dc>
 8003880:	2304      	movs	r3, #4
 8003882:	e04f      	b.n	8003924 <HAL_I2C_Init+0x1dc>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d111      	bne.n	80038b0 <HAL_I2C_Init+0x168>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	1e58      	subs	r0, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6859      	ldr	r1, [r3, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	440b      	add	r3, r1
 800389a:	fbb0 f3f3 	udiv	r3, r0, r3
 800389e:	3301      	adds	r3, #1
 80038a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bf0c      	ite	eq
 80038a8:	2301      	moveq	r3, #1
 80038aa:	2300      	movne	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	e012      	b.n	80038d6 <HAL_I2C_Init+0x18e>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1e58      	subs	r0, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6859      	ldr	r1, [r3, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	0099      	lsls	r1, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c6:	3301      	adds	r3, #1
 80038c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	bf0c      	ite	eq
 80038d0:	2301      	moveq	r3, #1
 80038d2:	2300      	movne	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_I2C_Init+0x196>
 80038da:	2301      	movs	r3, #1
 80038dc:	e022      	b.n	8003924 <HAL_I2C_Init+0x1dc>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10e      	bne.n	8003904 <HAL_I2C_Init+0x1bc>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1e58      	subs	r0, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6859      	ldr	r1, [r3, #4]
 80038ee:	460b      	mov	r3, r1
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	440b      	add	r3, r1
 80038f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f8:	3301      	adds	r3, #1
 80038fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003902:	e00f      	b.n	8003924 <HAL_I2C_Init+0x1dc>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1e58      	subs	r0, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6859      	ldr	r1, [r3, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	0099      	lsls	r1, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	fbb0 f3f3 	udiv	r3, r0, r3
 800391a:	3301      	adds	r3, #1
 800391c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003920:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	6809      	ldr	r1, [r1, #0]
 8003928:	4313      	orrs	r3, r2
 800392a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69da      	ldr	r2, [r3, #28]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003952:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6911      	ldr	r1, [r2, #16]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68d2      	ldr	r2, [r2, #12]
 800395e:	4311      	orrs	r1, r2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	430b      	orrs	r3, r1
 8003966:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	000186a0 	.word	0x000186a0
 80039c0:	001e847f 	.word	0x001e847f
 80039c4:	003d08ff 	.word	0x003d08ff
 80039c8:	431bde83 	.word	0x431bde83
 80039cc:	10624dd3 	.word	0x10624dd3

080039d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	4608      	mov	r0, r1
 80039da:	4611      	mov	r1, r2
 80039dc:	461a      	mov	r2, r3
 80039de:	4603      	mov	r3, r0
 80039e0:	817b      	strh	r3, [r7, #10]
 80039e2:	460b      	mov	r3, r1
 80039e4:	813b      	strh	r3, [r7, #8]
 80039e6:	4613      	mov	r3, r2
 80039e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039ea:	f7ff fb09 	bl	8003000 <HAL_GetTick>
 80039ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	f040 80d9 	bne.w	8003bb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	2319      	movs	r3, #25
 8003a04:	2201      	movs	r2, #1
 8003a06:	496d      	ldr	r1, [pc, #436]	; (8003bbc <HAL_I2C_Mem_Write+0x1ec>)
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 fc7f 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a14:	2302      	movs	r3, #2
 8003a16:	e0cc      	b.n	8003bb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_I2C_Mem_Write+0x56>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e0c5      	b.n	8003bb2 <HAL_I2C_Mem_Write+0x1e2>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d007      	beq.n	8003a4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2221      	movs	r2, #33	; 0x21
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2240      	movs	r2, #64	; 0x40
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a3a      	ldr	r2, [r7, #32]
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4a4d      	ldr	r2, [pc, #308]	; (8003bc0 <HAL_I2C_Mem_Write+0x1f0>)
 8003a8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a8e:	88f8      	ldrh	r0, [r7, #6]
 8003a90:	893a      	ldrh	r2, [r7, #8]
 8003a92:	8979      	ldrh	r1, [r7, #10]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	9301      	str	r3, [sp, #4]
 8003a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fab6 	bl	8004010 <I2C_RequestMemoryWrite>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d052      	beq.n	8003b50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e081      	b.n	8003bb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 fd00 	bl	80044b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00d      	beq.n	8003ada <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d107      	bne.n	8003ad6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e06b      	b.n	8003bb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	781a      	ldrb	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d11b      	bne.n	8003b50 <HAL_I2C_Mem_Write+0x180>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d017      	beq.n	8003b50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	781a      	ldrb	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1aa      	bne.n	8003aae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 fcec 	bl	800453a <I2C_WaitOnBTFFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00d      	beq.n	8003b84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d107      	bne.n	8003b80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e016      	b.n	8003bb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	e000      	b.n	8003bb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bb0:	2302      	movs	r3, #2
  }
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	00100002 	.word	0x00100002
 8003bc0:	ffff0000 	.word	0xffff0000

08003bc4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08c      	sub	sp, #48	; 0x30
 8003bc8:	af02      	add	r7, sp, #8
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	4608      	mov	r0, r1
 8003bce:	4611      	mov	r1, r2
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	817b      	strh	r3, [r7, #10]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	813b      	strh	r3, [r7, #8]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bde:	f7ff fa0f 	bl	8003000 <HAL_GetTick>
 8003be2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	f040 8208 	bne.w	8004002 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	2319      	movs	r3, #25
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	497b      	ldr	r1, [pc, #492]	; (8003de8 <HAL_I2C_Mem_Read+0x224>)
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 fb85 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e1fb      	b.n	8004004 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_I2C_Mem_Read+0x56>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e1f4      	b.n	8004004 <HAL_I2C_Mem_Read+0x440>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d007      	beq.n	8003c40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2222      	movs	r2, #34	; 0x22
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2240      	movs	r2, #64	; 0x40
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4a5b      	ldr	r2, [pc, #364]	; (8003dec <HAL_I2C_Mem_Read+0x228>)
 8003c80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c82:	88f8      	ldrh	r0, [r7, #6]
 8003c84:	893a      	ldrh	r2, [r7, #8]
 8003c86:	8979      	ldrh	r1, [r7, #10]
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	9301      	str	r3, [sp, #4]
 8003c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	4603      	mov	r3, r0
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 fa52 	bl	800413c <I2C_RequestMemoryRead>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e1b0      	b.n	8004004 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d113      	bne.n	8003cd2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003caa:	2300      	movs	r3, #0
 8003cac:	623b      	str	r3, [r7, #32]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	623b      	str	r3, [r7, #32]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	623b      	str	r3, [r7, #32]
 8003cbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	e184      	b.n	8003fdc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d11b      	bne.n	8003d12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	e164      	b.n	8003fdc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d11b      	bne.n	8003d52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	61bb      	str	r3, [r7, #24]
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	e144      	b.n	8003fdc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d68:	e138      	b.n	8003fdc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	f200 80f1 	bhi.w	8003f56 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d123      	bne.n	8003dc4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fc1b 	bl	80045bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e139      	b.n	8004004 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691a      	ldr	r2, [r3, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dc2:	e10b      	b.n	8003fdc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d14e      	bne.n	8003e6a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	4906      	ldr	r1, [pc, #24]	; (8003df0 <HAL_I2C_Mem_Read+0x22c>)
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fa98 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d008      	beq.n	8003df4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e10e      	b.n	8004004 <HAL_I2C_Mem_Read+0x440>
 8003de6:	bf00      	nop
 8003de8:	00100002 	.word	0x00100002
 8003dec:	ffff0000 	.word	0xffff0000
 8003df0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e68:	e0b8      	b.n	8003fdc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e70:	2200      	movs	r2, #0
 8003e72:	4966      	ldr	r1, [pc, #408]	; (800400c <HAL_I2C_Mem_Read+0x448>)
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 fa49 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0bf      	b.n	8004004 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ecc:	2200      	movs	r2, #0
 8003ece:	494f      	ldr	r1, [pc, #316]	; (800400c <HAL_I2C_Mem_Read+0x448>)
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 fa1b 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e091      	b.n	8004004 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f54:	e042      	b.n	8003fdc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fb2e 	bl	80045bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e04c      	b.n	8004004 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d118      	bne.n	8003fdc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f47f aec2 	bne.w	8003d6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e000      	b.n	8004004 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004002:	2302      	movs	r3, #2
  }
}
 8004004:	4618      	mov	r0, r3
 8004006:	3728      	adds	r7, #40	; 0x28
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	00010004 	.word	0x00010004

08004010 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af02      	add	r7, sp, #8
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	4608      	mov	r0, r1
 800401a:	4611      	mov	r1, r2
 800401c:	461a      	mov	r2, r3
 800401e:	4603      	mov	r3, r0
 8004020:	817b      	strh	r3, [r7, #10]
 8004022:	460b      	mov	r3, r1
 8004024:	813b      	strh	r3, [r7, #8]
 8004026:	4613      	mov	r3, r2
 8004028:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004038:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	2200      	movs	r2, #0
 8004042:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f960 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00d      	beq.n	800406e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004060:	d103      	bne.n	800406a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004068:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e05f      	b.n	800412e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800406e:	897b      	ldrh	r3, [r7, #10]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800407c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	6a3a      	ldr	r2, [r7, #32]
 8004082:	492d      	ldr	r1, [pc, #180]	; (8004138 <I2C_RequestMemoryWrite+0x128>)
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f998 	bl	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e04c      	b.n	800412e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004094:	2300      	movs	r3, #0
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ac:	6a39      	ldr	r1, [r7, #32]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fa02 	bl	80044b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d107      	bne.n	80040d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e02b      	b.n	800412e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d105      	bne.n	80040e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040dc:	893b      	ldrh	r3, [r7, #8]
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	611a      	str	r2, [r3, #16]
 80040e6:	e021      	b.n	800412c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040e8:	893b      	ldrh	r3, [r7, #8]
 80040ea:	0a1b      	lsrs	r3, r3, #8
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f8:	6a39      	ldr	r1, [r7, #32]
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f9dc 	bl	80044b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00d      	beq.n	8004122 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	2b04      	cmp	r3, #4
 800410c:	d107      	bne.n	800411e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e005      	b.n	800412e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004122:	893b      	ldrh	r3, [r7, #8]
 8004124:	b2da      	uxtb	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	00010002 	.word	0x00010002

0800413c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	4608      	mov	r0, r1
 8004146:	4611      	mov	r1, r2
 8004148:	461a      	mov	r2, r3
 800414a:	4603      	mov	r3, r0
 800414c:	817b      	strh	r3, [r7, #10]
 800414e:	460b      	mov	r3, r1
 8004150:	813b      	strh	r3, [r7, #8]
 8004152:	4613      	mov	r3, r2
 8004154:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004164:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004174:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	2200      	movs	r2, #0
 800417e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f8c2 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00d      	beq.n	80041aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800419c:	d103      	bne.n	80041a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e0aa      	b.n	8004300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041aa:	897b      	ldrh	r3, [r7, #10]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	6a3a      	ldr	r2, [r7, #32]
 80041be:	4952      	ldr	r1, [pc, #328]	; (8004308 <I2C_RequestMemoryRead+0x1cc>)
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 f8fa 	bl	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e097      	b.n	8004300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e8:	6a39      	ldr	r1, [r7, #32]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f964 	bl	80044b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00d      	beq.n	8004212 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d107      	bne.n	800420e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e076      	b.n	8004300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d105      	bne.n	8004224 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004218:	893b      	ldrh	r3, [r7, #8]
 800421a:	b2da      	uxtb	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	611a      	str	r2, [r3, #16]
 8004222:	e021      	b.n	8004268 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004224:	893b      	ldrh	r3, [r7, #8]
 8004226:	0a1b      	lsrs	r3, r3, #8
 8004228:	b29b      	uxth	r3, r3
 800422a:	b2da      	uxtb	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004234:	6a39      	ldr	r1, [r7, #32]
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f93e 	bl	80044b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00d      	beq.n	800425e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	2b04      	cmp	r3, #4
 8004248:	d107      	bne.n	800425a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004258:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e050      	b.n	8004300 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800425e:	893b      	ldrh	r3, [r7, #8]
 8004260:	b2da      	uxtb	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426a:	6a39      	ldr	r1, [r7, #32]
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f923 	bl	80044b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00d      	beq.n	8004294 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	2b04      	cmp	r3, #4
 800427e:	d107      	bne.n	8004290 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800428e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e035      	b.n	8004300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f82b 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00d      	beq.n	80042d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ca:	d103      	bne.n	80042d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e013      	b.n	8004300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042d8:	897b      	ldrh	r3, [r7, #10]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	6a3a      	ldr	r2, [r7, #32]
 80042ec:	4906      	ldr	r1, [pc, #24]	; (8004308 <I2C_RequestMemoryRead+0x1cc>)
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f863 	bl	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	00010002 	.word	0x00010002

0800430c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	4613      	mov	r3, r2
 800431a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800431c:	e025      	b.n	800436a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004324:	d021      	beq.n	800436a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004326:	f7fe fe6b 	bl	8003000 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d302      	bcc.n	800433c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d116      	bne.n	800436a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f043 0220 	orr.w	r2, r3, #32
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e023      	b.n	80043b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	0c1b      	lsrs	r3, r3, #16
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b01      	cmp	r3, #1
 8004372:	d10d      	bne.n	8004390 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	43da      	mvns	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4013      	ands	r3, r2
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	bf0c      	ite	eq
 8004386:	2301      	moveq	r3, #1
 8004388:	2300      	movne	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	461a      	mov	r2, r3
 800438e:	e00c      	b.n	80043aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	43da      	mvns	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4013      	ands	r3, r2
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	bf0c      	ite	eq
 80043a2:	2301      	moveq	r3, #1
 80043a4:	2300      	movne	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d0b6      	beq.n	800431e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	607a      	str	r2, [r7, #4]
 80043c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043c8:	e051      	b.n	800446e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d8:	d123      	bne.n	8004422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f043 0204 	orr.w	r2, r3, #4
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e046      	b.n	80044b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004428:	d021      	beq.n	800446e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442a:	f7fe fde9 	bl	8003000 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d116      	bne.n	800446e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f043 0220 	orr.w	r2, r3, #32
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e020      	b.n	80044b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	0c1b      	lsrs	r3, r3, #16
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b01      	cmp	r3, #1
 8004476:	d10c      	bne.n	8004492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	43da      	mvns	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	bf14      	ite	ne
 800448a:	2301      	movne	r3, #1
 800448c:	2300      	moveq	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	e00b      	b.n	80044aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	43da      	mvns	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4013      	ands	r3, r2
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bf14      	ite	ne
 80044a4:	2301      	movne	r3, #1
 80044a6:	2300      	moveq	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d18d      	bne.n	80043ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044c4:	e02d      	b.n	8004522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 f8ce 	bl	8004668 <I2C_IsAcknowledgeFailed>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e02d      	b.n	8004532 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044dc:	d021      	beq.n	8004522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044de:	f7fe fd8f 	bl	8003000 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d302      	bcc.n	80044f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d116      	bne.n	8004522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f043 0220 	orr.w	r2, r3, #32
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e007      	b.n	8004532 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452c:	2b80      	cmp	r3, #128	; 0x80
 800452e:	d1ca      	bne.n	80044c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004546:	e02d      	b.n	80045a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 f88d 	bl	8004668 <I2C_IsAcknowledgeFailed>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e02d      	b.n	80045b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800455e:	d021      	beq.n	80045a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004560:	f7fe fd4e 	bl	8003000 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	429a      	cmp	r2, r3
 800456e:	d302      	bcc.n	8004576 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d116      	bne.n	80045a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	f043 0220 	orr.w	r2, r3, #32
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e007      	b.n	80045b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d1ca      	bne.n	8004548 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045c8:	e042      	b.n	8004650 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d119      	bne.n	800460c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0210 	mvn.w	r2, #16
 80045e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e029      	b.n	8004660 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800460c:	f7fe fcf8 	bl	8003000 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	429a      	cmp	r2, r3
 800461a:	d302      	bcc.n	8004622 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d116      	bne.n	8004650 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463c:	f043 0220 	orr.w	r2, r3, #32
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e007      	b.n	8004660 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465a:	2b40      	cmp	r3, #64	; 0x40
 800465c:	d1b5      	bne.n	80045ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800467a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800467e:	d11b      	bne.n	80046b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004688:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	f043 0204 	orr.w	r2, r3, #4
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
	...

080046c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e128      	b.n	800492c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a90      	ldr	r2, [pc, #576]	; (8004934 <HAL_I2S_Init+0x26c>)
 80046f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7fe f9db 	bl	8002ab0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2202      	movs	r2, #2
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004710:	f023 030f 	bic.w	r3, r3, #15
 8004714:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2202      	movs	r2, #2
 800471c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d060      	beq.n	80047e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d102      	bne.n	8004734 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800472e:	2310      	movs	r3, #16
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	e001      	b.n	8004738 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004734:	2320      	movs	r3, #32
 8004736:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2b20      	cmp	r3, #32
 800473e:	d802      	bhi.n	8004746 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004746:	2001      	movs	r0, #1
 8004748:	f002 fb38 	bl	8006dbc <HAL_RCCEx_GetPeriphCLKFreq>
 800474c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004756:	d125      	bne.n	80047a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d010      	beq.n	8004782 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	fbb2 f2f3 	udiv	r2, r2, r3
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	461a      	mov	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	fbb2 f3f3 	udiv	r3, r2, r3
 800477c:	3305      	adds	r3, #5
 800477e:	613b      	str	r3, [r7, #16]
 8004780:	e01f      	b.n	80047c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	fbb2 f2f3 	udiv	r2, r2, r3
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	461a      	mov	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	fbb2 f3f3 	udiv	r3, r2, r3
 800479e:	3305      	adds	r3, #5
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	e00e      	b.n	80047c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	461a      	mov	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80047be:	3305      	adds	r3, #5
 80047c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	4a5c      	ldr	r2, [pc, #368]	; (8004938 <HAL_I2S_Init+0x270>)
 80047c6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ca:	08db      	lsrs	r3, r3, #3
 80047cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	085b      	lsrs	r3, r3, #1
 80047de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	021b      	lsls	r3, r3, #8
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	e003      	b.n	80047f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80047e8:	2302      	movs	r3, #2
 80047ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d902      	bls.n	80047fc <HAL_I2S_Init+0x134>
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	2bff      	cmp	r3, #255	; 0xff
 80047fa:	d907      	bls.n	800480c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004800:	f043 0210 	orr.w	r2, r3, #16
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e08f      	b.n	800492c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	ea42 0103 	orr.w	r1, r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69fa      	ldr	r2, [r7, #28]
 800481c:	430a      	orrs	r2, r1
 800481e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800482a:	f023 030f 	bic.w	r3, r3, #15
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6851      	ldr	r1, [r2, #4]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6892      	ldr	r2, [r2, #8]
 8004836:	4311      	orrs	r1, r2
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	68d2      	ldr	r2, [r2, #12]
 800483c:	4311      	orrs	r1, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6992      	ldr	r2, [r2, #24]
 8004842:	430a      	orrs	r2, r1
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800484e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d161      	bne.n	800491c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a38      	ldr	r2, [pc, #224]	; (800493c <HAL_I2S_Init+0x274>)
 800485c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a37      	ldr	r2, [pc, #220]	; (8004940 <HAL_I2S_Init+0x278>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d101      	bne.n	800486c <HAL_I2S_Init+0x1a4>
 8004868:	4b36      	ldr	r3, [pc, #216]	; (8004944 <HAL_I2S_Init+0x27c>)
 800486a:	e001      	b.n	8004870 <HAL_I2S_Init+0x1a8>
 800486c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	4932      	ldr	r1, [pc, #200]	; (8004940 <HAL_I2S_Init+0x278>)
 8004878:	428a      	cmp	r2, r1
 800487a:	d101      	bne.n	8004880 <HAL_I2S_Init+0x1b8>
 800487c:	4a31      	ldr	r2, [pc, #196]	; (8004944 <HAL_I2S_Init+0x27c>)
 800487e:	e001      	b.n	8004884 <HAL_I2S_Init+0x1bc>
 8004880:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004884:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004888:	f023 030f 	bic.w	r3, r3, #15
 800488c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a2b      	ldr	r2, [pc, #172]	; (8004940 <HAL_I2S_Init+0x278>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d101      	bne.n	800489c <HAL_I2S_Init+0x1d4>
 8004898:	4b2a      	ldr	r3, [pc, #168]	; (8004944 <HAL_I2S_Init+0x27c>)
 800489a:	e001      	b.n	80048a0 <HAL_I2S_Init+0x1d8>
 800489c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048a0:	2202      	movs	r2, #2
 80048a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a25      	ldr	r2, [pc, #148]	; (8004940 <HAL_I2S_Init+0x278>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d101      	bne.n	80048b2 <HAL_I2S_Init+0x1ea>
 80048ae:	4b25      	ldr	r3, [pc, #148]	; (8004944 <HAL_I2S_Init+0x27c>)
 80048b0:	e001      	b.n	80048b6 <HAL_I2S_Init+0x1ee>
 80048b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c2:	d003      	beq.n	80048cc <HAL_I2S_Init+0x204>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d103      	bne.n	80048d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80048cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	e001      	b.n	80048d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80048d4:	2300      	movs	r3, #0
 80048d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80048e2:	4313      	orrs	r3, r2
 80048e4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80048ec:	4313      	orrs	r3, r2
 80048ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80048f6:	4313      	orrs	r3, r2
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	897b      	ldrh	r3, [r7, #10]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004904:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a0d      	ldr	r2, [pc, #52]	; (8004940 <HAL_I2S_Init+0x278>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d101      	bne.n	8004914 <HAL_I2S_Init+0x24c>
 8004910:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <HAL_I2S_Init+0x27c>)
 8004912:	e001      	b.n	8004918 <HAL_I2S_Init+0x250>
 8004914:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004918:	897a      	ldrh	r2, [r7, #10]
 800491a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3720      	adds	r7, #32
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	08004a3f 	.word	0x08004a3f
 8004938:	cccccccd 	.word	0xcccccccd
 800493c:	08004b55 	.word	0x08004b55
 8004940:	40003800 	.word	0x40003800
 8004944:	40003400 	.word	0x40003400

08004948 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	881a      	ldrh	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	1c9a      	adds	r2, r3, #2
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10e      	bne.n	80049d8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049c8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff ffb8 	bl	8004948 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80049d8:	bf00      	nop
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	b292      	uxth	r2, r2
 80049f4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	1c9a      	adds	r2, r3, #2
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10e      	bne.n	8004a36 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a26:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7ff ff93 	bl	800495c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004a36:	bf00      	nop
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b086      	sub	sp, #24
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d13a      	bne.n	8004ad0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d109      	bne.n	8004a78 <I2S_IRQHandler+0x3a>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6e:	2b40      	cmp	r3, #64	; 0x40
 8004a70:	d102      	bne.n	8004a78 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff ffb4 	bl	80049e0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b40      	cmp	r3, #64	; 0x40
 8004a80:	d126      	bne.n	8004ad0 <I2S_IRQHandler+0x92>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d11f      	bne.n	8004ad0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a9e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	613b      	str	r3, [r7, #16]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	613b      	str	r3, [r7, #16]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	613b      	str	r3, [r7, #16]
 8004ab4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac2:	f043 0202 	orr.w	r2, r3, #2
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff ff50 	bl	8004970 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d136      	bne.n	8004b4a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d109      	bne.n	8004afa <I2S_IRQHandler+0xbc>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af0:	2b80      	cmp	r3, #128	; 0x80
 8004af2:	d102      	bne.n	8004afa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff ff45 	bl	8004984 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d122      	bne.n	8004b4a <I2S_IRQHandler+0x10c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	d11b      	bne.n	8004b4a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b20:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3c:	f043 0204 	orr.w	r2, r3, #4
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff ff13 	bl	8004970 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b4a:	bf00      	nop
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4aa2      	ldr	r2, [pc, #648]	; (8004df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d101      	bne.n	8004b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004b6e:	4ba2      	ldr	r3, [pc, #648]	; (8004df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b70:	e001      	b.n	8004b76 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004b72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a9b      	ldr	r2, [pc, #620]	; (8004df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d101      	bne.n	8004b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004b8c:	4b9a      	ldr	r3, [pc, #616]	; (8004df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b8e:	e001      	b.n	8004b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004b90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba0:	d004      	beq.n	8004bac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f040 8099 	bne.w	8004cde <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d107      	bne.n	8004bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f925 	bl	8004e10 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d107      	bne.n	8004be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f9c8 	bl	8004f70 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be6:	2b40      	cmp	r3, #64	; 0x40
 8004be8:	d13a      	bne.n	8004c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d035      	beq.n	8004c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a7e      	ldr	r2, [pc, #504]	; (8004df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d101      	bne.n	8004c02 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004bfe:	4b7e      	ldr	r3, [pc, #504]	; (8004df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c00:	e001      	b.n	8004c06 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004c02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4979      	ldr	r1, [pc, #484]	; (8004df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c0e:	428b      	cmp	r3, r1
 8004c10:	d101      	bne.n	8004c16 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004c12:	4b79      	ldr	r3, [pc, #484]	; (8004df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c14:	e001      	b.n	8004c1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004c16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c1e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c2e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	f043 0202 	orr.w	r2, r3, #2
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff fe88 	bl	8004970 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	f040 80be 	bne.w	8004de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 80b8 	beq.w	8004de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c86:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a59      	ldr	r2, [pc, #356]	; (8004df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d101      	bne.n	8004c96 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004c92:	4b59      	ldr	r3, [pc, #356]	; (8004df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c94:	e001      	b.n	8004c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004c96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4954      	ldr	r1, [pc, #336]	; (8004df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ca2:	428b      	cmp	r3, r1
 8004ca4:	d101      	bne.n	8004caa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004ca6:	4b54      	ldr	r3, [pc, #336]	; (8004df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ca8:	e001      	b.n	8004cae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004caa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cb2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60bb      	str	r3, [r7, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	60bb      	str	r3, [r7, #8]
 8004cc0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	f043 0204 	orr.w	r2, r3, #4
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7ff fe4a 	bl	8004970 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004cdc:	e084      	b.n	8004de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d107      	bne.n	8004cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f8be 	bl	8004e74 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d107      	bne.n	8004d12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f8fd 	bl	8004f0c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d18:	2b40      	cmp	r3, #64	; 0x40
 8004d1a:	d12f      	bne.n	8004d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d02a      	beq.n	8004d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d34:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a2e      	ldr	r2, [pc, #184]	; (8004df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d101      	bne.n	8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004d40:	4b2d      	ldr	r3, [pc, #180]	; (8004df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d42:	e001      	b.n	8004d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004d44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4929      	ldr	r1, [pc, #164]	; (8004df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d50:	428b      	cmp	r3, r1
 8004d52:	d101      	bne.n	8004d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004d54:	4b28      	ldr	r3, [pc, #160]	; (8004df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d56:	e001      	b.n	8004d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004d58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d60:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6e:	f043 0202 	orr.w	r2, r3, #2
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff fdfa 	bl	8004970 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d131      	bne.n	8004dea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f003 0320 	and.w	r3, r3, #32
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d02c      	beq.n	8004dea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a17      	ldr	r2, [pc, #92]	; (8004df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d101      	bne.n	8004d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004d9a:	4b17      	ldr	r3, [pc, #92]	; (8004df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d9c:	e001      	b.n	8004da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004d9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4912      	ldr	r1, [pc, #72]	; (8004df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004daa:	428b      	cmp	r3, r1
 8004dac:	d101      	bne.n	8004db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004dae:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004db0:	e001      	b.n	8004db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004db2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004db6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dca:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd8:	f043 0204 	orr.w	r2, r3, #4
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff fdc5 	bl	8004970 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004de6:	e000      	b.n	8004dea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004de8:	bf00      	nop
}
 8004dea:	bf00      	nop
 8004dec:	3720      	adds	r7, #32
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40003800 	.word	0x40003800
 8004df8:	40003400 	.word	0x40003400

08004dfc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	1c99      	adds	r1, r3, #2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6251      	str	r1, [r2, #36]	; 0x24
 8004e22:	881a      	ldrh	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d113      	bne.n	8004e6a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e50:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d106      	bne.n	8004e6a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff ffc9 	bl	8004dfc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	1c99      	adds	r1, r3, #2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6251      	str	r1, [r2, #36]	; 0x24
 8004e86:	8819      	ldrh	r1, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a1d      	ldr	r2, [pc, #116]	; (8004f04 <I2SEx_TxISR_I2SExt+0x90>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d101      	bne.n	8004e96 <I2SEx_TxISR_I2SExt+0x22>
 8004e92:	4b1d      	ldr	r3, [pc, #116]	; (8004f08 <I2SEx_TxISR_I2SExt+0x94>)
 8004e94:	e001      	b.n	8004e9a <I2SEx_TxISR_I2SExt+0x26>
 8004e96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e9a:	460a      	mov	r2, r1
 8004e9c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d121      	bne.n	8004efa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a12      	ldr	r2, [pc, #72]	; (8004f04 <I2SEx_TxISR_I2SExt+0x90>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d101      	bne.n	8004ec4 <I2SEx_TxISR_I2SExt+0x50>
 8004ec0:	4b11      	ldr	r3, [pc, #68]	; (8004f08 <I2SEx_TxISR_I2SExt+0x94>)
 8004ec2:	e001      	b.n	8004ec8 <I2SEx_TxISR_I2SExt+0x54>
 8004ec4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	490d      	ldr	r1, [pc, #52]	; (8004f04 <I2SEx_TxISR_I2SExt+0x90>)
 8004ed0:	428b      	cmp	r3, r1
 8004ed2:	d101      	bne.n	8004ed8 <I2SEx_TxISR_I2SExt+0x64>
 8004ed4:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <I2SEx_TxISR_I2SExt+0x94>)
 8004ed6:	e001      	b.n	8004edc <I2SEx_TxISR_I2SExt+0x68>
 8004ed8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004edc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ee0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff ff81 	bl	8004dfc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40003800 	.word	0x40003800
 8004f08:	40003400 	.word	0x40003400

08004f0c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68d8      	ldr	r0, [r3, #12]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	1c99      	adds	r1, r3, #2
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004f24:	b282      	uxth	r2, r0
 8004f26:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d113      	bne.n	8004f68 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f4e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d106      	bne.n	8004f68 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff ff4a 	bl	8004dfc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f68:	bf00      	nop
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a20      	ldr	r2, [pc, #128]	; (8005000 <I2SEx_RxISR_I2SExt+0x90>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d101      	bne.n	8004f86 <I2SEx_RxISR_I2SExt+0x16>
 8004f82:	4b20      	ldr	r3, [pc, #128]	; (8005004 <I2SEx_RxISR_I2SExt+0x94>)
 8004f84:	e001      	b.n	8004f8a <I2SEx_RxISR_I2SExt+0x1a>
 8004f86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f8a:	68d8      	ldr	r0, [r3, #12]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	1c99      	adds	r1, r3, #2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004f96:	b282      	uxth	r2, r0
 8004f98:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d121      	bne.n	8004ff6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a12      	ldr	r2, [pc, #72]	; (8005000 <I2SEx_RxISR_I2SExt+0x90>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d101      	bne.n	8004fc0 <I2SEx_RxISR_I2SExt+0x50>
 8004fbc:	4b11      	ldr	r3, [pc, #68]	; (8005004 <I2SEx_RxISR_I2SExt+0x94>)
 8004fbe:	e001      	b.n	8004fc4 <I2SEx_RxISR_I2SExt+0x54>
 8004fc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	490d      	ldr	r1, [pc, #52]	; (8005000 <I2SEx_RxISR_I2SExt+0x90>)
 8004fcc:	428b      	cmp	r3, r1
 8004fce:	d101      	bne.n	8004fd4 <I2SEx_RxISR_I2SExt+0x64>
 8004fd0:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <I2SEx_RxISR_I2SExt+0x94>)
 8004fd2:	e001      	b.n	8004fd8 <I2SEx_RxISR_I2SExt+0x68>
 8004fd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fdc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d106      	bne.n	8004ff6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff ff03 	bl	8004dfc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ff6:	bf00      	nop
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40003800 	.word	0x40003800
 8005004:	40003400 	.word	0x40003400

08005008 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800500a:	b08f      	sub	sp, #60	; 0x3c
 800500c:	af0a      	add	r7, sp, #40	; 0x28
 800500e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e10f      	b.n	800523a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f006 f83d 	bl	800b0b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2203      	movs	r2, #3
 800503e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504a:	2b00      	cmp	r3, #0
 800504c:	d102      	bne.n	8005054 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f002 ff1a 	bl	8007e92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	687e      	ldr	r6, [r7, #4]
 8005066:	466d      	mov	r5, sp
 8005068:	f106 0410 	add.w	r4, r6, #16
 800506c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800506e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005074:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005078:	e885 0003 	stmia.w	r5, {r0, r1}
 800507c:	1d33      	adds	r3, r6, #4
 800507e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005080:	6838      	ldr	r0, [r7, #0]
 8005082:	f002 fdf1 	bl	8007c68 <USB_CoreInit>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0d0      	b.n	800523a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2100      	movs	r1, #0
 800509e:	4618      	mov	r0, r3
 80050a0:	f002 ff08 	bl	8007eb4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050a4:	2300      	movs	r3, #0
 80050a6:	73fb      	strb	r3, [r7, #15]
 80050a8:	e04a      	b.n	8005140 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050aa:	7bfa      	ldrb	r2, [r7, #15]
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	333d      	adds	r3, #61	; 0x3d
 80050ba:	2201      	movs	r2, #1
 80050bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050be:	7bfa      	ldrb	r2, [r7, #15]
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	1a9b      	subs	r3, r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	333c      	adds	r3, #60	; 0x3c
 80050ce:	7bfa      	ldrb	r2, [r7, #15]
 80050d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050d2:	7bfa      	ldrb	r2, [r7, #15]
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	b298      	uxth	r0, r3
 80050d8:	6879      	ldr	r1, [r7, #4]
 80050da:	4613      	mov	r3, r2
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	1a9b      	subs	r3, r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	3342      	adds	r3, #66	; 0x42
 80050e6:	4602      	mov	r2, r0
 80050e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050ea:	7bfa      	ldrb	r2, [r7, #15]
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	1a9b      	subs	r3, r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	333f      	adds	r3, #63	; 0x3f
 80050fa:	2200      	movs	r2, #0
 80050fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050fe:	7bfa      	ldrb	r2, [r7, #15]
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	1a9b      	subs	r3, r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	3344      	adds	r3, #68	; 0x44
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005112:	7bfa      	ldrb	r2, [r7, #15]
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	4613      	mov	r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	1a9b      	subs	r3, r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	3348      	adds	r3, #72	; 0x48
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005126:	7bfa      	ldrb	r2, [r7, #15]
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	4613      	mov	r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	1a9b      	subs	r3, r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
 8005134:	3350      	adds	r3, #80	; 0x50
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	3301      	adds	r3, #1
 800513e:	73fb      	strb	r3, [r7, #15]
 8005140:	7bfa      	ldrb	r2, [r7, #15]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	429a      	cmp	r2, r3
 8005148:	d3af      	bcc.n	80050aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800514a:	2300      	movs	r3, #0
 800514c:	73fb      	strb	r3, [r7, #15]
 800514e:	e044      	b.n	80051da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005150:	7bfa      	ldrb	r2, [r7, #15]
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	4613      	mov	r3, r2
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	1a9b      	subs	r3, r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	440b      	add	r3, r1
 800515e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005162:	2200      	movs	r2, #0
 8005164:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005166:	7bfa      	ldrb	r2, [r7, #15]
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	1a9b      	subs	r3, r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005178:	7bfa      	ldrb	r2, [r7, #15]
 800517a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800517c:	7bfa      	ldrb	r2, [r7, #15]
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	4613      	mov	r3, r2
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	1a9b      	subs	r3, r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800518e:	2200      	movs	r2, #0
 8005190:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005192:	7bfa      	ldrb	r2, [r7, #15]
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	1a9b      	subs	r3, r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	440b      	add	r3, r1
 80051a0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80051a8:	7bfa      	ldrb	r2, [r7, #15]
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	1a9b      	subs	r3, r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051be:	7bfa      	ldrb	r2, [r7, #15]
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	4613      	mov	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	1a9b      	subs	r3, r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	440b      	add	r3, r1
 80051cc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	3301      	adds	r3, #1
 80051d8:	73fb      	strb	r3, [r7, #15]
 80051da:	7bfa      	ldrb	r2, [r7, #15]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d3b5      	bcc.n	8005150 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	603b      	str	r3, [r7, #0]
 80051ea:	687e      	ldr	r6, [r7, #4]
 80051ec:	466d      	mov	r5, sp
 80051ee:	f106 0410 	add.w	r4, r6, #16
 80051f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8005202:	1d33      	adds	r3, r6, #4
 8005204:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005206:	6838      	ldr	r0, [r7, #0]
 8005208:	f002 fea0 	bl	8007f4c <USB_DevInit>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2202      	movs	r2, #2
 8005216:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e00d      	b.n	800523a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f003 ff1c 	bl	8009070 <USB_DevDisconnect>

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005242 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005256:	2b01      	cmp	r3, #1
 8005258:	d101      	bne.n	800525e <HAL_PCD_Start+0x1c>
 800525a:	2302      	movs	r3, #2
 800525c:	e020      	b.n	80052a0 <HAL_PCD_Start+0x5e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526a:	2b01      	cmp	r3, #1
 800526c:	d109      	bne.n	8005282 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005272:	2b01      	cmp	r3, #1
 8005274:	d005      	beq.n	8005282 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f002 fdf2 	bl	8007e70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4618      	mov	r0, r3
 8005292:	f003 fecc 	bl	800902e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80052a8:	b590      	push	{r4, r7, lr}
 80052aa:	b08d      	sub	sp, #52	; 0x34
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f003 ff8a 	bl	80091d8 <USB_GetMode>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f040 839d 	bne.w	8005a06 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f003 feee 	bl	80090b2 <USB_ReadInterrupts>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8393 	beq.w	8005a04 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f003 fee5 	bl	80090b2 <USB_ReadInterrupts>
 80052e8:	4603      	mov	r3, r0
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d107      	bne.n	8005302 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695a      	ldr	r2, [r3, #20]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f002 0202 	and.w	r2, r2, #2
 8005300:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f003 fed3 	bl	80090b2 <USB_ReadInterrupts>
 800530c:	4603      	mov	r3, r0
 800530e:	f003 0310 	and.w	r3, r3, #16
 8005312:	2b10      	cmp	r3, #16
 8005314:	d161      	bne.n	80053da <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699a      	ldr	r2, [r3, #24]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 0210 	bic.w	r2, r2, #16
 8005324:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	f003 020f 	and.w	r2, r3, #15
 8005332:	4613      	mov	r3, r2
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	1a9b      	subs	r3, r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	4413      	add	r3, r2
 8005342:	3304      	adds	r3, #4
 8005344:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	0c5b      	lsrs	r3, r3, #17
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	2b02      	cmp	r3, #2
 8005350:	d124      	bne.n	800539c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005358:	4013      	ands	r3, r2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d035      	beq.n	80053ca <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	091b      	lsrs	r3, r3, #4
 8005366:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005368:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800536c:	b29b      	uxth	r3, r3
 800536e:	461a      	mov	r2, r3
 8005370:	6a38      	ldr	r0, [r7, #32]
 8005372:	f003 fd0a 	bl	8008d8a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	091b      	lsrs	r3, r3, #4
 800537e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005382:	441a      	add	r2, r3
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	699a      	ldr	r2, [r3, #24]
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	091b      	lsrs	r3, r3, #4
 8005390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005394:	441a      	add	r2, r3
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	619a      	str	r2, [r3, #24]
 800539a:	e016      	b.n	80053ca <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	0c5b      	lsrs	r3, r3, #17
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	2b06      	cmp	r3, #6
 80053a6:	d110      	bne.n	80053ca <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80053ae:	2208      	movs	r2, #8
 80053b0:	4619      	mov	r1, r3
 80053b2:	6a38      	ldr	r0, [r7, #32]
 80053b4:	f003 fce9 	bl	8008d8a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	699a      	ldr	r2, [r3, #24]
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	091b      	lsrs	r3, r3, #4
 80053c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053c4:	441a      	add	r2, r3
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699a      	ldr	r2, [r3, #24]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0210 	orr.w	r2, r2, #16
 80053d8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f003 fe67 	bl	80090b2 <USB_ReadInterrupts>
 80053e4:	4603      	mov	r3, r0
 80053e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053ee:	d16e      	bne.n	80054ce <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f003 fe6d 	bl	80090d8 <USB_ReadDevAllOutEpInterrupt>
 80053fe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005400:	e062      	b.n	80054c8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d057      	beq.n	80054bc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	4611      	mov	r1, r2
 8005416:	4618      	mov	r0, r3
 8005418:	f003 fe92 	bl	8009140 <USB_ReadDevOutEPInterrupt>
 800541c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00c      	beq.n	8005442 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005434:	461a      	mov	r2, r3
 8005436:	2301      	movs	r3, #1
 8005438:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800543a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fdb1 	bl	8005fa4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f003 0308 	and.w	r3, r3, #8
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00c      	beq.n	8005466 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005458:	461a      	mov	r2, r3
 800545a:	2308      	movs	r3, #8
 800545c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800545e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 feab 	bl	80061bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b00      	cmp	r3, #0
 800546e:	d008      	beq.n	8005482 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547c:	461a      	mov	r2, r3
 800547e:	2310      	movs	r3, #16
 8005480:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f003 0320 	and.w	r3, r3, #32
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005498:	461a      	mov	r2, r3
 800549a:	2320      	movs	r3, #32
 800549c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d009      	beq.n	80054bc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b4:	461a      	mov	r2, r3
 80054b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054ba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	3301      	adds	r3, #1
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c4:	085b      	lsrs	r3, r3, #1
 80054c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d199      	bne.n	8005402 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f003 fded 	bl	80090b2 <USB_ReadInterrupts>
 80054d8:	4603      	mov	r3, r0
 80054da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054e2:	f040 80c0 	bne.w	8005666 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f003 fe0e 	bl	800910c <USB_ReadDevAllInEpInterrupt>
 80054f0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80054f6:	e0b2      	b.n	800565e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 80a7 	beq.w	8005652 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	4611      	mov	r1, r2
 800550e:	4618      	mov	r0, r3
 8005510:	f003 fe34 	bl	800917c <USB_ReadDevInEPInterrupt>
 8005514:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d057      	beq.n	80055d0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	2201      	movs	r2, #1
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	43db      	mvns	r3, r3
 800553a:	69f9      	ldr	r1, [r7, #28]
 800553c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005540:	4013      	ands	r3, r2
 8005542:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005550:	461a      	mov	r2, r3
 8005552:	2301      	movs	r3, #1
 8005554:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d132      	bne.n	80055c4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005562:	4613      	mov	r3, r2
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	440b      	add	r3, r1
 800556c:	3348      	adds	r3, #72	; 0x48
 800556e:	6819      	ldr	r1, [r3, #0]
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005574:	4613      	mov	r3, r2
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	1a9b      	subs	r3, r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4403      	add	r3, r0
 800557e:	3344      	adds	r3, #68	; 0x44
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4419      	add	r1, r3
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005588:	4613      	mov	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4403      	add	r3, r0
 8005592:	3348      	adds	r3, #72	; 0x48
 8005594:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	2b00      	cmp	r3, #0
 800559a:	d113      	bne.n	80055c4 <HAL_PCD_IRQHandler+0x31c>
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a0:	4613      	mov	r3, r2
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	1a9b      	subs	r3, r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	440b      	add	r3, r1
 80055aa:	3350      	adds	r3, #80	; 0x50
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d108      	bne.n	80055c4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80055bc:	461a      	mov	r2, r3
 80055be:	2101      	movs	r1, #1
 80055c0:	f003 fe3c 	bl	800923c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	4619      	mov	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f005 fe01 	bl	800b1d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d008      	beq.n	80055ec <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e6:	461a      	mov	r2, r3
 80055e8:	2308      	movs	r3, #8
 80055ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d008      	beq.n	8005608 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005602:	461a      	mov	r2, r3
 8005604:	2310      	movs	r3, #16
 8005606:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	d008      	beq.n	8005624 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561e:	461a      	mov	r2, r3
 8005620:	2340      	movs	r3, #64	; 0x40
 8005622:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d008      	beq.n	8005640 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563a:	461a      	mov	r2, r3
 800563c:	2302      	movs	r3, #2
 800563e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800564a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fc1b 	bl	8005e88 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	3301      	adds	r3, #1
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	085b      	lsrs	r3, r3, #1
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	2b00      	cmp	r3, #0
 8005662:	f47f af49 	bne.w	80054f8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f003 fd21 	bl	80090b2 <USB_ReadInterrupts>
 8005670:	4603      	mov	r3, r0
 8005672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800567a:	d122      	bne.n	80056c2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	69fa      	ldr	r2, [r7, #28]
 8005686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800568a:	f023 0301 	bic.w	r3, r3, #1
 800568e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005696:	2b01      	cmp	r3, #1
 8005698:	d108      	bne.n	80056ac <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80056a2:	2100      	movs	r1, #0
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fe27 	bl	80062f8 <HAL_PCDEx_LPM_Callback>
 80056aa:	e002      	b.n	80056b2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f005 fe07 	bl	800b2c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	695a      	ldr	r2, [r3, #20]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80056c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f003 fcf3 	bl	80090b2 <USB_ReadInterrupts>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056d6:	d112      	bne.n	80056fe <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d102      	bne.n	80056ee <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f005 fdc3 	bl	800b274 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695a      	ldr	r2, [r3, #20]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80056fc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f003 fcd5 	bl	80090b2 <USB_ReadInterrupts>
 8005708:	4603      	mov	r3, r0
 800570a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800570e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005712:	f040 80c7 	bne.w	80058a4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005724:	f023 0301 	bic.w	r3, r3, #1
 8005728:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2110      	movs	r1, #16
 8005730:	4618      	mov	r0, r3
 8005732:	f002 fd6f 	bl	8008214 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005736:	2300      	movs	r3, #0
 8005738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800573a:	e056      	b.n	80057ea <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800573c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005748:	461a      	mov	r2, r3
 800574a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800574e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005760:	0151      	lsls	r1, r2, #5
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	440a      	add	r2, r1
 8005766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800576a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800576e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005780:	0151      	lsls	r1, r2, #5
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	440a      	add	r2, r1
 8005786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800578a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800578e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579c:	461a      	mov	r2, r3
 800579e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b4:	0151      	lsls	r1, r2, #5
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	440a      	add	r2, r1
 80057ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80057c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057d4:	0151      	lsls	r1, r2, #5
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	440a      	add	r2, r1
 80057da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e6:	3301      	adds	r3, #1
 80057e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d3a3      	bcc.n	800573c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	69fa      	ldr	r2, [r7, #28]
 80057fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005802:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005806:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	2b00      	cmp	r3, #0
 800580e:	d016      	beq.n	800583e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005820:	f043 030b 	orr.w	r3, r3, #11
 8005824:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005830:	69fa      	ldr	r2, [r7, #28]
 8005832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005836:	f043 030b 	orr.w	r3, r3, #11
 800583a:	6453      	str	r3, [r2, #68]	; 0x44
 800583c:	e015      	b.n	800586a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800584c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005850:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005854:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005864:	f043 030b 	orr.w	r3, r3, #11
 8005868:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005878:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800587c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800588e:	461a      	mov	r2, r3
 8005890:	f003 fcd4 	bl	800923c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695a      	ldr	r2, [r3, #20]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80058a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f003 fc02 	bl	80090b2 <USB_ReadInterrupts>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b8:	d124      	bne.n	8005904 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4618      	mov	r0, r3
 80058c0:	f003 fc98 	bl	80091f4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f002 fd00 	bl	80082ce <USB_GetDevSpeed>
 80058ce:	4603      	mov	r3, r0
 80058d0:	461a      	mov	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681c      	ldr	r4, [r3, #0]
 80058da:	f001 f959 	bl	8006b90 <HAL_RCC_GetHCLKFreq>
 80058de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	4620      	mov	r0, r4
 80058ea:	f002 fa1f 	bl	8007d2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f005 fc97 	bl	800b222 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005902:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f003 fbd2 	bl	80090b2 <USB_ReadInterrupts>
 800590e:	4603      	mov	r3, r0
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b08      	cmp	r3, #8
 8005916:	d10a      	bne.n	800592e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f005 fc74 	bl	800b206 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695a      	ldr	r2, [r3, #20]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f002 0208 	and.w	r2, r2, #8
 800592c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4618      	mov	r0, r3
 8005934:	f003 fbbd 	bl	80090b2 <USB_ReadInterrupts>
 8005938:	4603      	mov	r3, r0
 800593a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800593e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005942:	d10f      	bne.n	8005964 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	b2db      	uxtb	r3, r3
 800594c:	4619      	mov	r1, r3
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f005 fcd6 	bl	800b300 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695a      	ldr	r2, [r3, #20]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005962:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4618      	mov	r0, r3
 800596a:	f003 fba2 	bl	80090b2 <USB_ReadInterrupts>
 800596e:	4603      	mov	r3, r0
 8005970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005974:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005978:	d10f      	bne.n	800599a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	b2db      	uxtb	r3, r3
 8005982:	4619      	mov	r1, r3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f005 fca9 	bl	800b2dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695a      	ldr	r2, [r3, #20]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4618      	mov	r0, r3
 80059a0:	f003 fb87 	bl	80090b2 <USB_ReadInterrupts>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ae:	d10a      	bne.n	80059c6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f005 fcb7 	bl	800b324 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695a      	ldr	r2, [r3, #20]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80059c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f003 fb71 	bl	80090b2 <USB_ReadInterrupts>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d115      	bne.n	8005a06 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f005 fca7 	bl	800b340 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6859      	ldr	r1, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
 8005a02:	e000      	b.n	8005a06 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005a04:	bf00      	nop
    }
  }
}
 8005a06:	3734      	adds	r7, #52	; 0x34
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd90      	pop	{r4, r7, pc}

08005a0c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_PCD_SetAddress+0x1a>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e013      	b.n	8005a4e <HAL_PCD_SetAddress+0x42>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	78fa      	ldrb	r2, [r7, #3]
 8005a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	78fa      	ldrb	r2, [r7, #3]
 8005a3c:	4611      	mov	r1, r2
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f003 facf 	bl	8008fe2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	4608      	mov	r0, r1
 8005a60:	4611      	mov	r1, r2
 8005a62:	461a      	mov	r2, r3
 8005a64:	4603      	mov	r3, r0
 8005a66:	70fb      	strb	r3, [r7, #3]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	803b      	strh	r3, [r7, #0]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	da0f      	bge.n	8005a9c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	f003 020f 	and.w	r2, r3, #15
 8005a82:	4613      	mov	r3, r2
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	1a9b      	subs	r3, r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	3338      	adds	r3, #56	; 0x38
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	4413      	add	r3, r2
 8005a90:	3304      	adds	r3, #4
 8005a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2201      	movs	r2, #1
 8005a98:	705a      	strb	r2, [r3, #1]
 8005a9a:	e00f      	b.n	8005abc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a9c:	78fb      	ldrb	r3, [r7, #3]
 8005a9e:	f003 020f 	and.w	r2, r3, #15
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	1a9b      	subs	r3, r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005ac8:	883a      	ldrh	r2, [r7, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	78ba      	ldrb	r2, [r7, #2]
 8005ad2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	785b      	ldrb	r3, [r3, #1]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d004      	beq.n	8005ae6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005ae6:	78bb      	ldrb	r3, [r7, #2]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d102      	bne.n	8005af2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d101      	bne.n	8005b00 <HAL_PCD_EP_Open+0xaa>
 8005afc:	2302      	movs	r3, #2
 8005afe:	e00e      	b.n	8005b1e <HAL_PCD_EP_Open+0xc8>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68f9      	ldr	r1, [r7, #12]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f002 fc02 	bl	8008318 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005b1c:	7afb      	ldrb	r3, [r7, #11]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b084      	sub	sp, #16
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	da0f      	bge.n	8005b5a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b3a:	78fb      	ldrb	r3, [r7, #3]
 8005b3c:	f003 020f 	and.w	r2, r3, #15
 8005b40:	4613      	mov	r3, r2
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	1a9b      	subs	r3, r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	3338      	adds	r3, #56	; 0x38
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	3304      	adds	r3, #4
 8005b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2201      	movs	r2, #1
 8005b56:	705a      	strb	r2, [r3, #1]
 8005b58:	e00f      	b.n	8005b7a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b5a:	78fb      	ldrb	r3, [r7, #3]
 8005b5c:	f003 020f 	and.w	r2, r3, #15
 8005b60:	4613      	mov	r3, r2
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	1a9b      	subs	r3, r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	4413      	add	r3, r2
 8005b70:	3304      	adds	r3, #4
 8005b72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005b7a:	78fb      	ldrb	r3, [r7, #3]
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d101      	bne.n	8005b94 <HAL_PCD_EP_Close+0x6e>
 8005b90:	2302      	movs	r3, #2
 8005b92:	e00e      	b.n	8005bb2 <HAL_PCD_EP_Close+0x8c>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68f9      	ldr	r1, [r7, #12]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f002 fc40 	bl	8008428 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b086      	sub	sp, #24
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	603b      	str	r3, [r7, #0]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bca:	7afb      	ldrb	r3, [r7, #11]
 8005bcc:	f003 020f 	and.w	r2, r3, #15
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	3304      	adds	r3, #4
 8005be2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bfc:	7afb      	ldrb	r3, [r7, #11]
 8005bfe:	f003 030f 	and.w	r3, r3, #15
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d102      	bne.n	8005c16 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c16:	7afb      	ldrb	r3, [r7, #11]
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d109      	bne.n	8005c34 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	6979      	ldr	r1, [r7, #20]
 8005c2e:	f002 ff1b 	bl	8008a68 <USB_EP0StartXfer>
 8005c32:	e008      	b.n	8005c46 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6818      	ldr	r0, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	461a      	mov	r2, r3
 8005c40:	6979      	ldr	r1, [r7, #20]
 8005c42:	f002 fccd 	bl	80085e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	f003 020f 	and.w	r2, r3, #15
 8005c62:	6879      	ldr	r1, [r7, #4]
 8005c64:	4613      	mov	r3, r2
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	1a9b      	subs	r3, r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	440b      	add	r3, r1
 8005c6e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005c72:	681b      	ldr	r3, [r3, #0]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	607a      	str	r2, [r7, #4]
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c90:	7afb      	ldrb	r3, [r7, #11]
 8005c92:	f003 020f 	and.w	r2, r3, #15
 8005c96:	4613      	mov	r3, r2
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	1a9b      	subs	r3, r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	3338      	adds	r3, #56	; 0x38
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cc0:	7afb      	ldrb	r3, [r7, #11]
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d102      	bne.n	8005cda <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005cda:	7afb      	ldrb	r3, [r7, #11]
 8005cdc:	f003 030f 	and.w	r3, r3, #15
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d109      	bne.n	8005cf8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6818      	ldr	r0, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	461a      	mov	r2, r3
 8005cf0:	6979      	ldr	r1, [r7, #20]
 8005cf2:	f002 feb9 	bl	8008a68 <USB_EP0StartXfer>
 8005cf6:	e008      	b.n	8005d0a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6818      	ldr	r0, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	461a      	mov	r2, r3
 8005d04:	6979      	ldr	r1, [r7, #20]
 8005d06:	f002 fc6b 	bl	80085e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	f003 020f 	and.w	r2, r3, #15
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d901      	bls.n	8005d32 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e050      	b.n	8005dd4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	da0f      	bge.n	8005d5a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	f003 020f 	and.w	r2, r3, #15
 8005d40:	4613      	mov	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	1a9b      	subs	r3, r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	3338      	adds	r3, #56	; 0x38
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	3304      	adds	r3, #4
 8005d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2201      	movs	r2, #1
 8005d56:	705a      	strb	r2, [r3, #1]
 8005d58:	e00d      	b.n	8005d76 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d5a:	78fa      	ldrb	r2, [r7, #3]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	1a9b      	subs	r3, r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d101      	bne.n	8005d96 <HAL_PCD_EP_SetStall+0x82>
 8005d92:	2302      	movs	r3, #2
 8005d94:	e01e      	b.n	8005dd4 <HAL_PCD_EP_SetStall+0xc0>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68f9      	ldr	r1, [r7, #12]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f003 f848 	bl	8008e3a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005daa:	78fb      	ldrb	r3, [r7, #3]
 8005dac:	f003 030f 	and.w	r3, r3, #15
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10a      	bne.n	8005dca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6818      	ldr	r0, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	b2d9      	uxtb	r1, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f003 fa39 	bl	800923c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	460b      	mov	r3, r1
 8005de6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	f003 020f 	and.w	r2, r3, #15
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d901      	bls.n	8005dfa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e042      	b.n	8005e80 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	da0f      	bge.n	8005e22 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e02:	78fb      	ldrb	r3, [r7, #3]
 8005e04:	f003 020f 	and.w	r2, r3, #15
 8005e08:	4613      	mov	r3, r2
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	1a9b      	subs	r3, r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	3338      	adds	r3, #56	; 0x38
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	4413      	add	r3, r2
 8005e16:	3304      	adds	r3, #4
 8005e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	705a      	strb	r2, [r3, #1]
 8005e20:	e00f      	b.n	8005e42 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e22:	78fb      	ldrb	r3, [r7, #3]
 8005e24:	f003 020f 	and.w	r2, r3, #15
 8005e28:	4613      	mov	r3, r2
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	1a9b      	subs	r3, r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	4413      	add	r3, r2
 8005e38:	3304      	adds	r3, #4
 8005e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	f003 030f 	and.w	r3, r3, #15
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d101      	bne.n	8005e62 <HAL_PCD_EP_ClrStall+0x86>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e00e      	b.n	8005e80 <HAL_PCD_EP_ClrStall+0xa4>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68f9      	ldr	r1, [r7, #12]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f003 f850 	bl	8008f16 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b08a      	sub	sp, #40	; 0x28
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	3338      	adds	r3, #56	; 0x38
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	4413      	add	r3, r2
 8005eac:	3304      	adds	r3, #4
 8005eae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	699a      	ldr	r2, [r3, #24]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d901      	bls.n	8005ec0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e06c      	b.n	8005f9a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	695a      	ldr	r2, [r3, #20]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	69fa      	ldr	r2, [r7, #28]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d902      	bls.n	8005edc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	3303      	adds	r3, #3
 8005ee0:	089b      	lsrs	r3, r3, #2
 8005ee2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ee4:	e02b      	b.n	8005f3e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	695a      	ldr	r2, [r3, #20]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d902      	bls.n	8005f02 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	3303      	adds	r3, #3
 8005f06:	089b      	lsrs	r3, r3, #2
 8005f08:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	68d9      	ldr	r1, [r3, #12]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	4603      	mov	r3, r0
 8005f20:	6978      	ldr	r0, [r7, #20]
 8005f22:	f002 fef4 	bl	8008d0e <USB_WritePacket>

    ep->xfer_buff  += len;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	441a      	add	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	441a      	add	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d809      	bhi.n	8005f68 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	699a      	ldr	r2, [r3, #24]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d203      	bcs.n	8005f68 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1be      	bne.n	8005ee6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	695a      	ldr	r2, [r3, #20]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d811      	bhi.n	8005f98 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f80:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	43db      	mvns	r3, r3
 8005f8e:	6939      	ldr	r1, [r7, #16]
 8005f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f94:	4013      	ands	r3, r2
 8005f96:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3720      	adds	r7, #32
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
	...

08005fa4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	333c      	adds	r3, #60	; 0x3c
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	f040 80a0 	bne.w	800611c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d015      	beq.n	8006012 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4a72      	ldr	r2, [pc, #456]	; (80061b4 <PCD_EP_OutXfrComplete_int+0x210>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	f240 80dd 	bls.w	80061aa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 80d7 	beq.w	80061aa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006008:	461a      	mov	r2, r3
 800600a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600e:	6093      	str	r3, [r2, #8]
 8006010:	e0cb      	b.n	80061aa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f003 0320 	and.w	r3, r3, #32
 8006018:	2b00      	cmp	r3, #0
 800601a:	d009      	beq.n	8006030 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006028:	461a      	mov	r2, r3
 800602a:	2320      	movs	r3, #32
 800602c:	6093      	str	r3, [r2, #8]
 800602e:	e0bc      	b.n	80061aa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006036:	2b00      	cmp	r3, #0
 8006038:	f040 80b7 	bne.w	80061aa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4a5d      	ldr	r2, [pc, #372]	; (80061b4 <PCD_EP_OutXfrComplete_int+0x210>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d90f      	bls.n	8006064 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605a:	461a      	mov	r2, r3
 800605c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006060:	6093      	str	r3, [r2, #8]
 8006062:	e0a2      	b.n	80061aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	4613      	mov	r3, r2
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	1a9b      	subs	r3, r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006076:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	0159      	lsls	r1, r3, #5
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	440b      	add	r3, r1
 8006080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800608a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	4613      	mov	r3, r2
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	1a9b      	subs	r3, r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4403      	add	r3, r0
 800609a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800609e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	4613      	mov	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	1a9b      	subs	r3, r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80060b2:	6819      	ldr	r1, [r3, #0]
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	4613      	mov	r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	1a9b      	subs	r3, r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4403      	add	r3, r0
 80060c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4419      	add	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	4613      	mov	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	1a9b      	subs	r3, r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4403      	add	r3, r0
 80060d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80060dc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d114      	bne.n	800610e <PCD_EP_OutXfrComplete_int+0x16a>
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	4613      	mov	r3, r2
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	1a9b      	subs	r3, r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	440b      	add	r3, r1
 80060f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d108      	bne.n	800610e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006106:	461a      	mov	r2, r3
 8006108:	2101      	movs	r1, #1
 800610a:	f003 f897 	bl	800923c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f005 f841 	bl	800b19c <HAL_PCD_DataOutStageCallback>
 800611a:	e046      	b.n	80061aa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4a26      	ldr	r2, [pc, #152]	; (80061b8 <PCD_EP_OutXfrComplete_int+0x214>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d124      	bne.n	800616e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613a:	461a      	mov	r2, r3
 800613c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006140:	6093      	str	r3, [r2, #8]
 8006142:	e032      	b.n	80061aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f003 0320 	and.w	r3, r3, #32
 800614a:	2b00      	cmp	r3, #0
 800614c:	d008      	beq.n	8006160 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615a:	461a      	mov	r2, r3
 800615c:	2320      	movs	r3, #32
 800615e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	b2db      	uxtb	r3, r3
 8006164:	4619      	mov	r1, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f005 f818 	bl	800b19c <HAL_PCD_DataOutStageCallback>
 800616c:	e01d      	b.n	80061aa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d114      	bne.n	800619e <PCD_EP_OutXfrComplete_int+0x1fa>
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	4613      	mov	r3, r2
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	1a9b      	subs	r3, r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	440b      	add	r3, r1
 8006182:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d108      	bne.n	800619e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6818      	ldr	r0, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006196:	461a      	mov	r2, r3
 8006198:	2100      	movs	r1, #0
 800619a:	f003 f84f 	bl	800923c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f004 fff9 	bl	800b19c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	4f54300a 	.word	0x4f54300a
 80061b8:	4f54310a 	.word	0x4f54310a

080061bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	333c      	adds	r3, #60	; 0x3c
 80061d4:	3304      	adds	r3, #4
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4a15      	ldr	r2, [pc, #84]	; (8006244 <PCD_EP_OutSetupPacket_int+0x88>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d90e      	bls.n	8006210 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d009      	beq.n	8006210 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006208:	461a      	mov	r2, r3
 800620a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800620e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f004 ffb1 	bl	800b178 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4a0a      	ldr	r2, [pc, #40]	; (8006244 <PCD_EP_OutSetupPacket_int+0x88>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d90c      	bls.n	8006238 <PCD_EP_OutSetupPacket_int+0x7c>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d108      	bne.n	8006238 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006230:	461a      	mov	r2, r3
 8006232:	2101      	movs	r1, #1
 8006234:	f003 f802 	bl	800923c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	4f54300a 	.word	0x4f54300a

08006248 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	70fb      	strb	r3, [r7, #3]
 8006254:	4613      	mov	r3, r2
 8006256:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006260:	78fb      	ldrb	r3, [r7, #3]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d107      	bne.n	8006276 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006266:	883b      	ldrh	r3, [r7, #0]
 8006268:	0419      	lsls	r1, r3, #16
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	430a      	orrs	r2, r1
 8006272:	629a      	str	r2, [r3, #40]	; 0x28
 8006274:	e028      	b.n	80062c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627c:	0c1b      	lsrs	r3, r3, #16
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	4413      	add	r3, r2
 8006282:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006284:	2300      	movs	r3, #0
 8006286:	73fb      	strb	r3, [r7, #15]
 8006288:	e00d      	b.n	80062a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	7bfb      	ldrb	r3, [r7, #15]
 8006290:	3340      	adds	r3, #64	; 0x40
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	0c1b      	lsrs	r3, r3, #16
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	4413      	add	r3, r2
 800629e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	3301      	adds	r3, #1
 80062a4:	73fb      	strb	r3, [r7, #15]
 80062a6:	7bfa      	ldrb	r2, [r7, #15]
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d3ec      	bcc.n	800628a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80062b0:	883b      	ldrh	r3, [r7, #0]
 80062b2:	0418      	lsls	r0, r3, #16
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6819      	ldr	r1, [r3, #0]
 80062b8:	78fb      	ldrb	r3, [r7, #3]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	4302      	orrs	r2, r0
 80062c0:	3340      	adds	r3, #64	; 0x40
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	460b      	mov	r3, r1
 80062e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	887a      	ldrh	r2, [r7, #2]
 80062e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e264      	b.n	80067ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d075      	beq.n	800641a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800632e:	4ba3      	ldr	r3, [pc, #652]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 030c 	and.w	r3, r3, #12
 8006336:	2b04      	cmp	r3, #4
 8006338:	d00c      	beq.n	8006354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800633a:	4ba0      	ldr	r3, [pc, #640]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006342:	2b08      	cmp	r3, #8
 8006344:	d112      	bne.n	800636c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006346:	4b9d      	ldr	r3, [pc, #628]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800634e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006352:	d10b      	bne.n	800636c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006354:	4b99      	ldr	r3, [pc, #612]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d05b      	beq.n	8006418 <HAL_RCC_OscConfig+0x108>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d157      	bne.n	8006418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e23f      	b.n	80067ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006374:	d106      	bne.n	8006384 <HAL_RCC_OscConfig+0x74>
 8006376:	4b91      	ldr	r3, [pc, #580]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a90      	ldr	r2, [pc, #576]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 800637c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	e01d      	b.n	80063c0 <HAL_RCC_OscConfig+0xb0>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800638c:	d10c      	bne.n	80063a8 <HAL_RCC_OscConfig+0x98>
 800638e:	4b8b      	ldr	r3, [pc, #556]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a8a      	ldr	r2, [pc, #552]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	4b88      	ldr	r3, [pc, #544]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a87      	ldr	r2, [pc, #540]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80063a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	e00b      	b.n	80063c0 <HAL_RCC_OscConfig+0xb0>
 80063a8:	4b84      	ldr	r3, [pc, #528]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a83      	ldr	r2, [pc, #524]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80063ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	4b81      	ldr	r3, [pc, #516]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a80      	ldr	r2, [pc, #512]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80063ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d013      	beq.n	80063f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c8:	f7fc fe1a 	bl	8003000 <HAL_GetTick>
 80063cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ce:	e008      	b.n	80063e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063d0:	f7fc fe16 	bl	8003000 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b64      	cmp	r3, #100	; 0x64
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e204      	b.n	80067ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063e2:	4b76      	ldr	r3, [pc, #472]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0f0      	beq.n	80063d0 <HAL_RCC_OscConfig+0xc0>
 80063ee:	e014      	b.n	800641a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f0:	f7fc fe06 	bl	8003000 <HAL_GetTick>
 80063f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063f8:	f7fc fe02 	bl	8003000 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b64      	cmp	r3, #100	; 0x64
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e1f0      	b.n	80067ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800640a:	4b6c      	ldr	r3, [pc, #432]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1f0      	bne.n	80063f8 <HAL_RCC_OscConfig+0xe8>
 8006416:	e000      	b.n	800641a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d063      	beq.n	80064ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006426:	4b65      	ldr	r3, [pc, #404]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 030c 	and.w	r3, r3, #12
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00b      	beq.n	800644a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006432:	4b62      	ldr	r3, [pc, #392]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800643a:	2b08      	cmp	r3, #8
 800643c:	d11c      	bne.n	8006478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800643e:	4b5f      	ldr	r3, [pc, #380]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d116      	bne.n	8006478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800644a:	4b5c      	ldr	r3, [pc, #368]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d005      	beq.n	8006462 <HAL_RCC_OscConfig+0x152>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d001      	beq.n	8006462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e1c4      	b.n	80067ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006462:	4b56      	ldr	r3, [pc, #344]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	4952      	ldr	r1, [pc, #328]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006472:	4313      	orrs	r3, r2
 8006474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006476:	e03a      	b.n	80064ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d020      	beq.n	80064c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006480:	4b4f      	ldr	r3, [pc, #316]	; (80065c0 <HAL_RCC_OscConfig+0x2b0>)
 8006482:	2201      	movs	r2, #1
 8006484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006486:	f7fc fdbb 	bl	8003000 <HAL_GetTick>
 800648a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800648c:	e008      	b.n	80064a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800648e:	f7fc fdb7 	bl	8003000 <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	2b02      	cmp	r3, #2
 800649a:	d901      	bls.n	80064a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e1a5      	b.n	80067ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064a0:	4b46      	ldr	r3, [pc, #280]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0f0      	beq.n	800648e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ac:	4b43      	ldr	r3, [pc, #268]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	4940      	ldr	r1, [pc, #256]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	600b      	str	r3, [r1, #0]
 80064c0:	e015      	b.n	80064ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064c2:	4b3f      	ldr	r3, [pc, #252]	; (80065c0 <HAL_RCC_OscConfig+0x2b0>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c8:	f7fc fd9a 	bl	8003000 <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ce:	e008      	b.n	80064e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064d0:	f7fc fd96 	bl	8003000 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e184      	b.n	80067ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064e2:	4b36      	ldr	r3, [pc, #216]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1f0      	bne.n	80064d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0308 	and.w	r3, r3, #8
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d030      	beq.n	800655c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d016      	beq.n	8006530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006502:	4b30      	ldr	r3, [pc, #192]	; (80065c4 <HAL_RCC_OscConfig+0x2b4>)
 8006504:	2201      	movs	r2, #1
 8006506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006508:	f7fc fd7a 	bl	8003000 <HAL_GetTick>
 800650c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800650e:	e008      	b.n	8006522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006510:	f7fc fd76 	bl	8003000 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e164      	b.n	80067ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006522:	4b26      	ldr	r3, [pc, #152]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0f0      	beq.n	8006510 <HAL_RCC_OscConfig+0x200>
 800652e:	e015      	b.n	800655c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006530:	4b24      	ldr	r3, [pc, #144]	; (80065c4 <HAL_RCC_OscConfig+0x2b4>)
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006536:	f7fc fd63 	bl	8003000 <HAL_GetTick>
 800653a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800653c:	e008      	b.n	8006550 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800653e:	f7fc fd5f 	bl	8003000 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	2b02      	cmp	r3, #2
 800654a:	d901      	bls.n	8006550 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e14d      	b.n	80067ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006550:	4b1a      	ldr	r3, [pc, #104]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1f0      	bne.n	800653e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 80a0 	beq.w	80066aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800656a:	2300      	movs	r3, #0
 800656c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800656e:	4b13      	ldr	r3, [pc, #76]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10f      	bne.n	800659a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800657a:	2300      	movs	r3, #0
 800657c:	60bb      	str	r3, [r7, #8]
 800657e:	4b0f      	ldr	r3, [pc, #60]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	4a0e      	ldr	r2, [pc, #56]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006588:	6413      	str	r3, [r2, #64]	; 0x40
 800658a:	4b0c      	ldr	r3, [pc, #48]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006592:	60bb      	str	r3, [r7, #8]
 8006594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006596:	2301      	movs	r3, #1
 8006598:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800659a:	4b0b      	ldr	r3, [pc, #44]	; (80065c8 <HAL_RCC_OscConfig+0x2b8>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d121      	bne.n	80065ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065a6:	4b08      	ldr	r3, [pc, #32]	; (80065c8 <HAL_RCC_OscConfig+0x2b8>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a07      	ldr	r2, [pc, #28]	; (80065c8 <HAL_RCC_OscConfig+0x2b8>)
 80065ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065b2:	f7fc fd25 	bl	8003000 <HAL_GetTick>
 80065b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065b8:	e011      	b.n	80065de <HAL_RCC_OscConfig+0x2ce>
 80065ba:	bf00      	nop
 80065bc:	40023800 	.word	0x40023800
 80065c0:	42470000 	.word	0x42470000
 80065c4:	42470e80 	.word	0x42470e80
 80065c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065cc:	f7fc fd18 	bl	8003000 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e106      	b.n	80067ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065de:	4b85      	ldr	r3, [pc, #532]	; (80067f4 <HAL_RCC_OscConfig+0x4e4>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0f0      	beq.n	80065cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d106      	bne.n	8006600 <HAL_RCC_OscConfig+0x2f0>
 80065f2:	4b81      	ldr	r3, [pc, #516]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 80065f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f6:	4a80      	ldr	r2, [pc, #512]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 80065f8:	f043 0301 	orr.w	r3, r3, #1
 80065fc:	6713      	str	r3, [r2, #112]	; 0x70
 80065fe:	e01c      	b.n	800663a <HAL_RCC_OscConfig+0x32a>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	2b05      	cmp	r3, #5
 8006606:	d10c      	bne.n	8006622 <HAL_RCC_OscConfig+0x312>
 8006608:	4b7b      	ldr	r3, [pc, #492]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 800660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660c:	4a7a      	ldr	r2, [pc, #488]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 800660e:	f043 0304 	orr.w	r3, r3, #4
 8006612:	6713      	str	r3, [r2, #112]	; 0x70
 8006614:	4b78      	ldr	r3, [pc, #480]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 8006616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006618:	4a77      	ldr	r2, [pc, #476]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 800661a:	f043 0301 	orr.w	r3, r3, #1
 800661e:	6713      	str	r3, [r2, #112]	; 0x70
 8006620:	e00b      	b.n	800663a <HAL_RCC_OscConfig+0x32a>
 8006622:	4b75      	ldr	r3, [pc, #468]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 8006624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006626:	4a74      	ldr	r2, [pc, #464]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 8006628:	f023 0301 	bic.w	r3, r3, #1
 800662c:	6713      	str	r3, [r2, #112]	; 0x70
 800662e:	4b72      	ldr	r3, [pc, #456]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 8006630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006632:	4a71      	ldr	r2, [pc, #452]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 8006634:	f023 0304 	bic.w	r3, r3, #4
 8006638:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d015      	beq.n	800666e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006642:	f7fc fcdd 	bl	8003000 <HAL_GetTick>
 8006646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006648:	e00a      	b.n	8006660 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800664a:	f7fc fcd9 	bl	8003000 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	f241 3288 	movw	r2, #5000	; 0x1388
 8006658:	4293      	cmp	r3, r2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e0c5      	b.n	80067ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006660:	4b65      	ldr	r3, [pc, #404]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 8006662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0ee      	beq.n	800664a <HAL_RCC_OscConfig+0x33a>
 800666c:	e014      	b.n	8006698 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800666e:	f7fc fcc7 	bl	8003000 <HAL_GetTick>
 8006672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006674:	e00a      	b.n	800668c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006676:	f7fc fcc3 	bl	8003000 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	f241 3288 	movw	r2, #5000	; 0x1388
 8006684:	4293      	cmp	r3, r2
 8006686:	d901      	bls.n	800668c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e0af      	b.n	80067ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800668c:	4b5a      	ldr	r3, [pc, #360]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 800668e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1ee      	bne.n	8006676 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006698:	7dfb      	ldrb	r3, [r7, #23]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d105      	bne.n	80066aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800669e:	4b56      	ldr	r3, [pc, #344]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	4a55      	ldr	r2, [pc, #340]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 80066a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 809b 	beq.w	80067ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066b4:	4b50      	ldr	r3, [pc, #320]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 030c 	and.w	r3, r3, #12
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d05c      	beq.n	800677a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d141      	bne.n	800674c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066c8:	4b4c      	ldr	r3, [pc, #304]	; (80067fc <HAL_RCC_OscConfig+0x4ec>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ce:	f7fc fc97 	bl	8003000 <HAL_GetTick>
 80066d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066d4:	e008      	b.n	80066e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066d6:	f7fc fc93 	bl	8003000 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e081      	b.n	80067ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066e8:	4b43      	ldr	r3, [pc, #268]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1f0      	bne.n	80066d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	69da      	ldr	r2, [r3, #28]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	019b      	lsls	r3, r3, #6
 8006704:	431a      	orrs	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670a:	085b      	lsrs	r3, r3, #1
 800670c:	3b01      	subs	r3, #1
 800670e:	041b      	lsls	r3, r3, #16
 8006710:	431a      	orrs	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006716:	061b      	lsls	r3, r3, #24
 8006718:	4937      	ldr	r1, [pc, #220]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 800671a:	4313      	orrs	r3, r2
 800671c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800671e:	4b37      	ldr	r3, [pc, #220]	; (80067fc <HAL_RCC_OscConfig+0x4ec>)
 8006720:	2201      	movs	r2, #1
 8006722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006724:	f7fc fc6c 	bl	8003000 <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800672c:	f7fc fc68 	bl	8003000 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e056      	b.n	80067ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800673e:	4b2e      	ldr	r3, [pc, #184]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0f0      	beq.n	800672c <HAL_RCC_OscConfig+0x41c>
 800674a:	e04e      	b.n	80067ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800674c:	4b2b      	ldr	r3, [pc, #172]	; (80067fc <HAL_RCC_OscConfig+0x4ec>)
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006752:	f7fc fc55 	bl	8003000 <HAL_GetTick>
 8006756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006758:	e008      	b.n	800676c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800675a:	f7fc fc51 	bl	8003000 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	2b02      	cmp	r3, #2
 8006766:	d901      	bls.n	800676c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e03f      	b.n	80067ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800676c:	4b22      	ldr	r3, [pc, #136]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1f0      	bne.n	800675a <HAL_RCC_OscConfig+0x44a>
 8006778:	e037      	b.n	80067ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d101      	bne.n	8006786 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e032      	b.n	80067ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006786:	4b1c      	ldr	r3, [pc, #112]	; (80067f8 <HAL_RCC_OscConfig+0x4e8>)
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d028      	beq.n	80067e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800679e:	429a      	cmp	r2, r3
 80067a0:	d121      	bne.n	80067e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d11a      	bne.n	80067e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067b6:	4013      	ands	r3, r2
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067be:	4293      	cmp	r3, r2
 80067c0:	d111      	bne.n	80067e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067cc:	085b      	lsrs	r3, r3, #1
 80067ce:	3b01      	subs	r3, #1
 80067d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d107      	bne.n	80067e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d001      	beq.n	80067ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e000      	b.n	80067ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	40007000 	.word	0x40007000
 80067f8:	40023800 	.word	0x40023800
 80067fc:	42470060 	.word	0x42470060

08006800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e0cc      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006814:	4b68      	ldr	r3, [pc, #416]	; (80069b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d90c      	bls.n	800683c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006822:	4b65      	ldr	r3, [pc, #404]	; (80069b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800682a:	4b63      	ldr	r3, [pc, #396]	; (80069b8 <HAL_RCC_ClockConfig+0x1b8>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0307 	and.w	r3, r3, #7
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	429a      	cmp	r2, r3
 8006836:	d001      	beq.n	800683c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e0b8      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d020      	beq.n	800688a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006854:	4b59      	ldr	r3, [pc, #356]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	4a58      	ldr	r2, [pc, #352]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 800685a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800685e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b00      	cmp	r3, #0
 800686a:	d005      	beq.n	8006878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800686c:	4b53      	ldr	r3, [pc, #332]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	4a52      	ldr	r2, [pc, #328]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006878:	4b50      	ldr	r3, [pc, #320]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	494d      	ldr	r1, [pc, #308]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006886:	4313      	orrs	r3, r2
 8006888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d044      	beq.n	8006920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d107      	bne.n	80068ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800689e:	4b47      	ldr	r3, [pc, #284]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d119      	bne.n	80068de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e07f      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d003      	beq.n	80068be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d107      	bne.n	80068ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068be:	4b3f      	ldr	r3, [pc, #252]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d109      	bne.n	80068de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e06f      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068ce:	4b3b      	ldr	r3, [pc, #236]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e067      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068de:	4b37      	ldr	r3, [pc, #220]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f023 0203 	bic.w	r2, r3, #3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	4934      	ldr	r1, [pc, #208]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068f0:	f7fc fb86 	bl	8003000 <HAL_GetTick>
 80068f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068f6:	e00a      	b.n	800690e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068f8:	f7fc fb82 	bl	8003000 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	f241 3288 	movw	r2, #5000	; 0x1388
 8006906:	4293      	cmp	r3, r2
 8006908:	d901      	bls.n	800690e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e04f      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800690e:	4b2b      	ldr	r3, [pc, #172]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 020c 	and.w	r2, r3, #12
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	429a      	cmp	r2, r3
 800691e:	d1eb      	bne.n	80068f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006920:	4b25      	ldr	r3, [pc, #148]	; (80069b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	429a      	cmp	r2, r3
 800692c:	d20c      	bcs.n	8006948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800692e:	4b22      	ldr	r3, [pc, #136]	; (80069b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006936:	4b20      	ldr	r3, [pc, #128]	; (80069b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0307 	and.w	r3, r3, #7
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d001      	beq.n	8006948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e032      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0304 	and.w	r3, r3, #4
 8006950:	2b00      	cmp	r3, #0
 8006952:	d008      	beq.n	8006966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006954:	4b19      	ldr	r3, [pc, #100]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	4916      	ldr	r1, [pc, #88]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006962:	4313      	orrs	r3, r2
 8006964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	2b00      	cmp	r3, #0
 8006970:	d009      	beq.n	8006986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006972:	4b12      	ldr	r3, [pc, #72]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	490e      	ldr	r1, [pc, #56]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006982:	4313      	orrs	r3, r2
 8006984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006986:	f000 f821 	bl	80069cc <HAL_RCC_GetSysClockFreq>
 800698a:	4602      	mov	r2, r0
 800698c:	4b0b      	ldr	r3, [pc, #44]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	091b      	lsrs	r3, r3, #4
 8006992:	f003 030f 	and.w	r3, r3, #15
 8006996:	490a      	ldr	r1, [pc, #40]	; (80069c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006998:	5ccb      	ldrb	r3, [r1, r3]
 800699a:	fa22 f303 	lsr.w	r3, r2, r3
 800699e:	4a09      	ldr	r2, [pc, #36]	; (80069c4 <HAL_RCC_ClockConfig+0x1c4>)
 80069a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80069a2:	4b09      	ldr	r3, [pc, #36]	; (80069c8 <HAL_RCC_ClockConfig+0x1c8>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fc fae6 	bl	8002f78 <HAL_InitTick>

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	40023c00 	.word	0x40023c00
 80069bc:	40023800 	.word	0x40023800
 80069c0:	0800e5fc 	.word	0x0800e5fc
 80069c4:	20000004 	.word	0x20000004
 80069c8:	20000008 	.word	0x20000008

080069cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80069d0:	b084      	sub	sp, #16
 80069d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	607b      	str	r3, [r7, #4]
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	2300      	movs	r3, #0
 80069de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069e4:	4b67      	ldr	r3, [pc, #412]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f003 030c 	and.w	r3, r3, #12
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d00d      	beq.n	8006a0c <HAL_RCC_GetSysClockFreq+0x40>
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	f200 80bd 	bhi.w	8006b70 <HAL_RCC_GetSysClockFreq+0x1a4>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <HAL_RCC_GetSysClockFreq+0x34>
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d003      	beq.n	8006a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80069fe:	e0b7      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a00:	4b61      	ldr	r3, [pc, #388]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006a02:	60bb      	str	r3, [r7, #8]
       break;
 8006a04:	e0b7      	b.n	8006b76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a06:	4b61      	ldr	r3, [pc, #388]	; (8006b8c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006a08:	60bb      	str	r3, [r7, #8]
      break;
 8006a0a:	e0b4      	b.n	8006b76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a0c:	4b5d      	ldr	r3, [pc, #372]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a16:	4b5b      	ldr	r3, [pc, #364]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d04d      	beq.n	8006abe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a22:	4b58      	ldr	r3, [pc, #352]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	099b      	lsrs	r3, r3, #6
 8006a28:	461a      	mov	r2, r3
 8006a2a:	f04f 0300 	mov.w	r3, #0
 8006a2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006a32:	f04f 0100 	mov.w	r1, #0
 8006a36:	ea02 0800 	and.w	r8, r2, r0
 8006a3a:	ea03 0901 	and.w	r9, r3, r1
 8006a3e:	4640      	mov	r0, r8
 8006a40:	4649      	mov	r1, r9
 8006a42:	f04f 0200 	mov.w	r2, #0
 8006a46:	f04f 0300 	mov.w	r3, #0
 8006a4a:	014b      	lsls	r3, r1, #5
 8006a4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006a50:	0142      	lsls	r2, r0, #5
 8006a52:	4610      	mov	r0, r2
 8006a54:	4619      	mov	r1, r3
 8006a56:	ebb0 0008 	subs.w	r0, r0, r8
 8006a5a:	eb61 0109 	sbc.w	r1, r1, r9
 8006a5e:	f04f 0200 	mov.w	r2, #0
 8006a62:	f04f 0300 	mov.w	r3, #0
 8006a66:	018b      	lsls	r3, r1, #6
 8006a68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006a6c:	0182      	lsls	r2, r0, #6
 8006a6e:	1a12      	subs	r2, r2, r0
 8006a70:	eb63 0301 	sbc.w	r3, r3, r1
 8006a74:	f04f 0000 	mov.w	r0, #0
 8006a78:	f04f 0100 	mov.w	r1, #0
 8006a7c:	00d9      	lsls	r1, r3, #3
 8006a7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a82:	00d0      	lsls	r0, r2, #3
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	eb12 0208 	adds.w	r2, r2, r8
 8006a8c:	eb43 0309 	adc.w	r3, r3, r9
 8006a90:	f04f 0000 	mov.w	r0, #0
 8006a94:	f04f 0100 	mov.w	r1, #0
 8006a98:	0259      	lsls	r1, r3, #9
 8006a9a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006a9e:	0250      	lsls	r0, r2, #9
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f04f 0300 	mov.w	r3, #0
 8006ab0:	f7fa f92a 	bl	8000d08 <__aeabi_uldivmod>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4613      	mov	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	e04a      	b.n	8006b54 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006abe:	4b31      	ldr	r3, [pc, #196]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	099b      	lsrs	r3, r3, #6
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	f04f 0300 	mov.w	r3, #0
 8006aca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ace:	f04f 0100 	mov.w	r1, #0
 8006ad2:	ea02 0400 	and.w	r4, r2, r0
 8006ad6:	ea03 0501 	and.w	r5, r3, r1
 8006ada:	4620      	mov	r0, r4
 8006adc:	4629      	mov	r1, r5
 8006ade:	f04f 0200 	mov.w	r2, #0
 8006ae2:	f04f 0300 	mov.w	r3, #0
 8006ae6:	014b      	lsls	r3, r1, #5
 8006ae8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006aec:	0142      	lsls	r2, r0, #5
 8006aee:	4610      	mov	r0, r2
 8006af0:	4619      	mov	r1, r3
 8006af2:	1b00      	subs	r0, r0, r4
 8006af4:	eb61 0105 	sbc.w	r1, r1, r5
 8006af8:	f04f 0200 	mov.w	r2, #0
 8006afc:	f04f 0300 	mov.w	r3, #0
 8006b00:	018b      	lsls	r3, r1, #6
 8006b02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006b06:	0182      	lsls	r2, r0, #6
 8006b08:	1a12      	subs	r2, r2, r0
 8006b0a:	eb63 0301 	sbc.w	r3, r3, r1
 8006b0e:	f04f 0000 	mov.w	r0, #0
 8006b12:	f04f 0100 	mov.w	r1, #0
 8006b16:	00d9      	lsls	r1, r3, #3
 8006b18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b1c:	00d0      	lsls	r0, r2, #3
 8006b1e:	4602      	mov	r2, r0
 8006b20:	460b      	mov	r3, r1
 8006b22:	1912      	adds	r2, r2, r4
 8006b24:	eb45 0303 	adc.w	r3, r5, r3
 8006b28:	f04f 0000 	mov.w	r0, #0
 8006b2c:	f04f 0100 	mov.w	r1, #0
 8006b30:	0299      	lsls	r1, r3, #10
 8006b32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006b36:	0290      	lsls	r0, r2, #10
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	4619      	mov	r1, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	461a      	mov	r2, r3
 8006b44:	f04f 0300 	mov.w	r3, #0
 8006b48:	f7fa f8de 	bl	8000d08 <__aeabi_uldivmod>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4613      	mov	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b54:	4b0b      	ldr	r3, [pc, #44]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	0c1b      	lsrs	r3, r3, #16
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	3301      	adds	r3, #1
 8006b60:	005b      	lsls	r3, r3, #1
 8006b62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6c:	60bb      	str	r3, [r7, #8]
      break;
 8006b6e:	e002      	b.n	8006b76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b70:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006b72:	60bb      	str	r3, [r7, #8]
      break;
 8006b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b76:	68bb      	ldr	r3, [r7, #8]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006b82:	bf00      	nop
 8006b84:	40023800 	.word	0x40023800
 8006b88:	00f42400 	.word	0x00f42400
 8006b8c:	007a1200 	.word	0x007a1200

08006b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b90:	b480      	push	{r7}
 8006b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b94:	4b03      	ldr	r3, [pc, #12]	; (8006ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b96:	681b      	ldr	r3, [r3, #0]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	20000004 	.word	0x20000004

08006ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006bac:	f7ff fff0 	bl	8006b90 <HAL_RCC_GetHCLKFreq>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	0a9b      	lsrs	r3, r3, #10
 8006bb8:	f003 0307 	and.w	r3, r3, #7
 8006bbc:	4903      	ldr	r1, [pc, #12]	; (8006bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bbe:	5ccb      	ldrb	r3, [r1, r3]
 8006bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	40023800 	.word	0x40023800
 8006bcc:	0800e60c 	.word	0x0800e60c

08006bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006bd4:	f7ff ffdc 	bl	8006b90 <HAL_RCC_GetHCLKFreq>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	4b05      	ldr	r3, [pc, #20]	; (8006bf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	0b5b      	lsrs	r3, r3, #13
 8006be0:	f003 0307 	and.w	r3, r3, #7
 8006be4:	4903      	ldr	r1, [pc, #12]	; (8006bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006be6:	5ccb      	ldrb	r3, [r1, r3]
 8006be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	40023800 	.word	0x40023800
 8006bf4:	0800e60c 	.word	0x0800e60c

08006bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d105      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d035      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c20:	4b62      	ldr	r3, [pc, #392]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c26:	f7fc f9eb 	bl	8003000 <HAL_GetTick>
 8006c2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c2c:	e008      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c2e:	f7fc f9e7 	bl	8003000 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d901      	bls.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e0b0      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c40:	4b5b      	ldr	r3, [pc, #364]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1f0      	bne.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	019a      	lsls	r2, r3, #6
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	071b      	lsls	r3, r3, #28
 8006c58:	4955      	ldr	r1, [pc, #340]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c60:	4b52      	ldr	r3, [pc, #328]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006c62:	2201      	movs	r2, #1
 8006c64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c66:	f7fc f9cb 	bl	8003000 <HAL_GetTick>
 8006c6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c6c:	e008      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c6e:	f7fc f9c7 	bl	8003000 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d901      	bls.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e090      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c80:	4b4b      	ldr	r3, [pc, #300]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d0f0      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 8083 	beq.w	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	4b44      	ldr	r3, [pc, #272]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	4a43      	ldr	r2, [pc, #268]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8006caa:	4b41      	ldr	r3, [pc, #260]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006cb6:	4b3f      	ldr	r3, [pc, #252]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a3e      	ldr	r2, [pc, #248]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006cc2:	f7fc f99d 	bl	8003000 <HAL_GetTick>
 8006cc6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006cc8:	e008      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006cca:	f7fc f999 	bl	8003000 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d901      	bls.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e062      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006cdc:	4b35      	ldr	r3, [pc, #212]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0f0      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ce8:	4b31      	ldr	r3, [pc, #196]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cf0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d02f      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d028      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d06:	4b2a      	ldr	r3, [pc, #168]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d10:	4b29      	ldr	r3, [pc, #164]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006d12:	2201      	movs	r2, #1
 8006d14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d16:	4b28      	ldr	r3, [pc, #160]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006d1c:	4a24      	ldr	r2, [pc, #144]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d22:	4b23      	ldr	r3, [pc, #140]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d114      	bne.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006d2e:	f7fc f967 	bl	8003000 <HAL_GetTick>
 8006d32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d34:	e00a      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d36:	f7fc f963 	bl	8003000 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d901      	bls.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e02a      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d4c:	4b18      	ldr	r3, [pc, #96]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0ee      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d64:	d10d      	bne.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006d66:	4b12      	ldr	r3, [pc, #72]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d7a:	490d      	ldr	r1, [pc, #52]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	608b      	str	r3, [r1, #8]
 8006d80:	e005      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d82:	4b0b      	ldr	r3, [pc, #44]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	4a0a      	ldr	r2, [pc, #40]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d88:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d8c:	6093      	str	r3, [r2, #8]
 8006d8e:	4b08      	ldr	r3, [pc, #32]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d9a:	4905      	ldr	r1, [pc, #20]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	42470068 	.word	0x42470068
 8006db0:	40023800 	.word	0x40023800
 8006db4:	40007000 	.word	0x40007000
 8006db8:	42470e40 	.word	0x42470e40

08006dbc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d13e      	bne.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006dda:	4b23      	ldr	r3, [pc, #140]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d005      	beq.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d12f      	bne.n	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006df0:	4b1e      	ldr	r3, [pc, #120]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006df2:	617b      	str	r3, [r7, #20]
          break;
 8006df4:	e02f      	b.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006df6:	4b1c      	ldr	r3, [pc, #112]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e02:	d108      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e04:	4b18      	ldr	r3, [pc, #96]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e0c:	4a18      	ldr	r2, [pc, #96]	; (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	e007      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e16:	4b14      	ldr	r3, [pc, #80]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e1e:	4a15      	ldr	r2, [pc, #84]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e24:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006e26:	4b10      	ldr	r3, [pc, #64]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e2c:	099b      	lsrs	r3, r3, #6
 8006e2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	fb02 f303 	mul.w	r3, r2, r3
 8006e38:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006e3a:	4b0b      	ldr	r3, [pc, #44]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e40:	0f1b      	lsrs	r3, r3, #28
 8006e42:	f003 0307 	and.w	r3, r3, #7
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e4c:	617b      	str	r3, [r7, #20]
          break;
 8006e4e:	e002      	b.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	617b      	str	r3, [r7, #20]
          break;
 8006e54:	bf00      	nop
        }
      }
      break;
 8006e56:	bf00      	nop
    }
  }
  return frequency;
 8006e58:	697b      	ldr	r3, [r7, #20]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	00bb8000 	.word	0x00bb8000
 8006e70:	007a1200 	.word	0x007a1200
 8006e74:	00f42400 	.word	0x00f42400

08006e78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e07b      	b.n	8006f82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d108      	bne.n	8006ea4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e9a:	d009      	beq.n	8006eb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	61da      	str	r2, [r3, #28]
 8006ea2:	e005      	b.n	8006eb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d106      	bne.n	8006ed0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7fb fe58 	bl	8002b80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ee6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f02:	431a      	orrs	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f20:	431a      	orrs	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	69db      	ldr	r3, [r3, #28]
 8006f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f34:	ea42 0103 	orr.w	r1, r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	0c1b      	lsrs	r3, r3, #16
 8006f4e:	f003 0104 	and.w	r1, r3, #4
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	f003 0210 	and.w	r2, r3, #16
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69da      	ldr	r2, [r3, #28]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b082      	sub	sp, #8
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e047      	b.n	800702c <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d106      	bne.n	8006fb6 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7fb fe2d 	bl	8002c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2224      	movs	r2, #36	; 0x24
 8006fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68da      	ldr	r2, [r3, #12]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fcc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fc82 	bl	80078d8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	691a      	ldr	r2, [r3, #16]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fe2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	695a      	ldr	r2, [r3, #20]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8006ff2:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	695a      	ldr	r2, [r3, #20]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0208 	orr.w	r2, r2, #8
 8007002:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007012:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2220      	movs	r2, #32
 800701e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2220      	movs	r2, #32
 8007026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b0ba      	sub	sp, #232	; 0xe8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800705a:	2300      	movs	r3, #0
 800705c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007060:	2300      	movs	r3, #0
 8007062:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800706a:	f003 030f 	and.w	r3, r3, #15
 800706e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10f      	bne.n	800709a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800707a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	2b00      	cmp	r3, #0
 8007084:	d009      	beq.n	800709a <HAL_UART_IRQHandler+0x66>
 8007086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800708a:	f003 0320 	and.w	r3, r3, #32
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fb65 	bl	8007762 <UART_Receive_IT>
      return;
 8007098:	e256      	b.n	8007548 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800709a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 80de 	beq.w	8007260 <HAL_UART_IRQHandler+0x22c>
 80070a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d106      	bne.n	80070be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 80d1 	beq.w	8007260 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00b      	beq.n	80070e2 <HAL_UART_IRQHandler+0xae>
 80070ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d005      	beq.n	80070e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070da:	f043 0201 	orr.w	r2, r3, #1
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e6:	f003 0304 	and.w	r3, r3, #4
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00b      	beq.n	8007106 <HAL_UART_IRQHandler+0xd2>
 80070ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d005      	beq.n	8007106 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fe:	f043 0202 	orr.w	r2, r3, #2
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00b      	beq.n	800712a <HAL_UART_IRQHandler+0xf6>
 8007112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d005      	beq.n	800712a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007122:	f043 0204 	orr.w	r2, r3, #4
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800712a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d011      	beq.n	800715a <HAL_UART_IRQHandler+0x126>
 8007136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800713a:	f003 0320 	and.w	r3, r3, #32
 800713e:	2b00      	cmp	r3, #0
 8007140:	d105      	bne.n	800714e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d005      	beq.n	800715a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007152:	f043 0208 	orr.w	r2, r3, #8
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 81ed 	beq.w	800753e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b00      	cmp	r3, #0
 800716e:	d008      	beq.n	8007182 <HAL_UART_IRQHandler+0x14e>
 8007170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 faf0 	bl	8007762 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718c:	2b40      	cmp	r3, #64	; 0x40
 800718e:	bf0c      	ite	eq
 8007190:	2301      	moveq	r3, #1
 8007192:	2300      	movne	r3, #0
 8007194:	b2db      	uxtb	r3, r3
 8007196:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	f003 0308 	and.w	r3, r3, #8
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d103      	bne.n	80071ae <HAL_UART_IRQHandler+0x17a>
 80071a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d04f      	beq.n	800724e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f9f8 	bl	80075a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071be:	2b40      	cmp	r3, #64	; 0x40
 80071c0:	d141      	bne.n	8007246 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3314      	adds	r3, #20
 80071c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071d0:	e853 3f00 	ldrex	r3, [r3]
 80071d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80071d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3314      	adds	r3, #20
 80071ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80071ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80071f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80071fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1d9      	bne.n	80071c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007212:	2b00      	cmp	r3, #0
 8007214:	d013      	beq.n	800723e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721a:	4a7d      	ldr	r2, [pc, #500]	; (8007410 <HAL_UART_IRQHandler+0x3dc>)
 800721c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007222:	4618      	mov	r0, r3
 8007224:	f7fc f89d 	bl	8003362 <HAL_DMA_Abort_IT>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d016      	beq.n	800725c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007238:	4610      	mov	r0, r2
 800723a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800723c:	e00e      	b.n	800725c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f99a 	bl	8007578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007244:	e00a      	b.n	800725c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f996 	bl	8007578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800724c:	e006      	b.n	800725c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f992 	bl	8007578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800725a:	e170      	b.n	800753e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800725c:	bf00      	nop
    return;
 800725e:	e16e      	b.n	800753e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007264:	2b01      	cmp	r3, #1
 8007266:	f040 814a 	bne.w	80074fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800726a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800726e:	f003 0310 	and.w	r3, r3, #16
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 8143 	beq.w	80074fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800727c:	f003 0310 	and.w	r3, r3, #16
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 813c 	beq.w	80074fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007286:	2300      	movs	r3, #0
 8007288:	60bb      	str	r3, [r7, #8]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	60bb      	str	r3, [r7, #8]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	60bb      	str	r3, [r7, #8]
 800729a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a6:	2b40      	cmp	r3, #64	; 0x40
 80072a8:	f040 80b4 	bne.w	8007414 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 8140 	beq.w	8007542 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072ca:	429a      	cmp	r2, r3
 80072cc:	f080 8139 	bcs.w	8007542 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072e2:	f000 8088 	beq.w	80073f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	330c      	adds	r3, #12
 80072ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072f4:	e853 3f00 	ldrex	r3, [r3]
 80072f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80072fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007304:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	330c      	adds	r3, #12
 800730e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007312:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800731e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800732a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1d9      	bne.n	80072e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3314      	adds	r3, #20
 8007338:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800733c:	e853 3f00 	ldrex	r3, [r3]
 8007340:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007342:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007344:	f023 0301 	bic.w	r3, r3, #1
 8007348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3314      	adds	r3, #20
 8007352:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007356:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800735a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800735e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e1      	bne.n	8007332 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3314      	adds	r3, #20
 8007374:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800737e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3314      	adds	r3, #20
 800738e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007392:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007394:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007396:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007398:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800739a:	e841 2300 	strex	r3, r2, [r1]
 800739e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1e3      	bne.n	800736e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	330c      	adds	r3, #12
 80073ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073be:	e853 3f00 	ldrex	r3, [r3]
 80073c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073c6:	f023 0310 	bic.w	r3, r3, #16
 80073ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	330c      	adds	r3, #12
 80073d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80073d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80073da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073e0:	e841 2300 	strex	r3, r2, [r1]
 80073e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1e3      	bne.n	80073b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fb ff46 	bl	8003282 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073fe:	b29b      	uxth	r3, r3
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	b29b      	uxth	r3, r3
 8007404:	4619      	mov	r1, r3
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f8c0 	bl	800758c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800740c:	e099      	b.n	8007542 <HAL_UART_IRQHandler+0x50e>
 800740e:	bf00      	nop
 8007410:	0800766b 	.word	0x0800766b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800741c:	b29b      	uxth	r3, r3
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007428:	b29b      	uxth	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 808b 	beq.w	8007546 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 8086 	beq.w	8007546 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	330c      	adds	r3, #12
 8007440:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800744a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007450:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	330c      	adds	r3, #12
 800745a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800745e:	647a      	str	r2, [r7, #68]	; 0x44
 8007460:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007462:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007464:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800746c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e3      	bne.n	800743a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3314      	adds	r3, #20
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	623b      	str	r3, [r7, #32]
   return(result);
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	f023 0301 	bic.w	r3, r3, #1
 8007488:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3314      	adds	r3, #20
 8007492:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007496:	633a      	str	r2, [r7, #48]	; 0x30
 8007498:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800749c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e3      	bne.n	8007472 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	330c      	adds	r3, #12
 80074be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	e853 3f00 	ldrex	r3, [r3]
 80074c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f023 0310 	bic.w	r3, r3, #16
 80074ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	330c      	adds	r3, #12
 80074d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80074dc:	61fa      	str	r2, [r7, #28]
 80074de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e0:	69b9      	ldr	r1, [r7, #24]
 80074e2:	69fa      	ldr	r2, [r7, #28]
 80074e4:	e841 2300 	strex	r3, r2, [r1]
 80074e8:	617b      	str	r3, [r7, #20]
   return(result);
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1e3      	bne.n	80074b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074f4:	4619      	mov	r1, r3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f848 	bl	800758c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074fc:	e023      	b.n	8007546 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80074fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007506:	2b00      	cmp	r3, #0
 8007508:	d009      	beq.n	800751e <HAL_UART_IRQHandler+0x4ea>
 800750a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800750e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f8bb 	bl	8007692 <UART_Transmit_IT>
    return;
 800751c:	e014      	b.n	8007548 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800751e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00e      	beq.n	8007548 <HAL_UART_IRQHandler+0x514>
 800752a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800752e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007532:	2b00      	cmp	r3, #0
 8007534:	d008      	beq.n	8007548 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f8fb 	bl	8007732 <UART_EndTransmit_IT>
    return;
 800753c:	e004      	b.n	8007548 <HAL_UART_IRQHandler+0x514>
    return;
 800753e:	bf00      	nop
 8007540:	e002      	b.n	8007548 <HAL_UART_IRQHandler+0x514>
      return;
 8007542:	bf00      	nop
 8007544:	e000      	b.n	8007548 <HAL_UART_IRQHandler+0x514>
      return;
 8007546:	bf00      	nop
  }
}
 8007548:	37e8      	adds	r7, #232	; 0xe8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop

08007550 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	460b      	mov	r3, r1
 8007596:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b095      	sub	sp, #84	; 0x54
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	330c      	adds	r3, #12
 80075b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b6:	e853 3f00 	ldrex	r3, [r3]
 80075ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	330c      	adds	r3, #12
 80075ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075cc:	643a      	str	r2, [r7, #64]	; 0x40
 80075ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075d4:	e841 2300 	strex	r3, r2, [r1]
 80075d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1e5      	bne.n	80075ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	3314      	adds	r3, #20
 80075e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	e853 3f00 	ldrex	r3, [r3]
 80075ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	f023 0301 	bic.w	r3, r3, #1
 80075f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3314      	adds	r3, #20
 80075fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007600:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007602:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007608:	e841 2300 	strex	r3, r2, [r1]
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1e5      	bne.n	80075e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007618:	2b01      	cmp	r3, #1
 800761a:	d119      	bne.n	8007650 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	330c      	adds	r3, #12
 8007622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	e853 3f00 	ldrex	r3, [r3]
 800762a:	60bb      	str	r3, [r7, #8]
   return(result);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f023 0310 	bic.w	r3, r3, #16
 8007632:	647b      	str	r3, [r7, #68]	; 0x44
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	330c      	adds	r3, #12
 800763a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800763c:	61ba      	str	r2, [r7, #24]
 800763e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6979      	ldr	r1, [r7, #20]
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	613b      	str	r3, [r7, #16]
   return(result);
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e5      	bne.n	800761c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2220      	movs	r2, #32
 8007654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800765e:	bf00      	nop
 8007660:	3754      	adds	r7, #84	; 0x54
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007676:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f7ff ff77 	bl	8007578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800768a:	bf00      	nop
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007692:	b480      	push	{r7}
 8007694:	b085      	sub	sp, #20
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b21      	cmp	r3, #33	; 0x21
 80076a4:	d13e      	bne.n	8007724 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ae:	d114      	bne.n	80076da <UART_Transmit_IT+0x48>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d110      	bne.n	80076da <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	1c9a      	adds	r2, r3, #2
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	621a      	str	r2, [r3, #32]
 80076d8:	e008      	b.n	80076ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	1c59      	adds	r1, r3, #1
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	6211      	str	r1, [r2, #32]
 80076e4:	781a      	ldrb	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	3b01      	subs	r3, #1
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	4619      	mov	r1, r3
 80076fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10f      	bne.n	8007720 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68da      	ldr	r2, [r3, #12]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800770e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68da      	ldr	r2, [r3, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800771e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007720:	2300      	movs	r3, #0
 8007722:	e000      	b.n	8007726 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007724:	2302      	movs	r3, #2
  }
}
 8007726:	4618      	mov	r0, r3
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b082      	sub	sp, #8
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68da      	ldr	r2, [r3, #12]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007748:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2220      	movs	r2, #32
 800774e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7ff fefc 	bl	8007550 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b08c      	sub	sp, #48	; 0x30
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b22      	cmp	r3, #34	; 0x22
 8007774:	f040 80ab 	bne.w	80078ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007780:	d117      	bne.n	80077b2 <UART_Receive_IT+0x50>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d113      	bne.n	80077b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800778a:	2300      	movs	r3, #0
 800778c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007792:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	b29b      	uxth	r3, r3
 800779c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077aa:	1c9a      	adds	r2, r3, #2
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	629a      	str	r2, [r3, #40]	; 0x28
 80077b0:	e026      	b.n	8007800 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80077b8:	2300      	movs	r3, #0
 80077ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c4:	d007      	beq.n	80077d6 <UART_Receive_IT+0x74>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10a      	bne.n	80077e4 <UART_Receive_IT+0x82>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d106      	bne.n	80077e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e0:	701a      	strb	r2, [r3, #0]
 80077e2:	e008      	b.n	80077f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007804:	b29b      	uxth	r3, r3
 8007806:	3b01      	subs	r3, #1
 8007808:	b29b      	uxth	r3, r3
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	4619      	mov	r1, r3
 800780e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007810:	2b00      	cmp	r3, #0
 8007812:	d15a      	bne.n	80078ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68da      	ldr	r2, [r3, #12]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 0220 	bic.w	r2, r2, #32
 8007822:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007832:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	695a      	ldr	r2, [r3, #20]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f022 0201 	bic.w	r2, r2, #1
 8007842:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2220      	movs	r2, #32
 8007848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007850:	2b01      	cmp	r3, #1
 8007852:	d135      	bne.n	80078c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	330c      	adds	r3, #12
 8007860:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	e853 3f00 	ldrex	r3, [r3]
 8007868:	613b      	str	r3, [r7, #16]
   return(result);
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f023 0310 	bic.w	r3, r3, #16
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	330c      	adds	r3, #12
 8007878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800787a:	623a      	str	r2, [r7, #32]
 800787c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787e:	69f9      	ldr	r1, [r7, #28]
 8007880:	6a3a      	ldr	r2, [r7, #32]
 8007882:	e841 2300 	strex	r3, r2, [r1]
 8007886:	61bb      	str	r3, [r7, #24]
   return(result);
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1e5      	bne.n	800785a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0310 	and.w	r3, r3, #16
 8007898:	2b10      	cmp	r3, #16
 800789a:	d10a      	bne.n	80078b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800789c:	2300      	movs	r3, #0
 800789e:	60fb      	str	r3, [r7, #12]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	60fb      	str	r3, [r7, #12]
 80078b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7ff fe67 	bl	800758c <HAL_UARTEx_RxEventCallback>
 80078be:	e002      	b.n	80078c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7ff fe4f 	bl	8007564 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	e002      	b.n	80078d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	e000      	b.n	80078d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80078ce:	2302      	movs	r3, #2
  }
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3730      	adds	r7, #48	; 0x30
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078dc:	b09f      	sub	sp, #124	; 0x7c
 80078de:	af00      	add	r7, sp, #0
 80078e0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80078ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ee:	68d9      	ldr	r1, [r3, #12]
 80078f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	ea40 0301 	orr.w	r3, r0, r1
 80078f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	431a      	orrs	r2, r3
 8007904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	431a      	orrs	r2, r3
 800790a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	4313      	orrs	r3, r2
 8007910:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800791c:	f021 010c 	bic.w	r1, r1, #12
 8007920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007926:	430b      	orrs	r3, r1
 8007928:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800792a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007936:	6999      	ldr	r1, [r3, #24]
 8007938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	ea40 0301 	orr.w	r3, r0, r1
 8007940:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	4bc5      	ldr	r3, [pc, #788]	; (8007c5c <UART_SetConfig+0x384>)
 8007948:	429a      	cmp	r2, r3
 800794a:	d004      	beq.n	8007956 <UART_SetConfig+0x7e>
 800794c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	4bc3      	ldr	r3, [pc, #780]	; (8007c60 <UART_SetConfig+0x388>)
 8007952:	429a      	cmp	r2, r3
 8007954:	d103      	bne.n	800795e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007956:	f7ff f93b 	bl	8006bd0 <HAL_RCC_GetPCLK2Freq>
 800795a:	6778      	str	r0, [r7, #116]	; 0x74
 800795c:	e002      	b.n	8007964 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800795e:	f7ff f923 	bl	8006ba8 <HAL_RCC_GetPCLK1Freq>
 8007962:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007966:	69db      	ldr	r3, [r3, #28]
 8007968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800796c:	f040 80b6 	bne.w	8007adc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007972:	461c      	mov	r4, r3
 8007974:	f04f 0500 	mov.w	r5, #0
 8007978:	4622      	mov	r2, r4
 800797a:	462b      	mov	r3, r5
 800797c:	1891      	adds	r1, r2, r2
 800797e:	6439      	str	r1, [r7, #64]	; 0x40
 8007980:	415b      	adcs	r3, r3
 8007982:	647b      	str	r3, [r7, #68]	; 0x44
 8007984:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007988:	1912      	adds	r2, r2, r4
 800798a:	eb45 0303 	adc.w	r3, r5, r3
 800798e:	f04f 0000 	mov.w	r0, #0
 8007992:	f04f 0100 	mov.w	r1, #0
 8007996:	00d9      	lsls	r1, r3, #3
 8007998:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800799c:	00d0      	lsls	r0, r2, #3
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	1911      	adds	r1, r2, r4
 80079a4:	6639      	str	r1, [r7, #96]	; 0x60
 80079a6:	416b      	adcs	r3, r5
 80079a8:	667b      	str	r3, [r7, #100]	; 0x64
 80079aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	461a      	mov	r2, r3
 80079b0:	f04f 0300 	mov.w	r3, #0
 80079b4:	1891      	adds	r1, r2, r2
 80079b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80079b8:	415b      	adcs	r3, r3
 80079ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80079c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80079c4:	f7f9 f9a0 	bl	8000d08 <__aeabi_uldivmod>
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	4ba5      	ldr	r3, [pc, #660]	; (8007c64 <UART_SetConfig+0x38c>)
 80079ce:	fba3 2302 	umull	r2, r3, r3, r2
 80079d2:	095b      	lsrs	r3, r3, #5
 80079d4:	011e      	lsls	r6, r3, #4
 80079d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079d8:	461c      	mov	r4, r3
 80079da:	f04f 0500 	mov.w	r5, #0
 80079de:	4622      	mov	r2, r4
 80079e0:	462b      	mov	r3, r5
 80079e2:	1891      	adds	r1, r2, r2
 80079e4:	6339      	str	r1, [r7, #48]	; 0x30
 80079e6:	415b      	adcs	r3, r3
 80079e8:	637b      	str	r3, [r7, #52]	; 0x34
 80079ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80079ee:	1912      	adds	r2, r2, r4
 80079f0:	eb45 0303 	adc.w	r3, r5, r3
 80079f4:	f04f 0000 	mov.w	r0, #0
 80079f8:	f04f 0100 	mov.w	r1, #0
 80079fc:	00d9      	lsls	r1, r3, #3
 80079fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a02:	00d0      	lsls	r0, r2, #3
 8007a04:	4602      	mov	r2, r0
 8007a06:	460b      	mov	r3, r1
 8007a08:	1911      	adds	r1, r2, r4
 8007a0a:	65b9      	str	r1, [r7, #88]	; 0x58
 8007a0c:	416b      	adcs	r3, r5
 8007a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	461a      	mov	r2, r3
 8007a16:	f04f 0300 	mov.w	r3, #0
 8007a1a:	1891      	adds	r1, r2, r2
 8007a1c:	62b9      	str	r1, [r7, #40]	; 0x28
 8007a1e:	415b      	adcs	r3, r3
 8007a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a26:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007a2a:	f7f9 f96d 	bl	8000d08 <__aeabi_uldivmod>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	460b      	mov	r3, r1
 8007a32:	4b8c      	ldr	r3, [pc, #560]	; (8007c64 <UART_SetConfig+0x38c>)
 8007a34:	fba3 1302 	umull	r1, r3, r3, r2
 8007a38:	095b      	lsrs	r3, r3, #5
 8007a3a:	2164      	movs	r1, #100	; 0x64
 8007a3c:	fb01 f303 	mul.w	r3, r1, r3
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	3332      	adds	r3, #50	; 0x32
 8007a46:	4a87      	ldr	r2, [pc, #540]	; (8007c64 <UART_SetConfig+0x38c>)
 8007a48:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4c:	095b      	lsrs	r3, r3, #5
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a54:	441e      	add	r6, r3
 8007a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f04f 0100 	mov.w	r1, #0
 8007a5e:	4602      	mov	r2, r0
 8007a60:	460b      	mov	r3, r1
 8007a62:	1894      	adds	r4, r2, r2
 8007a64:	623c      	str	r4, [r7, #32]
 8007a66:	415b      	adcs	r3, r3
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
 8007a6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a6e:	1812      	adds	r2, r2, r0
 8007a70:	eb41 0303 	adc.w	r3, r1, r3
 8007a74:	f04f 0400 	mov.w	r4, #0
 8007a78:	f04f 0500 	mov.w	r5, #0
 8007a7c:	00dd      	lsls	r5, r3, #3
 8007a7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a82:	00d4      	lsls	r4, r2, #3
 8007a84:	4622      	mov	r2, r4
 8007a86:	462b      	mov	r3, r5
 8007a88:	1814      	adds	r4, r2, r0
 8007a8a:	653c      	str	r4, [r7, #80]	; 0x50
 8007a8c:	414b      	adcs	r3, r1
 8007a8e:	657b      	str	r3, [r7, #84]	; 0x54
 8007a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	461a      	mov	r2, r3
 8007a96:	f04f 0300 	mov.w	r3, #0
 8007a9a:	1891      	adds	r1, r2, r2
 8007a9c:	61b9      	str	r1, [r7, #24]
 8007a9e:	415b      	adcs	r3, r3
 8007aa0:	61fb      	str	r3, [r7, #28]
 8007aa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007aa6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007aaa:	f7f9 f92d 	bl	8000d08 <__aeabi_uldivmod>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	4b6c      	ldr	r3, [pc, #432]	; (8007c64 <UART_SetConfig+0x38c>)
 8007ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	2164      	movs	r1, #100	; 0x64
 8007abc:	fb01 f303 	mul.w	r3, r1, r3
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	3332      	adds	r3, #50	; 0x32
 8007ac6:	4a67      	ldr	r2, [pc, #412]	; (8007c64 <UART_SetConfig+0x38c>)
 8007ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8007acc:	095b      	lsrs	r3, r3, #5
 8007ace:	f003 0207 	and.w	r2, r3, #7
 8007ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4432      	add	r2, r6
 8007ad8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ada:	e0b9      	b.n	8007c50 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007adc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ade:	461c      	mov	r4, r3
 8007ae0:	f04f 0500 	mov.w	r5, #0
 8007ae4:	4622      	mov	r2, r4
 8007ae6:	462b      	mov	r3, r5
 8007ae8:	1891      	adds	r1, r2, r2
 8007aea:	6139      	str	r1, [r7, #16]
 8007aec:	415b      	adcs	r3, r3
 8007aee:	617b      	str	r3, [r7, #20]
 8007af0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007af4:	1912      	adds	r2, r2, r4
 8007af6:	eb45 0303 	adc.w	r3, r5, r3
 8007afa:	f04f 0000 	mov.w	r0, #0
 8007afe:	f04f 0100 	mov.w	r1, #0
 8007b02:	00d9      	lsls	r1, r3, #3
 8007b04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b08:	00d0      	lsls	r0, r2, #3
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	eb12 0804 	adds.w	r8, r2, r4
 8007b12:	eb43 0905 	adc.w	r9, r3, r5
 8007b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f04f 0100 	mov.w	r1, #0
 8007b20:	f04f 0200 	mov.w	r2, #0
 8007b24:	f04f 0300 	mov.w	r3, #0
 8007b28:	008b      	lsls	r3, r1, #2
 8007b2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b2e:	0082      	lsls	r2, r0, #2
 8007b30:	4640      	mov	r0, r8
 8007b32:	4649      	mov	r1, r9
 8007b34:	f7f9 f8e8 	bl	8000d08 <__aeabi_uldivmod>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	4b49      	ldr	r3, [pc, #292]	; (8007c64 <UART_SetConfig+0x38c>)
 8007b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8007b42:	095b      	lsrs	r3, r3, #5
 8007b44:	011e      	lsls	r6, r3, #4
 8007b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f04f 0100 	mov.w	r1, #0
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	1894      	adds	r4, r2, r2
 8007b54:	60bc      	str	r4, [r7, #8]
 8007b56:	415b      	adcs	r3, r3
 8007b58:	60fb      	str	r3, [r7, #12]
 8007b5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b5e:	1812      	adds	r2, r2, r0
 8007b60:	eb41 0303 	adc.w	r3, r1, r3
 8007b64:	f04f 0400 	mov.w	r4, #0
 8007b68:	f04f 0500 	mov.w	r5, #0
 8007b6c:	00dd      	lsls	r5, r3, #3
 8007b6e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b72:	00d4      	lsls	r4, r2, #3
 8007b74:	4622      	mov	r2, r4
 8007b76:	462b      	mov	r3, r5
 8007b78:	1814      	adds	r4, r2, r0
 8007b7a:	64bc      	str	r4, [r7, #72]	; 0x48
 8007b7c:	414b      	adcs	r3, r1
 8007b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f04f 0100 	mov.w	r1, #0
 8007b8a:	f04f 0200 	mov.w	r2, #0
 8007b8e:	f04f 0300 	mov.w	r3, #0
 8007b92:	008b      	lsls	r3, r1, #2
 8007b94:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b98:	0082      	lsls	r2, r0, #2
 8007b9a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007b9e:	f7f9 f8b3 	bl	8000d08 <__aeabi_uldivmod>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	4b2f      	ldr	r3, [pc, #188]	; (8007c64 <UART_SetConfig+0x38c>)
 8007ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8007bac:	095b      	lsrs	r3, r3, #5
 8007bae:	2164      	movs	r1, #100	; 0x64
 8007bb0:	fb01 f303 	mul.w	r3, r1, r3
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	011b      	lsls	r3, r3, #4
 8007bb8:	3332      	adds	r3, #50	; 0x32
 8007bba:	4a2a      	ldr	r2, [pc, #168]	; (8007c64 <UART_SetConfig+0x38c>)
 8007bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc0:	095b      	lsrs	r3, r3, #5
 8007bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bc6:	441e      	add	r6, r3
 8007bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f04f 0100 	mov.w	r1, #0
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	1894      	adds	r4, r2, r2
 8007bd6:	603c      	str	r4, [r7, #0]
 8007bd8:	415b      	adcs	r3, r3
 8007bda:	607b      	str	r3, [r7, #4]
 8007bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007be0:	1812      	adds	r2, r2, r0
 8007be2:	eb41 0303 	adc.w	r3, r1, r3
 8007be6:	f04f 0400 	mov.w	r4, #0
 8007bea:	f04f 0500 	mov.w	r5, #0
 8007bee:	00dd      	lsls	r5, r3, #3
 8007bf0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007bf4:	00d4      	lsls	r4, r2, #3
 8007bf6:	4622      	mov	r2, r4
 8007bf8:	462b      	mov	r3, r5
 8007bfa:	eb12 0a00 	adds.w	sl, r2, r0
 8007bfe:	eb43 0b01 	adc.w	fp, r3, r1
 8007c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f04f 0100 	mov.w	r1, #0
 8007c0c:	f04f 0200 	mov.w	r2, #0
 8007c10:	f04f 0300 	mov.w	r3, #0
 8007c14:	008b      	lsls	r3, r1, #2
 8007c16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c1a:	0082      	lsls	r2, r0, #2
 8007c1c:	4650      	mov	r0, sl
 8007c1e:	4659      	mov	r1, fp
 8007c20:	f7f9 f872 	bl	8000d08 <__aeabi_uldivmod>
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	4b0e      	ldr	r3, [pc, #56]	; (8007c64 <UART_SetConfig+0x38c>)
 8007c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8007c2e:	095b      	lsrs	r3, r3, #5
 8007c30:	2164      	movs	r1, #100	; 0x64
 8007c32:	fb01 f303 	mul.w	r3, r1, r3
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	011b      	lsls	r3, r3, #4
 8007c3a:	3332      	adds	r3, #50	; 0x32
 8007c3c:	4a09      	ldr	r2, [pc, #36]	; (8007c64 <UART_SetConfig+0x38c>)
 8007c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c42:	095b      	lsrs	r3, r3, #5
 8007c44:	f003 020f 	and.w	r2, r3, #15
 8007c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4432      	add	r2, r6
 8007c4e:	609a      	str	r2, [r3, #8]
}
 8007c50:	bf00      	nop
 8007c52:	377c      	adds	r7, #124	; 0x7c
 8007c54:	46bd      	mov	sp, r7
 8007c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5a:	bf00      	nop
 8007c5c:	40011000 	.word	0x40011000
 8007c60:	40011400 	.word	0x40011400
 8007c64:	51eb851f 	.word	0x51eb851f

08007c68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c68:	b084      	sub	sp, #16
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	f107 001c 	add.w	r0, r7, #28
 8007c76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d122      	bne.n	8007cc6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d105      	bne.n	8007cba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f001 fb1c 	bl	80092f8 <USB_CoreReset>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	73fb      	strb	r3, [r7, #15]
 8007cc4:	e01a      	b.n	8007cfc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f001 fb10 	bl	80092f8 <USB_CoreReset>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d106      	bne.n	8007cf0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	639a      	str	r2, [r3, #56]	; 0x38
 8007cee:	e005      	b.n	8007cfc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d10b      	bne.n	8007d1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f043 0206 	orr.w	r2, r3, #6
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f043 0220 	orr.w	r2, r3, #32
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d26:	b004      	add	sp, #16
 8007d28:	4770      	bx	lr
	...

08007d2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	4613      	mov	r3, r2
 8007d38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007d3a:	79fb      	ldrb	r3, [r7, #7]
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d165      	bne.n	8007e0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	4a41      	ldr	r2, [pc, #260]	; (8007e48 <USB_SetTurnaroundTime+0x11c>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d906      	bls.n	8007d56 <USB_SetTurnaroundTime+0x2a>
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	4a40      	ldr	r2, [pc, #256]	; (8007e4c <USB_SetTurnaroundTime+0x120>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d202      	bcs.n	8007d56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007d50:	230f      	movs	r3, #15
 8007d52:	617b      	str	r3, [r7, #20]
 8007d54:	e062      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	4a3c      	ldr	r2, [pc, #240]	; (8007e4c <USB_SetTurnaroundTime+0x120>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d306      	bcc.n	8007d6c <USB_SetTurnaroundTime+0x40>
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	4a3b      	ldr	r2, [pc, #236]	; (8007e50 <USB_SetTurnaroundTime+0x124>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d202      	bcs.n	8007d6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007d66:	230e      	movs	r3, #14
 8007d68:	617b      	str	r3, [r7, #20]
 8007d6a:	e057      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	4a38      	ldr	r2, [pc, #224]	; (8007e50 <USB_SetTurnaroundTime+0x124>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d306      	bcc.n	8007d82 <USB_SetTurnaroundTime+0x56>
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	4a37      	ldr	r2, [pc, #220]	; (8007e54 <USB_SetTurnaroundTime+0x128>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d202      	bcs.n	8007d82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007d7c:	230d      	movs	r3, #13
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	e04c      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	4a33      	ldr	r2, [pc, #204]	; (8007e54 <USB_SetTurnaroundTime+0x128>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d306      	bcc.n	8007d98 <USB_SetTurnaroundTime+0x6c>
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	4a32      	ldr	r2, [pc, #200]	; (8007e58 <USB_SetTurnaroundTime+0x12c>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d802      	bhi.n	8007d98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007d92:	230c      	movs	r3, #12
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	e041      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	4a2f      	ldr	r2, [pc, #188]	; (8007e58 <USB_SetTurnaroundTime+0x12c>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d906      	bls.n	8007dae <USB_SetTurnaroundTime+0x82>
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	4a2e      	ldr	r2, [pc, #184]	; (8007e5c <USB_SetTurnaroundTime+0x130>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d802      	bhi.n	8007dae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007da8:	230b      	movs	r3, #11
 8007daa:	617b      	str	r3, [r7, #20]
 8007dac:	e036      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	4a2a      	ldr	r2, [pc, #168]	; (8007e5c <USB_SetTurnaroundTime+0x130>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d906      	bls.n	8007dc4 <USB_SetTurnaroundTime+0x98>
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	4a29      	ldr	r2, [pc, #164]	; (8007e60 <USB_SetTurnaroundTime+0x134>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d802      	bhi.n	8007dc4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007dbe:	230a      	movs	r3, #10
 8007dc0:	617b      	str	r3, [r7, #20]
 8007dc2:	e02b      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	4a26      	ldr	r2, [pc, #152]	; (8007e60 <USB_SetTurnaroundTime+0x134>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d906      	bls.n	8007dda <USB_SetTurnaroundTime+0xae>
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	4a25      	ldr	r2, [pc, #148]	; (8007e64 <USB_SetTurnaroundTime+0x138>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d202      	bcs.n	8007dda <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007dd4:	2309      	movs	r3, #9
 8007dd6:	617b      	str	r3, [r7, #20]
 8007dd8:	e020      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	4a21      	ldr	r2, [pc, #132]	; (8007e64 <USB_SetTurnaroundTime+0x138>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d306      	bcc.n	8007df0 <USB_SetTurnaroundTime+0xc4>
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	4a20      	ldr	r2, [pc, #128]	; (8007e68 <USB_SetTurnaroundTime+0x13c>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d802      	bhi.n	8007df0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007dea:	2308      	movs	r3, #8
 8007dec:	617b      	str	r3, [r7, #20]
 8007dee:	e015      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	4a1d      	ldr	r2, [pc, #116]	; (8007e68 <USB_SetTurnaroundTime+0x13c>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d906      	bls.n	8007e06 <USB_SetTurnaroundTime+0xda>
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	4a1c      	ldr	r2, [pc, #112]	; (8007e6c <USB_SetTurnaroundTime+0x140>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d202      	bcs.n	8007e06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007e00:	2307      	movs	r3, #7
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	e00a      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007e06:	2306      	movs	r3, #6
 8007e08:	617b      	str	r3, [r7, #20]
 8007e0a:	e007      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007e0c:	79fb      	ldrb	r3, [r7, #7]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d102      	bne.n	8007e18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007e12:	2309      	movs	r3, #9
 8007e14:	617b      	str	r3, [r7, #20]
 8007e16:	e001      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007e18:	2309      	movs	r3, #9
 8007e1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	68da      	ldr	r2, [r3, #12]
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	029b      	lsls	r3, r3, #10
 8007e30:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007e34:	431a      	orrs	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	371c      	adds	r7, #28
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	00d8acbf 	.word	0x00d8acbf
 8007e4c:	00e4e1c0 	.word	0x00e4e1c0
 8007e50:	00f42400 	.word	0x00f42400
 8007e54:	01067380 	.word	0x01067380
 8007e58:	011a499f 	.word	0x011a499f
 8007e5c:	01312cff 	.word	0x01312cff
 8007e60:	014ca43f 	.word	0x014ca43f
 8007e64:	016e3600 	.word	0x016e3600
 8007e68:	01a6ab1f 	.word	0x01a6ab1f
 8007e6c:	01e84800 	.word	0x01e84800

08007e70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	f043 0201 	orr.w	r2, r3, #1
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b083      	sub	sp, #12
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f023 0201 	bic.w	r2, r3, #1
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ed0:	78fb      	ldrb	r3, [r7, #3]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d115      	bne.n	8007f02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ee2:	2001      	movs	r0, #1
 8007ee4:	f7fb f898 	bl	8003018 <HAL_Delay>
      ms++;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 f972 	bl	80091d8 <USB_GetMode>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d01e      	beq.n	8007f38 <USB_SetCurrentMode+0x84>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b31      	cmp	r3, #49	; 0x31
 8007efe:	d9f0      	bls.n	8007ee2 <USB_SetCurrentMode+0x2e>
 8007f00:	e01a      	b.n	8007f38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f02:	78fb      	ldrb	r3, [r7, #3]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d115      	bne.n	8007f34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f14:	2001      	movs	r0, #1
 8007f16:	f7fb f87f 	bl	8003018 <HAL_Delay>
      ms++;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f001 f959 	bl	80091d8 <USB_GetMode>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d005      	beq.n	8007f38 <USB_SetCurrentMode+0x84>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2b31      	cmp	r3, #49	; 0x31
 8007f30:	d9f0      	bls.n	8007f14 <USB_SetCurrentMode+0x60>
 8007f32:	e001      	b.n	8007f38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e005      	b.n	8007f44 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2b32      	cmp	r3, #50	; 0x32
 8007f3c:	d101      	bne.n	8007f42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e000      	b.n	8007f44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b086      	sub	sp, #24
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007f5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007f66:	2300      	movs	r3, #0
 8007f68:	613b      	str	r3, [r7, #16]
 8007f6a:	e009      	b.n	8007f80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	3340      	adds	r3, #64	; 0x40
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	2200      	movs	r2, #0
 8007f78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	613b      	str	r3, [r7, #16]
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	2b0e      	cmp	r3, #14
 8007f84:	d9f2      	bls.n	8007f6c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d11c      	bne.n	8007fc6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f9a:	f043 0302 	orr.w	r3, r3, #2
 8007f9e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	639a      	str	r2, [r3, #56]	; 0x38
 8007fc4:	e00b      	b.n	8007fde <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	680b      	ldr	r3, [r1, #0]
 8007ffc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008000:	2b01      	cmp	r3, #1
 8008002:	d10c      	bne.n	800801e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008006:	2b00      	cmp	r3, #0
 8008008:	d104      	bne.n	8008014 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800800a:	2100      	movs	r1, #0
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f945 	bl	800829c <USB_SetDevSpeed>
 8008012:	e008      	b.n	8008026 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008014:	2101      	movs	r1, #1
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f940 	bl	800829c <USB_SetDevSpeed>
 800801c:	e003      	b.n	8008026 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800801e:	2103      	movs	r1, #3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f93b 	bl	800829c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008026:	2110      	movs	r1, #16
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f8f3 	bl	8008214 <USB_FlushTxFifo>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f90f 	bl	800825c <USB_FlushRxFifo>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800804e:	461a      	mov	r2, r3
 8008050:	2300      	movs	r3, #0
 8008052:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800805a:	461a      	mov	r2, r3
 800805c:	2300      	movs	r3, #0
 800805e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008066:	461a      	mov	r2, r3
 8008068:	2300      	movs	r3, #0
 800806a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800806c:	2300      	movs	r3, #0
 800806e:	613b      	str	r3, [r7, #16]
 8008070:	e043      	b.n	80080fa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	4413      	add	r3, r2
 800807a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008084:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008088:	d118      	bne.n	80080bc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10a      	bne.n	80080a6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	4413      	add	r3, r2
 8008098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809c:	461a      	mov	r2, r3
 800809e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	e013      	b.n	80080ce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b2:	461a      	mov	r2, r3
 80080b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	e008      	b.n	80080ce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c8:	461a      	mov	r2, r3
 80080ca:	2300      	movs	r3, #0
 80080cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	015a      	lsls	r2, r3, #5
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080da:	461a      	mov	r2, r3
 80080dc:	2300      	movs	r3, #0
 80080de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ec:	461a      	mov	r2, r3
 80080ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	3301      	adds	r3, #1
 80080f8:	613b      	str	r3, [r7, #16]
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d3b7      	bcc.n	8008072 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008102:	2300      	movs	r3, #0
 8008104:	613b      	str	r3, [r7, #16]
 8008106:	e043      	b.n	8008190 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	4413      	add	r3, r2
 8008110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800811a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800811e:	d118      	bne.n	8008152 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10a      	bne.n	800813c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	4413      	add	r3, r2
 800812e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008132:	461a      	mov	r2, r3
 8008134:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008138:	6013      	str	r3, [r2, #0]
 800813a:	e013      	b.n	8008164 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	015a      	lsls	r2, r3, #5
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	4413      	add	r3, r2
 8008144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008148:	461a      	mov	r2, r3
 800814a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	e008      	b.n	8008164 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4413      	add	r3, r2
 800815a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815e:	461a      	mov	r2, r3
 8008160:	2300      	movs	r3, #0
 8008162:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008170:	461a      	mov	r2, r3
 8008172:	2300      	movs	r3, #0
 8008174:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	015a      	lsls	r2, r3, #5
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	4413      	add	r3, r2
 800817e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008182:	461a      	mov	r2, r3
 8008184:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008188:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	3301      	adds	r3, #1
 800818e:	613b      	str	r3, [r7, #16]
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	429a      	cmp	r2, r3
 8008196:	d3b7      	bcc.n	8008108 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80081b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80081ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d105      	bne.n	80081cc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	f043 0210 	orr.w	r2, r3, #16
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	699a      	ldr	r2, [r3, #24]
 80081d0:	4b0f      	ldr	r3, [pc, #60]	; (8008210 <USB_DevInit+0x2c4>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80081d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d005      	beq.n	80081ea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	f043 0208 	orr.w	r2, r3, #8
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80081ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d107      	bne.n	8008200 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081f8:	f043 0304 	orr.w	r3, r3, #4
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008200:	7dfb      	ldrb	r3, [r7, #23]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3718      	adds	r7, #24
 8008206:	46bd      	mov	sp, r7
 8008208:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800820c:	b004      	add	sp, #16
 800820e:	4770      	bx	lr
 8008210:	803c3800 	.word	0x803c3800

08008214 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	019b      	lsls	r3, r3, #6
 8008226:	f043 0220 	orr.w	r2, r3, #32
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3301      	adds	r3, #1
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	4a08      	ldr	r2, [pc, #32]	; (8008258 <USB_FlushTxFifo+0x44>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d901      	bls.n	800823e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e006      	b.n	800824c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	f003 0320 	and.w	r3, r3, #32
 8008246:	2b20      	cmp	r3, #32
 8008248:	d0f1      	beq.n	800822e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	00030d40 	.word	0x00030d40

0800825c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2210      	movs	r2, #16
 800826c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	3301      	adds	r3, #1
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	4a08      	ldr	r2, [pc, #32]	; (8008298 <USB_FlushRxFifo+0x3c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d901      	bls.n	800827e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e006      	b.n	800828c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	f003 0310 	and.w	r3, r3, #16
 8008286:	2b10      	cmp	r3, #16
 8008288:	d0f1      	beq.n	800826e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3714      	adds	r7, #20
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr
 8008298:	00030d40 	.word	0x00030d40

0800829c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	78fb      	ldrb	r3, [r7, #3]
 80082b6:	68f9      	ldr	r1, [r7, #12]
 80082b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082bc:	4313      	orrs	r3, r2
 80082be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b087      	sub	sp, #28
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f003 0306 	and.w	r3, r3, #6
 80082e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d102      	bne.n	80082f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80082ee:	2300      	movs	r3, #0
 80082f0:	75fb      	strb	r3, [r7, #23]
 80082f2:	e00a      	b.n	800830a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d002      	beq.n	8008300 <USB_GetDevSpeed+0x32>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2b06      	cmp	r3, #6
 80082fe:	d102      	bne.n	8008306 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008300:	2302      	movs	r3, #2
 8008302:	75fb      	strb	r3, [r7, #23]
 8008304:	e001      	b.n	800830a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008306:	230f      	movs	r3, #15
 8008308:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800830a:	7dfb      	ldrb	r3, [r7, #23]
}
 800830c:	4618      	mov	r0, r3
 800830e:	371c      	adds	r7, #28
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	785b      	ldrb	r3, [r3, #1]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d13a      	bne.n	80083aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800833a:	69da      	ldr	r2, [r3, #28]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	f003 030f 	and.w	r3, r3, #15
 8008344:	2101      	movs	r1, #1
 8008346:	fa01 f303 	lsl.w	r3, r1, r3
 800834a:	b29b      	uxth	r3, r3
 800834c:	68f9      	ldr	r1, [r7, #12]
 800834e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008352:	4313      	orrs	r3, r2
 8008354:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	4413      	add	r3, r2
 800835e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d155      	bne.n	8008418 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	78db      	ldrb	r3, [r3, #3]
 8008386:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008388:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	059b      	lsls	r3, r3, #22
 800838e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008390:	4313      	orrs	r3, r2
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	0151      	lsls	r1, r2, #5
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	440a      	add	r2, r1
 800839a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800839e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	e036      	b.n	8008418 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b0:	69da      	ldr	r2, [r3, #28]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	f003 030f 	and.w	r3, r3, #15
 80083ba:	2101      	movs	r1, #1
 80083bc:	fa01 f303 	lsl.w	r3, r1, r3
 80083c0:	041b      	lsls	r3, r3, #16
 80083c2:	68f9      	ldr	r1, [r7, #12]
 80083c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083c8:	4313      	orrs	r3, r2
 80083ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d11a      	bne.n	8008418 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	015a      	lsls	r2, r3, #5
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	4413      	add	r3, r2
 80083ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	78db      	ldrb	r3, [r3, #3]
 80083fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80083fe:	430b      	orrs	r3, r1
 8008400:	4313      	orrs	r3, r2
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	0151      	lsls	r1, r2, #5
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	440a      	add	r2, r1
 800840a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800840e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008416:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
	...

08008428 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	785b      	ldrb	r3, [r3, #1]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d161      	bne.n	8008508 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	015a      	lsls	r2, r3, #5
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	4413      	add	r3, r2
 800844c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008456:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800845a:	d11f      	bne.n	800849c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4413      	add	r3, r2
 8008464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	0151      	lsls	r1, r2, #5
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	440a      	add	r2, r1
 8008472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008476:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800847a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	0151      	lsls	r1, r2, #5
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	440a      	add	r2, r1
 8008492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008496:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800849a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	f003 030f 	and.w	r3, r3, #15
 80084ac:	2101      	movs	r1, #1
 80084ae:	fa01 f303 	lsl.w	r3, r1, r3
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	43db      	mvns	r3, r3
 80084b6:	68f9      	ldr	r1, [r7, #12]
 80084b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084bc:	4013      	ands	r3, r2
 80084be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084c6:	69da      	ldr	r2, [r3, #28]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	f003 030f 	and.w	r3, r3, #15
 80084d0:	2101      	movs	r1, #1
 80084d2:	fa01 f303 	lsl.w	r3, r1, r3
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	43db      	mvns	r3, r3
 80084da:	68f9      	ldr	r1, [r7, #12]
 80084dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084e0:	4013      	ands	r3, r2
 80084e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	0159      	lsls	r1, r3, #5
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	440b      	add	r3, r1
 80084fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084fe:	4619      	mov	r1, r3
 8008500:	4b35      	ldr	r3, [pc, #212]	; (80085d8 <USB_DeactivateEndpoint+0x1b0>)
 8008502:	4013      	ands	r3, r2
 8008504:	600b      	str	r3, [r1, #0]
 8008506:	e060      	b.n	80085ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	4413      	add	r3, r2
 8008510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800851a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800851e:	d11f      	bne.n	8008560 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	015a      	lsls	r2, r3, #5
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	4413      	add	r3, r2
 8008528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	0151      	lsls	r1, r2, #5
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	440a      	add	r2, r1
 8008536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800853a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800853e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	4413      	add	r3, r2
 8008548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	0151      	lsls	r1, r2, #5
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	440a      	add	r2, r1
 8008556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800855a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800855e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	f003 030f 	and.w	r3, r3, #15
 8008570:	2101      	movs	r1, #1
 8008572:	fa01 f303 	lsl.w	r3, r1, r3
 8008576:	041b      	lsls	r3, r3, #16
 8008578:	43db      	mvns	r3, r3
 800857a:	68f9      	ldr	r1, [r7, #12]
 800857c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008580:	4013      	ands	r3, r2
 8008582:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800858a:	69da      	ldr	r2, [r3, #28]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	f003 030f 	and.w	r3, r3, #15
 8008594:	2101      	movs	r1, #1
 8008596:	fa01 f303 	lsl.w	r3, r1, r3
 800859a:	041b      	lsls	r3, r3, #16
 800859c:	43db      	mvns	r3, r3
 800859e:	68f9      	ldr	r1, [r7, #12]
 80085a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085a4:	4013      	ands	r3, r2
 80085a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	0159      	lsls	r1, r3, #5
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	440b      	add	r3, r1
 80085be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c2:	4619      	mov	r1, r3
 80085c4:	4b05      	ldr	r3, [pc, #20]	; (80085dc <USB_DeactivateEndpoint+0x1b4>)
 80085c6:	4013      	ands	r3, r2
 80085c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	ec337800 	.word	0xec337800
 80085dc:	eff37800 	.word	0xeff37800

080085e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b08a      	sub	sp, #40	; 0x28
 80085e4:	af02      	add	r7, sp, #8
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	4613      	mov	r3, r2
 80085ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	785b      	ldrb	r3, [r3, #1]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	f040 815c 	bne.w	80088ba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d132      	bne.n	8008670 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	015a      	lsls	r2, r3, #5
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	4413      	add	r3, r2
 8008612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	69ba      	ldr	r2, [r7, #24]
 800861a:	0151      	lsls	r1, r2, #5
 800861c:	69fa      	ldr	r2, [r7, #28]
 800861e:	440a      	add	r2, r1
 8008620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008624:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008628:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800862c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	4413      	add	r3, r2
 8008636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	0151      	lsls	r1, r2, #5
 8008640:	69fa      	ldr	r2, [r7, #28]
 8008642:	440a      	add	r2, r1
 8008644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008648:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800864c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	015a      	lsls	r2, r3, #5
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	4413      	add	r3, r2
 8008656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	69ba      	ldr	r2, [r7, #24]
 800865e:	0151      	lsls	r1, r2, #5
 8008660:	69fa      	ldr	r2, [r7, #28]
 8008662:	440a      	add	r2, r1
 8008664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008668:	0cdb      	lsrs	r3, r3, #19
 800866a:	04db      	lsls	r3, r3, #19
 800866c:	6113      	str	r3, [r2, #16]
 800866e:	e074      	b.n	800875a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	015a      	lsls	r2, r3, #5
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	4413      	add	r3, r2
 8008678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	69ba      	ldr	r2, [r7, #24]
 8008680:	0151      	lsls	r1, r2, #5
 8008682:	69fa      	ldr	r2, [r7, #28]
 8008684:	440a      	add	r2, r1
 8008686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800868a:	0cdb      	lsrs	r3, r3, #19
 800868c:	04db      	lsls	r3, r3, #19
 800868e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	4413      	add	r3, r2
 8008698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	69ba      	ldr	r2, [r7, #24]
 80086a0:	0151      	lsls	r1, r2, #5
 80086a2:	69fa      	ldr	r2, [r7, #28]
 80086a4:	440a      	add	r2, r1
 80086a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	6959      	ldr	r1, [r3, #20]
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	440b      	add	r3, r1
 80086cc:	1e59      	subs	r1, r3, #1
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80086d6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80086d8:	4b9d      	ldr	r3, [pc, #628]	; (8008950 <USB_EPStartXfer+0x370>)
 80086da:	400b      	ands	r3, r1
 80086dc:	69b9      	ldr	r1, [r7, #24]
 80086de:	0148      	lsls	r0, r1, #5
 80086e0:	69f9      	ldr	r1, [r7, #28]
 80086e2:	4401      	add	r1, r0
 80086e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80086e8:	4313      	orrs	r3, r2
 80086ea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f8:	691a      	ldr	r2, [r3, #16]
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008702:	69b9      	ldr	r1, [r7, #24]
 8008704:	0148      	lsls	r0, r1, #5
 8008706:	69f9      	ldr	r1, [r7, #28]
 8008708:	4401      	add	r1, r0
 800870a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800870e:	4313      	orrs	r3, r2
 8008710:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	78db      	ldrb	r3, [r3, #3]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d11f      	bne.n	800875a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	4413      	add	r3, r2
 8008722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	69ba      	ldr	r2, [r7, #24]
 800872a:	0151      	lsls	r1, r2, #5
 800872c:	69fa      	ldr	r2, [r7, #28]
 800872e:	440a      	add	r2, r1
 8008730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008734:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008738:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	015a      	lsls	r2, r3, #5
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	4413      	add	r3, r2
 8008742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	0151      	lsls	r1, r2, #5
 800874c:	69fa      	ldr	r2, [r7, #28]
 800874e:	440a      	add	r2, r1
 8008750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008754:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008758:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800875a:	79fb      	ldrb	r3, [r7, #7]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d14b      	bne.n	80087f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d009      	beq.n	800877c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008774:	461a      	mov	r2, r3
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	78db      	ldrb	r3, [r3, #3]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d128      	bne.n	80087d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008790:	2b00      	cmp	r3, #0
 8008792:	d110      	bne.n	80087b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	4413      	add	r3, r2
 800879c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	69ba      	ldr	r2, [r7, #24]
 80087a4:	0151      	lsls	r1, r2, #5
 80087a6:	69fa      	ldr	r2, [r7, #28]
 80087a8:	440a      	add	r2, r1
 80087aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087b2:	6013      	str	r3, [r2, #0]
 80087b4:	e00f      	b.n	80087d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	015a      	lsls	r2, r3, #5
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	4413      	add	r3, r2
 80087be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	69ba      	ldr	r2, [r7, #24]
 80087c6:	0151      	lsls	r1, r2, #5
 80087c8:	69fa      	ldr	r2, [r7, #28]
 80087ca:	440a      	add	r2, r1
 80087cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	015a      	lsls	r2, r3, #5
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	4413      	add	r3, r2
 80087de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	0151      	lsls	r1, r2, #5
 80087e8:	69fa      	ldr	r2, [r7, #28]
 80087ea:	440a      	add	r2, r1
 80087ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087f4:	6013      	str	r3, [r2, #0]
 80087f6:	e12f      	b.n	8008a58 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	69ba      	ldr	r2, [r7, #24]
 8008808:	0151      	lsls	r1, r2, #5
 800880a:	69fa      	ldr	r2, [r7, #28]
 800880c:	440a      	add	r2, r1
 800880e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008812:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008816:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	78db      	ldrb	r3, [r3, #3]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d015      	beq.n	800884c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	695b      	ldr	r3, [r3, #20]
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 8117 	beq.w	8008a58 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	f003 030f 	and.w	r3, r3, #15
 800883a:	2101      	movs	r1, #1
 800883c:	fa01 f303 	lsl.w	r3, r1, r3
 8008840:	69f9      	ldr	r1, [r7, #28]
 8008842:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008846:	4313      	orrs	r3, r2
 8008848:	634b      	str	r3, [r1, #52]	; 0x34
 800884a:	e105      	b.n	8008a58 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008858:	2b00      	cmp	r3, #0
 800885a:	d110      	bne.n	800887e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	4413      	add	r3, r2
 8008864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	69ba      	ldr	r2, [r7, #24]
 800886c:	0151      	lsls	r1, r2, #5
 800886e:	69fa      	ldr	r2, [r7, #28]
 8008870:	440a      	add	r2, r1
 8008872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008876:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800887a:	6013      	str	r3, [r2, #0]
 800887c:	e00f      	b.n	800889e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	4413      	add	r3, r2
 8008886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	69ba      	ldr	r2, [r7, #24]
 800888e:	0151      	lsls	r1, r2, #5
 8008890:	69fa      	ldr	r2, [r7, #28]
 8008892:	440a      	add	r2, r1
 8008894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800889c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	68d9      	ldr	r1, [r3, #12]
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	781a      	ldrb	r2, [r3, #0]
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	b298      	uxth	r0, r3
 80088ac:	79fb      	ldrb	r3, [r7, #7]
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	4603      	mov	r3, r0
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f000 fa2b 	bl	8008d0e <USB_WritePacket>
 80088b8:	e0ce      	b.n	8008a58 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	69ba      	ldr	r2, [r7, #24]
 80088ca:	0151      	lsls	r1, r2, #5
 80088cc:	69fa      	ldr	r2, [r7, #28]
 80088ce:	440a      	add	r2, r1
 80088d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088d4:	0cdb      	lsrs	r3, r3, #19
 80088d6:	04db      	lsls	r3, r3, #19
 80088d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	015a      	lsls	r2, r3, #5
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	4413      	add	r3, r2
 80088e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	69ba      	ldr	r2, [r7, #24]
 80088ea:	0151      	lsls	r1, r2, #5
 80088ec:	69fa      	ldr	r2, [r7, #28]
 80088ee:	440a      	add	r2, r1
 80088f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80088f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80088fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d126      	bne.n	8008954 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	015a      	lsls	r2, r3, #5
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	4413      	add	r3, r2
 800890e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008912:	691a      	ldr	r2, [r3, #16]
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800891c:	69b9      	ldr	r1, [r7, #24]
 800891e:	0148      	lsls	r0, r1, #5
 8008920:	69f9      	ldr	r1, [r7, #28]
 8008922:	4401      	add	r1, r0
 8008924:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008928:	4313      	orrs	r3, r2
 800892a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	4413      	add	r3, r2
 8008934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	69ba      	ldr	r2, [r7, #24]
 800893c:	0151      	lsls	r1, r2, #5
 800893e:	69fa      	ldr	r2, [r7, #28]
 8008940:	440a      	add	r2, r1
 8008942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008946:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800894a:	6113      	str	r3, [r2, #16]
 800894c:	e036      	b.n	80089bc <USB_EPStartXfer+0x3dc>
 800894e:	bf00      	nop
 8008950:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	695a      	ldr	r2, [r3, #20]
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	4413      	add	r3, r2
 800895e:	1e5a      	subs	r2, r3, #1
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	fbb2 f3f3 	udiv	r3, r2, r3
 8008968:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	015a      	lsls	r2, r3, #5
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	4413      	add	r3, r2
 8008972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008976:	691a      	ldr	r2, [r3, #16]
 8008978:	8afb      	ldrh	r3, [r7, #22]
 800897a:	04d9      	lsls	r1, r3, #19
 800897c:	4b39      	ldr	r3, [pc, #228]	; (8008a64 <USB_EPStartXfer+0x484>)
 800897e:	400b      	ands	r3, r1
 8008980:	69b9      	ldr	r1, [r7, #24]
 8008982:	0148      	lsls	r0, r1, #5
 8008984:	69f9      	ldr	r1, [r7, #28]
 8008986:	4401      	add	r1, r0
 8008988:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800898c:	4313      	orrs	r3, r2
 800898e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	015a      	lsls	r2, r3, #5
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	4413      	add	r3, r2
 8008998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800899c:	691a      	ldr	r2, [r3, #16]
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	8af9      	ldrh	r1, [r7, #22]
 80089a4:	fb01 f303 	mul.w	r3, r1, r3
 80089a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089ac:	69b9      	ldr	r1, [r7, #24]
 80089ae:	0148      	lsls	r0, r1, #5
 80089b0:	69f9      	ldr	r1, [r7, #28]
 80089b2:	4401      	add	r1, r0
 80089b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80089b8:	4313      	orrs	r3, r2
 80089ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80089bc:	79fb      	ldrb	r3, [r7, #7]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d10d      	bne.n	80089de <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d009      	beq.n	80089de <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	68d9      	ldr	r1, [r3, #12]
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	015a      	lsls	r2, r3, #5
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089da:	460a      	mov	r2, r1
 80089dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	78db      	ldrb	r3, [r3, #3]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d128      	bne.n	8008a38 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d110      	bne.n	8008a18 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	015a      	lsls	r2, r3, #5
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	4413      	add	r3, r2
 80089fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	69ba      	ldr	r2, [r7, #24]
 8008a06:	0151      	lsls	r1, r2, #5
 8008a08:	69fa      	ldr	r2, [r7, #28]
 8008a0a:	440a      	add	r2, r1
 8008a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a14:	6013      	str	r3, [r2, #0]
 8008a16:	e00f      	b.n	8008a38 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	69ba      	ldr	r2, [r7, #24]
 8008a28:	0151      	lsls	r1, r2, #5
 8008a2a:	69fa      	ldr	r2, [r7, #28]
 8008a2c:	440a      	add	r2, r1
 8008a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	015a      	lsls	r2, r3, #5
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	0151      	lsls	r1, r2, #5
 8008a4a:	69fa      	ldr	r2, [r7, #28]
 8008a4c:	440a      	add	r2, r1
 8008a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3720      	adds	r7, #32
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	1ff80000 	.word	0x1ff80000

08008a68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	4613      	mov	r3, r2
 8008a74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	785b      	ldrb	r3, [r3, #1]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	f040 80cd 	bne.w	8008c24 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d132      	bne.n	8008af8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	015a      	lsls	r2, r3, #5
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	4413      	add	r3, r2
 8008a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	0151      	lsls	r1, r2, #5
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	440a      	add	r2, r1
 8008aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ab0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ab4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	015a      	lsls	r2, r3, #5
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	4413      	add	r3, r2
 8008abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	0151      	lsls	r1, r2, #5
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	440a      	add	r2, r1
 8008acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ad4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	0151      	lsls	r1, r2, #5
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	440a      	add	r2, r1
 8008aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008af0:	0cdb      	lsrs	r3, r3, #19
 8008af2:	04db      	lsls	r3, r3, #19
 8008af4:	6113      	str	r3, [r2, #16]
 8008af6:	e04e      	b.n	8008b96 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	0151      	lsls	r1, r2, #5
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	440a      	add	r2, r1
 8008b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b12:	0cdb      	lsrs	r3, r3, #19
 8008b14:	04db      	lsls	r3, r3, #19
 8008b16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	0151      	lsls	r1, r2, #5
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	440a      	add	r2, r1
 8008b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b3a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	695a      	ldr	r2, [r3, #20]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d903      	bls.n	8008b50 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	689a      	ldr	r2, [r3, #8]
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	015a      	lsls	r2, r3, #5
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	0151      	lsls	r1, r2, #5
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	440a      	add	r2, r1
 8008b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	015a      	lsls	r2, r3, #5
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b7c:	691a      	ldr	r2, [r3, #16]
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b86:	6939      	ldr	r1, [r7, #16]
 8008b88:	0148      	lsls	r0, r1, #5
 8008b8a:	6979      	ldr	r1, [r7, #20]
 8008b8c:	4401      	add	r1, r0
 8008b8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b92:	4313      	orrs	r3, r2
 8008b94:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b96:	79fb      	ldrb	r3, [r7, #7]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d11e      	bne.n	8008bda <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d009      	beq.n	8008bb8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	015a      	lsls	r2, r3, #5
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	4413      	add	r3, r2
 8008bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	693a      	ldr	r2, [r7, #16]
 8008bc8:	0151      	lsls	r1, r2, #5
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	440a      	add	r2, r1
 8008bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bd6:	6013      	str	r3, [r2, #0]
 8008bd8:	e092      	b.n	8008d00 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	0151      	lsls	r1, r2, #5
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	440a      	add	r2, r1
 8008bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bf4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bf8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	695b      	ldr	r3, [r3, #20]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d07e      	beq.n	8008d00 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	f003 030f 	and.w	r3, r3, #15
 8008c12:	2101      	movs	r1, #1
 8008c14:	fa01 f303 	lsl.w	r3, r1, r3
 8008c18:	6979      	ldr	r1, [r7, #20]
 8008c1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	634b      	str	r3, [r1, #52]	; 0x34
 8008c22:	e06d      	b.n	8008d00 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	015a      	lsls	r2, r3, #5
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	0151      	lsls	r1, r2, #5
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	440a      	add	r2, r1
 8008c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c3e:	0cdb      	lsrs	r3, r3, #19
 8008c40:	04db      	lsls	r3, r3, #19
 8008c42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	693a      	ldr	r2, [r7, #16]
 8008c54:	0151      	lsls	r1, r2, #5
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	440a      	add	r2, r1
 8008c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c66:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d003      	beq.n	8008c78 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	689a      	ldr	r2, [r3, #8]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	0151      	lsls	r1, r2, #5
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	440a      	add	r2, r1
 8008c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c96:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	015a      	lsls	r2, r3, #5
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca4:	691a      	ldr	r2, [r3, #16]
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cae:	6939      	ldr	r1, [r7, #16]
 8008cb0:	0148      	lsls	r0, r1, #5
 8008cb2:	6979      	ldr	r1, [r7, #20]
 8008cb4:	4401      	add	r1, r0
 8008cb6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008cbe:	79fb      	ldrb	r3, [r7, #7]
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d10d      	bne.n	8008ce0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d009      	beq.n	8008ce0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	68d9      	ldr	r1, [r3, #12]
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	015a      	lsls	r2, r3, #5
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cdc:	460a      	mov	r2, r1
 8008cde:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	0151      	lsls	r1, r2, #5
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	440a      	add	r2, r1
 8008cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008cfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	371c      	adds	r7, #28
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b089      	sub	sp, #36	; 0x24
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	60f8      	str	r0, [r7, #12]
 8008d16:	60b9      	str	r1, [r7, #8]
 8008d18:	4611      	mov	r1, r2
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	71fb      	strb	r3, [r7, #7]
 8008d20:	4613      	mov	r3, r2
 8008d22:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008d2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d123      	bne.n	8008d7c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008d34:	88bb      	ldrh	r3, [r7, #4]
 8008d36:	3303      	adds	r3, #3
 8008d38:	089b      	lsrs	r3, r3, #2
 8008d3a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	61bb      	str	r3, [r7, #24]
 8008d40:	e018      	b.n	8008d74 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008d42:	79fb      	ldrb	r3, [r7, #7]
 8008d44:	031a      	lsls	r2, r3, #12
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	4413      	add	r3, r2
 8008d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d4e:	461a      	mov	r2, r3
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	3301      	adds	r3, #1
 8008d66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	3301      	adds	r3, #1
 8008d72:	61bb      	str	r3, [r7, #24]
 8008d74:	69ba      	ldr	r2, [r7, #24]
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d3e2      	bcc.n	8008d42 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3724      	adds	r7, #36	; 0x24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b08b      	sub	sp, #44	; 0x2c
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	60f8      	str	r0, [r7, #12]
 8008d92:	60b9      	str	r1, [r7, #8]
 8008d94:	4613      	mov	r3, r2
 8008d96:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008da0:	88fb      	ldrh	r3, [r7, #6]
 8008da2:	089b      	lsrs	r3, r3, #2
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008da8:	88fb      	ldrh	r3, [r7, #6]
 8008daa:	f003 0303 	and.w	r3, r3, #3
 8008dae:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008db0:	2300      	movs	r3, #0
 8008db2:	623b      	str	r3, [r7, #32]
 8008db4:	e014      	b.n	8008de0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc0:	601a      	str	r2, [r3, #0]
    pDest++;
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	3301      	adds	r3, #1
 8008dcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	623b      	str	r3, [r7, #32]
 8008de0:	6a3a      	ldr	r2, [r7, #32]
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d3e6      	bcc.n	8008db6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008de8:	8bfb      	ldrh	r3, [r7, #30]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d01e      	beq.n	8008e2c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008dee:	2300      	movs	r3, #0
 8008df0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008df8:	461a      	mov	r2, r3
 8008dfa:	f107 0310 	add.w	r3, r7, #16
 8008dfe:	6812      	ldr	r2, [r2, #0]
 8008e00:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	6a3b      	ldr	r3, [r7, #32]
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	00db      	lsls	r3, r3, #3
 8008e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e12:	701a      	strb	r2, [r3, #0]
      i++;
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	3301      	adds	r3, #1
 8008e18:	623b      	str	r3, [r7, #32]
      pDest++;
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008e20:	8bfb      	ldrh	r3, [r7, #30]
 8008e22:	3b01      	subs	r3, #1
 8008e24:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008e26:	8bfb      	ldrh	r3, [r7, #30]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1ea      	bne.n	8008e02 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	372c      	adds	r7, #44	; 0x2c
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b085      	sub	sp, #20
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	785b      	ldrb	r3, [r3, #1]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d12c      	bne.n	8008eb0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	015a      	lsls	r2, r3, #5
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	db12      	blt.n	8008e8e <USB_EPSetStall+0x54>
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00f      	beq.n	8008e8e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	015a      	lsls	r2, r3, #5
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	4413      	add	r3, r2
 8008e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	0151      	lsls	r1, r2, #5
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	440a      	add	r2, r1
 8008e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e8c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	015a      	lsls	r2, r3, #5
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	4413      	add	r3, r2
 8008e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	0151      	lsls	r1, r2, #5
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	440a      	add	r2, r1
 8008ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	e02b      	b.n	8008f08 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	db12      	blt.n	8008ee8 <USB_EPSetStall+0xae>
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00f      	beq.n	8008ee8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	015a      	lsls	r2, r3, #5
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	0151      	lsls	r1, r2, #5
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	440a      	add	r2, r1
 8008ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ee2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ee6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	0151      	lsls	r1, r2, #5
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	440a      	add	r2, r1
 8008efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3714      	adds	r7, #20
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f16:	b480      	push	{r7}
 8008f18:	b085      	sub	sp, #20
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	785b      	ldrb	r3, [r3, #1]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d128      	bne.n	8008f84 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	0151      	lsls	r1, r2, #5
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	440a      	add	r2, r1
 8008f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	78db      	ldrb	r3, [r3, #3]
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d003      	beq.n	8008f62 <USB_EPClearStall+0x4c>
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	78db      	ldrb	r3, [r3, #3]
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d138      	bne.n	8008fd4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	0151      	lsls	r1, r2, #5
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	440a      	add	r2, r1
 8008f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f80:	6013      	str	r3, [r2, #0]
 8008f82:	e027      	b.n	8008fd4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	015a      	lsls	r2, r3, #5
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	0151      	lsls	r1, r2, #5
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	440a      	add	r2, r1
 8008f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008fa2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	78db      	ldrb	r3, [r3, #3]
 8008fa8:	2b03      	cmp	r3, #3
 8008faa:	d003      	beq.n	8008fb4 <USB_EPClearStall+0x9e>
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	78db      	ldrb	r3, [r3, #3]
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d10f      	bne.n	8008fd4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	015a      	lsls	r2, r3, #5
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	0151      	lsls	r1, r2, #5
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	440a      	add	r2, r1
 8008fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fd2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b085      	sub	sp, #20
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	460b      	mov	r3, r1
 8008fec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009000:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009004:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	78fb      	ldrb	r3, [r7, #3]
 8009010:	011b      	lsls	r3, r3, #4
 8009012:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009016:	68f9      	ldr	r1, [r7, #12]
 8009018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800901c:	4313      	orrs	r3, r2
 800901e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800902e:	b480      	push	{r7}
 8009030:	b085      	sub	sp, #20
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009048:	f023 0303 	bic.w	r3, r3, #3
 800904c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800905c:	f023 0302 	bic.w	r3, r3, #2
 8009060:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800908a:	f023 0303 	bic.w	r3, r3, #3
 800908e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800909e:	f043 0302 	orr.w	r3, r3, #2
 80090a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3714      	adds	r7, #20
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b085      	sub	sp, #20
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	695b      	ldr	r3, [r3, #20]
 80090be:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	4013      	ands	r3, r2
 80090c8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80090ca:	68fb      	ldr	r3, [r7, #12]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f4:	69db      	ldr	r3, [r3, #28]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	4013      	ands	r3, r2
 80090fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	0c1b      	lsrs	r3, r3, #16
}
 8009100:	4618      	mov	r0, r3
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009128:	69db      	ldr	r3, [r3, #28]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	4013      	ands	r3, r2
 800912e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	b29b      	uxth	r3, r3
}
 8009134:	4618      	mov	r0, r3
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009150:	78fb      	ldrb	r3, [r7, #3]
 8009152:	015a      	lsls	r2, r3, #5
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4413      	add	r3, r2
 8009158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	4013      	ands	r3, r2
 800916c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800916e:	68bb      	ldr	r3, [r7, #8]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800917c:	b480      	push	{r7}
 800917e:	b087      	sub	sp, #28
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	460b      	mov	r3, r1
 8009186:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800919c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80091a0:	78fb      	ldrb	r3, [r7, #3]
 80091a2:	f003 030f 	and.w	r3, r3, #15
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	fa22 f303 	lsr.w	r3, r2, r3
 80091ac:	01db      	lsls	r3, r3, #7
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80091b6:	78fb      	ldrb	r3, [r7, #3]
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	4013      	ands	r3, r2
 80091c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80091ca:	68bb      	ldr	r3, [r7, #8]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	371c      	adds	r7, #28
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	695b      	ldr	r3, [r3, #20]
 80091e4:	f003 0301 	and.w	r3, r3, #1
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800920e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009212:	f023 0307 	bic.w	r3, r3, #7
 8009216:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800922a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3714      	adds	r7, #20
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
	...

0800923c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800923c:	b480      	push	{r7}
 800923e:	b087      	sub	sp, #28
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	460b      	mov	r3, r1
 8009246:	607a      	str	r2, [r7, #4]
 8009248:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	333c      	adds	r3, #60	; 0x3c
 8009252:	3304      	adds	r3, #4
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	4a26      	ldr	r2, [pc, #152]	; (80092f4 <USB_EP0_OutStart+0xb8>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d90a      	bls.n	8009276 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800926c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009270:	d101      	bne.n	8009276 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	e037      	b.n	80092e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800927c:	461a      	mov	r2, r3
 800927e:	2300      	movs	r3, #0
 8009280:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009290:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009294:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092a4:	f043 0318 	orr.w	r3, r3, #24
 80092a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80092bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80092be:	7afb      	ldrb	r3, [r7, #11]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d10f      	bne.n	80092e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ca:	461a      	mov	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	697a      	ldr	r2, [r7, #20]
 80092da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092de:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80092e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	371c      	adds	r7, #28
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	4f54300a 	.word	0x4f54300a

080092f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009300:	2300      	movs	r3, #0
 8009302:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	3301      	adds	r3, #1
 8009308:	60fb      	str	r3, [r7, #12]
 800930a:	4a13      	ldr	r2, [pc, #76]	; (8009358 <USB_CoreReset+0x60>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d901      	bls.n	8009314 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8009310:	2303      	movs	r3, #3
 8009312:	e01a      	b.n	800934a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	2b00      	cmp	r3, #0
 800931a:	daf3      	bge.n	8009304 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800931c:	2300      	movs	r3, #0
 800931e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	f043 0201 	orr.w	r2, r3, #1
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	3301      	adds	r3, #1
 8009330:	60fb      	str	r3, [r7, #12]
 8009332:	4a09      	ldr	r2, [pc, #36]	; (8009358 <USB_CoreReset+0x60>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d901      	bls.n	800933c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8009338:	2303      	movs	r3, #3
 800933a:	e006      	b.n	800934a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	f003 0301 	and.w	r3, r3, #1
 8009344:	2b01      	cmp	r3, #1
 8009346:	d0f1      	beq.n	800932c <USB_CoreReset+0x34>

  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3714      	adds	r7, #20
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop
 8009358:	00030d40 	.word	0x00030d40

0800935c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	460b      	mov	r3, r1
 8009366:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009368:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800936c:	f002 f980 	bl	800b670 <USBD_static_malloc>
 8009370:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d105      	bne.n	8009384 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009380:	2302      	movs	r3, #2
 8009382:	e066      	b.n	8009452 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	7c1b      	ldrb	r3, [r3, #16]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d119      	bne.n	80093c8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009394:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009398:	2202      	movs	r2, #2
 800939a:	2181      	movs	r1, #129	; 0x81
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f002 f844 	bl	800b42a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2201      	movs	r2, #1
 80093a6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80093a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093ac:	2202      	movs	r2, #2
 80093ae:	2101      	movs	r1, #1
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f002 f83a 	bl	800b42a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2210      	movs	r2, #16
 80093c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80093c6:	e016      	b.n	80093f6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80093c8:	2340      	movs	r3, #64	; 0x40
 80093ca:	2202      	movs	r2, #2
 80093cc:	2181      	movs	r1, #129	; 0x81
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f002 f82b 	bl	800b42a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80093da:	2340      	movs	r3, #64	; 0x40
 80093dc:	2202      	movs	r2, #2
 80093de:	2101      	movs	r1, #1
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f002 f822 	bl	800b42a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2201      	movs	r2, #1
 80093ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2210      	movs	r2, #16
 80093f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80093f6:	2308      	movs	r3, #8
 80093f8:	2203      	movs	r2, #3
 80093fa:	2182      	movs	r1, #130	; 0x82
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f002 f814 	bl	800b42a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2201      	movs	r2, #1
 8009406:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	7c1b      	ldrb	r3, [r3, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d109      	bne.n	8009440 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009436:	2101      	movs	r1, #1
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f002 f8e5 	bl	800b608 <USBD_LL_PrepareReceive>
 800943e:	e007      	b.n	8009450 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009446:	2340      	movs	r3, #64	; 0x40
 8009448:	2101      	movs	r1, #1
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f002 f8dc 	bl	800b608 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b082      	sub	sp, #8
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
 8009462:	460b      	mov	r3, r1
 8009464:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009466:	2181      	movs	r1, #129	; 0x81
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f002 f804 	bl	800b476 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009474:	2101      	movs	r1, #1
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f001 fffd 	bl	800b476 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009484:	2182      	movs	r1, #130	; 0x82
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f001 fff5 	bl	800b476 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00e      	beq.n	80094c4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094b6:	4618      	mov	r0, r3
 80094b8:	f002 f8e8 	bl	800b68c <USBD_static_free>
    pdev->pClassData = NULL;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
	...

080094d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80094e2:	2300      	movs	r3, #0
 80094e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80094e6:	2300      	movs	r3, #0
 80094e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d101      	bne.n	80094f8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e0af      	b.n	8009658 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009500:	2b00      	cmp	r3, #0
 8009502:	d03f      	beq.n	8009584 <USBD_CDC_Setup+0xb4>
 8009504:	2b20      	cmp	r3, #32
 8009506:	f040 809f 	bne.w	8009648 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	88db      	ldrh	r3, [r3, #6]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d02e      	beq.n	8009570 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	b25b      	sxtb	r3, r3
 8009518:	2b00      	cmp	r3, #0
 800951a:	da16      	bge.n	800954a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009528:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800952a:	683a      	ldr	r2, [r7, #0]
 800952c:	88d2      	ldrh	r2, [r2, #6]
 800952e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	88db      	ldrh	r3, [r3, #6]
 8009534:	2b07      	cmp	r3, #7
 8009536:	bf28      	it	cs
 8009538:	2307      	movcs	r3, #7
 800953a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	89fa      	ldrh	r2, [r7, #14]
 8009540:	4619      	mov	r1, r3
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f001 fb19 	bl	800ab7a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009548:	e085      	b.n	8009656 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	785a      	ldrb	r2, [r3, #1]
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	88db      	ldrh	r3, [r3, #6]
 8009558:	b2da      	uxtb	r2, r3
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009560:	6939      	ldr	r1, [r7, #16]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	88db      	ldrh	r3, [r3, #6]
 8009566:	461a      	mov	r2, r3
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f001 fb32 	bl	800abd2 <USBD_CtlPrepareRx>
      break;
 800956e:	e072      	b.n	8009656 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	7850      	ldrb	r0, [r2, #1]
 800957c:	2200      	movs	r2, #0
 800957e:	6839      	ldr	r1, [r7, #0]
 8009580:	4798      	blx	r3
      break;
 8009582:	e068      	b.n	8009656 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	785b      	ldrb	r3, [r3, #1]
 8009588:	2b0b      	cmp	r3, #11
 800958a:	d852      	bhi.n	8009632 <USBD_CDC_Setup+0x162>
 800958c:	a201      	add	r2, pc, #4	; (adr r2, 8009594 <USBD_CDC_Setup+0xc4>)
 800958e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009592:	bf00      	nop
 8009594:	080095c5 	.word	0x080095c5
 8009598:	08009641 	.word	0x08009641
 800959c:	08009633 	.word	0x08009633
 80095a0:	08009633 	.word	0x08009633
 80095a4:	08009633 	.word	0x08009633
 80095a8:	08009633 	.word	0x08009633
 80095ac:	08009633 	.word	0x08009633
 80095b0:	08009633 	.word	0x08009633
 80095b4:	08009633 	.word	0x08009633
 80095b8:	08009633 	.word	0x08009633
 80095bc:	080095ef 	.word	0x080095ef
 80095c0:	08009619 	.word	0x08009619
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	2b03      	cmp	r3, #3
 80095ce:	d107      	bne.n	80095e0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80095d0:	f107 030a 	add.w	r3, r7, #10
 80095d4:	2202      	movs	r2, #2
 80095d6:	4619      	mov	r1, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f001 face 	bl	800ab7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80095de:	e032      	b.n	8009646 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f001 fa58 	bl	800aa98 <USBD_CtlError>
            ret = USBD_FAIL;
 80095e8:	2303      	movs	r3, #3
 80095ea:	75fb      	strb	r3, [r7, #23]
          break;
 80095ec:	e02b      	b.n	8009646 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d107      	bne.n	800960a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80095fa:	f107 030d 	add.w	r3, r7, #13
 80095fe:	2201      	movs	r2, #1
 8009600:	4619      	mov	r1, r3
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f001 fab9 	bl	800ab7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009608:	e01d      	b.n	8009646 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f001 fa43 	bl	800aa98 <USBD_CtlError>
            ret = USBD_FAIL;
 8009612:	2303      	movs	r3, #3
 8009614:	75fb      	strb	r3, [r7, #23]
          break;
 8009616:	e016      	b.n	8009646 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800961e:	b2db      	uxtb	r3, r3
 8009620:	2b03      	cmp	r3, #3
 8009622:	d00f      	beq.n	8009644 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009624:	6839      	ldr	r1, [r7, #0]
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f001 fa36 	bl	800aa98 <USBD_CtlError>
            ret = USBD_FAIL;
 800962c:	2303      	movs	r3, #3
 800962e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009630:	e008      	b.n	8009644 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f001 fa2f 	bl	800aa98 <USBD_CtlError>
          ret = USBD_FAIL;
 800963a:	2303      	movs	r3, #3
 800963c:	75fb      	strb	r3, [r7, #23]
          break;
 800963e:	e002      	b.n	8009646 <USBD_CDC_Setup+0x176>
          break;
 8009640:	bf00      	nop
 8009642:	e008      	b.n	8009656 <USBD_CDC_Setup+0x186>
          break;
 8009644:	bf00      	nop
      }
      break;
 8009646:	e006      	b.n	8009656 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f001 fa24 	bl	800aa98 <USBD_CtlError>
      ret = USBD_FAIL;
 8009650:	2303      	movs	r3, #3
 8009652:	75fb      	strb	r3, [r7, #23]
      break;
 8009654:	bf00      	nop
  }

  return (uint8_t)ret;
 8009656:	7dfb      	ldrb	r3, [r7, #23]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3718      	adds	r7, #24
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	460b      	mov	r3, r1
 800966a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009672:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800967a:	2b00      	cmp	r3, #0
 800967c:	d101      	bne.n	8009682 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800967e:	2303      	movs	r3, #3
 8009680:	e04f      	b.n	8009722 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009688:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800968a:	78fa      	ldrb	r2, [r7, #3]
 800968c:	6879      	ldr	r1, [r7, #4]
 800968e:	4613      	mov	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	4413      	add	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	440b      	add	r3, r1
 8009698:	3318      	adds	r3, #24
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d029      	beq.n	80096f4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80096a0:	78fa      	ldrb	r2, [r7, #3]
 80096a2:	6879      	ldr	r1, [r7, #4]
 80096a4:	4613      	mov	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	440b      	add	r3, r1
 80096ae:	3318      	adds	r3, #24
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	78f9      	ldrb	r1, [r7, #3]
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	460b      	mov	r3, r1
 80096b8:	00db      	lsls	r3, r3, #3
 80096ba:	1a5b      	subs	r3, r3, r1
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4403      	add	r3, r0
 80096c0:	3344      	adds	r3, #68	; 0x44
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80096c8:	fb03 f301 	mul.w	r3, r3, r1
 80096cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d110      	bne.n	80096f4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80096d2:	78fa      	ldrb	r2, [r7, #3]
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	4613      	mov	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	440b      	add	r3, r1
 80096e0:	3318      	adds	r3, #24
 80096e2:	2200      	movs	r2, #0
 80096e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80096e6:	78f9      	ldrb	r1, [r7, #3]
 80096e8:	2300      	movs	r3, #0
 80096ea:	2200      	movs	r2, #0
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f001 ff6a 	bl	800b5c6 <USBD_LL_Transmit>
 80096f2:	e015      	b.n	8009720 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00b      	beq.n	8009720 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	68ba      	ldr	r2, [r7, #8]
 8009712:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800971c:	78fa      	ldrb	r2, [r7, #3]
 800971e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b084      	sub	sp, #16
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	460b      	mov	r3, r1
 8009734:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800973c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009748:	2303      	movs	r3, #3
 800974a:	e015      	b.n	8009778 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800974c:	78fb      	ldrb	r3, [r7, #3]
 800974e:	4619      	mov	r1, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f001 ff7a 	bl	800b64a <USBD_LL_GetRxDataSize>
 8009756:	4602      	mov	r2, r0
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009772:	4611      	mov	r1, r2
 8009774:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800978e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009796:	2303      	movs	r3, #3
 8009798:	e01b      	b.n	80097d2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d015      	beq.n	80097d0 <USBD_CDC_EP0_RxReady+0x50>
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80097aa:	2bff      	cmp	r3, #255	; 0xff
 80097ac:	d010      	beq.n	80097d0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80097bc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80097c4:	b292      	uxth	r2, r2
 80097c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	22ff      	movs	r2, #255	; 0xff
 80097cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
	...

080097dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2243      	movs	r2, #67	; 0x43
 80097e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80097ea:	4b03      	ldr	r3, [pc, #12]	; (80097f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	20000098 	.word	0x20000098

080097fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2243      	movs	r2, #67	; 0x43
 8009808:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800980a:	4b03      	ldr	r3, [pc, #12]	; (8009818 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800980c:	4618      	mov	r0, r3
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr
 8009818:	20000054 	.word	0x20000054

0800981c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2243      	movs	r2, #67	; 0x43
 8009828:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800982a:	4b03      	ldr	r3, [pc, #12]	; (8009838 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr
 8009838:	200000dc 	.word	0x200000dc

0800983c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	220a      	movs	r2, #10
 8009848:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800984a:	4b03      	ldr	r3, [pc, #12]	; (8009858 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800984c:	4618      	mov	r0, r3
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr
 8009858:	20000010 	.word	0x20000010

0800985c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d101      	bne.n	8009870 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800986c:	2303      	movs	r3, #3
 800986e:	e004      	b.n	800987a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	370c      	adds	r7, #12
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009886:	b480      	push	{r7}
 8009888:	b087      	sub	sp, #28
 800988a:	af00      	add	r7, sp, #0
 800988c:	60f8      	str	r0, [r7, #12]
 800988e:	60b9      	str	r1, [r7, #8]
 8009890:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009898:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80098a0:	2303      	movs	r3, #3
 80098a2:	e008      	b.n	80098b6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	371c      	adds	r7, #28
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr

080098c2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80098c2:	b480      	push	{r7}
 80098c4:	b085      	sub	sp, #20
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098d2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80098da:	2303      	movs	r3, #3
 80098dc:	e004      	b.n	80098e8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	683a      	ldr	r2, [r7, #0]
 80098e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3714      	adds	r7, #20
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009902:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009904:	2301      	movs	r3, #1
 8009906:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800990e:	2b00      	cmp	r3, #0
 8009910:	d101      	bne.n	8009916 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009912:	2303      	movs	r3, #3
 8009914:	e01a      	b.n	800994c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800991c:	2b00      	cmp	r3, #0
 800991e:	d114      	bne.n	800994a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	2201      	movs	r2, #1
 8009924:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800993e:	2181      	movs	r1, #129	; 0x81
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f001 fe40 	bl	800b5c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800994a:	7bfb      	ldrb	r3, [r7, #15]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009962:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800996e:	2303      	movs	r3, #3
 8009970:	e016      	b.n	80099a0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	7c1b      	ldrb	r3, [r3, #16]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d109      	bne.n	800998e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009984:	2101      	movs	r1, #1
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f001 fe3e 	bl	800b608 <USBD_LL_PrepareReceive>
 800998c:	e007      	b.n	800999e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009994:	2340      	movs	r3, #64	; 0x40
 8009996:	2101      	movs	r1, #1
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f001 fe35 	bl	800b608 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	4613      	mov	r3, r2
 80099b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d101      	bne.n	80099c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80099bc:	2303      	movs	r3, #3
 80099be:	e01f      	b.n	8009a00 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d003      	beq.n	80099e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	68ba      	ldr	r2, [r7, #8]
 80099e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	79fa      	ldrb	r2, [r7, #7]
 80099f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f001 fcb1 	bl	800b35c <USBD_LL_Init>
 80099fa:	4603      	mov	r3, r0
 80099fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80099fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3718      	adds	r7, #24
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a12:	2300      	movs	r3, #0
 8009a14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d101      	bne.n	8009a20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	e016      	b.n	8009a4e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	683a      	ldr	r2, [r7, #0]
 8009a24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00b      	beq.n	8009a4c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	f107 020e 	add.w	r2, r7, #14
 8009a40:	4610      	mov	r0, r2
 8009a42:	4798      	blx	r3
 8009a44:	4602      	mov	r2, r0
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f001 fcc8 	bl	800b3f4 <USBD_LL_Start>
 8009a64:	4603      	mov	r3, r0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b083      	sub	sp, #12
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009a90:	2303      	movs	r3, #3
 8009a92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d009      	beq.n	8009ab2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	78fa      	ldrb	r2, [r7, #3]
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	4798      	blx	r3
 8009aae:	4603      	mov	r3, r0
 8009ab0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d007      	beq.n	8009ae2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	78fa      	ldrb	r2, [r7, #3]
 8009adc:	4611      	mov	r1, r2
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	4798      	blx	r3
  }

  return USBD_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	4618      	mov	r0, r3
 8009b00:	f000 ff90 	bl	800aa24 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009b12:	461a      	mov	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b20:	f003 031f 	and.w	r3, r3, #31
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d01a      	beq.n	8009b5e <USBD_LL_SetupStage+0x72>
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d822      	bhi.n	8009b72 <USBD_LL_SetupStage+0x86>
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d002      	beq.n	8009b36 <USBD_LL_SetupStage+0x4a>
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d00a      	beq.n	8009b4a <USBD_LL_SetupStage+0x5e>
 8009b34:	e01d      	b.n	8009b72 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fa62 	bl	800a008 <USBD_StdDevReq>
 8009b44:	4603      	mov	r3, r0
 8009b46:	73fb      	strb	r3, [r7, #15]
      break;
 8009b48:	e020      	b.n	8009b8c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b50:	4619      	mov	r1, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 fac6 	bl	800a0e4 <USBD_StdItfReq>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b5c:	e016      	b.n	8009b8c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b64:	4619      	mov	r1, r3
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fb05 	bl	800a176 <USBD_StdEPReq>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b70:	e00c      	b.n	8009b8c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	4619      	mov	r1, r3
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f001 fc97 	bl	800b4b4 <USBD_LL_StallEP>
 8009b86:	4603      	mov	r3, r0
 8009b88:	73fb      	strb	r3, [r7, #15]
      break;
 8009b8a:	bf00      	nop
  }

  return ret;
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b086      	sub	sp, #24
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	60f8      	str	r0, [r7, #12]
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	607a      	str	r2, [r7, #4]
 8009ba2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009ba4:	7afb      	ldrb	r3, [r7, #11]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d138      	bne.n	8009c1c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009bb0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009bb8:	2b03      	cmp	r3, #3
 8009bba:	d14a      	bne.n	8009c52 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	689a      	ldr	r2, [r3, #8]
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d913      	bls.n	8009bf0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	689a      	ldr	r2, [r3, #8]
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	1ad2      	subs	r2, r2, r3
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	68da      	ldr	r2, [r3, #12]
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	4293      	cmp	r3, r2
 8009be0:	bf28      	it	cs
 8009be2:	4613      	movcs	r3, r2
 8009be4:	461a      	mov	r2, r3
 8009be6:	6879      	ldr	r1, [r7, #4]
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f001 f80f 	bl	800ac0c <USBD_CtlContinueRx>
 8009bee:	e030      	b.n	8009c52 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	2b03      	cmp	r3, #3
 8009bfa:	d10b      	bne.n	8009c14 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d005      	beq.n	8009c14 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f001 f80a 	bl	800ac2e <USBD_CtlSendStatus>
 8009c1a:	e01a      	b.n	8009c52 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b03      	cmp	r3, #3
 8009c26:	d114      	bne.n	8009c52 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00e      	beq.n	8009c52 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	7afa      	ldrb	r2, [r7, #11]
 8009c3e:	4611      	mov	r1, r2
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	4798      	blx	r3
 8009c44:	4603      	mov	r3, r0
 8009c46:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009c4e:	7dfb      	ldrb	r3, [r7, #23]
 8009c50:	e000      	b.n	8009c54 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3718      	adds	r7, #24
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	460b      	mov	r3, r1
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009c6a:	7afb      	ldrb	r3, [r7, #11]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d16b      	bne.n	8009d48 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	3314      	adds	r3, #20
 8009c74:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d156      	bne.n	8009d2e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	689a      	ldr	r2, [r3, #8]
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d914      	bls.n	8009cb6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	689a      	ldr	r2, [r3, #8]
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	1ad2      	subs	r2, r2, r3
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	6879      	ldr	r1, [r7, #4]
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f000 ff84 	bl	800abb0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ca8:	2300      	movs	r3, #0
 8009caa:	2200      	movs	r2, #0
 8009cac:	2100      	movs	r1, #0
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f001 fcaa 	bl	800b608 <USBD_LL_PrepareReceive>
 8009cb4:	e03b      	b.n	8009d2e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	68da      	ldr	r2, [r3, #12]
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d11c      	bne.n	8009cfc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	685a      	ldr	r2, [r3, #4]
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d316      	bcc.n	8009cfc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	685a      	ldr	r2, [r3, #4]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d20f      	bcs.n	8009cfc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009cdc:	2200      	movs	r2, #0
 8009cde:	2100      	movs	r1, #0
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 ff65 	bl	800abb0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cee:	2300      	movs	r3, #0
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f001 fc87 	bl	800b608 <USBD_LL_PrepareReceive>
 8009cfa:	e018      	b.n	8009d2e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	2b03      	cmp	r3, #3
 8009d06:	d10b      	bne.n	8009d20 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d005      	beq.n	8009d20 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d20:	2180      	movs	r1, #128	; 0x80
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f001 fbc6 	bl	800b4b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f000 ff93 	bl	800ac54 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d122      	bne.n	8009d7e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f7ff fe98 	bl	8009a6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009d46:	e01a      	b.n	8009d7e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	2b03      	cmp	r3, #3
 8009d52:	d114      	bne.n	8009d7e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d5a:	695b      	ldr	r3, [r3, #20]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00e      	beq.n	8009d7e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d66:	695b      	ldr	r3, [r3, #20]
 8009d68:	7afa      	ldrb	r2, [r7, #11]
 8009d6a:	4611      	mov	r1, r2
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	4798      	blx	r3
 8009d70:	4603      	mov	r3, r0
 8009d72:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009d74:	7dfb      	ldrb	r3, [r7, #23]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009d7a:	7dfb      	ldrb	r3, [r7, #23]
 8009d7c:	e000      	b.n	8009d80 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2201      	movs	r2, #1
 8009d94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d101      	bne.n	8009dbc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e02f      	b.n	8009e1c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00f      	beq.n	8009de6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d009      	beq.n	8009de6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	6852      	ldr	r2, [r2, #4]
 8009dde:	b2d2      	uxtb	r2, r2
 8009de0:	4611      	mov	r1, r2
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009de6:	2340      	movs	r3, #64	; 0x40
 8009de8:	2200      	movs	r2, #0
 8009dea:	2100      	movs	r1, #0
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f001 fb1c 	bl	800b42a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2240      	movs	r2, #64	; 0x40
 8009dfe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e02:	2340      	movs	r3, #64	; 0x40
 8009e04:	2200      	movs	r2, #0
 8009e06:	2180      	movs	r1, #128	; 0x80
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f001 fb0e 	bl	800b42a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2201      	movs	r2, #1
 8009e12:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2240      	movs	r2, #64	; 0x40
 8009e18:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	78fa      	ldrb	r2, [r7, #3]
 8009e34:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e52:	b2da      	uxtb	r2, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2204      	movs	r2, #4
 8009e5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	2b04      	cmp	r3, #4
 8009e82:	d106      	bne.n	8009e92 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009e8a:	b2da      	uxtb	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e012      	b.n	8009edc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	d10b      	bne.n	8009eda <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ec8:	69db      	ldr	r3, [r3, #28]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d005      	beq.n	8009eda <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ed4:	69db      	ldr	r3, [r3, #28]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3708      	adds	r7, #8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	460b      	mov	r3, r1
 8009eee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d101      	bne.n	8009efe <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009efa:	2303      	movs	r3, #3
 8009efc:	e014      	b.n	8009f28 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b03      	cmp	r3, #3
 8009f08:	d10d      	bne.n	8009f26 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d007      	beq.n	8009f26 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	78fa      	ldrb	r2, [r7, #3]
 8009f20:	4611      	mov	r1, r2
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3708      	adds	r7, #8
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	460b      	mov	r3, r1
 8009f3a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d101      	bne.n	8009f4a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009f46:	2303      	movs	r3, #3
 8009f48:	e014      	b.n	8009f74 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	d10d      	bne.n	8009f72 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d007      	beq.n	8009f72 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6a:	78fa      	ldrb	r2, [r7, #3]
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b082      	sub	sp, #8
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d009      	beq.n	8009fc0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	6852      	ldr	r2, [r2, #4]
 8009fb8:	b2d2      	uxtb	r2, r2
 8009fba:	4611      	mov	r1, r2
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	4798      	blx	r3
  }

  return USBD_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b087      	sub	sp, #28
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009fe8:	8a3b      	ldrh	r3, [r7, #16]
 8009fea:	021b      	lsls	r3, r3, #8
 8009fec:	b21a      	sxth	r2, r3
 8009fee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	b21b      	sxth	r3, r3
 8009ff6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009ff8:	89fb      	ldrh	r3, [r7, #14]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	371c      	adds	r7, #28
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
	...

0800a008 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a012:	2300      	movs	r3, #0
 800a014:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a01e:	2b40      	cmp	r3, #64	; 0x40
 800a020:	d005      	beq.n	800a02e <USBD_StdDevReq+0x26>
 800a022:	2b40      	cmp	r3, #64	; 0x40
 800a024:	d853      	bhi.n	800a0ce <USBD_StdDevReq+0xc6>
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00b      	beq.n	800a042 <USBD_StdDevReq+0x3a>
 800a02a:	2b20      	cmp	r3, #32
 800a02c:	d14f      	bne.n	800a0ce <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	6839      	ldr	r1, [r7, #0]
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	4798      	blx	r3
 800a03c:	4603      	mov	r3, r0
 800a03e:	73fb      	strb	r3, [r7, #15]
      break;
 800a040:	e04a      	b.n	800a0d8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	785b      	ldrb	r3, [r3, #1]
 800a046:	2b09      	cmp	r3, #9
 800a048:	d83b      	bhi.n	800a0c2 <USBD_StdDevReq+0xba>
 800a04a:	a201      	add	r2, pc, #4	; (adr r2, 800a050 <USBD_StdDevReq+0x48>)
 800a04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a050:	0800a0a5 	.word	0x0800a0a5
 800a054:	0800a0b9 	.word	0x0800a0b9
 800a058:	0800a0c3 	.word	0x0800a0c3
 800a05c:	0800a0af 	.word	0x0800a0af
 800a060:	0800a0c3 	.word	0x0800a0c3
 800a064:	0800a083 	.word	0x0800a083
 800a068:	0800a079 	.word	0x0800a079
 800a06c:	0800a0c3 	.word	0x0800a0c3
 800a070:	0800a09b 	.word	0x0800a09b
 800a074:	0800a08d 	.word	0x0800a08d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f9de 	bl	800a43c <USBD_GetDescriptor>
          break;
 800a080:	e024      	b.n	800a0cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a082:	6839      	ldr	r1, [r7, #0]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fb43 	bl	800a710 <USBD_SetAddress>
          break;
 800a08a:	e01f      	b.n	800a0cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a08c:	6839      	ldr	r1, [r7, #0]
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 fb82 	bl	800a798 <USBD_SetConfig>
 800a094:	4603      	mov	r3, r0
 800a096:	73fb      	strb	r3, [r7, #15]
          break;
 800a098:	e018      	b.n	800a0cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a09a:	6839      	ldr	r1, [r7, #0]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fc21 	bl	800a8e4 <USBD_GetConfig>
          break;
 800a0a2:	e013      	b.n	800a0cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a0a4:	6839      	ldr	r1, [r7, #0]
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fc52 	bl	800a950 <USBD_GetStatus>
          break;
 800a0ac:	e00e      	b.n	800a0cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a0ae:	6839      	ldr	r1, [r7, #0]
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fc81 	bl	800a9b8 <USBD_SetFeature>
          break;
 800a0b6:	e009      	b.n	800a0cc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a0b8:	6839      	ldr	r1, [r7, #0]
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 fc90 	bl	800a9e0 <USBD_ClrFeature>
          break;
 800a0c0:	e004      	b.n	800a0cc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a0c2:	6839      	ldr	r1, [r7, #0]
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 fce7 	bl	800aa98 <USBD_CtlError>
          break;
 800a0ca:	bf00      	nop
      }
      break;
 800a0cc:	e004      	b.n	800a0d8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a0ce:	6839      	ldr	r1, [r7, #0]
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 fce1 	bl	800aa98 <USBD_CtlError>
      break;
 800a0d6:	bf00      	nop
  }

  return ret;
 800a0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop

0800a0e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0fa:	2b40      	cmp	r3, #64	; 0x40
 800a0fc:	d005      	beq.n	800a10a <USBD_StdItfReq+0x26>
 800a0fe:	2b40      	cmp	r3, #64	; 0x40
 800a100:	d82f      	bhi.n	800a162 <USBD_StdItfReq+0x7e>
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <USBD_StdItfReq+0x26>
 800a106:	2b20      	cmp	r3, #32
 800a108:	d12b      	bne.n	800a162 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a110:	b2db      	uxtb	r3, r3
 800a112:	3b01      	subs	r3, #1
 800a114:	2b02      	cmp	r3, #2
 800a116:	d81d      	bhi.n	800a154 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	889b      	ldrh	r3, [r3, #4]
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d813      	bhi.n	800a14a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	4798      	blx	r3
 800a130:	4603      	mov	r3, r0
 800a132:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	88db      	ldrh	r3, [r3, #6]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d110      	bne.n	800a15e <USBD_StdItfReq+0x7a>
 800a13c:	7bfb      	ldrb	r3, [r7, #15]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10d      	bne.n	800a15e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fd73 	bl	800ac2e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a148:	e009      	b.n	800a15e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a14a:	6839      	ldr	r1, [r7, #0]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 fca3 	bl	800aa98 <USBD_CtlError>
          break;
 800a152:	e004      	b.n	800a15e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a154:	6839      	ldr	r1, [r7, #0]
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fc9e 	bl	800aa98 <USBD_CtlError>
          break;
 800a15c:	e000      	b.n	800a160 <USBD_StdItfReq+0x7c>
          break;
 800a15e:	bf00      	nop
      }
      break;
 800a160:	e004      	b.n	800a16c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a162:	6839      	ldr	r1, [r7, #0]
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 fc97 	bl	800aa98 <USBD_CtlError>
      break;
 800a16a:	bf00      	nop
  }

  return ret;
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b084      	sub	sp, #16
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a180:	2300      	movs	r3, #0
 800a182:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	889b      	ldrh	r3, [r3, #4]
 800a188:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a192:	2b40      	cmp	r3, #64	; 0x40
 800a194:	d007      	beq.n	800a1a6 <USBD_StdEPReq+0x30>
 800a196:	2b40      	cmp	r3, #64	; 0x40
 800a198:	f200 8145 	bhi.w	800a426 <USBD_StdEPReq+0x2b0>
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00c      	beq.n	800a1ba <USBD_StdEPReq+0x44>
 800a1a0:	2b20      	cmp	r3, #32
 800a1a2:	f040 8140 	bne.w	800a426 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	4798      	blx	r3
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a1b8:	e13a      	b.n	800a430 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	785b      	ldrb	r3, [r3, #1]
 800a1be:	2b03      	cmp	r3, #3
 800a1c0:	d007      	beq.n	800a1d2 <USBD_StdEPReq+0x5c>
 800a1c2:	2b03      	cmp	r3, #3
 800a1c4:	f300 8129 	bgt.w	800a41a <USBD_StdEPReq+0x2a4>
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d07f      	beq.n	800a2cc <USBD_StdEPReq+0x156>
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d03c      	beq.n	800a24a <USBD_StdEPReq+0xd4>
 800a1d0:	e123      	b.n	800a41a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	d002      	beq.n	800a1e4 <USBD_StdEPReq+0x6e>
 800a1de:	2b03      	cmp	r3, #3
 800a1e0:	d016      	beq.n	800a210 <USBD_StdEPReq+0x9a>
 800a1e2:	e02c      	b.n	800a23e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1e4:	7bbb      	ldrb	r3, [r7, #14]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00d      	beq.n	800a206 <USBD_StdEPReq+0x90>
 800a1ea:	7bbb      	ldrb	r3, [r7, #14]
 800a1ec:	2b80      	cmp	r3, #128	; 0x80
 800a1ee:	d00a      	beq.n	800a206 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1f0:	7bbb      	ldrb	r3, [r7, #14]
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f001 f95d 	bl	800b4b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1fa:	2180      	movs	r1, #128	; 0x80
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f001 f959 	bl	800b4b4 <USBD_LL_StallEP>
 800a202:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a204:	e020      	b.n	800a248 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 fc45 	bl	800aa98 <USBD_CtlError>
              break;
 800a20e:	e01b      	b.n	800a248 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	885b      	ldrh	r3, [r3, #2]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10e      	bne.n	800a236 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a218:	7bbb      	ldrb	r3, [r7, #14]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00b      	beq.n	800a236 <USBD_StdEPReq+0xc0>
 800a21e:	7bbb      	ldrb	r3, [r7, #14]
 800a220:	2b80      	cmp	r3, #128	; 0x80
 800a222:	d008      	beq.n	800a236 <USBD_StdEPReq+0xc0>
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	88db      	ldrh	r3, [r3, #6]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d104      	bne.n	800a236 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a22c:	7bbb      	ldrb	r3, [r7, #14]
 800a22e:	4619      	mov	r1, r3
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f001 f93f 	bl	800b4b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 fcf9 	bl	800ac2e <USBD_CtlSendStatus>

              break;
 800a23c:	e004      	b.n	800a248 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a23e:	6839      	ldr	r1, [r7, #0]
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 fc29 	bl	800aa98 <USBD_CtlError>
              break;
 800a246:	bf00      	nop
          }
          break;
 800a248:	e0ec      	b.n	800a424 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a250:	b2db      	uxtb	r3, r3
 800a252:	2b02      	cmp	r3, #2
 800a254:	d002      	beq.n	800a25c <USBD_StdEPReq+0xe6>
 800a256:	2b03      	cmp	r3, #3
 800a258:	d016      	beq.n	800a288 <USBD_StdEPReq+0x112>
 800a25a:	e030      	b.n	800a2be <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a25c:	7bbb      	ldrb	r3, [r7, #14]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00d      	beq.n	800a27e <USBD_StdEPReq+0x108>
 800a262:	7bbb      	ldrb	r3, [r7, #14]
 800a264:	2b80      	cmp	r3, #128	; 0x80
 800a266:	d00a      	beq.n	800a27e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a268:	7bbb      	ldrb	r3, [r7, #14]
 800a26a:	4619      	mov	r1, r3
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f001 f921 	bl	800b4b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a272:	2180      	movs	r1, #128	; 0x80
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f001 f91d 	bl	800b4b4 <USBD_LL_StallEP>
 800a27a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a27c:	e025      	b.n	800a2ca <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a27e:	6839      	ldr	r1, [r7, #0]
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 fc09 	bl	800aa98 <USBD_CtlError>
              break;
 800a286:	e020      	b.n	800a2ca <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	885b      	ldrh	r3, [r3, #2]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d11b      	bne.n	800a2c8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a290:	7bbb      	ldrb	r3, [r7, #14]
 800a292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a296:	2b00      	cmp	r3, #0
 800a298:	d004      	beq.n	800a2a4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a29a:	7bbb      	ldrb	r3, [r7, #14]
 800a29c:	4619      	mov	r1, r3
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f001 f927 	bl	800b4f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 fcc2 	bl	800ac2e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	6839      	ldr	r1, [r7, #0]
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	4798      	blx	r3
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a2bc:	e004      	b.n	800a2c8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a2be:	6839      	ldr	r1, [r7, #0]
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 fbe9 	bl	800aa98 <USBD_CtlError>
              break;
 800a2c6:	e000      	b.n	800a2ca <USBD_StdEPReq+0x154>
              break;
 800a2c8:	bf00      	nop
          }
          break;
 800a2ca:	e0ab      	b.n	800a424 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d002      	beq.n	800a2de <USBD_StdEPReq+0x168>
 800a2d8:	2b03      	cmp	r3, #3
 800a2da:	d032      	beq.n	800a342 <USBD_StdEPReq+0x1cc>
 800a2dc:	e097      	b.n	800a40e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2de:	7bbb      	ldrb	r3, [r7, #14]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d007      	beq.n	800a2f4 <USBD_StdEPReq+0x17e>
 800a2e4:	7bbb      	ldrb	r3, [r7, #14]
 800a2e6:	2b80      	cmp	r3, #128	; 0x80
 800a2e8:	d004      	beq.n	800a2f4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a2ea:	6839      	ldr	r1, [r7, #0]
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 fbd3 	bl	800aa98 <USBD_CtlError>
                break;
 800a2f2:	e091      	b.n	800a418 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	da0b      	bge.n	800a314 <USBD_StdEPReq+0x19e>
 800a2fc:	7bbb      	ldrb	r3, [r7, #14]
 800a2fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a302:	4613      	mov	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	3310      	adds	r3, #16
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	4413      	add	r3, r2
 800a310:	3304      	adds	r3, #4
 800a312:	e00b      	b.n	800a32c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a314:	7bbb      	ldrb	r3, [r7, #14]
 800a316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a31a:	4613      	mov	r3, r2
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	4413      	add	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	4413      	add	r3, r2
 800a32a:	3304      	adds	r3, #4
 800a32c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	2200      	movs	r2, #0
 800a332:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	2202      	movs	r2, #2
 800a338:	4619      	mov	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fc1d 	bl	800ab7a <USBD_CtlSendData>
              break;
 800a340:	e06a      	b.n	800a418 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a342:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a346:	2b00      	cmp	r3, #0
 800a348:	da11      	bge.n	800a36e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a34a:	7bbb      	ldrb	r3, [r7, #14]
 800a34c:	f003 020f 	and.w	r2, r3, #15
 800a350:	6879      	ldr	r1, [r7, #4]
 800a352:	4613      	mov	r3, r2
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	4413      	add	r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	440b      	add	r3, r1
 800a35c:	3324      	adds	r3, #36	; 0x24
 800a35e:	881b      	ldrh	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d117      	bne.n	800a394 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 fb96 	bl	800aa98 <USBD_CtlError>
                  break;
 800a36c:	e054      	b.n	800a418 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a36e:	7bbb      	ldrb	r3, [r7, #14]
 800a370:	f003 020f 	and.w	r2, r3, #15
 800a374:	6879      	ldr	r1, [r7, #4]
 800a376:	4613      	mov	r3, r2
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	4413      	add	r3, r2
 800a37c:	009b      	lsls	r3, r3, #2
 800a37e:	440b      	add	r3, r1
 800a380:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a384:	881b      	ldrh	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d104      	bne.n	800a394 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a38a:	6839      	ldr	r1, [r7, #0]
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fb83 	bl	800aa98 <USBD_CtlError>
                  break;
 800a392:	e041      	b.n	800a418 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a394:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	da0b      	bge.n	800a3b4 <USBD_StdEPReq+0x23e>
 800a39c:	7bbb      	ldrb	r3, [r7, #14]
 800a39e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	3310      	adds	r3, #16
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	e00b      	b.n	800a3cc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a3b4:	7bbb      	ldrb	r3, [r7, #14]
 800a3b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	4413      	add	r3, r2
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a3ce:	7bbb      	ldrb	r3, [r7, #14]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d002      	beq.n	800a3da <USBD_StdEPReq+0x264>
 800a3d4:	7bbb      	ldrb	r3, [r7, #14]
 800a3d6:	2b80      	cmp	r3, #128	; 0x80
 800a3d8:	d103      	bne.n	800a3e2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	601a      	str	r2, [r3, #0]
 800a3e0:	e00e      	b.n	800a400 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a3e2:	7bbb      	ldrb	r3, [r7, #14]
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f001 f8a2 	bl	800b530 <USBD_LL_IsStallEP>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d003      	beq.n	800a3fa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	601a      	str	r2, [r3, #0]
 800a3f8:	e002      	b.n	800a400 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	2202      	movs	r2, #2
 800a404:	4619      	mov	r1, r3
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 fbb7 	bl	800ab7a <USBD_CtlSendData>
              break;
 800a40c:	e004      	b.n	800a418 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a40e:	6839      	ldr	r1, [r7, #0]
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 fb41 	bl	800aa98 <USBD_CtlError>
              break;
 800a416:	bf00      	nop
          }
          break;
 800a418:	e004      	b.n	800a424 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a41a:	6839      	ldr	r1, [r7, #0]
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 fb3b 	bl	800aa98 <USBD_CtlError>
          break;
 800a422:	bf00      	nop
      }
      break;
 800a424:	e004      	b.n	800a430 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a426:	6839      	ldr	r1, [r7, #0]
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fb35 	bl	800aa98 <USBD_CtlError>
      break;
 800a42e:	bf00      	nop
  }

  return ret;
 800a430:	7bfb      	ldrb	r3, [r7, #15]
}
 800a432:	4618      	mov	r0, r3
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
	...

0800a43c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a446:	2300      	movs	r3, #0
 800a448:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a44a:	2300      	movs	r3, #0
 800a44c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a44e:	2300      	movs	r3, #0
 800a450:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	885b      	ldrh	r3, [r3, #2]
 800a456:	0a1b      	lsrs	r3, r3, #8
 800a458:	b29b      	uxth	r3, r3
 800a45a:	3b01      	subs	r3, #1
 800a45c:	2b06      	cmp	r3, #6
 800a45e:	f200 8128 	bhi.w	800a6b2 <USBD_GetDescriptor+0x276>
 800a462:	a201      	add	r2, pc, #4	; (adr r2, 800a468 <USBD_GetDescriptor+0x2c>)
 800a464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a468:	0800a485 	.word	0x0800a485
 800a46c:	0800a49d 	.word	0x0800a49d
 800a470:	0800a4dd 	.word	0x0800a4dd
 800a474:	0800a6b3 	.word	0x0800a6b3
 800a478:	0800a6b3 	.word	0x0800a6b3
 800a47c:	0800a653 	.word	0x0800a653
 800a480:	0800a67f 	.word	0x0800a67f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	7c12      	ldrb	r2, [r2, #16]
 800a490:	f107 0108 	add.w	r1, r7, #8
 800a494:	4610      	mov	r0, r2
 800a496:	4798      	blx	r3
 800a498:	60f8      	str	r0, [r7, #12]
      break;
 800a49a:	e112      	b.n	800a6c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	7c1b      	ldrb	r3, [r3, #16]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10d      	bne.n	800a4c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ac:	f107 0208 	add.w	r2, r7, #8
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	4798      	blx	r3
 800a4b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	2202      	movs	r2, #2
 800a4bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a4be:	e100      	b.n	800a6c2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c8:	f107 0208 	add.w	r2, r7, #8
 800a4cc:	4610      	mov	r0, r2
 800a4ce:	4798      	blx	r3
 800a4d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	701a      	strb	r2, [r3, #0]
      break;
 800a4da:	e0f2      	b.n	800a6c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	885b      	ldrh	r3, [r3, #2]
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b05      	cmp	r3, #5
 800a4e4:	f200 80ac 	bhi.w	800a640 <USBD_GetDescriptor+0x204>
 800a4e8:	a201      	add	r2, pc, #4	; (adr r2, 800a4f0 <USBD_GetDescriptor+0xb4>)
 800a4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ee:	bf00      	nop
 800a4f0:	0800a509 	.word	0x0800a509
 800a4f4:	0800a53d 	.word	0x0800a53d
 800a4f8:	0800a571 	.word	0x0800a571
 800a4fc:	0800a5a5 	.word	0x0800a5a5
 800a500:	0800a5d9 	.word	0x0800a5d9
 800a504:	0800a60d 	.word	0x0800a60d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00b      	beq.n	800a52c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	7c12      	ldrb	r2, [r2, #16]
 800a520:	f107 0108 	add.w	r1, r7, #8
 800a524:	4610      	mov	r0, r2
 800a526:	4798      	blx	r3
 800a528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a52a:	e091      	b.n	800a650 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a52c:	6839      	ldr	r1, [r7, #0]
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fab2 	bl	800aa98 <USBD_CtlError>
            err++;
 800a534:	7afb      	ldrb	r3, [r7, #11]
 800a536:	3301      	adds	r3, #1
 800a538:	72fb      	strb	r3, [r7, #11]
          break;
 800a53a:	e089      	b.n	800a650 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d00b      	beq.n	800a560 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	7c12      	ldrb	r2, [r2, #16]
 800a554:	f107 0108 	add.w	r1, r7, #8
 800a558:	4610      	mov	r0, r2
 800a55a:	4798      	blx	r3
 800a55c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a55e:	e077      	b.n	800a650 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a560:	6839      	ldr	r1, [r7, #0]
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fa98 	bl	800aa98 <USBD_CtlError>
            err++;
 800a568:	7afb      	ldrb	r3, [r7, #11]
 800a56a:	3301      	adds	r3, #1
 800a56c:	72fb      	strb	r3, [r7, #11]
          break;
 800a56e:	e06f      	b.n	800a650 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00b      	beq.n	800a594 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	7c12      	ldrb	r2, [r2, #16]
 800a588:	f107 0108 	add.w	r1, r7, #8
 800a58c:	4610      	mov	r0, r2
 800a58e:	4798      	blx	r3
 800a590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a592:	e05d      	b.n	800a650 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a594:	6839      	ldr	r1, [r7, #0]
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fa7e 	bl	800aa98 <USBD_CtlError>
            err++;
 800a59c:	7afb      	ldrb	r3, [r7, #11]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a5a2:	e055      	b.n	800a650 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00b      	beq.n	800a5c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	7c12      	ldrb	r2, [r2, #16]
 800a5bc:	f107 0108 	add.w	r1, r7, #8
 800a5c0:	4610      	mov	r0, r2
 800a5c2:	4798      	blx	r3
 800a5c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5c6:	e043      	b.n	800a650 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5c8:	6839      	ldr	r1, [r7, #0]
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 fa64 	bl	800aa98 <USBD_CtlError>
            err++;
 800a5d0:	7afb      	ldrb	r3, [r7, #11]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a5d6:	e03b      	b.n	800a650 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5de:	695b      	ldr	r3, [r3, #20]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00b      	beq.n	800a5fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5ea:	695b      	ldr	r3, [r3, #20]
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	7c12      	ldrb	r2, [r2, #16]
 800a5f0:	f107 0108 	add.w	r1, r7, #8
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	4798      	blx	r3
 800a5f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5fa:	e029      	b.n	800a650 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5fc:	6839      	ldr	r1, [r7, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fa4a 	bl	800aa98 <USBD_CtlError>
            err++;
 800a604:	7afb      	ldrb	r3, [r7, #11]
 800a606:	3301      	adds	r3, #1
 800a608:	72fb      	strb	r3, [r7, #11]
          break;
 800a60a:	e021      	b.n	800a650 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a612:	699b      	ldr	r3, [r3, #24]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00b      	beq.n	800a630 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a61e:	699b      	ldr	r3, [r3, #24]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	7c12      	ldrb	r2, [r2, #16]
 800a624:	f107 0108 	add.w	r1, r7, #8
 800a628:	4610      	mov	r0, r2
 800a62a:	4798      	blx	r3
 800a62c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a62e:	e00f      	b.n	800a650 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a630:	6839      	ldr	r1, [r7, #0]
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fa30 	bl	800aa98 <USBD_CtlError>
            err++;
 800a638:	7afb      	ldrb	r3, [r7, #11]
 800a63a:	3301      	adds	r3, #1
 800a63c:	72fb      	strb	r3, [r7, #11]
          break;
 800a63e:	e007      	b.n	800a650 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a640:	6839      	ldr	r1, [r7, #0]
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 fa28 	bl	800aa98 <USBD_CtlError>
          err++;
 800a648:	7afb      	ldrb	r3, [r7, #11]
 800a64a:	3301      	adds	r3, #1
 800a64c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a64e:	bf00      	nop
      }
      break;
 800a650:	e037      	b.n	800a6c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	7c1b      	ldrb	r3, [r3, #16]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d109      	bne.n	800a66e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a662:	f107 0208 	add.w	r2, r7, #8
 800a666:	4610      	mov	r0, r2
 800a668:	4798      	blx	r3
 800a66a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a66c:	e029      	b.n	800a6c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a66e:	6839      	ldr	r1, [r7, #0]
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 fa11 	bl	800aa98 <USBD_CtlError>
        err++;
 800a676:	7afb      	ldrb	r3, [r7, #11]
 800a678:	3301      	adds	r3, #1
 800a67a:	72fb      	strb	r3, [r7, #11]
      break;
 800a67c:	e021      	b.n	800a6c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	7c1b      	ldrb	r3, [r3, #16]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d10d      	bne.n	800a6a2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68e:	f107 0208 	add.w	r2, r7, #8
 800a692:	4610      	mov	r0, r2
 800a694:	4798      	blx	r3
 800a696:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	3301      	adds	r3, #1
 800a69c:	2207      	movs	r2, #7
 800a69e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a6a0:	e00f      	b.n	800a6c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a6a2:	6839      	ldr	r1, [r7, #0]
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 f9f7 	bl	800aa98 <USBD_CtlError>
        err++;
 800a6aa:	7afb      	ldrb	r3, [r7, #11]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	72fb      	strb	r3, [r7, #11]
      break;
 800a6b0:	e007      	b.n	800a6c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a6b2:	6839      	ldr	r1, [r7, #0]
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f9ef 	bl	800aa98 <USBD_CtlError>
      err++;
 800a6ba:	7afb      	ldrb	r3, [r7, #11]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	72fb      	strb	r3, [r7, #11]
      break;
 800a6c0:	bf00      	nop
  }

  if (err != 0U)
 800a6c2:	7afb      	ldrb	r3, [r7, #11]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d11e      	bne.n	800a706 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	88db      	ldrh	r3, [r3, #6]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d016      	beq.n	800a6fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a6d0:	893b      	ldrh	r3, [r7, #8]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00e      	beq.n	800a6f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	88da      	ldrh	r2, [r3, #6]
 800a6da:	893b      	ldrh	r3, [r7, #8]
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	bf28      	it	cs
 800a6e0:	4613      	movcs	r3, r2
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a6e6:	893b      	ldrh	r3, [r7, #8]
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	68f9      	ldr	r1, [r7, #12]
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fa44 	bl	800ab7a <USBD_CtlSendData>
 800a6f2:	e009      	b.n	800a708 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a6f4:	6839      	ldr	r1, [r7, #0]
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f9ce 	bl	800aa98 <USBD_CtlError>
 800a6fc:	e004      	b.n	800a708 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 fa95 	bl	800ac2e <USBD_CtlSendStatus>
 800a704:	e000      	b.n	800a708 <USBD_GetDescriptor+0x2cc>
    return;
 800a706:	bf00      	nop
  }
}
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop

0800a710 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	889b      	ldrh	r3, [r3, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d131      	bne.n	800a786 <USBD_SetAddress+0x76>
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	88db      	ldrh	r3, [r3, #6]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d12d      	bne.n	800a786 <USBD_SetAddress+0x76>
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	885b      	ldrh	r3, [r3, #2]
 800a72e:	2b7f      	cmp	r3, #127	; 0x7f
 800a730:	d829      	bhi.n	800a786 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	885b      	ldrh	r3, [r3, #2]
 800a736:	b2db      	uxtb	r3, r3
 800a738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a73c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a744:	b2db      	uxtb	r3, r3
 800a746:	2b03      	cmp	r3, #3
 800a748:	d104      	bne.n	800a754 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a74a:	6839      	ldr	r1, [r7, #0]
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 f9a3 	bl	800aa98 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a752:	e01d      	b.n	800a790 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	7bfa      	ldrb	r2, [r7, #15]
 800a758:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a75c:	7bfb      	ldrb	r3, [r7, #15]
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 ff11 	bl	800b588 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 fa61 	bl	800ac2e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a76c:	7bfb      	ldrb	r3, [r7, #15]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d004      	beq.n	800a77c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2202      	movs	r2, #2
 800a776:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a77a:	e009      	b.n	800a790 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a784:	e004      	b.n	800a790 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a786:	6839      	ldr	r1, [r7, #0]
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f985 	bl	800aa98 <USBD_CtlError>
  }
}
 800a78e:	bf00      	nop
 800a790:	bf00      	nop
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	885b      	ldrh	r3, [r3, #2]
 800a7aa:	b2da      	uxtb	r2, r3
 800a7ac:	4b4c      	ldr	r3, [pc, #304]	; (800a8e0 <USBD_SetConfig+0x148>)
 800a7ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a7b0:	4b4b      	ldr	r3, [pc, #300]	; (800a8e0 <USBD_SetConfig+0x148>)
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d905      	bls.n	800a7c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a7b8:	6839      	ldr	r1, [r7, #0]
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f96c 	bl	800aa98 <USBD_CtlError>
    return USBD_FAIL;
 800a7c0:	2303      	movs	r3, #3
 800a7c2:	e088      	b.n	800a8d6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	2b02      	cmp	r3, #2
 800a7ce:	d002      	beq.n	800a7d6 <USBD_SetConfig+0x3e>
 800a7d0:	2b03      	cmp	r3, #3
 800a7d2:	d025      	beq.n	800a820 <USBD_SetConfig+0x88>
 800a7d4:	e071      	b.n	800a8ba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a7d6:	4b42      	ldr	r3, [pc, #264]	; (800a8e0 <USBD_SetConfig+0x148>)
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d01c      	beq.n	800a818 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a7de:	4b40      	ldr	r3, [pc, #256]	; (800a8e0 <USBD_SetConfig+0x148>)
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a7e8:	4b3d      	ldr	r3, [pc, #244]	; (800a8e0 <USBD_SetConfig+0x148>)
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7ff f948 	bl	8009a84 <USBD_SetClassConfig>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a7f8:	7bfb      	ldrb	r3, [r7, #15]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d004      	beq.n	800a808 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a7fe:	6839      	ldr	r1, [r7, #0]
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f949 	bl	800aa98 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a806:	e065      	b.n	800a8d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 fa10 	bl	800ac2e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2203      	movs	r2, #3
 800a812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a816:	e05d      	b.n	800a8d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 fa08 	bl	800ac2e <USBD_CtlSendStatus>
      break;
 800a81e:	e059      	b.n	800a8d4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a820:	4b2f      	ldr	r3, [pc, #188]	; (800a8e0 <USBD_SetConfig+0x148>)
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d112      	bne.n	800a84e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2202      	movs	r2, #2
 800a82c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a830:	4b2b      	ldr	r3, [pc, #172]	; (800a8e0 <USBD_SetConfig+0x148>)
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	461a      	mov	r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a83a:	4b29      	ldr	r3, [pc, #164]	; (800a8e0 <USBD_SetConfig+0x148>)
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	4619      	mov	r1, r3
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f7ff f93b 	bl	8009abc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f9f1 	bl	800ac2e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a84c:	e042      	b.n	800a8d4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a84e:	4b24      	ldr	r3, [pc, #144]	; (800a8e0 <USBD_SetConfig+0x148>)
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	461a      	mov	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d02a      	beq.n	800a8b2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	b2db      	uxtb	r3, r3
 800a862:	4619      	mov	r1, r3
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f7ff f929 	bl	8009abc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a86a:	4b1d      	ldr	r3, [pc, #116]	; (800a8e0 <USBD_SetConfig+0x148>)
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a874:	4b1a      	ldr	r3, [pc, #104]	; (800a8e0 <USBD_SetConfig+0x148>)
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	4619      	mov	r1, r3
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f7ff f902 	bl	8009a84 <USBD_SetClassConfig>
 800a880:	4603      	mov	r3, r0
 800a882:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a884:	7bfb      	ldrb	r3, [r7, #15]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00f      	beq.n	800a8aa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a88a:	6839      	ldr	r1, [r7, #0]
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 f903 	bl	800aa98 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	b2db      	uxtb	r3, r3
 800a898:	4619      	mov	r1, r3
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f7ff f90e 	bl	8009abc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a8a8:	e014      	b.n	800a8d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 f9bf 	bl	800ac2e <USBD_CtlSendStatus>
      break;
 800a8b0:	e010      	b.n	800a8d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 f9bb 	bl	800ac2e <USBD_CtlSendStatus>
      break;
 800a8b8:	e00c      	b.n	800a8d4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a8ba:	6839      	ldr	r1, [r7, #0]
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 f8eb 	bl	800aa98 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a8c2:	4b07      	ldr	r3, [pc, #28]	; (800a8e0 <USBD_SetConfig+0x148>)
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f7ff f8f7 	bl	8009abc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a8ce:	2303      	movs	r3, #3
 800a8d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a8d2:	bf00      	nop
  }

  return ret;
 800a8d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	20000374 	.word	0x20000374

0800a8e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	88db      	ldrh	r3, [r3, #6]
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d004      	beq.n	800a900 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a8f6:	6839      	ldr	r1, [r7, #0]
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 f8cd 	bl	800aa98 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a8fe:	e023      	b.n	800a948 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a906:	b2db      	uxtb	r3, r3
 800a908:	2b02      	cmp	r3, #2
 800a90a:	dc02      	bgt.n	800a912 <USBD_GetConfig+0x2e>
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	dc03      	bgt.n	800a918 <USBD_GetConfig+0x34>
 800a910:	e015      	b.n	800a93e <USBD_GetConfig+0x5a>
 800a912:	2b03      	cmp	r3, #3
 800a914:	d00b      	beq.n	800a92e <USBD_GetConfig+0x4a>
 800a916:	e012      	b.n	800a93e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	3308      	adds	r3, #8
 800a922:	2201      	movs	r2, #1
 800a924:	4619      	mov	r1, r3
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 f927 	bl	800ab7a <USBD_CtlSendData>
        break;
 800a92c:	e00c      	b.n	800a948 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	3304      	adds	r3, #4
 800a932:	2201      	movs	r2, #1
 800a934:	4619      	mov	r1, r3
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f91f 	bl	800ab7a <USBD_CtlSendData>
        break;
 800a93c:	e004      	b.n	800a948 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a93e:	6839      	ldr	r1, [r7, #0]
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 f8a9 	bl	800aa98 <USBD_CtlError>
        break;
 800a946:	bf00      	nop
}
 800a948:	bf00      	nop
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a960:	b2db      	uxtb	r3, r3
 800a962:	3b01      	subs	r3, #1
 800a964:	2b02      	cmp	r3, #2
 800a966:	d81e      	bhi.n	800a9a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	88db      	ldrh	r3, [r3, #6]
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d004      	beq.n	800a97a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a970:	6839      	ldr	r1, [r7, #0]
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 f890 	bl	800aa98 <USBD_CtlError>
        break;
 800a978:	e01a      	b.n	800a9b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2201      	movs	r2, #1
 800a97e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a986:	2b00      	cmp	r3, #0
 800a988:	d005      	beq.n	800a996 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	f043 0202 	orr.w	r2, r3, #2
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	330c      	adds	r3, #12
 800a99a:	2202      	movs	r2, #2
 800a99c:	4619      	mov	r1, r3
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 f8eb 	bl	800ab7a <USBD_CtlSendData>
      break;
 800a9a4:	e004      	b.n	800a9b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a9a6:	6839      	ldr	r1, [r7, #0]
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 f875 	bl	800aa98 <USBD_CtlError>
      break;
 800a9ae:	bf00      	nop
  }
}
 800a9b0:	bf00      	nop
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	885b      	ldrh	r3, [r3, #2]
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d106      	bne.n	800a9d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 f92b 	bl	800ac2e <USBD_CtlSendStatus>
  }
}
 800a9d8:	bf00      	nop
 800a9da:	3708      	adds	r7, #8
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	2b02      	cmp	r3, #2
 800a9f6:	d80b      	bhi.n	800aa10 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	885b      	ldrh	r3, [r3, #2]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d10c      	bne.n	800aa1a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 f910 	bl	800ac2e <USBD_CtlSendStatus>
      }
      break;
 800aa0e:	e004      	b.n	800aa1a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aa10:	6839      	ldr	r1, [r7, #0]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f840 	bl	800aa98 <USBD_CtlError>
      break;
 800aa18:	e000      	b.n	800aa1c <USBD_ClrFeature+0x3c>
      break;
 800aa1a:	bf00      	nop
  }
}
 800aa1c:	bf00      	nop
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	781a      	ldrb	r2, [r3, #0]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	781a      	ldrb	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f7ff fabb 	bl	8009fca <SWAPBYTE>
 800aa54:	4603      	mov	r3, r0
 800aa56:	461a      	mov	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	3301      	adds	r3, #1
 800aa66:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f7ff faae 	bl	8009fca <SWAPBYTE>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	461a      	mov	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f7ff faa1 	bl	8009fca <SWAPBYTE>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	80da      	strh	r2, [r3, #6]
}
 800aa90:	bf00      	nop
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aaa2:	2180      	movs	r1, #128	; 0x80
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 fd05 	bl	800b4b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aaaa:	2100      	movs	r1, #0
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fd01 	bl	800b4b4 <USBD_LL_StallEP>
}
 800aab2:	bf00      	nop
 800aab4:	3708      	adds	r7, #8
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b086      	sub	sp, #24
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	60f8      	str	r0, [r7, #12]
 800aac2:	60b9      	str	r1, [r7, #8]
 800aac4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aac6:	2300      	movs	r3, #0
 800aac8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d036      	beq.n	800ab3e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aad4:	6938      	ldr	r0, [r7, #16]
 800aad6:	f000 f836 	bl	800ab46 <USBD_GetLen>
 800aada:	4603      	mov	r3, r0
 800aadc:	3301      	adds	r3, #1
 800aade:	b29b      	uxth	r3, r3
 800aae0:	005b      	lsls	r3, r3, #1
 800aae2:	b29a      	uxth	r2, r3
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aae8:	7dfb      	ldrb	r3, [r7, #23]
 800aaea:	68ba      	ldr	r2, [r7, #8]
 800aaec:	4413      	add	r3, r2
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	7812      	ldrb	r2, [r2, #0]
 800aaf2:	701a      	strb	r2, [r3, #0]
  idx++;
 800aaf4:	7dfb      	ldrb	r3, [r7, #23]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aafa:	7dfb      	ldrb	r3, [r7, #23]
 800aafc:	68ba      	ldr	r2, [r7, #8]
 800aafe:	4413      	add	r3, r2
 800ab00:	2203      	movs	r2, #3
 800ab02:	701a      	strb	r2, [r3, #0]
  idx++;
 800ab04:	7dfb      	ldrb	r3, [r7, #23]
 800ab06:	3301      	adds	r3, #1
 800ab08:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ab0a:	e013      	b.n	800ab34 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ab0c:	7dfb      	ldrb	r3, [r7, #23]
 800ab0e:	68ba      	ldr	r2, [r7, #8]
 800ab10:	4413      	add	r3, r2
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	7812      	ldrb	r2, [r2, #0]
 800ab16:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	613b      	str	r3, [r7, #16]
    idx++;
 800ab1e:	7dfb      	ldrb	r3, [r7, #23]
 800ab20:	3301      	adds	r3, #1
 800ab22:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ab24:	7dfb      	ldrb	r3, [r7, #23]
 800ab26:	68ba      	ldr	r2, [r7, #8]
 800ab28:	4413      	add	r3, r2
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	701a      	strb	r2, [r3, #0]
    idx++;
 800ab2e:	7dfb      	ldrb	r3, [r7, #23]
 800ab30:	3301      	adds	r3, #1
 800ab32:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1e7      	bne.n	800ab0c <USBD_GetString+0x52>
 800ab3c:	e000      	b.n	800ab40 <USBD_GetString+0x86>
    return;
 800ab3e:	bf00      	nop
  }
}
 800ab40:	3718      	adds	r7, #24
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ab46:	b480      	push	{r7}
 800ab48:	b085      	sub	sp, #20
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ab56:	e005      	b.n	800ab64 <USBD_GetLen+0x1e>
  {
    len++;
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	3301      	adds	r3, #1
 800ab62:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1f5      	bne.n	800ab58 <USBD_GetLen+0x12>
  }

  return len;
 800ab6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3714      	adds	r7, #20
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr

0800ab7a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b084      	sub	sp, #16
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	60f8      	str	r0, [r7, #12]
 800ab82:	60b9      	str	r1, [r7, #8]
 800ab84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2202      	movs	r2, #2
 800ab8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	68ba      	ldr	r2, [r7, #8]
 800ab9e:	2100      	movs	r1, #0
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f000 fd10 	bl	800b5c6 <USBD_LL_Transmit>

  return USBD_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	2100      	movs	r1, #0
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f000 fcff 	bl	800b5c6 <USBD_LL_Transmit>

  return USBD_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b084      	sub	sp, #16
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	60f8      	str	r0, [r7, #12]
 800abda:	60b9      	str	r1, [r7, #8]
 800abdc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2203      	movs	r2, #3
 800abe2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	68ba      	ldr	r2, [r7, #8]
 800abfa:	2100      	movs	r1, #0
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f000 fd03 	bl	800b608 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f000 fcf2 	bl	800b608 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b082      	sub	sp, #8
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2204      	movs	r2, #4
 800ac3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ac3e:	2300      	movs	r3, #0
 800ac40:	2200      	movs	r2, #0
 800ac42:	2100      	movs	r1, #0
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 fcbe 	bl	800b5c6 <USBD_LL_Transmit>

  return USBD_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2205      	movs	r2, #5
 800ac60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac64:	2300      	movs	r3, #0
 800ac66:	2200      	movs	r2, #0
 800ac68:	2100      	movs	r1, #0
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fccc 	bl	800b608 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac70:	2300      	movs	r3, #0
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
	...

0800ac7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ac80:	2200      	movs	r2, #0
 800ac82:	4912      	ldr	r1, [pc, #72]	; (800accc <MX_USB_DEVICE_Init+0x50>)
 800ac84:	4812      	ldr	r0, [pc, #72]	; (800acd0 <MX_USB_DEVICE_Init+0x54>)
 800ac86:	f7fe fe8f 	bl	80099a8 <USBD_Init>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d001      	beq.n	800ac94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ac90:	f7f7 f98c 	bl	8001fac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ac94:	490f      	ldr	r1, [pc, #60]	; (800acd4 <MX_USB_DEVICE_Init+0x58>)
 800ac96:	480e      	ldr	r0, [pc, #56]	; (800acd0 <MX_USB_DEVICE_Init+0x54>)
 800ac98:	f7fe feb6 	bl	8009a08 <USBD_RegisterClass>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d001      	beq.n	800aca6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aca2:	f7f7 f983 	bl	8001fac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aca6:	490c      	ldr	r1, [pc, #48]	; (800acd8 <MX_USB_DEVICE_Init+0x5c>)
 800aca8:	4809      	ldr	r0, [pc, #36]	; (800acd0 <MX_USB_DEVICE_Init+0x54>)
 800acaa:	f7fe fdd7 	bl	800985c <USBD_CDC_RegisterInterface>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d001      	beq.n	800acb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800acb4:	f7f7 f97a 	bl	8001fac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800acb8:	4805      	ldr	r0, [pc, #20]	; (800acd0 <MX_USB_DEVICE_Init+0x54>)
 800acba:	f7fe fecc 	bl	8009a56 <USBD_Start>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800acc4:	f7f7 f972 	bl	8001fac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800acc8:	bf00      	nop
 800acca:	bd80      	pop	{r7, pc}
 800accc:	20000134 	.word	0x20000134
 800acd0:	200007a0 	.word	0x200007a0
 800acd4:	2000001c 	.word	0x2000001c
 800acd8:	20000120 	.word	0x20000120

0800acdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ace0:	2200      	movs	r2, #0
 800ace2:	4905      	ldr	r1, [pc, #20]	; (800acf8 <CDC_Init_FS+0x1c>)
 800ace4:	4805      	ldr	r0, [pc, #20]	; (800acfc <CDC_Init_FS+0x20>)
 800ace6:	f7fe fdce 	bl	8009886 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800acea:	4905      	ldr	r1, [pc, #20]	; (800ad00 <CDC_Init_FS+0x24>)
 800acec:	4803      	ldr	r0, [pc, #12]	; (800acfc <CDC_Init_FS+0x20>)
 800acee:	f7fe fde8 	bl	80098c2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800acf2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	20001270 	.word	0x20001270
 800acfc:	200007a0 	.word	0x200007a0
 800ad00:	20000a70 	.word	0x20000a70

0800ad04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ad04:	b480      	push	{r7}
 800ad06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ad08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	6039      	str	r1, [r7, #0]
 800ad1e:	71fb      	strb	r3, [r7, #7]
 800ad20:	4613      	mov	r3, r2
 800ad22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ad24:	79fb      	ldrb	r3, [r7, #7]
 800ad26:	2b23      	cmp	r3, #35	; 0x23
 800ad28:	d84a      	bhi.n	800adc0 <CDC_Control_FS+0xac>
 800ad2a:	a201      	add	r2, pc, #4	; (adr r2, 800ad30 <CDC_Control_FS+0x1c>)
 800ad2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad30:	0800adc1 	.word	0x0800adc1
 800ad34:	0800adc1 	.word	0x0800adc1
 800ad38:	0800adc1 	.word	0x0800adc1
 800ad3c:	0800adc1 	.word	0x0800adc1
 800ad40:	0800adc1 	.word	0x0800adc1
 800ad44:	0800adc1 	.word	0x0800adc1
 800ad48:	0800adc1 	.word	0x0800adc1
 800ad4c:	0800adc1 	.word	0x0800adc1
 800ad50:	0800adc1 	.word	0x0800adc1
 800ad54:	0800adc1 	.word	0x0800adc1
 800ad58:	0800adc1 	.word	0x0800adc1
 800ad5c:	0800adc1 	.word	0x0800adc1
 800ad60:	0800adc1 	.word	0x0800adc1
 800ad64:	0800adc1 	.word	0x0800adc1
 800ad68:	0800adc1 	.word	0x0800adc1
 800ad6c:	0800adc1 	.word	0x0800adc1
 800ad70:	0800adc1 	.word	0x0800adc1
 800ad74:	0800adc1 	.word	0x0800adc1
 800ad78:	0800adc1 	.word	0x0800adc1
 800ad7c:	0800adc1 	.word	0x0800adc1
 800ad80:	0800adc1 	.word	0x0800adc1
 800ad84:	0800adc1 	.word	0x0800adc1
 800ad88:	0800adc1 	.word	0x0800adc1
 800ad8c:	0800adc1 	.word	0x0800adc1
 800ad90:	0800adc1 	.word	0x0800adc1
 800ad94:	0800adc1 	.word	0x0800adc1
 800ad98:	0800adc1 	.word	0x0800adc1
 800ad9c:	0800adc1 	.word	0x0800adc1
 800ada0:	0800adc1 	.word	0x0800adc1
 800ada4:	0800adc1 	.word	0x0800adc1
 800ada8:	0800adc1 	.word	0x0800adc1
 800adac:	0800adc1 	.word	0x0800adc1
 800adb0:	0800adc1 	.word	0x0800adc1
 800adb4:	0800adc1 	.word	0x0800adc1
 800adb8:	0800adc1 	.word	0x0800adc1
 800adbc:	0800adc1 	.word	0x0800adc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800adc0:	bf00      	nop
  }

  return (USBD_OK);
 800adc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800adda:	6879      	ldr	r1, [r7, #4]
 800addc:	480f      	ldr	r0, [pc, #60]	; (800ae1c <CDC_Receive_FS+0x4c>)
 800adde:	f7fe fd70 	bl	80098c2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ade2:	480e      	ldr	r0, [pc, #56]	; (800ae1c <CDC_Receive_FS+0x4c>)
 800ade4:	f7fe fdb6 	bl	8009954 <USBD_CDC_ReceivePacket>
  if(Buf[0] == '1'){
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	2b31      	cmp	r3, #49	; 0x31
 800adee:	d106      	bne.n	800adfe <CDC_Receive_FS+0x2e>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800adf0:	2201      	movs	r2, #1
 800adf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800adf6:	480a      	ldr	r0, [pc, #40]	; (800ae20 <CDC_Receive_FS+0x50>)
 800adf8:	f7f8 fc72 	bl	80036e0 <HAL_GPIO_WritePin>
 800adfc:	e009      	b.n	800ae12 <CDC_Receive_FS+0x42>
  }
  else if(Buf[0] == '0'){
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	2b30      	cmp	r3, #48	; 0x30
 800ae04:	d105      	bne.n	800ae12 <CDC_Receive_FS+0x42>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800ae06:	2200      	movs	r2, #0
 800ae08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ae0c:	4804      	ldr	r0, [pc, #16]	; (800ae20 <CDC_Receive_FS+0x50>)
 800ae0e:	f7f8 fc67 	bl	80036e0 <HAL_GPIO_WritePin>
  }
  return (USBD_OK);
 800ae12:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	200007a0 	.word	0x200007a0
 800ae20:	40020c00 	.word	0x40020c00

0800ae24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ae30:	2300      	movs	r3, #0
 800ae32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ae34:	4b0d      	ldr	r3, [pc, #52]	; (800ae6c <CDC_Transmit_FS+0x48>)
 800ae36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ae46:	2301      	movs	r3, #1
 800ae48:	e00b      	b.n	800ae62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ae4a:	887b      	ldrh	r3, [r7, #2]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	6879      	ldr	r1, [r7, #4]
 800ae50:	4806      	ldr	r0, [pc, #24]	; (800ae6c <CDC_Transmit_FS+0x48>)
 800ae52:	f7fe fd18 	bl	8009886 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ae56:	4805      	ldr	r0, [pc, #20]	; (800ae6c <CDC_Transmit_FS+0x48>)
 800ae58:	f7fe fd4c 	bl	80098f4 <USBD_CDC_TransmitPacket>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	200007a0 	.word	0x200007a0

0800ae70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b087      	sub	sp, #28
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ae82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	371c      	adds	r7, #28
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
	...

0800ae94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	6039      	str	r1, [r7, #0]
 800ae9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	2212      	movs	r2, #18
 800aea4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aea6:	4b03      	ldr	r3, [pc, #12]	; (800aeb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr
 800aeb4:	20000150 	.word	0x20000150

0800aeb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	4603      	mov	r3, r0
 800aec0:	6039      	str	r1, [r7, #0]
 800aec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	2204      	movs	r2, #4
 800aec8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aeca:	4b03      	ldr	r3, [pc, #12]	; (800aed8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aecc:	4618      	mov	r0, r3
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr
 800aed8:	20000164 	.word	0x20000164

0800aedc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	4603      	mov	r3, r0
 800aee4:	6039      	str	r1, [r7, #0]
 800aee6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aee8:	79fb      	ldrb	r3, [r7, #7]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d105      	bne.n	800aefa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	4907      	ldr	r1, [pc, #28]	; (800af10 <USBD_FS_ProductStrDescriptor+0x34>)
 800aef2:	4808      	ldr	r0, [pc, #32]	; (800af14 <USBD_FS_ProductStrDescriptor+0x38>)
 800aef4:	f7ff fde1 	bl	800aaba <USBD_GetString>
 800aef8:	e004      	b.n	800af04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	4904      	ldr	r1, [pc, #16]	; (800af10 <USBD_FS_ProductStrDescriptor+0x34>)
 800aefe:	4805      	ldr	r0, [pc, #20]	; (800af14 <USBD_FS_ProductStrDescriptor+0x38>)
 800af00:	f7ff fddb 	bl	800aaba <USBD_GetString>
  }
  return USBD_StrDesc;
 800af04:	4b02      	ldr	r3, [pc, #8]	; (800af10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800af06:	4618      	mov	r0, r3
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	20001a70 	.word	0x20001a70
 800af14:	0800e5b4 	.word	0x0800e5b4

0800af18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	4603      	mov	r3, r0
 800af20:	6039      	str	r1, [r7, #0]
 800af22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800af24:	683a      	ldr	r2, [r7, #0]
 800af26:	4904      	ldr	r1, [pc, #16]	; (800af38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800af28:	4804      	ldr	r0, [pc, #16]	; (800af3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800af2a:	f7ff fdc6 	bl	800aaba <USBD_GetString>
  return USBD_StrDesc;
 800af2e:	4b02      	ldr	r3, [pc, #8]	; (800af38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800af30:	4618      	mov	r0, r3
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	20001a70 	.word	0x20001a70
 800af3c:	0800e5cc 	.word	0x0800e5cc

0800af40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	4603      	mov	r3, r0
 800af48:	6039      	str	r1, [r7, #0]
 800af4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	221a      	movs	r2, #26
 800af50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800af52:	f000 f843 	bl	800afdc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800af56:	4b02      	ldr	r3, [pc, #8]	; (800af60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	20000168 	.word	0x20000168

0800af64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	4603      	mov	r3, r0
 800af6c:	6039      	str	r1, [r7, #0]
 800af6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800af70:	79fb      	ldrb	r3, [r7, #7]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d105      	bne.n	800af82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	4907      	ldr	r1, [pc, #28]	; (800af98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800af7a:	4808      	ldr	r0, [pc, #32]	; (800af9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800af7c:	f7ff fd9d 	bl	800aaba <USBD_GetString>
 800af80:	e004      	b.n	800af8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	4904      	ldr	r1, [pc, #16]	; (800af98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800af86:	4805      	ldr	r0, [pc, #20]	; (800af9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800af88:	f7ff fd97 	bl	800aaba <USBD_GetString>
  }
  return USBD_StrDesc;
 800af8c:	4b02      	ldr	r3, [pc, #8]	; (800af98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3708      	adds	r7, #8
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	20001a70 	.word	0x20001a70
 800af9c:	0800e5e0 	.word	0x0800e5e0

0800afa0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	4603      	mov	r3, r0
 800afa8:	6039      	str	r1, [r7, #0]
 800afaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800afac:	79fb      	ldrb	r3, [r7, #7]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d105      	bne.n	800afbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	4907      	ldr	r1, [pc, #28]	; (800afd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800afb6:	4808      	ldr	r0, [pc, #32]	; (800afd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800afb8:	f7ff fd7f 	bl	800aaba <USBD_GetString>
 800afbc:	e004      	b.n	800afc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800afbe:	683a      	ldr	r2, [r7, #0]
 800afc0:	4904      	ldr	r1, [pc, #16]	; (800afd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800afc2:	4805      	ldr	r0, [pc, #20]	; (800afd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800afc4:	f7ff fd79 	bl	800aaba <USBD_GetString>
  }
  return USBD_StrDesc;
 800afc8:	4b02      	ldr	r3, [pc, #8]	; (800afd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	20001a70 	.word	0x20001a70
 800afd8:	0800e5ec 	.word	0x0800e5ec

0800afdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800afe2:	4b0f      	ldr	r3, [pc, #60]	; (800b020 <Get_SerialNum+0x44>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800afe8:	4b0e      	ldr	r3, [pc, #56]	; (800b024 <Get_SerialNum+0x48>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800afee:	4b0e      	ldr	r3, [pc, #56]	; (800b028 <Get_SerialNum+0x4c>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	4413      	add	r3, r2
 800affa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d009      	beq.n	800b016 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b002:	2208      	movs	r2, #8
 800b004:	4909      	ldr	r1, [pc, #36]	; (800b02c <Get_SerialNum+0x50>)
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f000 f814 	bl	800b034 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b00c:	2204      	movs	r2, #4
 800b00e:	4908      	ldr	r1, [pc, #32]	; (800b030 <Get_SerialNum+0x54>)
 800b010:	68b8      	ldr	r0, [r7, #8]
 800b012:	f000 f80f 	bl	800b034 <IntToUnicode>
  }
}
 800b016:	bf00      	nop
 800b018:	3710      	adds	r7, #16
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	1fff7a10 	.word	0x1fff7a10
 800b024:	1fff7a14 	.word	0x1fff7a14
 800b028:	1fff7a18 	.word	0x1fff7a18
 800b02c:	2000016a 	.word	0x2000016a
 800b030:	2000017a 	.word	0x2000017a

0800b034 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b034:	b480      	push	{r7}
 800b036:	b087      	sub	sp, #28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	4613      	mov	r3, r2
 800b040:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b042:	2300      	movs	r3, #0
 800b044:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b046:	2300      	movs	r3, #0
 800b048:	75fb      	strb	r3, [r7, #23]
 800b04a:	e027      	b.n	800b09c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	0f1b      	lsrs	r3, r3, #28
 800b050:	2b09      	cmp	r3, #9
 800b052:	d80b      	bhi.n	800b06c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	0f1b      	lsrs	r3, r3, #28
 800b058:	b2da      	uxtb	r2, r3
 800b05a:	7dfb      	ldrb	r3, [r7, #23]
 800b05c:	005b      	lsls	r3, r3, #1
 800b05e:	4619      	mov	r1, r3
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	440b      	add	r3, r1
 800b064:	3230      	adds	r2, #48	; 0x30
 800b066:	b2d2      	uxtb	r2, r2
 800b068:	701a      	strb	r2, [r3, #0]
 800b06a:	e00a      	b.n	800b082 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	0f1b      	lsrs	r3, r3, #28
 800b070:	b2da      	uxtb	r2, r3
 800b072:	7dfb      	ldrb	r3, [r7, #23]
 800b074:	005b      	lsls	r3, r3, #1
 800b076:	4619      	mov	r1, r3
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	440b      	add	r3, r1
 800b07c:	3237      	adds	r2, #55	; 0x37
 800b07e:	b2d2      	uxtb	r2, r2
 800b080:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	011b      	lsls	r3, r3, #4
 800b086:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b088:	7dfb      	ldrb	r3, [r7, #23]
 800b08a:	005b      	lsls	r3, r3, #1
 800b08c:	3301      	adds	r3, #1
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	4413      	add	r3, r2
 800b092:	2200      	movs	r2, #0
 800b094:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b096:	7dfb      	ldrb	r3, [r7, #23]
 800b098:	3301      	adds	r3, #1
 800b09a:	75fb      	strb	r3, [r7, #23]
 800b09c:	7dfa      	ldrb	r2, [r7, #23]
 800b09e:	79fb      	ldrb	r3, [r7, #7]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d3d3      	bcc.n	800b04c <IntToUnicode+0x18>
  }
}
 800b0a4:	bf00      	nop
 800b0a6:	bf00      	nop
 800b0a8:	371c      	adds	r7, #28
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
	...

0800b0b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b08a      	sub	sp, #40	; 0x28
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0bc:	f107 0314 	add.w	r3, r7, #20
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	601a      	str	r2, [r3, #0]
 800b0c4:	605a      	str	r2, [r3, #4]
 800b0c6:	609a      	str	r2, [r3, #8]
 800b0c8:	60da      	str	r2, [r3, #12]
 800b0ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0d4:	d147      	bne.n	800b166 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	613b      	str	r3, [r7, #16]
 800b0da:	4b25      	ldr	r3, [pc, #148]	; (800b170 <HAL_PCD_MspInit+0xbc>)
 800b0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0de:	4a24      	ldr	r2, [pc, #144]	; (800b170 <HAL_PCD_MspInit+0xbc>)
 800b0e0:	f043 0301 	orr.w	r3, r3, #1
 800b0e4:	6313      	str	r3, [r2, #48]	; 0x30
 800b0e6:	4b22      	ldr	r3, [pc, #136]	; (800b170 <HAL_PCD_MspInit+0xbc>)
 800b0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ea:	f003 0301 	and.w	r3, r3, #1
 800b0ee:	613b      	str	r3, [r7, #16]
 800b0f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b0f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b100:	f107 0314 	add.w	r3, r7, #20
 800b104:	4619      	mov	r1, r3
 800b106:	481b      	ldr	r0, [pc, #108]	; (800b174 <HAL_PCD_MspInit+0xc0>)
 800b108:	f7f8 f94e 	bl	80033a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b10c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b112:	2302      	movs	r3, #2
 800b114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b116:	2300      	movs	r3, #0
 800b118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b11a:	2300      	movs	r3, #0
 800b11c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b11e:	230a      	movs	r3, #10
 800b120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b122:	f107 0314 	add.w	r3, r7, #20
 800b126:	4619      	mov	r1, r3
 800b128:	4812      	ldr	r0, [pc, #72]	; (800b174 <HAL_PCD_MspInit+0xc0>)
 800b12a:	f7f8 f93d 	bl	80033a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b12e:	4b10      	ldr	r3, [pc, #64]	; (800b170 <HAL_PCD_MspInit+0xbc>)
 800b130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b132:	4a0f      	ldr	r2, [pc, #60]	; (800b170 <HAL_PCD_MspInit+0xbc>)
 800b134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b138:	6353      	str	r3, [r2, #52]	; 0x34
 800b13a:	2300      	movs	r3, #0
 800b13c:	60fb      	str	r3, [r7, #12]
 800b13e:	4b0c      	ldr	r3, [pc, #48]	; (800b170 <HAL_PCD_MspInit+0xbc>)
 800b140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b142:	4a0b      	ldr	r2, [pc, #44]	; (800b170 <HAL_PCD_MspInit+0xbc>)
 800b144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b148:	6453      	str	r3, [r2, #68]	; 0x44
 800b14a:	4b09      	ldr	r3, [pc, #36]	; (800b170 <HAL_PCD_MspInit+0xbc>)
 800b14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b14e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b156:	2200      	movs	r2, #0
 800b158:	2100      	movs	r1, #0
 800b15a:	2043      	movs	r0, #67	; 0x43
 800b15c:	f7f8 f85b 	bl	8003216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b160:	2043      	movs	r0, #67	; 0x43
 800b162:	f7f8 f874 	bl	800324e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b166:	bf00      	nop
 800b168:	3728      	adds	r7, #40	; 0x28
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	40023800 	.word	0x40023800
 800b174:	40020000 	.word	0x40020000

0800b178 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b18c:	4619      	mov	r1, r3
 800b18e:	4610      	mov	r0, r2
 800b190:	f7fe fcac 	bl	8009aec <USBD_LL_SetupStage>
}
 800b194:	bf00      	nop
 800b196:	3708      	adds	r7, #8
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b1ae:	78fa      	ldrb	r2, [r7, #3]
 800b1b0:	6879      	ldr	r1, [r7, #4]
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	00db      	lsls	r3, r3, #3
 800b1b6:	1a9b      	subs	r3, r3, r2
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	440b      	add	r3, r1
 800b1bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	78fb      	ldrb	r3, [r7, #3]
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	f7fe fce6 	bl	8009b96 <USBD_LL_DataOutStage>
}
 800b1ca:	bf00      	nop
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b082      	sub	sp, #8
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	460b      	mov	r3, r1
 800b1dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b1e4:	78fa      	ldrb	r2, [r7, #3]
 800b1e6:	6879      	ldr	r1, [r7, #4]
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	00db      	lsls	r3, r3, #3
 800b1ec:	1a9b      	subs	r3, r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	440b      	add	r3, r1
 800b1f2:	3348      	adds	r3, #72	; 0x48
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	78fb      	ldrb	r3, [r7, #3]
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	f7fe fd2f 	bl	8009c5c <USBD_LL_DataInStage>
}
 800b1fe:	bf00      	nop
 800b200:	3708      	adds	r7, #8
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b206:	b580      	push	{r7, lr}
 800b208:	b082      	sub	sp, #8
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b214:	4618      	mov	r0, r3
 800b216:	f7fe fe43 	bl	8009ea0 <USBD_LL_SOF>
}
 800b21a:	bf00      	nop
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b084      	sub	sp, #16
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b22a:	2301      	movs	r3, #1
 800b22c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d102      	bne.n	800b23c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b236:	2300      	movs	r3, #0
 800b238:	73fb      	strb	r3, [r7, #15]
 800b23a:	e008      	b.n	800b24e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	2b02      	cmp	r3, #2
 800b242:	d102      	bne.n	800b24a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b244:	2301      	movs	r3, #1
 800b246:	73fb      	strb	r3, [r7, #15]
 800b248:	e001      	b.n	800b24e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b24a:	f7f6 feaf 	bl	8001fac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b254:	7bfa      	ldrb	r2, [r7, #15]
 800b256:	4611      	mov	r1, r2
 800b258:	4618      	mov	r0, r3
 800b25a:	f7fe fde3 	bl	8009e24 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b264:	4618      	mov	r0, r3
 800b266:	f7fe fd8f 	bl	8009d88 <USBD_LL_Reset>
}
 800b26a:	bf00      	nop
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
	...

0800b274 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b282:	4618      	mov	r0, r3
 800b284:	f7fe fdde 	bl	8009e44 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	6812      	ldr	r2, [r2, #0]
 800b296:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b29a:	f043 0301 	orr.w	r3, r3, #1
 800b29e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6a1b      	ldr	r3, [r3, #32]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d005      	beq.n	800b2b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b2a8:	4b04      	ldr	r3, [pc, #16]	; (800b2bc <HAL_PCD_SuspendCallback+0x48>)
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	4a03      	ldr	r2, [pc, #12]	; (800b2bc <HAL_PCD_SuspendCallback+0x48>)
 800b2ae:	f043 0306 	orr.w	r3, r3, #6
 800b2b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b2b4:	bf00      	nop
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	e000ed00 	.word	0xe000ed00

0800b2c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7fe fdce 	bl	8009e70 <USBD_LL_Resume>
}
 800b2d4:	bf00      	nop
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b2ee:	78fa      	ldrb	r2, [r7, #3]
 800b2f0:	4611      	mov	r1, r2
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fe fe1c 	bl	8009f30 <USBD_LL_IsoOUTIncomplete>
}
 800b2f8:	bf00      	nop
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	460b      	mov	r3, r1
 800b30a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b312:	78fa      	ldrb	r2, [r7, #3]
 800b314:	4611      	mov	r1, r2
 800b316:	4618      	mov	r0, r3
 800b318:	f7fe fde4 	bl	8009ee4 <USBD_LL_IsoINIncomplete>
}
 800b31c:	bf00      	nop
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b332:	4618      	mov	r0, r3
 800b334:	f7fe fe22 	bl	8009f7c <USBD_LL_DevConnected>
}
 800b338:	bf00      	nop
 800b33a:	3708      	adds	r7, #8
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b34e:	4618      	mov	r0, r3
 800b350:	f7fe fe1f 	bl	8009f92 <USBD_LL_DevDisconnected>
}
 800b354:	bf00      	nop
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d13c      	bne.n	800b3e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b36c:	4a20      	ldr	r2, [pc, #128]	; (800b3f0 <USBD_LL_Init+0x94>)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a1e      	ldr	r2, [pc, #120]	; (800b3f0 <USBD_LL_Init+0x94>)
 800b378:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b37c:	4b1c      	ldr	r3, [pc, #112]	; (800b3f0 <USBD_LL_Init+0x94>)
 800b37e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b382:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b384:	4b1a      	ldr	r3, [pc, #104]	; (800b3f0 <USBD_LL_Init+0x94>)
 800b386:	2204      	movs	r2, #4
 800b388:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b38a:	4b19      	ldr	r3, [pc, #100]	; (800b3f0 <USBD_LL_Init+0x94>)
 800b38c:	2202      	movs	r2, #2
 800b38e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b390:	4b17      	ldr	r3, [pc, #92]	; (800b3f0 <USBD_LL_Init+0x94>)
 800b392:	2200      	movs	r2, #0
 800b394:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b396:	4b16      	ldr	r3, [pc, #88]	; (800b3f0 <USBD_LL_Init+0x94>)
 800b398:	2202      	movs	r2, #2
 800b39a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b39c:	4b14      	ldr	r3, [pc, #80]	; (800b3f0 <USBD_LL_Init+0x94>)
 800b39e:	2200      	movs	r2, #0
 800b3a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b3a2:	4b13      	ldr	r3, [pc, #76]	; (800b3f0 <USBD_LL_Init+0x94>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b3a8:	4b11      	ldr	r3, [pc, #68]	; (800b3f0 <USBD_LL_Init+0x94>)
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b3ae:	4b10      	ldr	r3, [pc, #64]	; (800b3f0 <USBD_LL_Init+0x94>)
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b3b4:	4b0e      	ldr	r3, [pc, #56]	; (800b3f0 <USBD_LL_Init+0x94>)
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b3ba:	480d      	ldr	r0, [pc, #52]	; (800b3f0 <USBD_LL_Init+0x94>)
 800b3bc:	f7f9 fe24 	bl	8005008 <HAL_PCD_Init>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d001      	beq.n	800b3ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b3c6:	f7f6 fdf1 	bl	8001fac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b3ca:	2180      	movs	r1, #128	; 0x80
 800b3cc:	4808      	ldr	r0, [pc, #32]	; (800b3f0 <USBD_LL_Init+0x94>)
 800b3ce:	f7fa ff82 	bl	80062d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b3d2:	2240      	movs	r2, #64	; 0x40
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	4806      	ldr	r0, [pc, #24]	; (800b3f0 <USBD_LL_Init+0x94>)
 800b3d8:	f7fa ff36 	bl	8006248 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b3dc:	2280      	movs	r2, #128	; 0x80
 800b3de:	2101      	movs	r1, #1
 800b3e0:	4803      	ldr	r0, [pc, #12]	; (800b3f0 <USBD_LL_Init+0x94>)
 800b3e2:	f7fa ff31 	bl	8006248 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	20001c70 	.word	0x20001c70

0800b3f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b400:	2300      	movs	r3, #0
 800b402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7f9 ff19 	bl	8005242 <HAL_PCD_Start>
 800b410:	4603      	mov	r3, r0
 800b412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b414:	7bfb      	ldrb	r3, [r7, #15]
 800b416:	4618      	mov	r0, r3
 800b418:	f000 f942 	bl	800b6a0 <USBD_Get_USB_Status>
 800b41c:	4603      	mov	r3, r0
 800b41e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b420:	7bbb      	ldrb	r3, [r7, #14]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b084      	sub	sp, #16
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	4608      	mov	r0, r1
 800b434:	4611      	mov	r1, r2
 800b436:	461a      	mov	r2, r3
 800b438:	4603      	mov	r3, r0
 800b43a:	70fb      	strb	r3, [r7, #3]
 800b43c:	460b      	mov	r3, r1
 800b43e:	70bb      	strb	r3, [r7, #2]
 800b440:	4613      	mov	r3, r2
 800b442:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b444:	2300      	movs	r3, #0
 800b446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b448:	2300      	movs	r3, #0
 800b44a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b452:	78bb      	ldrb	r3, [r7, #2]
 800b454:	883a      	ldrh	r2, [r7, #0]
 800b456:	78f9      	ldrb	r1, [r7, #3]
 800b458:	f7fa fafd 	bl	8005a56 <HAL_PCD_EP_Open>
 800b45c:	4603      	mov	r3, r0
 800b45e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b460:	7bfb      	ldrb	r3, [r7, #15]
 800b462:	4618      	mov	r0, r3
 800b464:	f000 f91c 	bl	800b6a0 <USBD_Get_USB_Status>
 800b468:	4603      	mov	r3, r0
 800b46a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b46c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b084      	sub	sp, #16
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
 800b47e:	460b      	mov	r3, r1
 800b480:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b482:	2300      	movs	r3, #0
 800b484:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b486:	2300      	movs	r3, #0
 800b488:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b490:	78fa      	ldrb	r2, [r7, #3]
 800b492:	4611      	mov	r1, r2
 800b494:	4618      	mov	r0, r3
 800b496:	f7fa fb46 	bl	8005b26 <HAL_PCD_EP_Close>
 800b49a:	4603      	mov	r3, r0
 800b49c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b49e:	7bfb      	ldrb	r3, [r7, #15]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f000 f8fd 	bl	800b6a0 <USBD_Get_USB_Status>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b4ce:	78fa      	ldrb	r2, [r7, #3]
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fa fc1e 	bl	8005d14 <HAL_PCD_EP_SetStall>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4dc:	7bfb      	ldrb	r3, [r7, #15]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f000 f8de 	bl	800b6a0 <USBD_Get_USB_Status>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b084      	sub	sp, #16
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4fe:	2300      	movs	r3, #0
 800b500:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b502:	2300      	movs	r3, #0
 800b504:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b50c:	78fa      	ldrb	r2, [r7, #3]
 800b50e:	4611      	mov	r1, r2
 800b510:	4618      	mov	r0, r3
 800b512:	f7fa fc63 	bl	8005ddc <HAL_PCD_EP_ClrStall>
 800b516:	4603      	mov	r3, r0
 800b518:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b51a:	7bfb      	ldrb	r3, [r7, #15]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f000 f8bf 	bl	800b6a0 <USBD_Get_USB_Status>
 800b522:	4603      	mov	r3, r0
 800b524:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b526:	7bbb      	ldrb	r3, [r7, #14]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b530:	b480      	push	{r7}
 800b532:	b085      	sub	sp, #20
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	460b      	mov	r3, r1
 800b53a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b542:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b544:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	da0b      	bge.n	800b564 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b54c:	78fb      	ldrb	r3, [r7, #3]
 800b54e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b552:	68f9      	ldr	r1, [r7, #12]
 800b554:	4613      	mov	r3, r2
 800b556:	00db      	lsls	r3, r3, #3
 800b558:	1a9b      	subs	r3, r3, r2
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	440b      	add	r3, r1
 800b55e:	333e      	adds	r3, #62	; 0x3e
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	e00b      	b.n	800b57c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b564:	78fb      	ldrb	r3, [r7, #3]
 800b566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b56a:	68f9      	ldr	r1, [r7, #12]
 800b56c:	4613      	mov	r3, r2
 800b56e:	00db      	lsls	r3, r3, #3
 800b570:	1a9b      	subs	r3, r3, r2
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	440b      	add	r3, r1
 800b576:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b57a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3714      	adds	r7, #20
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	460b      	mov	r3, r1
 800b592:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b594:	2300      	movs	r3, #0
 800b596:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b598:	2300      	movs	r3, #0
 800b59a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b5a2:	78fa      	ldrb	r2, [r7, #3]
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7fa fa30 	bl	8005a0c <HAL_PCD_SetAddress>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5b0:	7bfb      	ldrb	r3, [r7, #15]
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f000 f874 	bl	800b6a0 <USBD_Get_USB_Status>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b086      	sub	sp, #24
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	60f8      	str	r0, [r7, #12]
 800b5ce:	607a      	str	r2, [r7, #4]
 800b5d0:	603b      	str	r3, [r7, #0]
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b5e4:	7af9      	ldrb	r1, [r7, #11]
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	f7fa fb49 	bl	8005c80 <HAL_PCD_EP_Transmit>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5f2:	7dfb      	ldrb	r3, [r7, #23]
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f000 f853 	bl	800b6a0 <USBD_Get_USB_Status>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b5fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3718      	adds	r7, #24
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b086      	sub	sp, #24
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	607a      	str	r2, [r7, #4]
 800b612:	603b      	str	r3, [r7, #0]
 800b614:	460b      	mov	r3, r1
 800b616:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b618:	2300      	movs	r3, #0
 800b61a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b61c:	2300      	movs	r3, #0
 800b61e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b626:	7af9      	ldrb	r1, [r7, #11]
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	f7fa fac5 	bl	8005bba <HAL_PCD_EP_Receive>
 800b630:	4603      	mov	r3, r0
 800b632:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b634:	7dfb      	ldrb	r3, [r7, #23]
 800b636:	4618      	mov	r0, r3
 800b638:	f000 f832 	bl	800b6a0 <USBD_Get_USB_Status>
 800b63c:	4603      	mov	r3, r0
 800b63e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b640:	7dbb      	ldrb	r3, [r7, #22]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3718      	adds	r7, #24
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b082      	sub	sp, #8
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
 800b652:	460b      	mov	r3, r1
 800b654:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b65c:	78fa      	ldrb	r2, [r7, #3]
 800b65e:	4611      	mov	r1, r2
 800b660:	4618      	mov	r0, r3
 800b662:	f7fa faf5 	bl	8005c50 <HAL_PCD_EP_GetRxCount>
 800b666:	4603      	mov	r3, r0
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b678:	4b03      	ldr	r3, [pc, #12]	; (800b688 <USBD_static_malloc+0x18>)
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	370c      	adds	r7, #12
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr
 800b686:	bf00      	nop
 800b688:	20000378 	.word	0x20000378

0800b68c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]

}
 800b694:	bf00      	nop
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b085      	sub	sp, #20
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b6ae:	79fb      	ldrb	r3, [r7, #7]
 800b6b0:	2b03      	cmp	r3, #3
 800b6b2:	d817      	bhi.n	800b6e4 <USBD_Get_USB_Status+0x44>
 800b6b4:	a201      	add	r2, pc, #4	; (adr r2, 800b6bc <USBD_Get_USB_Status+0x1c>)
 800b6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ba:	bf00      	nop
 800b6bc:	0800b6cd 	.word	0x0800b6cd
 800b6c0:	0800b6d3 	.word	0x0800b6d3
 800b6c4:	0800b6d9 	.word	0x0800b6d9
 800b6c8:	0800b6df 	.word	0x0800b6df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b6d0:	e00b      	b.n	800b6ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b6d6:	e008      	b.n	800b6ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	73fb      	strb	r3, [r7, #15]
    break;
 800b6dc:	e005      	b.n	800b6ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	73fb      	strb	r3, [r7, #15]
    break;
 800b6e2:	e002      	b.n	800b6ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b6e8:	bf00      	nop
  }
  return usb_status;
 800b6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3714      	adds	r7, #20
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <__errno>:
 800b6f8:	4b01      	ldr	r3, [pc, #4]	; (800b700 <__errno+0x8>)
 800b6fa:	6818      	ldr	r0, [r3, #0]
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	20000184 	.word	0x20000184

0800b704 <__libc_init_array>:
 800b704:	b570      	push	{r4, r5, r6, lr}
 800b706:	4d0d      	ldr	r5, [pc, #52]	; (800b73c <__libc_init_array+0x38>)
 800b708:	4c0d      	ldr	r4, [pc, #52]	; (800b740 <__libc_init_array+0x3c>)
 800b70a:	1b64      	subs	r4, r4, r5
 800b70c:	10a4      	asrs	r4, r4, #2
 800b70e:	2600      	movs	r6, #0
 800b710:	42a6      	cmp	r6, r4
 800b712:	d109      	bne.n	800b728 <__libc_init_array+0x24>
 800b714:	4d0b      	ldr	r5, [pc, #44]	; (800b744 <__libc_init_array+0x40>)
 800b716:	4c0c      	ldr	r4, [pc, #48]	; (800b748 <__libc_init_array+0x44>)
 800b718:	f002 fee8 	bl	800e4ec <_init>
 800b71c:	1b64      	subs	r4, r4, r5
 800b71e:	10a4      	asrs	r4, r4, #2
 800b720:	2600      	movs	r6, #0
 800b722:	42a6      	cmp	r6, r4
 800b724:	d105      	bne.n	800b732 <__libc_init_array+0x2e>
 800b726:	bd70      	pop	{r4, r5, r6, pc}
 800b728:	f855 3b04 	ldr.w	r3, [r5], #4
 800b72c:	4798      	blx	r3
 800b72e:	3601      	adds	r6, #1
 800b730:	e7ee      	b.n	800b710 <__libc_init_array+0xc>
 800b732:	f855 3b04 	ldr.w	r3, [r5], #4
 800b736:	4798      	blx	r3
 800b738:	3601      	adds	r6, #1
 800b73a:	e7f2      	b.n	800b722 <__libc_init_array+0x1e>
 800b73c:	0800e9fc 	.word	0x0800e9fc
 800b740:	0800e9fc 	.word	0x0800e9fc
 800b744:	0800e9fc 	.word	0x0800e9fc
 800b748:	0800ea00 	.word	0x0800ea00

0800b74c <memset>:
 800b74c:	4402      	add	r2, r0
 800b74e:	4603      	mov	r3, r0
 800b750:	4293      	cmp	r3, r2
 800b752:	d100      	bne.n	800b756 <memset+0xa>
 800b754:	4770      	bx	lr
 800b756:	f803 1b01 	strb.w	r1, [r3], #1
 800b75a:	e7f9      	b.n	800b750 <memset+0x4>

0800b75c <__cvt>:
 800b75c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b760:	ec55 4b10 	vmov	r4, r5, d0
 800b764:	2d00      	cmp	r5, #0
 800b766:	460e      	mov	r6, r1
 800b768:	4619      	mov	r1, r3
 800b76a:	462b      	mov	r3, r5
 800b76c:	bfbb      	ittet	lt
 800b76e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b772:	461d      	movlt	r5, r3
 800b774:	2300      	movge	r3, #0
 800b776:	232d      	movlt	r3, #45	; 0x2d
 800b778:	700b      	strb	r3, [r1, #0]
 800b77a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b77c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b780:	4691      	mov	r9, r2
 800b782:	f023 0820 	bic.w	r8, r3, #32
 800b786:	bfbc      	itt	lt
 800b788:	4622      	movlt	r2, r4
 800b78a:	4614      	movlt	r4, r2
 800b78c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b790:	d005      	beq.n	800b79e <__cvt+0x42>
 800b792:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b796:	d100      	bne.n	800b79a <__cvt+0x3e>
 800b798:	3601      	adds	r6, #1
 800b79a:	2102      	movs	r1, #2
 800b79c:	e000      	b.n	800b7a0 <__cvt+0x44>
 800b79e:	2103      	movs	r1, #3
 800b7a0:	ab03      	add	r3, sp, #12
 800b7a2:	9301      	str	r3, [sp, #4]
 800b7a4:	ab02      	add	r3, sp, #8
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	ec45 4b10 	vmov	d0, r4, r5
 800b7ac:	4653      	mov	r3, sl
 800b7ae:	4632      	mov	r2, r6
 800b7b0:	f000 fd1e 	bl	800c1f0 <_dtoa_r>
 800b7b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b7b8:	4607      	mov	r7, r0
 800b7ba:	d102      	bne.n	800b7c2 <__cvt+0x66>
 800b7bc:	f019 0f01 	tst.w	r9, #1
 800b7c0:	d022      	beq.n	800b808 <__cvt+0xac>
 800b7c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b7c6:	eb07 0906 	add.w	r9, r7, r6
 800b7ca:	d110      	bne.n	800b7ee <__cvt+0x92>
 800b7cc:	783b      	ldrb	r3, [r7, #0]
 800b7ce:	2b30      	cmp	r3, #48	; 0x30
 800b7d0:	d10a      	bne.n	800b7e8 <__cvt+0x8c>
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	4629      	mov	r1, r5
 800b7da:	f7f5 f985 	bl	8000ae8 <__aeabi_dcmpeq>
 800b7de:	b918      	cbnz	r0, 800b7e8 <__cvt+0x8c>
 800b7e0:	f1c6 0601 	rsb	r6, r6, #1
 800b7e4:	f8ca 6000 	str.w	r6, [sl]
 800b7e8:	f8da 3000 	ldr.w	r3, [sl]
 800b7ec:	4499      	add	r9, r3
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	f7f5 f977 	bl	8000ae8 <__aeabi_dcmpeq>
 800b7fa:	b108      	cbz	r0, 800b800 <__cvt+0xa4>
 800b7fc:	f8cd 900c 	str.w	r9, [sp, #12]
 800b800:	2230      	movs	r2, #48	; 0x30
 800b802:	9b03      	ldr	r3, [sp, #12]
 800b804:	454b      	cmp	r3, r9
 800b806:	d307      	bcc.n	800b818 <__cvt+0xbc>
 800b808:	9b03      	ldr	r3, [sp, #12]
 800b80a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b80c:	1bdb      	subs	r3, r3, r7
 800b80e:	4638      	mov	r0, r7
 800b810:	6013      	str	r3, [r2, #0]
 800b812:	b004      	add	sp, #16
 800b814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b818:	1c59      	adds	r1, r3, #1
 800b81a:	9103      	str	r1, [sp, #12]
 800b81c:	701a      	strb	r2, [r3, #0]
 800b81e:	e7f0      	b.n	800b802 <__cvt+0xa6>

0800b820 <__exponent>:
 800b820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b822:	4603      	mov	r3, r0
 800b824:	2900      	cmp	r1, #0
 800b826:	bfb8      	it	lt
 800b828:	4249      	neglt	r1, r1
 800b82a:	f803 2b02 	strb.w	r2, [r3], #2
 800b82e:	bfb4      	ite	lt
 800b830:	222d      	movlt	r2, #45	; 0x2d
 800b832:	222b      	movge	r2, #43	; 0x2b
 800b834:	2909      	cmp	r1, #9
 800b836:	7042      	strb	r2, [r0, #1]
 800b838:	dd2a      	ble.n	800b890 <__exponent+0x70>
 800b83a:	f10d 0407 	add.w	r4, sp, #7
 800b83e:	46a4      	mov	ip, r4
 800b840:	270a      	movs	r7, #10
 800b842:	46a6      	mov	lr, r4
 800b844:	460a      	mov	r2, r1
 800b846:	fb91 f6f7 	sdiv	r6, r1, r7
 800b84a:	fb07 1516 	mls	r5, r7, r6, r1
 800b84e:	3530      	adds	r5, #48	; 0x30
 800b850:	2a63      	cmp	r2, #99	; 0x63
 800b852:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b856:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b85a:	4631      	mov	r1, r6
 800b85c:	dcf1      	bgt.n	800b842 <__exponent+0x22>
 800b85e:	3130      	adds	r1, #48	; 0x30
 800b860:	f1ae 0502 	sub.w	r5, lr, #2
 800b864:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b868:	1c44      	adds	r4, r0, #1
 800b86a:	4629      	mov	r1, r5
 800b86c:	4561      	cmp	r1, ip
 800b86e:	d30a      	bcc.n	800b886 <__exponent+0x66>
 800b870:	f10d 0209 	add.w	r2, sp, #9
 800b874:	eba2 020e 	sub.w	r2, r2, lr
 800b878:	4565      	cmp	r5, ip
 800b87a:	bf88      	it	hi
 800b87c:	2200      	movhi	r2, #0
 800b87e:	4413      	add	r3, r2
 800b880:	1a18      	subs	r0, r3, r0
 800b882:	b003      	add	sp, #12
 800b884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b88a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b88e:	e7ed      	b.n	800b86c <__exponent+0x4c>
 800b890:	2330      	movs	r3, #48	; 0x30
 800b892:	3130      	adds	r1, #48	; 0x30
 800b894:	7083      	strb	r3, [r0, #2]
 800b896:	70c1      	strb	r1, [r0, #3]
 800b898:	1d03      	adds	r3, r0, #4
 800b89a:	e7f1      	b.n	800b880 <__exponent+0x60>

0800b89c <_printf_float>:
 800b89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a0:	ed2d 8b02 	vpush	{d8}
 800b8a4:	b08d      	sub	sp, #52	; 0x34
 800b8a6:	460c      	mov	r4, r1
 800b8a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b8ac:	4616      	mov	r6, r2
 800b8ae:	461f      	mov	r7, r3
 800b8b0:	4605      	mov	r5, r0
 800b8b2:	f001 fa89 	bl	800cdc8 <_localeconv_r>
 800b8b6:	f8d0 a000 	ldr.w	sl, [r0]
 800b8ba:	4650      	mov	r0, sl
 800b8bc:	f7f4 fc92 	bl	80001e4 <strlen>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	930a      	str	r3, [sp, #40]	; 0x28
 800b8c4:	6823      	ldr	r3, [r4, #0]
 800b8c6:	9305      	str	r3, [sp, #20]
 800b8c8:	f8d8 3000 	ldr.w	r3, [r8]
 800b8cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b8d0:	3307      	adds	r3, #7
 800b8d2:	f023 0307 	bic.w	r3, r3, #7
 800b8d6:	f103 0208 	add.w	r2, r3, #8
 800b8da:	f8c8 2000 	str.w	r2, [r8]
 800b8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b8e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b8ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b8ee:	9307      	str	r3, [sp, #28]
 800b8f0:	f8cd 8018 	str.w	r8, [sp, #24]
 800b8f4:	ee08 0a10 	vmov	s16, r0
 800b8f8:	4b9f      	ldr	r3, [pc, #636]	; (800bb78 <_printf_float+0x2dc>)
 800b8fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b902:	f7f5 f923 	bl	8000b4c <__aeabi_dcmpun>
 800b906:	bb88      	cbnz	r0, 800b96c <_printf_float+0xd0>
 800b908:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b90c:	4b9a      	ldr	r3, [pc, #616]	; (800bb78 <_printf_float+0x2dc>)
 800b90e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b912:	f7f5 f8fd 	bl	8000b10 <__aeabi_dcmple>
 800b916:	bb48      	cbnz	r0, 800b96c <_printf_float+0xd0>
 800b918:	2200      	movs	r2, #0
 800b91a:	2300      	movs	r3, #0
 800b91c:	4640      	mov	r0, r8
 800b91e:	4649      	mov	r1, r9
 800b920:	f7f5 f8ec 	bl	8000afc <__aeabi_dcmplt>
 800b924:	b110      	cbz	r0, 800b92c <_printf_float+0x90>
 800b926:	232d      	movs	r3, #45	; 0x2d
 800b928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b92c:	4b93      	ldr	r3, [pc, #588]	; (800bb7c <_printf_float+0x2e0>)
 800b92e:	4894      	ldr	r0, [pc, #592]	; (800bb80 <_printf_float+0x2e4>)
 800b930:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b934:	bf94      	ite	ls
 800b936:	4698      	movls	r8, r3
 800b938:	4680      	movhi	r8, r0
 800b93a:	2303      	movs	r3, #3
 800b93c:	6123      	str	r3, [r4, #16]
 800b93e:	9b05      	ldr	r3, [sp, #20]
 800b940:	f023 0204 	bic.w	r2, r3, #4
 800b944:	6022      	str	r2, [r4, #0]
 800b946:	f04f 0900 	mov.w	r9, #0
 800b94a:	9700      	str	r7, [sp, #0]
 800b94c:	4633      	mov	r3, r6
 800b94e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b950:	4621      	mov	r1, r4
 800b952:	4628      	mov	r0, r5
 800b954:	f000 f9d8 	bl	800bd08 <_printf_common>
 800b958:	3001      	adds	r0, #1
 800b95a:	f040 8090 	bne.w	800ba7e <_printf_float+0x1e2>
 800b95e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b962:	b00d      	add	sp, #52	; 0x34
 800b964:	ecbd 8b02 	vpop	{d8}
 800b968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b96c:	4642      	mov	r2, r8
 800b96e:	464b      	mov	r3, r9
 800b970:	4640      	mov	r0, r8
 800b972:	4649      	mov	r1, r9
 800b974:	f7f5 f8ea 	bl	8000b4c <__aeabi_dcmpun>
 800b978:	b140      	cbz	r0, 800b98c <_printf_float+0xf0>
 800b97a:	464b      	mov	r3, r9
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	bfbc      	itt	lt
 800b980:	232d      	movlt	r3, #45	; 0x2d
 800b982:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b986:	487f      	ldr	r0, [pc, #508]	; (800bb84 <_printf_float+0x2e8>)
 800b988:	4b7f      	ldr	r3, [pc, #508]	; (800bb88 <_printf_float+0x2ec>)
 800b98a:	e7d1      	b.n	800b930 <_printf_float+0x94>
 800b98c:	6863      	ldr	r3, [r4, #4]
 800b98e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b992:	9206      	str	r2, [sp, #24]
 800b994:	1c5a      	adds	r2, r3, #1
 800b996:	d13f      	bne.n	800ba18 <_printf_float+0x17c>
 800b998:	2306      	movs	r3, #6
 800b99a:	6063      	str	r3, [r4, #4]
 800b99c:	9b05      	ldr	r3, [sp, #20]
 800b99e:	6861      	ldr	r1, [r4, #4]
 800b9a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	9303      	str	r3, [sp, #12]
 800b9a8:	ab0a      	add	r3, sp, #40	; 0x28
 800b9aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b9ae:	ab09      	add	r3, sp, #36	; 0x24
 800b9b0:	ec49 8b10 	vmov	d0, r8, r9
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	6022      	str	r2, [r4, #0]
 800b9b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b9bc:	4628      	mov	r0, r5
 800b9be:	f7ff fecd 	bl	800b75c <__cvt>
 800b9c2:	9b06      	ldr	r3, [sp, #24]
 800b9c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9c6:	2b47      	cmp	r3, #71	; 0x47
 800b9c8:	4680      	mov	r8, r0
 800b9ca:	d108      	bne.n	800b9de <_printf_float+0x142>
 800b9cc:	1cc8      	adds	r0, r1, #3
 800b9ce:	db02      	blt.n	800b9d6 <_printf_float+0x13a>
 800b9d0:	6863      	ldr	r3, [r4, #4]
 800b9d2:	4299      	cmp	r1, r3
 800b9d4:	dd41      	ble.n	800ba5a <_printf_float+0x1be>
 800b9d6:	f1ab 0b02 	sub.w	fp, fp, #2
 800b9da:	fa5f fb8b 	uxtb.w	fp, fp
 800b9de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b9e2:	d820      	bhi.n	800ba26 <_printf_float+0x18a>
 800b9e4:	3901      	subs	r1, #1
 800b9e6:	465a      	mov	r2, fp
 800b9e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b9ec:	9109      	str	r1, [sp, #36]	; 0x24
 800b9ee:	f7ff ff17 	bl	800b820 <__exponent>
 800b9f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9f4:	1813      	adds	r3, r2, r0
 800b9f6:	2a01      	cmp	r2, #1
 800b9f8:	4681      	mov	r9, r0
 800b9fa:	6123      	str	r3, [r4, #16]
 800b9fc:	dc02      	bgt.n	800ba04 <_printf_float+0x168>
 800b9fe:	6822      	ldr	r2, [r4, #0]
 800ba00:	07d2      	lsls	r2, r2, #31
 800ba02:	d501      	bpl.n	800ba08 <_printf_float+0x16c>
 800ba04:	3301      	adds	r3, #1
 800ba06:	6123      	str	r3, [r4, #16]
 800ba08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d09c      	beq.n	800b94a <_printf_float+0xae>
 800ba10:	232d      	movs	r3, #45	; 0x2d
 800ba12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba16:	e798      	b.n	800b94a <_printf_float+0xae>
 800ba18:	9a06      	ldr	r2, [sp, #24]
 800ba1a:	2a47      	cmp	r2, #71	; 0x47
 800ba1c:	d1be      	bne.n	800b99c <_printf_float+0x100>
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1bc      	bne.n	800b99c <_printf_float+0x100>
 800ba22:	2301      	movs	r3, #1
 800ba24:	e7b9      	b.n	800b99a <_printf_float+0xfe>
 800ba26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ba2a:	d118      	bne.n	800ba5e <_printf_float+0x1c2>
 800ba2c:	2900      	cmp	r1, #0
 800ba2e:	6863      	ldr	r3, [r4, #4]
 800ba30:	dd0b      	ble.n	800ba4a <_printf_float+0x1ae>
 800ba32:	6121      	str	r1, [r4, #16]
 800ba34:	b913      	cbnz	r3, 800ba3c <_printf_float+0x1a0>
 800ba36:	6822      	ldr	r2, [r4, #0]
 800ba38:	07d0      	lsls	r0, r2, #31
 800ba3a:	d502      	bpl.n	800ba42 <_printf_float+0x1a6>
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	440b      	add	r3, r1
 800ba40:	6123      	str	r3, [r4, #16]
 800ba42:	65a1      	str	r1, [r4, #88]	; 0x58
 800ba44:	f04f 0900 	mov.w	r9, #0
 800ba48:	e7de      	b.n	800ba08 <_printf_float+0x16c>
 800ba4a:	b913      	cbnz	r3, 800ba52 <_printf_float+0x1b6>
 800ba4c:	6822      	ldr	r2, [r4, #0]
 800ba4e:	07d2      	lsls	r2, r2, #31
 800ba50:	d501      	bpl.n	800ba56 <_printf_float+0x1ba>
 800ba52:	3302      	adds	r3, #2
 800ba54:	e7f4      	b.n	800ba40 <_printf_float+0x1a4>
 800ba56:	2301      	movs	r3, #1
 800ba58:	e7f2      	b.n	800ba40 <_printf_float+0x1a4>
 800ba5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ba5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba60:	4299      	cmp	r1, r3
 800ba62:	db05      	blt.n	800ba70 <_printf_float+0x1d4>
 800ba64:	6823      	ldr	r3, [r4, #0]
 800ba66:	6121      	str	r1, [r4, #16]
 800ba68:	07d8      	lsls	r0, r3, #31
 800ba6a:	d5ea      	bpl.n	800ba42 <_printf_float+0x1a6>
 800ba6c:	1c4b      	adds	r3, r1, #1
 800ba6e:	e7e7      	b.n	800ba40 <_printf_float+0x1a4>
 800ba70:	2900      	cmp	r1, #0
 800ba72:	bfd4      	ite	le
 800ba74:	f1c1 0202 	rsble	r2, r1, #2
 800ba78:	2201      	movgt	r2, #1
 800ba7a:	4413      	add	r3, r2
 800ba7c:	e7e0      	b.n	800ba40 <_printf_float+0x1a4>
 800ba7e:	6823      	ldr	r3, [r4, #0]
 800ba80:	055a      	lsls	r2, r3, #21
 800ba82:	d407      	bmi.n	800ba94 <_printf_float+0x1f8>
 800ba84:	6923      	ldr	r3, [r4, #16]
 800ba86:	4642      	mov	r2, r8
 800ba88:	4631      	mov	r1, r6
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	47b8      	blx	r7
 800ba8e:	3001      	adds	r0, #1
 800ba90:	d12c      	bne.n	800baec <_printf_float+0x250>
 800ba92:	e764      	b.n	800b95e <_printf_float+0xc2>
 800ba94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ba98:	f240 80e0 	bls.w	800bc5c <_printf_float+0x3c0>
 800ba9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800baa0:	2200      	movs	r2, #0
 800baa2:	2300      	movs	r3, #0
 800baa4:	f7f5 f820 	bl	8000ae8 <__aeabi_dcmpeq>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d034      	beq.n	800bb16 <_printf_float+0x27a>
 800baac:	4a37      	ldr	r2, [pc, #220]	; (800bb8c <_printf_float+0x2f0>)
 800baae:	2301      	movs	r3, #1
 800bab0:	4631      	mov	r1, r6
 800bab2:	4628      	mov	r0, r5
 800bab4:	47b8      	blx	r7
 800bab6:	3001      	adds	r0, #1
 800bab8:	f43f af51 	beq.w	800b95e <_printf_float+0xc2>
 800babc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bac0:	429a      	cmp	r2, r3
 800bac2:	db02      	blt.n	800baca <_printf_float+0x22e>
 800bac4:	6823      	ldr	r3, [r4, #0]
 800bac6:	07d8      	lsls	r0, r3, #31
 800bac8:	d510      	bpl.n	800baec <_printf_float+0x250>
 800baca:	ee18 3a10 	vmov	r3, s16
 800bace:	4652      	mov	r2, sl
 800bad0:	4631      	mov	r1, r6
 800bad2:	4628      	mov	r0, r5
 800bad4:	47b8      	blx	r7
 800bad6:	3001      	adds	r0, #1
 800bad8:	f43f af41 	beq.w	800b95e <_printf_float+0xc2>
 800badc:	f04f 0800 	mov.w	r8, #0
 800bae0:	f104 091a 	add.w	r9, r4, #26
 800bae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bae6:	3b01      	subs	r3, #1
 800bae8:	4543      	cmp	r3, r8
 800baea:	dc09      	bgt.n	800bb00 <_printf_float+0x264>
 800baec:	6823      	ldr	r3, [r4, #0]
 800baee:	079b      	lsls	r3, r3, #30
 800baf0:	f100 8105 	bmi.w	800bcfe <_printf_float+0x462>
 800baf4:	68e0      	ldr	r0, [r4, #12]
 800baf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baf8:	4298      	cmp	r0, r3
 800bafa:	bfb8      	it	lt
 800bafc:	4618      	movlt	r0, r3
 800bafe:	e730      	b.n	800b962 <_printf_float+0xc6>
 800bb00:	2301      	movs	r3, #1
 800bb02:	464a      	mov	r2, r9
 800bb04:	4631      	mov	r1, r6
 800bb06:	4628      	mov	r0, r5
 800bb08:	47b8      	blx	r7
 800bb0a:	3001      	adds	r0, #1
 800bb0c:	f43f af27 	beq.w	800b95e <_printf_float+0xc2>
 800bb10:	f108 0801 	add.w	r8, r8, #1
 800bb14:	e7e6      	b.n	800bae4 <_printf_float+0x248>
 800bb16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	dc39      	bgt.n	800bb90 <_printf_float+0x2f4>
 800bb1c:	4a1b      	ldr	r2, [pc, #108]	; (800bb8c <_printf_float+0x2f0>)
 800bb1e:	2301      	movs	r3, #1
 800bb20:	4631      	mov	r1, r6
 800bb22:	4628      	mov	r0, r5
 800bb24:	47b8      	blx	r7
 800bb26:	3001      	adds	r0, #1
 800bb28:	f43f af19 	beq.w	800b95e <_printf_float+0xc2>
 800bb2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb30:	4313      	orrs	r3, r2
 800bb32:	d102      	bne.n	800bb3a <_printf_float+0x29e>
 800bb34:	6823      	ldr	r3, [r4, #0]
 800bb36:	07d9      	lsls	r1, r3, #31
 800bb38:	d5d8      	bpl.n	800baec <_printf_float+0x250>
 800bb3a:	ee18 3a10 	vmov	r3, s16
 800bb3e:	4652      	mov	r2, sl
 800bb40:	4631      	mov	r1, r6
 800bb42:	4628      	mov	r0, r5
 800bb44:	47b8      	blx	r7
 800bb46:	3001      	adds	r0, #1
 800bb48:	f43f af09 	beq.w	800b95e <_printf_float+0xc2>
 800bb4c:	f04f 0900 	mov.w	r9, #0
 800bb50:	f104 0a1a 	add.w	sl, r4, #26
 800bb54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb56:	425b      	negs	r3, r3
 800bb58:	454b      	cmp	r3, r9
 800bb5a:	dc01      	bgt.n	800bb60 <_printf_float+0x2c4>
 800bb5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb5e:	e792      	b.n	800ba86 <_printf_float+0x1ea>
 800bb60:	2301      	movs	r3, #1
 800bb62:	4652      	mov	r2, sl
 800bb64:	4631      	mov	r1, r6
 800bb66:	4628      	mov	r0, r5
 800bb68:	47b8      	blx	r7
 800bb6a:	3001      	adds	r0, #1
 800bb6c:	f43f aef7 	beq.w	800b95e <_printf_float+0xc2>
 800bb70:	f109 0901 	add.w	r9, r9, #1
 800bb74:	e7ee      	b.n	800bb54 <_printf_float+0x2b8>
 800bb76:	bf00      	nop
 800bb78:	7fefffff 	.word	0x7fefffff
 800bb7c:	0800e618 	.word	0x0800e618
 800bb80:	0800e61c 	.word	0x0800e61c
 800bb84:	0800e624 	.word	0x0800e624
 800bb88:	0800e620 	.word	0x0800e620
 800bb8c:	0800e628 	.word	0x0800e628
 800bb90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb94:	429a      	cmp	r2, r3
 800bb96:	bfa8      	it	ge
 800bb98:	461a      	movge	r2, r3
 800bb9a:	2a00      	cmp	r2, #0
 800bb9c:	4691      	mov	r9, r2
 800bb9e:	dc37      	bgt.n	800bc10 <_printf_float+0x374>
 800bba0:	f04f 0b00 	mov.w	fp, #0
 800bba4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bba8:	f104 021a 	add.w	r2, r4, #26
 800bbac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbae:	9305      	str	r3, [sp, #20]
 800bbb0:	eba3 0309 	sub.w	r3, r3, r9
 800bbb4:	455b      	cmp	r3, fp
 800bbb6:	dc33      	bgt.n	800bc20 <_printf_float+0x384>
 800bbb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	db3b      	blt.n	800bc38 <_printf_float+0x39c>
 800bbc0:	6823      	ldr	r3, [r4, #0]
 800bbc2:	07da      	lsls	r2, r3, #31
 800bbc4:	d438      	bmi.n	800bc38 <_printf_float+0x39c>
 800bbc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbc8:	9b05      	ldr	r3, [sp, #20]
 800bbca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbcc:	1ad3      	subs	r3, r2, r3
 800bbce:	eba2 0901 	sub.w	r9, r2, r1
 800bbd2:	4599      	cmp	r9, r3
 800bbd4:	bfa8      	it	ge
 800bbd6:	4699      	movge	r9, r3
 800bbd8:	f1b9 0f00 	cmp.w	r9, #0
 800bbdc:	dc35      	bgt.n	800bc4a <_printf_float+0x3ae>
 800bbde:	f04f 0800 	mov.w	r8, #0
 800bbe2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbe6:	f104 0a1a 	add.w	sl, r4, #26
 800bbea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbee:	1a9b      	subs	r3, r3, r2
 800bbf0:	eba3 0309 	sub.w	r3, r3, r9
 800bbf4:	4543      	cmp	r3, r8
 800bbf6:	f77f af79 	ble.w	800baec <_printf_float+0x250>
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	4652      	mov	r2, sl
 800bbfe:	4631      	mov	r1, r6
 800bc00:	4628      	mov	r0, r5
 800bc02:	47b8      	blx	r7
 800bc04:	3001      	adds	r0, #1
 800bc06:	f43f aeaa 	beq.w	800b95e <_printf_float+0xc2>
 800bc0a:	f108 0801 	add.w	r8, r8, #1
 800bc0e:	e7ec      	b.n	800bbea <_printf_float+0x34e>
 800bc10:	4613      	mov	r3, r2
 800bc12:	4631      	mov	r1, r6
 800bc14:	4642      	mov	r2, r8
 800bc16:	4628      	mov	r0, r5
 800bc18:	47b8      	blx	r7
 800bc1a:	3001      	adds	r0, #1
 800bc1c:	d1c0      	bne.n	800bba0 <_printf_float+0x304>
 800bc1e:	e69e      	b.n	800b95e <_printf_float+0xc2>
 800bc20:	2301      	movs	r3, #1
 800bc22:	4631      	mov	r1, r6
 800bc24:	4628      	mov	r0, r5
 800bc26:	9205      	str	r2, [sp, #20]
 800bc28:	47b8      	blx	r7
 800bc2a:	3001      	adds	r0, #1
 800bc2c:	f43f ae97 	beq.w	800b95e <_printf_float+0xc2>
 800bc30:	9a05      	ldr	r2, [sp, #20]
 800bc32:	f10b 0b01 	add.w	fp, fp, #1
 800bc36:	e7b9      	b.n	800bbac <_printf_float+0x310>
 800bc38:	ee18 3a10 	vmov	r3, s16
 800bc3c:	4652      	mov	r2, sl
 800bc3e:	4631      	mov	r1, r6
 800bc40:	4628      	mov	r0, r5
 800bc42:	47b8      	blx	r7
 800bc44:	3001      	adds	r0, #1
 800bc46:	d1be      	bne.n	800bbc6 <_printf_float+0x32a>
 800bc48:	e689      	b.n	800b95e <_printf_float+0xc2>
 800bc4a:	9a05      	ldr	r2, [sp, #20]
 800bc4c:	464b      	mov	r3, r9
 800bc4e:	4442      	add	r2, r8
 800bc50:	4631      	mov	r1, r6
 800bc52:	4628      	mov	r0, r5
 800bc54:	47b8      	blx	r7
 800bc56:	3001      	adds	r0, #1
 800bc58:	d1c1      	bne.n	800bbde <_printf_float+0x342>
 800bc5a:	e680      	b.n	800b95e <_printf_float+0xc2>
 800bc5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc5e:	2a01      	cmp	r2, #1
 800bc60:	dc01      	bgt.n	800bc66 <_printf_float+0x3ca>
 800bc62:	07db      	lsls	r3, r3, #31
 800bc64:	d538      	bpl.n	800bcd8 <_printf_float+0x43c>
 800bc66:	2301      	movs	r3, #1
 800bc68:	4642      	mov	r2, r8
 800bc6a:	4631      	mov	r1, r6
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	47b8      	blx	r7
 800bc70:	3001      	adds	r0, #1
 800bc72:	f43f ae74 	beq.w	800b95e <_printf_float+0xc2>
 800bc76:	ee18 3a10 	vmov	r3, s16
 800bc7a:	4652      	mov	r2, sl
 800bc7c:	4631      	mov	r1, r6
 800bc7e:	4628      	mov	r0, r5
 800bc80:	47b8      	blx	r7
 800bc82:	3001      	adds	r0, #1
 800bc84:	f43f ae6b 	beq.w	800b95e <_printf_float+0xc2>
 800bc88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	2300      	movs	r3, #0
 800bc90:	f7f4 ff2a 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc94:	b9d8      	cbnz	r0, 800bcce <_printf_float+0x432>
 800bc96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc98:	f108 0201 	add.w	r2, r8, #1
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	4631      	mov	r1, r6
 800bca0:	4628      	mov	r0, r5
 800bca2:	47b8      	blx	r7
 800bca4:	3001      	adds	r0, #1
 800bca6:	d10e      	bne.n	800bcc6 <_printf_float+0x42a>
 800bca8:	e659      	b.n	800b95e <_printf_float+0xc2>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	4652      	mov	r2, sl
 800bcae:	4631      	mov	r1, r6
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	47b8      	blx	r7
 800bcb4:	3001      	adds	r0, #1
 800bcb6:	f43f ae52 	beq.w	800b95e <_printf_float+0xc2>
 800bcba:	f108 0801 	add.w	r8, r8, #1
 800bcbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	4543      	cmp	r3, r8
 800bcc4:	dcf1      	bgt.n	800bcaa <_printf_float+0x40e>
 800bcc6:	464b      	mov	r3, r9
 800bcc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bccc:	e6dc      	b.n	800ba88 <_printf_float+0x1ec>
 800bcce:	f04f 0800 	mov.w	r8, #0
 800bcd2:	f104 0a1a 	add.w	sl, r4, #26
 800bcd6:	e7f2      	b.n	800bcbe <_printf_float+0x422>
 800bcd8:	2301      	movs	r3, #1
 800bcda:	4642      	mov	r2, r8
 800bcdc:	e7df      	b.n	800bc9e <_printf_float+0x402>
 800bcde:	2301      	movs	r3, #1
 800bce0:	464a      	mov	r2, r9
 800bce2:	4631      	mov	r1, r6
 800bce4:	4628      	mov	r0, r5
 800bce6:	47b8      	blx	r7
 800bce8:	3001      	adds	r0, #1
 800bcea:	f43f ae38 	beq.w	800b95e <_printf_float+0xc2>
 800bcee:	f108 0801 	add.w	r8, r8, #1
 800bcf2:	68e3      	ldr	r3, [r4, #12]
 800bcf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bcf6:	1a5b      	subs	r3, r3, r1
 800bcf8:	4543      	cmp	r3, r8
 800bcfa:	dcf0      	bgt.n	800bcde <_printf_float+0x442>
 800bcfc:	e6fa      	b.n	800baf4 <_printf_float+0x258>
 800bcfe:	f04f 0800 	mov.w	r8, #0
 800bd02:	f104 0919 	add.w	r9, r4, #25
 800bd06:	e7f4      	b.n	800bcf2 <_printf_float+0x456>

0800bd08 <_printf_common>:
 800bd08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd0c:	4616      	mov	r6, r2
 800bd0e:	4699      	mov	r9, r3
 800bd10:	688a      	ldr	r2, [r1, #8]
 800bd12:	690b      	ldr	r3, [r1, #16]
 800bd14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	bfb8      	it	lt
 800bd1c:	4613      	movlt	r3, r2
 800bd1e:	6033      	str	r3, [r6, #0]
 800bd20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd24:	4607      	mov	r7, r0
 800bd26:	460c      	mov	r4, r1
 800bd28:	b10a      	cbz	r2, 800bd2e <_printf_common+0x26>
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	6033      	str	r3, [r6, #0]
 800bd2e:	6823      	ldr	r3, [r4, #0]
 800bd30:	0699      	lsls	r1, r3, #26
 800bd32:	bf42      	ittt	mi
 800bd34:	6833      	ldrmi	r3, [r6, #0]
 800bd36:	3302      	addmi	r3, #2
 800bd38:	6033      	strmi	r3, [r6, #0]
 800bd3a:	6825      	ldr	r5, [r4, #0]
 800bd3c:	f015 0506 	ands.w	r5, r5, #6
 800bd40:	d106      	bne.n	800bd50 <_printf_common+0x48>
 800bd42:	f104 0a19 	add.w	sl, r4, #25
 800bd46:	68e3      	ldr	r3, [r4, #12]
 800bd48:	6832      	ldr	r2, [r6, #0]
 800bd4a:	1a9b      	subs	r3, r3, r2
 800bd4c:	42ab      	cmp	r3, r5
 800bd4e:	dc26      	bgt.n	800bd9e <_printf_common+0x96>
 800bd50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd54:	1e13      	subs	r3, r2, #0
 800bd56:	6822      	ldr	r2, [r4, #0]
 800bd58:	bf18      	it	ne
 800bd5a:	2301      	movne	r3, #1
 800bd5c:	0692      	lsls	r2, r2, #26
 800bd5e:	d42b      	bmi.n	800bdb8 <_printf_common+0xb0>
 800bd60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd64:	4649      	mov	r1, r9
 800bd66:	4638      	mov	r0, r7
 800bd68:	47c0      	blx	r8
 800bd6a:	3001      	adds	r0, #1
 800bd6c:	d01e      	beq.n	800bdac <_printf_common+0xa4>
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	68e5      	ldr	r5, [r4, #12]
 800bd72:	6832      	ldr	r2, [r6, #0]
 800bd74:	f003 0306 	and.w	r3, r3, #6
 800bd78:	2b04      	cmp	r3, #4
 800bd7a:	bf08      	it	eq
 800bd7c:	1aad      	subeq	r5, r5, r2
 800bd7e:	68a3      	ldr	r3, [r4, #8]
 800bd80:	6922      	ldr	r2, [r4, #16]
 800bd82:	bf0c      	ite	eq
 800bd84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd88:	2500      	movne	r5, #0
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	bfc4      	itt	gt
 800bd8e:	1a9b      	subgt	r3, r3, r2
 800bd90:	18ed      	addgt	r5, r5, r3
 800bd92:	2600      	movs	r6, #0
 800bd94:	341a      	adds	r4, #26
 800bd96:	42b5      	cmp	r5, r6
 800bd98:	d11a      	bne.n	800bdd0 <_printf_common+0xc8>
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	e008      	b.n	800bdb0 <_printf_common+0xa8>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	4652      	mov	r2, sl
 800bda2:	4649      	mov	r1, r9
 800bda4:	4638      	mov	r0, r7
 800bda6:	47c0      	blx	r8
 800bda8:	3001      	adds	r0, #1
 800bdaa:	d103      	bne.n	800bdb4 <_printf_common+0xac>
 800bdac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdb4:	3501      	adds	r5, #1
 800bdb6:	e7c6      	b.n	800bd46 <_printf_common+0x3e>
 800bdb8:	18e1      	adds	r1, r4, r3
 800bdba:	1c5a      	adds	r2, r3, #1
 800bdbc:	2030      	movs	r0, #48	; 0x30
 800bdbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bdc2:	4422      	add	r2, r4
 800bdc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bdc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bdcc:	3302      	adds	r3, #2
 800bdce:	e7c7      	b.n	800bd60 <_printf_common+0x58>
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	4622      	mov	r2, r4
 800bdd4:	4649      	mov	r1, r9
 800bdd6:	4638      	mov	r0, r7
 800bdd8:	47c0      	blx	r8
 800bdda:	3001      	adds	r0, #1
 800bddc:	d0e6      	beq.n	800bdac <_printf_common+0xa4>
 800bdde:	3601      	adds	r6, #1
 800bde0:	e7d9      	b.n	800bd96 <_printf_common+0x8e>
	...

0800bde4 <_printf_i>:
 800bde4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bde8:	460c      	mov	r4, r1
 800bdea:	4691      	mov	r9, r2
 800bdec:	7e27      	ldrb	r7, [r4, #24]
 800bdee:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bdf0:	2f78      	cmp	r7, #120	; 0x78
 800bdf2:	4680      	mov	r8, r0
 800bdf4:	469a      	mov	sl, r3
 800bdf6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdfa:	d807      	bhi.n	800be0c <_printf_i+0x28>
 800bdfc:	2f62      	cmp	r7, #98	; 0x62
 800bdfe:	d80a      	bhi.n	800be16 <_printf_i+0x32>
 800be00:	2f00      	cmp	r7, #0
 800be02:	f000 80d8 	beq.w	800bfb6 <_printf_i+0x1d2>
 800be06:	2f58      	cmp	r7, #88	; 0x58
 800be08:	f000 80a3 	beq.w	800bf52 <_printf_i+0x16e>
 800be0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800be10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be14:	e03a      	b.n	800be8c <_printf_i+0xa8>
 800be16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be1a:	2b15      	cmp	r3, #21
 800be1c:	d8f6      	bhi.n	800be0c <_printf_i+0x28>
 800be1e:	a001      	add	r0, pc, #4	; (adr r0, 800be24 <_printf_i+0x40>)
 800be20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800be24:	0800be7d 	.word	0x0800be7d
 800be28:	0800be91 	.word	0x0800be91
 800be2c:	0800be0d 	.word	0x0800be0d
 800be30:	0800be0d 	.word	0x0800be0d
 800be34:	0800be0d 	.word	0x0800be0d
 800be38:	0800be0d 	.word	0x0800be0d
 800be3c:	0800be91 	.word	0x0800be91
 800be40:	0800be0d 	.word	0x0800be0d
 800be44:	0800be0d 	.word	0x0800be0d
 800be48:	0800be0d 	.word	0x0800be0d
 800be4c:	0800be0d 	.word	0x0800be0d
 800be50:	0800bf9d 	.word	0x0800bf9d
 800be54:	0800bec1 	.word	0x0800bec1
 800be58:	0800bf7f 	.word	0x0800bf7f
 800be5c:	0800be0d 	.word	0x0800be0d
 800be60:	0800be0d 	.word	0x0800be0d
 800be64:	0800bfbf 	.word	0x0800bfbf
 800be68:	0800be0d 	.word	0x0800be0d
 800be6c:	0800bec1 	.word	0x0800bec1
 800be70:	0800be0d 	.word	0x0800be0d
 800be74:	0800be0d 	.word	0x0800be0d
 800be78:	0800bf87 	.word	0x0800bf87
 800be7c:	680b      	ldr	r3, [r1, #0]
 800be7e:	1d1a      	adds	r2, r3, #4
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	600a      	str	r2, [r1, #0]
 800be84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800be88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be8c:	2301      	movs	r3, #1
 800be8e:	e0a3      	b.n	800bfd8 <_printf_i+0x1f4>
 800be90:	6825      	ldr	r5, [r4, #0]
 800be92:	6808      	ldr	r0, [r1, #0]
 800be94:	062e      	lsls	r6, r5, #24
 800be96:	f100 0304 	add.w	r3, r0, #4
 800be9a:	d50a      	bpl.n	800beb2 <_printf_i+0xce>
 800be9c:	6805      	ldr	r5, [r0, #0]
 800be9e:	600b      	str	r3, [r1, #0]
 800bea0:	2d00      	cmp	r5, #0
 800bea2:	da03      	bge.n	800beac <_printf_i+0xc8>
 800bea4:	232d      	movs	r3, #45	; 0x2d
 800bea6:	426d      	negs	r5, r5
 800bea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800beac:	485e      	ldr	r0, [pc, #376]	; (800c028 <_printf_i+0x244>)
 800beae:	230a      	movs	r3, #10
 800beb0:	e019      	b.n	800bee6 <_printf_i+0x102>
 800beb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800beb6:	6805      	ldr	r5, [r0, #0]
 800beb8:	600b      	str	r3, [r1, #0]
 800beba:	bf18      	it	ne
 800bebc:	b22d      	sxthne	r5, r5
 800bebe:	e7ef      	b.n	800bea0 <_printf_i+0xbc>
 800bec0:	680b      	ldr	r3, [r1, #0]
 800bec2:	6825      	ldr	r5, [r4, #0]
 800bec4:	1d18      	adds	r0, r3, #4
 800bec6:	6008      	str	r0, [r1, #0]
 800bec8:	0628      	lsls	r0, r5, #24
 800beca:	d501      	bpl.n	800bed0 <_printf_i+0xec>
 800becc:	681d      	ldr	r5, [r3, #0]
 800bece:	e002      	b.n	800bed6 <_printf_i+0xf2>
 800bed0:	0669      	lsls	r1, r5, #25
 800bed2:	d5fb      	bpl.n	800becc <_printf_i+0xe8>
 800bed4:	881d      	ldrh	r5, [r3, #0]
 800bed6:	4854      	ldr	r0, [pc, #336]	; (800c028 <_printf_i+0x244>)
 800bed8:	2f6f      	cmp	r7, #111	; 0x6f
 800beda:	bf0c      	ite	eq
 800bedc:	2308      	moveq	r3, #8
 800bede:	230a      	movne	r3, #10
 800bee0:	2100      	movs	r1, #0
 800bee2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bee6:	6866      	ldr	r6, [r4, #4]
 800bee8:	60a6      	str	r6, [r4, #8]
 800beea:	2e00      	cmp	r6, #0
 800beec:	bfa2      	ittt	ge
 800beee:	6821      	ldrge	r1, [r4, #0]
 800bef0:	f021 0104 	bicge.w	r1, r1, #4
 800bef4:	6021      	strge	r1, [r4, #0]
 800bef6:	b90d      	cbnz	r5, 800befc <_printf_i+0x118>
 800bef8:	2e00      	cmp	r6, #0
 800befa:	d04d      	beq.n	800bf98 <_printf_i+0x1b4>
 800befc:	4616      	mov	r6, r2
 800befe:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf02:	fb03 5711 	mls	r7, r3, r1, r5
 800bf06:	5dc7      	ldrb	r7, [r0, r7]
 800bf08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf0c:	462f      	mov	r7, r5
 800bf0e:	42bb      	cmp	r3, r7
 800bf10:	460d      	mov	r5, r1
 800bf12:	d9f4      	bls.n	800befe <_printf_i+0x11a>
 800bf14:	2b08      	cmp	r3, #8
 800bf16:	d10b      	bne.n	800bf30 <_printf_i+0x14c>
 800bf18:	6823      	ldr	r3, [r4, #0]
 800bf1a:	07df      	lsls	r7, r3, #31
 800bf1c:	d508      	bpl.n	800bf30 <_printf_i+0x14c>
 800bf1e:	6923      	ldr	r3, [r4, #16]
 800bf20:	6861      	ldr	r1, [r4, #4]
 800bf22:	4299      	cmp	r1, r3
 800bf24:	bfde      	ittt	le
 800bf26:	2330      	movle	r3, #48	; 0x30
 800bf28:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf2c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800bf30:	1b92      	subs	r2, r2, r6
 800bf32:	6122      	str	r2, [r4, #16]
 800bf34:	f8cd a000 	str.w	sl, [sp]
 800bf38:	464b      	mov	r3, r9
 800bf3a:	aa03      	add	r2, sp, #12
 800bf3c:	4621      	mov	r1, r4
 800bf3e:	4640      	mov	r0, r8
 800bf40:	f7ff fee2 	bl	800bd08 <_printf_common>
 800bf44:	3001      	adds	r0, #1
 800bf46:	d14c      	bne.n	800bfe2 <_printf_i+0x1fe>
 800bf48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf4c:	b004      	add	sp, #16
 800bf4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf52:	4835      	ldr	r0, [pc, #212]	; (800c028 <_printf_i+0x244>)
 800bf54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf58:	6823      	ldr	r3, [r4, #0]
 800bf5a:	680e      	ldr	r6, [r1, #0]
 800bf5c:	061f      	lsls	r7, r3, #24
 800bf5e:	f856 5b04 	ldr.w	r5, [r6], #4
 800bf62:	600e      	str	r6, [r1, #0]
 800bf64:	d514      	bpl.n	800bf90 <_printf_i+0x1ac>
 800bf66:	07d9      	lsls	r1, r3, #31
 800bf68:	bf44      	itt	mi
 800bf6a:	f043 0320 	orrmi.w	r3, r3, #32
 800bf6e:	6023      	strmi	r3, [r4, #0]
 800bf70:	b91d      	cbnz	r5, 800bf7a <_printf_i+0x196>
 800bf72:	6823      	ldr	r3, [r4, #0]
 800bf74:	f023 0320 	bic.w	r3, r3, #32
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	2310      	movs	r3, #16
 800bf7c:	e7b0      	b.n	800bee0 <_printf_i+0xfc>
 800bf7e:	6823      	ldr	r3, [r4, #0]
 800bf80:	f043 0320 	orr.w	r3, r3, #32
 800bf84:	6023      	str	r3, [r4, #0]
 800bf86:	2378      	movs	r3, #120	; 0x78
 800bf88:	4828      	ldr	r0, [pc, #160]	; (800c02c <_printf_i+0x248>)
 800bf8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf8e:	e7e3      	b.n	800bf58 <_printf_i+0x174>
 800bf90:	065e      	lsls	r6, r3, #25
 800bf92:	bf48      	it	mi
 800bf94:	b2ad      	uxthmi	r5, r5
 800bf96:	e7e6      	b.n	800bf66 <_printf_i+0x182>
 800bf98:	4616      	mov	r6, r2
 800bf9a:	e7bb      	b.n	800bf14 <_printf_i+0x130>
 800bf9c:	680b      	ldr	r3, [r1, #0]
 800bf9e:	6826      	ldr	r6, [r4, #0]
 800bfa0:	6960      	ldr	r0, [r4, #20]
 800bfa2:	1d1d      	adds	r5, r3, #4
 800bfa4:	600d      	str	r5, [r1, #0]
 800bfa6:	0635      	lsls	r5, r6, #24
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	d501      	bpl.n	800bfb0 <_printf_i+0x1cc>
 800bfac:	6018      	str	r0, [r3, #0]
 800bfae:	e002      	b.n	800bfb6 <_printf_i+0x1d2>
 800bfb0:	0671      	lsls	r1, r6, #25
 800bfb2:	d5fb      	bpl.n	800bfac <_printf_i+0x1c8>
 800bfb4:	8018      	strh	r0, [r3, #0]
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	6123      	str	r3, [r4, #16]
 800bfba:	4616      	mov	r6, r2
 800bfbc:	e7ba      	b.n	800bf34 <_printf_i+0x150>
 800bfbe:	680b      	ldr	r3, [r1, #0]
 800bfc0:	1d1a      	adds	r2, r3, #4
 800bfc2:	600a      	str	r2, [r1, #0]
 800bfc4:	681e      	ldr	r6, [r3, #0]
 800bfc6:	6862      	ldr	r2, [r4, #4]
 800bfc8:	2100      	movs	r1, #0
 800bfca:	4630      	mov	r0, r6
 800bfcc:	f7f4 f918 	bl	8000200 <memchr>
 800bfd0:	b108      	cbz	r0, 800bfd6 <_printf_i+0x1f2>
 800bfd2:	1b80      	subs	r0, r0, r6
 800bfd4:	6060      	str	r0, [r4, #4]
 800bfd6:	6863      	ldr	r3, [r4, #4]
 800bfd8:	6123      	str	r3, [r4, #16]
 800bfda:	2300      	movs	r3, #0
 800bfdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfe0:	e7a8      	b.n	800bf34 <_printf_i+0x150>
 800bfe2:	6923      	ldr	r3, [r4, #16]
 800bfe4:	4632      	mov	r2, r6
 800bfe6:	4649      	mov	r1, r9
 800bfe8:	4640      	mov	r0, r8
 800bfea:	47d0      	blx	sl
 800bfec:	3001      	adds	r0, #1
 800bfee:	d0ab      	beq.n	800bf48 <_printf_i+0x164>
 800bff0:	6823      	ldr	r3, [r4, #0]
 800bff2:	079b      	lsls	r3, r3, #30
 800bff4:	d413      	bmi.n	800c01e <_printf_i+0x23a>
 800bff6:	68e0      	ldr	r0, [r4, #12]
 800bff8:	9b03      	ldr	r3, [sp, #12]
 800bffa:	4298      	cmp	r0, r3
 800bffc:	bfb8      	it	lt
 800bffe:	4618      	movlt	r0, r3
 800c000:	e7a4      	b.n	800bf4c <_printf_i+0x168>
 800c002:	2301      	movs	r3, #1
 800c004:	4632      	mov	r2, r6
 800c006:	4649      	mov	r1, r9
 800c008:	4640      	mov	r0, r8
 800c00a:	47d0      	blx	sl
 800c00c:	3001      	adds	r0, #1
 800c00e:	d09b      	beq.n	800bf48 <_printf_i+0x164>
 800c010:	3501      	adds	r5, #1
 800c012:	68e3      	ldr	r3, [r4, #12]
 800c014:	9903      	ldr	r1, [sp, #12]
 800c016:	1a5b      	subs	r3, r3, r1
 800c018:	42ab      	cmp	r3, r5
 800c01a:	dcf2      	bgt.n	800c002 <_printf_i+0x21e>
 800c01c:	e7eb      	b.n	800bff6 <_printf_i+0x212>
 800c01e:	2500      	movs	r5, #0
 800c020:	f104 0619 	add.w	r6, r4, #25
 800c024:	e7f5      	b.n	800c012 <_printf_i+0x22e>
 800c026:	bf00      	nop
 800c028:	0800e62a 	.word	0x0800e62a
 800c02c:	0800e63b 	.word	0x0800e63b

0800c030 <sniprintf>:
 800c030:	b40c      	push	{r2, r3}
 800c032:	b530      	push	{r4, r5, lr}
 800c034:	4b17      	ldr	r3, [pc, #92]	; (800c094 <sniprintf+0x64>)
 800c036:	1e0c      	subs	r4, r1, #0
 800c038:	681d      	ldr	r5, [r3, #0]
 800c03a:	b09d      	sub	sp, #116	; 0x74
 800c03c:	da08      	bge.n	800c050 <sniprintf+0x20>
 800c03e:	238b      	movs	r3, #139	; 0x8b
 800c040:	602b      	str	r3, [r5, #0]
 800c042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c046:	b01d      	add	sp, #116	; 0x74
 800c048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c04c:	b002      	add	sp, #8
 800c04e:	4770      	bx	lr
 800c050:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c054:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c058:	bf14      	ite	ne
 800c05a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c05e:	4623      	moveq	r3, r4
 800c060:	9304      	str	r3, [sp, #16]
 800c062:	9307      	str	r3, [sp, #28]
 800c064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c068:	9002      	str	r0, [sp, #8]
 800c06a:	9006      	str	r0, [sp, #24]
 800c06c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c070:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c072:	ab21      	add	r3, sp, #132	; 0x84
 800c074:	a902      	add	r1, sp, #8
 800c076:	4628      	mov	r0, r5
 800c078:	9301      	str	r3, [sp, #4]
 800c07a:	f001 fb53 	bl	800d724 <_svfiprintf_r>
 800c07e:	1c43      	adds	r3, r0, #1
 800c080:	bfbc      	itt	lt
 800c082:	238b      	movlt	r3, #139	; 0x8b
 800c084:	602b      	strlt	r3, [r5, #0]
 800c086:	2c00      	cmp	r4, #0
 800c088:	d0dd      	beq.n	800c046 <sniprintf+0x16>
 800c08a:	9b02      	ldr	r3, [sp, #8]
 800c08c:	2200      	movs	r2, #0
 800c08e:	701a      	strb	r2, [r3, #0]
 800c090:	e7d9      	b.n	800c046 <sniprintf+0x16>
 800c092:	bf00      	nop
 800c094:	20000184 	.word	0x20000184

0800c098 <siprintf>:
 800c098:	b40e      	push	{r1, r2, r3}
 800c09a:	b500      	push	{lr}
 800c09c:	b09c      	sub	sp, #112	; 0x70
 800c09e:	ab1d      	add	r3, sp, #116	; 0x74
 800c0a0:	9002      	str	r0, [sp, #8]
 800c0a2:	9006      	str	r0, [sp, #24]
 800c0a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0a8:	4809      	ldr	r0, [pc, #36]	; (800c0d0 <siprintf+0x38>)
 800c0aa:	9107      	str	r1, [sp, #28]
 800c0ac:	9104      	str	r1, [sp, #16]
 800c0ae:	4909      	ldr	r1, [pc, #36]	; (800c0d4 <siprintf+0x3c>)
 800c0b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0b4:	9105      	str	r1, [sp, #20]
 800c0b6:	6800      	ldr	r0, [r0, #0]
 800c0b8:	9301      	str	r3, [sp, #4]
 800c0ba:	a902      	add	r1, sp, #8
 800c0bc:	f001 fb32 	bl	800d724 <_svfiprintf_r>
 800c0c0:	9b02      	ldr	r3, [sp, #8]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	701a      	strb	r2, [r3, #0]
 800c0c6:	b01c      	add	sp, #112	; 0x70
 800c0c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0cc:	b003      	add	sp, #12
 800c0ce:	4770      	bx	lr
 800c0d0:	20000184 	.word	0x20000184
 800c0d4:	ffff0208 	.word	0xffff0208

0800c0d8 <quorem>:
 800c0d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0dc:	6903      	ldr	r3, [r0, #16]
 800c0de:	690c      	ldr	r4, [r1, #16]
 800c0e0:	42a3      	cmp	r3, r4
 800c0e2:	4607      	mov	r7, r0
 800c0e4:	f2c0 8081 	blt.w	800c1ea <quorem+0x112>
 800c0e8:	3c01      	subs	r4, #1
 800c0ea:	f101 0814 	add.w	r8, r1, #20
 800c0ee:	f100 0514 	add.w	r5, r0, #20
 800c0f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0f6:	9301      	str	r3, [sp, #4]
 800c0f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c0fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c100:	3301      	adds	r3, #1
 800c102:	429a      	cmp	r2, r3
 800c104:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c108:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c10c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c110:	d331      	bcc.n	800c176 <quorem+0x9e>
 800c112:	f04f 0e00 	mov.w	lr, #0
 800c116:	4640      	mov	r0, r8
 800c118:	46ac      	mov	ip, r5
 800c11a:	46f2      	mov	sl, lr
 800c11c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c120:	b293      	uxth	r3, r2
 800c122:	fb06 e303 	mla	r3, r6, r3, lr
 800c126:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	ebaa 0303 	sub.w	r3, sl, r3
 800c130:	0c12      	lsrs	r2, r2, #16
 800c132:	f8dc a000 	ldr.w	sl, [ip]
 800c136:	fb06 e202 	mla	r2, r6, r2, lr
 800c13a:	fa13 f38a 	uxtah	r3, r3, sl
 800c13e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c142:	fa1f fa82 	uxth.w	sl, r2
 800c146:	f8dc 2000 	ldr.w	r2, [ip]
 800c14a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c14e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c152:	b29b      	uxth	r3, r3
 800c154:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c158:	4581      	cmp	r9, r0
 800c15a:	f84c 3b04 	str.w	r3, [ip], #4
 800c15e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c162:	d2db      	bcs.n	800c11c <quorem+0x44>
 800c164:	f855 300b 	ldr.w	r3, [r5, fp]
 800c168:	b92b      	cbnz	r3, 800c176 <quorem+0x9e>
 800c16a:	9b01      	ldr	r3, [sp, #4]
 800c16c:	3b04      	subs	r3, #4
 800c16e:	429d      	cmp	r5, r3
 800c170:	461a      	mov	r2, r3
 800c172:	d32e      	bcc.n	800c1d2 <quorem+0xfa>
 800c174:	613c      	str	r4, [r7, #16]
 800c176:	4638      	mov	r0, r7
 800c178:	f001 f8be 	bl	800d2f8 <__mcmp>
 800c17c:	2800      	cmp	r0, #0
 800c17e:	db24      	blt.n	800c1ca <quorem+0xf2>
 800c180:	3601      	adds	r6, #1
 800c182:	4628      	mov	r0, r5
 800c184:	f04f 0c00 	mov.w	ip, #0
 800c188:	f858 2b04 	ldr.w	r2, [r8], #4
 800c18c:	f8d0 e000 	ldr.w	lr, [r0]
 800c190:	b293      	uxth	r3, r2
 800c192:	ebac 0303 	sub.w	r3, ip, r3
 800c196:	0c12      	lsrs	r2, r2, #16
 800c198:	fa13 f38e 	uxtah	r3, r3, lr
 800c19c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c1a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1aa:	45c1      	cmp	r9, r8
 800c1ac:	f840 3b04 	str.w	r3, [r0], #4
 800c1b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c1b4:	d2e8      	bcs.n	800c188 <quorem+0xb0>
 800c1b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1be:	b922      	cbnz	r2, 800c1ca <quorem+0xf2>
 800c1c0:	3b04      	subs	r3, #4
 800c1c2:	429d      	cmp	r5, r3
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	d30a      	bcc.n	800c1de <quorem+0x106>
 800c1c8:	613c      	str	r4, [r7, #16]
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	b003      	add	sp, #12
 800c1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d2:	6812      	ldr	r2, [r2, #0]
 800c1d4:	3b04      	subs	r3, #4
 800c1d6:	2a00      	cmp	r2, #0
 800c1d8:	d1cc      	bne.n	800c174 <quorem+0x9c>
 800c1da:	3c01      	subs	r4, #1
 800c1dc:	e7c7      	b.n	800c16e <quorem+0x96>
 800c1de:	6812      	ldr	r2, [r2, #0]
 800c1e0:	3b04      	subs	r3, #4
 800c1e2:	2a00      	cmp	r2, #0
 800c1e4:	d1f0      	bne.n	800c1c8 <quorem+0xf0>
 800c1e6:	3c01      	subs	r4, #1
 800c1e8:	e7eb      	b.n	800c1c2 <quorem+0xea>
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	e7ee      	b.n	800c1cc <quorem+0xf4>
	...

0800c1f0 <_dtoa_r>:
 800c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f4:	ed2d 8b02 	vpush	{d8}
 800c1f8:	ec57 6b10 	vmov	r6, r7, d0
 800c1fc:	b095      	sub	sp, #84	; 0x54
 800c1fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c200:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c204:	9105      	str	r1, [sp, #20]
 800c206:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c20a:	4604      	mov	r4, r0
 800c20c:	9209      	str	r2, [sp, #36]	; 0x24
 800c20e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c210:	b975      	cbnz	r5, 800c230 <_dtoa_r+0x40>
 800c212:	2010      	movs	r0, #16
 800c214:	f000 fddc 	bl	800cdd0 <malloc>
 800c218:	4602      	mov	r2, r0
 800c21a:	6260      	str	r0, [r4, #36]	; 0x24
 800c21c:	b920      	cbnz	r0, 800c228 <_dtoa_r+0x38>
 800c21e:	4bb2      	ldr	r3, [pc, #712]	; (800c4e8 <_dtoa_r+0x2f8>)
 800c220:	21ea      	movs	r1, #234	; 0xea
 800c222:	48b2      	ldr	r0, [pc, #712]	; (800c4ec <_dtoa_r+0x2fc>)
 800c224:	f001 fb8e 	bl	800d944 <__assert_func>
 800c228:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c22c:	6005      	str	r5, [r0, #0]
 800c22e:	60c5      	str	r5, [r0, #12]
 800c230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c232:	6819      	ldr	r1, [r3, #0]
 800c234:	b151      	cbz	r1, 800c24c <_dtoa_r+0x5c>
 800c236:	685a      	ldr	r2, [r3, #4]
 800c238:	604a      	str	r2, [r1, #4]
 800c23a:	2301      	movs	r3, #1
 800c23c:	4093      	lsls	r3, r2
 800c23e:	608b      	str	r3, [r1, #8]
 800c240:	4620      	mov	r0, r4
 800c242:	f000 fe1b 	bl	800ce7c <_Bfree>
 800c246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c248:	2200      	movs	r2, #0
 800c24a:	601a      	str	r2, [r3, #0]
 800c24c:	1e3b      	subs	r3, r7, #0
 800c24e:	bfb9      	ittee	lt
 800c250:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c254:	9303      	strlt	r3, [sp, #12]
 800c256:	2300      	movge	r3, #0
 800c258:	f8c8 3000 	strge.w	r3, [r8]
 800c25c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c260:	4ba3      	ldr	r3, [pc, #652]	; (800c4f0 <_dtoa_r+0x300>)
 800c262:	bfbc      	itt	lt
 800c264:	2201      	movlt	r2, #1
 800c266:	f8c8 2000 	strlt.w	r2, [r8]
 800c26a:	ea33 0309 	bics.w	r3, r3, r9
 800c26e:	d11b      	bne.n	800c2a8 <_dtoa_r+0xb8>
 800c270:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c272:	f242 730f 	movw	r3, #9999	; 0x270f
 800c276:	6013      	str	r3, [r2, #0]
 800c278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c27c:	4333      	orrs	r3, r6
 800c27e:	f000 857a 	beq.w	800cd76 <_dtoa_r+0xb86>
 800c282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c284:	b963      	cbnz	r3, 800c2a0 <_dtoa_r+0xb0>
 800c286:	4b9b      	ldr	r3, [pc, #620]	; (800c4f4 <_dtoa_r+0x304>)
 800c288:	e024      	b.n	800c2d4 <_dtoa_r+0xe4>
 800c28a:	4b9b      	ldr	r3, [pc, #620]	; (800c4f8 <_dtoa_r+0x308>)
 800c28c:	9300      	str	r3, [sp, #0]
 800c28e:	3308      	adds	r3, #8
 800c290:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c292:	6013      	str	r3, [r2, #0]
 800c294:	9800      	ldr	r0, [sp, #0]
 800c296:	b015      	add	sp, #84	; 0x54
 800c298:	ecbd 8b02 	vpop	{d8}
 800c29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a0:	4b94      	ldr	r3, [pc, #592]	; (800c4f4 <_dtoa_r+0x304>)
 800c2a2:	9300      	str	r3, [sp, #0]
 800c2a4:	3303      	adds	r3, #3
 800c2a6:	e7f3      	b.n	800c290 <_dtoa_r+0xa0>
 800c2a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	ec51 0b17 	vmov	r0, r1, d7
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c2b8:	f7f4 fc16 	bl	8000ae8 <__aeabi_dcmpeq>
 800c2bc:	4680      	mov	r8, r0
 800c2be:	b158      	cbz	r0, 800c2d8 <_dtoa_r+0xe8>
 800c2c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	6013      	str	r3, [r2, #0]
 800c2c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	f000 8551 	beq.w	800cd70 <_dtoa_r+0xb80>
 800c2ce:	488b      	ldr	r0, [pc, #556]	; (800c4fc <_dtoa_r+0x30c>)
 800c2d0:	6018      	str	r0, [r3, #0]
 800c2d2:	1e43      	subs	r3, r0, #1
 800c2d4:	9300      	str	r3, [sp, #0]
 800c2d6:	e7dd      	b.n	800c294 <_dtoa_r+0xa4>
 800c2d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c2dc:	aa12      	add	r2, sp, #72	; 0x48
 800c2de:	a913      	add	r1, sp, #76	; 0x4c
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	f001 f8ad 	bl	800d440 <__d2b>
 800c2e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c2ea:	4683      	mov	fp, r0
 800c2ec:	2d00      	cmp	r5, #0
 800c2ee:	d07c      	beq.n	800c3ea <_dtoa_r+0x1fa>
 800c2f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c2f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c2fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c302:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c306:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c30a:	4b7d      	ldr	r3, [pc, #500]	; (800c500 <_dtoa_r+0x310>)
 800c30c:	2200      	movs	r2, #0
 800c30e:	4630      	mov	r0, r6
 800c310:	4639      	mov	r1, r7
 800c312:	f7f3 ffc9 	bl	80002a8 <__aeabi_dsub>
 800c316:	a36e      	add	r3, pc, #440	; (adr r3, 800c4d0 <_dtoa_r+0x2e0>)
 800c318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31c:	f7f4 f97c 	bl	8000618 <__aeabi_dmul>
 800c320:	a36d      	add	r3, pc, #436	; (adr r3, 800c4d8 <_dtoa_r+0x2e8>)
 800c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c326:	f7f3 ffc1 	bl	80002ac <__adddf3>
 800c32a:	4606      	mov	r6, r0
 800c32c:	4628      	mov	r0, r5
 800c32e:	460f      	mov	r7, r1
 800c330:	f7f4 f908 	bl	8000544 <__aeabi_i2d>
 800c334:	a36a      	add	r3, pc, #424	; (adr r3, 800c4e0 <_dtoa_r+0x2f0>)
 800c336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33a:	f7f4 f96d 	bl	8000618 <__aeabi_dmul>
 800c33e:	4602      	mov	r2, r0
 800c340:	460b      	mov	r3, r1
 800c342:	4630      	mov	r0, r6
 800c344:	4639      	mov	r1, r7
 800c346:	f7f3 ffb1 	bl	80002ac <__adddf3>
 800c34a:	4606      	mov	r6, r0
 800c34c:	460f      	mov	r7, r1
 800c34e:	f7f4 fc13 	bl	8000b78 <__aeabi_d2iz>
 800c352:	2200      	movs	r2, #0
 800c354:	4682      	mov	sl, r0
 800c356:	2300      	movs	r3, #0
 800c358:	4630      	mov	r0, r6
 800c35a:	4639      	mov	r1, r7
 800c35c:	f7f4 fbce 	bl	8000afc <__aeabi_dcmplt>
 800c360:	b148      	cbz	r0, 800c376 <_dtoa_r+0x186>
 800c362:	4650      	mov	r0, sl
 800c364:	f7f4 f8ee 	bl	8000544 <__aeabi_i2d>
 800c368:	4632      	mov	r2, r6
 800c36a:	463b      	mov	r3, r7
 800c36c:	f7f4 fbbc 	bl	8000ae8 <__aeabi_dcmpeq>
 800c370:	b908      	cbnz	r0, 800c376 <_dtoa_r+0x186>
 800c372:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c376:	f1ba 0f16 	cmp.w	sl, #22
 800c37a:	d854      	bhi.n	800c426 <_dtoa_r+0x236>
 800c37c:	4b61      	ldr	r3, [pc, #388]	; (800c504 <_dtoa_r+0x314>)
 800c37e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c386:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c38a:	f7f4 fbb7 	bl	8000afc <__aeabi_dcmplt>
 800c38e:	2800      	cmp	r0, #0
 800c390:	d04b      	beq.n	800c42a <_dtoa_r+0x23a>
 800c392:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c396:	2300      	movs	r3, #0
 800c398:	930e      	str	r3, [sp, #56]	; 0x38
 800c39a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c39c:	1b5d      	subs	r5, r3, r5
 800c39e:	1e6b      	subs	r3, r5, #1
 800c3a0:	9304      	str	r3, [sp, #16]
 800c3a2:	bf43      	ittte	mi
 800c3a4:	2300      	movmi	r3, #0
 800c3a6:	f1c5 0801 	rsbmi	r8, r5, #1
 800c3aa:	9304      	strmi	r3, [sp, #16]
 800c3ac:	f04f 0800 	movpl.w	r8, #0
 800c3b0:	f1ba 0f00 	cmp.w	sl, #0
 800c3b4:	db3b      	blt.n	800c42e <_dtoa_r+0x23e>
 800c3b6:	9b04      	ldr	r3, [sp, #16]
 800c3b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c3bc:	4453      	add	r3, sl
 800c3be:	9304      	str	r3, [sp, #16]
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	9306      	str	r3, [sp, #24]
 800c3c4:	9b05      	ldr	r3, [sp, #20]
 800c3c6:	2b09      	cmp	r3, #9
 800c3c8:	d869      	bhi.n	800c49e <_dtoa_r+0x2ae>
 800c3ca:	2b05      	cmp	r3, #5
 800c3cc:	bfc4      	itt	gt
 800c3ce:	3b04      	subgt	r3, #4
 800c3d0:	9305      	strgt	r3, [sp, #20]
 800c3d2:	9b05      	ldr	r3, [sp, #20]
 800c3d4:	f1a3 0302 	sub.w	r3, r3, #2
 800c3d8:	bfcc      	ite	gt
 800c3da:	2500      	movgt	r5, #0
 800c3dc:	2501      	movle	r5, #1
 800c3de:	2b03      	cmp	r3, #3
 800c3e0:	d869      	bhi.n	800c4b6 <_dtoa_r+0x2c6>
 800c3e2:	e8df f003 	tbb	[pc, r3]
 800c3e6:	4e2c      	.short	0x4e2c
 800c3e8:	5a4c      	.short	0x5a4c
 800c3ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c3ee:	441d      	add	r5, r3
 800c3f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c3f4:	2b20      	cmp	r3, #32
 800c3f6:	bfc1      	itttt	gt
 800c3f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c3fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c400:	fa09 f303 	lslgt.w	r3, r9, r3
 800c404:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c408:	bfda      	itte	le
 800c40a:	f1c3 0320 	rsble	r3, r3, #32
 800c40e:	fa06 f003 	lslle.w	r0, r6, r3
 800c412:	4318      	orrgt	r0, r3
 800c414:	f7f4 f886 	bl	8000524 <__aeabi_ui2d>
 800c418:	2301      	movs	r3, #1
 800c41a:	4606      	mov	r6, r0
 800c41c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c420:	3d01      	subs	r5, #1
 800c422:	9310      	str	r3, [sp, #64]	; 0x40
 800c424:	e771      	b.n	800c30a <_dtoa_r+0x11a>
 800c426:	2301      	movs	r3, #1
 800c428:	e7b6      	b.n	800c398 <_dtoa_r+0x1a8>
 800c42a:	900e      	str	r0, [sp, #56]	; 0x38
 800c42c:	e7b5      	b.n	800c39a <_dtoa_r+0x1aa>
 800c42e:	f1ca 0300 	rsb	r3, sl, #0
 800c432:	9306      	str	r3, [sp, #24]
 800c434:	2300      	movs	r3, #0
 800c436:	eba8 080a 	sub.w	r8, r8, sl
 800c43a:	930d      	str	r3, [sp, #52]	; 0x34
 800c43c:	e7c2      	b.n	800c3c4 <_dtoa_r+0x1d4>
 800c43e:	2300      	movs	r3, #0
 800c440:	9308      	str	r3, [sp, #32]
 800c442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c444:	2b00      	cmp	r3, #0
 800c446:	dc39      	bgt.n	800c4bc <_dtoa_r+0x2cc>
 800c448:	f04f 0901 	mov.w	r9, #1
 800c44c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c450:	464b      	mov	r3, r9
 800c452:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c456:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c458:	2200      	movs	r2, #0
 800c45a:	6042      	str	r2, [r0, #4]
 800c45c:	2204      	movs	r2, #4
 800c45e:	f102 0614 	add.w	r6, r2, #20
 800c462:	429e      	cmp	r6, r3
 800c464:	6841      	ldr	r1, [r0, #4]
 800c466:	d92f      	bls.n	800c4c8 <_dtoa_r+0x2d8>
 800c468:	4620      	mov	r0, r4
 800c46a:	f000 fcc7 	bl	800cdfc <_Balloc>
 800c46e:	9000      	str	r0, [sp, #0]
 800c470:	2800      	cmp	r0, #0
 800c472:	d14b      	bne.n	800c50c <_dtoa_r+0x31c>
 800c474:	4b24      	ldr	r3, [pc, #144]	; (800c508 <_dtoa_r+0x318>)
 800c476:	4602      	mov	r2, r0
 800c478:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c47c:	e6d1      	b.n	800c222 <_dtoa_r+0x32>
 800c47e:	2301      	movs	r3, #1
 800c480:	e7de      	b.n	800c440 <_dtoa_r+0x250>
 800c482:	2300      	movs	r3, #0
 800c484:	9308      	str	r3, [sp, #32]
 800c486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c488:	eb0a 0903 	add.w	r9, sl, r3
 800c48c:	f109 0301 	add.w	r3, r9, #1
 800c490:	2b01      	cmp	r3, #1
 800c492:	9301      	str	r3, [sp, #4]
 800c494:	bfb8      	it	lt
 800c496:	2301      	movlt	r3, #1
 800c498:	e7dd      	b.n	800c456 <_dtoa_r+0x266>
 800c49a:	2301      	movs	r3, #1
 800c49c:	e7f2      	b.n	800c484 <_dtoa_r+0x294>
 800c49e:	2501      	movs	r5, #1
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	9305      	str	r3, [sp, #20]
 800c4a4:	9508      	str	r5, [sp, #32]
 800c4a6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800c4b0:	2312      	movs	r3, #18
 800c4b2:	9209      	str	r2, [sp, #36]	; 0x24
 800c4b4:	e7cf      	b.n	800c456 <_dtoa_r+0x266>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	9308      	str	r3, [sp, #32]
 800c4ba:	e7f4      	b.n	800c4a6 <_dtoa_r+0x2b6>
 800c4bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c4c0:	f8cd 9004 	str.w	r9, [sp, #4]
 800c4c4:	464b      	mov	r3, r9
 800c4c6:	e7c6      	b.n	800c456 <_dtoa_r+0x266>
 800c4c8:	3101      	adds	r1, #1
 800c4ca:	6041      	str	r1, [r0, #4]
 800c4cc:	0052      	lsls	r2, r2, #1
 800c4ce:	e7c6      	b.n	800c45e <_dtoa_r+0x26e>
 800c4d0:	636f4361 	.word	0x636f4361
 800c4d4:	3fd287a7 	.word	0x3fd287a7
 800c4d8:	8b60c8b3 	.word	0x8b60c8b3
 800c4dc:	3fc68a28 	.word	0x3fc68a28
 800c4e0:	509f79fb 	.word	0x509f79fb
 800c4e4:	3fd34413 	.word	0x3fd34413
 800c4e8:	0800e659 	.word	0x0800e659
 800c4ec:	0800e670 	.word	0x0800e670
 800c4f0:	7ff00000 	.word	0x7ff00000
 800c4f4:	0800e655 	.word	0x0800e655
 800c4f8:	0800e64c 	.word	0x0800e64c
 800c4fc:	0800e629 	.word	0x0800e629
 800c500:	3ff80000 	.word	0x3ff80000
 800c504:	0800e768 	.word	0x0800e768
 800c508:	0800e6cf 	.word	0x0800e6cf
 800c50c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c50e:	9a00      	ldr	r2, [sp, #0]
 800c510:	601a      	str	r2, [r3, #0]
 800c512:	9b01      	ldr	r3, [sp, #4]
 800c514:	2b0e      	cmp	r3, #14
 800c516:	f200 80ad 	bhi.w	800c674 <_dtoa_r+0x484>
 800c51a:	2d00      	cmp	r5, #0
 800c51c:	f000 80aa 	beq.w	800c674 <_dtoa_r+0x484>
 800c520:	f1ba 0f00 	cmp.w	sl, #0
 800c524:	dd36      	ble.n	800c594 <_dtoa_r+0x3a4>
 800c526:	4ac3      	ldr	r2, [pc, #780]	; (800c834 <_dtoa_r+0x644>)
 800c528:	f00a 030f 	and.w	r3, sl, #15
 800c52c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c530:	ed93 7b00 	vldr	d7, [r3]
 800c534:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c538:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c53c:	eeb0 8a47 	vmov.f32	s16, s14
 800c540:	eef0 8a67 	vmov.f32	s17, s15
 800c544:	d016      	beq.n	800c574 <_dtoa_r+0x384>
 800c546:	4bbc      	ldr	r3, [pc, #752]	; (800c838 <_dtoa_r+0x648>)
 800c548:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c54c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c550:	f7f4 f98c 	bl	800086c <__aeabi_ddiv>
 800c554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c558:	f007 070f 	and.w	r7, r7, #15
 800c55c:	2503      	movs	r5, #3
 800c55e:	4eb6      	ldr	r6, [pc, #728]	; (800c838 <_dtoa_r+0x648>)
 800c560:	b957      	cbnz	r7, 800c578 <_dtoa_r+0x388>
 800c562:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c566:	ec53 2b18 	vmov	r2, r3, d8
 800c56a:	f7f4 f97f 	bl	800086c <__aeabi_ddiv>
 800c56e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c572:	e029      	b.n	800c5c8 <_dtoa_r+0x3d8>
 800c574:	2502      	movs	r5, #2
 800c576:	e7f2      	b.n	800c55e <_dtoa_r+0x36e>
 800c578:	07f9      	lsls	r1, r7, #31
 800c57a:	d508      	bpl.n	800c58e <_dtoa_r+0x39e>
 800c57c:	ec51 0b18 	vmov	r0, r1, d8
 800c580:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c584:	f7f4 f848 	bl	8000618 <__aeabi_dmul>
 800c588:	ec41 0b18 	vmov	d8, r0, r1
 800c58c:	3501      	adds	r5, #1
 800c58e:	107f      	asrs	r7, r7, #1
 800c590:	3608      	adds	r6, #8
 800c592:	e7e5      	b.n	800c560 <_dtoa_r+0x370>
 800c594:	f000 80a6 	beq.w	800c6e4 <_dtoa_r+0x4f4>
 800c598:	f1ca 0600 	rsb	r6, sl, #0
 800c59c:	4ba5      	ldr	r3, [pc, #660]	; (800c834 <_dtoa_r+0x644>)
 800c59e:	4fa6      	ldr	r7, [pc, #664]	; (800c838 <_dtoa_r+0x648>)
 800c5a0:	f006 020f 	and.w	r2, r6, #15
 800c5a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c5b0:	f7f4 f832 	bl	8000618 <__aeabi_dmul>
 800c5b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5b8:	1136      	asrs	r6, r6, #4
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	2502      	movs	r5, #2
 800c5be:	2e00      	cmp	r6, #0
 800c5c0:	f040 8085 	bne.w	800c6ce <_dtoa_r+0x4de>
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d1d2      	bne.n	800c56e <_dtoa_r+0x37e>
 800c5c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	f000 808c 	beq.w	800c6e8 <_dtoa_r+0x4f8>
 800c5d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c5d4:	4b99      	ldr	r3, [pc, #612]	; (800c83c <_dtoa_r+0x64c>)
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	4630      	mov	r0, r6
 800c5da:	4639      	mov	r1, r7
 800c5dc:	f7f4 fa8e 	bl	8000afc <__aeabi_dcmplt>
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	f000 8081 	beq.w	800c6e8 <_dtoa_r+0x4f8>
 800c5e6:	9b01      	ldr	r3, [sp, #4]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d07d      	beq.n	800c6e8 <_dtoa_r+0x4f8>
 800c5ec:	f1b9 0f00 	cmp.w	r9, #0
 800c5f0:	dd3c      	ble.n	800c66c <_dtoa_r+0x47c>
 800c5f2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800c5f6:	9307      	str	r3, [sp, #28]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	4b91      	ldr	r3, [pc, #580]	; (800c840 <_dtoa_r+0x650>)
 800c5fc:	4630      	mov	r0, r6
 800c5fe:	4639      	mov	r1, r7
 800c600:	f7f4 f80a 	bl	8000618 <__aeabi_dmul>
 800c604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c608:	3501      	adds	r5, #1
 800c60a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c60e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c612:	4628      	mov	r0, r5
 800c614:	f7f3 ff96 	bl	8000544 <__aeabi_i2d>
 800c618:	4632      	mov	r2, r6
 800c61a:	463b      	mov	r3, r7
 800c61c:	f7f3 fffc 	bl	8000618 <__aeabi_dmul>
 800c620:	4b88      	ldr	r3, [pc, #544]	; (800c844 <_dtoa_r+0x654>)
 800c622:	2200      	movs	r2, #0
 800c624:	f7f3 fe42 	bl	80002ac <__adddf3>
 800c628:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c62c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c630:	9303      	str	r3, [sp, #12]
 800c632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c634:	2b00      	cmp	r3, #0
 800c636:	d15c      	bne.n	800c6f2 <_dtoa_r+0x502>
 800c638:	4b83      	ldr	r3, [pc, #524]	; (800c848 <_dtoa_r+0x658>)
 800c63a:	2200      	movs	r2, #0
 800c63c:	4630      	mov	r0, r6
 800c63e:	4639      	mov	r1, r7
 800c640:	f7f3 fe32 	bl	80002a8 <__aeabi_dsub>
 800c644:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c648:	4606      	mov	r6, r0
 800c64a:	460f      	mov	r7, r1
 800c64c:	f7f4 fa74 	bl	8000b38 <__aeabi_dcmpgt>
 800c650:	2800      	cmp	r0, #0
 800c652:	f040 8296 	bne.w	800cb82 <_dtoa_r+0x992>
 800c656:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c65a:	4630      	mov	r0, r6
 800c65c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c660:	4639      	mov	r1, r7
 800c662:	f7f4 fa4b 	bl	8000afc <__aeabi_dcmplt>
 800c666:	2800      	cmp	r0, #0
 800c668:	f040 8288 	bne.w	800cb7c <_dtoa_r+0x98c>
 800c66c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c670:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c674:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c676:	2b00      	cmp	r3, #0
 800c678:	f2c0 8158 	blt.w	800c92c <_dtoa_r+0x73c>
 800c67c:	f1ba 0f0e 	cmp.w	sl, #14
 800c680:	f300 8154 	bgt.w	800c92c <_dtoa_r+0x73c>
 800c684:	4b6b      	ldr	r3, [pc, #428]	; (800c834 <_dtoa_r+0x644>)
 800c686:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c68a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c68e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c690:	2b00      	cmp	r3, #0
 800c692:	f280 80e3 	bge.w	800c85c <_dtoa_r+0x66c>
 800c696:	9b01      	ldr	r3, [sp, #4]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	f300 80df 	bgt.w	800c85c <_dtoa_r+0x66c>
 800c69e:	f040 826d 	bne.w	800cb7c <_dtoa_r+0x98c>
 800c6a2:	4b69      	ldr	r3, [pc, #420]	; (800c848 <_dtoa_r+0x658>)
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	4640      	mov	r0, r8
 800c6a8:	4649      	mov	r1, r9
 800c6aa:	f7f3 ffb5 	bl	8000618 <__aeabi_dmul>
 800c6ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6b2:	f7f4 fa37 	bl	8000b24 <__aeabi_dcmpge>
 800c6b6:	9e01      	ldr	r6, [sp, #4]
 800c6b8:	4637      	mov	r7, r6
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	f040 8243 	bne.w	800cb46 <_dtoa_r+0x956>
 800c6c0:	9d00      	ldr	r5, [sp, #0]
 800c6c2:	2331      	movs	r3, #49	; 0x31
 800c6c4:	f805 3b01 	strb.w	r3, [r5], #1
 800c6c8:	f10a 0a01 	add.w	sl, sl, #1
 800c6cc:	e23f      	b.n	800cb4e <_dtoa_r+0x95e>
 800c6ce:	07f2      	lsls	r2, r6, #31
 800c6d0:	d505      	bpl.n	800c6de <_dtoa_r+0x4ee>
 800c6d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6d6:	f7f3 ff9f 	bl	8000618 <__aeabi_dmul>
 800c6da:	3501      	adds	r5, #1
 800c6dc:	2301      	movs	r3, #1
 800c6de:	1076      	asrs	r6, r6, #1
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	e76c      	b.n	800c5be <_dtoa_r+0x3ce>
 800c6e4:	2502      	movs	r5, #2
 800c6e6:	e76f      	b.n	800c5c8 <_dtoa_r+0x3d8>
 800c6e8:	9b01      	ldr	r3, [sp, #4]
 800c6ea:	f8cd a01c 	str.w	sl, [sp, #28]
 800c6ee:	930c      	str	r3, [sp, #48]	; 0x30
 800c6f0:	e78d      	b.n	800c60e <_dtoa_r+0x41e>
 800c6f2:	9900      	ldr	r1, [sp, #0]
 800c6f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c6f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6f8:	4b4e      	ldr	r3, [pc, #312]	; (800c834 <_dtoa_r+0x644>)
 800c6fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c6fe:	4401      	add	r1, r0
 800c700:	9102      	str	r1, [sp, #8]
 800c702:	9908      	ldr	r1, [sp, #32]
 800c704:	eeb0 8a47 	vmov.f32	s16, s14
 800c708:	eef0 8a67 	vmov.f32	s17, s15
 800c70c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c710:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c714:	2900      	cmp	r1, #0
 800c716:	d045      	beq.n	800c7a4 <_dtoa_r+0x5b4>
 800c718:	494c      	ldr	r1, [pc, #304]	; (800c84c <_dtoa_r+0x65c>)
 800c71a:	2000      	movs	r0, #0
 800c71c:	f7f4 f8a6 	bl	800086c <__aeabi_ddiv>
 800c720:	ec53 2b18 	vmov	r2, r3, d8
 800c724:	f7f3 fdc0 	bl	80002a8 <__aeabi_dsub>
 800c728:	9d00      	ldr	r5, [sp, #0]
 800c72a:	ec41 0b18 	vmov	d8, r0, r1
 800c72e:	4639      	mov	r1, r7
 800c730:	4630      	mov	r0, r6
 800c732:	f7f4 fa21 	bl	8000b78 <__aeabi_d2iz>
 800c736:	900c      	str	r0, [sp, #48]	; 0x30
 800c738:	f7f3 ff04 	bl	8000544 <__aeabi_i2d>
 800c73c:	4602      	mov	r2, r0
 800c73e:	460b      	mov	r3, r1
 800c740:	4630      	mov	r0, r6
 800c742:	4639      	mov	r1, r7
 800c744:	f7f3 fdb0 	bl	80002a8 <__aeabi_dsub>
 800c748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c74a:	3330      	adds	r3, #48	; 0x30
 800c74c:	f805 3b01 	strb.w	r3, [r5], #1
 800c750:	ec53 2b18 	vmov	r2, r3, d8
 800c754:	4606      	mov	r6, r0
 800c756:	460f      	mov	r7, r1
 800c758:	f7f4 f9d0 	bl	8000afc <__aeabi_dcmplt>
 800c75c:	2800      	cmp	r0, #0
 800c75e:	d165      	bne.n	800c82c <_dtoa_r+0x63c>
 800c760:	4632      	mov	r2, r6
 800c762:	463b      	mov	r3, r7
 800c764:	4935      	ldr	r1, [pc, #212]	; (800c83c <_dtoa_r+0x64c>)
 800c766:	2000      	movs	r0, #0
 800c768:	f7f3 fd9e 	bl	80002a8 <__aeabi_dsub>
 800c76c:	ec53 2b18 	vmov	r2, r3, d8
 800c770:	f7f4 f9c4 	bl	8000afc <__aeabi_dcmplt>
 800c774:	2800      	cmp	r0, #0
 800c776:	f040 80b9 	bne.w	800c8ec <_dtoa_r+0x6fc>
 800c77a:	9b02      	ldr	r3, [sp, #8]
 800c77c:	429d      	cmp	r5, r3
 800c77e:	f43f af75 	beq.w	800c66c <_dtoa_r+0x47c>
 800c782:	4b2f      	ldr	r3, [pc, #188]	; (800c840 <_dtoa_r+0x650>)
 800c784:	ec51 0b18 	vmov	r0, r1, d8
 800c788:	2200      	movs	r2, #0
 800c78a:	f7f3 ff45 	bl	8000618 <__aeabi_dmul>
 800c78e:	4b2c      	ldr	r3, [pc, #176]	; (800c840 <_dtoa_r+0x650>)
 800c790:	ec41 0b18 	vmov	d8, r0, r1
 800c794:	2200      	movs	r2, #0
 800c796:	4630      	mov	r0, r6
 800c798:	4639      	mov	r1, r7
 800c79a:	f7f3 ff3d 	bl	8000618 <__aeabi_dmul>
 800c79e:	4606      	mov	r6, r0
 800c7a0:	460f      	mov	r7, r1
 800c7a2:	e7c4      	b.n	800c72e <_dtoa_r+0x53e>
 800c7a4:	ec51 0b17 	vmov	r0, r1, d7
 800c7a8:	f7f3 ff36 	bl	8000618 <__aeabi_dmul>
 800c7ac:	9b02      	ldr	r3, [sp, #8]
 800c7ae:	9d00      	ldr	r5, [sp, #0]
 800c7b0:	930c      	str	r3, [sp, #48]	; 0x30
 800c7b2:	ec41 0b18 	vmov	d8, r0, r1
 800c7b6:	4639      	mov	r1, r7
 800c7b8:	4630      	mov	r0, r6
 800c7ba:	f7f4 f9dd 	bl	8000b78 <__aeabi_d2iz>
 800c7be:	9011      	str	r0, [sp, #68]	; 0x44
 800c7c0:	f7f3 fec0 	bl	8000544 <__aeabi_i2d>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	4639      	mov	r1, r7
 800c7cc:	f7f3 fd6c 	bl	80002a8 <__aeabi_dsub>
 800c7d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7d2:	3330      	adds	r3, #48	; 0x30
 800c7d4:	f805 3b01 	strb.w	r3, [r5], #1
 800c7d8:	9b02      	ldr	r3, [sp, #8]
 800c7da:	429d      	cmp	r5, r3
 800c7dc:	4606      	mov	r6, r0
 800c7de:	460f      	mov	r7, r1
 800c7e0:	f04f 0200 	mov.w	r2, #0
 800c7e4:	d134      	bne.n	800c850 <_dtoa_r+0x660>
 800c7e6:	4b19      	ldr	r3, [pc, #100]	; (800c84c <_dtoa_r+0x65c>)
 800c7e8:	ec51 0b18 	vmov	r0, r1, d8
 800c7ec:	f7f3 fd5e 	bl	80002ac <__adddf3>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	4639      	mov	r1, r7
 800c7f8:	f7f4 f99e 	bl	8000b38 <__aeabi_dcmpgt>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	d175      	bne.n	800c8ec <_dtoa_r+0x6fc>
 800c800:	ec53 2b18 	vmov	r2, r3, d8
 800c804:	4911      	ldr	r1, [pc, #68]	; (800c84c <_dtoa_r+0x65c>)
 800c806:	2000      	movs	r0, #0
 800c808:	f7f3 fd4e 	bl	80002a8 <__aeabi_dsub>
 800c80c:	4602      	mov	r2, r0
 800c80e:	460b      	mov	r3, r1
 800c810:	4630      	mov	r0, r6
 800c812:	4639      	mov	r1, r7
 800c814:	f7f4 f972 	bl	8000afc <__aeabi_dcmplt>
 800c818:	2800      	cmp	r0, #0
 800c81a:	f43f af27 	beq.w	800c66c <_dtoa_r+0x47c>
 800c81e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c820:	1e6b      	subs	r3, r5, #1
 800c822:	930c      	str	r3, [sp, #48]	; 0x30
 800c824:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c828:	2b30      	cmp	r3, #48	; 0x30
 800c82a:	d0f8      	beq.n	800c81e <_dtoa_r+0x62e>
 800c82c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c830:	e04a      	b.n	800c8c8 <_dtoa_r+0x6d8>
 800c832:	bf00      	nop
 800c834:	0800e768 	.word	0x0800e768
 800c838:	0800e740 	.word	0x0800e740
 800c83c:	3ff00000 	.word	0x3ff00000
 800c840:	40240000 	.word	0x40240000
 800c844:	401c0000 	.word	0x401c0000
 800c848:	40140000 	.word	0x40140000
 800c84c:	3fe00000 	.word	0x3fe00000
 800c850:	4baf      	ldr	r3, [pc, #700]	; (800cb10 <_dtoa_r+0x920>)
 800c852:	f7f3 fee1 	bl	8000618 <__aeabi_dmul>
 800c856:	4606      	mov	r6, r0
 800c858:	460f      	mov	r7, r1
 800c85a:	e7ac      	b.n	800c7b6 <_dtoa_r+0x5c6>
 800c85c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c860:	9d00      	ldr	r5, [sp, #0]
 800c862:	4642      	mov	r2, r8
 800c864:	464b      	mov	r3, r9
 800c866:	4630      	mov	r0, r6
 800c868:	4639      	mov	r1, r7
 800c86a:	f7f3 ffff 	bl	800086c <__aeabi_ddiv>
 800c86e:	f7f4 f983 	bl	8000b78 <__aeabi_d2iz>
 800c872:	9002      	str	r0, [sp, #8]
 800c874:	f7f3 fe66 	bl	8000544 <__aeabi_i2d>
 800c878:	4642      	mov	r2, r8
 800c87a:	464b      	mov	r3, r9
 800c87c:	f7f3 fecc 	bl	8000618 <__aeabi_dmul>
 800c880:	4602      	mov	r2, r0
 800c882:	460b      	mov	r3, r1
 800c884:	4630      	mov	r0, r6
 800c886:	4639      	mov	r1, r7
 800c888:	f7f3 fd0e 	bl	80002a8 <__aeabi_dsub>
 800c88c:	9e02      	ldr	r6, [sp, #8]
 800c88e:	9f01      	ldr	r7, [sp, #4]
 800c890:	3630      	adds	r6, #48	; 0x30
 800c892:	f805 6b01 	strb.w	r6, [r5], #1
 800c896:	9e00      	ldr	r6, [sp, #0]
 800c898:	1bae      	subs	r6, r5, r6
 800c89a:	42b7      	cmp	r7, r6
 800c89c:	4602      	mov	r2, r0
 800c89e:	460b      	mov	r3, r1
 800c8a0:	d137      	bne.n	800c912 <_dtoa_r+0x722>
 800c8a2:	f7f3 fd03 	bl	80002ac <__adddf3>
 800c8a6:	4642      	mov	r2, r8
 800c8a8:	464b      	mov	r3, r9
 800c8aa:	4606      	mov	r6, r0
 800c8ac:	460f      	mov	r7, r1
 800c8ae:	f7f4 f943 	bl	8000b38 <__aeabi_dcmpgt>
 800c8b2:	b9c8      	cbnz	r0, 800c8e8 <_dtoa_r+0x6f8>
 800c8b4:	4642      	mov	r2, r8
 800c8b6:	464b      	mov	r3, r9
 800c8b8:	4630      	mov	r0, r6
 800c8ba:	4639      	mov	r1, r7
 800c8bc:	f7f4 f914 	bl	8000ae8 <__aeabi_dcmpeq>
 800c8c0:	b110      	cbz	r0, 800c8c8 <_dtoa_r+0x6d8>
 800c8c2:	9b02      	ldr	r3, [sp, #8]
 800c8c4:	07d9      	lsls	r1, r3, #31
 800c8c6:	d40f      	bmi.n	800c8e8 <_dtoa_r+0x6f8>
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	4659      	mov	r1, fp
 800c8cc:	f000 fad6 	bl	800ce7c <_Bfree>
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	702b      	strb	r3, [r5, #0]
 800c8d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8d6:	f10a 0001 	add.w	r0, sl, #1
 800c8da:	6018      	str	r0, [r3, #0]
 800c8dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	f43f acd8 	beq.w	800c294 <_dtoa_r+0xa4>
 800c8e4:	601d      	str	r5, [r3, #0]
 800c8e6:	e4d5      	b.n	800c294 <_dtoa_r+0xa4>
 800c8e8:	f8cd a01c 	str.w	sl, [sp, #28]
 800c8ec:	462b      	mov	r3, r5
 800c8ee:	461d      	mov	r5, r3
 800c8f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8f4:	2a39      	cmp	r2, #57	; 0x39
 800c8f6:	d108      	bne.n	800c90a <_dtoa_r+0x71a>
 800c8f8:	9a00      	ldr	r2, [sp, #0]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d1f7      	bne.n	800c8ee <_dtoa_r+0x6fe>
 800c8fe:	9a07      	ldr	r2, [sp, #28]
 800c900:	9900      	ldr	r1, [sp, #0]
 800c902:	3201      	adds	r2, #1
 800c904:	9207      	str	r2, [sp, #28]
 800c906:	2230      	movs	r2, #48	; 0x30
 800c908:	700a      	strb	r2, [r1, #0]
 800c90a:	781a      	ldrb	r2, [r3, #0]
 800c90c:	3201      	adds	r2, #1
 800c90e:	701a      	strb	r2, [r3, #0]
 800c910:	e78c      	b.n	800c82c <_dtoa_r+0x63c>
 800c912:	4b7f      	ldr	r3, [pc, #508]	; (800cb10 <_dtoa_r+0x920>)
 800c914:	2200      	movs	r2, #0
 800c916:	f7f3 fe7f 	bl	8000618 <__aeabi_dmul>
 800c91a:	2200      	movs	r2, #0
 800c91c:	2300      	movs	r3, #0
 800c91e:	4606      	mov	r6, r0
 800c920:	460f      	mov	r7, r1
 800c922:	f7f4 f8e1 	bl	8000ae8 <__aeabi_dcmpeq>
 800c926:	2800      	cmp	r0, #0
 800c928:	d09b      	beq.n	800c862 <_dtoa_r+0x672>
 800c92a:	e7cd      	b.n	800c8c8 <_dtoa_r+0x6d8>
 800c92c:	9a08      	ldr	r2, [sp, #32]
 800c92e:	2a00      	cmp	r2, #0
 800c930:	f000 80c4 	beq.w	800cabc <_dtoa_r+0x8cc>
 800c934:	9a05      	ldr	r2, [sp, #20]
 800c936:	2a01      	cmp	r2, #1
 800c938:	f300 80a8 	bgt.w	800ca8c <_dtoa_r+0x89c>
 800c93c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c93e:	2a00      	cmp	r2, #0
 800c940:	f000 80a0 	beq.w	800ca84 <_dtoa_r+0x894>
 800c944:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c948:	9e06      	ldr	r6, [sp, #24]
 800c94a:	4645      	mov	r5, r8
 800c94c:	9a04      	ldr	r2, [sp, #16]
 800c94e:	2101      	movs	r1, #1
 800c950:	441a      	add	r2, r3
 800c952:	4620      	mov	r0, r4
 800c954:	4498      	add	r8, r3
 800c956:	9204      	str	r2, [sp, #16]
 800c958:	f000 fb4c 	bl	800cff4 <__i2b>
 800c95c:	4607      	mov	r7, r0
 800c95e:	2d00      	cmp	r5, #0
 800c960:	dd0b      	ble.n	800c97a <_dtoa_r+0x78a>
 800c962:	9b04      	ldr	r3, [sp, #16]
 800c964:	2b00      	cmp	r3, #0
 800c966:	dd08      	ble.n	800c97a <_dtoa_r+0x78a>
 800c968:	42ab      	cmp	r3, r5
 800c96a:	9a04      	ldr	r2, [sp, #16]
 800c96c:	bfa8      	it	ge
 800c96e:	462b      	movge	r3, r5
 800c970:	eba8 0803 	sub.w	r8, r8, r3
 800c974:	1aed      	subs	r5, r5, r3
 800c976:	1ad3      	subs	r3, r2, r3
 800c978:	9304      	str	r3, [sp, #16]
 800c97a:	9b06      	ldr	r3, [sp, #24]
 800c97c:	b1fb      	cbz	r3, 800c9be <_dtoa_r+0x7ce>
 800c97e:	9b08      	ldr	r3, [sp, #32]
 800c980:	2b00      	cmp	r3, #0
 800c982:	f000 809f 	beq.w	800cac4 <_dtoa_r+0x8d4>
 800c986:	2e00      	cmp	r6, #0
 800c988:	dd11      	ble.n	800c9ae <_dtoa_r+0x7be>
 800c98a:	4639      	mov	r1, r7
 800c98c:	4632      	mov	r2, r6
 800c98e:	4620      	mov	r0, r4
 800c990:	f000 fbec 	bl	800d16c <__pow5mult>
 800c994:	465a      	mov	r2, fp
 800c996:	4601      	mov	r1, r0
 800c998:	4607      	mov	r7, r0
 800c99a:	4620      	mov	r0, r4
 800c99c:	f000 fb40 	bl	800d020 <__multiply>
 800c9a0:	4659      	mov	r1, fp
 800c9a2:	9007      	str	r0, [sp, #28]
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	f000 fa69 	bl	800ce7c <_Bfree>
 800c9aa:	9b07      	ldr	r3, [sp, #28]
 800c9ac:	469b      	mov	fp, r3
 800c9ae:	9b06      	ldr	r3, [sp, #24]
 800c9b0:	1b9a      	subs	r2, r3, r6
 800c9b2:	d004      	beq.n	800c9be <_dtoa_r+0x7ce>
 800c9b4:	4659      	mov	r1, fp
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	f000 fbd8 	bl	800d16c <__pow5mult>
 800c9bc:	4683      	mov	fp, r0
 800c9be:	2101      	movs	r1, #1
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	f000 fb17 	bl	800cff4 <__i2b>
 800c9c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	4606      	mov	r6, r0
 800c9cc:	dd7c      	ble.n	800cac8 <_dtoa_r+0x8d8>
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	4601      	mov	r1, r0
 800c9d2:	4620      	mov	r0, r4
 800c9d4:	f000 fbca 	bl	800d16c <__pow5mult>
 800c9d8:	9b05      	ldr	r3, [sp, #20]
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	4606      	mov	r6, r0
 800c9de:	dd76      	ble.n	800cace <_dtoa_r+0x8de>
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	9306      	str	r3, [sp, #24]
 800c9e4:	6933      	ldr	r3, [r6, #16]
 800c9e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c9ea:	6918      	ldr	r0, [r3, #16]
 800c9ec:	f000 fab2 	bl	800cf54 <__hi0bits>
 800c9f0:	f1c0 0020 	rsb	r0, r0, #32
 800c9f4:	9b04      	ldr	r3, [sp, #16]
 800c9f6:	4418      	add	r0, r3
 800c9f8:	f010 001f 	ands.w	r0, r0, #31
 800c9fc:	f000 8086 	beq.w	800cb0c <_dtoa_r+0x91c>
 800ca00:	f1c0 0320 	rsb	r3, r0, #32
 800ca04:	2b04      	cmp	r3, #4
 800ca06:	dd7f      	ble.n	800cb08 <_dtoa_r+0x918>
 800ca08:	f1c0 001c 	rsb	r0, r0, #28
 800ca0c:	9b04      	ldr	r3, [sp, #16]
 800ca0e:	4403      	add	r3, r0
 800ca10:	4480      	add	r8, r0
 800ca12:	4405      	add	r5, r0
 800ca14:	9304      	str	r3, [sp, #16]
 800ca16:	f1b8 0f00 	cmp.w	r8, #0
 800ca1a:	dd05      	ble.n	800ca28 <_dtoa_r+0x838>
 800ca1c:	4659      	mov	r1, fp
 800ca1e:	4642      	mov	r2, r8
 800ca20:	4620      	mov	r0, r4
 800ca22:	f000 fbfd 	bl	800d220 <__lshift>
 800ca26:	4683      	mov	fp, r0
 800ca28:	9b04      	ldr	r3, [sp, #16]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	dd05      	ble.n	800ca3a <_dtoa_r+0x84a>
 800ca2e:	4631      	mov	r1, r6
 800ca30:	461a      	mov	r2, r3
 800ca32:	4620      	mov	r0, r4
 800ca34:	f000 fbf4 	bl	800d220 <__lshift>
 800ca38:	4606      	mov	r6, r0
 800ca3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d069      	beq.n	800cb14 <_dtoa_r+0x924>
 800ca40:	4631      	mov	r1, r6
 800ca42:	4658      	mov	r0, fp
 800ca44:	f000 fc58 	bl	800d2f8 <__mcmp>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	da63      	bge.n	800cb14 <_dtoa_r+0x924>
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	4659      	mov	r1, fp
 800ca50:	220a      	movs	r2, #10
 800ca52:	4620      	mov	r0, r4
 800ca54:	f000 fa34 	bl	800cec0 <__multadd>
 800ca58:	9b08      	ldr	r3, [sp, #32]
 800ca5a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ca5e:	4683      	mov	fp, r0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	f000 818f 	beq.w	800cd84 <_dtoa_r+0xb94>
 800ca66:	4639      	mov	r1, r7
 800ca68:	2300      	movs	r3, #0
 800ca6a:	220a      	movs	r2, #10
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f000 fa27 	bl	800cec0 <__multadd>
 800ca72:	f1b9 0f00 	cmp.w	r9, #0
 800ca76:	4607      	mov	r7, r0
 800ca78:	f300 808e 	bgt.w	800cb98 <_dtoa_r+0x9a8>
 800ca7c:	9b05      	ldr	r3, [sp, #20]
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	dc50      	bgt.n	800cb24 <_dtoa_r+0x934>
 800ca82:	e089      	b.n	800cb98 <_dtoa_r+0x9a8>
 800ca84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ca8a:	e75d      	b.n	800c948 <_dtoa_r+0x758>
 800ca8c:	9b01      	ldr	r3, [sp, #4]
 800ca8e:	1e5e      	subs	r6, r3, #1
 800ca90:	9b06      	ldr	r3, [sp, #24]
 800ca92:	42b3      	cmp	r3, r6
 800ca94:	bfbf      	itttt	lt
 800ca96:	9b06      	ldrlt	r3, [sp, #24]
 800ca98:	9606      	strlt	r6, [sp, #24]
 800ca9a:	1af2      	sublt	r2, r6, r3
 800ca9c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ca9e:	bfb6      	itet	lt
 800caa0:	189b      	addlt	r3, r3, r2
 800caa2:	1b9e      	subge	r6, r3, r6
 800caa4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800caa6:	9b01      	ldr	r3, [sp, #4]
 800caa8:	bfb8      	it	lt
 800caaa:	2600      	movlt	r6, #0
 800caac:	2b00      	cmp	r3, #0
 800caae:	bfb5      	itete	lt
 800cab0:	eba8 0503 	sublt.w	r5, r8, r3
 800cab4:	9b01      	ldrge	r3, [sp, #4]
 800cab6:	2300      	movlt	r3, #0
 800cab8:	4645      	movge	r5, r8
 800caba:	e747      	b.n	800c94c <_dtoa_r+0x75c>
 800cabc:	9e06      	ldr	r6, [sp, #24]
 800cabe:	9f08      	ldr	r7, [sp, #32]
 800cac0:	4645      	mov	r5, r8
 800cac2:	e74c      	b.n	800c95e <_dtoa_r+0x76e>
 800cac4:	9a06      	ldr	r2, [sp, #24]
 800cac6:	e775      	b.n	800c9b4 <_dtoa_r+0x7c4>
 800cac8:	9b05      	ldr	r3, [sp, #20]
 800caca:	2b01      	cmp	r3, #1
 800cacc:	dc18      	bgt.n	800cb00 <_dtoa_r+0x910>
 800cace:	9b02      	ldr	r3, [sp, #8]
 800cad0:	b9b3      	cbnz	r3, 800cb00 <_dtoa_r+0x910>
 800cad2:	9b03      	ldr	r3, [sp, #12]
 800cad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cad8:	b9a3      	cbnz	r3, 800cb04 <_dtoa_r+0x914>
 800cada:	9b03      	ldr	r3, [sp, #12]
 800cadc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cae0:	0d1b      	lsrs	r3, r3, #20
 800cae2:	051b      	lsls	r3, r3, #20
 800cae4:	b12b      	cbz	r3, 800caf2 <_dtoa_r+0x902>
 800cae6:	9b04      	ldr	r3, [sp, #16]
 800cae8:	3301      	adds	r3, #1
 800caea:	9304      	str	r3, [sp, #16]
 800caec:	f108 0801 	add.w	r8, r8, #1
 800caf0:	2301      	movs	r3, #1
 800caf2:	9306      	str	r3, [sp, #24]
 800caf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	f47f af74 	bne.w	800c9e4 <_dtoa_r+0x7f4>
 800cafc:	2001      	movs	r0, #1
 800cafe:	e779      	b.n	800c9f4 <_dtoa_r+0x804>
 800cb00:	2300      	movs	r3, #0
 800cb02:	e7f6      	b.n	800caf2 <_dtoa_r+0x902>
 800cb04:	9b02      	ldr	r3, [sp, #8]
 800cb06:	e7f4      	b.n	800caf2 <_dtoa_r+0x902>
 800cb08:	d085      	beq.n	800ca16 <_dtoa_r+0x826>
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	301c      	adds	r0, #28
 800cb0e:	e77d      	b.n	800ca0c <_dtoa_r+0x81c>
 800cb10:	40240000 	.word	0x40240000
 800cb14:	9b01      	ldr	r3, [sp, #4]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	dc38      	bgt.n	800cb8c <_dtoa_r+0x99c>
 800cb1a:	9b05      	ldr	r3, [sp, #20]
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	dd35      	ble.n	800cb8c <_dtoa_r+0x99c>
 800cb20:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cb24:	f1b9 0f00 	cmp.w	r9, #0
 800cb28:	d10d      	bne.n	800cb46 <_dtoa_r+0x956>
 800cb2a:	4631      	mov	r1, r6
 800cb2c:	464b      	mov	r3, r9
 800cb2e:	2205      	movs	r2, #5
 800cb30:	4620      	mov	r0, r4
 800cb32:	f000 f9c5 	bl	800cec0 <__multadd>
 800cb36:	4601      	mov	r1, r0
 800cb38:	4606      	mov	r6, r0
 800cb3a:	4658      	mov	r0, fp
 800cb3c:	f000 fbdc 	bl	800d2f8 <__mcmp>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	f73f adbd 	bgt.w	800c6c0 <_dtoa_r+0x4d0>
 800cb46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb48:	9d00      	ldr	r5, [sp, #0]
 800cb4a:	ea6f 0a03 	mvn.w	sl, r3
 800cb4e:	f04f 0800 	mov.w	r8, #0
 800cb52:	4631      	mov	r1, r6
 800cb54:	4620      	mov	r0, r4
 800cb56:	f000 f991 	bl	800ce7c <_Bfree>
 800cb5a:	2f00      	cmp	r7, #0
 800cb5c:	f43f aeb4 	beq.w	800c8c8 <_dtoa_r+0x6d8>
 800cb60:	f1b8 0f00 	cmp.w	r8, #0
 800cb64:	d005      	beq.n	800cb72 <_dtoa_r+0x982>
 800cb66:	45b8      	cmp	r8, r7
 800cb68:	d003      	beq.n	800cb72 <_dtoa_r+0x982>
 800cb6a:	4641      	mov	r1, r8
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	f000 f985 	bl	800ce7c <_Bfree>
 800cb72:	4639      	mov	r1, r7
 800cb74:	4620      	mov	r0, r4
 800cb76:	f000 f981 	bl	800ce7c <_Bfree>
 800cb7a:	e6a5      	b.n	800c8c8 <_dtoa_r+0x6d8>
 800cb7c:	2600      	movs	r6, #0
 800cb7e:	4637      	mov	r7, r6
 800cb80:	e7e1      	b.n	800cb46 <_dtoa_r+0x956>
 800cb82:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cb84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cb88:	4637      	mov	r7, r6
 800cb8a:	e599      	b.n	800c6c0 <_dtoa_r+0x4d0>
 800cb8c:	9b08      	ldr	r3, [sp, #32]
 800cb8e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	f000 80fd 	beq.w	800cd92 <_dtoa_r+0xba2>
 800cb98:	2d00      	cmp	r5, #0
 800cb9a:	dd05      	ble.n	800cba8 <_dtoa_r+0x9b8>
 800cb9c:	4639      	mov	r1, r7
 800cb9e:	462a      	mov	r2, r5
 800cba0:	4620      	mov	r0, r4
 800cba2:	f000 fb3d 	bl	800d220 <__lshift>
 800cba6:	4607      	mov	r7, r0
 800cba8:	9b06      	ldr	r3, [sp, #24]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d05c      	beq.n	800cc68 <_dtoa_r+0xa78>
 800cbae:	6879      	ldr	r1, [r7, #4]
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	f000 f923 	bl	800cdfc <_Balloc>
 800cbb6:	4605      	mov	r5, r0
 800cbb8:	b928      	cbnz	r0, 800cbc6 <_dtoa_r+0x9d6>
 800cbba:	4b80      	ldr	r3, [pc, #512]	; (800cdbc <_dtoa_r+0xbcc>)
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cbc2:	f7ff bb2e 	b.w	800c222 <_dtoa_r+0x32>
 800cbc6:	693a      	ldr	r2, [r7, #16]
 800cbc8:	3202      	adds	r2, #2
 800cbca:	0092      	lsls	r2, r2, #2
 800cbcc:	f107 010c 	add.w	r1, r7, #12
 800cbd0:	300c      	adds	r0, #12
 800cbd2:	f000 f905 	bl	800cde0 <memcpy>
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	4629      	mov	r1, r5
 800cbda:	4620      	mov	r0, r4
 800cbdc:	f000 fb20 	bl	800d220 <__lshift>
 800cbe0:	9b00      	ldr	r3, [sp, #0]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	9301      	str	r3, [sp, #4]
 800cbe6:	9b00      	ldr	r3, [sp, #0]
 800cbe8:	444b      	add	r3, r9
 800cbea:	9307      	str	r3, [sp, #28]
 800cbec:	9b02      	ldr	r3, [sp, #8]
 800cbee:	f003 0301 	and.w	r3, r3, #1
 800cbf2:	46b8      	mov	r8, r7
 800cbf4:	9306      	str	r3, [sp, #24]
 800cbf6:	4607      	mov	r7, r0
 800cbf8:	9b01      	ldr	r3, [sp, #4]
 800cbfa:	4631      	mov	r1, r6
 800cbfc:	3b01      	subs	r3, #1
 800cbfe:	4658      	mov	r0, fp
 800cc00:	9302      	str	r3, [sp, #8]
 800cc02:	f7ff fa69 	bl	800c0d8 <quorem>
 800cc06:	4603      	mov	r3, r0
 800cc08:	3330      	adds	r3, #48	; 0x30
 800cc0a:	9004      	str	r0, [sp, #16]
 800cc0c:	4641      	mov	r1, r8
 800cc0e:	4658      	mov	r0, fp
 800cc10:	9308      	str	r3, [sp, #32]
 800cc12:	f000 fb71 	bl	800d2f8 <__mcmp>
 800cc16:	463a      	mov	r2, r7
 800cc18:	4681      	mov	r9, r0
 800cc1a:	4631      	mov	r1, r6
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	f000 fb87 	bl	800d330 <__mdiff>
 800cc22:	68c2      	ldr	r2, [r0, #12]
 800cc24:	9b08      	ldr	r3, [sp, #32]
 800cc26:	4605      	mov	r5, r0
 800cc28:	bb02      	cbnz	r2, 800cc6c <_dtoa_r+0xa7c>
 800cc2a:	4601      	mov	r1, r0
 800cc2c:	4658      	mov	r0, fp
 800cc2e:	f000 fb63 	bl	800d2f8 <__mcmp>
 800cc32:	9b08      	ldr	r3, [sp, #32]
 800cc34:	4602      	mov	r2, r0
 800cc36:	4629      	mov	r1, r5
 800cc38:	4620      	mov	r0, r4
 800cc3a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800cc3e:	f000 f91d 	bl	800ce7c <_Bfree>
 800cc42:	9b05      	ldr	r3, [sp, #20]
 800cc44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc46:	9d01      	ldr	r5, [sp, #4]
 800cc48:	ea43 0102 	orr.w	r1, r3, r2
 800cc4c:	9b06      	ldr	r3, [sp, #24]
 800cc4e:	430b      	orrs	r3, r1
 800cc50:	9b08      	ldr	r3, [sp, #32]
 800cc52:	d10d      	bne.n	800cc70 <_dtoa_r+0xa80>
 800cc54:	2b39      	cmp	r3, #57	; 0x39
 800cc56:	d029      	beq.n	800ccac <_dtoa_r+0xabc>
 800cc58:	f1b9 0f00 	cmp.w	r9, #0
 800cc5c:	dd01      	ble.n	800cc62 <_dtoa_r+0xa72>
 800cc5e:	9b04      	ldr	r3, [sp, #16]
 800cc60:	3331      	adds	r3, #49	; 0x31
 800cc62:	9a02      	ldr	r2, [sp, #8]
 800cc64:	7013      	strb	r3, [r2, #0]
 800cc66:	e774      	b.n	800cb52 <_dtoa_r+0x962>
 800cc68:	4638      	mov	r0, r7
 800cc6a:	e7b9      	b.n	800cbe0 <_dtoa_r+0x9f0>
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	e7e2      	b.n	800cc36 <_dtoa_r+0xa46>
 800cc70:	f1b9 0f00 	cmp.w	r9, #0
 800cc74:	db06      	blt.n	800cc84 <_dtoa_r+0xa94>
 800cc76:	9905      	ldr	r1, [sp, #20]
 800cc78:	ea41 0909 	orr.w	r9, r1, r9
 800cc7c:	9906      	ldr	r1, [sp, #24]
 800cc7e:	ea59 0101 	orrs.w	r1, r9, r1
 800cc82:	d120      	bne.n	800ccc6 <_dtoa_r+0xad6>
 800cc84:	2a00      	cmp	r2, #0
 800cc86:	ddec      	ble.n	800cc62 <_dtoa_r+0xa72>
 800cc88:	4659      	mov	r1, fp
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	9301      	str	r3, [sp, #4]
 800cc90:	f000 fac6 	bl	800d220 <__lshift>
 800cc94:	4631      	mov	r1, r6
 800cc96:	4683      	mov	fp, r0
 800cc98:	f000 fb2e 	bl	800d2f8 <__mcmp>
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	9b01      	ldr	r3, [sp, #4]
 800cca0:	dc02      	bgt.n	800cca8 <_dtoa_r+0xab8>
 800cca2:	d1de      	bne.n	800cc62 <_dtoa_r+0xa72>
 800cca4:	07da      	lsls	r2, r3, #31
 800cca6:	d5dc      	bpl.n	800cc62 <_dtoa_r+0xa72>
 800cca8:	2b39      	cmp	r3, #57	; 0x39
 800ccaa:	d1d8      	bne.n	800cc5e <_dtoa_r+0xa6e>
 800ccac:	9a02      	ldr	r2, [sp, #8]
 800ccae:	2339      	movs	r3, #57	; 0x39
 800ccb0:	7013      	strb	r3, [r2, #0]
 800ccb2:	462b      	mov	r3, r5
 800ccb4:	461d      	mov	r5, r3
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ccbc:	2a39      	cmp	r2, #57	; 0x39
 800ccbe:	d050      	beq.n	800cd62 <_dtoa_r+0xb72>
 800ccc0:	3201      	adds	r2, #1
 800ccc2:	701a      	strb	r2, [r3, #0]
 800ccc4:	e745      	b.n	800cb52 <_dtoa_r+0x962>
 800ccc6:	2a00      	cmp	r2, #0
 800ccc8:	dd03      	ble.n	800ccd2 <_dtoa_r+0xae2>
 800ccca:	2b39      	cmp	r3, #57	; 0x39
 800cccc:	d0ee      	beq.n	800ccac <_dtoa_r+0xabc>
 800ccce:	3301      	adds	r3, #1
 800ccd0:	e7c7      	b.n	800cc62 <_dtoa_r+0xa72>
 800ccd2:	9a01      	ldr	r2, [sp, #4]
 800ccd4:	9907      	ldr	r1, [sp, #28]
 800ccd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ccda:	428a      	cmp	r2, r1
 800ccdc:	d02a      	beq.n	800cd34 <_dtoa_r+0xb44>
 800ccde:	4659      	mov	r1, fp
 800cce0:	2300      	movs	r3, #0
 800cce2:	220a      	movs	r2, #10
 800cce4:	4620      	mov	r0, r4
 800cce6:	f000 f8eb 	bl	800cec0 <__multadd>
 800ccea:	45b8      	cmp	r8, r7
 800ccec:	4683      	mov	fp, r0
 800ccee:	f04f 0300 	mov.w	r3, #0
 800ccf2:	f04f 020a 	mov.w	r2, #10
 800ccf6:	4641      	mov	r1, r8
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	d107      	bne.n	800cd0c <_dtoa_r+0xb1c>
 800ccfc:	f000 f8e0 	bl	800cec0 <__multadd>
 800cd00:	4680      	mov	r8, r0
 800cd02:	4607      	mov	r7, r0
 800cd04:	9b01      	ldr	r3, [sp, #4]
 800cd06:	3301      	adds	r3, #1
 800cd08:	9301      	str	r3, [sp, #4]
 800cd0a:	e775      	b.n	800cbf8 <_dtoa_r+0xa08>
 800cd0c:	f000 f8d8 	bl	800cec0 <__multadd>
 800cd10:	4639      	mov	r1, r7
 800cd12:	4680      	mov	r8, r0
 800cd14:	2300      	movs	r3, #0
 800cd16:	220a      	movs	r2, #10
 800cd18:	4620      	mov	r0, r4
 800cd1a:	f000 f8d1 	bl	800cec0 <__multadd>
 800cd1e:	4607      	mov	r7, r0
 800cd20:	e7f0      	b.n	800cd04 <_dtoa_r+0xb14>
 800cd22:	f1b9 0f00 	cmp.w	r9, #0
 800cd26:	9a00      	ldr	r2, [sp, #0]
 800cd28:	bfcc      	ite	gt
 800cd2a:	464d      	movgt	r5, r9
 800cd2c:	2501      	movle	r5, #1
 800cd2e:	4415      	add	r5, r2
 800cd30:	f04f 0800 	mov.w	r8, #0
 800cd34:	4659      	mov	r1, fp
 800cd36:	2201      	movs	r2, #1
 800cd38:	4620      	mov	r0, r4
 800cd3a:	9301      	str	r3, [sp, #4]
 800cd3c:	f000 fa70 	bl	800d220 <__lshift>
 800cd40:	4631      	mov	r1, r6
 800cd42:	4683      	mov	fp, r0
 800cd44:	f000 fad8 	bl	800d2f8 <__mcmp>
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	dcb2      	bgt.n	800ccb2 <_dtoa_r+0xac2>
 800cd4c:	d102      	bne.n	800cd54 <_dtoa_r+0xb64>
 800cd4e:	9b01      	ldr	r3, [sp, #4]
 800cd50:	07db      	lsls	r3, r3, #31
 800cd52:	d4ae      	bmi.n	800ccb2 <_dtoa_r+0xac2>
 800cd54:	462b      	mov	r3, r5
 800cd56:	461d      	mov	r5, r3
 800cd58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd5c:	2a30      	cmp	r2, #48	; 0x30
 800cd5e:	d0fa      	beq.n	800cd56 <_dtoa_r+0xb66>
 800cd60:	e6f7      	b.n	800cb52 <_dtoa_r+0x962>
 800cd62:	9a00      	ldr	r2, [sp, #0]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d1a5      	bne.n	800ccb4 <_dtoa_r+0xac4>
 800cd68:	f10a 0a01 	add.w	sl, sl, #1
 800cd6c:	2331      	movs	r3, #49	; 0x31
 800cd6e:	e779      	b.n	800cc64 <_dtoa_r+0xa74>
 800cd70:	4b13      	ldr	r3, [pc, #76]	; (800cdc0 <_dtoa_r+0xbd0>)
 800cd72:	f7ff baaf 	b.w	800c2d4 <_dtoa_r+0xe4>
 800cd76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f47f aa86 	bne.w	800c28a <_dtoa_r+0x9a>
 800cd7e:	4b11      	ldr	r3, [pc, #68]	; (800cdc4 <_dtoa_r+0xbd4>)
 800cd80:	f7ff baa8 	b.w	800c2d4 <_dtoa_r+0xe4>
 800cd84:	f1b9 0f00 	cmp.w	r9, #0
 800cd88:	dc03      	bgt.n	800cd92 <_dtoa_r+0xba2>
 800cd8a:	9b05      	ldr	r3, [sp, #20]
 800cd8c:	2b02      	cmp	r3, #2
 800cd8e:	f73f aec9 	bgt.w	800cb24 <_dtoa_r+0x934>
 800cd92:	9d00      	ldr	r5, [sp, #0]
 800cd94:	4631      	mov	r1, r6
 800cd96:	4658      	mov	r0, fp
 800cd98:	f7ff f99e 	bl	800c0d8 <quorem>
 800cd9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cda0:	f805 3b01 	strb.w	r3, [r5], #1
 800cda4:	9a00      	ldr	r2, [sp, #0]
 800cda6:	1aaa      	subs	r2, r5, r2
 800cda8:	4591      	cmp	r9, r2
 800cdaa:	ddba      	ble.n	800cd22 <_dtoa_r+0xb32>
 800cdac:	4659      	mov	r1, fp
 800cdae:	2300      	movs	r3, #0
 800cdb0:	220a      	movs	r2, #10
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f000 f884 	bl	800cec0 <__multadd>
 800cdb8:	4683      	mov	fp, r0
 800cdba:	e7eb      	b.n	800cd94 <_dtoa_r+0xba4>
 800cdbc:	0800e6cf 	.word	0x0800e6cf
 800cdc0:	0800e628 	.word	0x0800e628
 800cdc4:	0800e64c 	.word	0x0800e64c

0800cdc8 <_localeconv_r>:
 800cdc8:	4800      	ldr	r0, [pc, #0]	; (800cdcc <_localeconv_r+0x4>)
 800cdca:	4770      	bx	lr
 800cdcc:	200002d8 	.word	0x200002d8

0800cdd0 <malloc>:
 800cdd0:	4b02      	ldr	r3, [pc, #8]	; (800cddc <malloc+0xc>)
 800cdd2:	4601      	mov	r1, r0
 800cdd4:	6818      	ldr	r0, [r3, #0]
 800cdd6:	f000 bbef 	b.w	800d5b8 <_malloc_r>
 800cdda:	bf00      	nop
 800cddc:	20000184 	.word	0x20000184

0800cde0 <memcpy>:
 800cde0:	440a      	add	r2, r1
 800cde2:	4291      	cmp	r1, r2
 800cde4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cde8:	d100      	bne.n	800cdec <memcpy+0xc>
 800cdea:	4770      	bx	lr
 800cdec:	b510      	push	{r4, lr}
 800cdee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdf6:	4291      	cmp	r1, r2
 800cdf8:	d1f9      	bne.n	800cdee <memcpy+0xe>
 800cdfa:	bd10      	pop	{r4, pc}

0800cdfc <_Balloc>:
 800cdfc:	b570      	push	{r4, r5, r6, lr}
 800cdfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ce00:	4604      	mov	r4, r0
 800ce02:	460d      	mov	r5, r1
 800ce04:	b976      	cbnz	r6, 800ce24 <_Balloc+0x28>
 800ce06:	2010      	movs	r0, #16
 800ce08:	f7ff ffe2 	bl	800cdd0 <malloc>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	6260      	str	r0, [r4, #36]	; 0x24
 800ce10:	b920      	cbnz	r0, 800ce1c <_Balloc+0x20>
 800ce12:	4b18      	ldr	r3, [pc, #96]	; (800ce74 <_Balloc+0x78>)
 800ce14:	4818      	ldr	r0, [pc, #96]	; (800ce78 <_Balloc+0x7c>)
 800ce16:	2166      	movs	r1, #102	; 0x66
 800ce18:	f000 fd94 	bl	800d944 <__assert_func>
 800ce1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce20:	6006      	str	r6, [r0, #0]
 800ce22:	60c6      	str	r6, [r0, #12]
 800ce24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ce26:	68f3      	ldr	r3, [r6, #12]
 800ce28:	b183      	cbz	r3, 800ce4c <_Balloc+0x50>
 800ce2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce32:	b9b8      	cbnz	r0, 800ce64 <_Balloc+0x68>
 800ce34:	2101      	movs	r1, #1
 800ce36:	fa01 f605 	lsl.w	r6, r1, r5
 800ce3a:	1d72      	adds	r2, r6, #5
 800ce3c:	0092      	lsls	r2, r2, #2
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f000 fb5a 	bl	800d4f8 <_calloc_r>
 800ce44:	b160      	cbz	r0, 800ce60 <_Balloc+0x64>
 800ce46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce4a:	e00e      	b.n	800ce6a <_Balloc+0x6e>
 800ce4c:	2221      	movs	r2, #33	; 0x21
 800ce4e:	2104      	movs	r1, #4
 800ce50:	4620      	mov	r0, r4
 800ce52:	f000 fb51 	bl	800d4f8 <_calloc_r>
 800ce56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce58:	60f0      	str	r0, [r6, #12]
 800ce5a:	68db      	ldr	r3, [r3, #12]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d1e4      	bne.n	800ce2a <_Balloc+0x2e>
 800ce60:	2000      	movs	r0, #0
 800ce62:	bd70      	pop	{r4, r5, r6, pc}
 800ce64:	6802      	ldr	r2, [r0, #0]
 800ce66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce70:	e7f7      	b.n	800ce62 <_Balloc+0x66>
 800ce72:	bf00      	nop
 800ce74:	0800e659 	.word	0x0800e659
 800ce78:	0800e6e0 	.word	0x0800e6e0

0800ce7c <_Bfree>:
 800ce7c:	b570      	push	{r4, r5, r6, lr}
 800ce7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ce80:	4605      	mov	r5, r0
 800ce82:	460c      	mov	r4, r1
 800ce84:	b976      	cbnz	r6, 800cea4 <_Bfree+0x28>
 800ce86:	2010      	movs	r0, #16
 800ce88:	f7ff ffa2 	bl	800cdd0 <malloc>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	6268      	str	r0, [r5, #36]	; 0x24
 800ce90:	b920      	cbnz	r0, 800ce9c <_Bfree+0x20>
 800ce92:	4b09      	ldr	r3, [pc, #36]	; (800ceb8 <_Bfree+0x3c>)
 800ce94:	4809      	ldr	r0, [pc, #36]	; (800cebc <_Bfree+0x40>)
 800ce96:	218a      	movs	r1, #138	; 0x8a
 800ce98:	f000 fd54 	bl	800d944 <__assert_func>
 800ce9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cea0:	6006      	str	r6, [r0, #0]
 800cea2:	60c6      	str	r6, [r0, #12]
 800cea4:	b13c      	cbz	r4, 800ceb6 <_Bfree+0x3a>
 800cea6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cea8:	6862      	ldr	r2, [r4, #4]
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ceb0:	6021      	str	r1, [r4, #0]
 800ceb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ceb6:	bd70      	pop	{r4, r5, r6, pc}
 800ceb8:	0800e659 	.word	0x0800e659
 800cebc:	0800e6e0 	.word	0x0800e6e0

0800cec0 <__multadd>:
 800cec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cec4:	690e      	ldr	r6, [r1, #16]
 800cec6:	4607      	mov	r7, r0
 800cec8:	4698      	mov	r8, r3
 800ceca:	460c      	mov	r4, r1
 800cecc:	f101 0014 	add.w	r0, r1, #20
 800ced0:	2300      	movs	r3, #0
 800ced2:	6805      	ldr	r5, [r0, #0]
 800ced4:	b2a9      	uxth	r1, r5
 800ced6:	fb02 8101 	mla	r1, r2, r1, r8
 800ceda:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800cede:	0c2d      	lsrs	r5, r5, #16
 800cee0:	fb02 c505 	mla	r5, r2, r5, ip
 800cee4:	b289      	uxth	r1, r1
 800cee6:	3301      	adds	r3, #1
 800cee8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ceec:	429e      	cmp	r6, r3
 800ceee:	f840 1b04 	str.w	r1, [r0], #4
 800cef2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800cef6:	dcec      	bgt.n	800ced2 <__multadd+0x12>
 800cef8:	f1b8 0f00 	cmp.w	r8, #0
 800cefc:	d022      	beq.n	800cf44 <__multadd+0x84>
 800cefe:	68a3      	ldr	r3, [r4, #8]
 800cf00:	42b3      	cmp	r3, r6
 800cf02:	dc19      	bgt.n	800cf38 <__multadd+0x78>
 800cf04:	6861      	ldr	r1, [r4, #4]
 800cf06:	4638      	mov	r0, r7
 800cf08:	3101      	adds	r1, #1
 800cf0a:	f7ff ff77 	bl	800cdfc <_Balloc>
 800cf0e:	4605      	mov	r5, r0
 800cf10:	b928      	cbnz	r0, 800cf1e <__multadd+0x5e>
 800cf12:	4602      	mov	r2, r0
 800cf14:	4b0d      	ldr	r3, [pc, #52]	; (800cf4c <__multadd+0x8c>)
 800cf16:	480e      	ldr	r0, [pc, #56]	; (800cf50 <__multadd+0x90>)
 800cf18:	21b5      	movs	r1, #181	; 0xb5
 800cf1a:	f000 fd13 	bl	800d944 <__assert_func>
 800cf1e:	6922      	ldr	r2, [r4, #16]
 800cf20:	3202      	adds	r2, #2
 800cf22:	f104 010c 	add.w	r1, r4, #12
 800cf26:	0092      	lsls	r2, r2, #2
 800cf28:	300c      	adds	r0, #12
 800cf2a:	f7ff ff59 	bl	800cde0 <memcpy>
 800cf2e:	4621      	mov	r1, r4
 800cf30:	4638      	mov	r0, r7
 800cf32:	f7ff ffa3 	bl	800ce7c <_Bfree>
 800cf36:	462c      	mov	r4, r5
 800cf38:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cf3c:	3601      	adds	r6, #1
 800cf3e:	f8c3 8014 	str.w	r8, [r3, #20]
 800cf42:	6126      	str	r6, [r4, #16]
 800cf44:	4620      	mov	r0, r4
 800cf46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf4a:	bf00      	nop
 800cf4c:	0800e6cf 	.word	0x0800e6cf
 800cf50:	0800e6e0 	.word	0x0800e6e0

0800cf54 <__hi0bits>:
 800cf54:	0c03      	lsrs	r3, r0, #16
 800cf56:	041b      	lsls	r3, r3, #16
 800cf58:	b9d3      	cbnz	r3, 800cf90 <__hi0bits+0x3c>
 800cf5a:	0400      	lsls	r0, r0, #16
 800cf5c:	2310      	movs	r3, #16
 800cf5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cf62:	bf04      	itt	eq
 800cf64:	0200      	lsleq	r0, r0, #8
 800cf66:	3308      	addeq	r3, #8
 800cf68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cf6c:	bf04      	itt	eq
 800cf6e:	0100      	lsleq	r0, r0, #4
 800cf70:	3304      	addeq	r3, #4
 800cf72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cf76:	bf04      	itt	eq
 800cf78:	0080      	lsleq	r0, r0, #2
 800cf7a:	3302      	addeq	r3, #2
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	db05      	blt.n	800cf8c <__hi0bits+0x38>
 800cf80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cf84:	f103 0301 	add.w	r3, r3, #1
 800cf88:	bf08      	it	eq
 800cf8a:	2320      	moveq	r3, #32
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	4770      	bx	lr
 800cf90:	2300      	movs	r3, #0
 800cf92:	e7e4      	b.n	800cf5e <__hi0bits+0xa>

0800cf94 <__lo0bits>:
 800cf94:	6803      	ldr	r3, [r0, #0]
 800cf96:	f013 0207 	ands.w	r2, r3, #7
 800cf9a:	4601      	mov	r1, r0
 800cf9c:	d00b      	beq.n	800cfb6 <__lo0bits+0x22>
 800cf9e:	07da      	lsls	r2, r3, #31
 800cfa0:	d424      	bmi.n	800cfec <__lo0bits+0x58>
 800cfa2:	0798      	lsls	r0, r3, #30
 800cfa4:	bf49      	itett	mi
 800cfa6:	085b      	lsrmi	r3, r3, #1
 800cfa8:	089b      	lsrpl	r3, r3, #2
 800cfaa:	2001      	movmi	r0, #1
 800cfac:	600b      	strmi	r3, [r1, #0]
 800cfae:	bf5c      	itt	pl
 800cfb0:	600b      	strpl	r3, [r1, #0]
 800cfb2:	2002      	movpl	r0, #2
 800cfb4:	4770      	bx	lr
 800cfb6:	b298      	uxth	r0, r3
 800cfb8:	b9b0      	cbnz	r0, 800cfe8 <__lo0bits+0x54>
 800cfba:	0c1b      	lsrs	r3, r3, #16
 800cfbc:	2010      	movs	r0, #16
 800cfbe:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cfc2:	bf04      	itt	eq
 800cfc4:	0a1b      	lsreq	r3, r3, #8
 800cfc6:	3008      	addeq	r0, #8
 800cfc8:	071a      	lsls	r2, r3, #28
 800cfca:	bf04      	itt	eq
 800cfcc:	091b      	lsreq	r3, r3, #4
 800cfce:	3004      	addeq	r0, #4
 800cfd0:	079a      	lsls	r2, r3, #30
 800cfd2:	bf04      	itt	eq
 800cfd4:	089b      	lsreq	r3, r3, #2
 800cfd6:	3002      	addeq	r0, #2
 800cfd8:	07da      	lsls	r2, r3, #31
 800cfda:	d403      	bmi.n	800cfe4 <__lo0bits+0x50>
 800cfdc:	085b      	lsrs	r3, r3, #1
 800cfde:	f100 0001 	add.w	r0, r0, #1
 800cfe2:	d005      	beq.n	800cff0 <__lo0bits+0x5c>
 800cfe4:	600b      	str	r3, [r1, #0]
 800cfe6:	4770      	bx	lr
 800cfe8:	4610      	mov	r0, r2
 800cfea:	e7e8      	b.n	800cfbe <__lo0bits+0x2a>
 800cfec:	2000      	movs	r0, #0
 800cfee:	4770      	bx	lr
 800cff0:	2020      	movs	r0, #32
 800cff2:	4770      	bx	lr

0800cff4 <__i2b>:
 800cff4:	b510      	push	{r4, lr}
 800cff6:	460c      	mov	r4, r1
 800cff8:	2101      	movs	r1, #1
 800cffa:	f7ff feff 	bl	800cdfc <_Balloc>
 800cffe:	4602      	mov	r2, r0
 800d000:	b928      	cbnz	r0, 800d00e <__i2b+0x1a>
 800d002:	4b05      	ldr	r3, [pc, #20]	; (800d018 <__i2b+0x24>)
 800d004:	4805      	ldr	r0, [pc, #20]	; (800d01c <__i2b+0x28>)
 800d006:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d00a:	f000 fc9b 	bl	800d944 <__assert_func>
 800d00e:	2301      	movs	r3, #1
 800d010:	6144      	str	r4, [r0, #20]
 800d012:	6103      	str	r3, [r0, #16]
 800d014:	bd10      	pop	{r4, pc}
 800d016:	bf00      	nop
 800d018:	0800e6cf 	.word	0x0800e6cf
 800d01c:	0800e6e0 	.word	0x0800e6e0

0800d020 <__multiply>:
 800d020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d024:	4614      	mov	r4, r2
 800d026:	690a      	ldr	r2, [r1, #16]
 800d028:	6923      	ldr	r3, [r4, #16]
 800d02a:	429a      	cmp	r2, r3
 800d02c:	bfb8      	it	lt
 800d02e:	460b      	movlt	r3, r1
 800d030:	460d      	mov	r5, r1
 800d032:	bfbc      	itt	lt
 800d034:	4625      	movlt	r5, r4
 800d036:	461c      	movlt	r4, r3
 800d038:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d03c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d040:	68ab      	ldr	r3, [r5, #8]
 800d042:	6869      	ldr	r1, [r5, #4]
 800d044:	eb0a 0709 	add.w	r7, sl, r9
 800d048:	42bb      	cmp	r3, r7
 800d04a:	b085      	sub	sp, #20
 800d04c:	bfb8      	it	lt
 800d04e:	3101      	addlt	r1, #1
 800d050:	f7ff fed4 	bl	800cdfc <_Balloc>
 800d054:	b930      	cbnz	r0, 800d064 <__multiply+0x44>
 800d056:	4602      	mov	r2, r0
 800d058:	4b42      	ldr	r3, [pc, #264]	; (800d164 <__multiply+0x144>)
 800d05a:	4843      	ldr	r0, [pc, #268]	; (800d168 <__multiply+0x148>)
 800d05c:	f240 115d 	movw	r1, #349	; 0x15d
 800d060:	f000 fc70 	bl	800d944 <__assert_func>
 800d064:	f100 0614 	add.w	r6, r0, #20
 800d068:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d06c:	4633      	mov	r3, r6
 800d06e:	2200      	movs	r2, #0
 800d070:	4543      	cmp	r3, r8
 800d072:	d31e      	bcc.n	800d0b2 <__multiply+0x92>
 800d074:	f105 0c14 	add.w	ip, r5, #20
 800d078:	f104 0314 	add.w	r3, r4, #20
 800d07c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d080:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d084:	9202      	str	r2, [sp, #8]
 800d086:	ebac 0205 	sub.w	r2, ip, r5
 800d08a:	3a15      	subs	r2, #21
 800d08c:	f022 0203 	bic.w	r2, r2, #3
 800d090:	3204      	adds	r2, #4
 800d092:	f105 0115 	add.w	r1, r5, #21
 800d096:	458c      	cmp	ip, r1
 800d098:	bf38      	it	cc
 800d09a:	2204      	movcc	r2, #4
 800d09c:	9201      	str	r2, [sp, #4]
 800d09e:	9a02      	ldr	r2, [sp, #8]
 800d0a0:	9303      	str	r3, [sp, #12]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d808      	bhi.n	800d0b8 <__multiply+0x98>
 800d0a6:	2f00      	cmp	r7, #0
 800d0a8:	dc55      	bgt.n	800d156 <__multiply+0x136>
 800d0aa:	6107      	str	r7, [r0, #16]
 800d0ac:	b005      	add	sp, #20
 800d0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b2:	f843 2b04 	str.w	r2, [r3], #4
 800d0b6:	e7db      	b.n	800d070 <__multiply+0x50>
 800d0b8:	f8b3 a000 	ldrh.w	sl, [r3]
 800d0bc:	f1ba 0f00 	cmp.w	sl, #0
 800d0c0:	d020      	beq.n	800d104 <__multiply+0xe4>
 800d0c2:	f105 0e14 	add.w	lr, r5, #20
 800d0c6:	46b1      	mov	r9, r6
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d0ce:	f8d9 b000 	ldr.w	fp, [r9]
 800d0d2:	b2a1      	uxth	r1, r4
 800d0d4:	fa1f fb8b 	uxth.w	fp, fp
 800d0d8:	fb0a b101 	mla	r1, sl, r1, fp
 800d0dc:	4411      	add	r1, r2
 800d0de:	f8d9 2000 	ldr.w	r2, [r9]
 800d0e2:	0c24      	lsrs	r4, r4, #16
 800d0e4:	0c12      	lsrs	r2, r2, #16
 800d0e6:	fb0a 2404 	mla	r4, sl, r4, r2
 800d0ea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d0ee:	b289      	uxth	r1, r1
 800d0f0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d0f4:	45f4      	cmp	ip, lr
 800d0f6:	f849 1b04 	str.w	r1, [r9], #4
 800d0fa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d0fe:	d8e4      	bhi.n	800d0ca <__multiply+0xaa>
 800d100:	9901      	ldr	r1, [sp, #4]
 800d102:	5072      	str	r2, [r6, r1]
 800d104:	9a03      	ldr	r2, [sp, #12]
 800d106:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d10a:	3304      	adds	r3, #4
 800d10c:	f1b9 0f00 	cmp.w	r9, #0
 800d110:	d01f      	beq.n	800d152 <__multiply+0x132>
 800d112:	6834      	ldr	r4, [r6, #0]
 800d114:	f105 0114 	add.w	r1, r5, #20
 800d118:	46b6      	mov	lr, r6
 800d11a:	f04f 0a00 	mov.w	sl, #0
 800d11e:	880a      	ldrh	r2, [r1, #0]
 800d120:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d124:	fb09 b202 	mla	r2, r9, r2, fp
 800d128:	4492      	add	sl, r2
 800d12a:	b2a4      	uxth	r4, r4
 800d12c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d130:	f84e 4b04 	str.w	r4, [lr], #4
 800d134:	f851 4b04 	ldr.w	r4, [r1], #4
 800d138:	f8be 2000 	ldrh.w	r2, [lr]
 800d13c:	0c24      	lsrs	r4, r4, #16
 800d13e:	fb09 2404 	mla	r4, r9, r4, r2
 800d142:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d146:	458c      	cmp	ip, r1
 800d148:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d14c:	d8e7      	bhi.n	800d11e <__multiply+0xfe>
 800d14e:	9a01      	ldr	r2, [sp, #4]
 800d150:	50b4      	str	r4, [r6, r2]
 800d152:	3604      	adds	r6, #4
 800d154:	e7a3      	b.n	800d09e <__multiply+0x7e>
 800d156:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d1a5      	bne.n	800d0aa <__multiply+0x8a>
 800d15e:	3f01      	subs	r7, #1
 800d160:	e7a1      	b.n	800d0a6 <__multiply+0x86>
 800d162:	bf00      	nop
 800d164:	0800e6cf 	.word	0x0800e6cf
 800d168:	0800e6e0 	.word	0x0800e6e0

0800d16c <__pow5mult>:
 800d16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d170:	4615      	mov	r5, r2
 800d172:	f012 0203 	ands.w	r2, r2, #3
 800d176:	4606      	mov	r6, r0
 800d178:	460f      	mov	r7, r1
 800d17a:	d007      	beq.n	800d18c <__pow5mult+0x20>
 800d17c:	4c25      	ldr	r4, [pc, #148]	; (800d214 <__pow5mult+0xa8>)
 800d17e:	3a01      	subs	r2, #1
 800d180:	2300      	movs	r3, #0
 800d182:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d186:	f7ff fe9b 	bl	800cec0 <__multadd>
 800d18a:	4607      	mov	r7, r0
 800d18c:	10ad      	asrs	r5, r5, #2
 800d18e:	d03d      	beq.n	800d20c <__pow5mult+0xa0>
 800d190:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d192:	b97c      	cbnz	r4, 800d1b4 <__pow5mult+0x48>
 800d194:	2010      	movs	r0, #16
 800d196:	f7ff fe1b 	bl	800cdd0 <malloc>
 800d19a:	4602      	mov	r2, r0
 800d19c:	6270      	str	r0, [r6, #36]	; 0x24
 800d19e:	b928      	cbnz	r0, 800d1ac <__pow5mult+0x40>
 800d1a0:	4b1d      	ldr	r3, [pc, #116]	; (800d218 <__pow5mult+0xac>)
 800d1a2:	481e      	ldr	r0, [pc, #120]	; (800d21c <__pow5mult+0xb0>)
 800d1a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d1a8:	f000 fbcc 	bl	800d944 <__assert_func>
 800d1ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1b0:	6004      	str	r4, [r0, #0]
 800d1b2:	60c4      	str	r4, [r0, #12]
 800d1b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d1b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1bc:	b94c      	cbnz	r4, 800d1d2 <__pow5mult+0x66>
 800d1be:	f240 2171 	movw	r1, #625	; 0x271
 800d1c2:	4630      	mov	r0, r6
 800d1c4:	f7ff ff16 	bl	800cff4 <__i2b>
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	6003      	str	r3, [r0, #0]
 800d1d2:	f04f 0900 	mov.w	r9, #0
 800d1d6:	07eb      	lsls	r3, r5, #31
 800d1d8:	d50a      	bpl.n	800d1f0 <__pow5mult+0x84>
 800d1da:	4639      	mov	r1, r7
 800d1dc:	4622      	mov	r2, r4
 800d1de:	4630      	mov	r0, r6
 800d1e0:	f7ff ff1e 	bl	800d020 <__multiply>
 800d1e4:	4639      	mov	r1, r7
 800d1e6:	4680      	mov	r8, r0
 800d1e8:	4630      	mov	r0, r6
 800d1ea:	f7ff fe47 	bl	800ce7c <_Bfree>
 800d1ee:	4647      	mov	r7, r8
 800d1f0:	106d      	asrs	r5, r5, #1
 800d1f2:	d00b      	beq.n	800d20c <__pow5mult+0xa0>
 800d1f4:	6820      	ldr	r0, [r4, #0]
 800d1f6:	b938      	cbnz	r0, 800d208 <__pow5mult+0x9c>
 800d1f8:	4622      	mov	r2, r4
 800d1fa:	4621      	mov	r1, r4
 800d1fc:	4630      	mov	r0, r6
 800d1fe:	f7ff ff0f 	bl	800d020 <__multiply>
 800d202:	6020      	str	r0, [r4, #0]
 800d204:	f8c0 9000 	str.w	r9, [r0]
 800d208:	4604      	mov	r4, r0
 800d20a:	e7e4      	b.n	800d1d6 <__pow5mult+0x6a>
 800d20c:	4638      	mov	r0, r7
 800d20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d212:	bf00      	nop
 800d214:	0800e830 	.word	0x0800e830
 800d218:	0800e659 	.word	0x0800e659
 800d21c:	0800e6e0 	.word	0x0800e6e0

0800d220 <__lshift>:
 800d220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d224:	460c      	mov	r4, r1
 800d226:	6849      	ldr	r1, [r1, #4]
 800d228:	6923      	ldr	r3, [r4, #16]
 800d22a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d22e:	68a3      	ldr	r3, [r4, #8]
 800d230:	4607      	mov	r7, r0
 800d232:	4691      	mov	r9, r2
 800d234:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d238:	f108 0601 	add.w	r6, r8, #1
 800d23c:	42b3      	cmp	r3, r6
 800d23e:	db0b      	blt.n	800d258 <__lshift+0x38>
 800d240:	4638      	mov	r0, r7
 800d242:	f7ff fddb 	bl	800cdfc <_Balloc>
 800d246:	4605      	mov	r5, r0
 800d248:	b948      	cbnz	r0, 800d25e <__lshift+0x3e>
 800d24a:	4602      	mov	r2, r0
 800d24c:	4b28      	ldr	r3, [pc, #160]	; (800d2f0 <__lshift+0xd0>)
 800d24e:	4829      	ldr	r0, [pc, #164]	; (800d2f4 <__lshift+0xd4>)
 800d250:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d254:	f000 fb76 	bl	800d944 <__assert_func>
 800d258:	3101      	adds	r1, #1
 800d25a:	005b      	lsls	r3, r3, #1
 800d25c:	e7ee      	b.n	800d23c <__lshift+0x1c>
 800d25e:	2300      	movs	r3, #0
 800d260:	f100 0114 	add.w	r1, r0, #20
 800d264:	f100 0210 	add.w	r2, r0, #16
 800d268:	4618      	mov	r0, r3
 800d26a:	4553      	cmp	r3, sl
 800d26c:	db33      	blt.n	800d2d6 <__lshift+0xb6>
 800d26e:	6920      	ldr	r0, [r4, #16]
 800d270:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d274:	f104 0314 	add.w	r3, r4, #20
 800d278:	f019 091f 	ands.w	r9, r9, #31
 800d27c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d280:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d284:	d02b      	beq.n	800d2de <__lshift+0xbe>
 800d286:	f1c9 0e20 	rsb	lr, r9, #32
 800d28a:	468a      	mov	sl, r1
 800d28c:	2200      	movs	r2, #0
 800d28e:	6818      	ldr	r0, [r3, #0]
 800d290:	fa00 f009 	lsl.w	r0, r0, r9
 800d294:	4302      	orrs	r2, r0
 800d296:	f84a 2b04 	str.w	r2, [sl], #4
 800d29a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d29e:	459c      	cmp	ip, r3
 800d2a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d2a4:	d8f3      	bhi.n	800d28e <__lshift+0x6e>
 800d2a6:	ebac 0304 	sub.w	r3, ip, r4
 800d2aa:	3b15      	subs	r3, #21
 800d2ac:	f023 0303 	bic.w	r3, r3, #3
 800d2b0:	3304      	adds	r3, #4
 800d2b2:	f104 0015 	add.w	r0, r4, #21
 800d2b6:	4584      	cmp	ip, r0
 800d2b8:	bf38      	it	cc
 800d2ba:	2304      	movcc	r3, #4
 800d2bc:	50ca      	str	r2, [r1, r3]
 800d2be:	b10a      	cbz	r2, 800d2c4 <__lshift+0xa4>
 800d2c0:	f108 0602 	add.w	r6, r8, #2
 800d2c4:	3e01      	subs	r6, #1
 800d2c6:	4638      	mov	r0, r7
 800d2c8:	612e      	str	r6, [r5, #16]
 800d2ca:	4621      	mov	r1, r4
 800d2cc:	f7ff fdd6 	bl	800ce7c <_Bfree>
 800d2d0:	4628      	mov	r0, r5
 800d2d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d2da:	3301      	adds	r3, #1
 800d2dc:	e7c5      	b.n	800d26a <__lshift+0x4a>
 800d2de:	3904      	subs	r1, #4
 800d2e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2e8:	459c      	cmp	ip, r3
 800d2ea:	d8f9      	bhi.n	800d2e0 <__lshift+0xc0>
 800d2ec:	e7ea      	b.n	800d2c4 <__lshift+0xa4>
 800d2ee:	bf00      	nop
 800d2f0:	0800e6cf 	.word	0x0800e6cf
 800d2f4:	0800e6e0 	.word	0x0800e6e0

0800d2f8 <__mcmp>:
 800d2f8:	b530      	push	{r4, r5, lr}
 800d2fa:	6902      	ldr	r2, [r0, #16]
 800d2fc:	690c      	ldr	r4, [r1, #16]
 800d2fe:	1b12      	subs	r2, r2, r4
 800d300:	d10e      	bne.n	800d320 <__mcmp+0x28>
 800d302:	f100 0314 	add.w	r3, r0, #20
 800d306:	3114      	adds	r1, #20
 800d308:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d30c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d310:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d314:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d318:	42a5      	cmp	r5, r4
 800d31a:	d003      	beq.n	800d324 <__mcmp+0x2c>
 800d31c:	d305      	bcc.n	800d32a <__mcmp+0x32>
 800d31e:	2201      	movs	r2, #1
 800d320:	4610      	mov	r0, r2
 800d322:	bd30      	pop	{r4, r5, pc}
 800d324:	4283      	cmp	r3, r0
 800d326:	d3f3      	bcc.n	800d310 <__mcmp+0x18>
 800d328:	e7fa      	b.n	800d320 <__mcmp+0x28>
 800d32a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d32e:	e7f7      	b.n	800d320 <__mcmp+0x28>

0800d330 <__mdiff>:
 800d330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d334:	460c      	mov	r4, r1
 800d336:	4606      	mov	r6, r0
 800d338:	4611      	mov	r1, r2
 800d33a:	4620      	mov	r0, r4
 800d33c:	4617      	mov	r7, r2
 800d33e:	f7ff ffdb 	bl	800d2f8 <__mcmp>
 800d342:	1e05      	subs	r5, r0, #0
 800d344:	d110      	bne.n	800d368 <__mdiff+0x38>
 800d346:	4629      	mov	r1, r5
 800d348:	4630      	mov	r0, r6
 800d34a:	f7ff fd57 	bl	800cdfc <_Balloc>
 800d34e:	b930      	cbnz	r0, 800d35e <__mdiff+0x2e>
 800d350:	4b39      	ldr	r3, [pc, #228]	; (800d438 <__mdiff+0x108>)
 800d352:	4602      	mov	r2, r0
 800d354:	f240 2132 	movw	r1, #562	; 0x232
 800d358:	4838      	ldr	r0, [pc, #224]	; (800d43c <__mdiff+0x10c>)
 800d35a:	f000 faf3 	bl	800d944 <__assert_func>
 800d35e:	2301      	movs	r3, #1
 800d360:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d364:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d368:	bfa4      	itt	ge
 800d36a:	463b      	movge	r3, r7
 800d36c:	4627      	movge	r7, r4
 800d36e:	4630      	mov	r0, r6
 800d370:	6879      	ldr	r1, [r7, #4]
 800d372:	bfa6      	itte	ge
 800d374:	461c      	movge	r4, r3
 800d376:	2500      	movge	r5, #0
 800d378:	2501      	movlt	r5, #1
 800d37a:	f7ff fd3f 	bl	800cdfc <_Balloc>
 800d37e:	b920      	cbnz	r0, 800d38a <__mdiff+0x5a>
 800d380:	4b2d      	ldr	r3, [pc, #180]	; (800d438 <__mdiff+0x108>)
 800d382:	4602      	mov	r2, r0
 800d384:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d388:	e7e6      	b.n	800d358 <__mdiff+0x28>
 800d38a:	693e      	ldr	r6, [r7, #16]
 800d38c:	60c5      	str	r5, [r0, #12]
 800d38e:	6925      	ldr	r5, [r4, #16]
 800d390:	f107 0114 	add.w	r1, r7, #20
 800d394:	f104 0914 	add.w	r9, r4, #20
 800d398:	f100 0e14 	add.w	lr, r0, #20
 800d39c:	f107 0210 	add.w	r2, r7, #16
 800d3a0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d3a4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d3a8:	46f2      	mov	sl, lr
 800d3aa:	2700      	movs	r7, #0
 800d3ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800d3b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d3b4:	fa1f f883 	uxth.w	r8, r3
 800d3b8:	fa17 f78b 	uxtah	r7, r7, fp
 800d3bc:	0c1b      	lsrs	r3, r3, #16
 800d3be:	eba7 0808 	sub.w	r8, r7, r8
 800d3c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d3c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d3ca:	fa1f f888 	uxth.w	r8, r8
 800d3ce:	141f      	asrs	r7, r3, #16
 800d3d0:	454d      	cmp	r5, r9
 800d3d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d3d6:	f84a 3b04 	str.w	r3, [sl], #4
 800d3da:	d8e7      	bhi.n	800d3ac <__mdiff+0x7c>
 800d3dc:	1b2b      	subs	r3, r5, r4
 800d3de:	3b15      	subs	r3, #21
 800d3e0:	f023 0303 	bic.w	r3, r3, #3
 800d3e4:	3304      	adds	r3, #4
 800d3e6:	3415      	adds	r4, #21
 800d3e8:	42a5      	cmp	r5, r4
 800d3ea:	bf38      	it	cc
 800d3ec:	2304      	movcc	r3, #4
 800d3ee:	4419      	add	r1, r3
 800d3f0:	4473      	add	r3, lr
 800d3f2:	469e      	mov	lr, r3
 800d3f4:	460d      	mov	r5, r1
 800d3f6:	4565      	cmp	r5, ip
 800d3f8:	d30e      	bcc.n	800d418 <__mdiff+0xe8>
 800d3fa:	f10c 0203 	add.w	r2, ip, #3
 800d3fe:	1a52      	subs	r2, r2, r1
 800d400:	f022 0203 	bic.w	r2, r2, #3
 800d404:	3903      	subs	r1, #3
 800d406:	458c      	cmp	ip, r1
 800d408:	bf38      	it	cc
 800d40a:	2200      	movcc	r2, #0
 800d40c:	441a      	add	r2, r3
 800d40e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d412:	b17b      	cbz	r3, 800d434 <__mdiff+0x104>
 800d414:	6106      	str	r6, [r0, #16]
 800d416:	e7a5      	b.n	800d364 <__mdiff+0x34>
 800d418:	f855 8b04 	ldr.w	r8, [r5], #4
 800d41c:	fa17 f488 	uxtah	r4, r7, r8
 800d420:	1422      	asrs	r2, r4, #16
 800d422:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d426:	b2a4      	uxth	r4, r4
 800d428:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d42c:	f84e 4b04 	str.w	r4, [lr], #4
 800d430:	1417      	asrs	r7, r2, #16
 800d432:	e7e0      	b.n	800d3f6 <__mdiff+0xc6>
 800d434:	3e01      	subs	r6, #1
 800d436:	e7ea      	b.n	800d40e <__mdiff+0xde>
 800d438:	0800e6cf 	.word	0x0800e6cf
 800d43c:	0800e6e0 	.word	0x0800e6e0

0800d440 <__d2b>:
 800d440:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d444:	4689      	mov	r9, r1
 800d446:	2101      	movs	r1, #1
 800d448:	ec57 6b10 	vmov	r6, r7, d0
 800d44c:	4690      	mov	r8, r2
 800d44e:	f7ff fcd5 	bl	800cdfc <_Balloc>
 800d452:	4604      	mov	r4, r0
 800d454:	b930      	cbnz	r0, 800d464 <__d2b+0x24>
 800d456:	4602      	mov	r2, r0
 800d458:	4b25      	ldr	r3, [pc, #148]	; (800d4f0 <__d2b+0xb0>)
 800d45a:	4826      	ldr	r0, [pc, #152]	; (800d4f4 <__d2b+0xb4>)
 800d45c:	f240 310a 	movw	r1, #778	; 0x30a
 800d460:	f000 fa70 	bl	800d944 <__assert_func>
 800d464:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d468:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d46c:	bb35      	cbnz	r5, 800d4bc <__d2b+0x7c>
 800d46e:	2e00      	cmp	r6, #0
 800d470:	9301      	str	r3, [sp, #4]
 800d472:	d028      	beq.n	800d4c6 <__d2b+0x86>
 800d474:	4668      	mov	r0, sp
 800d476:	9600      	str	r6, [sp, #0]
 800d478:	f7ff fd8c 	bl	800cf94 <__lo0bits>
 800d47c:	9900      	ldr	r1, [sp, #0]
 800d47e:	b300      	cbz	r0, 800d4c2 <__d2b+0x82>
 800d480:	9a01      	ldr	r2, [sp, #4]
 800d482:	f1c0 0320 	rsb	r3, r0, #32
 800d486:	fa02 f303 	lsl.w	r3, r2, r3
 800d48a:	430b      	orrs	r3, r1
 800d48c:	40c2      	lsrs	r2, r0
 800d48e:	6163      	str	r3, [r4, #20]
 800d490:	9201      	str	r2, [sp, #4]
 800d492:	9b01      	ldr	r3, [sp, #4]
 800d494:	61a3      	str	r3, [r4, #24]
 800d496:	2b00      	cmp	r3, #0
 800d498:	bf14      	ite	ne
 800d49a:	2202      	movne	r2, #2
 800d49c:	2201      	moveq	r2, #1
 800d49e:	6122      	str	r2, [r4, #16]
 800d4a0:	b1d5      	cbz	r5, 800d4d8 <__d2b+0x98>
 800d4a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d4a6:	4405      	add	r5, r0
 800d4a8:	f8c9 5000 	str.w	r5, [r9]
 800d4ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d4b0:	f8c8 0000 	str.w	r0, [r8]
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	b003      	add	sp, #12
 800d4b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4c0:	e7d5      	b.n	800d46e <__d2b+0x2e>
 800d4c2:	6161      	str	r1, [r4, #20]
 800d4c4:	e7e5      	b.n	800d492 <__d2b+0x52>
 800d4c6:	a801      	add	r0, sp, #4
 800d4c8:	f7ff fd64 	bl	800cf94 <__lo0bits>
 800d4cc:	9b01      	ldr	r3, [sp, #4]
 800d4ce:	6163      	str	r3, [r4, #20]
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	6122      	str	r2, [r4, #16]
 800d4d4:	3020      	adds	r0, #32
 800d4d6:	e7e3      	b.n	800d4a0 <__d2b+0x60>
 800d4d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d4e0:	f8c9 0000 	str.w	r0, [r9]
 800d4e4:	6918      	ldr	r0, [r3, #16]
 800d4e6:	f7ff fd35 	bl	800cf54 <__hi0bits>
 800d4ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4ee:	e7df      	b.n	800d4b0 <__d2b+0x70>
 800d4f0:	0800e6cf 	.word	0x0800e6cf
 800d4f4:	0800e6e0 	.word	0x0800e6e0

0800d4f8 <_calloc_r>:
 800d4f8:	b513      	push	{r0, r1, r4, lr}
 800d4fa:	434a      	muls	r2, r1
 800d4fc:	4611      	mov	r1, r2
 800d4fe:	9201      	str	r2, [sp, #4]
 800d500:	f000 f85a 	bl	800d5b8 <_malloc_r>
 800d504:	4604      	mov	r4, r0
 800d506:	b118      	cbz	r0, 800d510 <_calloc_r+0x18>
 800d508:	9a01      	ldr	r2, [sp, #4]
 800d50a:	2100      	movs	r1, #0
 800d50c:	f7fe f91e 	bl	800b74c <memset>
 800d510:	4620      	mov	r0, r4
 800d512:	b002      	add	sp, #8
 800d514:	bd10      	pop	{r4, pc}
	...

0800d518 <_free_r>:
 800d518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d51a:	2900      	cmp	r1, #0
 800d51c:	d048      	beq.n	800d5b0 <_free_r+0x98>
 800d51e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d522:	9001      	str	r0, [sp, #4]
 800d524:	2b00      	cmp	r3, #0
 800d526:	f1a1 0404 	sub.w	r4, r1, #4
 800d52a:	bfb8      	it	lt
 800d52c:	18e4      	addlt	r4, r4, r3
 800d52e:	f000 fa65 	bl	800d9fc <__malloc_lock>
 800d532:	4a20      	ldr	r2, [pc, #128]	; (800d5b4 <_free_r+0x9c>)
 800d534:	9801      	ldr	r0, [sp, #4]
 800d536:	6813      	ldr	r3, [r2, #0]
 800d538:	4615      	mov	r5, r2
 800d53a:	b933      	cbnz	r3, 800d54a <_free_r+0x32>
 800d53c:	6063      	str	r3, [r4, #4]
 800d53e:	6014      	str	r4, [r2, #0]
 800d540:	b003      	add	sp, #12
 800d542:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d546:	f000 ba5f 	b.w	800da08 <__malloc_unlock>
 800d54a:	42a3      	cmp	r3, r4
 800d54c:	d90b      	bls.n	800d566 <_free_r+0x4e>
 800d54e:	6821      	ldr	r1, [r4, #0]
 800d550:	1862      	adds	r2, r4, r1
 800d552:	4293      	cmp	r3, r2
 800d554:	bf04      	itt	eq
 800d556:	681a      	ldreq	r2, [r3, #0]
 800d558:	685b      	ldreq	r3, [r3, #4]
 800d55a:	6063      	str	r3, [r4, #4]
 800d55c:	bf04      	itt	eq
 800d55e:	1852      	addeq	r2, r2, r1
 800d560:	6022      	streq	r2, [r4, #0]
 800d562:	602c      	str	r4, [r5, #0]
 800d564:	e7ec      	b.n	800d540 <_free_r+0x28>
 800d566:	461a      	mov	r2, r3
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	b10b      	cbz	r3, 800d570 <_free_r+0x58>
 800d56c:	42a3      	cmp	r3, r4
 800d56e:	d9fa      	bls.n	800d566 <_free_r+0x4e>
 800d570:	6811      	ldr	r1, [r2, #0]
 800d572:	1855      	adds	r5, r2, r1
 800d574:	42a5      	cmp	r5, r4
 800d576:	d10b      	bne.n	800d590 <_free_r+0x78>
 800d578:	6824      	ldr	r4, [r4, #0]
 800d57a:	4421      	add	r1, r4
 800d57c:	1854      	adds	r4, r2, r1
 800d57e:	42a3      	cmp	r3, r4
 800d580:	6011      	str	r1, [r2, #0]
 800d582:	d1dd      	bne.n	800d540 <_free_r+0x28>
 800d584:	681c      	ldr	r4, [r3, #0]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	6053      	str	r3, [r2, #4]
 800d58a:	4421      	add	r1, r4
 800d58c:	6011      	str	r1, [r2, #0]
 800d58e:	e7d7      	b.n	800d540 <_free_r+0x28>
 800d590:	d902      	bls.n	800d598 <_free_r+0x80>
 800d592:	230c      	movs	r3, #12
 800d594:	6003      	str	r3, [r0, #0]
 800d596:	e7d3      	b.n	800d540 <_free_r+0x28>
 800d598:	6825      	ldr	r5, [r4, #0]
 800d59a:	1961      	adds	r1, r4, r5
 800d59c:	428b      	cmp	r3, r1
 800d59e:	bf04      	itt	eq
 800d5a0:	6819      	ldreq	r1, [r3, #0]
 800d5a2:	685b      	ldreq	r3, [r3, #4]
 800d5a4:	6063      	str	r3, [r4, #4]
 800d5a6:	bf04      	itt	eq
 800d5a8:	1949      	addeq	r1, r1, r5
 800d5aa:	6021      	streq	r1, [r4, #0]
 800d5ac:	6054      	str	r4, [r2, #4]
 800d5ae:	e7c7      	b.n	800d540 <_free_r+0x28>
 800d5b0:	b003      	add	sp, #12
 800d5b2:	bd30      	pop	{r4, r5, pc}
 800d5b4:	20000598 	.word	0x20000598

0800d5b8 <_malloc_r>:
 800d5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ba:	1ccd      	adds	r5, r1, #3
 800d5bc:	f025 0503 	bic.w	r5, r5, #3
 800d5c0:	3508      	adds	r5, #8
 800d5c2:	2d0c      	cmp	r5, #12
 800d5c4:	bf38      	it	cc
 800d5c6:	250c      	movcc	r5, #12
 800d5c8:	2d00      	cmp	r5, #0
 800d5ca:	4606      	mov	r6, r0
 800d5cc:	db01      	blt.n	800d5d2 <_malloc_r+0x1a>
 800d5ce:	42a9      	cmp	r1, r5
 800d5d0:	d903      	bls.n	800d5da <_malloc_r+0x22>
 800d5d2:	230c      	movs	r3, #12
 800d5d4:	6033      	str	r3, [r6, #0]
 800d5d6:	2000      	movs	r0, #0
 800d5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5da:	f000 fa0f 	bl	800d9fc <__malloc_lock>
 800d5de:	4921      	ldr	r1, [pc, #132]	; (800d664 <_malloc_r+0xac>)
 800d5e0:	680a      	ldr	r2, [r1, #0]
 800d5e2:	4614      	mov	r4, r2
 800d5e4:	b99c      	cbnz	r4, 800d60e <_malloc_r+0x56>
 800d5e6:	4f20      	ldr	r7, [pc, #128]	; (800d668 <_malloc_r+0xb0>)
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	b923      	cbnz	r3, 800d5f6 <_malloc_r+0x3e>
 800d5ec:	4621      	mov	r1, r4
 800d5ee:	4630      	mov	r0, r6
 800d5f0:	f000 f998 	bl	800d924 <_sbrk_r>
 800d5f4:	6038      	str	r0, [r7, #0]
 800d5f6:	4629      	mov	r1, r5
 800d5f8:	4630      	mov	r0, r6
 800d5fa:	f000 f993 	bl	800d924 <_sbrk_r>
 800d5fe:	1c43      	adds	r3, r0, #1
 800d600:	d123      	bne.n	800d64a <_malloc_r+0x92>
 800d602:	230c      	movs	r3, #12
 800d604:	6033      	str	r3, [r6, #0]
 800d606:	4630      	mov	r0, r6
 800d608:	f000 f9fe 	bl	800da08 <__malloc_unlock>
 800d60c:	e7e3      	b.n	800d5d6 <_malloc_r+0x1e>
 800d60e:	6823      	ldr	r3, [r4, #0]
 800d610:	1b5b      	subs	r3, r3, r5
 800d612:	d417      	bmi.n	800d644 <_malloc_r+0x8c>
 800d614:	2b0b      	cmp	r3, #11
 800d616:	d903      	bls.n	800d620 <_malloc_r+0x68>
 800d618:	6023      	str	r3, [r4, #0]
 800d61a:	441c      	add	r4, r3
 800d61c:	6025      	str	r5, [r4, #0]
 800d61e:	e004      	b.n	800d62a <_malloc_r+0x72>
 800d620:	6863      	ldr	r3, [r4, #4]
 800d622:	42a2      	cmp	r2, r4
 800d624:	bf0c      	ite	eq
 800d626:	600b      	streq	r3, [r1, #0]
 800d628:	6053      	strne	r3, [r2, #4]
 800d62a:	4630      	mov	r0, r6
 800d62c:	f000 f9ec 	bl	800da08 <__malloc_unlock>
 800d630:	f104 000b 	add.w	r0, r4, #11
 800d634:	1d23      	adds	r3, r4, #4
 800d636:	f020 0007 	bic.w	r0, r0, #7
 800d63a:	1ac2      	subs	r2, r0, r3
 800d63c:	d0cc      	beq.n	800d5d8 <_malloc_r+0x20>
 800d63e:	1a1b      	subs	r3, r3, r0
 800d640:	50a3      	str	r3, [r4, r2]
 800d642:	e7c9      	b.n	800d5d8 <_malloc_r+0x20>
 800d644:	4622      	mov	r2, r4
 800d646:	6864      	ldr	r4, [r4, #4]
 800d648:	e7cc      	b.n	800d5e4 <_malloc_r+0x2c>
 800d64a:	1cc4      	adds	r4, r0, #3
 800d64c:	f024 0403 	bic.w	r4, r4, #3
 800d650:	42a0      	cmp	r0, r4
 800d652:	d0e3      	beq.n	800d61c <_malloc_r+0x64>
 800d654:	1a21      	subs	r1, r4, r0
 800d656:	4630      	mov	r0, r6
 800d658:	f000 f964 	bl	800d924 <_sbrk_r>
 800d65c:	3001      	adds	r0, #1
 800d65e:	d1dd      	bne.n	800d61c <_malloc_r+0x64>
 800d660:	e7cf      	b.n	800d602 <_malloc_r+0x4a>
 800d662:	bf00      	nop
 800d664:	20000598 	.word	0x20000598
 800d668:	2000059c 	.word	0x2000059c

0800d66c <__ssputs_r>:
 800d66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d670:	688e      	ldr	r6, [r1, #8]
 800d672:	429e      	cmp	r6, r3
 800d674:	4682      	mov	sl, r0
 800d676:	460c      	mov	r4, r1
 800d678:	4690      	mov	r8, r2
 800d67a:	461f      	mov	r7, r3
 800d67c:	d838      	bhi.n	800d6f0 <__ssputs_r+0x84>
 800d67e:	898a      	ldrh	r2, [r1, #12]
 800d680:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d684:	d032      	beq.n	800d6ec <__ssputs_r+0x80>
 800d686:	6825      	ldr	r5, [r4, #0]
 800d688:	6909      	ldr	r1, [r1, #16]
 800d68a:	eba5 0901 	sub.w	r9, r5, r1
 800d68e:	6965      	ldr	r5, [r4, #20]
 800d690:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d694:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d698:	3301      	adds	r3, #1
 800d69a:	444b      	add	r3, r9
 800d69c:	106d      	asrs	r5, r5, #1
 800d69e:	429d      	cmp	r5, r3
 800d6a0:	bf38      	it	cc
 800d6a2:	461d      	movcc	r5, r3
 800d6a4:	0553      	lsls	r3, r2, #21
 800d6a6:	d531      	bpl.n	800d70c <__ssputs_r+0xa0>
 800d6a8:	4629      	mov	r1, r5
 800d6aa:	f7ff ff85 	bl	800d5b8 <_malloc_r>
 800d6ae:	4606      	mov	r6, r0
 800d6b0:	b950      	cbnz	r0, 800d6c8 <__ssputs_r+0x5c>
 800d6b2:	230c      	movs	r3, #12
 800d6b4:	f8ca 3000 	str.w	r3, [sl]
 800d6b8:	89a3      	ldrh	r3, [r4, #12]
 800d6ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6be:	81a3      	strh	r3, [r4, #12]
 800d6c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6c8:	6921      	ldr	r1, [r4, #16]
 800d6ca:	464a      	mov	r2, r9
 800d6cc:	f7ff fb88 	bl	800cde0 <memcpy>
 800d6d0:	89a3      	ldrh	r3, [r4, #12]
 800d6d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d6d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6da:	81a3      	strh	r3, [r4, #12]
 800d6dc:	6126      	str	r6, [r4, #16]
 800d6de:	6165      	str	r5, [r4, #20]
 800d6e0:	444e      	add	r6, r9
 800d6e2:	eba5 0509 	sub.w	r5, r5, r9
 800d6e6:	6026      	str	r6, [r4, #0]
 800d6e8:	60a5      	str	r5, [r4, #8]
 800d6ea:	463e      	mov	r6, r7
 800d6ec:	42be      	cmp	r6, r7
 800d6ee:	d900      	bls.n	800d6f2 <__ssputs_r+0x86>
 800d6f0:	463e      	mov	r6, r7
 800d6f2:	4632      	mov	r2, r6
 800d6f4:	6820      	ldr	r0, [r4, #0]
 800d6f6:	4641      	mov	r1, r8
 800d6f8:	f000 f966 	bl	800d9c8 <memmove>
 800d6fc:	68a3      	ldr	r3, [r4, #8]
 800d6fe:	6822      	ldr	r2, [r4, #0]
 800d700:	1b9b      	subs	r3, r3, r6
 800d702:	4432      	add	r2, r6
 800d704:	60a3      	str	r3, [r4, #8]
 800d706:	6022      	str	r2, [r4, #0]
 800d708:	2000      	movs	r0, #0
 800d70a:	e7db      	b.n	800d6c4 <__ssputs_r+0x58>
 800d70c:	462a      	mov	r2, r5
 800d70e:	f000 f981 	bl	800da14 <_realloc_r>
 800d712:	4606      	mov	r6, r0
 800d714:	2800      	cmp	r0, #0
 800d716:	d1e1      	bne.n	800d6dc <__ssputs_r+0x70>
 800d718:	6921      	ldr	r1, [r4, #16]
 800d71a:	4650      	mov	r0, sl
 800d71c:	f7ff fefc 	bl	800d518 <_free_r>
 800d720:	e7c7      	b.n	800d6b2 <__ssputs_r+0x46>
	...

0800d724 <_svfiprintf_r>:
 800d724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d728:	4698      	mov	r8, r3
 800d72a:	898b      	ldrh	r3, [r1, #12]
 800d72c:	061b      	lsls	r3, r3, #24
 800d72e:	b09d      	sub	sp, #116	; 0x74
 800d730:	4607      	mov	r7, r0
 800d732:	460d      	mov	r5, r1
 800d734:	4614      	mov	r4, r2
 800d736:	d50e      	bpl.n	800d756 <_svfiprintf_r+0x32>
 800d738:	690b      	ldr	r3, [r1, #16]
 800d73a:	b963      	cbnz	r3, 800d756 <_svfiprintf_r+0x32>
 800d73c:	2140      	movs	r1, #64	; 0x40
 800d73e:	f7ff ff3b 	bl	800d5b8 <_malloc_r>
 800d742:	6028      	str	r0, [r5, #0]
 800d744:	6128      	str	r0, [r5, #16]
 800d746:	b920      	cbnz	r0, 800d752 <_svfiprintf_r+0x2e>
 800d748:	230c      	movs	r3, #12
 800d74a:	603b      	str	r3, [r7, #0]
 800d74c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d750:	e0d1      	b.n	800d8f6 <_svfiprintf_r+0x1d2>
 800d752:	2340      	movs	r3, #64	; 0x40
 800d754:	616b      	str	r3, [r5, #20]
 800d756:	2300      	movs	r3, #0
 800d758:	9309      	str	r3, [sp, #36]	; 0x24
 800d75a:	2320      	movs	r3, #32
 800d75c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d760:	f8cd 800c 	str.w	r8, [sp, #12]
 800d764:	2330      	movs	r3, #48	; 0x30
 800d766:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d910 <_svfiprintf_r+0x1ec>
 800d76a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d76e:	f04f 0901 	mov.w	r9, #1
 800d772:	4623      	mov	r3, r4
 800d774:	469a      	mov	sl, r3
 800d776:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d77a:	b10a      	cbz	r2, 800d780 <_svfiprintf_r+0x5c>
 800d77c:	2a25      	cmp	r2, #37	; 0x25
 800d77e:	d1f9      	bne.n	800d774 <_svfiprintf_r+0x50>
 800d780:	ebba 0b04 	subs.w	fp, sl, r4
 800d784:	d00b      	beq.n	800d79e <_svfiprintf_r+0x7a>
 800d786:	465b      	mov	r3, fp
 800d788:	4622      	mov	r2, r4
 800d78a:	4629      	mov	r1, r5
 800d78c:	4638      	mov	r0, r7
 800d78e:	f7ff ff6d 	bl	800d66c <__ssputs_r>
 800d792:	3001      	adds	r0, #1
 800d794:	f000 80aa 	beq.w	800d8ec <_svfiprintf_r+0x1c8>
 800d798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d79a:	445a      	add	r2, fp
 800d79c:	9209      	str	r2, [sp, #36]	; 0x24
 800d79e:	f89a 3000 	ldrb.w	r3, [sl]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	f000 80a2 	beq.w	800d8ec <_svfiprintf_r+0x1c8>
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7b2:	f10a 0a01 	add.w	sl, sl, #1
 800d7b6:	9304      	str	r3, [sp, #16]
 800d7b8:	9307      	str	r3, [sp, #28]
 800d7ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7be:	931a      	str	r3, [sp, #104]	; 0x68
 800d7c0:	4654      	mov	r4, sl
 800d7c2:	2205      	movs	r2, #5
 800d7c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7c8:	4851      	ldr	r0, [pc, #324]	; (800d910 <_svfiprintf_r+0x1ec>)
 800d7ca:	f7f2 fd19 	bl	8000200 <memchr>
 800d7ce:	9a04      	ldr	r2, [sp, #16]
 800d7d0:	b9d8      	cbnz	r0, 800d80a <_svfiprintf_r+0xe6>
 800d7d2:	06d0      	lsls	r0, r2, #27
 800d7d4:	bf44      	itt	mi
 800d7d6:	2320      	movmi	r3, #32
 800d7d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7dc:	0711      	lsls	r1, r2, #28
 800d7de:	bf44      	itt	mi
 800d7e0:	232b      	movmi	r3, #43	; 0x2b
 800d7e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7e6:	f89a 3000 	ldrb.w	r3, [sl]
 800d7ea:	2b2a      	cmp	r3, #42	; 0x2a
 800d7ec:	d015      	beq.n	800d81a <_svfiprintf_r+0xf6>
 800d7ee:	9a07      	ldr	r2, [sp, #28]
 800d7f0:	4654      	mov	r4, sl
 800d7f2:	2000      	movs	r0, #0
 800d7f4:	f04f 0c0a 	mov.w	ip, #10
 800d7f8:	4621      	mov	r1, r4
 800d7fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7fe:	3b30      	subs	r3, #48	; 0x30
 800d800:	2b09      	cmp	r3, #9
 800d802:	d94e      	bls.n	800d8a2 <_svfiprintf_r+0x17e>
 800d804:	b1b0      	cbz	r0, 800d834 <_svfiprintf_r+0x110>
 800d806:	9207      	str	r2, [sp, #28]
 800d808:	e014      	b.n	800d834 <_svfiprintf_r+0x110>
 800d80a:	eba0 0308 	sub.w	r3, r0, r8
 800d80e:	fa09 f303 	lsl.w	r3, r9, r3
 800d812:	4313      	orrs	r3, r2
 800d814:	9304      	str	r3, [sp, #16]
 800d816:	46a2      	mov	sl, r4
 800d818:	e7d2      	b.n	800d7c0 <_svfiprintf_r+0x9c>
 800d81a:	9b03      	ldr	r3, [sp, #12]
 800d81c:	1d19      	adds	r1, r3, #4
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	9103      	str	r1, [sp, #12]
 800d822:	2b00      	cmp	r3, #0
 800d824:	bfbb      	ittet	lt
 800d826:	425b      	neglt	r3, r3
 800d828:	f042 0202 	orrlt.w	r2, r2, #2
 800d82c:	9307      	strge	r3, [sp, #28]
 800d82e:	9307      	strlt	r3, [sp, #28]
 800d830:	bfb8      	it	lt
 800d832:	9204      	strlt	r2, [sp, #16]
 800d834:	7823      	ldrb	r3, [r4, #0]
 800d836:	2b2e      	cmp	r3, #46	; 0x2e
 800d838:	d10c      	bne.n	800d854 <_svfiprintf_r+0x130>
 800d83a:	7863      	ldrb	r3, [r4, #1]
 800d83c:	2b2a      	cmp	r3, #42	; 0x2a
 800d83e:	d135      	bne.n	800d8ac <_svfiprintf_r+0x188>
 800d840:	9b03      	ldr	r3, [sp, #12]
 800d842:	1d1a      	adds	r2, r3, #4
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	9203      	str	r2, [sp, #12]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	bfb8      	it	lt
 800d84c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d850:	3402      	adds	r4, #2
 800d852:	9305      	str	r3, [sp, #20]
 800d854:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d920 <_svfiprintf_r+0x1fc>
 800d858:	7821      	ldrb	r1, [r4, #0]
 800d85a:	2203      	movs	r2, #3
 800d85c:	4650      	mov	r0, sl
 800d85e:	f7f2 fccf 	bl	8000200 <memchr>
 800d862:	b140      	cbz	r0, 800d876 <_svfiprintf_r+0x152>
 800d864:	2340      	movs	r3, #64	; 0x40
 800d866:	eba0 000a 	sub.w	r0, r0, sl
 800d86a:	fa03 f000 	lsl.w	r0, r3, r0
 800d86e:	9b04      	ldr	r3, [sp, #16]
 800d870:	4303      	orrs	r3, r0
 800d872:	3401      	adds	r4, #1
 800d874:	9304      	str	r3, [sp, #16]
 800d876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d87a:	4826      	ldr	r0, [pc, #152]	; (800d914 <_svfiprintf_r+0x1f0>)
 800d87c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d880:	2206      	movs	r2, #6
 800d882:	f7f2 fcbd 	bl	8000200 <memchr>
 800d886:	2800      	cmp	r0, #0
 800d888:	d038      	beq.n	800d8fc <_svfiprintf_r+0x1d8>
 800d88a:	4b23      	ldr	r3, [pc, #140]	; (800d918 <_svfiprintf_r+0x1f4>)
 800d88c:	bb1b      	cbnz	r3, 800d8d6 <_svfiprintf_r+0x1b2>
 800d88e:	9b03      	ldr	r3, [sp, #12]
 800d890:	3307      	adds	r3, #7
 800d892:	f023 0307 	bic.w	r3, r3, #7
 800d896:	3308      	adds	r3, #8
 800d898:	9303      	str	r3, [sp, #12]
 800d89a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d89c:	4433      	add	r3, r6
 800d89e:	9309      	str	r3, [sp, #36]	; 0x24
 800d8a0:	e767      	b.n	800d772 <_svfiprintf_r+0x4e>
 800d8a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8a6:	460c      	mov	r4, r1
 800d8a8:	2001      	movs	r0, #1
 800d8aa:	e7a5      	b.n	800d7f8 <_svfiprintf_r+0xd4>
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	3401      	adds	r4, #1
 800d8b0:	9305      	str	r3, [sp, #20]
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	f04f 0c0a 	mov.w	ip, #10
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8be:	3a30      	subs	r2, #48	; 0x30
 800d8c0:	2a09      	cmp	r2, #9
 800d8c2:	d903      	bls.n	800d8cc <_svfiprintf_r+0x1a8>
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d0c5      	beq.n	800d854 <_svfiprintf_r+0x130>
 800d8c8:	9105      	str	r1, [sp, #20]
 800d8ca:	e7c3      	b.n	800d854 <_svfiprintf_r+0x130>
 800d8cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8d0:	4604      	mov	r4, r0
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e7f0      	b.n	800d8b8 <_svfiprintf_r+0x194>
 800d8d6:	ab03      	add	r3, sp, #12
 800d8d8:	9300      	str	r3, [sp, #0]
 800d8da:	462a      	mov	r2, r5
 800d8dc:	4b0f      	ldr	r3, [pc, #60]	; (800d91c <_svfiprintf_r+0x1f8>)
 800d8de:	a904      	add	r1, sp, #16
 800d8e0:	4638      	mov	r0, r7
 800d8e2:	f7fd ffdb 	bl	800b89c <_printf_float>
 800d8e6:	1c42      	adds	r2, r0, #1
 800d8e8:	4606      	mov	r6, r0
 800d8ea:	d1d6      	bne.n	800d89a <_svfiprintf_r+0x176>
 800d8ec:	89ab      	ldrh	r3, [r5, #12]
 800d8ee:	065b      	lsls	r3, r3, #25
 800d8f0:	f53f af2c 	bmi.w	800d74c <_svfiprintf_r+0x28>
 800d8f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8f6:	b01d      	add	sp, #116	; 0x74
 800d8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8fc:	ab03      	add	r3, sp, #12
 800d8fe:	9300      	str	r3, [sp, #0]
 800d900:	462a      	mov	r2, r5
 800d902:	4b06      	ldr	r3, [pc, #24]	; (800d91c <_svfiprintf_r+0x1f8>)
 800d904:	a904      	add	r1, sp, #16
 800d906:	4638      	mov	r0, r7
 800d908:	f7fe fa6c 	bl	800bde4 <_printf_i>
 800d90c:	e7eb      	b.n	800d8e6 <_svfiprintf_r+0x1c2>
 800d90e:	bf00      	nop
 800d910:	0800e83c 	.word	0x0800e83c
 800d914:	0800e846 	.word	0x0800e846
 800d918:	0800b89d 	.word	0x0800b89d
 800d91c:	0800d66d 	.word	0x0800d66d
 800d920:	0800e842 	.word	0x0800e842

0800d924 <_sbrk_r>:
 800d924:	b538      	push	{r3, r4, r5, lr}
 800d926:	4d06      	ldr	r5, [pc, #24]	; (800d940 <_sbrk_r+0x1c>)
 800d928:	2300      	movs	r3, #0
 800d92a:	4604      	mov	r4, r0
 800d92c:	4608      	mov	r0, r1
 800d92e:	602b      	str	r3, [r5, #0]
 800d930:	f7f5 fa8e 	bl	8002e50 <_sbrk>
 800d934:	1c43      	adds	r3, r0, #1
 800d936:	d102      	bne.n	800d93e <_sbrk_r+0x1a>
 800d938:	682b      	ldr	r3, [r5, #0]
 800d93a:	b103      	cbz	r3, 800d93e <_sbrk_r+0x1a>
 800d93c:	6023      	str	r3, [r4, #0]
 800d93e:	bd38      	pop	{r3, r4, r5, pc}
 800d940:	20002078 	.word	0x20002078

0800d944 <__assert_func>:
 800d944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d946:	4614      	mov	r4, r2
 800d948:	461a      	mov	r2, r3
 800d94a:	4b09      	ldr	r3, [pc, #36]	; (800d970 <__assert_func+0x2c>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4605      	mov	r5, r0
 800d950:	68d8      	ldr	r0, [r3, #12]
 800d952:	b14c      	cbz	r4, 800d968 <__assert_func+0x24>
 800d954:	4b07      	ldr	r3, [pc, #28]	; (800d974 <__assert_func+0x30>)
 800d956:	9100      	str	r1, [sp, #0]
 800d958:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d95c:	4906      	ldr	r1, [pc, #24]	; (800d978 <__assert_func+0x34>)
 800d95e:	462b      	mov	r3, r5
 800d960:	f000 f80e 	bl	800d980 <fiprintf>
 800d964:	f000 faa4 	bl	800deb0 <abort>
 800d968:	4b04      	ldr	r3, [pc, #16]	; (800d97c <__assert_func+0x38>)
 800d96a:	461c      	mov	r4, r3
 800d96c:	e7f3      	b.n	800d956 <__assert_func+0x12>
 800d96e:	bf00      	nop
 800d970:	20000184 	.word	0x20000184
 800d974:	0800e84d 	.word	0x0800e84d
 800d978:	0800e85a 	.word	0x0800e85a
 800d97c:	0800e888 	.word	0x0800e888

0800d980 <fiprintf>:
 800d980:	b40e      	push	{r1, r2, r3}
 800d982:	b503      	push	{r0, r1, lr}
 800d984:	4601      	mov	r1, r0
 800d986:	ab03      	add	r3, sp, #12
 800d988:	4805      	ldr	r0, [pc, #20]	; (800d9a0 <fiprintf+0x20>)
 800d98a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d98e:	6800      	ldr	r0, [r0, #0]
 800d990:	9301      	str	r3, [sp, #4]
 800d992:	f000 f88f 	bl	800dab4 <_vfiprintf_r>
 800d996:	b002      	add	sp, #8
 800d998:	f85d eb04 	ldr.w	lr, [sp], #4
 800d99c:	b003      	add	sp, #12
 800d99e:	4770      	bx	lr
 800d9a0:	20000184 	.word	0x20000184

0800d9a4 <__ascii_mbtowc>:
 800d9a4:	b082      	sub	sp, #8
 800d9a6:	b901      	cbnz	r1, 800d9aa <__ascii_mbtowc+0x6>
 800d9a8:	a901      	add	r1, sp, #4
 800d9aa:	b142      	cbz	r2, 800d9be <__ascii_mbtowc+0x1a>
 800d9ac:	b14b      	cbz	r3, 800d9c2 <__ascii_mbtowc+0x1e>
 800d9ae:	7813      	ldrb	r3, [r2, #0]
 800d9b0:	600b      	str	r3, [r1, #0]
 800d9b2:	7812      	ldrb	r2, [r2, #0]
 800d9b4:	1e10      	subs	r0, r2, #0
 800d9b6:	bf18      	it	ne
 800d9b8:	2001      	movne	r0, #1
 800d9ba:	b002      	add	sp, #8
 800d9bc:	4770      	bx	lr
 800d9be:	4610      	mov	r0, r2
 800d9c0:	e7fb      	b.n	800d9ba <__ascii_mbtowc+0x16>
 800d9c2:	f06f 0001 	mvn.w	r0, #1
 800d9c6:	e7f8      	b.n	800d9ba <__ascii_mbtowc+0x16>

0800d9c8 <memmove>:
 800d9c8:	4288      	cmp	r0, r1
 800d9ca:	b510      	push	{r4, lr}
 800d9cc:	eb01 0402 	add.w	r4, r1, r2
 800d9d0:	d902      	bls.n	800d9d8 <memmove+0x10>
 800d9d2:	4284      	cmp	r4, r0
 800d9d4:	4623      	mov	r3, r4
 800d9d6:	d807      	bhi.n	800d9e8 <memmove+0x20>
 800d9d8:	1e43      	subs	r3, r0, #1
 800d9da:	42a1      	cmp	r1, r4
 800d9dc:	d008      	beq.n	800d9f0 <memmove+0x28>
 800d9de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d9e6:	e7f8      	b.n	800d9da <memmove+0x12>
 800d9e8:	4402      	add	r2, r0
 800d9ea:	4601      	mov	r1, r0
 800d9ec:	428a      	cmp	r2, r1
 800d9ee:	d100      	bne.n	800d9f2 <memmove+0x2a>
 800d9f0:	bd10      	pop	{r4, pc}
 800d9f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d9fa:	e7f7      	b.n	800d9ec <memmove+0x24>

0800d9fc <__malloc_lock>:
 800d9fc:	4801      	ldr	r0, [pc, #4]	; (800da04 <__malloc_lock+0x8>)
 800d9fe:	f000 bc17 	b.w	800e230 <__retarget_lock_acquire_recursive>
 800da02:	bf00      	nop
 800da04:	20002080 	.word	0x20002080

0800da08 <__malloc_unlock>:
 800da08:	4801      	ldr	r0, [pc, #4]	; (800da10 <__malloc_unlock+0x8>)
 800da0a:	f000 bc12 	b.w	800e232 <__retarget_lock_release_recursive>
 800da0e:	bf00      	nop
 800da10:	20002080 	.word	0x20002080

0800da14 <_realloc_r>:
 800da14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da16:	4607      	mov	r7, r0
 800da18:	4614      	mov	r4, r2
 800da1a:	460e      	mov	r6, r1
 800da1c:	b921      	cbnz	r1, 800da28 <_realloc_r+0x14>
 800da1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800da22:	4611      	mov	r1, r2
 800da24:	f7ff bdc8 	b.w	800d5b8 <_malloc_r>
 800da28:	b922      	cbnz	r2, 800da34 <_realloc_r+0x20>
 800da2a:	f7ff fd75 	bl	800d518 <_free_r>
 800da2e:	4625      	mov	r5, r4
 800da30:	4628      	mov	r0, r5
 800da32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da34:	f000 fc62 	bl	800e2fc <_malloc_usable_size_r>
 800da38:	42a0      	cmp	r0, r4
 800da3a:	d20f      	bcs.n	800da5c <_realloc_r+0x48>
 800da3c:	4621      	mov	r1, r4
 800da3e:	4638      	mov	r0, r7
 800da40:	f7ff fdba 	bl	800d5b8 <_malloc_r>
 800da44:	4605      	mov	r5, r0
 800da46:	2800      	cmp	r0, #0
 800da48:	d0f2      	beq.n	800da30 <_realloc_r+0x1c>
 800da4a:	4631      	mov	r1, r6
 800da4c:	4622      	mov	r2, r4
 800da4e:	f7ff f9c7 	bl	800cde0 <memcpy>
 800da52:	4631      	mov	r1, r6
 800da54:	4638      	mov	r0, r7
 800da56:	f7ff fd5f 	bl	800d518 <_free_r>
 800da5a:	e7e9      	b.n	800da30 <_realloc_r+0x1c>
 800da5c:	4635      	mov	r5, r6
 800da5e:	e7e7      	b.n	800da30 <_realloc_r+0x1c>

0800da60 <__sfputc_r>:
 800da60:	6893      	ldr	r3, [r2, #8]
 800da62:	3b01      	subs	r3, #1
 800da64:	2b00      	cmp	r3, #0
 800da66:	b410      	push	{r4}
 800da68:	6093      	str	r3, [r2, #8]
 800da6a:	da08      	bge.n	800da7e <__sfputc_r+0x1e>
 800da6c:	6994      	ldr	r4, [r2, #24]
 800da6e:	42a3      	cmp	r3, r4
 800da70:	db01      	blt.n	800da76 <__sfputc_r+0x16>
 800da72:	290a      	cmp	r1, #10
 800da74:	d103      	bne.n	800da7e <__sfputc_r+0x1e>
 800da76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da7a:	f000 b94b 	b.w	800dd14 <__swbuf_r>
 800da7e:	6813      	ldr	r3, [r2, #0]
 800da80:	1c58      	adds	r0, r3, #1
 800da82:	6010      	str	r0, [r2, #0]
 800da84:	7019      	strb	r1, [r3, #0]
 800da86:	4608      	mov	r0, r1
 800da88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da8c:	4770      	bx	lr

0800da8e <__sfputs_r>:
 800da8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da90:	4606      	mov	r6, r0
 800da92:	460f      	mov	r7, r1
 800da94:	4614      	mov	r4, r2
 800da96:	18d5      	adds	r5, r2, r3
 800da98:	42ac      	cmp	r4, r5
 800da9a:	d101      	bne.n	800daa0 <__sfputs_r+0x12>
 800da9c:	2000      	movs	r0, #0
 800da9e:	e007      	b.n	800dab0 <__sfputs_r+0x22>
 800daa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daa4:	463a      	mov	r2, r7
 800daa6:	4630      	mov	r0, r6
 800daa8:	f7ff ffda 	bl	800da60 <__sfputc_r>
 800daac:	1c43      	adds	r3, r0, #1
 800daae:	d1f3      	bne.n	800da98 <__sfputs_r+0xa>
 800dab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dab4 <_vfiprintf_r>:
 800dab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab8:	460d      	mov	r5, r1
 800daba:	b09d      	sub	sp, #116	; 0x74
 800dabc:	4614      	mov	r4, r2
 800dabe:	4698      	mov	r8, r3
 800dac0:	4606      	mov	r6, r0
 800dac2:	b118      	cbz	r0, 800dacc <_vfiprintf_r+0x18>
 800dac4:	6983      	ldr	r3, [r0, #24]
 800dac6:	b90b      	cbnz	r3, 800dacc <_vfiprintf_r+0x18>
 800dac8:	f000 fb14 	bl	800e0f4 <__sinit>
 800dacc:	4b89      	ldr	r3, [pc, #548]	; (800dcf4 <_vfiprintf_r+0x240>)
 800dace:	429d      	cmp	r5, r3
 800dad0:	d11b      	bne.n	800db0a <_vfiprintf_r+0x56>
 800dad2:	6875      	ldr	r5, [r6, #4]
 800dad4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dad6:	07d9      	lsls	r1, r3, #31
 800dad8:	d405      	bmi.n	800dae6 <_vfiprintf_r+0x32>
 800dada:	89ab      	ldrh	r3, [r5, #12]
 800dadc:	059a      	lsls	r2, r3, #22
 800dade:	d402      	bmi.n	800dae6 <_vfiprintf_r+0x32>
 800dae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dae2:	f000 fba5 	bl	800e230 <__retarget_lock_acquire_recursive>
 800dae6:	89ab      	ldrh	r3, [r5, #12]
 800dae8:	071b      	lsls	r3, r3, #28
 800daea:	d501      	bpl.n	800daf0 <_vfiprintf_r+0x3c>
 800daec:	692b      	ldr	r3, [r5, #16]
 800daee:	b9eb      	cbnz	r3, 800db2c <_vfiprintf_r+0x78>
 800daf0:	4629      	mov	r1, r5
 800daf2:	4630      	mov	r0, r6
 800daf4:	f000 f96e 	bl	800ddd4 <__swsetup_r>
 800daf8:	b1c0      	cbz	r0, 800db2c <_vfiprintf_r+0x78>
 800dafa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dafc:	07dc      	lsls	r4, r3, #31
 800dafe:	d50e      	bpl.n	800db1e <_vfiprintf_r+0x6a>
 800db00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db04:	b01d      	add	sp, #116	; 0x74
 800db06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db0a:	4b7b      	ldr	r3, [pc, #492]	; (800dcf8 <_vfiprintf_r+0x244>)
 800db0c:	429d      	cmp	r5, r3
 800db0e:	d101      	bne.n	800db14 <_vfiprintf_r+0x60>
 800db10:	68b5      	ldr	r5, [r6, #8]
 800db12:	e7df      	b.n	800dad4 <_vfiprintf_r+0x20>
 800db14:	4b79      	ldr	r3, [pc, #484]	; (800dcfc <_vfiprintf_r+0x248>)
 800db16:	429d      	cmp	r5, r3
 800db18:	bf08      	it	eq
 800db1a:	68f5      	ldreq	r5, [r6, #12]
 800db1c:	e7da      	b.n	800dad4 <_vfiprintf_r+0x20>
 800db1e:	89ab      	ldrh	r3, [r5, #12]
 800db20:	0598      	lsls	r0, r3, #22
 800db22:	d4ed      	bmi.n	800db00 <_vfiprintf_r+0x4c>
 800db24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db26:	f000 fb84 	bl	800e232 <__retarget_lock_release_recursive>
 800db2a:	e7e9      	b.n	800db00 <_vfiprintf_r+0x4c>
 800db2c:	2300      	movs	r3, #0
 800db2e:	9309      	str	r3, [sp, #36]	; 0x24
 800db30:	2320      	movs	r3, #32
 800db32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db36:	f8cd 800c 	str.w	r8, [sp, #12]
 800db3a:	2330      	movs	r3, #48	; 0x30
 800db3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dd00 <_vfiprintf_r+0x24c>
 800db40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db44:	f04f 0901 	mov.w	r9, #1
 800db48:	4623      	mov	r3, r4
 800db4a:	469a      	mov	sl, r3
 800db4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db50:	b10a      	cbz	r2, 800db56 <_vfiprintf_r+0xa2>
 800db52:	2a25      	cmp	r2, #37	; 0x25
 800db54:	d1f9      	bne.n	800db4a <_vfiprintf_r+0x96>
 800db56:	ebba 0b04 	subs.w	fp, sl, r4
 800db5a:	d00b      	beq.n	800db74 <_vfiprintf_r+0xc0>
 800db5c:	465b      	mov	r3, fp
 800db5e:	4622      	mov	r2, r4
 800db60:	4629      	mov	r1, r5
 800db62:	4630      	mov	r0, r6
 800db64:	f7ff ff93 	bl	800da8e <__sfputs_r>
 800db68:	3001      	adds	r0, #1
 800db6a:	f000 80aa 	beq.w	800dcc2 <_vfiprintf_r+0x20e>
 800db6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db70:	445a      	add	r2, fp
 800db72:	9209      	str	r2, [sp, #36]	; 0x24
 800db74:	f89a 3000 	ldrb.w	r3, [sl]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f000 80a2 	beq.w	800dcc2 <_vfiprintf_r+0x20e>
 800db7e:	2300      	movs	r3, #0
 800db80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db88:	f10a 0a01 	add.w	sl, sl, #1
 800db8c:	9304      	str	r3, [sp, #16]
 800db8e:	9307      	str	r3, [sp, #28]
 800db90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db94:	931a      	str	r3, [sp, #104]	; 0x68
 800db96:	4654      	mov	r4, sl
 800db98:	2205      	movs	r2, #5
 800db9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db9e:	4858      	ldr	r0, [pc, #352]	; (800dd00 <_vfiprintf_r+0x24c>)
 800dba0:	f7f2 fb2e 	bl	8000200 <memchr>
 800dba4:	9a04      	ldr	r2, [sp, #16]
 800dba6:	b9d8      	cbnz	r0, 800dbe0 <_vfiprintf_r+0x12c>
 800dba8:	06d1      	lsls	r1, r2, #27
 800dbaa:	bf44      	itt	mi
 800dbac:	2320      	movmi	r3, #32
 800dbae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbb2:	0713      	lsls	r3, r2, #28
 800dbb4:	bf44      	itt	mi
 800dbb6:	232b      	movmi	r3, #43	; 0x2b
 800dbb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbbc:	f89a 3000 	ldrb.w	r3, [sl]
 800dbc0:	2b2a      	cmp	r3, #42	; 0x2a
 800dbc2:	d015      	beq.n	800dbf0 <_vfiprintf_r+0x13c>
 800dbc4:	9a07      	ldr	r2, [sp, #28]
 800dbc6:	4654      	mov	r4, sl
 800dbc8:	2000      	movs	r0, #0
 800dbca:	f04f 0c0a 	mov.w	ip, #10
 800dbce:	4621      	mov	r1, r4
 800dbd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbd4:	3b30      	subs	r3, #48	; 0x30
 800dbd6:	2b09      	cmp	r3, #9
 800dbd8:	d94e      	bls.n	800dc78 <_vfiprintf_r+0x1c4>
 800dbda:	b1b0      	cbz	r0, 800dc0a <_vfiprintf_r+0x156>
 800dbdc:	9207      	str	r2, [sp, #28]
 800dbde:	e014      	b.n	800dc0a <_vfiprintf_r+0x156>
 800dbe0:	eba0 0308 	sub.w	r3, r0, r8
 800dbe4:	fa09 f303 	lsl.w	r3, r9, r3
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	9304      	str	r3, [sp, #16]
 800dbec:	46a2      	mov	sl, r4
 800dbee:	e7d2      	b.n	800db96 <_vfiprintf_r+0xe2>
 800dbf0:	9b03      	ldr	r3, [sp, #12]
 800dbf2:	1d19      	adds	r1, r3, #4
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	9103      	str	r1, [sp, #12]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	bfbb      	ittet	lt
 800dbfc:	425b      	neglt	r3, r3
 800dbfe:	f042 0202 	orrlt.w	r2, r2, #2
 800dc02:	9307      	strge	r3, [sp, #28]
 800dc04:	9307      	strlt	r3, [sp, #28]
 800dc06:	bfb8      	it	lt
 800dc08:	9204      	strlt	r2, [sp, #16]
 800dc0a:	7823      	ldrb	r3, [r4, #0]
 800dc0c:	2b2e      	cmp	r3, #46	; 0x2e
 800dc0e:	d10c      	bne.n	800dc2a <_vfiprintf_r+0x176>
 800dc10:	7863      	ldrb	r3, [r4, #1]
 800dc12:	2b2a      	cmp	r3, #42	; 0x2a
 800dc14:	d135      	bne.n	800dc82 <_vfiprintf_r+0x1ce>
 800dc16:	9b03      	ldr	r3, [sp, #12]
 800dc18:	1d1a      	adds	r2, r3, #4
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	9203      	str	r2, [sp, #12]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	bfb8      	it	lt
 800dc22:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dc26:	3402      	adds	r4, #2
 800dc28:	9305      	str	r3, [sp, #20]
 800dc2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dd10 <_vfiprintf_r+0x25c>
 800dc2e:	7821      	ldrb	r1, [r4, #0]
 800dc30:	2203      	movs	r2, #3
 800dc32:	4650      	mov	r0, sl
 800dc34:	f7f2 fae4 	bl	8000200 <memchr>
 800dc38:	b140      	cbz	r0, 800dc4c <_vfiprintf_r+0x198>
 800dc3a:	2340      	movs	r3, #64	; 0x40
 800dc3c:	eba0 000a 	sub.w	r0, r0, sl
 800dc40:	fa03 f000 	lsl.w	r0, r3, r0
 800dc44:	9b04      	ldr	r3, [sp, #16]
 800dc46:	4303      	orrs	r3, r0
 800dc48:	3401      	adds	r4, #1
 800dc4a:	9304      	str	r3, [sp, #16]
 800dc4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc50:	482c      	ldr	r0, [pc, #176]	; (800dd04 <_vfiprintf_r+0x250>)
 800dc52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc56:	2206      	movs	r2, #6
 800dc58:	f7f2 fad2 	bl	8000200 <memchr>
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	d03f      	beq.n	800dce0 <_vfiprintf_r+0x22c>
 800dc60:	4b29      	ldr	r3, [pc, #164]	; (800dd08 <_vfiprintf_r+0x254>)
 800dc62:	bb1b      	cbnz	r3, 800dcac <_vfiprintf_r+0x1f8>
 800dc64:	9b03      	ldr	r3, [sp, #12]
 800dc66:	3307      	adds	r3, #7
 800dc68:	f023 0307 	bic.w	r3, r3, #7
 800dc6c:	3308      	adds	r3, #8
 800dc6e:	9303      	str	r3, [sp, #12]
 800dc70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc72:	443b      	add	r3, r7
 800dc74:	9309      	str	r3, [sp, #36]	; 0x24
 800dc76:	e767      	b.n	800db48 <_vfiprintf_r+0x94>
 800dc78:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc7c:	460c      	mov	r4, r1
 800dc7e:	2001      	movs	r0, #1
 800dc80:	e7a5      	b.n	800dbce <_vfiprintf_r+0x11a>
 800dc82:	2300      	movs	r3, #0
 800dc84:	3401      	adds	r4, #1
 800dc86:	9305      	str	r3, [sp, #20]
 800dc88:	4619      	mov	r1, r3
 800dc8a:	f04f 0c0a 	mov.w	ip, #10
 800dc8e:	4620      	mov	r0, r4
 800dc90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc94:	3a30      	subs	r2, #48	; 0x30
 800dc96:	2a09      	cmp	r2, #9
 800dc98:	d903      	bls.n	800dca2 <_vfiprintf_r+0x1ee>
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d0c5      	beq.n	800dc2a <_vfiprintf_r+0x176>
 800dc9e:	9105      	str	r1, [sp, #20]
 800dca0:	e7c3      	b.n	800dc2a <_vfiprintf_r+0x176>
 800dca2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dca6:	4604      	mov	r4, r0
 800dca8:	2301      	movs	r3, #1
 800dcaa:	e7f0      	b.n	800dc8e <_vfiprintf_r+0x1da>
 800dcac:	ab03      	add	r3, sp, #12
 800dcae:	9300      	str	r3, [sp, #0]
 800dcb0:	462a      	mov	r2, r5
 800dcb2:	4b16      	ldr	r3, [pc, #88]	; (800dd0c <_vfiprintf_r+0x258>)
 800dcb4:	a904      	add	r1, sp, #16
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	f7fd fdf0 	bl	800b89c <_printf_float>
 800dcbc:	4607      	mov	r7, r0
 800dcbe:	1c78      	adds	r0, r7, #1
 800dcc0:	d1d6      	bne.n	800dc70 <_vfiprintf_r+0x1bc>
 800dcc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcc4:	07d9      	lsls	r1, r3, #31
 800dcc6:	d405      	bmi.n	800dcd4 <_vfiprintf_r+0x220>
 800dcc8:	89ab      	ldrh	r3, [r5, #12]
 800dcca:	059a      	lsls	r2, r3, #22
 800dccc:	d402      	bmi.n	800dcd4 <_vfiprintf_r+0x220>
 800dcce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcd0:	f000 faaf 	bl	800e232 <__retarget_lock_release_recursive>
 800dcd4:	89ab      	ldrh	r3, [r5, #12]
 800dcd6:	065b      	lsls	r3, r3, #25
 800dcd8:	f53f af12 	bmi.w	800db00 <_vfiprintf_r+0x4c>
 800dcdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dcde:	e711      	b.n	800db04 <_vfiprintf_r+0x50>
 800dce0:	ab03      	add	r3, sp, #12
 800dce2:	9300      	str	r3, [sp, #0]
 800dce4:	462a      	mov	r2, r5
 800dce6:	4b09      	ldr	r3, [pc, #36]	; (800dd0c <_vfiprintf_r+0x258>)
 800dce8:	a904      	add	r1, sp, #16
 800dcea:	4630      	mov	r0, r6
 800dcec:	f7fe f87a 	bl	800bde4 <_printf_i>
 800dcf0:	e7e4      	b.n	800dcbc <_vfiprintf_r+0x208>
 800dcf2:	bf00      	nop
 800dcf4:	0800e9b4 	.word	0x0800e9b4
 800dcf8:	0800e9d4 	.word	0x0800e9d4
 800dcfc:	0800e994 	.word	0x0800e994
 800dd00:	0800e83c 	.word	0x0800e83c
 800dd04:	0800e846 	.word	0x0800e846
 800dd08:	0800b89d 	.word	0x0800b89d
 800dd0c:	0800da8f 	.word	0x0800da8f
 800dd10:	0800e842 	.word	0x0800e842

0800dd14 <__swbuf_r>:
 800dd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd16:	460e      	mov	r6, r1
 800dd18:	4614      	mov	r4, r2
 800dd1a:	4605      	mov	r5, r0
 800dd1c:	b118      	cbz	r0, 800dd26 <__swbuf_r+0x12>
 800dd1e:	6983      	ldr	r3, [r0, #24]
 800dd20:	b90b      	cbnz	r3, 800dd26 <__swbuf_r+0x12>
 800dd22:	f000 f9e7 	bl	800e0f4 <__sinit>
 800dd26:	4b21      	ldr	r3, [pc, #132]	; (800ddac <__swbuf_r+0x98>)
 800dd28:	429c      	cmp	r4, r3
 800dd2a:	d12b      	bne.n	800dd84 <__swbuf_r+0x70>
 800dd2c:	686c      	ldr	r4, [r5, #4]
 800dd2e:	69a3      	ldr	r3, [r4, #24]
 800dd30:	60a3      	str	r3, [r4, #8]
 800dd32:	89a3      	ldrh	r3, [r4, #12]
 800dd34:	071a      	lsls	r2, r3, #28
 800dd36:	d52f      	bpl.n	800dd98 <__swbuf_r+0x84>
 800dd38:	6923      	ldr	r3, [r4, #16]
 800dd3a:	b36b      	cbz	r3, 800dd98 <__swbuf_r+0x84>
 800dd3c:	6923      	ldr	r3, [r4, #16]
 800dd3e:	6820      	ldr	r0, [r4, #0]
 800dd40:	1ac0      	subs	r0, r0, r3
 800dd42:	6963      	ldr	r3, [r4, #20]
 800dd44:	b2f6      	uxtb	r6, r6
 800dd46:	4283      	cmp	r3, r0
 800dd48:	4637      	mov	r7, r6
 800dd4a:	dc04      	bgt.n	800dd56 <__swbuf_r+0x42>
 800dd4c:	4621      	mov	r1, r4
 800dd4e:	4628      	mov	r0, r5
 800dd50:	f000 f93c 	bl	800dfcc <_fflush_r>
 800dd54:	bb30      	cbnz	r0, 800dda4 <__swbuf_r+0x90>
 800dd56:	68a3      	ldr	r3, [r4, #8]
 800dd58:	3b01      	subs	r3, #1
 800dd5a:	60a3      	str	r3, [r4, #8]
 800dd5c:	6823      	ldr	r3, [r4, #0]
 800dd5e:	1c5a      	adds	r2, r3, #1
 800dd60:	6022      	str	r2, [r4, #0]
 800dd62:	701e      	strb	r6, [r3, #0]
 800dd64:	6963      	ldr	r3, [r4, #20]
 800dd66:	3001      	adds	r0, #1
 800dd68:	4283      	cmp	r3, r0
 800dd6a:	d004      	beq.n	800dd76 <__swbuf_r+0x62>
 800dd6c:	89a3      	ldrh	r3, [r4, #12]
 800dd6e:	07db      	lsls	r3, r3, #31
 800dd70:	d506      	bpl.n	800dd80 <__swbuf_r+0x6c>
 800dd72:	2e0a      	cmp	r6, #10
 800dd74:	d104      	bne.n	800dd80 <__swbuf_r+0x6c>
 800dd76:	4621      	mov	r1, r4
 800dd78:	4628      	mov	r0, r5
 800dd7a:	f000 f927 	bl	800dfcc <_fflush_r>
 800dd7e:	b988      	cbnz	r0, 800dda4 <__swbuf_r+0x90>
 800dd80:	4638      	mov	r0, r7
 800dd82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd84:	4b0a      	ldr	r3, [pc, #40]	; (800ddb0 <__swbuf_r+0x9c>)
 800dd86:	429c      	cmp	r4, r3
 800dd88:	d101      	bne.n	800dd8e <__swbuf_r+0x7a>
 800dd8a:	68ac      	ldr	r4, [r5, #8]
 800dd8c:	e7cf      	b.n	800dd2e <__swbuf_r+0x1a>
 800dd8e:	4b09      	ldr	r3, [pc, #36]	; (800ddb4 <__swbuf_r+0xa0>)
 800dd90:	429c      	cmp	r4, r3
 800dd92:	bf08      	it	eq
 800dd94:	68ec      	ldreq	r4, [r5, #12]
 800dd96:	e7ca      	b.n	800dd2e <__swbuf_r+0x1a>
 800dd98:	4621      	mov	r1, r4
 800dd9a:	4628      	mov	r0, r5
 800dd9c:	f000 f81a 	bl	800ddd4 <__swsetup_r>
 800dda0:	2800      	cmp	r0, #0
 800dda2:	d0cb      	beq.n	800dd3c <__swbuf_r+0x28>
 800dda4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dda8:	e7ea      	b.n	800dd80 <__swbuf_r+0x6c>
 800ddaa:	bf00      	nop
 800ddac:	0800e9b4 	.word	0x0800e9b4
 800ddb0:	0800e9d4 	.word	0x0800e9d4
 800ddb4:	0800e994 	.word	0x0800e994

0800ddb8 <__ascii_wctomb>:
 800ddb8:	b149      	cbz	r1, 800ddce <__ascii_wctomb+0x16>
 800ddba:	2aff      	cmp	r2, #255	; 0xff
 800ddbc:	bf85      	ittet	hi
 800ddbe:	238a      	movhi	r3, #138	; 0x8a
 800ddc0:	6003      	strhi	r3, [r0, #0]
 800ddc2:	700a      	strbls	r2, [r1, #0]
 800ddc4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ddc8:	bf98      	it	ls
 800ddca:	2001      	movls	r0, #1
 800ddcc:	4770      	bx	lr
 800ddce:	4608      	mov	r0, r1
 800ddd0:	4770      	bx	lr
	...

0800ddd4 <__swsetup_r>:
 800ddd4:	4b32      	ldr	r3, [pc, #200]	; (800dea0 <__swsetup_r+0xcc>)
 800ddd6:	b570      	push	{r4, r5, r6, lr}
 800ddd8:	681d      	ldr	r5, [r3, #0]
 800ddda:	4606      	mov	r6, r0
 800dddc:	460c      	mov	r4, r1
 800ddde:	b125      	cbz	r5, 800ddea <__swsetup_r+0x16>
 800dde0:	69ab      	ldr	r3, [r5, #24]
 800dde2:	b913      	cbnz	r3, 800ddea <__swsetup_r+0x16>
 800dde4:	4628      	mov	r0, r5
 800dde6:	f000 f985 	bl	800e0f4 <__sinit>
 800ddea:	4b2e      	ldr	r3, [pc, #184]	; (800dea4 <__swsetup_r+0xd0>)
 800ddec:	429c      	cmp	r4, r3
 800ddee:	d10f      	bne.n	800de10 <__swsetup_r+0x3c>
 800ddf0:	686c      	ldr	r4, [r5, #4]
 800ddf2:	89a3      	ldrh	r3, [r4, #12]
 800ddf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddf8:	0719      	lsls	r1, r3, #28
 800ddfa:	d42c      	bmi.n	800de56 <__swsetup_r+0x82>
 800ddfc:	06dd      	lsls	r5, r3, #27
 800ddfe:	d411      	bmi.n	800de24 <__swsetup_r+0x50>
 800de00:	2309      	movs	r3, #9
 800de02:	6033      	str	r3, [r6, #0]
 800de04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800de08:	81a3      	strh	r3, [r4, #12]
 800de0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de0e:	e03e      	b.n	800de8e <__swsetup_r+0xba>
 800de10:	4b25      	ldr	r3, [pc, #148]	; (800dea8 <__swsetup_r+0xd4>)
 800de12:	429c      	cmp	r4, r3
 800de14:	d101      	bne.n	800de1a <__swsetup_r+0x46>
 800de16:	68ac      	ldr	r4, [r5, #8]
 800de18:	e7eb      	b.n	800ddf2 <__swsetup_r+0x1e>
 800de1a:	4b24      	ldr	r3, [pc, #144]	; (800deac <__swsetup_r+0xd8>)
 800de1c:	429c      	cmp	r4, r3
 800de1e:	bf08      	it	eq
 800de20:	68ec      	ldreq	r4, [r5, #12]
 800de22:	e7e6      	b.n	800ddf2 <__swsetup_r+0x1e>
 800de24:	0758      	lsls	r0, r3, #29
 800de26:	d512      	bpl.n	800de4e <__swsetup_r+0x7a>
 800de28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de2a:	b141      	cbz	r1, 800de3e <__swsetup_r+0x6a>
 800de2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de30:	4299      	cmp	r1, r3
 800de32:	d002      	beq.n	800de3a <__swsetup_r+0x66>
 800de34:	4630      	mov	r0, r6
 800de36:	f7ff fb6f 	bl	800d518 <_free_r>
 800de3a:	2300      	movs	r3, #0
 800de3c:	6363      	str	r3, [r4, #52]	; 0x34
 800de3e:	89a3      	ldrh	r3, [r4, #12]
 800de40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de44:	81a3      	strh	r3, [r4, #12]
 800de46:	2300      	movs	r3, #0
 800de48:	6063      	str	r3, [r4, #4]
 800de4a:	6923      	ldr	r3, [r4, #16]
 800de4c:	6023      	str	r3, [r4, #0]
 800de4e:	89a3      	ldrh	r3, [r4, #12]
 800de50:	f043 0308 	orr.w	r3, r3, #8
 800de54:	81a3      	strh	r3, [r4, #12]
 800de56:	6923      	ldr	r3, [r4, #16]
 800de58:	b94b      	cbnz	r3, 800de6e <__swsetup_r+0x9a>
 800de5a:	89a3      	ldrh	r3, [r4, #12]
 800de5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de64:	d003      	beq.n	800de6e <__swsetup_r+0x9a>
 800de66:	4621      	mov	r1, r4
 800de68:	4630      	mov	r0, r6
 800de6a:	f000 fa07 	bl	800e27c <__smakebuf_r>
 800de6e:	89a0      	ldrh	r0, [r4, #12]
 800de70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de74:	f010 0301 	ands.w	r3, r0, #1
 800de78:	d00a      	beq.n	800de90 <__swsetup_r+0xbc>
 800de7a:	2300      	movs	r3, #0
 800de7c:	60a3      	str	r3, [r4, #8]
 800de7e:	6963      	ldr	r3, [r4, #20]
 800de80:	425b      	negs	r3, r3
 800de82:	61a3      	str	r3, [r4, #24]
 800de84:	6923      	ldr	r3, [r4, #16]
 800de86:	b943      	cbnz	r3, 800de9a <__swsetup_r+0xc6>
 800de88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de8c:	d1ba      	bne.n	800de04 <__swsetup_r+0x30>
 800de8e:	bd70      	pop	{r4, r5, r6, pc}
 800de90:	0781      	lsls	r1, r0, #30
 800de92:	bf58      	it	pl
 800de94:	6963      	ldrpl	r3, [r4, #20]
 800de96:	60a3      	str	r3, [r4, #8]
 800de98:	e7f4      	b.n	800de84 <__swsetup_r+0xb0>
 800de9a:	2000      	movs	r0, #0
 800de9c:	e7f7      	b.n	800de8e <__swsetup_r+0xba>
 800de9e:	bf00      	nop
 800dea0:	20000184 	.word	0x20000184
 800dea4:	0800e9b4 	.word	0x0800e9b4
 800dea8:	0800e9d4 	.word	0x0800e9d4
 800deac:	0800e994 	.word	0x0800e994

0800deb0 <abort>:
 800deb0:	b508      	push	{r3, lr}
 800deb2:	2006      	movs	r0, #6
 800deb4:	f000 fa52 	bl	800e35c <raise>
 800deb8:	2001      	movs	r0, #1
 800deba:	f7f4 ff51 	bl	8002d60 <_exit>
	...

0800dec0 <__sflush_r>:
 800dec0:	898a      	ldrh	r2, [r1, #12]
 800dec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dec6:	4605      	mov	r5, r0
 800dec8:	0710      	lsls	r0, r2, #28
 800deca:	460c      	mov	r4, r1
 800decc:	d458      	bmi.n	800df80 <__sflush_r+0xc0>
 800dece:	684b      	ldr	r3, [r1, #4]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	dc05      	bgt.n	800dee0 <__sflush_r+0x20>
 800ded4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	dc02      	bgt.n	800dee0 <__sflush_r+0x20>
 800deda:	2000      	movs	r0, #0
 800dedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dee0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dee2:	2e00      	cmp	r6, #0
 800dee4:	d0f9      	beq.n	800deda <__sflush_r+0x1a>
 800dee6:	2300      	movs	r3, #0
 800dee8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800deec:	682f      	ldr	r7, [r5, #0]
 800deee:	602b      	str	r3, [r5, #0]
 800def0:	d032      	beq.n	800df58 <__sflush_r+0x98>
 800def2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800def4:	89a3      	ldrh	r3, [r4, #12]
 800def6:	075a      	lsls	r2, r3, #29
 800def8:	d505      	bpl.n	800df06 <__sflush_r+0x46>
 800defa:	6863      	ldr	r3, [r4, #4]
 800defc:	1ac0      	subs	r0, r0, r3
 800defe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df00:	b10b      	cbz	r3, 800df06 <__sflush_r+0x46>
 800df02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df04:	1ac0      	subs	r0, r0, r3
 800df06:	2300      	movs	r3, #0
 800df08:	4602      	mov	r2, r0
 800df0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df0c:	6a21      	ldr	r1, [r4, #32]
 800df0e:	4628      	mov	r0, r5
 800df10:	47b0      	blx	r6
 800df12:	1c43      	adds	r3, r0, #1
 800df14:	89a3      	ldrh	r3, [r4, #12]
 800df16:	d106      	bne.n	800df26 <__sflush_r+0x66>
 800df18:	6829      	ldr	r1, [r5, #0]
 800df1a:	291d      	cmp	r1, #29
 800df1c:	d82c      	bhi.n	800df78 <__sflush_r+0xb8>
 800df1e:	4a2a      	ldr	r2, [pc, #168]	; (800dfc8 <__sflush_r+0x108>)
 800df20:	40ca      	lsrs	r2, r1
 800df22:	07d6      	lsls	r6, r2, #31
 800df24:	d528      	bpl.n	800df78 <__sflush_r+0xb8>
 800df26:	2200      	movs	r2, #0
 800df28:	6062      	str	r2, [r4, #4]
 800df2a:	04d9      	lsls	r1, r3, #19
 800df2c:	6922      	ldr	r2, [r4, #16]
 800df2e:	6022      	str	r2, [r4, #0]
 800df30:	d504      	bpl.n	800df3c <__sflush_r+0x7c>
 800df32:	1c42      	adds	r2, r0, #1
 800df34:	d101      	bne.n	800df3a <__sflush_r+0x7a>
 800df36:	682b      	ldr	r3, [r5, #0]
 800df38:	b903      	cbnz	r3, 800df3c <__sflush_r+0x7c>
 800df3a:	6560      	str	r0, [r4, #84]	; 0x54
 800df3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df3e:	602f      	str	r7, [r5, #0]
 800df40:	2900      	cmp	r1, #0
 800df42:	d0ca      	beq.n	800deda <__sflush_r+0x1a>
 800df44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df48:	4299      	cmp	r1, r3
 800df4a:	d002      	beq.n	800df52 <__sflush_r+0x92>
 800df4c:	4628      	mov	r0, r5
 800df4e:	f7ff fae3 	bl	800d518 <_free_r>
 800df52:	2000      	movs	r0, #0
 800df54:	6360      	str	r0, [r4, #52]	; 0x34
 800df56:	e7c1      	b.n	800dedc <__sflush_r+0x1c>
 800df58:	6a21      	ldr	r1, [r4, #32]
 800df5a:	2301      	movs	r3, #1
 800df5c:	4628      	mov	r0, r5
 800df5e:	47b0      	blx	r6
 800df60:	1c41      	adds	r1, r0, #1
 800df62:	d1c7      	bne.n	800def4 <__sflush_r+0x34>
 800df64:	682b      	ldr	r3, [r5, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d0c4      	beq.n	800def4 <__sflush_r+0x34>
 800df6a:	2b1d      	cmp	r3, #29
 800df6c:	d001      	beq.n	800df72 <__sflush_r+0xb2>
 800df6e:	2b16      	cmp	r3, #22
 800df70:	d101      	bne.n	800df76 <__sflush_r+0xb6>
 800df72:	602f      	str	r7, [r5, #0]
 800df74:	e7b1      	b.n	800deda <__sflush_r+0x1a>
 800df76:	89a3      	ldrh	r3, [r4, #12]
 800df78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df7c:	81a3      	strh	r3, [r4, #12]
 800df7e:	e7ad      	b.n	800dedc <__sflush_r+0x1c>
 800df80:	690f      	ldr	r7, [r1, #16]
 800df82:	2f00      	cmp	r7, #0
 800df84:	d0a9      	beq.n	800deda <__sflush_r+0x1a>
 800df86:	0793      	lsls	r3, r2, #30
 800df88:	680e      	ldr	r6, [r1, #0]
 800df8a:	bf08      	it	eq
 800df8c:	694b      	ldreq	r3, [r1, #20]
 800df8e:	600f      	str	r7, [r1, #0]
 800df90:	bf18      	it	ne
 800df92:	2300      	movne	r3, #0
 800df94:	eba6 0807 	sub.w	r8, r6, r7
 800df98:	608b      	str	r3, [r1, #8]
 800df9a:	f1b8 0f00 	cmp.w	r8, #0
 800df9e:	dd9c      	ble.n	800deda <__sflush_r+0x1a>
 800dfa0:	6a21      	ldr	r1, [r4, #32]
 800dfa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dfa4:	4643      	mov	r3, r8
 800dfa6:	463a      	mov	r2, r7
 800dfa8:	4628      	mov	r0, r5
 800dfaa:	47b0      	blx	r6
 800dfac:	2800      	cmp	r0, #0
 800dfae:	dc06      	bgt.n	800dfbe <__sflush_r+0xfe>
 800dfb0:	89a3      	ldrh	r3, [r4, #12]
 800dfb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfb6:	81a3      	strh	r3, [r4, #12]
 800dfb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dfbc:	e78e      	b.n	800dedc <__sflush_r+0x1c>
 800dfbe:	4407      	add	r7, r0
 800dfc0:	eba8 0800 	sub.w	r8, r8, r0
 800dfc4:	e7e9      	b.n	800df9a <__sflush_r+0xda>
 800dfc6:	bf00      	nop
 800dfc8:	20400001 	.word	0x20400001

0800dfcc <_fflush_r>:
 800dfcc:	b538      	push	{r3, r4, r5, lr}
 800dfce:	690b      	ldr	r3, [r1, #16]
 800dfd0:	4605      	mov	r5, r0
 800dfd2:	460c      	mov	r4, r1
 800dfd4:	b913      	cbnz	r3, 800dfdc <_fflush_r+0x10>
 800dfd6:	2500      	movs	r5, #0
 800dfd8:	4628      	mov	r0, r5
 800dfda:	bd38      	pop	{r3, r4, r5, pc}
 800dfdc:	b118      	cbz	r0, 800dfe6 <_fflush_r+0x1a>
 800dfde:	6983      	ldr	r3, [r0, #24]
 800dfe0:	b90b      	cbnz	r3, 800dfe6 <_fflush_r+0x1a>
 800dfe2:	f000 f887 	bl	800e0f4 <__sinit>
 800dfe6:	4b14      	ldr	r3, [pc, #80]	; (800e038 <_fflush_r+0x6c>)
 800dfe8:	429c      	cmp	r4, r3
 800dfea:	d11b      	bne.n	800e024 <_fflush_r+0x58>
 800dfec:	686c      	ldr	r4, [r5, #4]
 800dfee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d0ef      	beq.n	800dfd6 <_fflush_r+0xa>
 800dff6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dff8:	07d0      	lsls	r0, r2, #31
 800dffa:	d404      	bmi.n	800e006 <_fflush_r+0x3a>
 800dffc:	0599      	lsls	r1, r3, #22
 800dffe:	d402      	bmi.n	800e006 <_fflush_r+0x3a>
 800e000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e002:	f000 f915 	bl	800e230 <__retarget_lock_acquire_recursive>
 800e006:	4628      	mov	r0, r5
 800e008:	4621      	mov	r1, r4
 800e00a:	f7ff ff59 	bl	800dec0 <__sflush_r>
 800e00e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e010:	07da      	lsls	r2, r3, #31
 800e012:	4605      	mov	r5, r0
 800e014:	d4e0      	bmi.n	800dfd8 <_fflush_r+0xc>
 800e016:	89a3      	ldrh	r3, [r4, #12]
 800e018:	059b      	lsls	r3, r3, #22
 800e01a:	d4dd      	bmi.n	800dfd8 <_fflush_r+0xc>
 800e01c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e01e:	f000 f908 	bl	800e232 <__retarget_lock_release_recursive>
 800e022:	e7d9      	b.n	800dfd8 <_fflush_r+0xc>
 800e024:	4b05      	ldr	r3, [pc, #20]	; (800e03c <_fflush_r+0x70>)
 800e026:	429c      	cmp	r4, r3
 800e028:	d101      	bne.n	800e02e <_fflush_r+0x62>
 800e02a:	68ac      	ldr	r4, [r5, #8]
 800e02c:	e7df      	b.n	800dfee <_fflush_r+0x22>
 800e02e:	4b04      	ldr	r3, [pc, #16]	; (800e040 <_fflush_r+0x74>)
 800e030:	429c      	cmp	r4, r3
 800e032:	bf08      	it	eq
 800e034:	68ec      	ldreq	r4, [r5, #12]
 800e036:	e7da      	b.n	800dfee <_fflush_r+0x22>
 800e038:	0800e9b4 	.word	0x0800e9b4
 800e03c:	0800e9d4 	.word	0x0800e9d4
 800e040:	0800e994 	.word	0x0800e994

0800e044 <std>:
 800e044:	2300      	movs	r3, #0
 800e046:	b510      	push	{r4, lr}
 800e048:	4604      	mov	r4, r0
 800e04a:	e9c0 3300 	strd	r3, r3, [r0]
 800e04e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e052:	6083      	str	r3, [r0, #8]
 800e054:	8181      	strh	r1, [r0, #12]
 800e056:	6643      	str	r3, [r0, #100]	; 0x64
 800e058:	81c2      	strh	r2, [r0, #14]
 800e05a:	6183      	str	r3, [r0, #24]
 800e05c:	4619      	mov	r1, r3
 800e05e:	2208      	movs	r2, #8
 800e060:	305c      	adds	r0, #92	; 0x5c
 800e062:	f7fd fb73 	bl	800b74c <memset>
 800e066:	4b05      	ldr	r3, [pc, #20]	; (800e07c <std+0x38>)
 800e068:	6263      	str	r3, [r4, #36]	; 0x24
 800e06a:	4b05      	ldr	r3, [pc, #20]	; (800e080 <std+0x3c>)
 800e06c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e06e:	4b05      	ldr	r3, [pc, #20]	; (800e084 <std+0x40>)
 800e070:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e072:	4b05      	ldr	r3, [pc, #20]	; (800e088 <std+0x44>)
 800e074:	6224      	str	r4, [r4, #32]
 800e076:	6323      	str	r3, [r4, #48]	; 0x30
 800e078:	bd10      	pop	{r4, pc}
 800e07a:	bf00      	nop
 800e07c:	0800e395 	.word	0x0800e395
 800e080:	0800e3b7 	.word	0x0800e3b7
 800e084:	0800e3ef 	.word	0x0800e3ef
 800e088:	0800e413 	.word	0x0800e413

0800e08c <_cleanup_r>:
 800e08c:	4901      	ldr	r1, [pc, #4]	; (800e094 <_cleanup_r+0x8>)
 800e08e:	f000 b8af 	b.w	800e1f0 <_fwalk_reent>
 800e092:	bf00      	nop
 800e094:	0800dfcd 	.word	0x0800dfcd

0800e098 <__sfmoreglue>:
 800e098:	b570      	push	{r4, r5, r6, lr}
 800e09a:	1e4a      	subs	r2, r1, #1
 800e09c:	2568      	movs	r5, #104	; 0x68
 800e09e:	4355      	muls	r5, r2
 800e0a0:	460e      	mov	r6, r1
 800e0a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e0a6:	f7ff fa87 	bl	800d5b8 <_malloc_r>
 800e0aa:	4604      	mov	r4, r0
 800e0ac:	b140      	cbz	r0, 800e0c0 <__sfmoreglue+0x28>
 800e0ae:	2100      	movs	r1, #0
 800e0b0:	e9c0 1600 	strd	r1, r6, [r0]
 800e0b4:	300c      	adds	r0, #12
 800e0b6:	60a0      	str	r0, [r4, #8]
 800e0b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e0bc:	f7fd fb46 	bl	800b74c <memset>
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	bd70      	pop	{r4, r5, r6, pc}

0800e0c4 <__sfp_lock_acquire>:
 800e0c4:	4801      	ldr	r0, [pc, #4]	; (800e0cc <__sfp_lock_acquire+0x8>)
 800e0c6:	f000 b8b3 	b.w	800e230 <__retarget_lock_acquire_recursive>
 800e0ca:	bf00      	nop
 800e0cc:	20002084 	.word	0x20002084

0800e0d0 <__sfp_lock_release>:
 800e0d0:	4801      	ldr	r0, [pc, #4]	; (800e0d8 <__sfp_lock_release+0x8>)
 800e0d2:	f000 b8ae 	b.w	800e232 <__retarget_lock_release_recursive>
 800e0d6:	bf00      	nop
 800e0d8:	20002084 	.word	0x20002084

0800e0dc <__sinit_lock_acquire>:
 800e0dc:	4801      	ldr	r0, [pc, #4]	; (800e0e4 <__sinit_lock_acquire+0x8>)
 800e0de:	f000 b8a7 	b.w	800e230 <__retarget_lock_acquire_recursive>
 800e0e2:	bf00      	nop
 800e0e4:	2000207f 	.word	0x2000207f

0800e0e8 <__sinit_lock_release>:
 800e0e8:	4801      	ldr	r0, [pc, #4]	; (800e0f0 <__sinit_lock_release+0x8>)
 800e0ea:	f000 b8a2 	b.w	800e232 <__retarget_lock_release_recursive>
 800e0ee:	bf00      	nop
 800e0f0:	2000207f 	.word	0x2000207f

0800e0f4 <__sinit>:
 800e0f4:	b510      	push	{r4, lr}
 800e0f6:	4604      	mov	r4, r0
 800e0f8:	f7ff fff0 	bl	800e0dc <__sinit_lock_acquire>
 800e0fc:	69a3      	ldr	r3, [r4, #24]
 800e0fe:	b11b      	cbz	r3, 800e108 <__sinit+0x14>
 800e100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e104:	f7ff bff0 	b.w	800e0e8 <__sinit_lock_release>
 800e108:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e10c:	6523      	str	r3, [r4, #80]	; 0x50
 800e10e:	4b13      	ldr	r3, [pc, #76]	; (800e15c <__sinit+0x68>)
 800e110:	4a13      	ldr	r2, [pc, #76]	; (800e160 <__sinit+0x6c>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	62a2      	str	r2, [r4, #40]	; 0x28
 800e116:	42a3      	cmp	r3, r4
 800e118:	bf04      	itt	eq
 800e11a:	2301      	moveq	r3, #1
 800e11c:	61a3      	streq	r3, [r4, #24]
 800e11e:	4620      	mov	r0, r4
 800e120:	f000 f820 	bl	800e164 <__sfp>
 800e124:	6060      	str	r0, [r4, #4]
 800e126:	4620      	mov	r0, r4
 800e128:	f000 f81c 	bl	800e164 <__sfp>
 800e12c:	60a0      	str	r0, [r4, #8]
 800e12e:	4620      	mov	r0, r4
 800e130:	f000 f818 	bl	800e164 <__sfp>
 800e134:	2200      	movs	r2, #0
 800e136:	60e0      	str	r0, [r4, #12]
 800e138:	2104      	movs	r1, #4
 800e13a:	6860      	ldr	r0, [r4, #4]
 800e13c:	f7ff ff82 	bl	800e044 <std>
 800e140:	68a0      	ldr	r0, [r4, #8]
 800e142:	2201      	movs	r2, #1
 800e144:	2109      	movs	r1, #9
 800e146:	f7ff ff7d 	bl	800e044 <std>
 800e14a:	68e0      	ldr	r0, [r4, #12]
 800e14c:	2202      	movs	r2, #2
 800e14e:	2112      	movs	r1, #18
 800e150:	f7ff ff78 	bl	800e044 <std>
 800e154:	2301      	movs	r3, #1
 800e156:	61a3      	str	r3, [r4, #24]
 800e158:	e7d2      	b.n	800e100 <__sinit+0xc>
 800e15a:	bf00      	nop
 800e15c:	0800e614 	.word	0x0800e614
 800e160:	0800e08d 	.word	0x0800e08d

0800e164 <__sfp>:
 800e164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e166:	4607      	mov	r7, r0
 800e168:	f7ff ffac 	bl	800e0c4 <__sfp_lock_acquire>
 800e16c:	4b1e      	ldr	r3, [pc, #120]	; (800e1e8 <__sfp+0x84>)
 800e16e:	681e      	ldr	r6, [r3, #0]
 800e170:	69b3      	ldr	r3, [r6, #24]
 800e172:	b913      	cbnz	r3, 800e17a <__sfp+0x16>
 800e174:	4630      	mov	r0, r6
 800e176:	f7ff ffbd 	bl	800e0f4 <__sinit>
 800e17a:	3648      	adds	r6, #72	; 0x48
 800e17c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e180:	3b01      	subs	r3, #1
 800e182:	d503      	bpl.n	800e18c <__sfp+0x28>
 800e184:	6833      	ldr	r3, [r6, #0]
 800e186:	b30b      	cbz	r3, 800e1cc <__sfp+0x68>
 800e188:	6836      	ldr	r6, [r6, #0]
 800e18a:	e7f7      	b.n	800e17c <__sfp+0x18>
 800e18c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e190:	b9d5      	cbnz	r5, 800e1c8 <__sfp+0x64>
 800e192:	4b16      	ldr	r3, [pc, #88]	; (800e1ec <__sfp+0x88>)
 800e194:	60e3      	str	r3, [r4, #12]
 800e196:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e19a:	6665      	str	r5, [r4, #100]	; 0x64
 800e19c:	f000 f847 	bl	800e22e <__retarget_lock_init_recursive>
 800e1a0:	f7ff ff96 	bl	800e0d0 <__sfp_lock_release>
 800e1a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e1a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e1ac:	6025      	str	r5, [r4, #0]
 800e1ae:	61a5      	str	r5, [r4, #24]
 800e1b0:	2208      	movs	r2, #8
 800e1b2:	4629      	mov	r1, r5
 800e1b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e1b8:	f7fd fac8 	bl	800b74c <memset>
 800e1bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e1c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1c8:	3468      	adds	r4, #104	; 0x68
 800e1ca:	e7d9      	b.n	800e180 <__sfp+0x1c>
 800e1cc:	2104      	movs	r1, #4
 800e1ce:	4638      	mov	r0, r7
 800e1d0:	f7ff ff62 	bl	800e098 <__sfmoreglue>
 800e1d4:	4604      	mov	r4, r0
 800e1d6:	6030      	str	r0, [r6, #0]
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	d1d5      	bne.n	800e188 <__sfp+0x24>
 800e1dc:	f7ff ff78 	bl	800e0d0 <__sfp_lock_release>
 800e1e0:	230c      	movs	r3, #12
 800e1e2:	603b      	str	r3, [r7, #0]
 800e1e4:	e7ee      	b.n	800e1c4 <__sfp+0x60>
 800e1e6:	bf00      	nop
 800e1e8:	0800e614 	.word	0x0800e614
 800e1ec:	ffff0001 	.word	0xffff0001

0800e1f0 <_fwalk_reent>:
 800e1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1f4:	4606      	mov	r6, r0
 800e1f6:	4688      	mov	r8, r1
 800e1f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e1fc:	2700      	movs	r7, #0
 800e1fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e202:	f1b9 0901 	subs.w	r9, r9, #1
 800e206:	d505      	bpl.n	800e214 <_fwalk_reent+0x24>
 800e208:	6824      	ldr	r4, [r4, #0]
 800e20a:	2c00      	cmp	r4, #0
 800e20c:	d1f7      	bne.n	800e1fe <_fwalk_reent+0xe>
 800e20e:	4638      	mov	r0, r7
 800e210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e214:	89ab      	ldrh	r3, [r5, #12]
 800e216:	2b01      	cmp	r3, #1
 800e218:	d907      	bls.n	800e22a <_fwalk_reent+0x3a>
 800e21a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e21e:	3301      	adds	r3, #1
 800e220:	d003      	beq.n	800e22a <_fwalk_reent+0x3a>
 800e222:	4629      	mov	r1, r5
 800e224:	4630      	mov	r0, r6
 800e226:	47c0      	blx	r8
 800e228:	4307      	orrs	r7, r0
 800e22a:	3568      	adds	r5, #104	; 0x68
 800e22c:	e7e9      	b.n	800e202 <_fwalk_reent+0x12>

0800e22e <__retarget_lock_init_recursive>:
 800e22e:	4770      	bx	lr

0800e230 <__retarget_lock_acquire_recursive>:
 800e230:	4770      	bx	lr

0800e232 <__retarget_lock_release_recursive>:
 800e232:	4770      	bx	lr

0800e234 <__swhatbuf_r>:
 800e234:	b570      	push	{r4, r5, r6, lr}
 800e236:	460e      	mov	r6, r1
 800e238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e23c:	2900      	cmp	r1, #0
 800e23e:	b096      	sub	sp, #88	; 0x58
 800e240:	4614      	mov	r4, r2
 800e242:	461d      	mov	r5, r3
 800e244:	da07      	bge.n	800e256 <__swhatbuf_r+0x22>
 800e246:	2300      	movs	r3, #0
 800e248:	602b      	str	r3, [r5, #0]
 800e24a:	89b3      	ldrh	r3, [r6, #12]
 800e24c:	061a      	lsls	r2, r3, #24
 800e24e:	d410      	bmi.n	800e272 <__swhatbuf_r+0x3e>
 800e250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e254:	e00e      	b.n	800e274 <__swhatbuf_r+0x40>
 800e256:	466a      	mov	r2, sp
 800e258:	f000 f902 	bl	800e460 <_fstat_r>
 800e25c:	2800      	cmp	r0, #0
 800e25e:	dbf2      	blt.n	800e246 <__swhatbuf_r+0x12>
 800e260:	9a01      	ldr	r2, [sp, #4]
 800e262:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e266:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e26a:	425a      	negs	r2, r3
 800e26c:	415a      	adcs	r2, r3
 800e26e:	602a      	str	r2, [r5, #0]
 800e270:	e7ee      	b.n	800e250 <__swhatbuf_r+0x1c>
 800e272:	2340      	movs	r3, #64	; 0x40
 800e274:	2000      	movs	r0, #0
 800e276:	6023      	str	r3, [r4, #0]
 800e278:	b016      	add	sp, #88	; 0x58
 800e27a:	bd70      	pop	{r4, r5, r6, pc}

0800e27c <__smakebuf_r>:
 800e27c:	898b      	ldrh	r3, [r1, #12]
 800e27e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e280:	079d      	lsls	r5, r3, #30
 800e282:	4606      	mov	r6, r0
 800e284:	460c      	mov	r4, r1
 800e286:	d507      	bpl.n	800e298 <__smakebuf_r+0x1c>
 800e288:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e28c:	6023      	str	r3, [r4, #0]
 800e28e:	6123      	str	r3, [r4, #16]
 800e290:	2301      	movs	r3, #1
 800e292:	6163      	str	r3, [r4, #20]
 800e294:	b002      	add	sp, #8
 800e296:	bd70      	pop	{r4, r5, r6, pc}
 800e298:	ab01      	add	r3, sp, #4
 800e29a:	466a      	mov	r2, sp
 800e29c:	f7ff ffca 	bl	800e234 <__swhatbuf_r>
 800e2a0:	9900      	ldr	r1, [sp, #0]
 800e2a2:	4605      	mov	r5, r0
 800e2a4:	4630      	mov	r0, r6
 800e2a6:	f7ff f987 	bl	800d5b8 <_malloc_r>
 800e2aa:	b948      	cbnz	r0, 800e2c0 <__smakebuf_r+0x44>
 800e2ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2b0:	059a      	lsls	r2, r3, #22
 800e2b2:	d4ef      	bmi.n	800e294 <__smakebuf_r+0x18>
 800e2b4:	f023 0303 	bic.w	r3, r3, #3
 800e2b8:	f043 0302 	orr.w	r3, r3, #2
 800e2bc:	81a3      	strh	r3, [r4, #12]
 800e2be:	e7e3      	b.n	800e288 <__smakebuf_r+0xc>
 800e2c0:	4b0d      	ldr	r3, [pc, #52]	; (800e2f8 <__smakebuf_r+0x7c>)
 800e2c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800e2c4:	89a3      	ldrh	r3, [r4, #12]
 800e2c6:	6020      	str	r0, [r4, #0]
 800e2c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2cc:	81a3      	strh	r3, [r4, #12]
 800e2ce:	9b00      	ldr	r3, [sp, #0]
 800e2d0:	6163      	str	r3, [r4, #20]
 800e2d2:	9b01      	ldr	r3, [sp, #4]
 800e2d4:	6120      	str	r0, [r4, #16]
 800e2d6:	b15b      	cbz	r3, 800e2f0 <__smakebuf_r+0x74>
 800e2d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2dc:	4630      	mov	r0, r6
 800e2de:	f000 f8d1 	bl	800e484 <_isatty_r>
 800e2e2:	b128      	cbz	r0, 800e2f0 <__smakebuf_r+0x74>
 800e2e4:	89a3      	ldrh	r3, [r4, #12]
 800e2e6:	f023 0303 	bic.w	r3, r3, #3
 800e2ea:	f043 0301 	orr.w	r3, r3, #1
 800e2ee:	81a3      	strh	r3, [r4, #12]
 800e2f0:	89a0      	ldrh	r0, [r4, #12]
 800e2f2:	4305      	orrs	r5, r0
 800e2f4:	81a5      	strh	r5, [r4, #12]
 800e2f6:	e7cd      	b.n	800e294 <__smakebuf_r+0x18>
 800e2f8:	0800e08d 	.word	0x0800e08d

0800e2fc <_malloc_usable_size_r>:
 800e2fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e300:	1f18      	subs	r0, r3, #4
 800e302:	2b00      	cmp	r3, #0
 800e304:	bfbc      	itt	lt
 800e306:	580b      	ldrlt	r3, [r1, r0]
 800e308:	18c0      	addlt	r0, r0, r3
 800e30a:	4770      	bx	lr

0800e30c <_raise_r>:
 800e30c:	291f      	cmp	r1, #31
 800e30e:	b538      	push	{r3, r4, r5, lr}
 800e310:	4604      	mov	r4, r0
 800e312:	460d      	mov	r5, r1
 800e314:	d904      	bls.n	800e320 <_raise_r+0x14>
 800e316:	2316      	movs	r3, #22
 800e318:	6003      	str	r3, [r0, #0]
 800e31a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e31e:	bd38      	pop	{r3, r4, r5, pc}
 800e320:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e322:	b112      	cbz	r2, 800e32a <_raise_r+0x1e>
 800e324:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e328:	b94b      	cbnz	r3, 800e33e <_raise_r+0x32>
 800e32a:	4620      	mov	r0, r4
 800e32c:	f000 f830 	bl	800e390 <_getpid_r>
 800e330:	462a      	mov	r2, r5
 800e332:	4601      	mov	r1, r0
 800e334:	4620      	mov	r0, r4
 800e336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e33a:	f000 b817 	b.w	800e36c <_kill_r>
 800e33e:	2b01      	cmp	r3, #1
 800e340:	d00a      	beq.n	800e358 <_raise_r+0x4c>
 800e342:	1c59      	adds	r1, r3, #1
 800e344:	d103      	bne.n	800e34e <_raise_r+0x42>
 800e346:	2316      	movs	r3, #22
 800e348:	6003      	str	r3, [r0, #0]
 800e34a:	2001      	movs	r0, #1
 800e34c:	e7e7      	b.n	800e31e <_raise_r+0x12>
 800e34e:	2400      	movs	r4, #0
 800e350:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e354:	4628      	mov	r0, r5
 800e356:	4798      	blx	r3
 800e358:	2000      	movs	r0, #0
 800e35a:	e7e0      	b.n	800e31e <_raise_r+0x12>

0800e35c <raise>:
 800e35c:	4b02      	ldr	r3, [pc, #8]	; (800e368 <raise+0xc>)
 800e35e:	4601      	mov	r1, r0
 800e360:	6818      	ldr	r0, [r3, #0]
 800e362:	f7ff bfd3 	b.w	800e30c <_raise_r>
 800e366:	bf00      	nop
 800e368:	20000184 	.word	0x20000184

0800e36c <_kill_r>:
 800e36c:	b538      	push	{r3, r4, r5, lr}
 800e36e:	4d07      	ldr	r5, [pc, #28]	; (800e38c <_kill_r+0x20>)
 800e370:	2300      	movs	r3, #0
 800e372:	4604      	mov	r4, r0
 800e374:	4608      	mov	r0, r1
 800e376:	4611      	mov	r1, r2
 800e378:	602b      	str	r3, [r5, #0]
 800e37a:	f7f4 fce1 	bl	8002d40 <_kill>
 800e37e:	1c43      	adds	r3, r0, #1
 800e380:	d102      	bne.n	800e388 <_kill_r+0x1c>
 800e382:	682b      	ldr	r3, [r5, #0]
 800e384:	b103      	cbz	r3, 800e388 <_kill_r+0x1c>
 800e386:	6023      	str	r3, [r4, #0]
 800e388:	bd38      	pop	{r3, r4, r5, pc}
 800e38a:	bf00      	nop
 800e38c:	20002078 	.word	0x20002078

0800e390 <_getpid_r>:
 800e390:	f7f4 bcce 	b.w	8002d30 <_getpid>

0800e394 <__sread>:
 800e394:	b510      	push	{r4, lr}
 800e396:	460c      	mov	r4, r1
 800e398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e39c:	f000 f894 	bl	800e4c8 <_read_r>
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	bfab      	itete	ge
 800e3a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e3a6:	89a3      	ldrhlt	r3, [r4, #12]
 800e3a8:	181b      	addge	r3, r3, r0
 800e3aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e3ae:	bfac      	ite	ge
 800e3b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e3b2:	81a3      	strhlt	r3, [r4, #12]
 800e3b4:	bd10      	pop	{r4, pc}

0800e3b6 <__swrite>:
 800e3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ba:	461f      	mov	r7, r3
 800e3bc:	898b      	ldrh	r3, [r1, #12]
 800e3be:	05db      	lsls	r3, r3, #23
 800e3c0:	4605      	mov	r5, r0
 800e3c2:	460c      	mov	r4, r1
 800e3c4:	4616      	mov	r6, r2
 800e3c6:	d505      	bpl.n	800e3d4 <__swrite+0x1e>
 800e3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3cc:	2302      	movs	r3, #2
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	f000 f868 	bl	800e4a4 <_lseek_r>
 800e3d4:	89a3      	ldrh	r3, [r4, #12]
 800e3d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e3de:	81a3      	strh	r3, [r4, #12]
 800e3e0:	4632      	mov	r2, r6
 800e3e2:	463b      	mov	r3, r7
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ea:	f000 b817 	b.w	800e41c <_write_r>

0800e3ee <__sseek>:
 800e3ee:	b510      	push	{r4, lr}
 800e3f0:	460c      	mov	r4, r1
 800e3f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3f6:	f000 f855 	bl	800e4a4 <_lseek_r>
 800e3fa:	1c43      	adds	r3, r0, #1
 800e3fc:	89a3      	ldrh	r3, [r4, #12]
 800e3fe:	bf15      	itete	ne
 800e400:	6560      	strne	r0, [r4, #84]	; 0x54
 800e402:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e406:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e40a:	81a3      	strheq	r3, [r4, #12]
 800e40c:	bf18      	it	ne
 800e40e:	81a3      	strhne	r3, [r4, #12]
 800e410:	bd10      	pop	{r4, pc}

0800e412 <__sclose>:
 800e412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e416:	f000 b813 	b.w	800e440 <_close_r>
	...

0800e41c <_write_r>:
 800e41c:	b538      	push	{r3, r4, r5, lr}
 800e41e:	4d07      	ldr	r5, [pc, #28]	; (800e43c <_write_r+0x20>)
 800e420:	4604      	mov	r4, r0
 800e422:	4608      	mov	r0, r1
 800e424:	4611      	mov	r1, r2
 800e426:	2200      	movs	r2, #0
 800e428:	602a      	str	r2, [r5, #0]
 800e42a:	461a      	mov	r2, r3
 800e42c:	f7f4 fcbf 	bl	8002dae <_write>
 800e430:	1c43      	adds	r3, r0, #1
 800e432:	d102      	bne.n	800e43a <_write_r+0x1e>
 800e434:	682b      	ldr	r3, [r5, #0]
 800e436:	b103      	cbz	r3, 800e43a <_write_r+0x1e>
 800e438:	6023      	str	r3, [r4, #0]
 800e43a:	bd38      	pop	{r3, r4, r5, pc}
 800e43c:	20002078 	.word	0x20002078

0800e440 <_close_r>:
 800e440:	b538      	push	{r3, r4, r5, lr}
 800e442:	4d06      	ldr	r5, [pc, #24]	; (800e45c <_close_r+0x1c>)
 800e444:	2300      	movs	r3, #0
 800e446:	4604      	mov	r4, r0
 800e448:	4608      	mov	r0, r1
 800e44a:	602b      	str	r3, [r5, #0]
 800e44c:	f7f4 fccb 	bl	8002de6 <_close>
 800e450:	1c43      	adds	r3, r0, #1
 800e452:	d102      	bne.n	800e45a <_close_r+0x1a>
 800e454:	682b      	ldr	r3, [r5, #0]
 800e456:	b103      	cbz	r3, 800e45a <_close_r+0x1a>
 800e458:	6023      	str	r3, [r4, #0]
 800e45a:	bd38      	pop	{r3, r4, r5, pc}
 800e45c:	20002078 	.word	0x20002078

0800e460 <_fstat_r>:
 800e460:	b538      	push	{r3, r4, r5, lr}
 800e462:	4d07      	ldr	r5, [pc, #28]	; (800e480 <_fstat_r+0x20>)
 800e464:	2300      	movs	r3, #0
 800e466:	4604      	mov	r4, r0
 800e468:	4608      	mov	r0, r1
 800e46a:	4611      	mov	r1, r2
 800e46c:	602b      	str	r3, [r5, #0]
 800e46e:	f7f4 fcc6 	bl	8002dfe <_fstat>
 800e472:	1c43      	adds	r3, r0, #1
 800e474:	d102      	bne.n	800e47c <_fstat_r+0x1c>
 800e476:	682b      	ldr	r3, [r5, #0]
 800e478:	b103      	cbz	r3, 800e47c <_fstat_r+0x1c>
 800e47a:	6023      	str	r3, [r4, #0]
 800e47c:	bd38      	pop	{r3, r4, r5, pc}
 800e47e:	bf00      	nop
 800e480:	20002078 	.word	0x20002078

0800e484 <_isatty_r>:
 800e484:	b538      	push	{r3, r4, r5, lr}
 800e486:	4d06      	ldr	r5, [pc, #24]	; (800e4a0 <_isatty_r+0x1c>)
 800e488:	2300      	movs	r3, #0
 800e48a:	4604      	mov	r4, r0
 800e48c:	4608      	mov	r0, r1
 800e48e:	602b      	str	r3, [r5, #0]
 800e490:	f7f4 fcc5 	bl	8002e1e <_isatty>
 800e494:	1c43      	adds	r3, r0, #1
 800e496:	d102      	bne.n	800e49e <_isatty_r+0x1a>
 800e498:	682b      	ldr	r3, [r5, #0]
 800e49a:	b103      	cbz	r3, 800e49e <_isatty_r+0x1a>
 800e49c:	6023      	str	r3, [r4, #0]
 800e49e:	bd38      	pop	{r3, r4, r5, pc}
 800e4a0:	20002078 	.word	0x20002078

0800e4a4 <_lseek_r>:
 800e4a4:	b538      	push	{r3, r4, r5, lr}
 800e4a6:	4d07      	ldr	r5, [pc, #28]	; (800e4c4 <_lseek_r+0x20>)
 800e4a8:	4604      	mov	r4, r0
 800e4aa:	4608      	mov	r0, r1
 800e4ac:	4611      	mov	r1, r2
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	602a      	str	r2, [r5, #0]
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	f7f4 fcbe 	bl	8002e34 <_lseek>
 800e4b8:	1c43      	adds	r3, r0, #1
 800e4ba:	d102      	bne.n	800e4c2 <_lseek_r+0x1e>
 800e4bc:	682b      	ldr	r3, [r5, #0]
 800e4be:	b103      	cbz	r3, 800e4c2 <_lseek_r+0x1e>
 800e4c0:	6023      	str	r3, [r4, #0]
 800e4c2:	bd38      	pop	{r3, r4, r5, pc}
 800e4c4:	20002078 	.word	0x20002078

0800e4c8 <_read_r>:
 800e4c8:	b538      	push	{r3, r4, r5, lr}
 800e4ca:	4d07      	ldr	r5, [pc, #28]	; (800e4e8 <_read_r+0x20>)
 800e4cc:	4604      	mov	r4, r0
 800e4ce:	4608      	mov	r0, r1
 800e4d0:	4611      	mov	r1, r2
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	602a      	str	r2, [r5, #0]
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	f7f4 fc4c 	bl	8002d74 <_read>
 800e4dc:	1c43      	adds	r3, r0, #1
 800e4de:	d102      	bne.n	800e4e6 <_read_r+0x1e>
 800e4e0:	682b      	ldr	r3, [r5, #0]
 800e4e2:	b103      	cbz	r3, 800e4e6 <_read_r+0x1e>
 800e4e4:	6023      	str	r3, [r4, #0]
 800e4e6:	bd38      	pop	{r3, r4, r5, pc}
 800e4e8:	20002078 	.word	0x20002078

0800e4ec <_init>:
 800e4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ee:	bf00      	nop
 800e4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4f2:	bc08      	pop	{r3}
 800e4f4:	469e      	mov	lr, r3
 800e4f6:	4770      	bx	lr

0800e4f8 <_fini>:
 800e4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4fa:	bf00      	nop
 800e4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4fe:	bc08      	pop	{r3}
 800e500:	469e      	mov	lr, r3
 800e502:	4770      	bx	lr
