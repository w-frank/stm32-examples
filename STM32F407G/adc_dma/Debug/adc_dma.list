
adc_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dee8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800e078  0800e078  0001e078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5ac  0800e5ac  00020354  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5ac  0800e5ac  0001e5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5b4  0800e5b4  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5b4  0800e5b4  0001e5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5b8  0800e5b8  0001e5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800e5bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd8  20000354  0800e910  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000202c  0800e910  0002202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d78d  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000428f  00000000  00000000  0003db11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  00041da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  000431a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f10  00000000  00000000  00044410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae98  00000000  00000000  0006b320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d89ac  00000000  00000000  000861b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015eb64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068d0  00000000  00000000  0015ebb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000354 	.word	0x20000354
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e060 	.word	0x0800e060

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000358 	.word	0x20000358
 80001cc:	0800e060 	.word	0x0800e060

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <adc_counts_to_volts>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t adc_val = 0;

float adc_counts_to_volts(uint32_t adc_counts)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	return (float)(adc_counts*3.3)/4096;
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff fa83 	bl	8000504 <__aeabi_ui2d>
 8000ffe:	a30d      	add	r3, pc, #52	; (adr r3, 8001034 <adc_counts_to_volts+0x44>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	f7ff faf8 	bl	80005f8 <__aeabi_dmul>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2f>
 8001014:	ee06 0a90 	vmov	s13, r0
 8001018:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001030 <adc_counts_to_volts+0x40>
 800101c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001020:	eef0 7a47 	vmov.f32	s15, s14
}
 8001024:	eeb0 0a67 	vmov.f32	s0, s15
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	45800000 	.word	0x45800000
 8001034:	66666666 	.word	0x66666666
 8001038:	400a6666 	.word	0x400a6666

0800103c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc1);
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <HAL_ADC_ConvCpltCallback+0x28>)
 8001046:	f000 ffab 	bl	8001fa0 <HAL_ADC_GetValue>
 800104a:	4603      	mov	r3, r0
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <HAL_ADC_ConvCpltCallback+0x2c>)
 800104e:	6013      	str	r3, [r2, #0]
  HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_14);
 8001050:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <HAL_ADC_ConvCpltCallback+0x30>)
 8001056:	f002 f89c 	bl	8003192 <HAL_GPIO_TogglePin>
  /*If continuousconversion mode is DISABLED uncomment below*/
  //HAL_ADC_Start_IT (&hadc1);
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200005f8 	.word	0x200005f8
 8001068:	20000370 	.word	0x20000370
 800106c:	40020c00 	.word	0x40020c00

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b094      	sub	sp, #80	; 0x50
 8001074:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001076:	f000 fda9 	bl	8001bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107a:	f000 f845 	bl	8001108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107e:	f000 f9cb 	bl	8001418 <MX_GPIO_Init>
  MX_DMA_Init();
 8001082:	f000 f9a9 	bl	80013d8 <MX_DMA_Init>
  MX_I2C1_Init();
 8001086:	f000 f913 	bl	80012b0 <MX_I2C1_Init>
  MX_I2S3_Init();
 800108a:	f000 f93f 	bl	800130c <MX_I2S3_Init>
  MX_SPI1_Init();
 800108e:	f000 f96d 	bl	800136c <MX_SPI1_Init>
  MX_ADC1_Init();
 8001092:	f000 f8bb 	bl	800120c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8001096:	f007 fe31 	bl	8008cfc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t msg_buffer[64] = {'\0'};
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	223c      	movs	r2, #60	; 0x3c
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f008 fb7a 	bl	80097a0 <memset>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_ADC_Start_DMA(&hadc1, adc_val, 1);
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <main+0x8c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2201      	movs	r2, #1
 80010b2:	4619      	mov	r1, r3
 80010b4:	4812      	ldr	r0, [pc, #72]	; (8001100 <main+0x90>)
 80010b6:	f000 fe63 	bl	8001d80 <HAL_ADC_Start_DMA>

	float adc_volts = adc_counts_to_volts(adc_val);
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <main+0x8c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff96 	bl	8000ff0 <adc_counts_to_volts>
 80010c4:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44

	snprintf(msg_buffer, sizeof(msg_buffer), "ADC value = %.2f V\r\n", adc_volts);
 80010c8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80010ca:	f7ff fa3d 	bl	8000548 <__aeabi_f2d>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	1d38      	adds	r0, r7, #4
 80010d4:	e9cd 2300 	strd	r2, r3, [sp]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <main+0x94>)
 80010da:	2140      	movs	r1, #64	; 0x40
 80010dc:	f009 f9e8 	bl	800a4b0 <sniprintf>
	CDC_Transmit_FS((uint8_t*)msg_buffer, strlen(msg_buffer));
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f874 	bl	80001d0 <strlen>
 80010e8:	4602      	mov	r2, r0
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f007 fec2 	bl	8008e78 <CDC_Transmit_FS>

	HAL_Delay (100); // wait for 500ms
 80010f4:	2064      	movs	r0, #100	; 0x64
 80010f6:	f000 fddb 	bl	8001cb0 <HAL_Delay>
  {
 80010fa:	e7d7      	b.n	80010ac <main+0x3c>
 80010fc:	20000370 	.word	0x20000370
 8001100:	200005f8 	.word	0x200005f8
 8001104:	0800e078 	.word	0x0800e078

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b098      	sub	sp, #96	; 0x60
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001112:	2230      	movs	r2, #48	; 0x30
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f008 fb42 	bl	80097a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	4b31      	ldr	r3, [pc, #196]	; (8001204 <SystemClock_Config+0xfc>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	4a30      	ldr	r2, [pc, #192]	; (8001204 <SystemClock_Config+0xfc>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	6413      	str	r3, [r2, #64]	; 0x40
 800114a:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <SystemClock_Config+0xfc>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <SystemClock_Config+0x100>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a2a      	ldr	r2, [pc, #168]	; (8001208 <SystemClock_Config+0x100>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	4b28      	ldr	r3, [pc, #160]	; (8001208 <SystemClock_Config+0x100>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001172:	2301      	movs	r3, #1
 8001174:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001176:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117c:	2302      	movs	r3, #2
 800117e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001180:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001184:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001186:	2308      	movs	r3, #8
 8001188:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800118a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800118e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001190:	2302      	movs	r3, #2
 8001192:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001194:	2307      	movs	r3, #7
 8001196:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001198:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800119c:	4618      	mov	r0, r3
 800119e:	f003 ff7b 	bl	8005098 <HAL_RCC_OscConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80011a8:	f000 fa34 	bl	8001614 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ac:	230f      	movs	r3, #15
 80011ae:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b0:	2302      	movs	r3, #2
 80011b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	2105      	movs	r1, #5
 80011ca:	4618      	mov	r0, r3
 80011cc:	f004 f9dc 	bl	8005588 <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80011d6:	f000 fa1d 	bl	8001614 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80011da:	2301      	movs	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80011de:	23c0      	movs	r3, #192	; 0xc0
 80011e0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80011e2:	2302      	movs	r3, #2
 80011e4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	4618      	mov	r0, r3
 80011ec:	f004 fbb4 	bl	8005958 <HAL_RCCEx_PeriphCLKConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80011f6:	f000 fa0d 	bl	8001614 <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3760      	adds	r7, #96	; 0x60
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001220:	4a21      	ldr	r2, [pc, #132]	; (80012a8 <MX_ADC1_Init+0x9c>)
 8001222:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001226:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800122a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <MX_ADC1_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_ADC1_Init+0x98>)
 800123a:	2201      	movs	r2, #1
 800123c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_ADC1_Init+0x98>)
 800124e:	4a17      	ldr	r2, [pc, #92]	; (80012ac <MX_ADC1_Init+0xa0>)
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_ADC1_Init+0x98>)
 800125a:	2201      	movs	r2, #1
 800125c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001268:	2201      	movs	r2, #1
 800126a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_ADC1_Init+0x98>)
 800126e:	f000 fd43 	bl	8001cf8 <HAL_ADC_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001278:	f000 f9cc 	bl	8001614 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800127c:	2301      	movs	r3, #1
 800127e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_ADC1_Init+0x98>)
 800128e:	f000 fea9 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001298:	f000 f9bc 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200005f8 	.word	0x200005f8
 80012a8:	40012000 	.word	0x40012000
 80012ac:	0f000001 	.word	0x0f000001

080012b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <MX_I2C1_Init+0x50>)
 80012b6:	4a13      	ldr	r2, [pc, #76]	; (8001304 <MX_I2C1_Init+0x54>)
 80012b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_I2C1_Init+0x50>)
 80012bc:	4a12      	ldr	r2, [pc, #72]	; (8001308 <MX_I2C1_Init+0x58>)
 80012be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_I2C1_Init+0x50>)
 80012ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <MX_I2C1_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_I2C1_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <MX_I2C1_Init+0x50>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_I2C1_Init+0x50>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <MX_I2C1_Init+0x50>)
 80012ee:	f001 ff6b 	bl	80031c8 <HAL_I2C_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012f8:	f000 f98c 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200005a4 	.word	0x200005a4
 8001304:	40005400 	.word	0x40005400
 8001308:	000186a0 	.word	0x000186a0

0800130c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <MX_I2S3_Init+0x54>)
 8001312:	4a14      	ldr	r2, [pc, #80]	; (8001364 <MX_I2S3_Init+0x58>)
 8001314:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_I2S3_Init+0x54>)
 8001318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800131c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <MX_I2S3_Init+0x54>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_I2S3_Init+0x54>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800132a:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <MX_I2S3_Init+0x54>)
 800132c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001330:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_I2S3_Init+0x54>)
 8001334:	4a0c      	ldr	r2, [pc, #48]	; (8001368 <MX_I2S3_Init+0x5c>)
 8001336:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_I2S3_Init+0x54>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <MX_I2S3_Init+0x54>)
 8001340:	2200      	movs	r2, #0
 8001342:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_I2S3_Init+0x54>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_I2S3_Init+0x54>)
 800134c:	f002 f880 	bl	8003450 <HAL_I2S_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001356:	f000 f95d 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200006f8 	.word	0x200006f8
 8001364:	40003c00 	.word	0x40003c00
 8001368:	00017700 	.word	0x00017700

0800136c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <MX_SPI1_Init+0x64>)
 8001372:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <MX_SPI1_Init+0x68>)
 8001374:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_SPI1_Init+0x64>)
 8001378:	f44f 7282 	mov.w	r2, #260	; 0x104
 800137c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_SPI1_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_SPI1_Init+0x64>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_SPI1_Init+0x64>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_SPI1_Init+0x64>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_SPI1_Init+0x64>)
 8001398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800139c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_SPI1_Init+0x64>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <MX_SPI1_Init+0x64>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_SPI1_Init+0x64>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <MX_SPI1_Init+0x64>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_SPI1_Init+0x64>)
 80013b8:	220a      	movs	r2, #10
 80013ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_SPI1_Init+0x64>)
 80013be:	f004 fc0b 	bl	8005bd8 <HAL_SPI_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013c8:	f000 f924 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200006a0 	.word	0x200006a0
 80013d4:	40013000 	.word	0x40013000

080013d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_DMA_Init+0x3c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <MX_DMA_Init+0x3c>)
 80013e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_DMA_Init+0x3c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2038      	movs	r0, #56	; 0x38
 8001400:	f001 f96b 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001404:	2038      	movs	r0, #56	; 0x38
 8001406:	f001 f984 	bl	8002712 <HAL_NVIC_EnableIRQ>

}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800

08001418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08c      	sub	sp, #48	; 0x30
 800141c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141e:	f107 031c 	add.w	r3, r7, #28
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	4b72      	ldr	r3, [pc, #456]	; (80015fc <MX_GPIO_Init+0x1e4>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a71      	ldr	r2, [pc, #452]	; (80015fc <MX_GPIO_Init+0x1e4>)
 8001438:	f043 0310 	orr.w	r3, r3, #16
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b6f      	ldr	r3, [pc, #444]	; (80015fc <MX_GPIO_Init+0x1e4>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	4b6b      	ldr	r3, [pc, #428]	; (80015fc <MX_GPIO_Init+0x1e4>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a6a      	ldr	r2, [pc, #424]	; (80015fc <MX_GPIO_Init+0x1e4>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b68      	ldr	r3, [pc, #416]	; (80015fc <MX_GPIO_Init+0x1e4>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b64      	ldr	r3, [pc, #400]	; (80015fc <MX_GPIO_Init+0x1e4>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a63      	ldr	r2, [pc, #396]	; (80015fc <MX_GPIO_Init+0x1e4>)
 8001470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b61      	ldr	r3, [pc, #388]	; (80015fc <MX_GPIO_Init+0x1e4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b5d      	ldr	r3, [pc, #372]	; (80015fc <MX_GPIO_Init+0x1e4>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a5c      	ldr	r2, [pc, #368]	; (80015fc <MX_GPIO_Init+0x1e4>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b5a      	ldr	r3, [pc, #360]	; (80015fc <MX_GPIO_Init+0x1e4>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b56      	ldr	r3, [pc, #344]	; (80015fc <MX_GPIO_Init+0x1e4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a55      	ldr	r2, [pc, #340]	; (80015fc <MX_GPIO_Init+0x1e4>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b53      	ldr	r3, [pc, #332]	; (80015fc <MX_GPIO_Init+0x1e4>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b4f      	ldr	r3, [pc, #316]	; (80015fc <MX_GPIO_Init+0x1e4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a4e      	ldr	r2, [pc, #312]	; (80015fc <MX_GPIO_Init+0x1e4>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b4c      	ldr	r3, [pc, #304]	; (80015fc <MX_GPIO_Init+0x1e4>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2108      	movs	r1, #8
 80014da:	4849      	ldr	r0, [pc, #292]	; (8001600 <MX_GPIO_Init+0x1e8>)
 80014dc:	f001 fe40 	bl	8003160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014e0:	2201      	movs	r2, #1
 80014e2:	2101      	movs	r1, #1
 80014e4:	4847      	ldr	r0, [pc, #284]	; (8001604 <MX_GPIO_Init+0x1ec>)
 80014e6:	f001 fe3b 	bl	8003160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014ea:	2200      	movs	r2, #0
 80014ec:	f24f 0110 	movw	r1, #61456	; 0xf010
 80014f0:	4845      	ldr	r0, [pc, #276]	; (8001608 <MX_GPIO_Init+0x1f0>)
 80014f2:	f001 fe35 	bl	8003160 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80014f6:	2308      	movs	r3, #8
 80014f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fa:	2301      	movs	r3, #1
 80014fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	4619      	mov	r1, r3
 800150c:	483c      	ldr	r0, [pc, #240]	; (8001600 <MX_GPIO_Init+0x1e8>)
 800150e:	f001 fc8b 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001512:	2301      	movs	r3, #1
 8001514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	4836      	ldr	r0, [pc, #216]	; (8001604 <MX_GPIO_Init+0x1ec>)
 800152a:	f001 fc7d 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800152e:	2308      	movs	r3, #8
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800153e:	2305      	movs	r3, #5
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	4619      	mov	r1, r3
 8001548:	482e      	ldr	r0, [pc, #184]	; (8001604 <MX_GPIO_Init+0x1ec>)
 800154a:	f001 fc6d 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800154e:	2301      	movs	r3, #1
 8001550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001552:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001556:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	4619      	mov	r1, r3
 8001562:	482a      	ldr	r0, [pc, #168]	; (800160c <MX_GPIO_Init+0x1f4>)
 8001564:	f001 fc60 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001568:	2304      	movs	r3, #4
 800156a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	4825      	ldr	r0, [pc, #148]	; (8001610 <MX_GPIO_Init+0x1f8>)
 800157c:	f001 fc54 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001592:	2305      	movs	r3, #5
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	481c      	ldr	r0, [pc, #112]	; (8001610 <MX_GPIO_Init+0x1f8>)
 800159e:	f001 fc43 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015a2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80015a6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b4:	f107 031c 	add.w	r3, r7, #28
 80015b8:	4619      	mov	r1, r3
 80015ba:	4813      	ldr	r0, [pc, #76]	; (8001608 <MX_GPIO_Init+0x1f0>)
 80015bc:	f001 fc34 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80015c0:	2320      	movs	r3, #32
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 031c 	add.w	r3, r7, #28
 80015d0:	4619      	mov	r1, r3
 80015d2:	480d      	ldr	r0, [pc, #52]	; (8001608 <MX_GPIO_Init+0x1f0>)
 80015d4:	f001 fc28 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80015d8:	2302      	movs	r3, #2
 80015da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015dc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4619      	mov	r1, r3
 80015ec:	4804      	ldr	r0, [pc, #16]	; (8001600 <MX_GPIO_Init+0x1e8>)
 80015ee:	f001 fc1b 	bl	8002e28 <HAL_GPIO_Init>

}
 80015f2:	bf00      	nop
 80015f4:	3730      	adds	r7, #48	; 0x30
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40021000 	.word	0x40021000
 8001604:	40020800 	.word	0x40020800
 8001608:	40020c00 	.word	0x40020c00
 800160c:	40020000 	.word	0x40020000
 8001610:	40020400 	.word	0x40020400

08001614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001618:	b672      	cpsid	i
}
 800161a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800161c:	e7fe      	b.n	800161c <Error_Handler+0x8>
	...

08001620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_MspInit+0x4c>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a0f      	ldr	r2, [pc, #60]	; (800166c <HAL_MspInit+0x4c>)
 8001630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_MspInit+0x4c>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	603b      	str	r3, [r7, #0]
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_MspInit+0x4c>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <HAL_MspInit+0x4c>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_MspInit+0x4c>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800165e:	2007      	movs	r0, #7
 8001660:	f001 f830 	bl	80026c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800

08001670 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a2e      	ldr	r2, [pc, #184]	; (8001748 <HAL_ADC_MspInit+0xd8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d156      	bne.n	8001740 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b2d      	ldr	r3, [pc, #180]	; (800174c <HAL_ADC_MspInit+0xdc>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a2c      	ldr	r2, [pc, #176]	; (800174c <HAL_ADC_MspInit+0xdc>)
 800169c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b2a      	ldr	r3, [pc, #168]	; (800174c <HAL_ADC_MspInit+0xdc>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b26      	ldr	r3, [pc, #152]	; (800174c <HAL_ADC_MspInit+0xdc>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a25      	ldr	r2, [pc, #148]	; (800174c <HAL_ADC_MspInit+0xdc>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b23      	ldr	r3, [pc, #140]	; (800174c <HAL_ADC_MspInit+0xdc>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016ca:	2302      	movs	r3, #2
 80016cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ce:	2303      	movs	r3, #3
 80016d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	481c      	ldr	r0, [pc, #112]	; (8001750 <HAL_ADC_MspInit+0xe0>)
 80016de:	f001 fba3 	bl	8002e28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80016e2:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <HAL_ADC_MspInit+0xe4>)
 80016e4:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <HAL_ADC_MspInit+0xe8>)
 80016e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80016e8:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <HAL_ADC_MspInit+0xe4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_ADC_MspInit+0xe4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f4:	4b17      	ldr	r3, [pc, #92]	; (8001754 <HAL_ADC_MspInit+0xe4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_ADC_MspInit+0xe4>)
 80016fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001700:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <HAL_ADC_MspInit+0xe4>)
 8001704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001708:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800170a:	4b12      	ldr	r3, [pc, #72]	; (8001754 <HAL_ADC_MspInit+0xe4>)
 800170c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001710:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <HAL_ADC_MspInit+0xe4>)
 8001714:	2200      	movs	r2, #0
 8001716:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <HAL_ADC_MspInit+0xe4>)
 800171a:	2200      	movs	r2, #0
 800171c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <HAL_ADC_MspInit+0xe4>)
 8001720:	2200      	movs	r2, #0
 8001722:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001724:	480b      	ldr	r0, [pc, #44]	; (8001754 <HAL_ADC_MspInit+0xe4>)
 8001726:	f001 f80f 	bl	8002748 <HAL_DMA_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001730:	f7ff ff70 	bl	8001614 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a07      	ldr	r2, [pc, #28]	; (8001754 <HAL_ADC_MspInit+0xe4>)
 8001738:	639a      	str	r2, [r3, #56]	; 0x38
 800173a:	4a06      	ldr	r2, [pc, #24]	; (8001754 <HAL_ADC_MspInit+0xe4>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001740:	bf00      	nop
 8001742:	3728      	adds	r7, #40	; 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40012000 	.word	0x40012000
 800174c:	40023800 	.word	0x40023800
 8001750:	40020000 	.word	0x40020000
 8001754:	20000640 	.word	0x20000640
 8001758:	40026410 	.word	0x40026410

0800175c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a19      	ldr	r2, [pc, #100]	; (80017e0 <HAL_I2C_MspInit+0x84>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d12c      	bne.n	80017d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_I2C_MspInit+0x88>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a17      	ldr	r2, [pc, #92]	; (80017e4 <HAL_I2C_MspInit+0x88>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_I2C_MspInit+0x88>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800179a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800179e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a0:	2312      	movs	r3, #18
 80017a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ac:	2304      	movs	r3, #4
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4619      	mov	r1, r3
 80017b6:	480c      	ldr	r0, [pc, #48]	; (80017e8 <HAL_I2C_MspInit+0x8c>)
 80017b8:	f001 fb36 	bl	8002e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_I2C_MspInit+0x88>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <HAL_I2C_MspInit+0x88>)
 80017c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017ca:	6413      	str	r3, [r2, #64]	; 0x40
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_I2C_MspInit+0x88>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017d8:	bf00      	nop
 80017da:	3728      	adds	r7, #40	; 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40005400 	.word	0x40005400
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020400 	.word	0x40020400

080017ec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a28      	ldr	r2, [pc, #160]	; (80018ac <HAL_I2S_MspInit+0xc0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d14a      	bne.n	80018a4 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_I2S_MspInit+0xc4>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a26      	ldr	r2, [pc, #152]	; (80018b0 <HAL_I2S_MspInit+0xc4>)
 8001818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_I2S_MspInit+0xc4>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_I2S_MspInit+0xc4>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a1f      	ldr	r2, [pc, #124]	; (80018b0 <HAL_I2S_MspInit+0xc4>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <HAL_I2S_MspInit+0xc4>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_I2S_MspInit+0xc4>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <HAL_I2S_MspInit+0xc4>)
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <HAL_I2S_MspInit+0xc4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001862:	2310      	movs	r3, #16
 8001864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001872:	2306      	movs	r3, #6
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	480d      	ldr	r0, [pc, #52]	; (80018b4 <HAL_I2S_MspInit+0xc8>)
 800187e:	f001 fad3 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001882:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001894:	2306      	movs	r3, #6
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	4806      	ldr	r0, [pc, #24]	; (80018b8 <HAL_I2S_MspInit+0xcc>)
 80018a0:	f001 fac2 	bl	8002e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80018a4:	bf00      	nop
 80018a6:	3728      	adds	r7, #40	; 0x28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40003c00 	.word	0x40003c00
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020000 	.word	0x40020000
 80018b8:	40020800 	.word	0x40020800

080018bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a19      	ldr	r2, [pc, #100]	; (8001940 <HAL_SPI_MspInit+0x84>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d12b      	bne.n	8001936 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_SPI_MspInit+0x88>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	4a17      	ldr	r2, [pc, #92]	; (8001944 <HAL_SPI_MspInit+0x88>)
 80018e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018ec:	6453      	str	r3, [r2, #68]	; 0x44
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_SPI_MspInit+0x88>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_SPI_MspInit+0x88>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a10      	ldr	r2, [pc, #64]	; (8001944 <HAL_SPI_MspInit+0x88>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <HAL_SPI_MspInit+0x88>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001916:	23e0      	movs	r3, #224	; 0xe0
 8001918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001926:	2305      	movs	r3, #5
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	4805      	ldr	r0, [pc, #20]	; (8001948 <HAL_SPI_MspInit+0x8c>)
 8001932:	f001 fa79 	bl	8002e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001936:	bf00      	nop
 8001938:	3728      	adds	r7, #40	; 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40013000 	.word	0x40013000
 8001944:	40023800 	.word	0x40023800
 8001948:	40020000 	.word	0x40020000

0800194c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <NMI_Handler+0x4>

08001952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <HardFault_Handler+0x4>

08001958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <MemManage_Handler+0x4>

0800195e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001962:	e7fe      	b.n	8001962 <BusFault_Handler+0x4>

08001964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <UsageFault_Handler+0x4>

0800196a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001998:	f000 f96a 	bl	8001c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <DMA2_Stream0_IRQHandler+0x10>)
 80019a6:	f000 ffd5 	bl	8002954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000640 	.word	0x20000640

080019b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <OTG_FS_IRQHandler+0x10>)
 80019ba:	f002 fb39 	bl	8004030 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20001c14 	.word	0x20001c14

080019c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
	return 1;
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_kill>:

int _kill(int pid, int sig)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019e2:	f007 feb3 	bl	800974c <__errno>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2216      	movs	r2, #22
 80019ea:	601a      	str	r2, [r3, #0]
	return -1;
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_exit>:

void _exit (int status)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ffe7 	bl	80019d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a0a:	e7fe      	b.n	8001a0a <_exit+0x12>

08001a0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	e00a      	b.n	8001a34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a1e:	f3af 8000 	nop.w
 8001a22:	4601      	mov	r1, r0
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	60ba      	str	r2, [r7, #8]
 8001a2a:	b2ca      	uxtb	r2, r1
 8001a2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	dbf0      	blt.n	8001a1e <_read+0x12>
	}

return len;
 8001a3c:	687b      	ldr	r3, [r7, #4]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e009      	b.n	8001a6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	60ba      	str	r2, [r7, #8]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	dbf1      	blt.n	8001a58 <_write+0x12>
	}
	return len;
 8001a74:	687b      	ldr	r3, [r7, #4]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_close>:

int _close(int file)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
	return -1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aa6:	605a      	str	r2, [r3, #4]
	return 0;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_isatty>:

int _isatty(int file)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
	return 1;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <_sbrk+0x5c>)
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <_sbrk+0x60>)
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <_sbrk+0x64>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <_sbrk+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d207      	bcs.n	8001b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b18:	f007 fe18 	bl	800974c <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	220c      	movs	r2, #12
 8001b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b26:	e009      	b.n	8001b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <_sbrk+0x64>)
 8001b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20020000 	.word	0x20020000
 8001b48:	00000400 	.word	0x00000400
 8001b4c:	20000374 	.word	0x20000374
 8001b50:	20002030 	.word	0x20002030

08001b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <SystemInit+0x20>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <SystemInit+0x20>)
 8001b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b7c:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b7e:	490e      	ldr	r1, [pc, #56]	; (8001bb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b80:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b94:	4c0b      	ldr	r4, [pc, #44]	; (8001bc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ba2:	f7ff ffd7 	bl	8001b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ba6:	f007 fdd7 	bl	8009758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001baa:	f7ff fa61 	bl	8001070 <main>
  bx  lr    
 8001bae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb8:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8001bbc:	0800e5bc 	.word	0x0800e5bc
  ldr r2, =_sbss
 8001bc0:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8001bc4:	2000202c 	.word	0x2000202c

08001bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc8:	e7fe      	b.n	8001bc8 <ADC_IRQHandler>
	...

08001bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <HAL_Init+0x40>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	; (8001c0c <HAL_Init+0x40>)
 8001bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_Init+0x40>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <HAL_Init+0x40>)
 8001be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_Init+0x40>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <HAL_Init+0x40>)
 8001bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f000 fd65 	bl	80026c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f000 f808 	bl	8001c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c00:	f7ff fd0e 	bl	8001620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023c00 	.word	0x40023c00

08001c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_InitTick+0x54>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_InitTick+0x58>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 fd7d 	bl	800272e <HAL_SYSTICK_Config>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00e      	b.n	8001c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b0f      	cmp	r3, #15
 8001c42:	d80a      	bhi.n	8001c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c44:	2200      	movs	r2, #0
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c4c:	f000 fd45 	bl	80026da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c50:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <HAL_InitTick+0x5c>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	e000      	b.n	8001c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	20000004 	.word	0x20000004

08001c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_IncTick+0x20>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_IncTick+0x24>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <HAL_IncTick+0x24>)
 8001c82:	6013      	str	r3, [r2, #0]
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000008 	.word	0x20000008
 8001c94:	20000740 	.word	0x20000740

08001c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <HAL_GetTick+0x14>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000740 	.word	0x20000740

08001cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb8:	f7ff ffee 	bl	8001c98 <HAL_GetTick>
 8001cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cc8:	d005      	beq.n	8001cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_Delay+0x44>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cd6:	bf00      	nop
 8001cd8:	f7ff ffde 	bl	8001c98 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d8f7      	bhi.n	8001cd8 <HAL_Delay+0x28>
  {
  }
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000008 	.word	0x20000008

08001cf8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e033      	b.n	8001d76 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff fcaa 	bl	8001670 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d118      	bne.n	8001d68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d3e:	f023 0302 	bic.w	r3, r3, #2
 8001d42:	f043 0202 	orr.w	r2, r3, #2
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fa6c 	bl	8002228 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f023 0303 	bic.w	r3, r3, #3
 8001d5e:	f043 0201 	orr.w	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	641a      	str	r2, [r3, #64]	; 0x40
 8001d66:	e001      	b.n	8001d6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d101      	bne.n	8001d9e <HAL_ADC_Start_DMA+0x1e>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e0e9      	b.n	8001f72 <HAL_ADC_Start_DMA+0x1f2>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d018      	beq.n	8001de6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dc4:	4b6d      	ldr	r3, [pc, #436]	; (8001f7c <HAL_ADC_Start_DMA+0x1fc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a6d      	ldr	r2, [pc, #436]	; (8001f80 <HAL_ADC_Start_DMA+0x200>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	0c9a      	lsrs	r2, r3, #18
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001dd8:	e002      	b.n	8001de0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f9      	bne.n	8001dda <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001df4:	d107      	bne.n	8001e06 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e04:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	f040 80a1 	bne.w	8001f58 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e1e:	f023 0301 	bic.w	r3, r3, #1
 8001e22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d007      	beq.n	8001e48 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e54:	d106      	bne.n	8001e64 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f023 0206 	bic.w	r2, r3, #6
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	645a      	str	r2, [r3, #68]	; 0x44
 8001e62:	e002      	b.n	8001e6a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e72:	4b44      	ldr	r3, [pc, #272]	; (8001f84 <HAL_ADC_Start_DMA+0x204>)
 8001e74:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7a:	4a43      	ldr	r2, [pc, #268]	; (8001f88 <HAL_ADC_Start_DMA+0x208>)
 8001e7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e82:	4a42      	ldr	r2, [pc, #264]	; (8001f8c <HAL_ADC_Start_DMA+0x20c>)
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8a:	4a41      	ldr	r2, [pc, #260]	; (8001f90 <HAL_ADC_Start_DMA+0x210>)
 8001e8c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e96:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ea6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eb6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	334c      	adds	r3, #76	; 0x4c
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f000 fcec 	bl	80028a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d12a      	bne.n	8001f2e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a2d      	ldr	r2, [pc, #180]	; (8001f94 <HAL_ADC_Start_DMA+0x214>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d015      	beq.n	8001f0e <HAL_ADC_Start_DMA+0x18e>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a2c      	ldr	r2, [pc, #176]	; (8001f98 <HAL_ADC_Start_DMA+0x218>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d105      	bne.n	8001ef8 <HAL_ADC_Start_DMA+0x178>
 8001eec:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <HAL_ADC_Start_DMA+0x204>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00a      	beq.n	8001f0e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a27      	ldr	r2, [pc, #156]	; (8001f9c <HAL_ADC_Start_DMA+0x21c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d136      	bne.n	8001f70 <HAL_ADC_Start_DMA+0x1f0>
 8001f02:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <HAL_ADC_Start_DMA+0x204>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d130      	bne.n	8001f70 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d129      	bne.n	8001f70 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	e020      	b.n	8001f70 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <HAL_ADC_Start_DMA+0x214>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d11b      	bne.n	8001f70 <HAL_ADC_Start_DMA+0x1f0>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d114      	bne.n	8001f70 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	e00b      	b.n	8001f70 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f043 0210 	orr.w	r2, r3, #16
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f68:	f043 0201 	orr.w	r2, r3, #1
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	431bde83 	.word	0x431bde83
 8001f84:	40012300 	.word	0x40012300
 8001f88:	08002421 	.word	0x08002421
 8001f8c:	080024db 	.word	0x080024db
 8001f90:	080024f7 	.word	0x080024f7
 8001f94:	40012000 	.word	0x40012000
 8001f98:	40012100 	.word	0x40012100
 8001f9c:	40012200 	.word	0x40012200

08001fa0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1c>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e105      	b.n	800220c <HAL_ADC_ConfigChannel+0x228>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b09      	cmp	r3, #9
 800200e:	d925      	bls.n	800205c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68d9      	ldr	r1, [r3, #12]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	3b1e      	subs	r3, #30
 8002026:	2207      	movs	r2, #7
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43da      	mvns	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	400a      	ands	r2, r1
 8002034:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68d9      	ldr	r1, [r3, #12]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	b29b      	uxth	r3, r3
 8002046:	4618      	mov	r0, r3
 8002048:	4603      	mov	r3, r0
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4403      	add	r3, r0
 800204e:	3b1e      	subs	r3, #30
 8002050:	409a      	lsls	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	e022      	b.n	80020a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6919      	ldr	r1, [r3, #16]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	4613      	mov	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4413      	add	r3, r2
 8002070:	2207      	movs	r2, #7
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	400a      	ands	r2, r1
 800207e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6919      	ldr	r1, [r3, #16]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	b29b      	uxth	r3, r3
 8002090:	4618      	mov	r0, r3
 8002092:	4603      	mov	r3, r0
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4403      	add	r3, r0
 8002098:	409a      	lsls	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d824      	bhi.n	80020f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	3b05      	subs	r3, #5
 80020bc:	221f      	movs	r2, #31
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	400a      	ands	r2, r1
 80020ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	4618      	mov	r0, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	3b05      	subs	r3, #5
 80020e6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	635a      	str	r2, [r3, #52]	; 0x34
 80020f2:	e04c      	b.n	800218e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b0c      	cmp	r3, #12
 80020fa:	d824      	bhi.n	8002146 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	3b23      	subs	r3, #35	; 0x23
 800210e:	221f      	movs	r2, #31
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43da      	mvns	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	400a      	ands	r2, r1
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	b29b      	uxth	r3, r3
 800212a:	4618      	mov	r0, r3
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	3b23      	subs	r3, #35	; 0x23
 8002138:	fa00 f203 	lsl.w	r2, r0, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	631a      	str	r2, [r3, #48]	; 0x30
 8002144:	e023      	b.n	800218e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	3b41      	subs	r3, #65	; 0x41
 8002158:	221f      	movs	r2, #31
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	400a      	ands	r2, r1
 8002166:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	4618      	mov	r0, r3
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	3b41      	subs	r3, #65	; 0x41
 8002182:	fa00 f203 	lsl.w	r2, r0, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800218e:	4b22      	ldr	r3, [pc, #136]	; (8002218 <HAL_ADC_ConfigChannel+0x234>)
 8002190:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a21      	ldr	r2, [pc, #132]	; (800221c <HAL_ADC_ConfigChannel+0x238>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d109      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x1cc>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b12      	cmp	r3, #18
 80021a2:	d105      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a19      	ldr	r2, [pc, #100]	; (800221c <HAL_ADC_ConfigChannel+0x238>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d123      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x21e>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d003      	beq.n	80021ca <HAL_ADC_ConfigChannel+0x1e6>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b11      	cmp	r3, #17
 80021c8:	d11b      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b10      	cmp	r3, #16
 80021dc:	d111      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <HAL_ADC_ConfigChannel+0x23c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a10      	ldr	r2, [pc, #64]	; (8002224 <HAL_ADC_ConfigChannel+0x240>)
 80021e4:	fba2 2303 	umull	r2, r3, r2, r3
 80021e8:	0c9a      	lsrs	r2, r3, #18
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021f4:	e002      	b.n	80021fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f9      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	40012300 	.word	0x40012300
 800221c:	40012000 	.word	0x40012000
 8002220:	20000000 	.word	0x20000000
 8002224:	431bde83 	.word	0x431bde83

08002228 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002230:	4b79      	ldr	r3, [pc, #484]	; (8002418 <ADC_Init+0x1f0>)
 8002232:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	431a      	orrs	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800225c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6859      	ldr	r1, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	021a      	lsls	r2, r3, #8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002280:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6899      	ldr	r1, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	4a58      	ldr	r2, [pc, #352]	; (800241c <ADC_Init+0x1f4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d022      	beq.n	8002306 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6899      	ldr	r1, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6899      	ldr	r1, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	e00f      	b.n	8002326 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002314:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002324:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0202 	bic.w	r2, r2, #2
 8002334:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6899      	ldr	r1, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7e1b      	ldrb	r3, [r3, #24]
 8002340:	005a      	lsls	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d01b      	beq.n	800238c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002362:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002372:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6859      	ldr	r1, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	3b01      	subs	r3, #1
 8002380:	035a      	lsls	r2, r3, #13
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	e007      	b.n	800239c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800239a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	051a      	lsls	r2, r3, #20
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6899      	ldr	r1, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023de:	025a      	lsls	r2, r3, #9
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6899      	ldr	r1, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	029a      	lsls	r2, r3, #10
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	609a      	str	r2, [r3, #8]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	40012300 	.word	0x40012300
 800241c:	0f000001 	.word	0x0f000001

08002420 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002436:	2b00      	cmp	r3, #0
 8002438:	d13c      	bne.n	80024b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d12b      	bne.n	80024ac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002458:	2b00      	cmp	r3, #0
 800245a:	d127      	bne.n	80024ac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002466:	2b00      	cmp	r3, #0
 8002468:	d006      	beq.n	8002478 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002474:	2b00      	cmp	r3, #0
 8002476:	d119      	bne.n	80024ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0220 	bic.w	r2, r2, #32
 8002486:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f043 0201 	orr.w	r2, r3, #1
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f7fe fdc5 	bl	800103c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024b2:	e00e      	b.n	80024d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f7ff fd84 	bl	8001fce <HAL_ADC_ErrorCallback>
}
 80024c6:	e004      	b.n	80024d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
}
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f7ff fd66 	bl	8001fba <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2240      	movs	r2, #64	; 0x40
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f043 0204 	orr.w	r2, r3, #4
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f7ff fd59 	bl	8001fce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002540:	4013      	ands	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800254c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002556:	4a04      	ldr	r2, [pc, #16]	; (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	60d3      	str	r3, [r2, #12]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <__NVIC_GetPriorityGrouping+0x18>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	f003 0307 	and.w	r3, r3, #7
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	2b00      	cmp	r3, #0
 8002598:	db0b      	blt.n	80025b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	f003 021f 	and.w	r2, r3, #31
 80025a0:	4907      	ldr	r1, [pc, #28]	; (80025c0 <__NVIC_EnableIRQ+0x38>)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	2001      	movs	r0, #1
 80025aa:	fa00 f202 	lsl.w	r2, r0, r2
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000e100 	.word	0xe000e100

080025c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	6039      	str	r1, [r7, #0]
 80025ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	db0a      	blt.n	80025ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	490c      	ldr	r1, [pc, #48]	; (8002610 <__NVIC_SetPriority+0x4c>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	0112      	lsls	r2, r2, #4
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	440b      	add	r3, r1
 80025e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025ec:	e00a      	b.n	8002604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4908      	ldr	r1, [pc, #32]	; (8002614 <__NVIC_SetPriority+0x50>)
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	3b04      	subs	r3, #4
 80025fc:	0112      	lsls	r2, r2, #4
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	440b      	add	r3, r1
 8002602:	761a      	strb	r2, [r3, #24]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000e100 	.word	0xe000e100
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f1c3 0307 	rsb	r3, r3, #7
 8002632:	2b04      	cmp	r3, #4
 8002634:	bf28      	it	cs
 8002636:	2304      	movcs	r3, #4
 8002638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3304      	adds	r3, #4
 800263e:	2b06      	cmp	r3, #6
 8002640:	d902      	bls.n	8002648 <NVIC_EncodePriority+0x30>
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3b03      	subs	r3, #3
 8002646:	e000      	b.n	800264a <NVIC_EncodePriority+0x32>
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43da      	mvns	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	401a      	ands	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002660:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	fa01 f303 	lsl.w	r3, r1, r3
 800266a:	43d9      	mvns	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002670:	4313      	orrs	r3, r2
         );
}
 8002672:	4618      	mov	r0, r3
 8002674:	3724      	adds	r7, #36	; 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002690:	d301      	bcc.n	8002696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002692:	2301      	movs	r3, #1
 8002694:	e00f      	b.n	80026b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002696:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <SysTick_Config+0x40>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269e:	210f      	movs	r1, #15
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026a4:	f7ff ff8e 	bl	80025c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <SysTick_Config+0x40>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ae:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <SysTick_Config+0x40>)
 80026b0:	2207      	movs	r2, #7
 80026b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	e000e010 	.word	0xe000e010

080026c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ff29 	bl	8002524 <__NVIC_SetPriorityGrouping>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ec:	f7ff ff3e 	bl	800256c <__NVIC_GetPriorityGrouping>
 80026f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	6978      	ldr	r0, [r7, #20]
 80026f8:	f7ff ff8e 	bl	8002618 <NVIC_EncodePriority>
 80026fc:	4602      	mov	r2, r0
 80026fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff5d 	bl	80025c4 <__NVIC_SetPriority>
}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800271c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff31 	bl	8002588 <__NVIC_EnableIRQ>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff ffa2 	bl	8002680 <SysTick_Config>
 800273c:	4603      	mov	r3, r0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002754:	f7ff faa0 	bl	8001c98 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e099      	b.n	8002898 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0201 	bic.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002784:	e00f      	b.n	80027a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002786:	f7ff fa87 	bl	8001c98 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b05      	cmp	r3, #5
 8002792:	d908      	bls.n	80027a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2220      	movs	r2, #32
 8002798:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2203      	movs	r2, #3
 800279e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e078      	b.n	8002898 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1e8      	bne.n	8002786 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4b38      	ldr	r3, [pc, #224]	; (80028a0 <HAL_DMA_Init+0x158>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d107      	bne.n	8002810 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	4313      	orrs	r3, r2
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f023 0307 	bic.w	r3, r3, #7
 8002826:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	2b04      	cmp	r3, #4
 8002838:	d117      	bne.n	800286a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	4313      	orrs	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00e      	beq.n	800286a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 fa6f 	bl	8002d30 <DMA_CheckFifoParam>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2240      	movs	r2, #64	; 0x40
 800285c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002866:	2301      	movs	r3, #1
 8002868:	e016      	b.n	8002898 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fa26 	bl	8002cc4 <DMA_CalcBaseAndBitshift>
 8002878:	4603      	mov	r3, r0
 800287a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	223f      	movs	r2, #63	; 0x3f
 8002882:	409a      	lsls	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	f010803f 	.word	0xf010803f

080028a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_DMA_Start_IT+0x26>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e040      	b.n	800294c <HAL_DMA_Start_IT+0xa8>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d12f      	bne.n	800293e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2202      	movs	r2, #2
 80028e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f9b8 	bl	8002c68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fc:	223f      	movs	r2, #63	; 0x3f
 80028fe:	409a      	lsls	r2, r3
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0216 	orr.w	r2, r2, #22
 8002912:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0208 	orr.w	r2, r2, #8
 800292a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e005      	b.n	800294a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002946:	2302      	movs	r3, #2
 8002948:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800294a:	7dfb      	ldrb	r3, [r7, #23]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002960:	4b92      	ldr	r3, [pc, #584]	; (8002bac <HAL_DMA_IRQHandler+0x258>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a92      	ldr	r2, [pc, #584]	; (8002bb0 <HAL_DMA_IRQHandler+0x25c>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	0a9b      	lsrs	r3, r3, #10
 800296c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002972:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297e:	2208      	movs	r2, #8
 8002980:	409a      	lsls	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d01a      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d013      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0204 	bic.w	r2, r2, #4
 80029a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	2208      	movs	r2, #8
 80029ae:	409a      	lsls	r2, r3
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b8:	f043 0201 	orr.w	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c4:	2201      	movs	r2, #1
 80029c6:	409a      	lsls	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d012      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00b      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	2201      	movs	r2, #1
 80029e4:	409a      	lsls	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	f043 0202 	orr.w	r2, r3, #2
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fa:	2204      	movs	r2, #4
 80029fc:	409a      	lsls	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d012      	beq.n	8002a2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00b      	beq.n	8002a2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a18:	2204      	movs	r2, #4
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a24:	f043 0204 	orr.w	r2, r3, #4
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a30:	2210      	movs	r2, #16
 8002a32:	409a      	lsls	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d043      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d03c      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4e:	2210      	movs	r2, #16
 8002a50:	409a      	lsls	r2, r3
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d018      	beq.n	8002a96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d108      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d024      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
 8002a82:	e01f      	b.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01b      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4798      	blx	r3
 8002a94:	e016      	b.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d107      	bne.n	8002ab4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0208 	bic.w	r2, r2, #8
 8002ab2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac8:	2220      	movs	r2, #32
 8002aca:	409a      	lsls	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 808e 	beq.w	8002bf2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8086 	beq.w	8002bf2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aea:	2220      	movs	r2, #32
 8002aec:	409a      	lsls	r2, r3
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d136      	bne.n	8002b6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0216 	bic.w	r2, r2, #22
 8002b0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695a      	ldr	r2, [r3, #20]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d103      	bne.n	8002b2e <HAL_DMA_IRQHandler+0x1da>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0208 	bic.w	r2, r2, #8
 8002b3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	223f      	movs	r2, #63	; 0x3f
 8002b44:	409a      	lsls	r2, r3
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d07d      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	4798      	blx	r3
        }
        return;
 8002b6a:	e078      	b.n	8002c5e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d01c      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d108      	bne.n	8002b9a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d030      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4798      	blx	r3
 8002b98:	e02b      	b.n	8002bf2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d027      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
 8002baa:	e022      	b.n	8002bf2 <HAL_DMA_IRQHandler+0x29e>
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10f      	bne.n	8002be2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0210 	bic.w	r2, r2, #16
 8002bd0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d032      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d022      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2205      	movs	r2, #5
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0201 	bic.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	3301      	adds	r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d307      	bcc.n	8002c3a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1f2      	bne.n	8002c1e <HAL_DMA_IRQHandler+0x2ca>
 8002c38:	e000      	b.n	8002c3c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c3a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	4798      	blx	r3
 8002c5c:	e000      	b.n	8002c60 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c5e:	bf00      	nop
    }
  }
}
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop

08002c68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b40      	cmp	r3, #64	; 0x40
 8002c94:	d108      	bne.n	8002ca8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ca6:	e007      	b.n	8002cb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	60da      	str	r2, [r3, #12]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	3b10      	subs	r3, #16
 8002cd4:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <DMA_CalcBaseAndBitshift+0x64>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cde:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <DMA_CalcBaseAndBitshift+0x68>)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d909      	bls.n	8002d06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cfa:	f023 0303 	bic.w	r3, r3, #3
 8002cfe:	1d1a      	adds	r2, r3, #4
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	659a      	str	r2, [r3, #88]	; 0x58
 8002d04:	e007      	b.n	8002d16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d0e:	f023 0303 	bic.w	r3, r3, #3
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	aaaaaaab 	.word	0xaaaaaaab
 8002d2c:	0800e0f0 	.word	0x0800e0f0

08002d30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d11f      	bne.n	8002d8a <DMA_CheckFifoParam+0x5a>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d856      	bhi.n	8002dfe <DMA_CheckFifoParam+0xce>
 8002d50:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <DMA_CheckFifoParam+0x28>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002d69 	.word	0x08002d69
 8002d5c:	08002d7b 	.word	0x08002d7b
 8002d60:	08002d69 	.word	0x08002d69
 8002d64:	08002dff 	.word	0x08002dff
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d046      	beq.n	8002e02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d78:	e043      	b.n	8002e02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d82:	d140      	bne.n	8002e06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d88:	e03d      	b.n	8002e06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d92:	d121      	bne.n	8002dd8 <DMA_CheckFifoParam+0xa8>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d837      	bhi.n	8002e0a <DMA_CheckFifoParam+0xda>
 8002d9a:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <DMA_CheckFifoParam+0x70>)
 8002d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da0:	08002db1 	.word	0x08002db1
 8002da4:	08002db7 	.word	0x08002db7
 8002da8:	08002db1 	.word	0x08002db1
 8002dac:	08002dc9 	.word	0x08002dc9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
      break;
 8002db4:	e030      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d025      	beq.n	8002e0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc6:	e022      	b.n	8002e0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dd0:	d11f      	bne.n	8002e12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dd6:	e01c      	b.n	8002e12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d903      	bls.n	8002de6 <DMA_CheckFifoParam+0xb6>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d003      	beq.n	8002dec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002de4:	e018      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
      break;
 8002dea:	e015      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00e      	beq.n	8002e16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002dfc:	e00b      	b.n	8002e16 <DMA_CheckFifoParam+0xe6>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e00a      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e02:	bf00      	nop
 8002e04:	e008      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e06:	bf00      	nop
 8002e08:	e006      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e0a:	bf00      	nop
 8002e0c:	e004      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e0e:	bf00      	nop
 8002e10:	e002      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e12:	bf00      	nop
 8002e14:	e000      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e16:	bf00      	nop
    }
  } 
  
  return status; 
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop

08002e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b089      	sub	sp, #36	; 0x24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	e16b      	b.n	800311c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e44:	2201      	movs	r2, #1
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4013      	ands	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	f040 815a 	bne.w	8003116 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d005      	beq.n	8002e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d130      	bne.n	8002edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	2203      	movs	r2, #3
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 0201 	and.w	r2, r3, #1
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d017      	beq.n	8002f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d123      	bne.n	8002f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	08da      	lsrs	r2, r3, #3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3208      	adds	r2, #8
 8002f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	220f      	movs	r2, #15
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	08da      	lsrs	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3208      	adds	r2, #8
 8002f66:	69b9      	ldr	r1, [r7, #24]
 8002f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	2203      	movs	r2, #3
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 0203 	and.w	r2, r3, #3
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80b4 	beq.w	8003116 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	4b60      	ldr	r3, [pc, #384]	; (8003134 <HAL_GPIO_Init+0x30c>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	4a5f      	ldr	r2, [pc, #380]	; (8003134 <HAL_GPIO_Init+0x30c>)
 8002fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fbe:	4b5d      	ldr	r3, [pc, #372]	; (8003134 <HAL_GPIO_Init+0x30c>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fca:	4a5b      	ldr	r2, [pc, #364]	; (8003138 <HAL_GPIO_Init+0x310>)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	220f      	movs	r2, #15
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a52      	ldr	r2, [pc, #328]	; (800313c <HAL_GPIO_Init+0x314>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d02b      	beq.n	800304e <HAL_GPIO_Init+0x226>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a51      	ldr	r2, [pc, #324]	; (8003140 <HAL_GPIO_Init+0x318>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d025      	beq.n	800304a <HAL_GPIO_Init+0x222>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a50      	ldr	r2, [pc, #320]	; (8003144 <HAL_GPIO_Init+0x31c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d01f      	beq.n	8003046 <HAL_GPIO_Init+0x21e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a4f      	ldr	r2, [pc, #316]	; (8003148 <HAL_GPIO_Init+0x320>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d019      	beq.n	8003042 <HAL_GPIO_Init+0x21a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a4e      	ldr	r2, [pc, #312]	; (800314c <HAL_GPIO_Init+0x324>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d013      	beq.n	800303e <HAL_GPIO_Init+0x216>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a4d      	ldr	r2, [pc, #308]	; (8003150 <HAL_GPIO_Init+0x328>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00d      	beq.n	800303a <HAL_GPIO_Init+0x212>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a4c      	ldr	r2, [pc, #304]	; (8003154 <HAL_GPIO_Init+0x32c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d007      	beq.n	8003036 <HAL_GPIO_Init+0x20e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a4b      	ldr	r2, [pc, #300]	; (8003158 <HAL_GPIO_Init+0x330>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d101      	bne.n	8003032 <HAL_GPIO_Init+0x20a>
 800302e:	2307      	movs	r3, #7
 8003030:	e00e      	b.n	8003050 <HAL_GPIO_Init+0x228>
 8003032:	2308      	movs	r3, #8
 8003034:	e00c      	b.n	8003050 <HAL_GPIO_Init+0x228>
 8003036:	2306      	movs	r3, #6
 8003038:	e00a      	b.n	8003050 <HAL_GPIO_Init+0x228>
 800303a:	2305      	movs	r3, #5
 800303c:	e008      	b.n	8003050 <HAL_GPIO_Init+0x228>
 800303e:	2304      	movs	r3, #4
 8003040:	e006      	b.n	8003050 <HAL_GPIO_Init+0x228>
 8003042:	2303      	movs	r3, #3
 8003044:	e004      	b.n	8003050 <HAL_GPIO_Init+0x228>
 8003046:	2302      	movs	r3, #2
 8003048:	e002      	b.n	8003050 <HAL_GPIO_Init+0x228>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <HAL_GPIO_Init+0x228>
 800304e:	2300      	movs	r3, #0
 8003050:	69fa      	ldr	r2, [r7, #28]
 8003052:	f002 0203 	and.w	r2, r2, #3
 8003056:	0092      	lsls	r2, r2, #2
 8003058:	4093      	lsls	r3, r2
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003060:	4935      	ldr	r1, [pc, #212]	; (8003138 <HAL_GPIO_Init+0x310>)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	089b      	lsrs	r3, r3, #2
 8003066:	3302      	adds	r3, #2
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800306e:	4b3b      	ldr	r3, [pc, #236]	; (800315c <HAL_GPIO_Init+0x334>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003092:	4a32      	ldr	r2, [pc, #200]	; (800315c <HAL_GPIO_Init+0x334>)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003098:	4b30      	ldr	r3, [pc, #192]	; (800315c <HAL_GPIO_Init+0x334>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030bc:	4a27      	ldr	r2, [pc, #156]	; (800315c <HAL_GPIO_Init+0x334>)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030c2:	4b26      	ldr	r3, [pc, #152]	; (800315c <HAL_GPIO_Init+0x334>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030e6:	4a1d      	ldr	r2, [pc, #116]	; (800315c <HAL_GPIO_Init+0x334>)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030ec:	4b1b      	ldr	r3, [pc, #108]	; (800315c <HAL_GPIO_Init+0x334>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003110:	4a12      	ldr	r2, [pc, #72]	; (800315c <HAL_GPIO_Init+0x334>)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	3301      	adds	r3, #1
 800311a:	61fb      	str	r3, [r7, #28]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	2b0f      	cmp	r3, #15
 8003120:	f67f ae90 	bls.w	8002e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop
 8003128:	3724      	adds	r7, #36	; 0x24
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800
 8003138:	40013800 	.word	0x40013800
 800313c:	40020000 	.word	0x40020000
 8003140:	40020400 	.word	0x40020400
 8003144:	40020800 	.word	0x40020800
 8003148:	40020c00 	.word	0x40020c00
 800314c:	40021000 	.word	0x40021000
 8003150:	40021400 	.word	0x40021400
 8003154:	40021800 	.word	0x40021800
 8003158:	40021c00 	.word	0x40021c00
 800315c:	40013c00 	.word	0x40013c00

08003160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
 800316c:	4613      	mov	r3, r2
 800316e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003170:	787b      	ldrb	r3, [r7, #1]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800317c:	e003      	b.n	8003186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800317e:	887b      	ldrh	r3, [r7, #2]
 8003180:	041a      	lsls	r2, r3, #16
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	619a      	str	r2, [r3, #24]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003192:	b480      	push	{r7}
 8003194:	b085      	sub	sp, #20
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	460b      	mov	r3, r1
 800319c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031a4:	887a      	ldrh	r2, [r7, #2]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4013      	ands	r3, r2
 80031aa:	041a      	lsls	r2, r3, #16
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	43d9      	mvns	r1, r3
 80031b0:	887b      	ldrh	r3, [r7, #2]
 80031b2:	400b      	ands	r3, r1
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	619a      	str	r2, [r3, #24]
}
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e12b      	b.n	8003432 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fe fab4 	bl	800175c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2224      	movs	r2, #36	; 0x24
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0201 	bic.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800321a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800322a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800322c:	f002 fb80 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 8003230:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4a81      	ldr	r2, [pc, #516]	; (800343c <HAL_I2C_Init+0x274>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d807      	bhi.n	800324c <HAL_I2C_Init+0x84>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4a80      	ldr	r2, [pc, #512]	; (8003440 <HAL_I2C_Init+0x278>)
 8003240:	4293      	cmp	r3, r2
 8003242:	bf94      	ite	ls
 8003244:	2301      	movls	r3, #1
 8003246:	2300      	movhi	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	e006      	b.n	800325a <HAL_I2C_Init+0x92>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4a7d      	ldr	r2, [pc, #500]	; (8003444 <HAL_I2C_Init+0x27c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	bf94      	ite	ls
 8003254:	2301      	movls	r3, #1
 8003256:	2300      	movhi	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e0e7      	b.n	8003432 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4a78      	ldr	r2, [pc, #480]	; (8003448 <HAL_I2C_Init+0x280>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	0c9b      	lsrs	r3, r3, #18
 800326c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	4a6a      	ldr	r2, [pc, #424]	; (800343c <HAL_I2C_Init+0x274>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d802      	bhi.n	800329c <HAL_I2C_Init+0xd4>
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	3301      	adds	r3, #1
 800329a:	e009      	b.n	80032b0 <HAL_I2C_Init+0xe8>
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032a2:	fb02 f303 	mul.w	r3, r2, r3
 80032a6:	4a69      	ldr	r2, [pc, #420]	; (800344c <HAL_I2C_Init+0x284>)
 80032a8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ac:	099b      	lsrs	r3, r3, #6
 80032ae:	3301      	adds	r3, #1
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	495c      	ldr	r1, [pc, #368]	; (800343c <HAL_I2C_Init+0x274>)
 80032cc:	428b      	cmp	r3, r1
 80032ce:	d819      	bhi.n	8003304 <HAL_I2C_Init+0x13c>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1e59      	subs	r1, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	fbb1 f3f3 	udiv	r3, r1, r3
 80032de:	1c59      	adds	r1, r3, #1
 80032e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032e4:	400b      	ands	r3, r1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HAL_I2C_Init+0x138>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1e59      	subs	r1, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80032f8:	3301      	adds	r3, #1
 80032fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fe:	e051      	b.n	80033a4 <HAL_I2C_Init+0x1dc>
 8003300:	2304      	movs	r3, #4
 8003302:	e04f      	b.n	80033a4 <HAL_I2C_Init+0x1dc>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d111      	bne.n	8003330 <HAL_I2C_Init+0x168>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1e58      	subs	r0, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6859      	ldr	r1, [r3, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	440b      	add	r3, r1
 800331a:	fbb0 f3f3 	udiv	r3, r0, r3
 800331e:	3301      	adds	r3, #1
 8003320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf0c      	ite	eq
 8003328:	2301      	moveq	r3, #1
 800332a:	2300      	movne	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	e012      	b.n	8003356 <HAL_I2C_Init+0x18e>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1e58      	subs	r0, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6859      	ldr	r1, [r3, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	0099      	lsls	r1, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	fbb0 f3f3 	udiv	r3, r0, r3
 8003346:	3301      	adds	r3, #1
 8003348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf0c      	ite	eq
 8003350:	2301      	moveq	r3, #1
 8003352:	2300      	movne	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_I2C_Init+0x196>
 800335a:	2301      	movs	r3, #1
 800335c:	e022      	b.n	80033a4 <HAL_I2C_Init+0x1dc>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10e      	bne.n	8003384 <HAL_I2C_Init+0x1bc>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1e58      	subs	r0, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6859      	ldr	r1, [r3, #4]
 800336e:	460b      	mov	r3, r1
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	440b      	add	r3, r1
 8003374:	fbb0 f3f3 	udiv	r3, r0, r3
 8003378:	3301      	adds	r3, #1
 800337a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800337e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003382:	e00f      	b.n	80033a4 <HAL_I2C_Init+0x1dc>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1e58      	subs	r0, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6859      	ldr	r1, [r3, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	0099      	lsls	r1, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	fbb0 f3f3 	udiv	r3, r0, r3
 800339a:	3301      	adds	r3, #1
 800339c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	6809      	ldr	r1, [r1, #0]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69da      	ldr	r2, [r3, #28]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6911      	ldr	r1, [r2, #16]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68d2      	ldr	r2, [r2, #12]
 80033de:	4311      	orrs	r1, r2
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	430b      	orrs	r3, r1
 80033e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	000186a0 	.word	0x000186a0
 8003440:	001e847f 	.word	0x001e847f
 8003444:	003d08ff 	.word	0x003d08ff
 8003448:	431bde83 	.word	0x431bde83
 800344c:	10624dd3 	.word	0x10624dd3

08003450 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e128      	b.n	80036b4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a90      	ldr	r2, [pc, #576]	; (80036bc <HAL_I2S_Init+0x26c>)
 800347a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7fe f9b5 	bl	80017ec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2202      	movs	r2, #2
 8003486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003498:	f023 030f 	bic.w	r3, r3, #15
 800349c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2202      	movs	r2, #2
 80034a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d060      	beq.n	8003570 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d102      	bne.n	80034bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80034b6:	2310      	movs	r3, #16
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	e001      	b.n	80034c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80034bc:	2320      	movs	r3, #32
 80034be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d802      	bhi.n	80034ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80034ce:	2001      	movs	r0, #1
 80034d0:	f002 fb24 	bl	8005b1c <HAL_RCCEx_GetPeriphCLKFreq>
 80034d4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034de:	d125      	bne.n	800352c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d010      	beq.n	800350a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	461a      	mov	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	fbb2 f3f3 	udiv	r3, r2, r3
 8003504:	3305      	adds	r3, #5
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	e01f      	b.n	800354a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	fbb2 f2f3 	udiv	r2, r2, r3
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	461a      	mov	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	fbb2 f3f3 	udiv	r3, r2, r3
 8003526:	3305      	adds	r3, #5
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	e00e      	b.n	800354a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	fbb2 f2f3 	udiv	r2, r2, r3
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	461a      	mov	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	fbb2 f3f3 	udiv	r3, r2, r3
 8003546:	3305      	adds	r3, #5
 8003548:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4a5c      	ldr	r2, [pc, #368]	; (80036c0 <HAL_I2S_Init+0x270>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	08db      	lsrs	r3, r3, #3
 8003554:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	085b      	lsrs	r3, r3, #1
 8003566:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	e003      	b.n	8003578 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003570:	2302      	movs	r3, #2
 8003572:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d902      	bls.n	8003584 <HAL_I2S_Init+0x134>
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	2bff      	cmp	r3, #255	; 0xff
 8003582:	d907      	bls.n	8003594 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003588:	f043 0210 	orr.w	r2, r3, #16
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e08f      	b.n	80036b4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	ea42 0103 	orr.w	r1, r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035b2:	f023 030f 	bic.w	r3, r3, #15
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6851      	ldr	r1, [r2, #4]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6892      	ldr	r2, [r2, #8]
 80035be:	4311      	orrs	r1, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	68d2      	ldr	r2, [r2, #12]
 80035c4:	4311      	orrs	r1, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6992      	ldr	r2, [r2, #24]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035d6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d161      	bne.n	80036a4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a38      	ldr	r2, [pc, #224]	; (80036c4 <HAL_I2S_Init+0x274>)
 80035e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a37      	ldr	r2, [pc, #220]	; (80036c8 <HAL_I2S_Init+0x278>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d101      	bne.n	80035f4 <HAL_I2S_Init+0x1a4>
 80035f0:	4b36      	ldr	r3, [pc, #216]	; (80036cc <HAL_I2S_Init+0x27c>)
 80035f2:	e001      	b.n	80035f8 <HAL_I2S_Init+0x1a8>
 80035f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	4932      	ldr	r1, [pc, #200]	; (80036c8 <HAL_I2S_Init+0x278>)
 8003600:	428a      	cmp	r2, r1
 8003602:	d101      	bne.n	8003608 <HAL_I2S_Init+0x1b8>
 8003604:	4a31      	ldr	r2, [pc, #196]	; (80036cc <HAL_I2S_Init+0x27c>)
 8003606:	e001      	b.n	800360c <HAL_I2S_Init+0x1bc>
 8003608:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800360c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003610:	f023 030f 	bic.w	r3, r3, #15
 8003614:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a2b      	ldr	r2, [pc, #172]	; (80036c8 <HAL_I2S_Init+0x278>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d101      	bne.n	8003624 <HAL_I2S_Init+0x1d4>
 8003620:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <HAL_I2S_Init+0x27c>)
 8003622:	e001      	b.n	8003628 <HAL_I2S_Init+0x1d8>
 8003624:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003628:	2202      	movs	r2, #2
 800362a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a25      	ldr	r2, [pc, #148]	; (80036c8 <HAL_I2S_Init+0x278>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_I2S_Init+0x1ea>
 8003636:	4b25      	ldr	r3, [pc, #148]	; (80036cc <HAL_I2S_Init+0x27c>)
 8003638:	e001      	b.n	800363e <HAL_I2S_Init+0x1ee>
 800363a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800364a:	d003      	beq.n	8003654 <HAL_I2S_Init+0x204>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d103      	bne.n	800365c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	e001      	b.n	8003660 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800365c:	2300      	movs	r3, #0
 800365e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800366a:	4313      	orrs	r3, r2
 800366c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003674:	4313      	orrs	r3, r2
 8003676:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800367e:	4313      	orrs	r3, r2
 8003680:	b29a      	uxth	r2, r3
 8003682:	897b      	ldrh	r3, [r7, #10]
 8003684:	4313      	orrs	r3, r2
 8003686:	b29b      	uxth	r3, r3
 8003688:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800368c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a0d      	ldr	r2, [pc, #52]	; (80036c8 <HAL_I2S_Init+0x278>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d101      	bne.n	800369c <HAL_I2S_Init+0x24c>
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <HAL_I2S_Init+0x27c>)
 800369a:	e001      	b.n	80036a0 <HAL_I2S_Init+0x250>
 800369c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a0:	897a      	ldrh	r2, [r7, #10]
 80036a2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3720      	adds	r7, #32
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	080037c7 	.word	0x080037c7
 80036c0:	cccccccd 	.word	0xcccccccd
 80036c4:	080038dd 	.word	0x080038dd
 80036c8:	40003800 	.word	0x40003800
 80036cc:	40003400 	.word	0x40003400

080036d0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	881a      	ldrh	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	1c9a      	adds	r2, r3, #2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10e      	bne.n	8003760 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003750:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff ffb8 	bl	80036d0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	b292      	uxth	r2, r2
 800377c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	1c9a      	adds	r2, r3, #2
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10e      	bne.n	80037be <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff ff93 	bl	80036e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b086      	sub	sp, #24
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d13a      	bne.n	8003858 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d109      	bne.n	8003800 <I2S_IRQHandler+0x3a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	2b40      	cmp	r3, #64	; 0x40
 80037f8:	d102      	bne.n	8003800 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff ffb4 	bl	8003768 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003806:	2b40      	cmp	r3, #64	; 0x40
 8003808:	d126      	bne.n	8003858 <I2S_IRQHandler+0x92>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b20      	cmp	r3, #32
 8003816:	d11f      	bne.n	8003858 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003826:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003828:	2300      	movs	r3, #0
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	613b      	str	r3, [r7, #16]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f043 0202 	orr.w	r2, r3, #2
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff ff50 	bl	80036f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b03      	cmp	r3, #3
 8003862:	d136      	bne.n	80038d2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b02      	cmp	r3, #2
 800386c:	d109      	bne.n	8003882 <I2S_IRQHandler+0xbc>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003878:	2b80      	cmp	r3, #128	; 0x80
 800387a:	d102      	bne.n	8003882 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff ff45 	bl	800370c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b08      	cmp	r3, #8
 800388a:	d122      	bne.n	80038d2 <I2S_IRQHandler+0x10c>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b20      	cmp	r3, #32
 8003898:	d11b      	bne.n	80038d2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038a8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c4:	f043 0204 	orr.w	r2, r3, #4
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff ff13 	bl	80036f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038d2:	bf00      	nop
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4aa2      	ldr	r2, [pc, #648]	; (8003b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d101      	bne.n	80038fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80038f6:	4ba2      	ldr	r3, [pc, #648]	; (8003b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038f8:	e001      	b.n	80038fe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80038fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a9b      	ldr	r2, [pc, #620]	; (8003b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d101      	bne.n	8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003914:	4b9a      	ldr	r3, [pc, #616]	; (8003b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003916:	e001      	b.n	800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003918:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003928:	d004      	beq.n	8003934 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f040 8099 	bne.w	8003a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b02      	cmp	r3, #2
 800393c:	d107      	bne.n	800394e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f925 	bl	8003b98 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b01      	cmp	r3, #1
 8003956:	d107      	bne.n	8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f9c8 	bl	8003cf8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396e:	2b40      	cmp	r3, #64	; 0x40
 8003970:	d13a      	bne.n	80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b00      	cmp	r3, #0
 800397a:	d035      	beq.n	80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a7e      	ldr	r2, [pc, #504]	; (8003b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d101      	bne.n	800398a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003986:	4b7e      	ldr	r3, [pc, #504]	; (8003b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003988:	e001      	b.n	800398e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800398a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4979      	ldr	r1, [pc, #484]	; (8003b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003996:	428b      	cmp	r3, r1
 8003998:	d101      	bne.n	800399e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800399a:	4b79      	ldr	r3, [pc, #484]	; (8003b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800399c:	e001      	b.n	80039a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800399e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039a6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039b8:	2300      	movs	r3, #0
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	f043 0202 	orr.w	r2, r3, #2
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff fe88 	bl	80036f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	f040 80be 	bne.w	8003b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80b8 	beq.w	8003b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a0e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a59      	ldr	r2, [pc, #356]	; (8003b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003a1a:	4b59      	ldr	r3, [pc, #356]	; (8003b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a1c:	e001      	b.n	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003a1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4954      	ldr	r1, [pc, #336]	; (8003b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a2a:	428b      	cmp	r3, r1
 8003a2c:	d101      	bne.n	8003a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003a2e:	4b54      	ldr	r3, [pc, #336]	; (8003b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a30:	e001      	b.n	8003a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003a32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a3a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	f043 0204 	orr.w	r2, r3, #4
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff fe4a 	bl	80036f8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a64:	e084      	b.n	8003b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d107      	bne.n	8003a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f8be 	bl	8003bfc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d107      	bne.n	8003a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f8fd 	bl	8003c94 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa0:	2b40      	cmp	r3, #64	; 0x40
 8003aa2:	d12f      	bne.n	8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d02a      	beq.n	8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003abc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2e      	ldr	r2, [pc, #184]	; (8003b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d101      	bne.n	8003acc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ac8:	4b2d      	ldr	r3, [pc, #180]	; (8003b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003aca:	e001      	b.n	8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4929      	ldr	r1, [pc, #164]	; (8003b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ad8:	428b      	cmp	r3, r1
 8003ada:	d101      	bne.n	8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003adc:	4b28      	ldr	r3, [pc, #160]	; (8003b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ade:	e001      	b.n	8003ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003ae0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ae4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ae8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	f043 0202 	orr.w	r2, r3, #2
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff fdfa 	bl	80036f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d131      	bne.n	8003b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d02c      	beq.n	8003b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a17      	ldr	r2, [pc, #92]	; (8003b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d101      	bne.n	8003b26 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003b22:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b24:	e001      	b.n	8003b2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003b26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4912      	ldr	r1, [pc, #72]	; (8003b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b32:	428b      	cmp	r3, r1
 8003b34:	d101      	bne.n	8003b3a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003b36:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b38:	e001      	b.n	8003b3e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003b3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b52:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b60:	f043 0204 	orr.w	r2, r3, #4
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff fdc5 	bl	80036f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b6e:	e000      	b.n	8003b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b70:	bf00      	nop
}
 8003b72:	bf00      	nop
 8003b74:	3720      	adds	r7, #32
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40003800 	.word	0x40003800
 8003b80:	40003400 	.word	0x40003400

08003b84 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	1c99      	adds	r1, r3, #2
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6251      	str	r1, [r2, #36]	; 0x24
 8003baa:	881a      	ldrh	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d113      	bne.n	8003bf2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bd8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d106      	bne.n	8003bf2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ffc9 	bl	8003b84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	1c99      	adds	r1, r3, #2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6251      	str	r1, [r2, #36]	; 0x24
 8003c0e:	8819      	ldrh	r1, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <I2SEx_TxISR_I2SExt+0x90>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d101      	bne.n	8003c1e <I2SEx_TxISR_I2SExt+0x22>
 8003c1a:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <I2SEx_TxISR_I2SExt+0x94>)
 8003c1c:	e001      	b.n	8003c22 <I2SEx_TxISR_I2SExt+0x26>
 8003c1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c22:	460a      	mov	r2, r1
 8003c24:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d121      	bne.n	8003c82 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a12      	ldr	r2, [pc, #72]	; (8003c8c <I2SEx_TxISR_I2SExt+0x90>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d101      	bne.n	8003c4c <I2SEx_TxISR_I2SExt+0x50>
 8003c48:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <I2SEx_TxISR_I2SExt+0x94>)
 8003c4a:	e001      	b.n	8003c50 <I2SEx_TxISR_I2SExt+0x54>
 8003c4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	490d      	ldr	r1, [pc, #52]	; (8003c8c <I2SEx_TxISR_I2SExt+0x90>)
 8003c58:	428b      	cmp	r3, r1
 8003c5a:	d101      	bne.n	8003c60 <I2SEx_TxISR_I2SExt+0x64>
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <I2SEx_TxISR_I2SExt+0x94>)
 8003c5e:	e001      	b.n	8003c64 <I2SEx_TxISR_I2SExt+0x68>
 8003c60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d106      	bne.n	8003c82 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ff81 	bl	8003b84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40003800 	.word	0x40003800
 8003c90:	40003400 	.word	0x40003400

08003c94 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68d8      	ldr	r0, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	1c99      	adds	r1, r3, #2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003cac:	b282      	uxth	r2, r0
 8003cae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d113      	bne.n	8003cf0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cd6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff ff4a 	bl	8003b84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cf0:	bf00      	nop
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a20      	ldr	r2, [pc, #128]	; (8003d88 <I2SEx_RxISR_I2SExt+0x90>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d101      	bne.n	8003d0e <I2SEx_RxISR_I2SExt+0x16>
 8003d0a:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <I2SEx_RxISR_I2SExt+0x94>)
 8003d0c:	e001      	b.n	8003d12 <I2SEx_RxISR_I2SExt+0x1a>
 8003d0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d12:	68d8      	ldr	r0, [r3, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	1c99      	adds	r1, r3, #2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d1e:	b282      	uxth	r2, r0
 8003d20:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d121      	bne.n	8003d7e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a12      	ldr	r2, [pc, #72]	; (8003d88 <I2SEx_RxISR_I2SExt+0x90>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d101      	bne.n	8003d48 <I2SEx_RxISR_I2SExt+0x50>
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <I2SEx_RxISR_I2SExt+0x94>)
 8003d46:	e001      	b.n	8003d4c <I2SEx_RxISR_I2SExt+0x54>
 8003d48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	490d      	ldr	r1, [pc, #52]	; (8003d88 <I2SEx_RxISR_I2SExt+0x90>)
 8003d54:	428b      	cmp	r3, r1
 8003d56:	d101      	bne.n	8003d5c <I2SEx_RxISR_I2SExt+0x64>
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <I2SEx_RxISR_I2SExt+0x94>)
 8003d5a:	e001      	b.n	8003d60 <I2SEx_RxISR_I2SExt+0x68>
 8003d5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d64:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d106      	bne.n	8003d7e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff ff03 	bl	8003b84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40003800 	.word	0x40003800
 8003d8c:	40003400 	.word	0x40003400

08003d90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d92:	b08f      	sub	sp, #60	; 0x3c
 8003d94:	af0a      	add	r7, sp, #40	; 0x28
 8003d96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e10f      	b.n	8003fc2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d106      	bne.n	8003dc2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f005 f9a3 	bl	8009108 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2203      	movs	r2, #3
 8003dc6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d102      	bne.n	8003ddc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f002 f896 	bl	8005f12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	687e      	ldr	r6, [r7, #4]
 8003dee:	466d      	mov	r5, sp
 8003df0:	f106 0410 	add.w	r4, r6, #16
 8003df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003df6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e00:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e04:	1d33      	adds	r3, r6, #4
 8003e06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e08:	6838      	ldr	r0, [r7, #0]
 8003e0a:	f001 ff6e 	bl	8005cea <USB_CoreInit>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0d0      	b.n	8003fc2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2100      	movs	r1, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f002 f884 	bl	8005f34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	73fb      	strb	r3, [r7, #15]
 8003e30:	e04a      	b.n	8003ec8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e32:	7bfa      	ldrb	r2, [r7, #15]
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	333d      	adds	r3, #61	; 0x3d
 8003e42:	2201      	movs	r2, #1
 8003e44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e46:	7bfa      	ldrb	r2, [r7, #15]
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	1a9b      	subs	r3, r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	333c      	adds	r3, #60	; 0x3c
 8003e56:	7bfa      	ldrb	r2, [r7, #15]
 8003e58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e5a:	7bfa      	ldrb	r2, [r7, #15]
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	b298      	uxth	r0, r3
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	3342      	adds	r3, #66	; 0x42
 8003e6e:	4602      	mov	r2, r0
 8003e70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e72:	7bfa      	ldrb	r2, [r7, #15]
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	333f      	adds	r3, #63	; 0x3f
 8003e82:	2200      	movs	r2, #0
 8003e84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e86:	7bfa      	ldrb	r2, [r7, #15]
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	3344      	adds	r3, #68	; 0x44
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e9a:	7bfa      	ldrb	r2, [r7, #15]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3348      	adds	r3, #72	; 0x48
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003eae:	7bfa      	ldrb	r2, [r7, #15]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	3350      	adds	r3, #80	; 0x50
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
 8003ec8:	7bfa      	ldrb	r2, [r7, #15]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d3af      	bcc.n	8003e32 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	73fb      	strb	r3, [r7, #15]
 8003ed6:	e044      	b.n	8003f62 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ed8:	7bfa      	ldrb	r2, [r7, #15]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003eee:	7bfa      	ldrb	r2, [r7, #15]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003f00:	7bfa      	ldrb	r2, [r7, #15]
 8003f02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f04:	7bfa      	ldrb	r2, [r7, #15]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f1a:	7bfa      	ldrb	r2, [r7, #15]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f30:	7bfa      	ldrb	r2, [r7, #15]
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f46:	7bfa      	ldrb	r2, [r7, #15]
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	1a9b      	subs	r3, r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	440b      	add	r3, r1
 8003f54:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
 8003f62:	7bfa      	ldrb	r2, [r7, #15]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d3b5      	bcc.n	8003ed8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	603b      	str	r3, [r7, #0]
 8003f72:	687e      	ldr	r6, [r7, #4]
 8003f74:	466d      	mov	r5, sp
 8003f76:	f106 0410 	add.w	r4, r6, #16
 8003f7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f86:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f8a:	1d33      	adds	r3, r6, #4
 8003f8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f8e:	6838      	ldr	r0, [r7, #0]
 8003f90:	f002 f81c 	bl	8005fcc <USB_DevInit>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e00d      	b.n	8003fc2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f003 f898 	bl	80070f0 <USB_DevDisconnect>

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_PCD_Start+0x1c>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e020      	b.n	8004028 <HAL_PCD_Start+0x5e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d109      	bne.n	800400a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d005      	beq.n	800400a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f001 ff6e 	bl	8005ef0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f003 f848 	bl	80070ae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004030:	b590      	push	{r4, r7, lr}
 8004032:	b08d      	sub	sp, #52	; 0x34
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f003 f906 	bl	8007258 <USB_GetMode>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	f040 839d 	bne.w	800478e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f003 f86a 	bl	8007132 <USB_ReadInterrupts>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8393 	beq.w	800478c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f003 f861 	bl	8007132 <USB_ReadInterrupts>
 8004070:	4603      	mov	r3, r0
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b02      	cmp	r3, #2
 8004078:	d107      	bne.n	800408a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695a      	ldr	r2, [r3, #20]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f002 0202 	and.w	r2, r2, #2
 8004088:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f003 f84f 	bl	8007132 <USB_ReadInterrupts>
 8004094:	4603      	mov	r3, r0
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b10      	cmp	r3, #16
 800409c:	d161      	bne.n	8004162 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699a      	ldr	r2, [r3, #24]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0210 	bic.w	r2, r2, #16
 80040ac:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	f003 020f 	and.w	r2, r3, #15
 80040ba:	4613      	mov	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	4413      	add	r3, r2
 80040ca:	3304      	adds	r3, #4
 80040cc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	0c5b      	lsrs	r3, r3, #17
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d124      	bne.n	8004124 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d035      	beq.n	8004152 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	461a      	mov	r2, r3
 80040f8:	6a38      	ldr	r0, [r7, #32]
 80040fa:	f002 fe86 	bl	8006e0a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800410a:	441a      	add	r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	699a      	ldr	r2, [r3, #24]
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800411c:	441a      	add	r2, r3
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	619a      	str	r2, [r3, #24]
 8004122:	e016      	b.n	8004152 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	0c5b      	lsrs	r3, r3, #17
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	2b06      	cmp	r3, #6
 800412e:	d110      	bne.n	8004152 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004136:	2208      	movs	r2, #8
 8004138:	4619      	mov	r1, r3
 800413a:	6a38      	ldr	r0, [r7, #32]
 800413c:	f002 fe65 	bl	8006e0a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	699a      	ldr	r2, [r3, #24]
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	091b      	lsrs	r3, r3, #4
 8004148:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800414c:	441a      	add	r2, r3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699a      	ldr	r2, [r3, #24]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0210 	orr.w	r2, r2, #16
 8004160:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f002 ffe3 	bl	8007132 <USB_ReadInterrupts>
 800416c:	4603      	mov	r3, r0
 800416e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004172:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004176:	d16e      	bne.n	8004256 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f002 ffe9 	bl	8007158 <USB_ReadDevAllOutEpInterrupt>
 8004186:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004188:	e062      	b.n	8004250 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d057      	beq.n	8004244 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	4611      	mov	r1, r2
 800419e:	4618      	mov	r0, r3
 80041a0:	f003 f80e 	bl	80071c0 <USB_ReadDevOutEPInterrupt>
 80041a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00c      	beq.n	80041ca <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041bc:	461a      	mov	r2, r3
 80041be:	2301      	movs	r3, #1
 80041c0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80041c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fdb1 	bl	8004d2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00c      	beq.n	80041ee <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e0:	461a      	mov	r2, r3
 80041e2:	2308      	movs	r3, #8
 80041e4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80041e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 feab 	bl	8004f44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004204:	461a      	mov	r2, r3
 8004206:	2310      	movs	r3, #16
 8004208:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004220:	461a      	mov	r2, r3
 8004222:	2320      	movs	r3, #32
 8004224:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423c:	461a      	mov	r2, r3
 800423e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004242:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	3301      	adds	r3, #1
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424c:	085b      	lsrs	r3, r3, #1
 800424e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004252:	2b00      	cmp	r3, #0
 8004254:	d199      	bne.n	800418a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f002 ff69 	bl	8007132 <USB_ReadInterrupts>
 8004260:	4603      	mov	r3, r0
 8004262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004266:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800426a:	f040 80c0 	bne.w	80043ee <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f002 ff8a 	bl	800718c <USB_ReadDevAllInEpInterrupt>
 8004278:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800427e:	e0b2      	b.n	80043e6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 80a7 	beq.w	80043da <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	4611      	mov	r1, r2
 8004296:	4618      	mov	r0, r3
 8004298:	f002 ffb0 	bl	80071fc <USB_ReadDevInEPInterrupt>
 800429c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d057      	beq.n	8004358 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	2201      	movs	r2, #1
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	43db      	mvns	r3, r3
 80042c2:	69f9      	ldr	r1, [r7, #28]
 80042c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042c8:	4013      	ands	r3, r2
 80042ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d8:	461a      	mov	r2, r3
 80042da:	2301      	movs	r3, #1
 80042dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d132      	bne.n	800434c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ea:	4613      	mov	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	1a9b      	subs	r3, r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	3348      	adds	r3, #72	; 0x48
 80042f6:	6819      	ldr	r1, [r3, #0]
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fc:	4613      	mov	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4403      	add	r3, r0
 8004306:	3344      	adds	r3, #68	; 0x44
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4419      	add	r1, r3
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004310:	4613      	mov	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4403      	add	r3, r0
 800431a:	3348      	adds	r3, #72	; 0x48
 800431c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	2b00      	cmp	r3, #0
 8004322:	d113      	bne.n	800434c <HAL_PCD_IRQHandler+0x31c>
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004328:	4613      	mov	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	3350      	adds	r3, #80	; 0x50
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d108      	bne.n	800434c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004344:	461a      	mov	r2, r3
 8004346:	2101      	movs	r1, #1
 8004348:	f002 ffb8 	bl	80072bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	b2db      	uxtb	r3, r3
 8004350:	4619      	mov	r1, r3
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f004 ff67 	bl	8009226 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d008      	beq.n	8004374 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436e:	461a      	mov	r2, r3
 8004370:	2308      	movs	r3, #8
 8004372:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f003 0310 	and.w	r3, r3, #16
 800437a:	2b00      	cmp	r3, #0
 800437c:	d008      	beq.n	8004390 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438a:	461a      	mov	r2, r3
 800438c:	2310      	movs	r3, #16
 800438e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a6:	461a      	mov	r2, r3
 80043a8:	2340      	movs	r3, #64	; 0x40
 80043aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d008      	beq.n	80043c8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c2:	461a      	mov	r2, r3
 80043c4:	2302      	movs	r3, #2
 80043c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80043d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fc1b 	bl	8004c10 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	3301      	adds	r3, #1
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	085b      	lsrs	r3, r3, #1
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f47f af49 	bne.w	8004280 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f002 fe9d 	bl	8007132 <USB_ReadInterrupts>
 80043f8:	4603      	mov	r3, r0
 80043fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004402:	d122      	bne.n	800444a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800441e:	2b01      	cmp	r3, #1
 8004420:	d108      	bne.n	8004434 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800442a:	2100      	movs	r1, #0
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 fe27 	bl	8005080 <HAL_PCDEx_LPM_Callback>
 8004432:	e002      	b.n	800443a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f004 ff6d 	bl	8009314 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695a      	ldr	r2, [r3, #20]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004448:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f002 fe6f 	bl	8007132 <USB_ReadInterrupts>
 8004454:	4603      	mov	r3, r0
 8004456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800445a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445e:	d112      	bne.n	8004486 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b01      	cmp	r3, #1
 800446e:	d102      	bne.n	8004476 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f004 ff29 	bl	80092c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695a      	ldr	r2, [r3, #20]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004484:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f002 fe51 	bl	8007132 <USB_ReadInterrupts>
 8004490:	4603      	mov	r3, r0
 8004492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449a:	f040 80c7 	bne.w	800462c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2110      	movs	r1, #16
 80044b8:	4618      	mov	r0, r3
 80044ba:	f001 feeb 	bl	8006294 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044be:	2300      	movs	r3, #0
 80044c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044c2:	e056      	b.n	8004572 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80044c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d0:	461a      	mov	r2, r3
 80044d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80044d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e8:	0151      	lsls	r1, r2, #5
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	440a      	add	r2, r1
 80044ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044f6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80044f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004508:	0151      	lsls	r1, r2, #5
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	440a      	add	r2, r1
 800450e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004512:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004516:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004524:	461a      	mov	r2, r3
 8004526:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800452a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800452c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800453c:	0151      	lsls	r1, r2, #5
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	440a      	add	r2, r1
 8004542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004546:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800454a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800454c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800455c:	0151      	lsls	r1, r2, #5
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	440a      	add	r2, r1
 8004562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004566:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800456a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800456c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456e:	3301      	adds	r3, #1
 8004570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004578:	429a      	cmp	r2, r3
 800457a:	d3a3      	bcc.n	80044c4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800458a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800458e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004594:	2b00      	cmp	r3, #0
 8004596:	d016      	beq.n	80045c6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a2:	69fa      	ldr	r2, [r7, #28]
 80045a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045a8:	f043 030b 	orr.w	r3, r3, #11
 80045ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b8:	69fa      	ldr	r2, [r7, #28]
 80045ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045be:	f043 030b 	orr.w	r3, r3, #11
 80045c2:	6453      	str	r3, [r2, #68]	; 0x44
 80045c4:	e015      	b.n	80045f2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	69fa      	ldr	r2, [r7, #28]
 80045d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045d8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80045dc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045ec:	f043 030b 	orr.w	r3, r3, #11
 80045f0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004600:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004604:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004616:	461a      	mov	r2, r3
 8004618:	f002 fe50 	bl	80072bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695a      	ldr	r2, [r3, #20]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800462a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f002 fd7e 	bl	8007132 <USB_ReadInterrupts>
 8004636:	4603      	mov	r3, r0
 8004638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800463c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004640:	d124      	bne.n	800468c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f002 fe14 	bl	8007274 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f001 fe7c 	bl	800634e <USB_GetDevSpeed>
 8004656:	4603      	mov	r3, r0
 8004658:	461a      	mov	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681c      	ldr	r4, [r3, #0]
 8004662:	f001 f959 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 8004666:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800466c:	b2db      	uxtb	r3, r3
 800466e:	461a      	mov	r2, r3
 8004670:	4620      	mov	r0, r4
 8004672:	f001 fb9b 	bl	8005dac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f004 fdfd 	bl	8009276 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695a      	ldr	r2, [r3, #20]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800468a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f002 fd4e 	bl	8007132 <USB_ReadInterrupts>
 8004696:	4603      	mov	r3, r0
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b08      	cmp	r3, #8
 800469e:	d10a      	bne.n	80046b6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f004 fdda 	bl	800925a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f002 0208 	and.w	r2, r2, #8
 80046b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f002 fd39 	bl	8007132 <USB_ReadInterrupts>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ca:	d10f      	bne.n	80046ec <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	4619      	mov	r1, r3
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f004 fe3c 	bl	8009354 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695a      	ldr	r2, [r3, #20]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80046ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f002 fd1e 	bl	8007132 <USB_ReadInterrupts>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004700:	d10f      	bne.n	8004722 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	b2db      	uxtb	r3, r3
 800470a:	4619      	mov	r1, r3
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f004 fe0f 	bl	8009330 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695a      	ldr	r2, [r3, #20]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004720:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f002 fd03 	bl	8007132 <USB_ReadInterrupts>
 800472c:	4603      	mov	r3, r0
 800472e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004736:	d10a      	bne.n	800474e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f004 fe1d 	bl	8009378 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695a      	ldr	r2, [r3, #20]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800474c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f002 fced 	bl	8007132 <USB_ReadInterrupts>
 8004758:	4603      	mov	r3, r0
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b04      	cmp	r3, #4
 8004760:	d115      	bne.n	800478e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f004 fe0d 	bl	8009394 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6859      	ldr	r1, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	e000      	b.n	800478e <HAL_PCD_IRQHandler+0x75e>
      return;
 800478c:	bf00      	nop
    }
  }
}
 800478e:	3734      	adds	r7, #52	; 0x34
 8004790:	46bd      	mov	sp, r7
 8004792:	bd90      	pop	{r4, r7, pc}

08004794 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_PCD_SetAddress+0x1a>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e013      	b.n	80047d6 <HAL_PCD_SetAddress+0x42>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	78fa      	ldrb	r2, [r7, #3]
 80047ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	78fa      	ldrb	r2, [r7, #3]
 80047c4:	4611      	mov	r1, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f002 fc4b 	bl	8007062 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b084      	sub	sp, #16
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	4608      	mov	r0, r1
 80047e8:	4611      	mov	r1, r2
 80047ea:	461a      	mov	r2, r3
 80047ec:	4603      	mov	r3, r0
 80047ee:	70fb      	strb	r3, [r7, #3]
 80047f0:	460b      	mov	r3, r1
 80047f2:	803b      	strh	r3, [r7, #0]
 80047f4:	4613      	mov	r3, r2
 80047f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004800:	2b00      	cmp	r3, #0
 8004802:	da0f      	bge.n	8004824 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	f003 020f 	and.w	r2, r3, #15
 800480a:	4613      	mov	r3, r2
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	1a9b      	subs	r3, r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	3338      	adds	r3, #56	; 0x38
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	4413      	add	r3, r2
 8004818:	3304      	adds	r3, #4
 800481a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2201      	movs	r2, #1
 8004820:	705a      	strb	r2, [r3, #1]
 8004822:	e00f      	b.n	8004844 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	f003 020f 	and.w	r2, r3, #15
 800482a:	4613      	mov	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	1a9b      	subs	r3, r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	4413      	add	r3, r2
 800483a:	3304      	adds	r3, #4
 800483c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	b2da      	uxtb	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004850:	883a      	ldrh	r2, [r7, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	78ba      	ldrb	r2, [r7, #2]
 800485a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	785b      	ldrb	r3, [r3, #1]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d004      	beq.n	800486e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800486e:	78bb      	ldrb	r3, [r7, #2]
 8004870:	2b02      	cmp	r3, #2
 8004872:	d102      	bne.n	800487a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_PCD_EP_Open+0xaa>
 8004884:	2302      	movs	r3, #2
 8004886:	e00e      	b.n	80048a6 <HAL_PCD_EP_Open+0xc8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68f9      	ldr	r1, [r7, #12]
 8004896:	4618      	mov	r0, r3
 8004898:	f001 fd7e 	bl	8006398 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80048a4:	7afb      	ldrb	r3, [r7, #11]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	460b      	mov	r3, r1
 80048b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	da0f      	bge.n	80048e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	f003 020f 	and.w	r2, r3, #15
 80048c8:	4613      	mov	r3, r2
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	1a9b      	subs	r3, r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	3338      	adds	r3, #56	; 0x38
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4413      	add	r3, r2
 80048d6:	3304      	adds	r3, #4
 80048d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2201      	movs	r2, #1
 80048de:	705a      	strb	r2, [r3, #1]
 80048e0:	e00f      	b.n	8004902 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	f003 020f 	and.w	r2, r3, #15
 80048e8:	4613      	mov	r3, r2
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	4413      	add	r3, r2
 80048f8:	3304      	adds	r3, #4
 80048fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004902:	78fb      	ldrb	r3, [r7, #3]
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	b2da      	uxtb	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_PCD_EP_Close+0x6e>
 8004918:	2302      	movs	r3, #2
 800491a:	e00e      	b.n	800493a <HAL_PCD_EP_Close+0x8c>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68f9      	ldr	r1, [r7, #12]
 800492a:	4618      	mov	r0, r3
 800492c:	f001 fdbc 	bl	80064a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b086      	sub	sp, #24
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
 800494e:	460b      	mov	r3, r1
 8004950:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004952:	7afb      	ldrb	r3, [r7, #11]
 8004954:	f003 020f 	and.w	r2, r3, #15
 8004958:	4613      	mov	r3, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	1a9b      	subs	r3, r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	3304      	adds	r3, #4
 800496a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2200      	movs	r2, #0
 800497c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2200      	movs	r2, #0
 8004982:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004984:	7afb      	ldrb	r3, [r7, #11]
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	b2da      	uxtb	r2, r3
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d102      	bne.n	800499e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800499e:	7afb      	ldrb	r3, [r7, #11]
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d109      	bne.n	80049bc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	461a      	mov	r2, r3
 80049b4:	6979      	ldr	r1, [r7, #20]
 80049b6:	f002 f897 	bl	8006ae8 <USB_EP0StartXfer>
 80049ba:	e008      	b.n	80049ce <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	6979      	ldr	r1, [r7, #20]
 80049ca:	f001 fe49 	bl	8006660 <USB_EPStartXfer>
  }

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3718      	adds	r7, #24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	f003 020f 	and.w	r2, r3, #15
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	4613      	mov	r3, r2
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	1a9b      	subs	r3, r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80049fa:	681b      	ldr	r3, [r3, #0]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	607a      	str	r2, [r7, #4]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	460b      	mov	r3, r1
 8004a16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a18:	7afb      	ldrb	r3, [r7, #11]
 8004a1a:	f003 020f 	and.w	r2, r3, #15
 8004a1e:	4613      	mov	r3, r2
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	1a9b      	subs	r3, r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	3338      	adds	r3, #56	; 0x38
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2201      	movs	r2, #1
 8004a46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a48:	7afb      	ldrb	r3, [r7, #11]
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d102      	bne.n	8004a62 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a62:	7afb      	ldrb	r3, [r7, #11]
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	6979      	ldr	r1, [r7, #20]
 8004a7a:	f002 f835 	bl	8006ae8 <USB_EP0StartXfer>
 8004a7e:	e008      	b.n	8004a92 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6818      	ldr	r0, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6979      	ldr	r1, [r7, #20]
 8004a8e:	f001 fde7 	bl	8006660 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	f003 020f 	and.w	r2, r3, #15
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d901      	bls.n	8004aba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e050      	b.n	8004b5c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	da0f      	bge.n	8004ae2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ac2:	78fb      	ldrb	r3, [r7, #3]
 8004ac4:	f003 020f 	and.w	r2, r3, #15
 8004ac8:	4613      	mov	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	1a9b      	subs	r3, r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	3338      	adds	r3, #56	; 0x38
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	705a      	strb	r2, [r3, #1]
 8004ae0:	e00d      	b.n	8004afe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ae2:	78fa      	ldrb	r2, [r7, #3]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	1a9b      	subs	r3, r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	4413      	add	r3, r2
 8004af4:	3304      	adds	r3, #4
 8004af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2201      	movs	r2, #1
 8004b02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_PCD_EP_SetStall+0x82>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e01e      	b.n	8004b5c <HAL_PCD_EP_SetStall+0xc0>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68f9      	ldr	r1, [r7, #12]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f002 f9c4 	bl	8006eba <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b32:	78fb      	ldrb	r3, [r7, #3]
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10a      	bne.n	8004b52 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	b2d9      	uxtb	r1, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	f002 fbb5 	bl	80072bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	f003 020f 	and.w	r2, r3, #15
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d901      	bls.n	8004b82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e042      	b.n	8004c08 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	da0f      	bge.n	8004baa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	f003 020f 	and.w	r2, r3, #15
 8004b90:	4613      	mov	r3, r2
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	3338      	adds	r3, #56	; 0x38
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	705a      	strb	r2, [r3, #1]
 8004ba8:	e00f      	b.n	8004bca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	f003 020f 	and.w	r2, r3, #15
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <HAL_PCD_EP_ClrStall+0x86>
 8004be6:	2302      	movs	r3, #2
 8004be8:	e00e      	b.n	8004c08 <HAL_PCD_EP_ClrStall+0xa4>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68f9      	ldr	r1, [r7, #12]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f002 f9cc 	bl	8006f96 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08a      	sub	sp, #40	; 0x28
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	4613      	mov	r3, r2
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	3338      	adds	r3, #56	; 0x38
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	4413      	add	r3, r2
 8004c34:	3304      	adds	r3, #4
 8004c36:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	699a      	ldr	r2, [r3, #24]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d901      	bls.n	8004c48 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e06c      	b.n	8004d22 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	695a      	ldr	r2, [r3, #20]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	69fa      	ldr	r2, [r7, #28]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d902      	bls.n	8004c64 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	3303      	adds	r3, #3
 8004c68:	089b      	lsrs	r3, r3, #2
 8004c6a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c6c:	e02b      	b.n	8004cc6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	695a      	ldr	r2, [r3, #20]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	69fa      	ldr	r2, [r7, #28]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d902      	bls.n	8004c8a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	3303      	adds	r3, #3
 8004c8e:	089b      	lsrs	r3, r3, #2
 8004c90:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	68d9      	ldr	r1, [r3, #12]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	6978      	ldr	r0, [r7, #20]
 8004caa:	f002 f870 	bl	8006d8e <USB_WritePacket>

    ep->xfer_buff  += len;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	441a      	add	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	441a      	add	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d809      	bhi.n	8004cf0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	699a      	ldr	r2, [r3, #24]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d203      	bcs.n	8004cf0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1be      	bne.n	8004c6e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	695a      	ldr	r2, [r3, #20]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d811      	bhi.n	8004d20 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	2201      	movs	r2, #1
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	43db      	mvns	r3, r3
 8004d16:	6939      	ldr	r1, [r7, #16]
 8004d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3720      	adds	r7, #32
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	333c      	adds	r3, #60	; 0x3c
 8004d44:	3304      	adds	r3, #4
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	f040 80a0 	bne.w	8004ea4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d015      	beq.n	8004d9a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4a72      	ldr	r2, [pc, #456]	; (8004f3c <PCD_EP_OutXfrComplete_int+0x210>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	f240 80dd 	bls.w	8004f32 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 80d7 	beq.w	8004f32 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d90:	461a      	mov	r2, r3
 8004d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d96:	6093      	str	r3, [r2, #8]
 8004d98:	e0cb      	b.n	8004f32 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d009      	beq.n	8004db8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db0:	461a      	mov	r2, r3
 8004db2:	2320      	movs	r3, #32
 8004db4:	6093      	str	r3, [r2, #8]
 8004db6:	e0bc      	b.n	8004f32 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f040 80b7 	bne.w	8004f32 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4a5d      	ldr	r2, [pc, #372]	; (8004f3c <PCD_EP_OutXfrComplete_int+0x210>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d90f      	bls.n	8004dec <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de2:	461a      	mov	r2, r3
 8004de4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004de8:	6093      	str	r3, [r2, #8]
 8004dea:	e0a2      	b.n	8004f32 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	4613      	mov	r3, r2
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	1a9b      	subs	r3, r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004dfe:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	0159      	lsls	r1, r3, #5
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	440b      	add	r3, r1
 8004e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004e12:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	1a9b      	subs	r3, r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4403      	add	r3, r0
 8004e22:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004e26:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	1a9b      	subs	r3, r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e3a:	6819      	ldr	r1, [r3, #0]
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4403      	add	r3, r0
 8004e4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4419      	add	r1, r3
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	4613      	mov	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	1a9b      	subs	r3, r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4403      	add	r3, r0
 8004e60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e64:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d114      	bne.n	8004e96 <PCD_EP_OutXfrComplete_int+0x16a>
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	4613      	mov	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	1a9b      	subs	r3, r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	440b      	add	r3, r1
 8004e7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d108      	bne.n	8004e96 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e8e:	461a      	mov	r2, r3
 8004e90:	2101      	movs	r1, #1
 8004e92:	f002 fa13 	bl	80072bc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f004 f9a7 	bl	80091f0 <HAL_PCD_DataOutStageCallback>
 8004ea2:	e046      	b.n	8004f32 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4a26      	ldr	r2, [pc, #152]	; (8004f40 <PCD_EP_OutXfrComplete_int+0x214>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d124      	bne.n	8004ef6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ec8:	6093      	str	r3, [r2, #8]
 8004eca:	e032      	b.n	8004f32 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d008      	beq.n	8004ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	2320      	movs	r3, #32
 8004ee6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	4619      	mov	r1, r3
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f004 f97e 	bl	80091f0 <HAL_PCD_DataOutStageCallback>
 8004ef4:	e01d      	b.n	8004f32 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d114      	bne.n	8004f26 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	4613      	mov	r3, r2
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	1a9b      	subs	r3, r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d108      	bne.n	8004f26 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6818      	ldr	r0, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f1e:	461a      	mov	r2, r3
 8004f20:	2100      	movs	r1, #0
 8004f22:	f002 f9cb 	bl	80072bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f004 f95f 	bl	80091f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	4f54300a 	.word	0x4f54300a
 8004f40:	4f54310a 	.word	0x4f54310a

08004f44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	333c      	adds	r3, #60	; 0x3c
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4a15      	ldr	r2, [pc, #84]	; (8004fcc <PCD_EP_OutSetupPacket_int+0x88>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d90e      	bls.n	8004f98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d009      	beq.n	8004f98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f90:	461a      	mov	r2, r3
 8004f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f004 f917 	bl	80091cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4a0a      	ldr	r2, [pc, #40]	; (8004fcc <PCD_EP_OutSetupPacket_int+0x88>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d90c      	bls.n	8004fc0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d108      	bne.n	8004fc0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004fb8:	461a      	mov	r2, r3
 8004fba:	2101      	movs	r1, #1
 8004fbc:	f002 f97e 	bl	80072bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	4f54300a 	.word	0x4f54300a

08004fd0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	70fb      	strb	r3, [r7, #3]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d107      	bne.n	8004ffe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004fee:	883b      	ldrh	r3, [r7, #0]
 8004ff0:	0419      	lsls	r1, r3, #16
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	629a      	str	r2, [r3, #40]	; 0x28
 8004ffc:	e028      	b.n	8005050 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005004:	0c1b      	lsrs	r3, r3, #16
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	4413      	add	r3, r2
 800500a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800500c:	2300      	movs	r3, #0
 800500e:	73fb      	strb	r3, [r7, #15]
 8005010:	e00d      	b.n	800502e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	7bfb      	ldrb	r3, [r7, #15]
 8005018:	3340      	adds	r3, #64	; 0x40
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	0c1b      	lsrs	r3, r3, #16
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	4413      	add	r3, r2
 8005026:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	3301      	adds	r3, #1
 800502c:	73fb      	strb	r3, [r7, #15]
 800502e:	7bfa      	ldrb	r2, [r7, #15]
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	3b01      	subs	r3, #1
 8005034:	429a      	cmp	r2, r3
 8005036:	d3ec      	bcc.n	8005012 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005038:	883b      	ldrh	r3, [r7, #0]
 800503a:	0418      	lsls	r0, r3, #16
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	78fb      	ldrb	r3, [r7, #3]
 8005042:	3b01      	subs	r3, #1
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	4302      	orrs	r2, r0
 8005048:	3340      	adds	r3, #64	; 0x40
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	440b      	add	r3, r1
 800504e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	460b      	mov	r3, r1
 8005068:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	887a      	ldrh	r2, [r7, #2]
 8005070:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e264      	b.n	8005574 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d075      	beq.n	80051a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050b6:	4ba3      	ldr	r3, [pc, #652]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 030c 	and.w	r3, r3, #12
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d00c      	beq.n	80050dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050c2:	4ba0      	ldr	r3, [pc, #640]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	d112      	bne.n	80050f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ce:	4b9d      	ldr	r3, [pc, #628]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050da:	d10b      	bne.n	80050f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050dc:	4b99      	ldr	r3, [pc, #612]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d05b      	beq.n	80051a0 <HAL_RCC_OscConfig+0x108>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d157      	bne.n	80051a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e23f      	b.n	8005574 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050fc:	d106      	bne.n	800510c <HAL_RCC_OscConfig+0x74>
 80050fe:	4b91      	ldr	r3, [pc, #580]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a90      	ldr	r2, [pc, #576]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 8005104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	e01d      	b.n	8005148 <HAL_RCC_OscConfig+0xb0>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005114:	d10c      	bne.n	8005130 <HAL_RCC_OscConfig+0x98>
 8005116:	4b8b      	ldr	r3, [pc, #556]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a8a      	ldr	r2, [pc, #552]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 800511c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	4b88      	ldr	r3, [pc, #544]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a87      	ldr	r2, [pc, #540]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 8005128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	e00b      	b.n	8005148 <HAL_RCC_OscConfig+0xb0>
 8005130:	4b84      	ldr	r3, [pc, #528]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a83      	ldr	r2, [pc, #524]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 8005136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	4b81      	ldr	r3, [pc, #516]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a80      	ldr	r2, [pc, #512]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 8005142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d013      	beq.n	8005178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005150:	f7fc fda2 	bl	8001c98 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005158:	f7fc fd9e 	bl	8001c98 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b64      	cmp	r3, #100	; 0x64
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e204      	b.n	8005574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516a:	4b76      	ldr	r3, [pc, #472]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0f0      	beq.n	8005158 <HAL_RCC_OscConfig+0xc0>
 8005176:	e014      	b.n	80051a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005178:	f7fc fd8e 	bl	8001c98 <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005180:	f7fc fd8a 	bl	8001c98 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b64      	cmp	r3, #100	; 0x64
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e1f0      	b.n	8005574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005192:	4b6c      	ldr	r3, [pc, #432]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1f0      	bne.n	8005180 <HAL_RCC_OscConfig+0xe8>
 800519e:	e000      	b.n	80051a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d063      	beq.n	8005276 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051ae:	4b65      	ldr	r3, [pc, #404]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 030c 	and.w	r3, r3, #12
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00b      	beq.n	80051d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ba:	4b62      	ldr	r3, [pc, #392]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d11c      	bne.n	8005200 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051c6:	4b5f      	ldr	r3, [pc, #380]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d116      	bne.n	8005200 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051d2:	4b5c      	ldr	r3, [pc, #368]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d005      	beq.n	80051ea <HAL_RCC_OscConfig+0x152>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d001      	beq.n	80051ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e1c4      	b.n	8005574 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ea:	4b56      	ldr	r3, [pc, #344]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	4952      	ldr	r1, [pc, #328]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051fe:	e03a      	b.n	8005276 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d020      	beq.n	800524a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005208:	4b4f      	ldr	r3, [pc, #316]	; (8005348 <HAL_RCC_OscConfig+0x2b0>)
 800520a:	2201      	movs	r2, #1
 800520c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520e:	f7fc fd43 	bl	8001c98 <HAL_GetTick>
 8005212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005216:	f7fc fd3f 	bl	8001c98 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e1a5      	b.n	8005574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005228:	4b46      	ldr	r3, [pc, #280]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0f0      	beq.n	8005216 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005234:	4b43      	ldr	r3, [pc, #268]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	4940      	ldr	r1, [pc, #256]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 8005244:	4313      	orrs	r3, r2
 8005246:	600b      	str	r3, [r1, #0]
 8005248:	e015      	b.n	8005276 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800524a:	4b3f      	ldr	r3, [pc, #252]	; (8005348 <HAL_RCC_OscConfig+0x2b0>)
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005250:	f7fc fd22 	bl	8001c98 <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005258:	f7fc fd1e 	bl	8001c98 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e184      	b.n	8005574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800526a:	4b36      	ldr	r3, [pc, #216]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f0      	bne.n	8005258 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0308 	and.w	r3, r3, #8
 800527e:	2b00      	cmp	r3, #0
 8005280:	d030      	beq.n	80052e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d016      	beq.n	80052b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800528a:	4b30      	ldr	r3, [pc, #192]	; (800534c <HAL_RCC_OscConfig+0x2b4>)
 800528c:	2201      	movs	r2, #1
 800528e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005290:	f7fc fd02 	bl	8001c98 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005298:	f7fc fcfe 	bl	8001c98 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e164      	b.n	8005574 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052aa:	4b26      	ldr	r3, [pc, #152]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 80052ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0f0      	beq.n	8005298 <HAL_RCC_OscConfig+0x200>
 80052b6:	e015      	b.n	80052e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052b8:	4b24      	ldr	r3, [pc, #144]	; (800534c <HAL_RCC_OscConfig+0x2b4>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052be:	f7fc fceb 	bl	8001c98 <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052c6:	f7fc fce7 	bl	8001c98 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e14d      	b.n	8005574 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052d8:	4b1a      	ldr	r3, [pc, #104]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 80052da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1f0      	bne.n	80052c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 80a0 	beq.w	8005432 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052f2:	2300      	movs	r3, #0
 80052f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052f6:	4b13      	ldr	r3, [pc, #76]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10f      	bne.n	8005322 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005302:	2300      	movs	r3, #0
 8005304:	60bb      	str	r3, [r7, #8]
 8005306:	4b0f      	ldr	r3, [pc, #60]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	4a0e      	ldr	r2, [pc, #56]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 800530c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005310:	6413      	str	r3, [r2, #64]	; 0x40
 8005312:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <HAL_RCC_OscConfig+0x2ac>)
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800531a:	60bb      	str	r3, [r7, #8]
 800531c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800531e:	2301      	movs	r3, #1
 8005320:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005322:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <HAL_RCC_OscConfig+0x2b8>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532a:	2b00      	cmp	r3, #0
 800532c:	d121      	bne.n	8005372 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800532e:	4b08      	ldr	r3, [pc, #32]	; (8005350 <HAL_RCC_OscConfig+0x2b8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a07      	ldr	r2, [pc, #28]	; (8005350 <HAL_RCC_OscConfig+0x2b8>)
 8005334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800533a:	f7fc fcad 	bl	8001c98 <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005340:	e011      	b.n	8005366 <HAL_RCC_OscConfig+0x2ce>
 8005342:	bf00      	nop
 8005344:	40023800 	.word	0x40023800
 8005348:	42470000 	.word	0x42470000
 800534c:	42470e80 	.word	0x42470e80
 8005350:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005354:	f7fc fca0 	bl	8001c98 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e106      	b.n	8005574 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005366:	4b85      	ldr	r3, [pc, #532]	; (800557c <HAL_RCC_OscConfig+0x4e4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0f0      	beq.n	8005354 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d106      	bne.n	8005388 <HAL_RCC_OscConfig+0x2f0>
 800537a:	4b81      	ldr	r3, [pc, #516]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 800537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537e:	4a80      	ldr	r2, [pc, #512]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 8005380:	f043 0301 	orr.w	r3, r3, #1
 8005384:	6713      	str	r3, [r2, #112]	; 0x70
 8005386:	e01c      	b.n	80053c2 <HAL_RCC_OscConfig+0x32a>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	2b05      	cmp	r3, #5
 800538e:	d10c      	bne.n	80053aa <HAL_RCC_OscConfig+0x312>
 8005390:	4b7b      	ldr	r3, [pc, #492]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 8005392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005394:	4a7a      	ldr	r2, [pc, #488]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 8005396:	f043 0304 	orr.w	r3, r3, #4
 800539a:	6713      	str	r3, [r2, #112]	; 0x70
 800539c:	4b78      	ldr	r3, [pc, #480]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 800539e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a0:	4a77      	ldr	r2, [pc, #476]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	6713      	str	r3, [r2, #112]	; 0x70
 80053a8:	e00b      	b.n	80053c2 <HAL_RCC_OscConfig+0x32a>
 80053aa:	4b75      	ldr	r3, [pc, #468]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 80053ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ae:	4a74      	ldr	r2, [pc, #464]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 80053b0:	f023 0301 	bic.w	r3, r3, #1
 80053b4:	6713      	str	r3, [r2, #112]	; 0x70
 80053b6:	4b72      	ldr	r3, [pc, #456]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 80053b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ba:	4a71      	ldr	r2, [pc, #452]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 80053bc:	f023 0304 	bic.w	r3, r3, #4
 80053c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d015      	beq.n	80053f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ca:	f7fc fc65 	bl	8001c98 <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d0:	e00a      	b.n	80053e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053d2:	f7fc fc61 	bl	8001c98 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e0c5      	b.n	8005574 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e8:	4b65      	ldr	r3, [pc, #404]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 80053ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0ee      	beq.n	80053d2 <HAL_RCC_OscConfig+0x33a>
 80053f4:	e014      	b.n	8005420 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f6:	f7fc fc4f 	bl	8001c98 <HAL_GetTick>
 80053fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053fc:	e00a      	b.n	8005414 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053fe:	f7fc fc4b 	bl	8001c98 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	f241 3288 	movw	r2, #5000	; 0x1388
 800540c:	4293      	cmp	r3, r2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e0af      	b.n	8005574 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005414:	4b5a      	ldr	r3, [pc, #360]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 8005416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1ee      	bne.n	80053fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005420:	7dfb      	ldrb	r3, [r7, #23]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d105      	bne.n	8005432 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005426:	4b56      	ldr	r3, [pc, #344]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	4a55      	ldr	r2, [pc, #340]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 800542c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005430:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 809b 	beq.w	8005572 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800543c:	4b50      	ldr	r3, [pc, #320]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 030c 	and.w	r3, r3, #12
 8005444:	2b08      	cmp	r3, #8
 8005446:	d05c      	beq.n	8005502 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d141      	bne.n	80054d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005450:	4b4c      	ldr	r3, [pc, #304]	; (8005584 <HAL_RCC_OscConfig+0x4ec>)
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005456:	f7fc fc1f 	bl	8001c98 <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545c:	e008      	b.n	8005470 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800545e:	f7fc fc1b 	bl	8001c98 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e081      	b.n	8005574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005470:	4b43      	ldr	r3, [pc, #268]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1f0      	bne.n	800545e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69da      	ldr	r2, [r3, #28]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	431a      	orrs	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	019b      	lsls	r3, r3, #6
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	3b01      	subs	r3, #1
 8005496:	041b      	lsls	r3, r3, #16
 8005498:	431a      	orrs	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549e:	061b      	lsls	r3, r3, #24
 80054a0:	4937      	ldr	r1, [pc, #220]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054a6:	4b37      	ldr	r3, [pc, #220]	; (8005584 <HAL_RCC_OscConfig+0x4ec>)
 80054a8:	2201      	movs	r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ac:	f7fc fbf4 	bl	8001c98 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054b4:	f7fc fbf0 	bl	8001c98 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e056      	b.n	8005574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054c6:	4b2e      	ldr	r3, [pc, #184]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCC_OscConfig+0x41c>
 80054d2:	e04e      	b.n	8005572 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d4:	4b2b      	ldr	r3, [pc, #172]	; (8005584 <HAL_RCC_OscConfig+0x4ec>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054da:	f7fc fbdd 	bl	8001c98 <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054e2:	f7fc fbd9 	bl	8001c98 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e03f      	b.n	8005574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f4:	4b22      	ldr	r3, [pc, #136]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1f0      	bne.n	80054e2 <HAL_RCC_OscConfig+0x44a>
 8005500:	e037      	b.n	8005572 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e032      	b.n	8005574 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800550e:	4b1c      	ldr	r3, [pc, #112]	; (8005580 <HAL_RCC_OscConfig+0x4e8>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d028      	beq.n	800556e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005526:	429a      	cmp	r2, r3
 8005528:	d121      	bne.n	800556e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005534:	429a      	cmp	r2, r3
 8005536:	d11a      	bne.n	800556e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800553e:	4013      	ands	r3, r2
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005544:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005546:	4293      	cmp	r3, r2
 8005548:	d111      	bne.n	800556e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005554:	085b      	lsrs	r3, r3, #1
 8005556:	3b01      	subs	r3, #1
 8005558:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800555a:	429a      	cmp	r2, r3
 800555c:	d107      	bne.n	800556e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005568:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800556a:	429a      	cmp	r2, r3
 800556c:	d001      	beq.n	8005572 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40007000 	.word	0x40007000
 8005580:	40023800 	.word	0x40023800
 8005584:	42470060 	.word	0x42470060

08005588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e0cc      	b.n	8005736 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800559c:	4b68      	ldr	r3, [pc, #416]	; (8005740 <HAL_RCC_ClockConfig+0x1b8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d90c      	bls.n	80055c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055aa:	4b65      	ldr	r3, [pc, #404]	; (8005740 <HAL_RCC_ClockConfig+0x1b8>)
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b2:	4b63      	ldr	r3, [pc, #396]	; (8005740 <HAL_RCC_ClockConfig+0x1b8>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d001      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e0b8      	b.n	8005736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d020      	beq.n	8005612 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055dc:	4b59      	ldr	r3, [pc, #356]	; (8005744 <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	4a58      	ldr	r2, [pc, #352]	; (8005744 <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d005      	beq.n	8005600 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055f4:	4b53      	ldr	r3, [pc, #332]	; (8005744 <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	4a52      	ldr	r2, [pc, #328]	; (8005744 <HAL_RCC_ClockConfig+0x1bc>)
 80055fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005600:	4b50      	ldr	r3, [pc, #320]	; (8005744 <HAL_RCC_ClockConfig+0x1bc>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	494d      	ldr	r1, [pc, #308]	; (8005744 <HAL_RCC_ClockConfig+0x1bc>)
 800560e:	4313      	orrs	r3, r2
 8005610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d044      	beq.n	80056a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d107      	bne.n	8005636 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005626:	4b47      	ldr	r3, [pc, #284]	; (8005744 <HAL_RCC_ClockConfig+0x1bc>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d119      	bne.n	8005666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e07f      	b.n	8005736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b02      	cmp	r3, #2
 800563c:	d003      	beq.n	8005646 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005642:	2b03      	cmp	r3, #3
 8005644:	d107      	bne.n	8005656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005646:	4b3f      	ldr	r3, [pc, #252]	; (8005744 <HAL_RCC_ClockConfig+0x1bc>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d109      	bne.n	8005666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e06f      	b.n	8005736 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005656:	4b3b      	ldr	r3, [pc, #236]	; (8005744 <HAL_RCC_ClockConfig+0x1bc>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e067      	b.n	8005736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005666:	4b37      	ldr	r3, [pc, #220]	; (8005744 <HAL_RCC_ClockConfig+0x1bc>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f023 0203 	bic.w	r2, r3, #3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	4934      	ldr	r1, [pc, #208]	; (8005744 <HAL_RCC_ClockConfig+0x1bc>)
 8005674:	4313      	orrs	r3, r2
 8005676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005678:	f7fc fb0e 	bl	8001c98 <HAL_GetTick>
 800567c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800567e:	e00a      	b.n	8005696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005680:	f7fc fb0a 	bl	8001c98 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	f241 3288 	movw	r2, #5000	; 0x1388
 800568e:	4293      	cmp	r3, r2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e04f      	b.n	8005736 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005696:	4b2b      	ldr	r3, [pc, #172]	; (8005744 <HAL_RCC_ClockConfig+0x1bc>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 020c 	and.w	r2, r3, #12
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d1eb      	bne.n	8005680 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056a8:	4b25      	ldr	r3, [pc, #148]	; (8005740 <HAL_RCC_ClockConfig+0x1b8>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d20c      	bcs.n	80056d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056b6:	4b22      	ldr	r3, [pc, #136]	; (8005740 <HAL_RCC_ClockConfig+0x1b8>)
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056be:	4b20      	ldr	r3, [pc, #128]	; (8005740 <HAL_RCC_ClockConfig+0x1b8>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d001      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e032      	b.n	8005736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d008      	beq.n	80056ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056dc:	4b19      	ldr	r3, [pc, #100]	; (8005744 <HAL_RCC_ClockConfig+0x1bc>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	4916      	ldr	r1, [pc, #88]	; (8005744 <HAL_RCC_ClockConfig+0x1bc>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d009      	beq.n	800570e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056fa:	4b12      	ldr	r3, [pc, #72]	; (8005744 <HAL_RCC_ClockConfig+0x1bc>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	490e      	ldr	r1, [pc, #56]	; (8005744 <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	4313      	orrs	r3, r2
 800570c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800570e:	f000 f821 	bl	8005754 <HAL_RCC_GetSysClockFreq>
 8005712:	4602      	mov	r2, r0
 8005714:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <HAL_RCC_ClockConfig+0x1bc>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	091b      	lsrs	r3, r3, #4
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	490a      	ldr	r1, [pc, #40]	; (8005748 <HAL_RCC_ClockConfig+0x1c0>)
 8005720:	5ccb      	ldrb	r3, [r1, r3]
 8005722:	fa22 f303 	lsr.w	r3, r2, r3
 8005726:	4a09      	ldr	r2, [pc, #36]	; (800574c <HAL_RCC_ClockConfig+0x1c4>)
 8005728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800572a:	4b09      	ldr	r3, [pc, #36]	; (8005750 <HAL_RCC_ClockConfig+0x1c8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f7fc fa6e 	bl	8001c10 <HAL_InitTick>

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	40023c00 	.word	0x40023c00
 8005744:	40023800 	.word	0x40023800
 8005748:	0800e0d8 	.word	0x0800e0d8
 800574c:	20000000 	.word	0x20000000
 8005750:	20000004 	.word	0x20000004

08005754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005754:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	607b      	str	r3, [r7, #4]
 8005760:	2300      	movs	r3, #0
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	2300      	movs	r3, #0
 8005766:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800576c:	4b67      	ldr	r3, [pc, #412]	; (800590c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 030c 	and.w	r3, r3, #12
 8005774:	2b08      	cmp	r3, #8
 8005776:	d00d      	beq.n	8005794 <HAL_RCC_GetSysClockFreq+0x40>
 8005778:	2b08      	cmp	r3, #8
 800577a:	f200 80bd 	bhi.w	80058f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800577e:	2b00      	cmp	r3, #0
 8005780:	d002      	beq.n	8005788 <HAL_RCC_GetSysClockFreq+0x34>
 8005782:	2b04      	cmp	r3, #4
 8005784:	d003      	beq.n	800578e <HAL_RCC_GetSysClockFreq+0x3a>
 8005786:	e0b7      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005788:	4b61      	ldr	r3, [pc, #388]	; (8005910 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800578a:	60bb      	str	r3, [r7, #8]
       break;
 800578c:	e0b7      	b.n	80058fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800578e:	4b61      	ldr	r3, [pc, #388]	; (8005914 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005790:	60bb      	str	r3, [r7, #8]
      break;
 8005792:	e0b4      	b.n	80058fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005794:	4b5d      	ldr	r3, [pc, #372]	; (800590c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800579c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800579e:	4b5b      	ldr	r3, [pc, #364]	; (800590c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d04d      	beq.n	8005846 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057aa:	4b58      	ldr	r3, [pc, #352]	; (800590c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	099b      	lsrs	r3, r3, #6
 80057b0:	461a      	mov	r2, r3
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057ba:	f04f 0100 	mov.w	r1, #0
 80057be:	ea02 0800 	and.w	r8, r2, r0
 80057c2:	ea03 0901 	and.w	r9, r3, r1
 80057c6:	4640      	mov	r0, r8
 80057c8:	4649      	mov	r1, r9
 80057ca:	f04f 0200 	mov.w	r2, #0
 80057ce:	f04f 0300 	mov.w	r3, #0
 80057d2:	014b      	lsls	r3, r1, #5
 80057d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80057d8:	0142      	lsls	r2, r0, #5
 80057da:	4610      	mov	r0, r2
 80057dc:	4619      	mov	r1, r3
 80057de:	ebb0 0008 	subs.w	r0, r0, r8
 80057e2:	eb61 0109 	sbc.w	r1, r1, r9
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	018b      	lsls	r3, r1, #6
 80057f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057f4:	0182      	lsls	r2, r0, #6
 80057f6:	1a12      	subs	r2, r2, r0
 80057f8:	eb63 0301 	sbc.w	r3, r3, r1
 80057fc:	f04f 0000 	mov.w	r0, #0
 8005800:	f04f 0100 	mov.w	r1, #0
 8005804:	00d9      	lsls	r1, r3, #3
 8005806:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800580a:	00d0      	lsls	r0, r2, #3
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	eb12 0208 	adds.w	r2, r2, r8
 8005814:	eb43 0309 	adc.w	r3, r3, r9
 8005818:	f04f 0000 	mov.w	r0, #0
 800581c:	f04f 0100 	mov.w	r1, #0
 8005820:	0259      	lsls	r1, r3, #9
 8005822:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005826:	0250      	lsls	r0, r2, #9
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4610      	mov	r0, r2
 800582e:	4619      	mov	r1, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	461a      	mov	r2, r3
 8005834:	f04f 0300 	mov.w	r3, #0
 8005838:	f7fb fa26 	bl	8000c88 <__aeabi_uldivmod>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4613      	mov	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	e04a      	b.n	80058dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005846:	4b31      	ldr	r3, [pc, #196]	; (800590c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	099b      	lsrs	r3, r3, #6
 800584c:	461a      	mov	r2, r3
 800584e:	f04f 0300 	mov.w	r3, #0
 8005852:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005856:	f04f 0100 	mov.w	r1, #0
 800585a:	ea02 0400 	and.w	r4, r2, r0
 800585e:	ea03 0501 	and.w	r5, r3, r1
 8005862:	4620      	mov	r0, r4
 8005864:	4629      	mov	r1, r5
 8005866:	f04f 0200 	mov.w	r2, #0
 800586a:	f04f 0300 	mov.w	r3, #0
 800586e:	014b      	lsls	r3, r1, #5
 8005870:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005874:	0142      	lsls	r2, r0, #5
 8005876:	4610      	mov	r0, r2
 8005878:	4619      	mov	r1, r3
 800587a:	1b00      	subs	r0, r0, r4
 800587c:	eb61 0105 	sbc.w	r1, r1, r5
 8005880:	f04f 0200 	mov.w	r2, #0
 8005884:	f04f 0300 	mov.w	r3, #0
 8005888:	018b      	lsls	r3, r1, #6
 800588a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800588e:	0182      	lsls	r2, r0, #6
 8005890:	1a12      	subs	r2, r2, r0
 8005892:	eb63 0301 	sbc.w	r3, r3, r1
 8005896:	f04f 0000 	mov.w	r0, #0
 800589a:	f04f 0100 	mov.w	r1, #0
 800589e:	00d9      	lsls	r1, r3, #3
 80058a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058a4:	00d0      	lsls	r0, r2, #3
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	1912      	adds	r2, r2, r4
 80058ac:	eb45 0303 	adc.w	r3, r5, r3
 80058b0:	f04f 0000 	mov.w	r0, #0
 80058b4:	f04f 0100 	mov.w	r1, #0
 80058b8:	0299      	lsls	r1, r3, #10
 80058ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80058be:	0290      	lsls	r0, r2, #10
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4610      	mov	r0, r2
 80058c6:	4619      	mov	r1, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	f7fb f9da 	bl	8000c88 <__aeabi_uldivmod>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4613      	mov	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058dc:	4b0b      	ldr	r3, [pc, #44]	; (800590c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	0c1b      	lsrs	r3, r3, #16
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	3301      	adds	r3, #1
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f4:	60bb      	str	r3, [r7, #8]
      break;
 80058f6:	e002      	b.n	80058fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058f8:	4b05      	ldr	r3, [pc, #20]	; (8005910 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80058fa:	60bb      	str	r3, [r7, #8]
      break;
 80058fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058fe:	68bb      	ldr	r3, [r7, #8]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800590a:	bf00      	nop
 800590c:	40023800 	.word	0x40023800
 8005910:	00f42400 	.word	0x00f42400
 8005914:	007a1200 	.word	0x007a1200

08005918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800591c:	4b03      	ldr	r3, [pc, #12]	; (800592c <HAL_RCC_GetHCLKFreq+0x14>)
 800591e:	681b      	ldr	r3, [r3, #0]
}
 8005920:	4618      	mov	r0, r3
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20000000 	.word	0x20000000

08005930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005934:	f7ff fff0 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 8005938:	4602      	mov	r2, r0
 800593a:	4b05      	ldr	r3, [pc, #20]	; (8005950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	0a9b      	lsrs	r3, r3, #10
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	4903      	ldr	r1, [pc, #12]	; (8005954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005946:	5ccb      	ldrb	r3, [r1, r3]
 8005948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800594c:	4618      	mov	r0, r3
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40023800 	.word	0x40023800
 8005954:	0800e0e8 	.word	0x0800e0e8

08005958 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d105      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800597c:	2b00      	cmp	r3, #0
 800597e:	d035      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005980:	4b62      	ldr	r3, [pc, #392]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005986:	f7fc f987 	bl	8001c98 <HAL_GetTick>
 800598a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800598c:	e008      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800598e:	f7fc f983 	bl	8001c98 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e0b0      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059a0:	4b5b      	ldr	r3, [pc, #364]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1f0      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	019a      	lsls	r2, r3, #6
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	071b      	lsls	r3, r3, #28
 80059b8:	4955      	ldr	r1, [pc, #340]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059c0:	4b52      	ldr	r3, [pc, #328]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80059c2:	2201      	movs	r2, #1
 80059c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059c6:	f7fc f967 	bl	8001c98 <HAL_GetTick>
 80059ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059cc:	e008      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059ce:	f7fc f963 	bl	8001c98 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d901      	bls.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e090      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059e0:	4b4b      	ldr	r3, [pc, #300]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0f0      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 8083 	beq.w	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	4b44      	ldr	r3, [pc, #272]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	4a43      	ldr	r2, [pc, #268]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a08:	6413      	str	r3, [r2, #64]	; 0x40
 8005a0a:	4b41      	ldr	r3, [pc, #260]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a16:	4b3f      	ldr	r3, [pc, #252]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a3e      	ldr	r2, [pc, #248]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a22:	f7fc f939 	bl	8001c98 <HAL_GetTick>
 8005a26:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a28:	e008      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005a2a:	f7fc f935 	bl	8001c98 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e062      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a3c:	4b35      	ldr	r3, [pc, #212]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0f0      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a48:	4b31      	ldr	r3, [pc, #196]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a50:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d02f      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d028      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a66:	4b2a      	ldr	r3, [pc, #168]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a70:	4b29      	ldr	r3, [pc, #164]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a72:	2201      	movs	r2, #1
 8005a74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a76:	4b28      	ldr	r3, [pc, #160]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a7c:	4a24      	ldr	r2, [pc, #144]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a82:	4b23      	ldr	r3, [pc, #140]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d114      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a8e:	f7fc f903 	bl	8001c98 <HAL_GetTick>
 8005a92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a94:	e00a      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a96:	f7fc f8ff 	bl	8001c98 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e02a      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aac:	4b18      	ldr	r3, [pc, #96]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0ee      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ac4:	d10d      	bne.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005ac6:	4b12      	ldr	r3, [pc, #72]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ada:	490d      	ldr	r1, [pc, #52]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	608b      	str	r3, [r1, #8]
 8005ae0:	e005      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005ae2:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	4a0a      	ldr	r2, [pc, #40]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ae8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005aec:	6093      	str	r3, [r2, #8]
 8005aee:	4b08      	ldr	r3, [pc, #32]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005af0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005afa:	4905      	ldr	r1, [pc, #20]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	42470068 	.word	0x42470068
 8005b10:	40023800 	.word	0x40023800
 8005b14:	40007000 	.word	0x40007000
 8005b18:	42470e40 	.word	0x42470e40

08005b1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d13e      	bne.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005b3a:	4b23      	ldr	r3, [pc, #140]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d12f      	bne.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b50:	4b1e      	ldr	r3, [pc, #120]	; (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b52:	617b      	str	r3, [r7, #20]
          break;
 8005b54:	e02f      	b.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b56:	4b1c      	ldr	r3, [pc, #112]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b62:	d108      	bne.n	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b64:	4b18      	ldr	r3, [pc, #96]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b6c:	4a18      	ldr	r2, [pc, #96]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b72:	613b      	str	r3, [r7, #16]
 8005b74:	e007      	b.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b76:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b7e:	4a15      	ldr	r2, [pc, #84]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b84:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005b86:	4b10      	ldr	r3, [pc, #64]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b8c:	099b      	lsrs	r3, r3, #6
 8005b8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	fb02 f303 	mul.w	r3, r2, r3
 8005b98:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005b9a:	4b0b      	ldr	r3, [pc, #44]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ba0:	0f1b      	lsrs	r3, r3, #28
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bac:	617b      	str	r3, [r7, #20]
          break;
 8005bae:	e002      	b.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]
          break;
 8005bb4:	bf00      	nop
        }
      }
      break;
 8005bb6:	bf00      	nop
    }
  }
  return frequency;
 8005bb8:	697b      	ldr	r3, [r7, #20]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40023800 	.word	0x40023800
 8005bcc:	00bb8000 	.word	0x00bb8000
 8005bd0:	007a1200 	.word	0x007a1200
 8005bd4:	00f42400 	.word	0x00f42400

08005bd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e07b      	b.n	8005ce2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d108      	bne.n	8005c04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bfa:	d009      	beq.n	8005c10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	61da      	str	r2, [r3, #28]
 8005c02:	e005      	b.n	8005c10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fb fe46 	bl	80018bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	431a      	orrs	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c80:	431a      	orrs	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c94:	ea42 0103 	orr.w	r1, r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	0c1b      	lsrs	r3, r3, #16
 8005cae:	f003 0104 	and.w	r1, r3, #4
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	f003 0210 	and.w	r2, r3, #16
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69da      	ldr	r2, [r3, #28]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cea:	b084      	sub	sp, #16
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	f107 001c 	add.w	r0, r7, #28
 8005cf8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d122      	bne.n	8005d48 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d105      	bne.n	8005d3c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f001 fb1b 	bl	8007378 <USB_CoreReset>
 8005d42:	4603      	mov	r3, r0
 8005d44:	73fb      	strb	r3, [r7, #15]
 8005d46:	e01a      	b.n	8005d7e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f001 fb0f 	bl	8007378 <USB_CoreReset>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d106      	bne.n	8005d72 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	639a      	str	r2, [r3, #56]	; 0x38
 8005d70:	e005      	b.n	8005d7e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d10b      	bne.n	8005d9c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f043 0206 	orr.w	r2, r3, #6
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f043 0220 	orr.w	r2, r3, #32
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005da8:	b004      	add	sp, #16
 8005daa:	4770      	bx	lr

08005dac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	4613      	mov	r3, r2
 8005db8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005dba:	79fb      	ldrb	r3, [r7, #7]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d165      	bne.n	8005e8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4a41      	ldr	r2, [pc, #260]	; (8005ec8 <USB_SetTurnaroundTime+0x11c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d906      	bls.n	8005dd6 <USB_SetTurnaroundTime+0x2a>
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	4a40      	ldr	r2, [pc, #256]	; (8005ecc <USB_SetTurnaroundTime+0x120>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d202      	bcs.n	8005dd6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005dd0:	230f      	movs	r3, #15
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	e062      	b.n	8005e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	4a3c      	ldr	r2, [pc, #240]	; (8005ecc <USB_SetTurnaroundTime+0x120>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d306      	bcc.n	8005dec <USB_SetTurnaroundTime+0x40>
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	4a3b      	ldr	r2, [pc, #236]	; (8005ed0 <USB_SetTurnaroundTime+0x124>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d202      	bcs.n	8005dec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005de6:	230e      	movs	r3, #14
 8005de8:	617b      	str	r3, [r7, #20]
 8005dea:	e057      	b.n	8005e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	4a38      	ldr	r2, [pc, #224]	; (8005ed0 <USB_SetTurnaroundTime+0x124>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d306      	bcc.n	8005e02 <USB_SetTurnaroundTime+0x56>
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	4a37      	ldr	r2, [pc, #220]	; (8005ed4 <USB_SetTurnaroundTime+0x128>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d202      	bcs.n	8005e02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005dfc:	230d      	movs	r3, #13
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	e04c      	b.n	8005e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	4a33      	ldr	r2, [pc, #204]	; (8005ed4 <USB_SetTurnaroundTime+0x128>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d306      	bcc.n	8005e18 <USB_SetTurnaroundTime+0x6c>
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	4a32      	ldr	r2, [pc, #200]	; (8005ed8 <USB_SetTurnaroundTime+0x12c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d802      	bhi.n	8005e18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005e12:	230c      	movs	r3, #12
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	e041      	b.n	8005e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	4a2f      	ldr	r2, [pc, #188]	; (8005ed8 <USB_SetTurnaroundTime+0x12c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d906      	bls.n	8005e2e <USB_SetTurnaroundTime+0x82>
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4a2e      	ldr	r2, [pc, #184]	; (8005edc <USB_SetTurnaroundTime+0x130>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d802      	bhi.n	8005e2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005e28:	230b      	movs	r3, #11
 8005e2a:	617b      	str	r3, [r7, #20]
 8005e2c:	e036      	b.n	8005e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	4a2a      	ldr	r2, [pc, #168]	; (8005edc <USB_SetTurnaroundTime+0x130>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d906      	bls.n	8005e44 <USB_SetTurnaroundTime+0x98>
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	4a29      	ldr	r2, [pc, #164]	; (8005ee0 <USB_SetTurnaroundTime+0x134>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d802      	bhi.n	8005e44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005e3e:	230a      	movs	r3, #10
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	e02b      	b.n	8005e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4a26      	ldr	r2, [pc, #152]	; (8005ee0 <USB_SetTurnaroundTime+0x134>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d906      	bls.n	8005e5a <USB_SetTurnaroundTime+0xae>
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4a25      	ldr	r2, [pc, #148]	; (8005ee4 <USB_SetTurnaroundTime+0x138>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d202      	bcs.n	8005e5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005e54:	2309      	movs	r3, #9
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	e020      	b.n	8005e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	4a21      	ldr	r2, [pc, #132]	; (8005ee4 <USB_SetTurnaroundTime+0x138>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d306      	bcc.n	8005e70 <USB_SetTurnaroundTime+0xc4>
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	4a20      	ldr	r2, [pc, #128]	; (8005ee8 <USB_SetTurnaroundTime+0x13c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d802      	bhi.n	8005e70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	617b      	str	r3, [r7, #20]
 8005e6e:	e015      	b.n	8005e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4a1d      	ldr	r2, [pc, #116]	; (8005ee8 <USB_SetTurnaroundTime+0x13c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d906      	bls.n	8005e86 <USB_SetTurnaroundTime+0xda>
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4a1c      	ldr	r2, [pc, #112]	; (8005eec <USB_SetTurnaroundTime+0x140>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d202      	bcs.n	8005e86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005e80:	2307      	movs	r3, #7
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	e00a      	b.n	8005e9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005e86:	2306      	movs	r3, #6
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	e007      	b.n	8005e9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005e8c:	79fb      	ldrb	r3, [r7, #7]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d102      	bne.n	8005e98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005e92:	2309      	movs	r3, #9
 8005e94:	617b      	str	r3, [r7, #20]
 8005e96:	e001      	b.n	8005e9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005e98:	2309      	movs	r3, #9
 8005e9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	029b      	lsls	r3, r3, #10
 8005eb0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	00d8acbf 	.word	0x00d8acbf
 8005ecc:	00e4e1c0 	.word	0x00e4e1c0
 8005ed0:	00f42400 	.word	0x00f42400
 8005ed4:	01067380 	.word	0x01067380
 8005ed8:	011a499f 	.word	0x011a499f
 8005edc:	01312cff 	.word	0x01312cff
 8005ee0:	014ca43f 	.word	0x014ca43f
 8005ee4:	016e3600 	.word	0x016e3600
 8005ee8:	01a6ab1f 	.word	0x01a6ab1f
 8005eec:	01e84800 	.word	0x01e84800

08005ef0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f043 0201 	orr.w	r2, r3, #1
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f023 0201 	bic.w	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f50:	78fb      	ldrb	r3, [r7, #3]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d115      	bne.n	8005f82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f62:	2001      	movs	r0, #1
 8005f64:	f7fb fea4 	bl	8001cb0 <HAL_Delay>
      ms++;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f001 f972 	bl	8007258 <USB_GetMode>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d01e      	beq.n	8005fb8 <USB_SetCurrentMode+0x84>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b31      	cmp	r3, #49	; 0x31
 8005f7e:	d9f0      	bls.n	8005f62 <USB_SetCurrentMode+0x2e>
 8005f80:	e01a      	b.n	8005fb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f82:	78fb      	ldrb	r3, [r7, #3]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d115      	bne.n	8005fb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f94:	2001      	movs	r0, #1
 8005f96:	f7fb fe8b 	bl	8001cb0 <HAL_Delay>
      ms++;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f001 f959 	bl	8007258 <USB_GetMode>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <USB_SetCurrentMode+0x84>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2b31      	cmp	r3, #49	; 0x31
 8005fb0:	d9f0      	bls.n	8005f94 <USB_SetCurrentMode+0x60>
 8005fb2:	e001      	b.n	8005fb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e005      	b.n	8005fc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b32      	cmp	r3, #50	; 0x32
 8005fbc:	d101      	bne.n	8005fc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e000      	b.n	8005fc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fcc:	b084      	sub	sp, #16
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b086      	sub	sp, #24
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	e009      	b.n	8006000 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	3340      	adds	r3, #64	; 0x40
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	613b      	str	r3, [r7, #16]
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	2b0e      	cmp	r3, #14
 8006004:	d9f2      	bls.n	8005fec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d11c      	bne.n	8006046 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800601a:	f043 0302 	orr.w	r3, r3, #2
 800601e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006030:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	639a      	str	r2, [r3, #56]	; 0x38
 8006044:	e00b      	b.n	800605e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006056:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006064:	461a      	mov	r2, r3
 8006066:	2300      	movs	r3, #0
 8006068:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006070:	4619      	mov	r1, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006078:	461a      	mov	r2, r3
 800607a:	680b      	ldr	r3, [r1, #0]
 800607c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800607e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006080:	2b01      	cmp	r3, #1
 8006082:	d10c      	bne.n	800609e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d104      	bne.n	8006094 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800608a:	2100      	movs	r1, #0
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f945 	bl	800631c <USB_SetDevSpeed>
 8006092:	e008      	b.n	80060a6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006094:	2101      	movs	r1, #1
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f940 	bl	800631c <USB_SetDevSpeed>
 800609c:	e003      	b.n	80060a6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800609e:	2103      	movs	r1, #3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f93b 	bl	800631c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060a6:	2110      	movs	r1, #16
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f8f3 	bl	8006294 <USB_FlushTxFifo>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f90f 	bl	80062dc <USB_FlushRxFifo>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ce:	461a      	mov	r2, r3
 80060d0:	2300      	movs	r3, #0
 80060d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060da:	461a      	mov	r2, r3
 80060dc:	2300      	movs	r3, #0
 80060de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e6:	461a      	mov	r2, r3
 80060e8:	2300      	movs	r3, #0
 80060ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060ec:	2300      	movs	r3, #0
 80060ee:	613b      	str	r3, [r7, #16]
 80060f0:	e043      	b.n	800617a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006108:	d118      	bne.n	800613c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10a      	bne.n	8006126 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611c:	461a      	mov	r2, r3
 800611e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	e013      	b.n	800614e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006132:	461a      	mov	r2, r3
 8006134:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	e008      	b.n	800614e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006148:	461a      	mov	r2, r3
 800614a:	2300      	movs	r3, #0
 800614c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615a:	461a      	mov	r2, r3
 800615c:	2300      	movs	r3, #0
 800615e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616c:	461a      	mov	r2, r3
 800616e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006172:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	3301      	adds	r3, #1
 8006178:	613b      	str	r3, [r7, #16]
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	429a      	cmp	r2, r3
 8006180:	d3b7      	bcc.n	80060f2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006182:	2300      	movs	r3, #0
 8006184:	613b      	str	r3, [r7, #16]
 8006186:	e043      	b.n	8006210 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800619a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800619e:	d118      	bne.n	80061d2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10a      	bne.n	80061bc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b2:	461a      	mov	r2, r3
 80061b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	e013      	b.n	80061e4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c8:	461a      	mov	r2, r3
 80061ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	e008      	b.n	80061e4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061de:	461a      	mov	r2, r3
 80061e0:	2300      	movs	r3, #0
 80061e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f0:	461a      	mov	r2, r3
 80061f2:	2300      	movs	r3, #0
 80061f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006202:	461a      	mov	r2, r3
 8006204:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006208:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	3301      	adds	r3, #1
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	429a      	cmp	r2, r3
 8006216:	d3b7      	bcc.n	8006188 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800622a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006238:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	2b00      	cmp	r3, #0
 800623e:	d105      	bne.n	800624c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	f043 0210 	orr.w	r2, r3, #16
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699a      	ldr	r2, [r3, #24]
 8006250:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <USB_DevInit+0x2c4>)
 8006252:	4313      	orrs	r3, r2
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800625a:	2b00      	cmp	r3, #0
 800625c:	d005      	beq.n	800626a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	f043 0208 	orr.w	r2, r3, #8
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800626a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800626c:	2b01      	cmp	r3, #1
 800626e:	d107      	bne.n	8006280 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006278:	f043 0304 	orr.w	r3, r3, #4
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006280:	7dfb      	ldrb	r3, [r7, #23]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800628c:	b004      	add	sp, #16
 800628e:	4770      	bx	lr
 8006290:	803c3800 	.word	0x803c3800

08006294 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	019b      	lsls	r3, r3, #6
 80062a6:	f043 0220 	orr.w	r2, r3, #32
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3301      	adds	r3, #1
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	4a08      	ldr	r2, [pc, #32]	; (80062d8 <USB_FlushTxFifo+0x44>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d901      	bls.n	80062be <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e006      	b.n	80062cc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	f003 0320 	and.w	r3, r3, #32
 80062c6:	2b20      	cmp	r3, #32
 80062c8:	d0f1      	beq.n	80062ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	00030d40 	.word	0x00030d40

080062dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2210      	movs	r2, #16
 80062ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3301      	adds	r3, #1
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	4a08      	ldr	r2, [pc, #32]	; (8006318 <USB_FlushRxFifo+0x3c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d901      	bls.n	80062fe <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e006      	b.n	800630c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0310 	and.w	r3, r3, #16
 8006306:	2b10      	cmp	r3, #16
 8006308:	d0f1      	beq.n	80062ee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	00030d40 	.word	0x00030d40

0800631c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	78fb      	ldrb	r3, [r7, #3]
 8006336:	68f9      	ldr	r1, [r7, #12]
 8006338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800633c:	4313      	orrs	r3, r2
 800633e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800634e:	b480      	push	{r7}
 8006350:	b087      	sub	sp, #28
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 0306 	and.w	r3, r3, #6
 8006366:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d102      	bne.n	8006374 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800636e:	2300      	movs	r3, #0
 8006370:	75fb      	strb	r3, [r7, #23]
 8006372:	e00a      	b.n	800638a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b02      	cmp	r3, #2
 8006378:	d002      	beq.n	8006380 <USB_GetDevSpeed+0x32>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b06      	cmp	r3, #6
 800637e:	d102      	bne.n	8006386 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006380:	2302      	movs	r3, #2
 8006382:	75fb      	strb	r3, [r7, #23]
 8006384:	e001      	b.n	800638a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006386:	230f      	movs	r3, #15
 8006388:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800638a:	7dfb      	ldrb	r3, [r7, #23]
}
 800638c:	4618      	mov	r0, r3
 800638e:	371c      	adds	r7, #28
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d13a      	bne.n	800642a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ba:	69da      	ldr	r2, [r3, #28]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	f003 030f 	and.w	r3, r3, #15
 80063c4:	2101      	movs	r1, #1
 80063c6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	68f9      	ldr	r1, [r7, #12]
 80063ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063d2:	4313      	orrs	r3, r2
 80063d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d155      	bne.n	8006498 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	78db      	ldrb	r3, [r3, #3]
 8006406:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006408:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	059b      	lsls	r3, r3, #22
 800640e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006410:	4313      	orrs	r3, r2
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	0151      	lsls	r1, r2, #5
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	440a      	add	r2, r1
 800641a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800641e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	e036      	b.n	8006498 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006430:	69da      	ldr	r2, [r3, #28]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	2101      	movs	r1, #1
 800643c:	fa01 f303 	lsl.w	r3, r1, r3
 8006440:	041b      	lsls	r3, r3, #16
 8006442:	68f9      	ldr	r1, [r7, #12]
 8006444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006448:	4313      	orrs	r3, r2
 800644a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d11a      	bne.n	8006498 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	78db      	ldrb	r3, [r3, #3]
 800647c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800647e:	430b      	orrs	r3, r1
 8006480:	4313      	orrs	r3, r2
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	0151      	lsls	r1, r2, #5
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	440a      	add	r2, r1
 800648a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800648e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006496:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
	...

080064a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	785b      	ldrb	r3, [r3, #1]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d161      	bne.n	8006588 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064da:	d11f      	bne.n	800651c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	0151      	lsls	r1, r2, #5
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	440a      	add	r2, r1
 80064f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	440a      	add	r2, r1
 8006512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006516:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800651a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	2101      	movs	r1, #1
 800652e:	fa01 f303 	lsl.w	r3, r1, r3
 8006532:	b29b      	uxth	r3, r3
 8006534:	43db      	mvns	r3, r3
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800653c:	4013      	ands	r3, r2
 800653e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006546:	69da      	ldr	r2, [r3, #28]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	f003 030f 	and.w	r3, r3, #15
 8006550:	2101      	movs	r1, #1
 8006552:	fa01 f303 	lsl.w	r3, r1, r3
 8006556:	b29b      	uxth	r3, r3
 8006558:	43db      	mvns	r3, r3
 800655a:	68f9      	ldr	r1, [r7, #12]
 800655c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006560:	4013      	ands	r3, r2
 8006562:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	0159      	lsls	r1, r3, #5
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	440b      	add	r3, r1
 800657a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657e:	4619      	mov	r1, r3
 8006580:	4b35      	ldr	r3, [pc, #212]	; (8006658 <USB_DeactivateEndpoint+0x1b0>)
 8006582:	4013      	ands	r3, r2
 8006584:	600b      	str	r3, [r1, #0]
 8006586:	e060      	b.n	800664a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800659a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800659e:	d11f      	bne.n	80065e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	0151      	lsls	r1, r2, #5
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	440a      	add	r2, r1
 80065b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	0151      	lsls	r1, r2, #5
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	440a      	add	r2, r1
 80065d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	f003 030f 	and.w	r3, r3, #15
 80065f0:	2101      	movs	r1, #1
 80065f2:	fa01 f303 	lsl.w	r3, r1, r3
 80065f6:	041b      	lsls	r3, r3, #16
 80065f8:	43db      	mvns	r3, r3
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006600:	4013      	ands	r3, r2
 8006602:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660a:	69da      	ldr	r2, [r3, #28]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	f003 030f 	and.w	r3, r3, #15
 8006614:	2101      	movs	r1, #1
 8006616:	fa01 f303 	lsl.w	r3, r1, r3
 800661a:	041b      	lsls	r3, r3, #16
 800661c:	43db      	mvns	r3, r3
 800661e:	68f9      	ldr	r1, [r7, #12]
 8006620:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006624:	4013      	ands	r3, r2
 8006626:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	0159      	lsls	r1, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	440b      	add	r3, r1
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	4619      	mov	r1, r3
 8006644:	4b05      	ldr	r3, [pc, #20]	; (800665c <USB_DeactivateEndpoint+0x1b4>)
 8006646:	4013      	ands	r3, r2
 8006648:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	ec337800 	.word	0xec337800
 800665c:	eff37800 	.word	0xeff37800

08006660 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b08a      	sub	sp, #40	; 0x28
 8006664:	af02      	add	r7, sp, #8
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	4613      	mov	r3, r2
 800666c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	785b      	ldrb	r3, [r3, #1]
 800667c:	2b01      	cmp	r3, #1
 800667e:	f040 815c 	bne.w	800693a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d132      	bne.n	80066f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	0151      	lsls	r1, r2, #5
 800669c:	69fa      	ldr	r2, [r7, #28]
 800669e:	440a      	add	r2, r1
 80066a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	015a      	lsls	r2, r3, #5
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	0151      	lsls	r1, r2, #5
 80066c0:	69fa      	ldr	r2, [r7, #28]
 80066c2:	440a      	add	r2, r1
 80066c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	0151      	lsls	r1, r2, #5
 80066e0:	69fa      	ldr	r2, [r7, #28]
 80066e2:	440a      	add	r2, r1
 80066e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e8:	0cdb      	lsrs	r3, r3, #19
 80066ea:	04db      	lsls	r3, r3, #19
 80066ec:	6113      	str	r3, [r2, #16]
 80066ee:	e074      	b.n	80067da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	0151      	lsls	r1, r2, #5
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	440a      	add	r2, r1
 8006706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800670a:	0cdb      	lsrs	r3, r3, #19
 800670c:	04db      	lsls	r3, r3, #19
 800670e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	0151      	lsls	r1, r2, #5
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	440a      	add	r2, r1
 8006726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800672e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006732:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006740:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	6959      	ldr	r1, [r3, #20]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	440b      	add	r3, r1
 800674c:	1e59      	subs	r1, r3, #1
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	fbb1 f3f3 	udiv	r3, r1, r3
 8006756:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006758:	4b9d      	ldr	r3, [pc, #628]	; (80069d0 <USB_EPStartXfer+0x370>)
 800675a:	400b      	ands	r3, r1
 800675c:	69b9      	ldr	r1, [r7, #24]
 800675e:	0148      	lsls	r0, r1, #5
 8006760:	69f9      	ldr	r1, [r7, #28]
 8006762:	4401      	add	r1, r0
 8006764:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006768:	4313      	orrs	r3, r2
 800676a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006778:	691a      	ldr	r2, [r3, #16]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006782:	69b9      	ldr	r1, [r7, #24]
 8006784:	0148      	lsls	r0, r1, #5
 8006786:	69f9      	ldr	r1, [r7, #28]
 8006788:	4401      	add	r1, r0
 800678a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800678e:	4313      	orrs	r3, r2
 8006790:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	78db      	ldrb	r3, [r3, #3]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d11f      	bne.n	80067da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	0151      	lsls	r1, r2, #5
 80067ac:	69fa      	ldr	r2, [r7, #28]
 80067ae:	440a      	add	r2, r1
 80067b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80067b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	0151      	lsls	r1, r2, #5
 80067cc:	69fa      	ldr	r2, [r7, #28]
 80067ce:	440a      	add	r2, r1
 80067d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80067da:	79fb      	ldrb	r3, [r7, #7]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d14b      	bne.n	8006878 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d009      	beq.n	80067fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f4:	461a      	mov	r2, r3
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	78db      	ldrb	r3, [r3, #3]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d128      	bne.n	8006856 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006810:	2b00      	cmp	r3, #0
 8006812:	d110      	bne.n	8006836 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69ba      	ldr	r2, [r7, #24]
 8006824:	0151      	lsls	r1, r2, #5
 8006826:	69fa      	ldr	r2, [r7, #28]
 8006828:	440a      	add	r2, r1
 800682a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800682e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006832:	6013      	str	r3, [r2, #0]
 8006834:	e00f      	b.n	8006856 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	0151      	lsls	r1, r2, #5
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	440a      	add	r2, r1
 800684c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006854:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	0151      	lsls	r1, r2, #5
 8006868:	69fa      	ldr	r2, [r7, #28]
 800686a:	440a      	add	r2, r1
 800686c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006870:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	e12f      	b.n	8006ad8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	69fa      	ldr	r2, [r7, #28]
 800688c:	440a      	add	r2, r1
 800688e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006892:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006896:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	78db      	ldrb	r3, [r3, #3]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d015      	beq.n	80068cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 8117 	beq.w	8006ad8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	2101      	movs	r1, #1
 80068bc:	fa01 f303 	lsl.w	r3, r1, r3
 80068c0:	69f9      	ldr	r1, [r7, #28]
 80068c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068c6:	4313      	orrs	r3, r2
 80068c8:	634b      	str	r3, [r1, #52]	; 0x34
 80068ca:	e105      	b.n	8006ad8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d110      	bne.n	80068fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	0151      	lsls	r1, r2, #5
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	440a      	add	r2, r1
 80068f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068fa:	6013      	str	r3, [r2, #0]
 80068fc:	e00f      	b.n	800691e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	0151      	lsls	r1, r2, #5
 8006910:	69fa      	ldr	r2, [r7, #28]
 8006912:	440a      	add	r2, r1
 8006914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800691c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	68d9      	ldr	r1, [r3, #12]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	781a      	ldrb	r2, [r3, #0]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	b298      	uxth	r0, r3
 800692c:	79fb      	ldrb	r3, [r7, #7]
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	4603      	mov	r3, r0
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 fa2b 	bl	8006d8e <USB_WritePacket>
 8006938:	e0ce      	b.n	8006ad8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	69ba      	ldr	r2, [r7, #24]
 800694a:	0151      	lsls	r1, r2, #5
 800694c:	69fa      	ldr	r2, [r7, #28]
 800694e:	440a      	add	r2, r1
 8006950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006954:	0cdb      	lsrs	r3, r3, #19
 8006956:	04db      	lsls	r3, r3, #19
 8006958:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	440a      	add	r2, r1
 8006970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006974:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006978:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800697c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d126      	bne.n	80069d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800699c:	69b9      	ldr	r1, [r7, #24]
 800699e:	0148      	lsls	r0, r1, #5
 80069a0:	69f9      	ldr	r1, [r7, #28]
 80069a2:	4401      	add	r1, r0
 80069a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069a8:	4313      	orrs	r3, r2
 80069aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	0151      	lsls	r1, r2, #5
 80069be:	69fa      	ldr	r2, [r7, #28]
 80069c0:	440a      	add	r2, r1
 80069c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069ca:	6113      	str	r3, [r2, #16]
 80069cc:	e036      	b.n	8006a3c <USB_EPStartXfer+0x3dc>
 80069ce:	bf00      	nop
 80069d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	695a      	ldr	r2, [r3, #20]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	4413      	add	r3, r2
 80069de:	1e5a      	subs	r2, r3, #1
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f6:	691a      	ldr	r2, [r3, #16]
 80069f8:	8afb      	ldrh	r3, [r7, #22]
 80069fa:	04d9      	lsls	r1, r3, #19
 80069fc:	4b39      	ldr	r3, [pc, #228]	; (8006ae4 <USB_EPStartXfer+0x484>)
 80069fe:	400b      	ands	r3, r1
 8006a00:	69b9      	ldr	r1, [r7, #24]
 8006a02:	0148      	lsls	r0, r1, #5
 8006a04:	69f9      	ldr	r1, [r7, #28]
 8006a06:	4401      	add	r1, r0
 8006a08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1c:	691a      	ldr	r2, [r3, #16]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	8af9      	ldrh	r1, [r7, #22]
 8006a24:	fb01 f303 	mul.w	r3, r1, r3
 8006a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a2c:	69b9      	ldr	r1, [r7, #24]
 8006a2e:	0148      	lsls	r0, r1, #5
 8006a30:	69f9      	ldr	r1, [r7, #28]
 8006a32:	4401      	add	r1, r0
 8006a34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a3c:	79fb      	ldrb	r3, [r7, #7]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d10d      	bne.n	8006a5e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d009      	beq.n	8006a5e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	68d9      	ldr	r1, [r3, #12]
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5a:	460a      	mov	r2, r1
 8006a5c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	78db      	ldrb	r3, [r3, #3]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d128      	bne.n	8006ab8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d110      	bne.n	8006a98 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	0151      	lsls	r1, r2, #5
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	e00f      	b.n	8006ab8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	0151      	lsls	r1, r2, #5
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	440a      	add	r2, r1
 8006aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ab6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	0151      	lsls	r1, r2, #5
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	440a      	add	r2, r1
 8006ace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ad6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3720      	adds	r7, #32
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	1ff80000 	.word	0x1ff80000

08006ae8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	4613      	mov	r3, r2
 8006af4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	785b      	ldrb	r3, [r3, #1]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	f040 80cd 	bne.w	8006ca4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d132      	bne.n	8006b78 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	0151      	lsls	r1, r2, #5
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	440a      	add	r2, r1
 8006b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	0151      	lsls	r1, r2, #5
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	440a      	add	r2, r1
 8006b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	0151      	lsls	r1, r2, #5
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	440a      	add	r2, r1
 8006b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b70:	0cdb      	lsrs	r3, r3, #19
 8006b72:	04db      	lsls	r3, r3, #19
 8006b74:	6113      	str	r3, [r2, #16]
 8006b76:	e04e      	b.n	8006c16 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	0151      	lsls	r1, r2, #5
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	440a      	add	r2, r1
 8006b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b92:	0cdb      	lsrs	r3, r3, #19
 8006b94:	04db      	lsls	r3, r3, #19
 8006b96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	0151      	lsls	r1, r2, #5
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	440a      	add	r2, r1
 8006bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bb2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bb6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	695a      	ldr	r2, [r3, #20]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d903      	bls.n	8006bd0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	0151      	lsls	r1, r2, #5
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	440a      	add	r2, r1
 8006be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfc:	691a      	ldr	r2, [r3, #16]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c06:	6939      	ldr	r1, [r7, #16]
 8006c08:	0148      	lsls	r0, r1, #5
 8006c0a:	6979      	ldr	r1, [r7, #20]
 8006c0c:	4401      	add	r1, r0
 8006c0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c12:	4313      	orrs	r3, r2
 8006c14:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c16:	79fb      	ldrb	r3, [r7, #7]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d11e      	bne.n	8006c5a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d009      	beq.n	8006c38 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c30:	461a      	mov	r2, r3
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	0151      	lsls	r1, r2, #5
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	440a      	add	r2, r1
 8006c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	e092      	b.n	8006d80 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	0151      	lsls	r1, r2, #5
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	440a      	add	r2, r1
 8006c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c78:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d07e      	beq.n	8006d80 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	f003 030f 	and.w	r3, r3, #15
 8006c92:	2101      	movs	r1, #1
 8006c94:	fa01 f303 	lsl.w	r3, r1, r3
 8006c98:	6979      	ldr	r1, [r7, #20]
 8006c9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	634b      	str	r3, [r1, #52]	; 0x34
 8006ca2:	e06d      	b.n	8006d80 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	0151      	lsls	r1, r2, #5
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	440a      	add	r2, r1
 8006cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cbe:	0cdb      	lsrs	r3, r3, #19
 8006cc0:	04db      	lsls	r3, r3, #19
 8006cc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	0151      	lsls	r1, r2, #5
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	440a      	add	r2, r1
 8006cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ce2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ce6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d003      	beq.n	8006cf8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	0151      	lsls	r1, r2, #5
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	440a      	add	r2, r1
 8006d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d24:	691a      	ldr	r2, [r3, #16]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d2e:	6939      	ldr	r1, [r7, #16]
 8006d30:	0148      	lsls	r0, r1, #5
 8006d32:	6979      	ldr	r1, [r7, #20]
 8006d34:	4401      	add	r1, r0
 8006d36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006d3e:	79fb      	ldrb	r3, [r7, #7]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d10d      	bne.n	8006d60 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d009      	beq.n	8006d60 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	68d9      	ldr	r1, [r3, #12]
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d5c:	460a      	mov	r2, r1
 8006d5e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	0151      	lsls	r1, r2, #5
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	440a      	add	r2, r1
 8006d76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	371c      	adds	r7, #28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b089      	sub	sp, #36	; 0x24
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	60b9      	str	r1, [r7, #8]
 8006d98:	4611      	mov	r1, r2
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	71fb      	strb	r3, [r7, #7]
 8006da0:	4613      	mov	r3, r2
 8006da2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006dac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d123      	bne.n	8006dfc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006db4:	88bb      	ldrh	r3, [r7, #4]
 8006db6:	3303      	adds	r3, #3
 8006db8:	089b      	lsrs	r3, r3, #2
 8006dba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	e018      	b.n	8006df4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006dc2:	79fb      	ldrb	r3, [r7, #7]
 8006dc4:	031a      	lsls	r2, r3, #12
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dce:	461a      	mov	r2, r3
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	3301      	adds	r3, #1
 8006de0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	3301      	adds	r3, #1
 8006de6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	3301      	adds	r3, #1
 8006dec:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	3301      	adds	r3, #1
 8006df2:	61bb      	str	r3, [r7, #24]
 8006df4:	69ba      	ldr	r2, [r7, #24]
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d3e2      	bcc.n	8006dc2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3724      	adds	r7, #36	; 0x24
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b08b      	sub	sp, #44	; 0x2c
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	60b9      	str	r1, [r7, #8]
 8006e14:	4613      	mov	r3, r2
 8006e16:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e20:	88fb      	ldrh	r3, [r7, #6]
 8006e22:	089b      	lsrs	r3, r3, #2
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e28:	88fb      	ldrh	r3, [r7, #6]
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e30:	2300      	movs	r3, #0
 8006e32:	623b      	str	r3, [r7, #32]
 8006e34:	e014      	b.n	8006e60 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	3301      	adds	r3, #1
 8006e46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e50:	3301      	adds	r3, #1
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	3301      	adds	r3, #1
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	623b      	str	r3, [r7, #32]
 8006e60:	6a3a      	ldr	r2, [r7, #32]
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d3e6      	bcc.n	8006e36 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e68:	8bfb      	ldrh	r3, [r7, #30]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d01e      	beq.n	8006eac <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e78:	461a      	mov	r2, r3
 8006e7a:	f107 0310 	add.w	r3, r7, #16
 8006e7e:	6812      	ldr	r2, [r2, #0]
 8006e80:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	00db      	lsls	r3, r3, #3
 8006e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	701a      	strb	r2, [r3, #0]
      i++;
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	3301      	adds	r3, #1
 8006e98:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006ea0:	8bfb      	ldrh	r3, [r7, #30]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ea6:	8bfb      	ldrh	r3, [r7, #30]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1ea      	bne.n	8006e82 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	372c      	adds	r7, #44	; 0x2c
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	785b      	ldrb	r3, [r3, #1]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d12c      	bne.n	8006f30 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	db12      	blt.n	8006f0e <USB_EPSetStall+0x54>
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00f      	beq.n	8006f0e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	0151      	lsls	r1, r2, #5
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	440a      	add	r2, r1
 8006f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f0c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	0151      	lsls	r1, r2, #5
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	440a      	add	r2, r1
 8006f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	e02b      	b.n	8006f88 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	015a      	lsls	r2, r3, #5
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	db12      	blt.n	8006f68 <USB_EPSetStall+0xae>
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00f      	beq.n	8006f68 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	0151      	lsls	r1, r2, #5
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	440a      	add	r2, r1
 8006f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f66:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	0151      	lsls	r1, r2, #5
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	440a      	add	r2, r1
 8006f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b085      	sub	sp, #20
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	785b      	ldrb	r3, [r3, #1]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d128      	bne.n	8007004 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	0151      	lsls	r1, r2, #5
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	440a      	add	r2, r1
 8006fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fd0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	78db      	ldrb	r3, [r3, #3]
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	d003      	beq.n	8006fe2 <USB_EPClearStall+0x4c>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	78db      	ldrb	r3, [r3, #3]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d138      	bne.n	8007054 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	0151      	lsls	r1, r2, #5
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	440a      	add	r2, r1
 8006ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	e027      	b.n	8007054 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	0151      	lsls	r1, r2, #5
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	440a      	add	r2, r1
 800701a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800701e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007022:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	78db      	ldrb	r3, [r3, #3]
 8007028:	2b03      	cmp	r3, #3
 800702a:	d003      	beq.n	8007034 <USB_EPClearStall+0x9e>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	78db      	ldrb	r3, [r3, #3]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d10f      	bne.n	8007054 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	0151      	lsls	r1, r2, #5
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	440a      	add	r2, r1
 800704a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800704e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007052:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007062:	b480      	push	{r7}
 8007064:	b085      	sub	sp, #20
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	460b      	mov	r3, r1
 800706c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007080:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007084:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	78fb      	ldrb	r3, [r7, #3]
 8007090:	011b      	lsls	r3, r3, #4
 8007092:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007096:	68f9      	ldr	r1, [r7, #12]
 8007098:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800709c:	4313      	orrs	r3, r2
 800709e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3714      	adds	r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b085      	sub	sp, #20
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070c8:	f023 0303 	bic.w	r3, r3, #3
 80070cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070dc:	f023 0302 	bic.w	r3, r3, #2
 80070e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800710a:	f023 0303 	bic.w	r3, r3, #3
 800710e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800711e:	f043 0302 	orr.w	r3, r3, #2
 8007122:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007132:	b480      	push	{r7}
 8007134:	b085      	sub	sp, #20
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	4013      	ands	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800714a:	68fb      	ldr	r3, [r7, #12]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	4013      	ands	r3, r2
 800717a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	0c1b      	lsrs	r3, r3, #16
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	4013      	ands	r3, r2
 80071ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	b29b      	uxth	r3, r3
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	4013      	ands	r3, r2
 80071ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071ee:	68bb      	ldr	r3, [r7, #8]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	460b      	mov	r3, r1
 8007206:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800721c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	fa22 f303 	lsr.w	r3, r2, r3
 800722c:	01db      	lsls	r3, r3, #7
 800722e:	b2db      	uxtb	r3, r3
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	4313      	orrs	r3, r2
 8007234:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007236:	78fb      	ldrb	r3, [r7, #3]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	4413      	add	r3, r2
 800723e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	4013      	ands	r3, r2
 8007248:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800724a:	68bb      	ldr	r3, [r7, #8]
}
 800724c:	4618      	mov	r0, r3
 800724e:	371c      	adds	r7, #28
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	f003 0301 	and.w	r3, r3, #1
}
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800728e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007292:	f023 0307 	bic.w	r3, r3, #7
 8007296:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
	...

080072bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	460b      	mov	r3, r1
 80072c6:	607a      	str	r2, [r7, #4]
 80072c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	333c      	adds	r3, #60	; 0x3c
 80072d2:	3304      	adds	r3, #4
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	4a26      	ldr	r2, [pc, #152]	; (8007374 <USB_EP0_OutStart+0xb8>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d90a      	bls.n	80072f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072f0:	d101      	bne.n	80072f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	e037      	b.n	8007366 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fc:	461a      	mov	r2, r3
 80072fe:	2300      	movs	r3, #0
 8007300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007310:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007314:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007324:	f043 0318 	orr.w	r3, r3, #24
 8007328:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007338:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800733c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800733e:	7afb      	ldrb	r3, [r7, #11]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d10f      	bne.n	8007364 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734a:	461a      	mov	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800735e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007362:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	371c      	adds	r7, #28
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	4f54300a 	.word	0x4f54300a

08007378 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3301      	adds	r3, #1
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	4a13      	ldr	r2, [pc, #76]	; (80073d8 <USB_CoreReset+0x60>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d901      	bls.n	8007394 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e01a      	b.n	80073ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	daf3      	bge.n	8007384 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	f043 0201 	orr.w	r2, r3, #1
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3301      	adds	r3, #1
 80073b0:	60fb      	str	r3, [r7, #12]
 80073b2:	4a09      	ldr	r2, [pc, #36]	; (80073d8 <USB_CoreReset+0x60>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d901      	bls.n	80073bc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e006      	b.n	80073ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d0f1      	beq.n	80073ac <USB_CoreReset+0x34>

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	00030d40 	.word	0x00030d40

080073dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80073e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80073ec:	f002 f96a 	bl	80096c4 <USBD_static_malloc>
 80073f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d105      	bne.n	8007404 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007400:	2302      	movs	r3, #2
 8007402:	e066      	b.n	80074d2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	7c1b      	ldrb	r3, [r3, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d119      	bne.n	8007448 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007418:	2202      	movs	r2, #2
 800741a:	2181      	movs	r1, #129	; 0x81
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f002 f82e 	bl	800947e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800742c:	2202      	movs	r2, #2
 800742e:	2101      	movs	r1, #1
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f002 f824 	bl	800947e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2210      	movs	r2, #16
 8007442:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007446:	e016      	b.n	8007476 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007448:	2340      	movs	r3, #64	; 0x40
 800744a:	2202      	movs	r2, #2
 800744c:	2181      	movs	r1, #129	; 0x81
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f002 f815 	bl	800947e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800745a:	2340      	movs	r3, #64	; 0x40
 800745c:	2202      	movs	r2, #2
 800745e:	2101      	movs	r1, #1
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f002 f80c 	bl	800947e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2210      	movs	r2, #16
 8007472:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007476:	2308      	movs	r3, #8
 8007478:	2203      	movs	r2, #3
 800747a:	2182      	movs	r1, #130	; 0x82
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f001 fffe 	bl	800947e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	7c1b      	ldrb	r3, [r3, #16]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d109      	bne.n	80074c0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074b6:	2101      	movs	r1, #1
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f002 f8cf 	bl	800965c <USBD_LL_PrepareReceive>
 80074be:	e007      	b.n	80074d0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074c6:	2340      	movs	r3, #64	; 0x40
 80074c8:	2101      	movs	r1, #1
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f002 f8c6 	bl	800965c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b082      	sub	sp, #8
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	460b      	mov	r3, r1
 80074e4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80074e6:	2181      	movs	r1, #129	; 0x81
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f001 ffee 	bl	80094ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80074f4:	2101      	movs	r1, #1
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f001 ffe7 	bl	80094ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007504:	2182      	movs	r1, #130	; 0x82
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f001 ffdf 	bl	80094ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00e      	beq.n	8007544 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007536:	4618      	mov	r0, r3
 8007538:	f002 f8d2 	bl	80096e0 <USBD_static_free>
    pdev->pClassData = NULL;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007560:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007574:	2303      	movs	r3, #3
 8007576:	e0af      	b.n	80076d8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007580:	2b00      	cmp	r3, #0
 8007582:	d03f      	beq.n	8007604 <USBD_CDC_Setup+0xb4>
 8007584:	2b20      	cmp	r3, #32
 8007586:	f040 809f 	bne.w	80076c8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	88db      	ldrh	r3, [r3, #6]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d02e      	beq.n	80075f0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	b25b      	sxtb	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	da16      	bge.n	80075ca <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80075a8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	88d2      	ldrh	r2, [r2, #6]
 80075ae:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	88db      	ldrh	r3, [r3, #6]
 80075b4:	2b07      	cmp	r3, #7
 80075b6:	bf28      	it	cs
 80075b8:	2307      	movcs	r3, #7
 80075ba:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	89fa      	ldrh	r2, [r7, #14]
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 fb19 	bl	8008bfa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80075c8:	e085      	b.n	80076d6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	785a      	ldrb	r2, [r3, #1]
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	88db      	ldrh	r3, [r3, #6]
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80075e0:	6939      	ldr	r1, [r7, #16]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	88db      	ldrh	r3, [r3, #6]
 80075e6:	461a      	mov	r2, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 fb32 	bl	8008c52 <USBD_CtlPrepareRx>
      break;
 80075ee:	e072      	b.n	80076d6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	7850      	ldrb	r0, [r2, #1]
 80075fc:	2200      	movs	r2, #0
 80075fe:	6839      	ldr	r1, [r7, #0]
 8007600:	4798      	blx	r3
      break;
 8007602:	e068      	b.n	80076d6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	785b      	ldrb	r3, [r3, #1]
 8007608:	2b0b      	cmp	r3, #11
 800760a:	d852      	bhi.n	80076b2 <USBD_CDC_Setup+0x162>
 800760c:	a201      	add	r2, pc, #4	; (adr r2, 8007614 <USBD_CDC_Setup+0xc4>)
 800760e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007612:	bf00      	nop
 8007614:	08007645 	.word	0x08007645
 8007618:	080076c1 	.word	0x080076c1
 800761c:	080076b3 	.word	0x080076b3
 8007620:	080076b3 	.word	0x080076b3
 8007624:	080076b3 	.word	0x080076b3
 8007628:	080076b3 	.word	0x080076b3
 800762c:	080076b3 	.word	0x080076b3
 8007630:	080076b3 	.word	0x080076b3
 8007634:	080076b3 	.word	0x080076b3
 8007638:	080076b3 	.word	0x080076b3
 800763c:	0800766f 	.word	0x0800766f
 8007640:	08007699 	.word	0x08007699
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b03      	cmp	r3, #3
 800764e:	d107      	bne.n	8007660 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007650:	f107 030a 	add.w	r3, r7, #10
 8007654:	2202      	movs	r2, #2
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f001 face 	bl	8008bfa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800765e:	e032      	b.n	80076c6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f001 fa58 	bl	8008b18 <USBD_CtlError>
            ret = USBD_FAIL;
 8007668:	2303      	movs	r3, #3
 800766a:	75fb      	strb	r3, [r7, #23]
          break;
 800766c:	e02b      	b.n	80076c6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b03      	cmp	r3, #3
 8007678:	d107      	bne.n	800768a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800767a:	f107 030d 	add.w	r3, r7, #13
 800767e:	2201      	movs	r2, #1
 8007680:	4619      	mov	r1, r3
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 fab9 	bl	8008bfa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007688:	e01d      	b.n	80076c6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 fa43 	bl	8008b18 <USBD_CtlError>
            ret = USBD_FAIL;
 8007692:	2303      	movs	r3, #3
 8007694:	75fb      	strb	r3, [r7, #23]
          break;
 8007696:	e016      	b.n	80076c6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d00f      	beq.n	80076c4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f001 fa36 	bl	8008b18 <USBD_CtlError>
            ret = USBD_FAIL;
 80076ac:	2303      	movs	r3, #3
 80076ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80076b0:	e008      	b.n	80076c4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f001 fa2f 	bl	8008b18 <USBD_CtlError>
          ret = USBD_FAIL;
 80076ba:	2303      	movs	r3, #3
 80076bc:	75fb      	strb	r3, [r7, #23]
          break;
 80076be:	e002      	b.n	80076c6 <USBD_CDC_Setup+0x176>
          break;
 80076c0:	bf00      	nop
 80076c2:	e008      	b.n	80076d6 <USBD_CDC_Setup+0x186>
          break;
 80076c4:	bf00      	nop
      }
      break;
 80076c6:	e006      	b.n	80076d6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f001 fa24 	bl	8008b18 <USBD_CtlError>
      ret = USBD_FAIL;
 80076d0:	2303      	movs	r3, #3
 80076d2:	75fb      	strb	r3, [r7, #23]
      break;
 80076d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80076d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3718      	adds	r7, #24
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076fe:	2303      	movs	r3, #3
 8007700:	e04f      	b.n	80077a2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007708:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800770a:	78fa      	ldrb	r2, [r7, #3]
 800770c:	6879      	ldr	r1, [r7, #4]
 800770e:	4613      	mov	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	440b      	add	r3, r1
 8007718:	3318      	adds	r3, #24
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d029      	beq.n	8007774 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007720:	78fa      	ldrb	r2, [r7, #3]
 8007722:	6879      	ldr	r1, [r7, #4]
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	440b      	add	r3, r1
 800772e:	3318      	adds	r3, #24
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	78f9      	ldrb	r1, [r7, #3]
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	460b      	mov	r3, r1
 8007738:	00db      	lsls	r3, r3, #3
 800773a:	1a5b      	subs	r3, r3, r1
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4403      	add	r3, r0
 8007740:	3344      	adds	r3, #68	; 0x44
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	fbb2 f1f3 	udiv	r1, r2, r3
 8007748:	fb03 f301 	mul.w	r3, r3, r1
 800774c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800774e:	2b00      	cmp	r3, #0
 8007750:	d110      	bne.n	8007774 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007752:	78fa      	ldrb	r2, [r7, #3]
 8007754:	6879      	ldr	r1, [r7, #4]
 8007756:	4613      	mov	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	440b      	add	r3, r1
 8007760:	3318      	adds	r3, #24
 8007762:	2200      	movs	r2, #0
 8007764:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007766:	78f9      	ldrb	r1, [r7, #3]
 8007768:	2300      	movs	r3, #0
 800776a:	2200      	movs	r2, #0
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f001 ff54 	bl	800961a <USBD_LL_Transmit>
 8007772:	e015      	b.n	80077a0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2200      	movs	r2, #0
 8007778:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00b      	beq.n	80077a0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800779c:	78fa      	ldrb	r2, [r7, #3]
 800779e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	460b      	mov	r3, r1
 80077b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e015      	b.n	80077f8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80077cc:	78fb      	ldrb	r3, [r7, #3]
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 ff64 	bl	800969e <USBD_LL_GetRxDataSize>
 80077d6:	4602      	mov	r2, r0
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80077f2:	4611      	mov	r1, r2
 80077f4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800780e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007816:	2303      	movs	r3, #3
 8007818:	e01b      	b.n	8007852 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d015      	beq.n	8007850 <USBD_CDC_EP0_RxReady+0x50>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800782a:	2bff      	cmp	r3, #255	; 0xff
 800782c:	d010      	beq.n	8007850 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800783c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007844:	b292      	uxth	r2, r2
 8007846:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	22ff      	movs	r2, #255	; 0xff
 800784c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
	...

0800785c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2243      	movs	r2, #67	; 0x43
 8007868:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800786a:	4b03      	ldr	r3, [pc, #12]	; (8007878 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800786c:	4618      	mov	r0, r3
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	20000094 	.word	0x20000094

0800787c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2243      	movs	r2, #67	; 0x43
 8007888:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800788a:	4b03      	ldr	r3, [pc, #12]	; (8007898 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800788c:	4618      	mov	r0, r3
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	20000050 	.word	0x20000050

0800789c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2243      	movs	r2, #67	; 0x43
 80078a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80078aa:	4b03      	ldr	r3, [pc, #12]	; (80078b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	200000d8 	.word	0x200000d8

080078bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	220a      	movs	r2, #10
 80078c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80078ca:	4b03      	ldr	r3, [pc, #12]	; (80078d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	2000000c 	.word	0x2000000c

080078dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d101      	bne.n	80078f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e004      	b.n	80078fa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007906:	b480      	push	{r7}
 8007908:	b087      	sub	sp, #28
 800790a:	af00      	add	r7, sp, #0
 800790c:	60f8      	str	r0, [r7, #12]
 800790e:	60b9      	str	r1, [r7, #8]
 8007910:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007918:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007920:	2303      	movs	r3, #3
 8007922:	e008      	b.n	8007936 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	371c      	adds	r7, #28
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007942:	b480      	push	{r7}
 8007944:	b085      	sub	sp, #20
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007952:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800795a:	2303      	movs	r3, #3
 800795c:	e004      	b.n	8007968 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007982:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007984:	2301      	movs	r3, #1
 8007986:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007992:	2303      	movs	r3, #3
 8007994:	e01a      	b.n	80079cc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800799c:	2b00      	cmp	r3, #0
 800799e:	d114      	bne.n	80079ca <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80079be:	2181      	movs	r1, #129	; 0x81
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 fe2a 	bl	800961a <USBD_LL_Transmit>

    ret = USBD_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e016      	b.n	8007a20 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	7c1b      	ldrb	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d109      	bne.n	8007a0e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a04:	2101      	movs	r1, #1
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f001 fe28 	bl	800965c <USBD_LL_PrepareReceive>
 8007a0c:	e007      	b.n	8007a1e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a14:	2340      	movs	r3, #64	; 0x40
 8007a16:	2101      	movs	r1, #1
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f001 fe1f 	bl	800965c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	4613      	mov	r3, r2
 8007a34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e01f      	b.n	8007a80 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	79fa      	ldrb	r2, [r7, #7]
 8007a72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f001 fc9b 	bl	80093b0 <USBD_LL_Init>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3718      	adds	r7, #24
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a92:	2300      	movs	r3, #0
 8007a94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e016      	b.n	8007ace <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00b      	beq.n	8007acc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abc:	f107 020e 	add.w	r2, r7, #14
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	4798      	blx	r3
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b082      	sub	sp, #8
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f001 fcb2 	bl	8009448 <USBD_LL_Start>
 8007ae4:	4603      	mov	r3, r0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b083      	sub	sp, #12
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007b10:	2303      	movs	r3, #3
 8007b12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d009      	beq.n	8007b32 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	78fa      	ldrb	r2, [r7, #3]
 8007b28:	4611      	mov	r1, r2
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	4798      	blx	r3
 8007b2e:	4603      	mov	r3, r0
 8007b30:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	460b      	mov	r3, r1
 8007b46:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d007      	beq.n	8007b62 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	78fa      	ldrb	r2, [r7, #3]
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	4798      	blx	r3
  }

  return USBD_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 ff90 	bl	8008aa4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007b92:	461a      	mov	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ba0:	f003 031f 	and.w	r3, r3, #31
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d01a      	beq.n	8007bde <USBD_LL_SetupStage+0x72>
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d822      	bhi.n	8007bf2 <USBD_LL_SetupStage+0x86>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <USBD_LL_SetupStage+0x4a>
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d00a      	beq.n	8007bca <USBD_LL_SetupStage+0x5e>
 8007bb4:	e01d      	b.n	8007bf2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fa62 	bl	8008088 <USBD_StdDevReq>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc8:	e020      	b.n	8007c0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fac6 	bl	8008164 <USBD_StdItfReq>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	73fb      	strb	r3, [r7, #15]
      break;
 8007bdc:	e016      	b.n	8007c0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fb05 	bl	80081f6 <USBD_StdEPReq>
 8007bec:	4603      	mov	r3, r0
 8007bee:	73fb      	strb	r3, [r7, #15]
      break;
 8007bf0:	e00c      	b.n	8007c0c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bf8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f001 fc81 	bl	8009508 <USBD_LL_StallEP>
 8007c06:	4603      	mov	r3, r0
 8007c08:	73fb      	strb	r3, [r7, #15]
      break;
 8007c0a:	bf00      	nop
  }

  return ret;
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b086      	sub	sp, #24
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	60f8      	str	r0, [r7, #12]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	607a      	str	r2, [r7, #4]
 8007c22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007c24:	7afb      	ldrb	r3, [r7, #11]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d138      	bne.n	8007c9c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c30:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c38:	2b03      	cmp	r3, #3
 8007c3a:	d14a      	bne.n	8007cd2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d913      	bls.n	8007c70 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	689a      	ldr	r2, [r3, #8]
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	1ad2      	subs	r2, r2, r3
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	68da      	ldr	r2, [r3, #12]
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	bf28      	it	cs
 8007c62:	4613      	movcs	r3, r2
 8007c64:	461a      	mov	r2, r3
 8007c66:	6879      	ldr	r1, [r7, #4]
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f001 f80f 	bl	8008c8c <USBD_CtlContinueRx>
 8007c6e:	e030      	b.n	8007cd2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	d10b      	bne.n	8007c94 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d005      	beq.n	8007c94 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f001 f80a 	bl	8008cae <USBD_CtlSendStatus>
 8007c9a:	e01a      	b.n	8007cd2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b03      	cmp	r3, #3
 8007ca6:	d114      	bne.n	8007cd2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00e      	beq.n	8007cd2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	7afa      	ldrb	r2, [r7, #11]
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	4798      	blx	r3
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007cc8:	7dfb      	ldrb	r3, [r7, #23]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
 8007cd0:	e000      	b.n	8007cd4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	607a      	str	r2, [r7, #4]
 8007ce8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007cea:	7afb      	ldrb	r3, [r7, #11]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d16b      	bne.n	8007dc8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3314      	adds	r3, #20
 8007cf4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d156      	bne.n	8007dae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d914      	bls.n	8007d36 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	689a      	ldr	r2, [r3, #8]
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	1ad2      	subs	r2, r2, r3
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	6879      	ldr	r1, [r7, #4]
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 ff84 	bl	8008c30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d28:	2300      	movs	r3, #0
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f001 fc94 	bl	800965c <USBD_LL_PrepareReceive>
 8007d34:	e03b      	b.n	8007dae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d11c      	bne.n	8007d7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d316      	bcc.n	8007d7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	685a      	ldr	r2, [r3, #4]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d20f      	bcs.n	8007d7c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	2100      	movs	r1, #0
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 ff65 	bl	8008c30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d6e:	2300      	movs	r3, #0
 8007d70:	2200      	movs	r2, #0
 8007d72:	2100      	movs	r1, #0
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f001 fc71 	bl	800965c <USBD_LL_PrepareReceive>
 8007d7a:	e018      	b.n	8007dae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d10b      	bne.n	8007da0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d005      	beq.n	8007da0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007da0:	2180      	movs	r1, #128	; 0x80
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f001 fbb0 	bl	8009508 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 ff93 	bl	8008cd4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d122      	bne.n	8007dfe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f7ff fe98 	bl	8007aee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007dc6:	e01a      	b.n	8007dfe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	2b03      	cmp	r3, #3
 8007dd2:	d114      	bne.n	8007dfe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00e      	beq.n	8007dfe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	7afa      	ldrb	r2, [r7, #11]
 8007dea:	4611      	mov	r1, r2
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	4798      	blx	r3
 8007df0:	4603      	mov	r3, r0
 8007df2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007df4:	7dfb      	ldrb	r3, [r7, #23]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007dfa:	7dfb      	ldrb	r3, [r7, #23]
 8007dfc:	e000      	b.n	8007e00 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3718      	adds	r7, #24
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e02f      	b.n	8007e9c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00f      	beq.n	8007e66 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d009      	beq.n	8007e66 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	6852      	ldr	r2, [r2, #4]
 8007e5e:	b2d2      	uxtb	r2, r2
 8007e60:	4611      	mov	r1, r2
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e66:	2340      	movs	r3, #64	; 0x40
 8007e68:	2200      	movs	r2, #0
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f001 fb06 	bl	800947e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2240      	movs	r2, #64	; 0x40
 8007e7e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e82:	2340      	movs	r3, #64	; 0x40
 8007e84:	2200      	movs	r2, #0
 8007e86:	2180      	movs	r1, #128	; 0x80
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f001 faf8 	bl	800947e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2240      	movs	r2, #64	; 0x40
 8007e98:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	78fa      	ldrb	r2, [r7, #3]
 8007eb4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2204      	movs	r2, #4
 8007ede:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b04      	cmp	r3, #4
 8007f02:	d106      	bne.n	8007f12 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e012      	b.n	8007f5c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b03      	cmp	r3, #3
 8007f40:	d10b      	bne.n	8007f5a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d005      	beq.n	8007f5a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e014      	b.n	8007fa8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d10d      	bne.n	8007fa6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d007      	beq.n	8007fa6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	78fa      	ldrb	r2, [r7, #3]
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e014      	b.n	8007ff4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d10d      	bne.n	8007ff2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d007      	beq.n	8007ff2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fea:	78fa      	ldrb	r2, [r7, #3]
 8007fec:	4611      	mov	r1, r2
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b082      	sub	sp, #8
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008028:	2b00      	cmp	r3, #0
 800802a:	d009      	beq.n	8008040 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	6852      	ldr	r2, [r2, #4]
 8008038:	b2d2      	uxtb	r2, r2
 800803a:	4611      	mov	r1, r2
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	4798      	blx	r3
  }

  return USBD_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800804a:	b480      	push	{r7}
 800804c:	b087      	sub	sp, #28
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	3301      	adds	r3, #1
 8008060:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008068:	8a3b      	ldrh	r3, [r7, #16]
 800806a:	021b      	lsls	r3, r3, #8
 800806c:	b21a      	sxth	r2, r3
 800806e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008072:	4313      	orrs	r3, r2
 8008074:	b21b      	sxth	r3, r3
 8008076:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008078:	89fb      	ldrh	r3, [r7, #14]
}
 800807a:	4618      	mov	r0, r3
 800807c:	371c      	adds	r7, #28
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
	...

08008088 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800809e:	2b40      	cmp	r3, #64	; 0x40
 80080a0:	d005      	beq.n	80080ae <USBD_StdDevReq+0x26>
 80080a2:	2b40      	cmp	r3, #64	; 0x40
 80080a4:	d853      	bhi.n	800814e <USBD_StdDevReq+0xc6>
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00b      	beq.n	80080c2 <USBD_StdDevReq+0x3a>
 80080aa:	2b20      	cmp	r3, #32
 80080ac:	d14f      	bne.n	800814e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	4798      	blx	r3
 80080bc:	4603      	mov	r3, r0
 80080be:	73fb      	strb	r3, [r7, #15]
      break;
 80080c0:	e04a      	b.n	8008158 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	785b      	ldrb	r3, [r3, #1]
 80080c6:	2b09      	cmp	r3, #9
 80080c8:	d83b      	bhi.n	8008142 <USBD_StdDevReq+0xba>
 80080ca:	a201      	add	r2, pc, #4	; (adr r2, 80080d0 <USBD_StdDevReq+0x48>)
 80080cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d0:	08008125 	.word	0x08008125
 80080d4:	08008139 	.word	0x08008139
 80080d8:	08008143 	.word	0x08008143
 80080dc:	0800812f 	.word	0x0800812f
 80080e0:	08008143 	.word	0x08008143
 80080e4:	08008103 	.word	0x08008103
 80080e8:	080080f9 	.word	0x080080f9
 80080ec:	08008143 	.word	0x08008143
 80080f0:	0800811b 	.word	0x0800811b
 80080f4:	0800810d 	.word	0x0800810d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f9de 	bl	80084bc <USBD_GetDescriptor>
          break;
 8008100:	e024      	b.n	800814c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fb43 	bl	8008790 <USBD_SetAddress>
          break;
 800810a:	e01f      	b.n	800814c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fb82 	bl	8008818 <USBD_SetConfig>
 8008114:	4603      	mov	r3, r0
 8008116:	73fb      	strb	r3, [r7, #15]
          break;
 8008118:	e018      	b.n	800814c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fc21 	bl	8008964 <USBD_GetConfig>
          break;
 8008122:	e013      	b.n	800814c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fc52 	bl	80089d0 <USBD_GetStatus>
          break;
 800812c:	e00e      	b.n	800814c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fc81 	bl	8008a38 <USBD_SetFeature>
          break;
 8008136:	e009      	b.n	800814c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fc90 	bl	8008a60 <USBD_ClrFeature>
          break;
 8008140:	e004      	b.n	800814c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fce7 	bl	8008b18 <USBD_CtlError>
          break;
 800814a:	bf00      	nop
      }
      break;
 800814c:	e004      	b.n	8008158 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fce1 	bl	8008b18 <USBD_CtlError>
      break;
 8008156:	bf00      	nop
  }

  return ret;
 8008158:	7bfb      	ldrb	r3, [r7, #15]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop

08008164 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800817a:	2b40      	cmp	r3, #64	; 0x40
 800817c:	d005      	beq.n	800818a <USBD_StdItfReq+0x26>
 800817e:	2b40      	cmp	r3, #64	; 0x40
 8008180:	d82f      	bhi.n	80081e2 <USBD_StdItfReq+0x7e>
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <USBD_StdItfReq+0x26>
 8008186:	2b20      	cmp	r3, #32
 8008188:	d12b      	bne.n	80081e2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008190:	b2db      	uxtb	r3, r3
 8008192:	3b01      	subs	r3, #1
 8008194:	2b02      	cmp	r3, #2
 8008196:	d81d      	bhi.n	80081d4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	889b      	ldrh	r3, [r3, #4]
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d813      	bhi.n	80081ca <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	4798      	blx	r3
 80081b0:	4603      	mov	r3, r0
 80081b2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	88db      	ldrh	r3, [r3, #6]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d110      	bne.n	80081de <USBD_StdItfReq+0x7a>
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10d      	bne.n	80081de <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fd73 	bl	8008cae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80081c8:	e009      	b.n	80081de <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fca3 	bl	8008b18 <USBD_CtlError>
          break;
 80081d2:	e004      	b.n	80081de <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fc9e 	bl	8008b18 <USBD_CtlError>
          break;
 80081dc:	e000      	b.n	80081e0 <USBD_StdItfReq+0x7c>
          break;
 80081de:	bf00      	nop
      }
      break;
 80081e0:	e004      	b.n	80081ec <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fc97 	bl	8008b18 <USBD_CtlError>
      break;
 80081ea:	bf00      	nop
  }

  return ret;
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
 80081fe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	889b      	ldrh	r3, [r3, #4]
 8008208:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008212:	2b40      	cmp	r3, #64	; 0x40
 8008214:	d007      	beq.n	8008226 <USBD_StdEPReq+0x30>
 8008216:	2b40      	cmp	r3, #64	; 0x40
 8008218:	f200 8145 	bhi.w	80084a6 <USBD_StdEPReq+0x2b0>
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00c      	beq.n	800823a <USBD_StdEPReq+0x44>
 8008220:	2b20      	cmp	r3, #32
 8008222:	f040 8140 	bne.w	80084a6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	4798      	blx	r3
 8008234:	4603      	mov	r3, r0
 8008236:	73fb      	strb	r3, [r7, #15]
      break;
 8008238:	e13a      	b.n	80084b0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	785b      	ldrb	r3, [r3, #1]
 800823e:	2b03      	cmp	r3, #3
 8008240:	d007      	beq.n	8008252 <USBD_StdEPReq+0x5c>
 8008242:	2b03      	cmp	r3, #3
 8008244:	f300 8129 	bgt.w	800849a <USBD_StdEPReq+0x2a4>
 8008248:	2b00      	cmp	r3, #0
 800824a:	d07f      	beq.n	800834c <USBD_StdEPReq+0x156>
 800824c:	2b01      	cmp	r3, #1
 800824e:	d03c      	beq.n	80082ca <USBD_StdEPReq+0xd4>
 8008250:	e123      	b.n	800849a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b02      	cmp	r3, #2
 800825c:	d002      	beq.n	8008264 <USBD_StdEPReq+0x6e>
 800825e:	2b03      	cmp	r3, #3
 8008260:	d016      	beq.n	8008290 <USBD_StdEPReq+0x9a>
 8008262:	e02c      	b.n	80082be <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00d      	beq.n	8008286 <USBD_StdEPReq+0x90>
 800826a:	7bbb      	ldrb	r3, [r7, #14]
 800826c:	2b80      	cmp	r3, #128	; 0x80
 800826e:	d00a      	beq.n	8008286 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008270:	7bbb      	ldrb	r3, [r7, #14]
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 f947 	bl	8009508 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800827a:	2180      	movs	r1, #128	; 0x80
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f001 f943 	bl	8009508 <USBD_LL_StallEP>
 8008282:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008284:	e020      	b.n	80082c8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fc45 	bl	8008b18 <USBD_CtlError>
              break;
 800828e:	e01b      	b.n	80082c8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	885b      	ldrh	r3, [r3, #2]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10e      	bne.n	80082b6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008298:	7bbb      	ldrb	r3, [r7, #14]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00b      	beq.n	80082b6 <USBD_StdEPReq+0xc0>
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	2b80      	cmp	r3, #128	; 0x80
 80082a2:	d008      	beq.n	80082b6 <USBD_StdEPReq+0xc0>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	88db      	ldrh	r3, [r3, #6]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d104      	bne.n	80082b6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 f929 	bl	8009508 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fcf9 	bl	8008cae <USBD_CtlSendStatus>

              break;
 80082bc:	e004      	b.n	80082c8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fc29 	bl	8008b18 <USBD_CtlError>
              break;
 80082c6:	bf00      	nop
          }
          break;
 80082c8:	e0ec      	b.n	80084a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d002      	beq.n	80082dc <USBD_StdEPReq+0xe6>
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d016      	beq.n	8008308 <USBD_StdEPReq+0x112>
 80082da:	e030      	b.n	800833e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00d      	beq.n	80082fe <USBD_StdEPReq+0x108>
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
 80082e4:	2b80      	cmp	r3, #128	; 0x80
 80082e6:	d00a      	beq.n	80082fe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082e8:	7bbb      	ldrb	r3, [r7, #14]
 80082ea:	4619      	mov	r1, r3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 f90b 	bl	8009508 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082f2:	2180      	movs	r1, #128	; 0x80
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f001 f907 	bl	8009508 <USBD_LL_StallEP>
 80082fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082fc:	e025      	b.n	800834a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fc09 	bl	8008b18 <USBD_CtlError>
              break;
 8008306:	e020      	b.n	800834a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	885b      	ldrh	r3, [r3, #2]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d11b      	bne.n	8008348 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008316:	2b00      	cmp	r3, #0
 8008318:	d004      	beq.n	8008324 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f001 f911 	bl	8009546 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fcc2 	bl	8008cae <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	4798      	blx	r3
 8008338:	4603      	mov	r3, r0
 800833a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800833c:	e004      	b.n	8008348 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fbe9 	bl	8008b18 <USBD_CtlError>
              break;
 8008346:	e000      	b.n	800834a <USBD_StdEPReq+0x154>
              break;
 8008348:	bf00      	nop
          }
          break;
 800834a:	e0ab      	b.n	80084a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b02      	cmp	r3, #2
 8008356:	d002      	beq.n	800835e <USBD_StdEPReq+0x168>
 8008358:	2b03      	cmp	r3, #3
 800835a:	d032      	beq.n	80083c2 <USBD_StdEPReq+0x1cc>
 800835c:	e097      	b.n	800848e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d007      	beq.n	8008374 <USBD_StdEPReq+0x17e>
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	2b80      	cmp	r3, #128	; 0x80
 8008368:	d004      	beq.n	8008374 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fbd3 	bl	8008b18 <USBD_CtlError>
                break;
 8008372:	e091      	b.n	8008498 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008374:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008378:	2b00      	cmp	r3, #0
 800837a:	da0b      	bge.n	8008394 <USBD_StdEPReq+0x19e>
 800837c:	7bbb      	ldrb	r3, [r7, #14]
 800837e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008382:	4613      	mov	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	3310      	adds	r3, #16
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	4413      	add	r3, r2
 8008390:	3304      	adds	r3, #4
 8008392:	e00b      	b.n	80083ac <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800839a:	4613      	mov	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	4413      	add	r3, r2
 80083aa:	3304      	adds	r3, #4
 80083ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2200      	movs	r2, #0
 80083b2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2202      	movs	r2, #2
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fc1d 	bl	8008bfa <USBD_CtlSendData>
              break;
 80083c0:	e06a      	b.n	8008498 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	da11      	bge.n	80083ee <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	f003 020f 	and.w	r2, r3, #15
 80083d0:	6879      	ldr	r1, [r7, #4]
 80083d2:	4613      	mov	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	440b      	add	r3, r1
 80083dc:	3324      	adds	r3, #36	; 0x24
 80083de:	881b      	ldrh	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d117      	bne.n	8008414 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fb96 	bl	8008b18 <USBD_CtlError>
                  break;
 80083ec:	e054      	b.n	8008498 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083ee:	7bbb      	ldrb	r3, [r7, #14]
 80083f0:	f003 020f 	and.w	r2, r3, #15
 80083f4:	6879      	ldr	r1, [r7, #4]
 80083f6:	4613      	mov	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	440b      	add	r3, r1
 8008400:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d104      	bne.n	8008414 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fb83 	bl	8008b18 <USBD_CtlError>
                  break;
 8008412:	e041      	b.n	8008498 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008414:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008418:	2b00      	cmp	r3, #0
 800841a:	da0b      	bge.n	8008434 <USBD_StdEPReq+0x23e>
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008422:	4613      	mov	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	3310      	adds	r3, #16
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	4413      	add	r3, r2
 8008430:	3304      	adds	r3, #4
 8008432:	e00b      	b.n	800844c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008434:	7bbb      	ldrb	r3, [r7, #14]
 8008436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	4413      	add	r3, r2
 800844a:	3304      	adds	r3, #4
 800844c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <USBD_StdEPReq+0x264>
 8008454:	7bbb      	ldrb	r3, [r7, #14]
 8008456:	2b80      	cmp	r3, #128	; 0x80
 8008458:	d103      	bne.n	8008462 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	2200      	movs	r2, #0
 800845e:	601a      	str	r2, [r3, #0]
 8008460:	e00e      	b.n	8008480 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008462:	7bbb      	ldrb	r3, [r7, #14]
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 f88c 	bl	8009584 <USBD_LL_IsStallEP>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2201      	movs	r2, #1
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	e002      	b.n	8008480 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2200      	movs	r2, #0
 800847e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	2202      	movs	r2, #2
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fbb7 	bl	8008bfa <USBD_CtlSendData>
              break;
 800848c:	e004      	b.n	8008498 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fb41 	bl	8008b18 <USBD_CtlError>
              break;
 8008496:	bf00      	nop
          }
          break;
 8008498:	e004      	b.n	80084a4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fb3b 	bl	8008b18 <USBD_CtlError>
          break;
 80084a2:	bf00      	nop
      }
      break;
 80084a4:	e004      	b.n	80084b0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fb35 	bl	8008b18 <USBD_CtlError>
      break;
 80084ae:	bf00      	nop
  }

  return ret;
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
	...

080084bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084ca:	2300      	movs	r3, #0
 80084cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084ce:	2300      	movs	r3, #0
 80084d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	885b      	ldrh	r3, [r3, #2]
 80084d6:	0a1b      	lsrs	r3, r3, #8
 80084d8:	b29b      	uxth	r3, r3
 80084da:	3b01      	subs	r3, #1
 80084dc:	2b06      	cmp	r3, #6
 80084de:	f200 8128 	bhi.w	8008732 <USBD_GetDescriptor+0x276>
 80084e2:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <USBD_GetDescriptor+0x2c>)
 80084e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e8:	08008505 	.word	0x08008505
 80084ec:	0800851d 	.word	0x0800851d
 80084f0:	0800855d 	.word	0x0800855d
 80084f4:	08008733 	.word	0x08008733
 80084f8:	08008733 	.word	0x08008733
 80084fc:	080086d3 	.word	0x080086d3
 8008500:	080086ff 	.word	0x080086ff
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	7c12      	ldrb	r2, [r2, #16]
 8008510:	f107 0108 	add.w	r1, r7, #8
 8008514:	4610      	mov	r0, r2
 8008516:	4798      	blx	r3
 8008518:	60f8      	str	r0, [r7, #12]
      break;
 800851a:	e112      	b.n	8008742 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	7c1b      	ldrb	r3, [r3, #16]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10d      	bne.n	8008540 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800852a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852c:	f107 0208 	add.w	r2, r7, #8
 8008530:	4610      	mov	r0, r2
 8008532:	4798      	blx	r3
 8008534:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3301      	adds	r3, #1
 800853a:	2202      	movs	r2, #2
 800853c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800853e:	e100      	b.n	8008742 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	f107 0208 	add.w	r2, r7, #8
 800854c:	4610      	mov	r0, r2
 800854e:	4798      	blx	r3
 8008550:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3301      	adds	r3, #1
 8008556:	2202      	movs	r2, #2
 8008558:	701a      	strb	r2, [r3, #0]
      break;
 800855a:	e0f2      	b.n	8008742 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	885b      	ldrh	r3, [r3, #2]
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b05      	cmp	r3, #5
 8008564:	f200 80ac 	bhi.w	80086c0 <USBD_GetDescriptor+0x204>
 8008568:	a201      	add	r2, pc, #4	; (adr r2, 8008570 <USBD_GetDescriptor+0xb4>)
 800856a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856e:	bf00      	nop
 8008570:	08008589 	.word	0x08008589
 8008574:	080085bd 	.word	0x080085bd
 8008578:	080085f1 	.word	0x080085f1
 800857c:	08008625 	.word	0x08008625
 8008580:	08008659 	.word	0x08008659
 8008584:	0800868d 	.word	0x0800868d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00b      	beq.n	80085ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	7c12      	ldrb	r2, [r2, #16]
 80085a0:	f107 0108 	add.w	r1, r7, #8
 80085a4:	4610      	mov	r0, r2
 80085a6:	4798      	blx	r3
 80085a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085aa:	e091      	b.n	80086d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fab2 	bl	8008b18 <USBD_CtlError>
            err++;
 80085b4:	7afb      	ldrb	r3, [r7, #11]
 80085b6:	3301      	adds	r3, #1
 80085b8:	72fb      	strb	r3, [r7, #11]
          break;
 80085ba:	e089      	b.n	80086d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00b      	beq.n	80085e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	7c12      	ldrb	r2, [r2, #16]
 80085d4:	f107 0108 	add.w	r1, r7, #8
 80085d8:	4610      	mov	r0, r2
 80085da:	4798      	blx	r3
 80085dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085de:	e077      	b.n	80086d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fa98 	bl	8008b18 <USBD_CtlError>
            err++;
 80085e8:	7afb      	ldrb	r3, [r7, #11]
 80085ea:	3301      	adds	r3, #1
 80085ec:	72fb      	strb	r3, [r7, #11]
          break;
 80085ee:	e06f      	b.n	80086d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00b      	beq.n	8008614 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	7c12      	ldrb	r2, [r2, #16]
 8008608:	f107 0108 	add.w	r1, r7, #8
 800860c:	4610      	mov	r0, r2
 800860e:	4798      	blx	r3
 8008610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008612:	e05d      	b.n	80086d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fa7e 	bl	8008b18 <USBD_CtlError>
            err++;
 800861c:	7afb      	ldrb	r3, [r7, #11]
 800861e:	3301      	adds	r3, #1
 8008620:	72fb      	strb	r3, [r7, #11]
          break;
 8008622:	e055      	b.n	80086d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00b      	beq.n	8008648 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	7c12      	ldrb	r2, [r2, #16]
 800863c:	f107 0108 	add.w	r1, r7, #8
 8008640:	4610      	mov	r0, r2
 8008642:	4798      	blx	r3
 8008644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008646:	e043      	b.n	80086d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fa64 	bl	8008b18 <USBD_CtlError>
            err++;
 8008650:	7afb      	ldrb	r3, [r7, #11]
 8008652:	3301      	adds	r3, #1
 8008654:	72fb      	strb	r3, [r7, #11]
          break;
 8008656:	e03b      	b.n	80086d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00b      	beq.n	800867c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800866a:	695b      	ldr	r3, [r3, #20]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	7c12      	ldrb	r2, [r2, #16]
 8008670:	f107 0108 	add.w	r1, r7, #8
 8008674:	4610      	mov	r0, r2
 8008676:	4798      	blx	r3
 8008678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800867a:	e029      	b.n	80086d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fa4a 	bl	8008b18 <USBD_CtlError>
            err++;
 8008684:	7afb      	ldrb	r3, [r7, #11]
 8008686:	3301      	adds	r3, #1
 8008688:	72fb      	strb	r3, [r7, #11]
          break;
 800868a:	e021      	b.n	80086d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00b      	beq.n	80086b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	7c12      	ldrb	r2, [r2, #16]
 80086a4:	f107 0108 	add.w	r1, r7, #8
 80086a8:	4610      	mov	r0, r2
 80086aa:	4798      	blx	r3
 80086ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ae:	e00f      	b.n	80086d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fa30 	bl	8008b18 <USBD_CtlError>
            err++;
 80086b8:	7afb      	ldrb	r3, [r7, #11]
 80086ba:	3301      	adds	r3, #1
 80086bc:	72fb      	strb	r3, [r7, #11]
          break;
 80086be:	e007      	b.n	80086d0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fa28 	bl	8008b18 <USBD_CtlError>
          err++;
 80086c8:	7afb      	ldrb	r3, [r7, #11]
 80086ca:	3301      	adds	r3, #1
 80086cc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80086ce:	bf00      	nop
      }
      break;
 80086d0:	e037      	b.n	8008742 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	7c1b      	ldrb	r3, [r3, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d109      	bne.n	80086ee <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e2:	f107 0208 	add.w	r2, r7, #8
 80086e6:	4610      	mov	r0, r2
 80086e8:	4798      	blx	r3
 80086ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086ec:	e029      	b.n	8008742 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fa11 	bl	8008b18 <USBD_CtlError>
        err++;
 80086f6:	7afb      	ldrb	r3, [r7, #11]
 80086f8:	3301      	adds	r3, #1
 80086fa:	72fb      	strb	r3, [r7, #11]
      break;
 80086fc:	e021      	b.n	8008742 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	7c1b      	ldrb	r3, [r3, #16]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10d      	bne.n	8008722 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800870c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870e:	f107 0208 	add.w	r2, r7, #8
 8008712:	4610      	mov	r0, r2
 8008714:	4798      	blx	r3
 8008716:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	3301      	adds	r3, #1
 800871c:	2207      	movs	r2, #7
 800871e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008720:	e00f      	b.n	8008742 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f9f7 	bl	8008b18 <USBD_CtlError>
        err++;
 800872a:	7afb      	ldrb	r3, [r7, #11]
 800872c:	3301      	adds	r3, #1
 800872e:	72fb      	strb	r3, [r7, #11]
      break;
 8008730:	e007      	b.n	8008742 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f9ef 	bl	8008b18 <USBD_CtlError>
      err++;
 800873a:	7afb      	ldrb	r3, [r7, #11]
 800873c:	3301      	adds	r3, #1
 800873e:	72fb      	strb	r3, [r7, #11]
      break;
 8008740:	bf00      	nop
  }

  if (err != 0U)
 8008742:	7afb      	ldrb	r3, [r7, #11]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d11e      	bne.n	8008786 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	88db      	ldrh	r3, [r3, #6]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d016      	beq.n	800877e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008750:	893b      	ldrh	r3, [r7, #8]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00e      	beq.n	8008774 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	88da      	ldrh	r2, [r3, #6]
 800875a:	893b      	ldrh	r3, [r7, #8]
 800875c:	4293      	cmp	r3, r2
 800875e:	bf28      	it	cs
 8008760:	4613      	movcs	r3, r2
 8008762:	b29b      	uxth	r3, r3
 8008764:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008766:	893b      	ldrh	r3, [r7, #8]
 8008768:	461a      	mov	r2, r3
 800876a:	68f9      	ldr	r1, [r7, #12]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fa44 	bl	8008bfa <USBD_CtlSendData>
 8008772:	e009      	b.n	8008788 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f9ce 	bl	8008b18 <USBD_CtlError>
 800877c:	e004      	b.n	8008788 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 fa95 	bl	8008cae <USBD_CtlSendStatus>
 8008784:	e000      	b.n	8008788 <USBD_GetDescriptor+0x2cc>
    return;
 8008786:	bf00      	nop
  }
}
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop

08008790 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	889b      	ldrh	r3, [r3, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d131      	bne.n	8008806 <USBD_SetAddress+0x76>
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	88db      	ldrh	r3, [r3, #6]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d12d      	bne.n	8008806 <USBD_SetAddress+0x76>
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	885b      	ldrh	r3, [r3, #2]
 80087ae:	2b7f      	cmp	r3, #127	; 0x7f
 80087b0:	d829      	bhi.n	8008806 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	885b      	ldrh	r3, [r3, #2]
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d104      	bne.n	80087d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f9a3 	bl	8008b18 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087d2:	e01d      	b.n	8008810 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	7bfa      	ldrb	r2, [r7, #15]
 80087d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fefb 	bl	80095dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fa61 	bl	8008cae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d004      	beq.n	80087fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2202      	movs	r2, #2
 80087f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087fa:	e009      	b.n	8008810 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008804:	e004      	b.n	8008810 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f985 	bl	8008b18 <USBD_CtlError>
  }
}
 800880e:	bf00      	nop
 8008810:	bf00      	nop
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	885b      	ldrh	r3, [r3, #2]
 800882a:	b2da      	uxtb	r2, r3
 800882c:	4b4c      	ldr	r3, [pc, #304]	; (8008960 <USBD_SetConfig+0x148>)
 800882e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008830:	4b4b      	ldr	r3, [pc, #300]	; (8008960 <USBD_SetConfig+0x148>)
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d905      	bls.n	8008844 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f96c 	bl	8008b18 <USBD_CtlError>
    return USBD_FAIL;
 8008840:	2303      	movs	r3, #3
 8008842:	e088      	b.n	8008956 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b02      	cmp	r3, #2
 800884e:	d002      	beq.n	8008856 <USBD_SetConfig+0x3e>
 8008850:	2b03      	cmp	r3, #3
 8008852:	d025      	beq.n	80088a0 <USBD_SetConfig+0x88>
 8008854:	e071      	b.n	800893a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008856:	4b42      	ldr	r3, [pc, #264]	; (8008960 <USBD_SetConfig+0x148>)
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d01c      	beq.n	8008898 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800885e:	4b40      	ldr	r3, [pc, #256]	; (8008960 <USBD_SetConfig+0x148>)
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	461a      	mov	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008868:	4b3d      	ldr	r3, [pc, #244]	; (8008960 <USBD_SetConfig+0x148>)
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f7ff f948 	bl	8007b04 <USBD_SetClassConfig>
 8008874:	4603      	mov	r3, r0
 8008876:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d004      	beq.n	8008888 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f949 	bl	8008b18 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008886:	e065      	b.n	8008954 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fa10 	bl	8008cae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2203      	movs	r2, #3
 8008892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008896:	e05d      	b.n	8008954 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fa08 	bl	8008cae <USBD_CtlSendStatus>
      break;
 800889e:	e059      	b.n	8008954 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80088a0:	4b2f      	ldr	r3, [pc, #188]	; (8008960 <USBD_SetConfig+0x148>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d112      	bne.n	80088ce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2202      	movs	r2, #2
 80088ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80088b0:	4b2b      	ldr	r3, [pc, #172]	; (8008960 <USBD_SetConfig+0x148>)
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	461a      	mov	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088ba:	4b29      	ldr	r3, [pc, #164]	; (8008960 <USBD_SetConfig+0x148>)
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7ff f93b 	bl	8007b3c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f9f1 	bl	8008cae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088cc:	e042      	b.n	8008954 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80088ce:	4b24      	ldr	r3, [pc, #144]	; (8008960 <USBD_SetConfig+0x148>)
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	461a      	mov	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d02a      	beq.n	8008932 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	4619      	mov	r1, r3
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7ff f929 	bl	8007b3c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80088ea:	4b1d      	ldr	r3, [pc, #116]	; (8008960 <USBD_SetConfig+0x148>)
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	461a      	mov	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088f4:	4b1a      	ldr	r3, [pc, #104]	; (8008960 <USBD_SetConfig+0x148>)
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	4619      	mov	r1, r3
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f7ff f902 	bl	8007b04 <USBD_SetClassConfig>
 8008900:	4603      	mov	r3, r0
 8008902:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00f      	beq.n	800892a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f903 	bl	8008b18 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	b2db      	uxtb	r3, r3
 8008918:	4619      	mov	r1, r3
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7ff f90e 	bl	8007b3c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2202      	movs	r2, #2
 8008924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008928:	e014      	b.n	8008954 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f9bf 	bl	8008cae <USBD_CtlSendStatus>
      break;
 8008930:	e010      	b.n	8008954 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f9bb 	bl	8008cae <USBD_CtlSendStatus>
      break;
 8008938:	e00c      	b.n	8008954 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f8eb 	bl	8008b18 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008942:	4b07      	ldr	r3, [pc, #28]	; (8008960 <USBD_SetConfig+0x148>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7ff f8f7 	bl	8007b3c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800894e:	2303      	movs	r3, #3
 8008950:	73fb      	strb	r3, [r7, #15]
      break;
 8008952:	bf00      	nop
  }

  return ret;
 8008954:	7bfb      	ldrb	r3, [r7, #15]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	20000378 	.word	0x20000378

08008964 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	88db      	ldrh	r3, [r3, #6]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d004      	beq.n	8008980 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f8cd 	bl	8008b18 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800897e:	e023      	b.n	80089c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b02      	cmp	r3, #2
 800898a:	dc02      	bgt.n	8008992 <USBD_GetConfig+0x2e>
 800898c:	2b00      	cmp	r3, #0
 800898e:	dc03      	bgt.n	8008998 <USBD_GetConfig+0x34>
 8008990:	e015      	b.n	80089be <USBD_GetConfig+0x5a>
 8008992:	2b03      	cmp	r3, #3
 8008994:	d00b      	beq.n	80089ae <USBD_GetConfig+0x4a>
 8008996:	e012      	b.n	80089be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	3308      	adds	r3, #8
 80089a2:	2201      	movs	r2, #1
 80089a4:	4619      	mov	r1, r3
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f927 	bl	8008bfa <USBD_CtlSendData>
        break;
 80089ac:	e00c      	b.n	80089c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3304      	adds	r3, #4
 80089b2:	2201      	movs	r2, #1
 80089b4:	4619      	mov	r1, r3
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f91f 	bl	8008bfa <USBD_CtlSendData>
        break;
 80089bc:	e004      	b.n	80089c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f8a9 	bl	8008b18 <USBD_CtlError>
        break;
 80089c6:	bf00      	nop
}
 80089c8:	bf00      	nop
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	3b01      	subs	r3, #1
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d81e      	bhi.n	8008a26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	88db      	ldrh	r3, [r3, #6]
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d004      	beq.n	80089fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f890 	bl	8008b18 <USBD_CtlError>
        break;
 80089f8:	e01a      	b.n	8008a30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d005      	beq.n	8008a16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	f043 0202 	orr.w	r2, r3, #2
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	330c      	adds	r3, #12
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f8eb 	bl	8008bfa <USBD_CtlSendData>
      break;
 8008a24:	e004      	b.n	8008a30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f875 	bl	8008b18 <USBD_CtlError>
      break;
 8008a2e:	bf00      	nop
  }
}
 8008a30:	bf00      	nop
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	885b      	ldrh	r3, [r3, #2]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d106      	bne.n	8008a58 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f92b 	bl	8008cae <USBD_CtlSendStatus>
  }
}
 8008a58:	bf00      	nop
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	3b01      	subs	r3, #1
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d80b      	bhi.n	8008a90 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	885b      	ldrh	r3, [r3, #2]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d10c      	bne.n	8008a9a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 f910 	bl	8008cae <USBD_CtlSendStatus>
      }
      break;
 8008a8e:	e004      	b.n	8008a9a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f840 	bl	8008b18 <USBD_CtlError>
      break;
 8008a98:	e000      	b.n	8008a9c <USBD_ClrFeature+0x3c>
      break;
 8008a9a:	bf00      	nop
  }
}
 8008a9c:	bf00      	nop
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	781a      	ldrb	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	3301      	adds	r3, #1
 8008abe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	781a      	ldrb	r2, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	3301      	adds	r3, #1
 8008acc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f7ff fabb 	bl	800804a <SWAPBYTE>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f7ff faae 	bl	800804a <SWAPBYTE>
 8008aee:	4603      	mov	r3, r0
 8008af0:	461a      	mov	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3301      	adds	r3, #1
 8008afa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3301      	adds	r3, #1
 8008b00:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f7ff faa1 	bl	800804a <SWAPBYTE>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	80da      	strh	r2, [r3, #6]
}
 8008b10:	bf00      	nop
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b22:	2180      	movs	r1, #128	; 0x80
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fcef 	bl	8009508 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fceb 	bl	8009508 <USBD_LL_StallEP>
}
 8008b32:	bf00      	nop
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b086      	sub	sp, #24
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	60f8      	str	r0, [r7, #12]
 8008b42:	60b9      	str	r1, [r7, #8]
 8008b44:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d036      	beq.n	8008bbe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008b54:	6938      	ldr	r0, [r7, #16]
 8008b56:	f000 f836 	bl	8008bc6 <USBD_GetLen>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	005b      	lsls	r3, r3, #1
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b68:	7dfb      	ldrb	r3, [r7, #23]
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	7812      	ldrb	r2, [r2, #0]
 8008b72:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b74:	7dfb      	ldrb	r3, [r7, #23]
 8008b76:	3301      	adds	r3, #1
 8008b78:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b7a:	7dfb      	ldrb	r3, [r7, #23]
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	4413      	add	r3, r2
 8008b80:	2203      	movs	r2, #3
 8008b82:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b84:	7dfb      	ldrb	r3, [r7, #23]
 8008b86:	3301      	adds	r3, #1
 8008b88:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b8a:	e013      	b.n	8008bb4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008b8c:	7dfb      	ldrb	r3, [r7, #23]
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	4413      	add	r3, r2
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	7812      	ldrb	r2, [r2, #0]
 8008b96:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	613b      	str	r3, [r7, #16]
    idx++;
 8008b9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	4413      	add	r3, r2
 8008baa:	2200      	movs	r2, #0
 8008bac:	701a      	strb	r2, [r3, #0]
    idx++;
 8008bae:	7dfb      	ldrb	r3, [r7, #23]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1e7      	bne.n	8008b8c <USBD_GetString+0x52>
 8008bbc:	e000      	b.n	8008bc0 <USBD_GetString+0x86>
    return;
 8008bbe:	bf00      	nop
  }
}
 8008bc0:	3718      	adds	r7, #24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b085      	sub	sp, #20
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008bd6:	e005      	b.n	8008be4 <USBD_GetLen+0x1e>
  {
    len++;
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	3301      	adds	r3, #1
 8008be2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1f5      	bne.n	8008bd8 <USBD_GetLen+0x12>
  }

  return len;
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	60f8      	str	r0, [r7, #12]
 8008c02:	60b9      	str	r1, [r7, #8]
 8008c04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2202      	movs	r2, #2
 8008c0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	2100      	movs	r1, #0
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f000 fcfa 	bl	800961a <USBD_LL_Transmit>

  return USBD_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	2100      	movs	r1, #0
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 fce9 	bl	800961a <USBD_LL_Transmit>

  return USBD_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	60b9      	str	r1, [r7, #8]
 8008c5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2203      	movs	r2, #3
 8008c62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f000 fced 	bl	800965c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f000 fcdc 	bl	800965c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2204      	movs	r2, #4
 8008cba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fca8 	bl	800961a <USBD_LL_Transmit>

  return USBD_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2205      	movs	r2, #5
 8008ce0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	2100      	movs	r1, #0
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fcb6 	bl	800965c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
	...

08008cfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d00:	2200      	movs	r2, #0
 8008d02:	4912      	ldr	r1, [pc, #72]	; (8008d4c <MX_USB_DEVICE_Init+0x50>)
 8008d04:	4812      	ldr	r0, [pc, #72]	; (8008d50 <MX_USB_DEVICE_Init+0x54>)
 8008d06:	f7fe fe8f 	bl	8007a28 <USBD_Init>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d001      	beq.n	8008d14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d10:	f7f8 fc80 	bl	8001614 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d14:	490f      	ldr	r1, [pc, #60]	; (8008d54 <MX_USB_DEVICE_Init+0x58>)
 8008d16:	480e      	ldr	r0, [pc, #56]	; (8008d50 <MX_USB_DEVICE_Init+0x54>)
 8008d18:	f7fe feb6 	bl	8007a88 <USBD_RegisterClass>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d22:	f7f8 fc77 	bl	8001614 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d26:	490c      	ldr	r1, [pc, #48]	; (8008d58 <MX_USB_DEVICE_Init+0x5c>)
 8008d28:	4809      	ldr	r0, [pc, #36]	; (8008d50 <MX_USB_DEVICE_Init+0x54>)
 8008d2a:	f7fe fdd7 	bl	80078dc <USBD_CDC_RegisterInterface>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d34:	f7f8 fc6e 	bl	8001614 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d38:	4805      	ldr	r0, [pc, #20]	; (8008d50 <MX_USB_DEVICE_Init+0x54>)
 8008d3a:	f7fe fecc 	bl	8007ad6 <USBD_Start>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d44:	f7f8 fc66 	bl	8001614 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d48:	bf00      	nop
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	20000130 	.word	0x20000130
 8008d50:	20000744 	.word	0x20000744
 8008d54:	20000018 	.word	0x20000018
 8008d58:	2000011c 	.word	0x2000011c

08008d5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d60:	2200      	movs	r2, #0
 8008d62:	4905      	ldr	r1, [pc, #20]	; (8008d78 <CDC_Init_FS+0x1c>)
 8008d64:	4805      	ldr	r0, [pc, #20]	; (8008d7c <CDC_Init_FS+0x20>)
 8008d66:	f7fe fdce 	bl	8007906 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d6a:	4905      	ldr	r1, [pc, #20]	; (8008d80 <CDC_Init_FS+0x24>)
 8008d6c:	4803      	ldr	r0, [pc, #12]	; (8008d7c <CDC_Init_FS+0x20>)
 8008d6e:	f7fe fde8 	bl	8007942 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	20001214 	.word	0x20001214
 8008d7c:	20000744 	.word	0x20000744
 8008d80:	20000a14 	.word	0x20000a14

08008d84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d84:	b480      	push	{r7}
 8008d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	6039      	str	r1, [r7, #0]
 8008d9e:	71fb      	strb	r3, [r7, #7]
 8008da0:	4613      	mov	r3, r2
 8008da2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008da4:	79fb      	ldrb	r3, [r7, #7]
 8008da6:	2b23      	cmp	r3, #35	; 0x23
 8008da8:	d84a      	bhi.n	8008e40 <CDC_Control_FS+0xac>
 8008daa:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <CDC_Control_FS+0x1c>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008e41 	.word	0x08008e41
 8008db4:	08008e41 	.word	0x08008e41
 8008db8:	08008e41 	.word	0x08008e41
 8008dbc:	08008e41 	.word	0x08008e41
 8008dc0:	08008e41 	.word	0x08008e41
 8008dc4:	08008e41 	.word	0x08008e41
 8008dc8:	08008e41 	.word	0x08008e41
 8008dcc:	08008e41 	.word	0x08008e41
 8008dd0:	08008e41 	.word	0x08008e41
 8008dd4:	08008e41 	.word	0x08008e41
 8008dd8:	08008e41 	.word	0x08008e41
 8008ddc:	08008e41 	.word	0x08008e41
 8008de0:	08008e41 	.word	0x08008e41
 8008de4:	08008e41 	.word	0x08008e41
 8008de8:	08008e41 	.word	0x08008e41
 8008dec:	08008e41 	.word	0x08008e41
 8008df0:	08008e41 	.word	0x08008e41
 8008df4:	08008e41 	.word	0x08008e41
 8008df8:	08008e41 	.word	0x08008e41
 8008dfc:	08008e41 	.word	0x08008e41
 8008e00:	08008e41 	.word	0x08008e41
 8008e04:	08008e41 	.word	0x08008e41
 8008e08:	08008e41 	.word	0x08008e41
 8008e0c:	08008e41 	.word	0x08008e41
 8008e10:	08008e41 	.word	0x08008e41
 8008e14:	08008e41 	.word	0x08008e41
 8008e18:	08008e41 	.word	0x08008e41
 8008e1c:	08008e41 	.word	0x08008e41
 8008e20:	08008e41 	.word	0x08008e41
 8008e24:	08008e41 	.word	0x08008e41
 8008e28:	08008e41 	.word	0x08008e41
 8008e2c:	08008e41 	.word	0x08008e41
 8008e30:	08008e41 	.word	0x08008e41
 8008e34:	08008e41 	.word	0x08008e41
 8008e38:	08008e41 	.word	0x08008e41
 8008e3c:	08008e41 	.word	0x08008e41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e40:	bf00      	nop
  }

  return (USBD_OK);
 8008e42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e5a:	6879      	ldr	r1, [r7, #4]
 8008e5c:	4805      	ldr	r0, [pc, #20]	; (8008e74 <CDC_Receive_FS+0x24>)
 8008e5e:	f7fe fd70 	bl	8007942 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e62:	4804      	ldr	r0, [pc, #16]	; (8008e74 <CDC_Receive_FS+0x24>)
 8008e64:	f7fe fdb6 	bl	80079d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008e68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	20000744 	.word	0x20000744

08008e78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008e88:	4b0d      	ldr	r3, [pc, #52]	; (8008ec0 <CDC_Transmit_FS+0x48>)
 8008e8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d001      	beq.n	8008e9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e00b      	b.n	8008eb6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008e9e:	887b      	ldrh	r3, [r7, #2]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	6879      	ldr	r1, [r7, #4]
 8008ea4:	4806      	ldr	r0, [pc, #24]	; (8008ec0 <CDC_Transmit_FS+0x48>)
 8008ea6:	f7fe fd2e 	bl	8007906 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008eaa:	4805      	ldr	r0, [pc, #20]	; (8008ec0 <CDC_Transmit_FS+0x48>)
 8008eac:	f7fe fd62 	bl	8007974 <USBD_CDC_TransmitPacket>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20000744 	.word	0x20000744

08008ec4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b087      	sub	sp, #28
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008ed6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	371c      	adds	r7, #28
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
	...

08008ee8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	6039      	str	r1, [r7, #0]
 8008ef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2212      	movs	r2, #18
 8008ef8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008efa:	4b03      	ldr	r3, [pc, #12]	; (8008f08 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr
 8008f08:	2000014c 	.word	0x2000014c

08008f0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	4603      	mov	r3, r0
 8008f14:	6039      	str	r1, [r7, #0]
 8008f16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	2204      	movs	r2, #4
 8008f1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f1e:	4b03      	ldr	r3, [pc, #12]	; (8008f2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	20000160 	.word	0x20000160

08008f30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	4603      	mov	r3, r0
 8008f38:	6039      	str	r1, [r7, #0]
 8008f3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f3c:	79fb      	ldrb	r3, [r7, #7]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d105      	bne.n	8008f4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	4907      	ldr	r1, [pc, #28]	; (8008f64 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f46:	4808      	ldr	r0, [pc, #32]	; (8008f68 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f48:	f7ff fdf7 	bl	8008b3a <USBD_GetString>
 8008f4c:	e004      	b.n	8008f58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	4904      	ldr	r1, [pc, #16]	; (8008f64 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f52:	4805      	ldr	r0, [pc, #20]	; (8008f68 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f54:	f7ff fdf1 	bl	8008b3a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f58:	4b02      	ldr	r3, [pc, #8]	; (8008f64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20001a14 	.word	0x20001a14
 8008f68:	0800e090 	.word	0x0800e090

08008f6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	6039      	str	r1, [r7, #0]
 8008f76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f78:	683a      	ldr	r2, [r7, #0]
 8008f7a:	4904      	ldr	r1, [pc, #16]	; (8008f8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f7c:	4804      	ldr	r0, [pc, #16]	; (8008f90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f7e:	f7ff fddc 	bl	8008b3a <USBD_GetString>
  return USBD_StrDesc;
 8008f82:	4b02      	ldr	r3, [pc, #8]	; (8008f8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	20001a14 	.word	0x20001a14
 8008f90:	0800e0a8 	.word	0x0800e0a8

08008f94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	6039      	str	r1, [r7, #0]
 8008f9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	221a      	movs	r2, #26
 8008fa4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008fa6:	f000 f843 	bl	8009030 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008faa:	4b02      	ldr	r3, [pc, #8]	; (8008fb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	20000164 	.word	0x20000164

08008fb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	6039      	str	r1, [r7, #0]
 8008fc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008fc4:	79fb      	ldrb	r3, [r7, #7]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d105      	bne.n	8008fd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	4907      	ldr	r1, [pc, #28]	; (8008fec <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fce:	4808      	ldr	r0, [pc, #32]	; (8008ff0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fd0:	f7ff fdb3 	bl	8008b3a <USBD_GetString>
 8008fd4:	e004      	b.n	8008fe0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	4904      	ldr	r1, [pc, #16]	; (8008fec <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fda:	4805      	ldr	r0, [pc, #20]	; (8008ff0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fdc:	f7ff fdad 	bl	8008b3a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fe0:	4b02      	ldr	r3, [pc, #8]	; (8008fec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	20001a14 	.word	0x20001a14
 8008ff0:	0800e0bc 	.word	0x0800e0bc

08008ff4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	6039      	str	r1, [r7, #0]
 8008ffe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009000:	79fb      	ldrb	r3, [r7, #7]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d105      	bne.n	8009012 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	4907      	ldr	r1, [pc, #28]	; (8009028 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800900a:	4808      	ldr	r0, [pc, #32]	; (800902c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800900c:	f7ff fd95 	bl	8008b3a <USBD_GetString>
 8009010:	e004      	b.n	800901c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	4904      	ldr	r1, [pc, #16]	; (8009028 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009016:	4805      	ldr	r0, [pc, #20]	; (800902c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009018:	f7ff fd8f 	bl	8008b3a <USBD_GetString>
  }
  return USBD_StrDesc;
 800901c:	4b02      	ldr	r3, [pc, #8]	; (8009028 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800901e:	4618      	mov	r0, r3
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	20001a14 	.word	0x20001a14
 800902c:	0800e0c8 	.word	0x0800e0c8

08009030 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009036:	4b0f      	ldr	r3, [pc, #60]	; (8009074 <Get_SerialNum+0x44>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800903c:	4b0e      	ldr	r3, [pc, #56]	; (8009078 <Get_SerialNum+0x48>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009042:	4b0e      	ldr	r3, [pc, #56]	; (800907c <Get_SerialNum+0x4c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4413      	add	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d009      	beq.n	800906a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009056:	2208      	movs	r2, #8
 8009058:	4909      	ldr	r1, [pc, #36]	; (8009080 <Get_SerialNum+0x50>)
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f000 f814 	bl	8009088 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009060:	2204      	movs	r2, #4
 8009062:	4908      	ldr	r1, [pc, #32]	; (8009084 <Get_SerialNum+0x54>)
 8009064:	68b8      	ldr	r0, [r7, #8]
 8009066:	f000 f80f 	bl	8009088 <IntToUnicode>
  }
}
 800906a:	bf00      	nop
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	1fff7a10 	.word	0x1fff7a10
 8009078:	1fff7a14 	.word	0x1fff7a14
 800907c:	1fff7a18 	.word	0x1fff7a18
 8009080:	20000166 	.word	0x20000166
 8009084:	20000176 	.word	0x20000176

08009088 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009088:	b480      	push	{r7}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	4613      	mov	r3, r2
 8009094:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800909a:	2300      	movs	r3, #0
 800909c:	75fb      	strb	r3, [r7, #23]
 800909e:	e027      	b.n	80090f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	0f1b      	lsrs	r3, r3, #28
 80090a4:	2b09      	cmp	r3, #9
 80090a6:	d80b      	bhi.n	80090c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	0f1b      	lsrs	r3, r3, #28
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	7dfb      	ldrb	r3, [r7, #23]
 80090b0:	005b      	lsls	r3, r3, #1
 80090b2:	4619      	mov	r1, r3
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	440b      	add	r3, r1
 80090b8:	3230      	adds	r2, #48	; 0x30
 80090ba:	b2d2      	uxtb	r2, r2
 80090bc:	701a      	strb	r2, [r3, #0]
 80090be:	e00a      	b.n	80090d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	0f1b      	lsrs	r3, r3, #28
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	4619      	mov	r1, r3
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	440b      	add	r3, r1
 80090d0:	3237      	adds	r2, #55	; 0x37
 80090d2:	b2d2      	uxtb	r2, r2
 80090d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	011b      	lsls	r3, r3, #4
 80090da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80090dc:	7dfb      	ldrb	r3, [r7, #23]
 80090de:	005b      	lsls	r3, r3, #1
 80090e0:	3301      	adds	r3, #1
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	4413      	add	r3, r2
 80090e6:	2200      	movs	r2, #0
 80090e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80090ea:	7dfb      	ldrb	r3, [r7, #23]
 80090ec:	3301      	adds	r3, #1
 80090ee:	75fb      	strb	r3, [r7, #23]
 80090f0:	7dfa      	ldrb	r2, [r7, #23]
 80090f2:	79fb      	ldrb	r3, [r7, #7]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d3d3      	bcc.n	80090a0 <IntToUnicode+0x18>
  }
}
 80090f8:	bf00      	nop
 80090fa:	bf00      	nop
 80090fc:	371c      	adds	r7, #28
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
	...

08009108 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b08a      	sub	sp, #40	; 0x28
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009110:	f107 0314 	add.w	r3, r7, #20
 8009114:	2200      	movs	r2, #0
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	605a      	str	r2, [r3, #4]
 800911a:	609a      	str	r2, [r3, #8]
 800911c:	60da      	str	r2, [r3, #12]
 800911e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009128:	d147      	bne.n	80091ba <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800912a:	2300      	movs	r3, #0
 800912c:	613b      	str	r3, [r7, #16]
 800912e:	4b25      	ldr	r3, [pc, #148]	; (80091c4 <HAL_PCD_MspInit+0xbc>)
 8009130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009132:	4a24      	ldr	r2, [pc, #144]	; (80091c4 <HAL_PCD_MspInit+0xbc>)
 8009134:	f043 0301 	orr.w	r3, r3, #1
 8009138:	6313      	str	r3, [r2, #48]	; 0x30
 800913a:	4b22      	ldr	r3, [pc, #136]	; (80091c4 <HAL_PCD_MspInit+0xbc>)
 800913c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913e:	f003 0301 	and.w	r3, r3, #1
 8009142:	613b      	str	r3, [r7, #16]
 8009144:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800914a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800914c:	2300      	movs	r3, #0
 800914e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009150:	2300      	movs	r3, #0
 8009152:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009154:	f107 0314 	add.w	r3, r7, #20
 8009158:	4619      	mov	r1, r3
 800915a:	481b      	ldr	r0, [pc, #108]	; (80091c8 <HAL_PCD_MspInit+0xc0>)
 800915c:	f7f9 fe64 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009160:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009166:	2302      	movs	r3, #2
 8009168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800916a:	2300      	movs	r3, #0
 800916c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800916e:	2300      	movs	r3, #0
 8009170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009172:	230a      	movs	r3, #10
 8009174:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009176:	f107 0314 	add.w	r3, r7, #20
 800917a:	4619      	mov	r1, r3
 800917c:	4812      	ldr	r0, [pc, #72]	; (80091c8 <HAL_PCD_MspInit+0xc0>)
 800917e:	f7f9 fe53 	bl	8002e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009182:	4b10      	ldr	r3, [pc, #64]	; (80091c4 <HAL_PCD_MspInit+0xbc>)
 8009184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009186:	4a0f      	ldr	r2, [pc, #60]	; (80091c4 <HAL_PCD_MspInit+0xbc>)
 8009188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800918c:	6353      	str	r3, [r2, #52]	; 0x34
 800918e:	2300      	movs	r3, #0
 8009190:	60fb      	str	r3, [r7, #12]
 8009192:	4b0c      	ldr	r3, [pc, #48]	; (80091c4 <HAL_PCD_MspInit+0xbc>)
 8009194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009196:	4a0b      	ldr	r2, [pc, #44]	; (80091c4 <HAL_PCD_MspInit+0xbc>)
 8009198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800919c:	6453      	str	r3, [r2, #68]	; 0x44
 800919e:	4b09      	ldr	r3, [pc, #36]	; (80091c4 <HAL_PCD_MspInit+0xbc>)
 80091a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091a6:	60fb      	str	r3, [r7, #12]
 80091a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80091aa:	2200      	movs	r2, #0
 80091ac:	2100      	movs	r1, #0
 80091ae:	2043      	movs	r0, #67	; 0x43
 80091b0:	f7f9 fa93 	bl	80026da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80091b4:	2043      	movs	r0, #67	; 0x43
 80091b6:	f7f9 faac 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80091ba:	bf00      	nop
 80091bc:	3728      	adds	r7, #40	; 0x28
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	40023800 	.word	0x40023800
 80091c8:	40020000 	.word	0x40020000

080091cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80091e0:	4619      	mov	r1, r3
 80091e2:	4610      	mov	r0, r2
 80091e4:	f7fe fcc2 	bl	8007b6c <USBD_LL_SetupStage>
}
 80091e8:	bf00      	nop
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009202:	78fa      	ldrb	r2, [r7, #3]
 8009204:	6879      	ldr	r1, [r7, #4]
 8009206:	4613      	mov	r3, r2
 8009208:	00db      	lsls	r3, r3, #3
 800920a:	1a9b      	subs	r3, r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	440b      	add	r3, r1
 8009210:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	78fb      	ldrb	r3, [r7, #3]
 8009218:	4619      	mov	r1, r3
 800921a:	f7fe fcfc 	bl	8007c16 <USBD_LL_DataOutStage>
}
 800921e:	bf00      	nop
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b082      	sub	sp, #8
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	460b      	mov	r3, r1
 8009230:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009238:	78fa      	ldrb	r2, [r7, #3]
 800923a:	6879      	ldr	r1, [r7, #4]
 800923c:	4613      	mov	r3, r2
 800923e:	00db      	lsls	r3, r3, #3
 8009240:	1a9b      	subs	r3, r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	440b      	add	r3, r1
 8009246:	3348      	adds	r3, #72	; 0x48
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	78fb      	ldrb	r3, [r7, #3]
 800924c:	4619      	mov	r1, r3
 800924e:	f7fe fd45 	bl	8007cdc <USBD_LL_DataInStage>
}
 8009252:	bf00      	nop
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b082      	sub	sp, #8
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009268:	4618      	mov	r0, r3
 800926a:	f7fe fe59 	bl	8007f20 <USBD_LL_SOF>
}
 800926e:	bf00      	nop
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b084      	sub	sp, #16
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800927e:	2301      	movs	r3, #1
 8009280:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d102      	bne.n	8009290 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800928a:	2300      	movs	r3, #0
 800928c:	73fb      	strb	r3, [r7, #15]
 800928e:	e008      	b.n	80092a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	2b02      	cmp	r3, #2
 8009296:	d102      	bne.n	800929e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009298:	2301      	movs	r3, #1
 800929a:	73fb      	strb	r3, [r7, #15]
 800929c:	e001      	b.n	80092a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800929e:	f7f8 f9b9 	bl	8001614 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092a8:	7bfa      	ldrb	r2, [r7, #15]
 80092aa:	4611      	mov	r1, r2
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fe fdf9 	bl	8007ea4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7fe fda5 	bl	8007e08 <USBD_LL_Reset>
}
 80092be:	bf00      	nop
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7fe fdf4 	bl	8007ec4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	6812      	ldr	r2, [r2, #0]
 80092ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092ee:	f043 0301 	orr.w	r3, r3, #1
 80092f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d005      	beq.n	8009308 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092fc:	4b04      	ldr	r3, [pc, #16]	; (8009310 <HAL_PCD_SuspendCallback+0x48>)
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	4a03      	ldr	r2, [pc, #12]	; (8009310 <HAL_PCD_SuspendCallback+0x48>)
 8009302:	f043 0306 	orr.w	r3, r3, #6
 8009306:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009308:	bf00      	nop
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	e000ed00 	.word	0xe000ed00

08009314 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009322:	4618      	mov	r0, r3
 8009324:	f7fe fde4 	bl	8007ef0 <USBD_LL_Resume>
}
 8009328:	bf00      	nop
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009342:	78fa      	ldrb	r2, [r7, #3]
 8009344:	4611      	mov	r1, r2
 8009346:	4618      	mov	r0, r3
 8009348:	f7fe fe32 	bl	8007fb0 <USBD_LL_IsoOUTIncomplete>
}
 800934c:	bf00      	nop
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	460b      	mov	r3, r1
 800935e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009366:	78fa      	ldrb	r2, [r7, #3]
 8009368:	4611      	mov	r1, r2
 800936a:	4618      	mov	r0, r3
 800936c:	f7fe fdfa 	bl	8007f64 <USBD_LL_IsoINIncomplete>
}
 8009370:	bf00      	nop
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009386:	4618      	mov	r0, r3
 8009388:	f7fe fe38 	bl	8007ffc <USBD_LL_DevConnected>
}
 800938c:	bf00      	nop
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fe fe35 	bl	8008012 <USBD_LL_DevDisconnected>
}
 80093a8:	bf00      	nop
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d13c      	bne.n	800943a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80093c0:	4a20      	ldr	r2, [pc, #128]	; (8009444 <USBD_LL_Init+0x94>)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a1e      	ldr	r2, [pc, #120]	; (8009444 <USBD_LL_Init+0x94>)
 80093cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093d0:	4b1c      	ldr	r3, [pc, #112]	; (8009444 <USBD_LL_Init+0x94>)
 80093d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80093d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80093d8:	4b1a      	ldr	r3, [pc, #104]	; (8009444 <USBD_LL_Init+0x94>)
 80093da:	2204      	movs	r2, #4
 80093dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80093de:	4b19      	ldr	r3, [pc, #100]	; (8009444 <USBD_LL_Init+0x94>)
 80093e0:	2202      	movs	r2, #2
 80093e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80093e4:	4b17      	ldr	r3, [pc, #92]	; (8009444 <USBD_LL_Init+0x94>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80093ea:	4b16      	ldr	r3, [pc, #88]	; (8009444 <USBD_LL_Init+0x94>)
 80093ec:	2202      	movs	r2, #2
 80093ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80093f0:	4b14      	ldr	r3, [pc, #80]	; (8009444 <USBD_LL_Init+0x94>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80093f6:	4b13      	ldr	r3, [pc, #76]	; (8009444 <USBD_LL_Init+0x94>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80093fc:	4b11      	ldr	r3, [pc, #68]	; (8009444 <USBD_LL_Init+0x94>)
 80093fe:	2200      	movs	r2, #0
 8009400:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009402:	4b10      	ldr	r3, [pc, #64]	; (8009444 <USBD_LL_Init+0x94>)
 8009404:	2201      	movs	r2, #1
 8009406:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009408:	4b0e      	ldr	r3, [pc, #56]	; (8009444 <USBD_LL_Init+0x94>)
 800940a:	2200      	movs	r2, #0
 800940c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800940e:	480d      	ldr	r0, [pc, #52]	; (8009444 <USBD_LL_Init+0x94>)
 8009410:	f7fa fcbe 	bl	8003d90 <HAL_PCD_Init>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800941a:	f7f8 f8fb 	bl	8001614 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800941e:	2180      	movs	r1, #128	; 0x80
 8009420:	4808      	ldr	r0, [pc, #32]	; (8009444 <USBD_LL_Init+0x94>)
 8009422:	f7fb fe1c 	bl	800505e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009426:	2240      	movs	r2, #64	; 0x40
 8009428:	2100      	movs	r1, #0
 800942a:	4806      	ldr	r0, [pc, #24]	; (8009444 <USBD_LL_Init+0x94>)
 800942c:	f7fb fdd0 	bl	8004fd0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009430:	2280      	movs	r2, #128	; 0x80
 8009432:	2101      	movs	r1, #1
 8009434:	4803      	ldr	r0, [pc, #12]	; (8009444 <USBD_LL_Init+0x94>)
 8009436:	f7fb fdcb 	bl	8004fd0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3708      	adds	r7, #8
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	20001c14 	.word	0x20001c14

08009448 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009454:	2300      	movs	r3, #0
 8009456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800945e:	4618      	mov	r0, r3
 8009460:	f7fa fdb3 	bl	8003fca <HAL_PCD_Start>
 8009464:	4603      	mov	r3, r0
 8009466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009468:	7bfb      	ldrb	r3, [r7, #15]
 800946a:	4618      	mov	r0, r3
 800946c:	f000 f942 	bl	80096f4 <USBD_Get_USB_Status>
 8009470:	4603      	mov	r3, r0
 8009472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009474:	7bbb      	ldrb	r3, [r7, #14]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b084      	sub	sp, #16
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	4608      	mov	r0, r1
 8009488:	4611      	mov	r1, r2
 800948a:	461a      	mov	r2, r3
 800948c:	4603      	mov	r3, r0
 800948e:	70fb      	strb	r3, [r7, #3]
 8009490:	460b      	mov	r3, r1
 8009492:	70bb      	strb	r3, [r7, #2]
 8009494:	4613      	mov	r3, r2
 8009496:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800949c:	2300      	movs	r3, #0
 800949e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80094a6:	78bb      	ldrb	r3, [r7, #2]
 80094a8:	883a      	ldrh	r2, [r7, #0]
 80094aa:	78f9      	ldrb	r1, [r7, #3]
 80094ac:	f7fb f997 	bl	80047de <HAL_PCD_EP_Open>
 80094b0:	4603      	mov	r3, r0
 80094b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 f91c 	bl	80096f4 <USBD_Get_USB_Status>
 80094bc:	4603      	mov	r3, r0
 80094be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b084      	sub	sp, #16
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	460b      	mov	r3, r1
 80094d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094e4:	78fa      	ldrb	r2, [r7, #3]
 80094e6:	4611      	mov	r1, r2
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fb f9e0 	bl	80048ae <HAL_PCD_EP_Close>
 80094ee:	4603      	mov	r3, r0
 80094f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 f8fd 	bl	80096f4 <USBD_Get_USB_Status>
 80094fa:	4603      	mov	r3, r0
 80094fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3710      	adds	r7, #16
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	460b      	mov	r3, r1
 8009512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009514:	2300      	movs	r3, #0
 8009516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009522:	78fa      	ldrb	r2, [r7, #3]
 8009524:	4611      	mov	r1, r2
 8009526:	4618      	mov	r0, r3
 8009528:	f7fb fab8 	bl	8004a9c <HAL_PCD_EP_SetStall>
 800952c:	4603      	mov	r3, r0
 800952e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	4618      	mov	r0, r3
 8009534:	f000 f8de 	bl	80096f4 <USBD_Get_USB_Status>
 8009538:	4603      	mov	r3, r0
 800953a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800953c:	7bbb      	ldrb	r3, [r7, #14]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b084      	sub	sp, #16
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	460b      	mov	r3, r1
 8009550:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009552:	2300      	movs	r3, #0
 8009554:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009560:	78fa      	ldrb	r2, [r7, #3]
 8009562:	4611      	mov	r1, r2
 8009564:	4618      	mov	r0, r3
 8009566:	f7fb fafd 	bl	8004b64 <HAL_PCD_EP_ClrStall>
 800956a:	4603      	mov	r3, r0
 800956c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800956e:	7bfb      	ldrb	r3, [r7, #15]
 8009570:	4618      	mov	r0, r3
 8009572:	f000 f8bf 	bl	80096f4 <USBD_Get_USB_Status>
 8009576:	4603      	mov	r3, r0
 8009578:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800957a:	7bbb      	ldrb	r3, [r7, #14]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009596:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009598:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800959c:	2b00      	cmp	r3, #0
 800959e:	da0b      	bge.n	80095b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095a0:	78fb      	ldrb	r3, [r7, #3]
 80095a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095a6:	68f9      	ldr	r1, [r7, #12]
 80095a8:	4613      	mov	r3, r2
 80095aa:	00db      	lsls	r3, r3, #3
 80095ac:	1a9b      	subs	r3, r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	440b      	add	r3, r1
 80095b2:	333e      	adds	r3, #62	; 0x3e
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	e00b      	b.n	80095d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095b8:	78fb      	ldrb	r3, [r7, #3]
 80095ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095be:	68f9      	ldr	r1, [r7, #12]
 80095c0:	4613      	mov	r3, r2
 80095c2:	00db      	lsls	r3, r3, #3
 80095c4:	1a9b      	subs	r3, r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	440b      	add	r3, r1
 80095ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80095ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ec:	2300      	movs	r3, #0
 80095ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095f6:	78fa      	ldrb	r2, [r7, #3]
 80095f8:	4611      	mov	r1, r2
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fb f8ca 	bl	8004794 <HAL_PCD_SetAddress>
 8009600:	4603      	mov	r3, r0
 8009602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	4618      	mov	r0, r3
 8009608:	f000 f874 	bl	80096f4 <USBD_Get_USB_Status>
 800960c:	4603      	mov	r3, r0
 800960e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009610:	7bbb      	ldrb	r3, [r7, #14]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b086      	sub	sp, #24
 800961e:	af00      	add	r7, sp, #0
 8009620:	60f8      	str	r0, [r7, #12]
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	603b      	str	r3, [r7, #0]
 8009626:	460b      	mov	r3, r1
 8009628:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800962a:	2300      	movs	r3, #0
 800962c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009638:	7af9      	ldrb	r1, [r7, #11]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	f7fb f9e3 	bl	8004a08 <HAL_PCD_EP_Transmit>
 8009642:	4603      	mov	r3, r0
 8009644:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009646:	7dfb      	ldrb	r3, [r7, #23]
 8009648:	4618      	mov	r0, r3
 800964a:	f000 f853 	bl	80096f4 <USBD_Get_USB_Status>
 800964e:	4603      	mov	r3, r0
 8009650:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009652:	7dbb      	ldrb	r3, [r7, #22]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3718      	adds	r7, #24
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	607a      	str	r2, [r7, #4]
 8009666:	603b      	str	r3, [r7, #0]
 8009668:	460b      	mov	r3, r1
 800966a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800966c:	2300      	movs	r3, #0
 800966e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800967a:	7af9      	ldrb	r1, [r7, #11]
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	f7fb f95f 	bl	8004942 <HAL_PCD_EP_Receive>
 8009684:	4603      	mov	r3, r0
 8009686:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009688:	7dfb      	ldrb	r3, [r7, #23]
 800968a:	4618      	mov	r0, r3
 800968c:	f000 f832 	bl	80096f4 <USBD_Get_USB_Status>
 8009690:	4603      	mov	r3, r0
 8009692:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009694:	7dbb      	ldrb	r3, [r7, #22]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3718      	adds	r7, #24
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b082      	sub	sp, #8
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	460b      	mov	r3, r1
 80096a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096b0:	78fa      	ldrb	r2, [r7, #3]
 80096b2:	4611      	mov	r1, r2
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fb f98f 	bl	80049d8 <HAL_PCD_EP_GetRxCount>
 80096ba:	4603      	mov	r3, r0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096cc:	4b03      	ldr	r3, [pc, #12]	; (80096dc <USBD_static_malloc+0x18>)
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	2000037c 	.word	0x2000037c

080096e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]

}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	4603      	mov	r3, r0
 80096fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009702:	79fb      	ldrb	r3, [r7, #7]
 8009704:	2b03      	cmp	r3, #3
 8009706:	d817      	bhi.n	8009738 <USBD_Get_USB_Status+0x44>
 8009708:	a201      	add	r2, pc, #4	; (adr r2, 8009710 <USBD_Get_USB_Status+0x1c>)
 800970a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970e:	bf00      	nop
 8009710:	08009721 	.word	0x08009721
 8009714:	08009727 	.word	0x08009727
 8009718:	0800972d 	.word	0x0800972d
 800971c:	08009733 	.word	0x08009733
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	73fb      	strb	r3, [r7, #15]
    break;
 8009724:	e00b      	b.n	800973e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009726:	2303      	movs	r3, #3
 8009728:	73fb      	strb	r3, [r7, #15]
    break;
 800972a:	e008      	b.n	800973e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800972c:	2301      	movs	r3, #1
 800972e:	73fb      	strb	r3, [r7, #15]
    break;
 8009730:	e005      	b.n	800973e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009732:	2303      	movs	r3, #3
 8009734:	73fb      	strb	r3, [r7, #15]
    break;
 8009736:	e002      	b.n	800973e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009738:	2303      	movs	r3, #3
 800973a:	73fb      	strb	r3, [r7, #15]
    break;
 800973c:	bf00      	nop
  }
  return usb_status;
 800973e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <__errno>:
 800974c:	4b01      	ldr	r3, [pc, #4]	; (8009754 <__errno+0x8>)
 800974e:	6818      	ldr	r0, [r3, #0]
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	20000180 	.word	0x20000180

08009758 <__libc_init_array>:
 8009758:	b570      	push	{r4, r5, r6, lr}
 800975a:	4d0d      	ldr	r5, [pc, #52]	; (8009790 <__libc_init_array+0x38>)
 800975c:	4c0d      	ldr	r4, [pc, #52]	; (8009794 <__libc_init_array+0x3c>)
 800975e:	1b64      	subs	r4, r4, r5
 8009760:	10a4      	asrs	r4, r4, #2
 8009762:	2600      	movs	r6, #0
 8009764:	42a6      	cmp	r6, r4
 8009766:	d109      	bne.n	800977c <__libc_init_array+0x24>
 8009768:	4d0b      	ldr	r5, [pc, #44]	; (8009798 <__libc_init_array+0x40>)
 800976a:	4c0c      	ldr	r4, [pc, #48]	; (800979c <__libc_init_array+0x44>)
 800976c:	f004 fc78 	bl	800e060 <_init>
 8009770:	1b64      	subs	r4, r4, r5
 8009772:	10a4      	asrs	r4, r4, #2
 8009774:	2600      	movs	r6, #0
 8009776:	42a6      	cmp	r6, r4
 8009778:	d105      	bne.n	8009786 <__libc_init_array+0x2e>
 800977a:	bd70      	pop	{r4, r5, r6, pc}
 800977c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009780:	4798      	blx	r3
 8009782:	3601      	adds	r6, #1
 8009784:	e7ee      	b.n	8009764 <__libc_init_array+0xc>
 8009786:	f855 3b04 	ldr.w	r3, [r5], #4
 800978a:	4798      	blx	r3
 800978c:	3601      	adds	r6, #1
 800978e:	e7f2      	b.n	8009776 <__libc_init_array+0x1e>
 8009790:	0800e5b4 	.word	0x0800e5b4
 8009794:	0800e5b4 	.word	0x0800e5b4
 8009798:	0800e5b4 	.word	0x0800e5b4
 800979c:	0800e5b8 	.word	0x0800e5b8

080097a0 <memset>:
 80097a0:	4402      	add	r2, r0
 80097a2:	4603      	mov	r3, r0
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d100      	bne.n	80097aa <memset+0xa>
 80097a8:	4770      	bx	lr
 80097aa:	f803 1b01 	strb.w	r1, [r3], #1
 80097ae:	e7f9      	b.n	80097a4 <memset+0x4>

080097b0 <__cvt>:
 80097b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097b4:	ec55 4b10 	vmov	r4, r5, d0
 80097b8:	2d00      	cmp	r5, #0
 80097ba:	460e      	mov	r6, r1
 80097bc:	4619      	mov	r1, r3
 80097be:	462b      	mov	r3, r5
 80097c0:	bfbb      	ittet	lt
 80097c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80097c6:	461d      	movlt	r5, r3
 80097c8:	2300      	movge	r3, #0
 80097ca:	232d      	movlt	r3, #45	; 0x2d
 80097cc:	700b      	strb	r3, [r1, #0]
 80097ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80097d4:	4691      	mov	r9, r2
 80097d6:	f023 0820 	bic.w	r8, r3, #32
 80097da:	bfbc      	itt	lt
 80097dc:	4622      	movlt	r2, r4
 80097de:	4614      	movlt	r4, r2
 80097e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097e4:	d005      	beq.n	80097f2 <__cvt+0x42>
 80097e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80097ea:	d100      	bne.n	80097ee <__cvt+0x3e>
 80097ec:	3601      	adds	r6, #1
 80097ee:	2102      	movs	r1, #2
 80097f0:	e000      	b.n	80097f4 <__cvt+0x44>
 80097f2:	2103      	movs	r1, #3
 80097f4:	ab03      	add	r3, sp, #12
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	ab02      	add	r3, sp, #8
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	ec45 4b10 	vmov	d0, r4, r5
 8009800:	4653      	mov	r3, sl
 8009802:	4632      	mov	r2, r6
 8009804:	f001 fde8 	bl	800b3d8 <_dtoa_r>
 8009808:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800980c:	4607      	mov	r7, r0
 800980e:	d102      	bne.n	8009816 <__cvt+0x66>
 8009810:	f019 0f01 	tst.w	r9, #1
 8009814:	d022      	beq.n	800985c <__cvt+0xac>
 8009816:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800981a:	eb07 0906 	add.w	r9, r7, r6
 800981e:	d110      	bne.n	8009842 <__cvt+0x92>
 8009820:	783b      	ldrb	r3, [r7, #0]
 8009822:	2b30      	cmp	r3, #48	; 0x30
 8009824:	d10a      	bne.n	800983c <__cvt+0x8c>
 8009826:	2200      	movs	r2, #0
 8009828:	2300      	movs	r3, #0
 800982a:	4620      	mov	r0, r4
 800982c:	4629      	mov	r1, r5
 800982e:	f7f7 f94b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009832:	b918      	cbnz	r0, 800983c <__cvt+0x8c>
 8009834:	f1c6 0601 	rsb	r6, r6, #1
 8009838:	f8ca 6000 	str.w	r6, [sl]
 800983c:	f8da 3000 	ldr.w	r3, [sl]
 8009840:	4499      	add	r9, r3
 8009842:	2200      	movs	r2, #0
 8009844:	2300      	movs	r3, #0
 8009846:	4620      	mov	r0, r4
 8009848:	4629      	mov	r1, r5
 800984a:	f7f7 f93d 	bl	8000ac8 <__aeabi_dcmpeq>
 800984e:	b108      	cbz	r0, 8009854 <__cvt+0xa4>
 8009850:	f8cd 900c 	str.w	r9, [sp, #12]
 8009854:	2230      	movs	r2, #48	; 0x30
 8009856:	9b03      	ldr	r3, [sp, #12]
 8009858:	454b      	cmp	r3, r9
 800985a:	d307      	bcc.n	800986c <__cvt+0xbc>
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009860:	1bdb      	subs	r3, r3, r7
 8009862:	4638      	mov	r0, r7
 8009864:	6013      	str	r3, [r2, #0]
 8009866:	b004      	add	sp, #16
 8009868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800986c:	1c59      	adds	r1, r3, #1
 800986e:	9103      	str	r1, [sp, #12]
 8009870:	701a      	strb	r2, [r3, #0]
 8009872:	e7f0      	b.n	8009856 <__cvt+0xa6>

08009874 <__exponent>:
 8009874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009876:	4603      	mov	r3, r0
 8009878:	2900      	cmp	r1, #0
 800987a:	bfb8      	it	lt
 800987c:	4249      	neglt	r1, r1
 800987e:	f803 2b02 	strb.w	r2, [r3], #2
 8009882:	bfb4      	ite	lt
 8009884:	222d      	movlt	r2, #45	; 0x2d
 8009886:	222b      	movge	r2, #43	; 0x2b
 8009888:	2909      	cmp	r1, #9
 800988a:	7042      	strb	r2, [r0, #1]
 800988c:	dd2a      	ble.n	80098e4 <__exponent+0x70>
 800988e:	f10d 0407 	add.w	r4, sp, #7
 8009892:	46a4      	mov	ip, r4
 8009894:	270a      	movs	r7, #10
 8009896:	46a6      	mov	lr, r4
 8009898:	460a      	mov	r2, r1
 800989a:	fb91 f6f7 	sdiv	r6, r1, r7
 800989e:	fb07 1516 	mls	r5, r7, r6, r1
 80098a2:	3530      	adds	r5, #48	; 0x30
 80098a4:	2a63      	cmp	r2, #99	; 0x63
 80098a6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80098aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80098ae:	4631      	mov	r1, r6
 80098b0:	dcf1      	bgt.n	8009896 <__exponent+0x22>
 80098b2:	3130      	adds	r1, #48	; 0x30
 80098b4:	f1ae 0502 	sub.w	r5, lr, #2
 80098b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80098bc:	1c44      	adds	r4, r0, #1
 80098be:	4629      	mov	r1, r5
 80098c0:	4561      	cmp	r1, ip
 80098c2:	d30a      	bcc.n	80098da <__exponent+0x66>
 80098c4:	f10d 0209 	add.w	r2, sp, #9
 80098c8:	eba2 020e 	sub.w	r2, r2, lr
 80098cc:	4565      	cmp	r5, ip
 80098ce:	bf88      	it	hi
 80098d0:	2200      	movhi	r2, #0
 80098d2:	4413      	add	r3, r2
 80098d4:	1a18      	subs	r0, r3, r0
 80098d6:	b003      	add	sp, #12
 80098d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80098e2:	e7ed      	b.n	80098c0 <__exponent+0x4c>
 80098e4:	2330      	movs	r3, #48	; 0x30
 80098e6:	3130      	adds	r1, #48	; 0x30
 80098e8:	7083      	strb	r3, [r0, #2]
 80098ea:	70c1      	strb	r1, [r0, #3]
 80098ec:	1d03      	adds	r3, r0, #4
 80098ee:	e7f1      	b.n	80098d4 <__exponent+0x60>

080098f0 <_printf_float>:
 80098f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	ed2d 8b02 	vpush	{d8}
 80098f8:	b08d      	sub	sp, #52	; 0x34
 80098fa:	460c      	mov	r4, r1
 80098fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009900:	4616      	mov	r6, r2
 8009902:	461f      	mov	r7, r3
 8009904:	4605      	mov	r5, r0
 8009906:	f002 fec3 	bl	800c690 <_localeconv_r>
 800990a:	f8d0 a000 	ldr.w	sl, [r0]
 800990e:	4650      	mov	r0, sl
 8009910:	f7f6 fc5e 	bl	80001d0 <strlen>
 8009914:	2300      	movs	r3, #0
 8009916:	930a      	str	r3, [sp, #40]	; 0x28
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	9305      	str	r3, [sp, #20]
 800991c:	f8d8 3000 	ldr.w	r3, [r8]
 8009920:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009924:	3307      	adds	r3, #7
 8009926:	f023 0307 	bic.w	r3, r3, #7
 800992a:	f103 0208 	add.w	r2, r3, #8
 800992e:	f8c8 2000 	str.w	r2, [r8]
 8009932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009936:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800993a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800993e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009942:	9307      	str	r3, [sp, #28]
 8009944:	f8cd 8018 	str.w	r8, [sp, #24]
 8009948:	ee08 0a10 	vmov	s16, r0
 800994c:	4b9f      	ldr	r3, [pc, #636]	; (8009bcc <_printf_float+0x2dc>)
 800994e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009956:	f7f7 f8e9 	bl	8000b2c <__aeabi_dcmpun>
 800995a:	bb88      	cbnz	r0, 80099c0 <_printf_float+0xd0>
 800995c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009960:	4b9a      	ldr	r3, [pc, #616]	; (8009bcc <_printf_float+0x2dc>)
 8009962:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009966:	f7f7 f8c3 	bl	8000af0 <__aeabi_dcmple>
 800996a:	bb48      	cbnz	r0, 80099c0 <_printf_float+0xd0>
 800996c:	2200      	movs	r2, #0
 800996e:	2300      	movs	r3, #0
 8009970:	4640      	mov	r0, r8
 8009972:	4649      	mov	r1, r9
 8009974:	f7f7 f8b2 	bl	8000adc <__aeabi_dcmplt>
 8009978:	b110      	cbz	r0, 8009980 <_printf_float+0x90>
 800997a:	232d      	movs	r3, #45	; 0x2d
 800997c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009980:	4b93      	ldr	r3, [pc, #588]	; (8009bd0 <_printf_float+0x2e0>)
 8009982:	4894      	ldr	r0, [pc, #592]	; (8009bd4 <_printf_float+0x2e4>)
 8009984:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009988:	bf94      	ite	ls
 800998a:	4698      	movls	r8, r3
 800998c:	4680      	movhi	r8, r0
 800998e:	2303      	movs	r3, #3
 8009990:	6123      	str	r3, [r4, #16]
 8009992:	9b05      	ldr	r3, [sp, #20]
 8009994:	f023 0204 	bic.w	r2, r3, #4
 8009998:	6022      	str	r2, [r4, #0]
 800999a:	f04f 0900 	mov.w	r9, #0
 800999e:	9700      	str	r7, [sp, #0]
 80099a0:	4633      	mov	r3, r6
 80099a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80099a4:	4621      	mov	r1, r4
 80099a6:	4628      	mov	r0, r5
 80099a8:	f000 f9d8 	bl	8009d5c <_printf_common>
 80099ac:	3001      	adds	r0, #1
 80099ae:	f040 8090 	bne.w	8009ad2 <_printf_float+0x1e2>
 80099b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099b6:	b00d      	add	sp, #52	; 0x34
 80099b8:	ecbd 8b02 	vpop	{d8}
 80099bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c0:	4642      	mov	r2, r8
 80099c2:	464b      	mov	r3, r9
 80099c4:	4640      	mov	r0, r8
 80099c6:	4649      	mov	r1, r9
 80099c8:	f7f7 f8b0 	bl	8000b2c <__aeabi_dcmpun>
 80099cc:	b140      	cbz	r0, 80099e0 <_printf_float+0xf0>
 80099ce:	464b      	mov	r3, r9
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	bfbc      	itt	lt
 80099d4:	232d      	movlt	r3, #45	; 0x2d
 80099d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099da:	487f      	ldr	r0, [pc, #508]	; (8009bd8 <_printf_float+0x2e8>)
 80099dc:	4b7f      	ldr	r3, [pc, #508]	; (8009bdc <_printf_float+0x2ec>)
 80099de:	e7d1      	b.n	8009984 <_printf_float+0x94>
 80099e0:	6863      	ldr	r3, [r4, #4]
 80099e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80099e6:	9206      	str	r2, [sp, #24]
 80099e8:	1c5a      	adds	r2, r3, #1
 80099ea:	d13f      	bne.n	8009a6c <_printf_float+0x17c>
 80099ec:	2306      	movs	r3, #6
 80099ee:	6063      	str	r3, [r4, #4]
 80099f0:	9b05      	ldr	r3, [sp, #20]
 80099f2:	6861      	ldr	r1, [r4, #4]
 80099f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80099f8:	2300      	movs	r3, #0
 80099fa:	9303      	str	r3, [sp, #12]
 80099fc:	ab0a      	add	r3, sp, #40	; 0x28
 80099fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a02:	ab09      	add	r3, sp, #36	; 0x24
 8009a04:	ec49 8b10 	vmov	d0, r8, r9
 8009a08:	9300      	str	r3, [sp, #0]
 8009a0a:	6022      	str	r2, [r4, #0]
 8009a0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a10:	4628      	mov	r0, r5
 8009a12:	f7ff fecd 	bl	80097b0 <__cvt>
 8009a16:	9b06      	ldr	r3, [sp, #24]
 8009a18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a1a:	2b47      	cmp	r3, #71	; 0x47
 8009a1c:	4680      	mov	r8, r0
 8009a1e:	d108      	bne.n	8009a32 <_printf_float+0x142>
 8009a20:	1cc8      	adds	r0, r1, #3
 8009a22:	db02      	blt.n	8009a2a <_printf_float+0x13a>
 8009a24:	6863      	ldr	r3, [r4, #4]
 8009a26:	4299      	cmp	r1, r3
 8009a28:	dd41      	ble.n	8009aae <_printf_float+0x1be>
 8009a2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009a2e:	fa5f fb8b 	uxtb.w	fp, fp
 8009a32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a36:	d820      	bhi.n	8009a7a <_printf_float+0x18a>
 8009a38:	3901      	subs	r1, #1
 8009a3a:	465a      	mov	r2, fp
 8009a3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a40:	9109      	str	r1, [sp, #36]	; 0x24
 8009a42:	f7ff ff17 	bl	8009874 <__exponent>
 8009a46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a48:	1813      	adds	r3, r2, r0
 8009a4a:	2a01      	cmp	r2, #1
 8009a4c:	4681      	mov	r9, r0
 8009a4e:	6123      	str	r3, [r4, #16]
 8009a50:	dc02      	bgt.n	8009a58 <_printf_float+0x168>
 8009a52:	6822      	ldr	r2, [r4, #0]
 8009a54:	07d2      	lsls	r2, r2, #31
 8009a56:	d501      	bpl.n	8009a5c <_printf_float+0x16c>
 8009a58:	3301      	adds	r3, #1
 8009a5a:	6123      	str	r3, [r4, #16]
 8009a5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d09c      	beq.n	800999e <_printf_float+0xae>
 8009a64:	232d      	movs	r3, #45	; 0x2d
 8009a66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a6a:	e798      	b.n	800999e <_printf_float+0xae>
 8009a6c:	9a06      	ldr	r2, [sp, #24]
 8009a6e:	2a47      	cmp	r2, #71	; 0x47
 8009a70:	d1be      	bne.n	80099f0 <_printf_float+0x100>
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1bc      	bne.n	80099f0 <_printf_float+0x100>
 8009a76:	2301      	movs	r3, #1
 8009a78:	e7b9      	b.n	80099ee <_printf_float+0xfe>
 8009a7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a7e:	d118      	bne.n	8009ab2 <_printf_float+0x1c2>
 8009a80:	2900      	cmp	r1, #0
 8009a82:	6863      	ldr	r3, [r4, #4]
 8009a84:	dd0b      	ble.n	8009a9e <_printf_float+0x1ae>
 8009a86:	6121      	str	r1, [r4, #16]
 8009a88:	b913      	cbnz	r3, 8009a90 <_printf_float+0x1a0>
 8009a8a:	6822      	ldr	r2, [r4, #0]
 8009a8c:	07d0      	lsls	r0, r2, #31
 8009a8e:	d502      	bpl.n	8009a96 <_printf_float+0x1a6>
 8009a90:	3301      	adds	r3, #1
 8009a92:	440b      	add	r3, r1
 8009a94:	6123      	str	r3, [r4, #16]
 8009a96:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a98:	f04f 0900 	mov.w	r9, #0
 8009a9c:	e7de      	b.n	8009a5c <_printf_float+0x16c>
 8009a9e:	b913      	cbnz	r3, 8009aa6 <_printf_float+0x1b6>
 8009aa0:	6822      	ldr	r2, [r4, #0]
 8009aa2:	07d2      	lsls	r2, r2, #31
 8009aa4:	d501      	bpl.n	8009aaa <_printf_float+0x1ba>
 8009aa6:	3302      	adds	r3, #2
 8009aa8:	e7f4      	b.n	8009a94 <_printf_float+0x1a4>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e7f2      	b.n	8009a94 <_printf_float+0x1a4>
 8009aae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ab4:	4299      	cmp	r1, r3
 8009ab6:	db05      	blt.n	8009ac4 <_printf_float+0x1d4>
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	6121      	str	r1, [r4, #16]
 8009abc:	07d8      	lsls	r0, r3, #31
 8009abe:	d5ea      	bpl.n	8009a96 <_printf_float+0x1a6>
 8009ac0:	1c4b      	adds	r3, r1, #1
 8009ac2:	e7e7      	b.n	8009a94 <_printf_float+0x1a4>
 8009ac4:	2900      	cmp	r1, #0
 8009ac6:	bfd4      	ite	le
 8009ac8:	f1c1 0202 	rsble	r2, r1, #2
 8009acc:	2201      	movgt	r2, #1
 8009ace:	4413      	add	r3, r2
 8009ad0:	e7e0      	b.n	8009a94 <_printf_float+0x1a4>
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	055a      	lsls	r2, r3, #21
 8009ad6:	d407      	bmi.n	8009ae8 <_printf_float+0x1f8>
 8009ad8:	6923      	ldr	r3, [r4, #16]
 8009ada:	4642      	mov	r2, r8
 8009adc:	4631      	mov	r1, r6
 8009ade:	4628      	mov	r0, r5
 8009ae0:	47b8      	blx	r7
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	d12c      	bne.n	8009b40 <_printf_float+0x250>
 8009ae6:	e764      	b.n	80099b2 <_printf_float+0xc2>
 8009ae8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009aec:	f240 80e0 	bls.w	8009cb0 <_printf_float+0x3c0>
 8009af0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009af4:	2200      	movs	r2, #0
 8009af6:	2300      	movs	r3, #0
 8009af8:	f7f6 ffe6 	bl	8000ac8 <__aeabi_dcmpeq>
 8009afc:	2800      	cmp	r0, #0
 8009afe:	d034      	beq.n	8009b6a <_printf_float+0x27a>
 8009b00:	4a37      	ldr	r2, [pc, #220]	; (8009be0 <_printf_float+0x2f0>)
 8009b02:	2301      	movs	r3, #1
 8009b04:	4631      	mov	r1, r6
 8009b06:	4628      	mov	r0, r5
 8009b08:	47b8      	blx	r7
 8009b0a:	3001      	adds	r0, #1
 8009b0c:	f43f af51 	beq.w	80099b2 <_printf_float+0xc2>
 8009b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b14:	429a      	cmp	r2, r3
 8009b16:	db02      	blt.n	8009b1e <_printf_float+0x22e>
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	07d8      	lsls	r0, r3, #31
 8009b1c:	d510      	bpl.n	8009b40 <_printf_float+0x250>
 8009b1e:	ee18 3a10 	vmov	r3, s16
 8009b22:	4652      	mov	r2, sl
 8009b24:	4631      	mov	r1, r6
 8009b26:	4628      	mov	r0, r5
 8009b28:	47b8      	blx	r7
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	f43f af41 	beq.w	80099b2 <_printf_float+0xc2>
 8009b30:	f04f 0800 	mov.w	r8, #0
 8009b34:	f104 091a 	add.w	r9, r4, #26
 8009b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	4543      	cmp	r3, r8
 8009b3e:	dc09      	bgt.n	8009b54 <_printf_float+0x264>
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	079b      	lsls	r3, r3, #30
 8009b44:	f100 8105 	bmi.w	8009d52 <_printf_float+0x462>
 8009b48:	68e0      	ldr	r0, [r4, #12]
 8009b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b4c:	4298      	cmp	r0, r3
 8009b4e:	bfb8      	it	lt
 8009b50:	4618      	movlt	r0, r3
 8009b52:	e730      	b.n	80099b6 <_printf_float+0xc6>
 8009b54:	2301      	movs	r3, #1
 8009b56:	464a      	mov	r2, r9
 8009b58:	4631      	mov	r1, r6
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	47b8      	blx	r7
 8009b5e:	3001      	adds	r0, #1
 8009b60:	f43f af27 	beq.w	80099b2 <_printf_float+0xc2>
 8009b64:	f108 0801 	add.w	r8, r8, #1
 8009b68:	e7e6      	b.n	8009b38 <_printf_float+0x248>
 8009b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	dc39      	bgt.n	8009be4 <_printf_float+0x2f4>
 8009b70:	4a1b      	ldr	r2, [pc, #108]	; (8009be0 <_printf_float+0x2f0>)
 8009b72:	2301      	movs	r3, #1
 8009b74:	4631      	mov	r1, r6
 8009b76:	4628      	mov	r0, r5
 8009b78:	47b8      	blx	r7
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	f43f af19 	beq.w	80099b2 <_printf_float+0xc2>
 8009b80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b84:	4313      	orrs	r3, r2
 8009b86:	d102      	bne.n	8009b8e <_printf_float+0x29e>
 8009b88:	6823      	ldr	r3, [r4, #0]
 8009b8a:	07d9      	lsls	r1, r3, #31
 8009b8c:	d5d8      	bpl.n	8009b40 <_printf_float+0x250>
 8009b8e:	ee18 3a10 	vmov	r3, s16
 8009b92:	4652      	mov	r2, sl
 8009b94:	4631      	mov	r1, r6
 8009b96:	4628      	mov	r0, r5
 8009b98:	47b8      	blx	r7
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	f43f af09 	beq.w	80099b2 <_printf_float+0xc2>
 8009ba0:	f04f 0900 	mov.w	r9, #0
 8009ba4:	f104 0a1a 	add.w	sl, r4, #26
 8009ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009baa:	425b      	negs	r3, r3
 8009bac:	454b      	cmp	r3, r9
 8009bae:	dc01      	bgt.n	8009bb4 <_printf_float+0x2c4>
 8009bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bb2:	e792      	b.n	8009ada <_printf_float+0x1ea>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	4652      	mov	r2, sl
 8009bb8:	4631      	mov	r1, r6
 8009bba:	4628      	mov	r0, r5
 8009bbc:	47b8      	blx	r7
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	f43f aef7 	beq.w	80099b2 <_printf_float+0xc2>
 8009bc4:	f109 0901 	add.w	r9, r9, #1
 8009bc8:	e7ee      	b.n	8009ba8 <_printf_float+0x2b8>
 8009bca:	bf00      	nop
 8009bcc:	7fefffff 	.word	0x7fefffff
 8009bd0:	0800e0fc 	.word	0x0800e0fc
 8009bd4:	0800e100 	.word	0x0800e100
 8009bd8:	0800e108 	.word	0x0800e108
 8009bdc:	0800e104 	.word	0x0800e104
 8009be0:	0800e10c 	.word	0x0800e10c
 8009be4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009be6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009be8:	429a      	cmp	r2, r3
 8009bea:	bfa8      	it	ge
 8009bec:	461a      	movge	r2, r3
 8009bee:	2a00      	cmp	r2, #0
 8009bf0:	4691      	mov	r9, r2
 8009bf2:	dc37      	bgt.n	8009c64 <_printf_float+0x374>
 8009bf4:	f04f 0b00 	mov.w	fp, #0
 8009bf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bfc:	f104 021a 	add.w	r2, r4, #26
 8009c00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c02:	9305      	str	r3, [sp, #20]
 8009c04:	eba3 0309 	sub.w	r3, r3, r9
 8009c08:	455b      	cmp	r3, fp
 8009c0a:	dc33      	bgt.n	8009c74 <_printf_float+0x384>
 8009c0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c10:	429a      	cmp	r2, r3
 8009c12:	db3b      	blt.n	8009c8c <_printf_float+0x39c>
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	07da      	lsls	r2, r3, #31
 8009c18:	d438      	bmi.n	8009c8c <_printf_float+0x39c>
 8009c1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c1c:	9b05      	ldr	r3, [sp, #20]
 8009c1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	eba2 0901 	sub.w	r9, r2, r1
 8009c26:	4599      	cmp	r9, r3
 8009c28:	bfa8      	it	ge
 8009c2a:	4699      	movge	r9, r3
 8009c2c:	f1b9 0f00 	cmp.w	r9, #0
 8009c30:	dc35      	bgt.n	8009c9e <_printf_float+0x3ae>
 8009c32:	f04f 0800 	mov.w	r8, #0
 8009c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c3a:	f104 0a1a 	add.w	sl, r4, #26
 8009c3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c42:	1a9b      	subs	r3, r3, r2
 8009c44:	eba3 0309 	sub.w	r3, r3, r9
 8009c48:	4543      	cmp	r3, r8
 8009c4a:	f77f af79 	ble.w	8009b40 <_printf_float+0x250>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	4652      	mov	r2, sl
 8009c52:	4631      	mov	r1, r6
 8009c54:	4628      	mov	r0, r5
 8009c56:	47b8      	blx	r7
 8009c58:	3001      	adds	r0, #1
 8009c5a:	f43f aeaa 	beq.w	80099b2 <_printf_float+0xc2>
 8009c5e:	f108 0801 	add.w	r8, r8, #1
 8009c62:	e7ec      	b.n	8009c3e <_printf_float+0x34e>
 8009c64:	4613      	mov	r3, r2
 8009c66:	4631      	mov	r1, r6
 8009c68:	4642      	mov	r2, r8
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	47b8      	blx	r7
 8009c6e:	3001      	adds	r0, #1
 8009c70:	d1c0      	bne.n	8009bf4 <_printf_float+0x304>
 8009c72:	e69e      	b.n	80099b2 <_printf_float+0xc2>
 8009c74:	2301      	movs	r3, #1
 8009c76:	4631      	mov	r1, r6
 8009c78:	4628      	mov	r0, r5
 8009c7a:	9205      	str	r2, [sp, #20]
 8009c7c:	47b8      	blx	r7
 8009c7e:	3001      	adds	r0, #1
 8009c80:	f43f ae97 	beq.w	80099b2 <_printf_float+0xc2>
 8009c84:	9a05      	ldr	r2, [sp, #20]
 8009c86:	f10b 0b01 	add.w	fp, fp, #1
 8009c8a:	e7b9      	b.n	8009c00 <_printf_float+0x310>
 8009c8c:	ee18 3a10 	vmov	r3, s16
 8009c90:	4652      	mov	r2, sl
 8009c92:	4631      	mov	r1, r6
 8009c94:	4628      	mov	r0, r5
 8009c96:	47b8      	blx	r7
 8009c98:	3001      	adds	r0, #1
 8009c9a:	d1be      	bne.n	8009c1a <_printf_float+0x32a>
 8009c9c:	e689      	b.n	80099b2 <_printf_float+0xc2>
 8009c9e:	9a05      	ldr	r2, [sp, #20]
 8009ca0:	464b      	mov	r3, r9
 8009ca2:	4442      	add	r2, r8
 8009ca4:	4631      	mov	r1, r6
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	47b8      	blx	r7
 8009caa:	3001      	adds	r0, #1
 8009cac:	d1c1      	bne.n	8009c32 <_printf_float+0x342>
 8009cae:	e680      	b.n	80099b2 <_printf_float+0xc2>
 8009cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cb2:	2a01      	cmp	r2, #1
 8009cb4:	dc01      	bgt.n	8009cba <_printf_float+0x3ca>
 8009cb6:	07db      	lsls	r3, r3, #31
 8009cb8:	d538      	bpl.n	8009d2c <_printf_float+0x43c>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	4642      	mov	r2, r8
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	47b8      	blx	r7
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	f43f ae74 	beq.w	80099b2 <_printf_float+0xc2>
 8009cca:	ee18 3a10 	vmov	r3, s16
 8009cce:	4652      	mov	r2, sl
 8009cd0:	4631      	mov	r1, r6
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	47b8      	blx	r7
 8009cd6:	3001      	adds	r0, #1
 8009cd8:	f43f ae6b 	beq.w	80099b2 <_printf_float+0xc2>
 8009cdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	f7f6 fef0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ce8:	b9d8      	cbnz	r0, 8009d22 <_printf_float+0x432>
 8009cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cec:	f108 0201 	add.w	r2, r8, #1
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	4631      	mov	r1, r6
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	47b8      	blx	r7
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	d10e      	bne.n	8009d1a <_printf_float+0x42a>
 8009cfc:	e659      	b.n	80099b2 <_printf_float+0xc2>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	4652      	mov	r2, sl
 8009d02:	4631      	mov	r1, r6
 8009d04:	4628      	mov	r0, r5
 8009d06:	47b8      	blx	r7
 8009d08:	3001      	adds	r0, #1
 8009d0a:	f43f ae52 	beq.w	80099b2 <_printf_float+0xc2>
 8009d0e:	f108 0801 	add.w	r8, r8, #1
 8009d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d14:	3b01      	subs	r3, #1
 8009d16:	4543      	cmp	r3, r8
 8009d18:	dcf1      	bgt.n	8009cfe <_printf_float+0x40e>
 8009d1a:	464b      	mov	r3, r9
 8009d1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d20:	e6dc      	b.n	8009adc <_printf_float+0x1ec>
 8009d22:	f04f 0800 	mov.w	r8, #0
 8009d26:	f104 0a1a 	add.w	sl, r4, #26
 8009d2a:	e7f2      	b.n	8009d12 <_printf_float+0x422>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	4642      	mov	r2, r8
 8009d30:	e7df      	b.n	8009cf2 <_printf_float+0x402>
 8009d32:	2301      	movs	r3, #1
 8009d34:	464a      	mov	r2, r9
 8009d36:	4631      	mov	r1, r6
 8009d38:	4628      	mov	r0, r5
 8009d3a:	47b8      	blx	r7
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	f43f ae38 	beq.w	80099b2 <_printf_float+0xc2>
 8009d42:	f108 0801 	add.w	r8, r8, #1
 8009d46:	68e3      	ldr	r3, [r4, #12]
 8009d48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d4a:	1a5b      	subs	r3, r3, r1
 8009d4c:	4543      	cmp	r3, r8
 8009d4e:	dcf0      	bgt.n	8009d32 <_printf_float+0x442>
 8009d50:	e6fa      	b.n	8009b48 <_printf_float+0x258>
 8009d52:	f04f 0800 	mov.w	r8, #0
 8009d56:	f104 0919 	add.w	r9, r4, #25
 8009d5a:	e7f4      	b.n	8009d46 <_printf_float+0x456>

08009d5c <_printf_common>:
 8009d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d60:	4616      	mov	r6, r2
 8009d62:	4699      	mov	r9, r3
 8009d64:	688a      	ldr	r2, [r1, #8]
 8009d66:	690b      	ldr	r3, [r1, #16]
 8009d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	bfb8      	it	lt
 8009d70:	4613      	movlt	r3, r2
 8009d72:	6033      	str	r3, [r6, #0]
 8009d74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d78:	4607      	mov	r7, r0
 8009d7a:	460c      	mov	r4, r1
 8009d7c:	b10a      	cbz	r2, 8009d82 <_printf_common+0x26>
 8009d7e:	3301      	adds	r3, #1
 8009d80:	6033      	str	r3, [r6, #0]
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	0699      	lsls	r1, r3, #26
 8009d86:	bf42      	ittt	mi
 8009d88:	6833      	ldrmi	r3, [r6, #0]
 8009d8a:	3302      	addmi	r3, #2
 8009d8c:	6033      	strmi	r3, [r6, #0]
 8009d8e:	6825      	ldr	r5, [r4, #0]
 8009d90:	f015 0506 	ands.w	r5, r5, #6
 8009d94:	d106      	bne.n	8009da4 <_printf_common+0x48>
 8009d96:	f104 0a19 	add.w	sl, r4, #25
 8009d9a:	68e3      	ldr	r3, [r4, #12]
 8009d9c:	6832      	ldr	r2, [r6, #0]
 8009d9e:	1a9b      	subs	r3, r3, r2
 8009da0:	42ab      	cmp	r3, r5
 8009da2:	dc26      	bgt.n	8009df2 <_printf_common+0x96>
 8009da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009da8:	1e13      	subs	r3, r2, #0
 8009daa:	6822      	ldr	r2, [r4, #0]
 8009dac:	bf18      	it	ne
 8009dae:	2301      	movne	r3, #1
 8009db0:	0692      	lsls	r2, r2, #26
 8009db2:	d42b      	bmi.n	8009e0c <_printf_common+0xb0>
 8009db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009db8:	4649      	mov	r1, r9
 8009dba:	4638      	mov	r0, r7
 8009dbc:	47c0      	blx	r8
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	d01e      	beq.n	8009e00 <_printf_common+0xa4>
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	68e5      	ldr	r5, [r4, #12]
 8009dc6:	6832      	ldr	r2, [r6, #0]
 8009dc8:	f003 0306 	and.w	r3, r3, #6
 8009dcc:	2b04      	cmp	r3, #4
 8009dce:	bf08      	it	eq
 8009dd0:	1aad      	subeq	r5, r5, r2
 8009dd2:	68a3      	ldr	r3, [r4, #8]
 8009dd4:	6922      	ldr	r2, [r4, #16]
 8009dd6:	bf0c      	ite	eq
 8009dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ddc:	2500      	movne	r5, #0
 8009dde:	4293      	cmp	r3, r2
 8009de0:	bfc4      	itt	gt
 8009de2:	1a9b      	subgt	r3, r3, r2
 8009de4:	18ed      	addgt	r5, r5, r3
 8009de6:	2600      	movs	r6, #0
 8009de8:	341a      	adds	r4, #26
 8009dea:	42b5      	cmp	r5, r6
 8009dec:	d11a      	bne.n	8009e24 <_printf_common+0xc8>
 8009dee:	2000      	movs	r0, #0
 8009df0:	e008      	b.n	8009e04 <_printf_common+0xa8>
 8009df2:	2301      	movs	r3, #1
 8009df4:	4652      	mov	r2, sl
 8009df6:	4649      	mov	r1, r9
 8009df8:	4638      	mov	r0, r7
 8009dfa:	47c0      	blx	r8
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d103      	bne.n	8009e08 <_printf_common+0xac>
 8009e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e08:	3501      	adds	r5, #1
 8009e0a:	e7c6      	b.n	8009d9a <_printf_common+0x3e>
 8009e0c:	18e1      	adds	r1, r4, r3
 8009e0e:	1c5a      	adds	r2, r3, #1
 8009e10:	2030      	movs	r0, #48	; 0x30
 8009e12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e16:	4422      	add	r2, r4
 8009e18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e20:	3302      	adds	r3, #2
 8009e22:	e7c7      	b.n	8009db4 <_printf_common+0x58>
 8009e24:	2301      	movs	r3, #1
 8009e26:	4622      	mov	r2, r4
 8009e28:	4649      	mov	r1, r9
 8009e2a:	4638      	mov	r0, r7
 8009e2c:	47c0      	blx	r8
 8009e2e:	3001      	adds	r0, #1
 8009e30:	d0e6      	beq.n	8009e00 <_printf_common+0xa4>
 8009e32:	3601      	adds	r6, #1
 8009e34:	e7d9      	b.n	8009dea <_printf_common+0x8e>
	...

08009e38 <_printf_i>:
 8009e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	4691      	mov	r9, r2
 8009e40:	7e27      	ldrb	r7, [r4, #24]
 8009e42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009e44:	2f78      	cmp	r7, #120	; 0x78
 8009e46:	4680      	mov	r8, r0
 8009e48:	469a      	mov	sl, r3
 8009e4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e4e:	d807      	bhi.n	8009e60 <_printf_i+0x28>
 8009e50:	2f62      	cmp	r7, #98	; 0x62
 8009e52:	d80a      	bhi.n	8009e6a <_printf_i+0x32>
 8009e54:	2f00      	cmp	r7, #0
 8009e56:	f000 80d8 	beq.w	800a00a <_printf_i+0x1d2>
 8009e5a:	2f58      	cmp	r7, #88	; 0x58
 8009e5c:	f000 80a3 	beq.w	8009fa6 <_printf_i+0x16e>
 8009e60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e68:	e03a      	b.n	8009ee0 <_printf_i+0xa8>
 8009e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e6e:	2b15      	cmp	r3, #21
 8009e70:	d8f6      	bhi.n	8009e60 <_printf_i+0x28>
 8009e72:	a001      	add	r0, pc, #4	; (adr r0, 8009e78 <_printf_i+0x40>)
 8009e74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009e78:	08009ed1 	.word	0x08009ed1
 8009e7c:	08009ee5 	.word	0x08009ee5
 8009e80:	08009e61 	.word	0x08009e61
 8009e84:	08009e61 	.word	0x08009e61
 8009e88:	08009e61 	.word	0x08009e61
 8009e8c:	08009e61 	.word	0x08009e61
 8009e90:	08009ee5 	.word	0x08009ee5
 8009e94:	08009e61 	.word	0x08009e61
 8009e98:	08009e61 	.word	0x08009e61
 8009e9c:	08009e61 	.word	0x08009e61
 8009ea0:	08009e61 	.word	0x08009e61
 8009ea4:	08009ff1 	.word	0x08009ff1
 8009ea8:	08009f15 	.word	0x08009f15
 8009eac:	08009fd3 	.word	0x08009fd3
 8009eb0:	08009e61 	.word	0x08009e61
 8009eb4:	08009e61 	.word	0x08009e61
 8009eb8:	0800a013 	.word	0x0800a013
 8009ebc:	08009e61 	.word	0x08009e61
 8009ec0:	08009f15 	.word	0x08009f15
 8009ec4:	08009e61 	.word	0x08009e61
 8009ec8:	08009e61 	.word	0x08009e61
 8009ecc:	08009fdb 	.word	0x08009fdb
 8009ed0:	680b      	ldr	r3, [r1, #0]
 8009ed2:	1d1a      	adds	r2, r3, #4
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	600a      	str	r2, [r1, #0]
 8009ed8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e0a3      	b.n	800a02c <_printf_i+0x1f4>
 8009ee4:	6825      	ldr	r5, [r4, #0]
 8009ee6:	6808      	ldr	r0, [r1, #0]
 8009ee8:	062e      	lsls	r6, r5, #24
 8009eea:	f100 0304 	add.w	r3, r0, #4
 8009eee:	d50a      	bpl.n	8009f06 <_printf_i+0xce>
 8009ef0:	6805      	ldr	r5, [r0, #0]
 8009ef2:	600b      	str	r3, [r1, #0]
 8009ef4:	2d00      	cmp	r5, #0
 8009ef6:	da03      	bge.n	8009f00 <_printf_i+0xc8>
 8009ef8:	232d      	movs	r3, #45	; 0x2d
 8009efa:	426d      	negs	r5, r5
 8009efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f00:	485e      	ldr	r0, [pc, #376]	; (800a07c <_printf_i+0x244>)
 8009f02:	230a      	movs	r3, #10
 8009f04:	e019      	b.n	8009f3a <_printf_i+0x102>
 8009f06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009f0a:	6805      	ldr	r5, [r0, #0]
 8009f0c:	600b      	str	r3, [r1, #0]
 8009f0e:	bf18      	it	ne
 8009f10:	b22d      	sxthne	r5, r5
 8009f12:	e7ef      	b.n	8009ef4 <_printf_i+0xbc>
 8009f14:	680b      	ldr	r3, [r1, #0]
 8009f16:	6825      	ldr	r5, [r4, #0]
 8009f18:	1d18      	adds	r0, r3, #4
 8009f1a:	6008      	str	r0, [r1, #0]
 8009f1c:	0628      	lsls	r0, r5, #24
 8009f1e:	d501      	bpl.n	8009f24 <_printf_i+0xec>
 8009f20:	681d      	ldr	r5, [r3, #0]
 8009f22:	e002      	b.n	8009f2a <_printf_i+0xf2>
 8009f24:	0669      	lsls	r1, r5, #25
 8009f26:	d5fb      	bpl.n	8009f20 <_printf_i+0xe8>
 8009f28:	881d      	ldrh	r5, [r3, #0]
 8009f2a:	4854      	ldr	r0, [pc, #336]	; (800a07c <_printf_i+0x244>)
 8009f2c:	2f6f      	cmp	r7, #111	; 0x6f
 8009f2e:	bf0c      	ite	eq
 8009f30:	2308      	moveq	r3, #8
 8009f32:	230a      	movne	r3, #10
 8009f34:	2100      	movs	r1, #0
 8009f36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f3a:	6866      	ldr	r6, [r4, #4]
 8009f3c:	60a6      	str	r6, [r4, #8]
 8009f3e:	2e00      	cmp	r6, #0
 8009f40:	bfa2      	ittt	ge
 8009f42:	6821      	ldrge	r1, [r4, #0]
 8009f44:	f021 0104 	bicge.w	r1, r1, #4
 8009f48:	6021      	strge	r1, [r4, #0]
 8009f4a:	b90d      	cbnz	r5, 8009f50 <_printf_i+0x118>
 8009f4c:	2e00      	cmp	r6, #0
 8009f4e:	d04d      	beq.n	8009fec <_printf_i+0x1b4>
 8009f50:	4616      	mov	r6, r2
 8009f52:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f56:	fb03 5711 	mls	r7, r3, r1, r5
 8009f5a:	5dc7      	ldrb	r7, [r0, r7]
 8009f5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f60:	462f      	mov	r7, r5
 8009f62:	42bb      	cmp	r3, r7
 8009f64:	460d      	mov	r5, r1
 8009f66:	d9f4      	bls.n	8009f52 <_printf_i+0x11a>
 8009f68:	2b08      	cmp	r3, #8
 8009f6a:	d10b      	bne.n	8009f84 <_printf_i+0x14c>
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	07df      	lsls	r7, r3, #31
 8009f70:	d508      	bpl.n	8009f84 <_printf_i+0x14c>
 8009f72:	6923      	ldr	r3, [r4, #16]
 8009f74:	6861      	ldr	r1, [r4, #4]
 8009f76:	4299      	cmp	r1, r3
 8009f78:	bfde      	ittt	le
 8009f7a:	2330      	movle	r3, #48	; 0x30
 8009f7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f80:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009f84:	1b92      	subs	r2, r2, r6
 8009f86:	6122      	str	r2, [r4, #16]
 8009f88:	f8cd a000 	str.w	sl, [sp]
 8009f8c:	464b      	mov	r3, r9
 8009f8e:	aa03      	add	r2, sp, #12
 8009f90:	4621      	mov	r1, r4
 8009f92:	4640      	mov	r0, r8
 8009f94:	f7ff fee2 	bl	8009d5c <_printf_common>
 8009f98:	3001      	adds	r0, #1
 8009f9a:	d14c      	bne.n	800a036 <_printf_i+0x1fe>
 8009f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fa0:	b004      	add	sp, #16
 8009fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa6:	4835      	ldr	r0, [pc, #212]	; (800a07c <_printf_i+0x244>)
 8009fa8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	680e      	ldr	r6, [r1, #0]
 8009fb0:	061f      	lsls	r7, r3, #24
 8009fb2:	f856 5b04 	ldr.w	r5, [r6], #4
 8009fb6:	600e      	str	r6, [r1, #0]
 8009fb8:	d514      	bpl.n	8009fe4 <_printf_i+0x1ac>
 8009fba:	07d9      	lsls	r1, r3, #31
 8009fbc:	bf44      	itt	mi
 8009fbe:	f043 0320 	orrmi.w	r3, r3, #32
 8009fc2:	6023      	strmi	r3, [r4, #0]
 8009fc4:	b91d      	cbnz	r5, 8009fce <_printf_i+0x196>
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	f023 0320 	bic.w	r3, r3, #32
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	2310      	movs	r3, #16
 8009fd0:	e7b0      	b.n	8009f34 <_printf_i+0xfc>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	f043 0320 	orr.w	r3, r3, #32
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	2378      	movs	r3, #120	; 0x78
 8009fdc:	4828      	ldr	r0, [pc, #160]	; (800a080 <_printf_i+0x248>)
 8009fde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fe2:	e7e3      	b.n	8009fac <_printf_i+0x174>
 8009fe4:	065e      	lsls	r6, r3, #25
 8009fe6:	bf48      	it	mi
 8009fe8:	b2ad      	uxthmi	r5, r5
 8009fea:	e7e6      	b.n	8009fba <_printf_i+0x182>
 8009fec:	4616      	mov	r6, r2
 8009fee:	e7bb      	b.n	8009f68 <_printf_i+0x130>
 8009ff0:	680b      	ldr	r3, [r1, #0]
 8009ff2:	6826      	ldr	r6, [r4, #0]
 8009ff4:	6960      	ldr	r0, [r4, #20]
 8009ff6:	1d1d      	adds	r5, r3, #4
 8009ff8:	600d      	str	r5, [r1, #0]
 8009ffa:	0635      	lsls	r5, r6, #24
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	d501      	bpl.n	800a004 <_printf_i+0x1cc>
 800a000:	6018      	str	r0, [r3, #0]
 800a002:	e002      	b.n	800a00a <_printf_i+0x1d2>
 800a004:	0671      	lsls	r1, r6, #25
 800a006:	d5fb      	bpl.n	800a000 <_printf_i+0x1c8>
 800a008:	8018      	strh	r0, [r3, #0]
 800a00a:	2300      	movs	r3, #0
 800a00c:	6123      	str	r3, [r4, #16]
 800a00e:	4616      	mov	r6, r2
 800a010:	e7ba      	b.n	8009f88 <_printf_i+0x150>
 800a012:	680b      	ldr	r3, [r1, #0]
 800a014:	1d1a      	adds	r2, r3, #4
 800a016:	600a      	str	r2, [r1, #0]
 800a018:	681e      	ldr	r6, [r3, #0]
 800a01a:	6862      	ldr	r2, [r4, #4]
 800a01c:	2100      	movs	r1, #0
 800a01e:	4630      	mov	r0, r6
 800a020:	f7f6 f8de 	bl	80001e0 <memchr>
 800a024:	b108      	cbz	r0, 800a02a <_printf_i+0x1f2>
 800a026:	1b80      	subs	r0, r0, r6
 800a028:	6060      	str	r0, [r4, #4]
 800a02a:	6863      	ldr	r3, [r4, #4]
 800a02c:	6123      	str	r3, [r4, #16]
 800a02e:	2300      	movs	r3, #0
 800a030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a034:	e7a8      	b.n	8009f88 <_printf_i+0x150>
 800a036:	6923      	ldr	r3, [r4, #16]
 800a038:	4632      	mov	r2, r6
 800a03a:	4649      	mov	r1, r9
 800a03c:	4640      	mov	r0, r8
 800a03e:	47d0      	blx	sl
 800a040:	3001      	adds	r0, #1
 800a042:	d0ab      	beq.n	8009f9c <_printf_i+0x164>
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	079b      	lsls	r3, r3, #30
 800a048:	d413      	bmi.n	800a072 <_printf_i+0x23a>
 800a04a:	68e0      	ldr	r0, [r4, #12]
 800a04c:	9b03      	ldr	r3, [sp, #12]
 800a04e:	4298      	cmp	r0, r3
 800a050:	bfb8      	it	lt
 800a052:	4618      	movlt	r0, r3
 800a054:	e7a4      	b.n	8009fa0 <_printf_i+0x168>
 800a056:	2301      	movs	r3, #1
 800a058:	4632      	mov	r2, r6
 800a05a:	4649      	mov	r1, r9
 800a05c:	4640      	mov	r0, r8
 800a05e:	47d0      	blx	sl
 800a060:	3001      	adds	r0, #1
 800a062:	d09b      	beq.n	8009f9c <_printf_i+0x164>
 800a064:	3501      	adds	r5, #1
 800a066:	68e3      	ldr	r3, [r4, #12]
 800a068:	9903      	ldr	r1, [sp, #12]
 800a06a:	1a5b      	subs	r3, r3, r1
 800a06c:	42ab      	cmp	r3, r5
 800a06e:	dcf2      	bgt.n	800a056 <_printf_i+0x21e>
 800a070:	e7eb      	b.n	800a04a <_printf_i+0x212>
 800a072:	2500      	movs	r5, #0
 800a074:	f104 0619 	add.w	r6, r4, #25
 800a078:	e7f5      	b.n	800a066 <_printf_i+0x22e>
 800a07a:	bf00      	nop
 800a07c:	0800e10e 	.word	0x0800e10e
 800a080:	0800e11f 	.word	0x0800e11f

0800a084 <_scanf_float>:
 800a084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a088:	b087      	sub	sp, #28
 800a08a:	4617      	mov	r7, r2
 800a08c:	9303      	str	r3, [sp, #12]
 800a08e:	688b      	ldr	r3, [r1, #8]
 800a090:	1e5a      	subs	r2, r3, #1
 800a092:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a096:	bf83      	ittte	hi
 800a098:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a09c:	195b      	addhi	r3, r3, r5
 800a09e:	9302      	strhi	r3, [sp, #8]
 800a0a0:	2300      	movls	r3, #0
 800a0a2:	bf86      	itte	hi
 800a0a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a0a8:	608b      	strhi	r3, [r1, #8]
 800a0aa:	9302      	strls	r3, [sp, #8]
 800a0ac:	680b      	ldr	r3, [r1, #0]
 800a0ae:	468b      	mov	fp, r1
 800a0b0:	2500      	movs	r5, #0
 800a0b2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a0b6:	f84b 3b1c 	str.w	r3, [fp], #28
 800a0ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a0be:	4680      	mov	r8, r0
 800a0c0:	460c      	mov	r4, r1
 800a0c2:	465e      	mov	r6, fp
 800a0c4:	46aa      	mov	sl, r5
 800a0c6:	46a9      	mov	r9, r5
 800a0c8:	9501      	str	r5, [sp, #4]
 800a0ca:	68a2      	ldr	r2, [r4, #8]
 800a0cc:	b152      	cbz	r2, 800a0e4 <_scanf_float+0x60>
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	2b4e      	cmp	r3, #78	; 0x4e
 800a0d4:	d864      	bhi.n	800a1a0 <_scanf_float+0x11c>
 800a0d6:	2b40      	cmp	r3, #64	; 0x40
 800a0d8:	d83c      	bhi.n	800a154 <_scanf_float+0xd0>
 800a0da:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a0de:	b2c8      	uxtb	r0, r1
 800a0e0:	280e      	cmp	r0, #14
 800a0e2:	d93a      	bls.n	800a15a <_scanf_float+0xd6>
 800a0e4:	f1b9 0f00 	cmp.w	r9, #0
 800a0e8:	d003      	beq.n	800a0f2 <_scanf_float+0x6e>
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a0f6:	f1ba 0f01 	cmp.w	sl, #1
 800a0fa:	f200 8113 	bhi.w	800a324 <_scanf_float+0x2a0>
 800a0fe:	455e      	cmp	r6, fp
 800a100:	f200 8105 	bhi.w	800a30e <_scanf_float+0x28a>
 800a104:	2501      	movs	r5, #1
 800a106:	4628      	mov	r0, r5
 800a108:	b007      	add	sp, #28
 800a10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a10e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a112:	2a0d      	cmp	r2, #13
 800a114:	d8e6      	bhi.n	800a0e4 <_scanf_float+0x60>
 800a116:	a101      	add	r1, pc, #4	; (adr r1, 800a11c <_scanf_float+0x98>)
 800a118:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a11c:	0800a25b 	.word	0x0800a25b
 800a120:	0800a0e5 	.word	0x0800a0e5
 800a124:	0800a0e5 	.word	0x0800a0e5
 800a128:	0800a0e5 	.word	0x0800a0e5
 800a12c:	0800a2bb 	.word	0x0800a2bb
 800a130:	0800a293 	.word	0x0800a293
 800a134:	0800a0e5 	.word	0x0800a0e5
 800a138:	0800a0e5 	.word	0x0800a0e5
 800a13c:	0800a269 	.word	0x0800a269
 800a140:	0800a0e5 	.word	0x0800a0e5
 800a144:	0800a0e5 	.word	0x0800a0e5
 800a148:	0800a0e5 	.word	0x0800a0e5
 800a14c:	0800a0e5 	.word	0x0800a0e5
 800a150:	0800a221 	.word	0x0800a221
 800a154:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a158:	e7db      	b.n	800a112 <_scanf_float+0x8e>
 800a15a:	290e      	cmp	r1, #14
 800a15c:	d8c2      	bhi.n	800a0e4 <_scanf_float+0x60>
 800a15e:	a001      	add	r0, pc, #4	; (adr r0, 800a164 <_scanf_float+0xe0>)
 800a160:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a164:	0800a213 	.word	0x0800a213
 800a168:	0800a0e5 	.word	0x0800a0e5
 800a16c:	0800a213 	.word	0x0800a213
 800a170:	0800a2a7 	.word	0x0800a2a7
 800a174:	0800a0e5 	.word	0x0800a0e5
 800a178:	0800a1c1 	.word	0x0800a1c1
 800a17c:	0800a1fd 	.word	0x0800a1fd
 800a180:	0800a1fd 	.word	0x0800a1fd
 800a184:	0800a1fd 	.word	0x0800a1fd
 800a188:	0800a1fd 	.word	0x0800a1fd
 800a18c:	0800a1fd 	.word	0x0800a1fd
 800a190:	0800a1fd 	.word	0x0800a1fd
 800a194:	0800a1fd 	.word	0x0800a1fd
 800a198:	0800a1fd 	.word	0x0800a1fd
 800a19c:	0800a1fd 	.word	0x0800a1fd
 800a1a0:	2b6e      	cmp	r3, #110	; 0x6e
 800a1a2:	d809      	bhi.n	800a1b8 <_scanf_float+0x134>
 800a1a4:	2b60      	cmp	r3, #96	; 0x60
 800a1a6:	d8b2      	bhi.n	800a10e <_scanf_float+0x8a>
 800a1a8:	2b54      	cmp	r3, #84	; 0x54
 800a1aa:	d077      	beq.n	800a29c <_scanf_float+0x218>
 800a1ac:	2b59      	cmp	r3, #89	; 0x59
 800a1ae:	d199      	bne.n	800a0e4 <_scanf_float+0x60>
 800a1b0:	2d07      	cmp	r5, #7
 800a1b2:	d197      	bne.n	800a0e4 <_scanf_float+0x60>
 800a1b4:	2508      	movs	r5, #8
 800a1b6:	e029      	b.n	800a20c <_scanf_float+0x188>
 800a1b8:	2b74      	cmp	r3, #116	; 0x74
 800a1ba:	d06f      	beq.n	800a29c <_scanf_float+0x218>
 800a1bc:	2b79      	cmp	r3, #121	; 0x79
 800a1be:	e7f6      	b.n	800a1ae <_scanf_float+0x12a>
 800a1c0:	6821      	ldr	r1, [r4, #0]
 800a1c2:	05c8      	lsls	r0, r1, #23
 800a1c4:	d51a      	bpl.n	800a1fc <_scanf_float+0x178>
 800a1c6:	9b02      	ldr	r3, [sp, #8]
 800a1c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a1cc:	6021      	str	r1, [r4, #0]
 800a1ce:	f109 0901 	add.w	r9, r9, #1
 800a1d2:	b11b      	cbz	r3, 800a1dc <_scanf_float+0x158>
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	3201      	adds	r2, #1
 800a1d8:	9302      	str	r3, [sp, #8]
 800a1da:	60a2      	str	r2, [r4, #8]
 800a1dc:	68a3      	ldr	r3, [r4, #8]
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	60a3      	str	r3, [r4, #8]
 800a1e2:	6923      	ldr	r3, [r4, #16]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	6123      	str	r3, [r4, #16]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	607b      	str	r3, [r7, #4]
 800a1f0:	f340 8084 	ble.w	800a2fc <_scanf_float+0x278>
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	603b      	str	r3, [r7, #0]
 800a1fa:	e766      	b.n	800a0ca <_scanf_float+0x46>
 800a1fc:	eb1a 0f05 	cmn.w	sl, r5
 800a200:	f47f af70 	bne.w	800a0e4 <_scanf_float+0x60>
 800a204:	6822      	ldr	r2, [r4, #0]
 800a206:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a20a:	6022      	str	r2, [r4, #0]
 800a20c:	f806 3b01 	strb.w	r3, [r6], #1
 800a210:	e7e4      	b.n	800a1dc <_scanf_float+0x158>
 800a212:	6822      	ldr	r2, [r4, #0]
 800a214:	0610      	lsls	r0, r2, #24
 800a216:	f57f af65 	bpl.w	800a0e4 <_scanf_float+0x60>
 800a21a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a21e:	e7f4      	b.n	800a20a <_scanf_float+0x186>
 800a220:	f1ba 0f00 	cmp.w	sl, #0
 800a224:	d10e      	bne.n	800a244 <_scanf_float+0x1c0>
 800a226:	f1b9 0f00 	cmp.w	r9, #0
 800a22a:	d10e      	bne.n	800a24a <_scanf_float+0x1c6>
 800a22c:	6822      	ldr	r2, [r4, #0]
 800a22e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a232:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a236:	d108      	bne.n	800a24a <_scanf_float+0x1c6>
 800a238:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a23c:	6022      	str	r2, [r4, #0]
 800a23e:	f04f 0a01 	mov.w	sl, #1
 800a242:	e7e3      	b.n	800a20c <_scanf_float+0x188>
 800a244:	f1ba 0f02 	cmp.w	sl, #2
 800a248:	d055      	beq.n	800a2f6 <_scanf_float+0x272>
 800a24a:	2d01      	cmp	r5, #1
 800a24c:	d002      	beq.n	800a254 <_scanf_float+0x1d0>
 800a24e:	2d04      	cmp	r5, #4
 800a250:	f47f af48 	bne.w	800a0e4 <_scanf_float+0x60>
 800a254:	3501      	adds	r5, #1
 800a256:	b2ed      	uxtb	r5, r5
 800a258:	e7d8      	b.n	800a20c <_scanf_float+0x188>
 800a25a:	f1ba 0f01 	cmp.w	sl, #1
 800a25e:	f47f af41 	bne.w	800a0e4 <_scanf_float+0x60>
 800a262:	f04f 0a02 	mov.w	sl, #2
 800a266:	e7d1      	b.n	800a20c <_scanf_float+0x188>
 800a268:	b97d      	cbnz	r5, 800a28a <_scanf_float+0x206>
 800a26a:	f1b9 0f00 	cmp.w	r9, #0
 800a26e:	f47f af3c 	bne.w	800a0ea <_scanf_float+0x66>
 800a272:	6822      	ldr	r2, [r4, #0]
 800a274:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a278:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a27c:	f47f af39 	bne.w	800a0f2 <_scanf_float+0x6e>
 800a280:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a284:	6022      	str	r2, [r4, #0]
 800a286:	2501      	movs	r5, #1
 800a288:	e7c0      	b.n	800a20c <_scanf_float+0x188>
 800a28a:	2d03      	cmp	r5, #3
 800a28c:	d0e2      	beq.n	800a254 <_scanf_float+0x1d0>
 800a28e:	2d05      	cmp	r5, #5
 800a290:	e7de      	b.n	800a250 <_scanf_float+0x1cc>
 800a292:	2d02      	cmp	r5, #2
 800a294:	f47f af26 	bne.w	800a0e4 <_scanf_float+0x60>
 800a298:	2503      	movs	r5, #3
 800a29a:	e7b7      	b.n	800a20c <_scanf_float+0x188>
 800a29c:	2d06      	cmp	r5, #6
 800a29e:	f47f af21 	bne.w	800a0e4 <_scanf_float+0x60>
 800a2a2:	2507      	movs	r5, #7
 800a2a4:	e7b2      	b.n	800a20c <_scanf_float+0x188>
 800a2a6:	6822      	ldr	r2, [r4, #0]
 800a2a8:	0591      	lsls	r1, r2, #22
 800a2aa:	f57f af1b 	bpl.w	800a0e4 <_scanf_float+0x60>
 800a2ae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a2b2:	6022      	str	r2, [r4, #0]
 800a2b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a2b8:	e7a8      	b.n	800a20c <_scanf_float+0x188>
 800a2ba:	6822      	ldr	r2, [r4, #0]
 800a2bc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a2c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a2c4:	d006      	beq.n	800a2d4 <_scanf_float+0x250>
 800a2c6:	0550      	lsls	r0, r2, #21
 800a2c8:	f57f af0c 	bpl.w	800a0e4 <_scanf_float+0x60>
 800a2cc:	f1b9 0f00 	cmp.w	r9, #0
 800a2d0:	f43f af0f 	beq.w	800a0f2 <_scanf_float+0x6e>
 800a2d4:	0591      	lsls	r1, r2, #22
 800a2d6:	bf58      	it	pl
 800a2d8:	9901      	ldrpl	r1, [sp, #4]
 800a2da:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a2de:	bf58      	it	pl
 800a2e0:	eba9 0101 	subpl.w	r1, r9, r1
 800a2e4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a2e8:	bf58      	it	pl
 800a2ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a2ee:	6022      	str	r2, [r4, #0]
 800a2f0:	f04f 0900 	mov.w	r9, #0
 800a2f4:	e78a      	b.n	800a20c <_scanf_float+0x188>
 800a2f6:	f04f 0a03 	mov.w	sl, #3
 800a2fa:	e787      	b.n	800a20c <_scanf_float+0x188>
 800a2fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a300:	4639      	mov	r1, r7
 800a302:	4640      	mov	r0, r8
 800a304:	4798      	blx	r3
 800a306:	2800      	cmp	r0, #0
 800a308:	f43f aedf 	beq.w	800a0ca <_scanf_float+0x46>
 800a30c:	e6ea      	b.n	800a0e4 <_scanf_float+0x60>
 800a30e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a312:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a316:	463a      	mov	r2, r7
 800a318:	4640      	mov	r0, r8
 800a31a:	4798      	blx	r3
 800a31c:	6923      	ldr	r3, [r4, #16]
 800a31e:	3b01      	subs	r3, #1
 800a320:	6123      	str	r3, [r4, #16]
 800a322:	e6ec      	b.n	800a0fe <_scanf_float+0x7a>
 800a324:	1e6b      	subs	r3, r5, #1
 800a326:	2b06      	cmp	r3, #6
 800a328:	d825      	bhi.n	800a376 <_scanf_float+0x2f2>
 800a32a:	2d02      	cmp	r5, #2
 800a32c:	d836      	bhi.n	800a39c <_scanf_float+0x318>
 800a32e:	455e      	cmp	r6, fp
 800a330:	f67f aee8 	bls.w	800a104 <_scanf_float+0x80>
 800a334:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a338:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a33c:	463a      	mov	r2, r7
 800a33e:	4640      	mov	r0, r8
 800a340:	4798      	blx	r3
 800a342:	6923      	ldr	r3, [r4, #16]
 800a344:	3b01      	subs	r3, #1
 800a346:	6123      	str	r3, [r4, #16]
 800a348:	e7f1      	b.n	800a32e <_scanf_float+0x2aa>
 800a34a:	9802      	ldr	r0, [sp, #8]
 800a34c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a350:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a354:	9002      	str	r0, [sp, #8]
 800a356:	463a      	mov	r2, r7
 800a358:	4640      	mov	r0, r8
 800a35a:	4798      	blx	r3
 800a35c:	6923      	ldr	r3, [r4, #16]
 800a35e:	3b01      	subs	r3, #1
 800a360:	6123      	str	r3, [r4, #16]
 800a362:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a366:	fa5f fa8a 	uxtb.w	sl, sl
 800a36a:	f1ba 0f02 	cmp.w	sl, #2
 800a36e:	d1ec      	bne.n	800a34a <_scanf_float+0x2c6>
 800a370:	3d03      	subs	r5, #3
 800a372:	b2ed      	uxtb	r5, r5
 800a374:	1b76      	subs	r6, r6, r5
 800a376:	6823      	ldr	r3, [r4, #0]
 800a378:	05da      	lsls	r2, r3, #23
 800a37a:	d52f      	bpl.n	800a3dc <_scanf_float+0x358>
 800a37c:	055b      	lsls	r3, r3, #21
 800a37e:	d510      	bpl.n	800a3a2 <_scanf_float+0x31e>
 800a380:	455e      	cmp	r6, fp
 800a382:	f67f aebf 	bls.w	800a104 <_scanf_float+0x80>
 800a386:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a38a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a38e:	463a      	mov	r2, r7
 800a390:	4640      	mov	r0, r8
 800a392:	4798      	blx	r3
 800a394:	6923      	ldr	r3, [r4, #16]
 800a396:	3b01      	subs	r3, #1
 800a398:	6123      	str	r3, [r4, #16]
 800a39a:	e7f1      	b.n	800a380 <_scanf_float+0x2fc>
 800a39c:	46aa      	mov	sl, r5
 800a39e:	9602      	str	r6, [sp, #8]
 800a3a0:	e7df      	b.n	800a362 <_scanf_float+0x2de>
 800a3a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a3a6:	6923      	ldr	r3, [r4, #16]
 800a3a8:	2965      	cmp	r1, #101	; 0x65
 800a3aa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a3ae:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800a3b2:	6123      	str	r3, [r4, #16]
 800a3b4:	d00c      	beq.n	800a3d0 <_scanf_float+0x34c>
 800a3b6:	2945      	cmp	r1, #69	; 0x45
 800a3b8:	d00a      	beq.n	800a3d0 <_scanf_float+0x34c>
 800a3ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3be:	463a      	mov	r2, r7
 800a3c0:	4640      	mov	r0, r8
 800a3c2:	4798      	blx	r3
 800a3c4:	6923      	ldr	r3, [r4, #16]
 800a3c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	1eb5      	subs	r5, r6, #2
 800a3ce:	6123      	str	r3, [r4, #16]
 800a3d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3d4:	463a      	mov	r2, r7
 800a3d6:	4640      	mov	r0, r8
 800a3d8:	4798      	blx	r3
 800a3da:	462e      	mov	r6, r5
 800a3dc:	6825      	ldr	r5, [r4, #0]
 800a3de:	f015 0510 	ands.w	r5, r5, #16
 800a3e2:	d158      	bne.n	800a496 <_scanf_float+0x412>
 800a3e4:	7035      	strb	r5, [r6, #0]
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a3ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3f0:	d11c      	bne.n	800a42c <_scanf_float+0x3a8>
 800a3f2:	9b01      	ldr	r3, [sp, #4]
 800a3f4:	454b      	cmp	r3, r9
 800a3f6:	eba3 0209 	sub.w	r2, r3, r9
 800a3fa:	d124      	bne.n	800a446 <_scanf_float+0x3c2>
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	4659      	mov	r1, fp
 800a400:	4640      	mov	r0, r8
 800a402:	f000 fecf 	bl	800b1a4 <_strtod_r>
 800a406:	9b03      	ldr	r3, [sp, #12]
 800a408:	6821      	ldr	r1, [r4, #0]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f011 0f02 	tst.w	r1, #2
 800a410:	ec57 6b10 	vmov	r6, r7, d0
 800a414:	f103 0204 	add.w	r2, r3, #4
 800a418:	d020      	beq.n	800a45c <_scanf_float+0x3d8>
 800a41a:	9903      	ldr	r1, [sp, #12]
 800a41c:	600a      	str	r2, [r1, #0]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	e9c3 6700 	strd	r6, r7, [r3]
 800a424:	68e3      	ldr	r3, [r4, #12]
 800a426:	3301      	adds	r3, #1
 800a428:	60e3      	str	r3, [r4, #12]
 800a42a:	e66c      	b.n	800a106 <_scanf_float+0x82>
 800a42c:	9b04      	ldr	r3, [sp, #16]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d0e4      	beq.n	800a3fc <_scanf_float+0x378>
 800a432:	9905      	ldr	r1, [sp, #20]
 800a434:	230a      	movs	r3, #10
 800a436:	462a      	mov	r2, r5
 800a438:	3101      	adds	r1, #1
 800a43a:	4640      	mov	r0, r8
 800a43c:	f000 ff3c 	bl	800b2b8 <_strtol_r>
 800a440:	9b04      	ldr	r3, [sp, #16]
 800a442:	9e05      	ldr	r6, [sp, #20]
 800a444:	1ac2      	subs	r2, r0, r3
 800a446:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a44a:	429e      	cmp	r6, r3
 800a44c:	bf28      	it	cs
 800a44e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a452:	4912      	ldr	r1, [pc, #72]	; (800a49c <_scanf_float+0x418>)
 800a454:	4630      	mov	r0, r6
 800a456:	f000 f85f 	bl	800a518 <siprintf>
 800a45a:	e7cf      	b.n	800a3fc <_scanf_float+0x378>
 800a45c:	f011 0f04 	tst.w	r1, #4
 800a460:	9903      	ldr	r1, [sp, #12]
 800a462:	600a      	str	r2, [r1, #0]
 800a464:	d1db      	bne.n	800a41e <_scanf_float+0x39a>
 800a466:	f8d3 8000 	ldr.w	r8, [r3]
 800a46a:	ee10 2a10 	vmov	r2, s0
 800a46e:	ee10 0a10 	vmov	r0, s0
 800a472:	463b      	mov	r3, r7
 800a474:	4639      	mov	r1, r7
 800a476:	f7f6 fb59 	bl	8000b2c <__aeabi_dcmpun>
 800a47a:	b128      	cbz	r0, 800a488 <_scanf_float+0x404>
 800a47c:	4808      	ldr	r0, [pc, #32]	; (800a4a0 <_scanf_float+0x41c>)
 800a47e:	f000 f811 	bl	800a4a4 <nanf>
 800a482:	ed88 0a00 	vstr	s0, [r8]
 800a486:	e7cd      	b.n	800a424 <_scanf_float+0x3a0>
 800a488:	4630      	mov	r0, r6
 800a48a:	4639      	mov	r1, r7
 800a48c:	f7f6 fbac 	bl	8000be8 <__aeabi_d2f>
 800a490:	f8c8 0000 	str.w	r0, [r8]
 800a494:	e7c6      	b.n	800a424 <_scanf_float+0x3a0>
 800a496:	2500      	movs	r5, #0
 800a498:	e635      	b.n	800a106 <_scanf_float+0x82>
 800a49a:	bf00      	nop
 800a49c:	0800e130 	.word	0x0800e130
 800a4a0:	0800e548 	.word	0x0800e548

0800a4a4 <nanf>:
 800a4a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a4ac <nanf+0x8>
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	7fc00000 	.word	0x7fc00000

0800a4b0 <sniprintf>:
 800a4b0:	b40c      	push	{r2, r3}
 800a4b2:	b530      	push	{r4, r5, lr}
 800a4b4:	4b17      	ldr	r3, [pc, #92]	; (800a514 <sniprintf+0x64>)
 800a4b6:	1e0c      	subs	r4, r1, #0
 800a4b8:	681d      	ldr	r5, [r3, #0]
 800a4ba:	b09d      	sub	sp, #116	; 0x74
 800a4bc:	da08      	bge.n	800a4d0 <sniprintf+0x20>
 800a4be:	238b      	movs	r3, #139	; 0x8b
 800a4c0:	602b      	str	r3, [r5, #0]
 800a4c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4c6:	b01d      	add	sp, #116	; 0x74
 800a4c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4cc:	b002      	add	sp, #8
 800a4ce:	4770      	bx	lr
 800a4d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a4d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a4d8:	bf14      	ite	ne
 800a4da:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a4de:	4623      	moveq	r3, r4
 800a4e0:	9304      	str	r3, [sp, #16]
 800a4e2:	9307      	str	r3, [sp, #28]
 800a4e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a4e8:	9002      	str	r0, [sp, #8]
 800a4ea:	9006      	str	r0, [sp, #24]
 800a4ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a4f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a4f2:	ab21      	add	r3, sp, #132	; 0x84
 800a4f4:	a902      	add	r1, sp, #8
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	f002 fec5 	bl	800d288 <_svfiprintf_r>
 800a4fe:	1c43      	adds	r3, r0, #1
 800a500:	bfbc      	itt	lt
 800a502:	238b      	movlt	r3, #139	; 0x8b
 800a504:	602b      	strlt	r3, [r5, #0]
 800a506:	2c00      	cmp	r4, #0
 800a508:	d0dd      	beq.n	800a4c6 <sniprintf+0x16>
 800a50a:	9b02      	ldr	r3, [sp, #8]
 800a50c:	2200      	movs	r2, #0
 800a50e:	701a      	strb	r2, [r3, #0]
 800a510:	e7d9      	b.n	800a4c6 <sniprintf+0x16>
 800a512:	bf00      	nop
 800a514:	20000180 	.word	0x20000180

0800a518 <siprintf>:
 800a518:	b40e      	push	{r1, r2, r3}
 800a51a:	b500      	push	{lr}
 800a51c:	b09c      	sub	sp, #112	; 0x70
 800a51e:	ab1d      	add	r3, sp, #116	; 0x74
 800a520:	9002      	str	r0, [sp, #8]
 800a522:	9006      	str	r0, [sp, #24]
 800a524:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a528:	4809      	ldr	r0, [pc, #36]	; (800a550 <siprintf+0x38>)
 800a52a:	9107      	str	r1, [sp, #28]
 800a52c:	9104      	str	r1, [sp, #16]
 800a52e:	4909      	ldr	r1, [pc, #36]	; (800a554 <siprintf+0x3c>)
 800a530:	f853 2b04 	ldr.w	r2, [r3], #4
 800a534:	9105      	str	r1, [sp, #20]
 800a536:	6800      	ldr	r0, [r0, #0]
 800a538:	9301      	str	r3, [sp, #4]
 800a53a:	a902      	add	r1, sp, #8
 800a53c:	f002 fea4 	bl	800d288 <_svfiprintf_r>
 800a540:	9b02      	ldr	r3, [sp, #8]
 800a542:	2200      	movs	r2, #0
 800a544:	701a      	strb	r2, [r3, #0]
 800a546:	b01c      	add	sp, #112	; 0x70
 800a548:	f85d eb04 	ldr.w	lr, [sp], #4
 800a54c:	b003      	add	sp, #12
 800a54e:	4770      	bx	lr
 800a550:	20000180 	.word	0x20000180
 800a554:	ffff0208 	.word	0xffff0208

0800a558 <sulp>:
 800a558:	b570      	push	{r4, r5, r6, lr}
 800a55a:	4604      	mov	r4, r0
 800a55c:	460d      	mov	r5, r1
 800a55e:	ec45 4b10 	vmov	d0, r4, r5
 800a562:	4616      	mov	r6, r2
 800a564:	f002 fc2c 	bl	800cdc0 <__ulp>
 800a568:	ec51 0b10 	vmov	r0, r1, d0
 800a56c:	b17e      	cbz	r6, 800a58e <sulp+0x36>
 800a56e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a572:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a576:	2b00      	cmp	r3, #0
 800a578:	dd09      	ble.n	800a58e <sulp+0x36>
 800a57a:	051b      	lsls	r3, r3, #20
 800a57c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a580:	2400      	movs	r4, #0
 800a582:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a586:	4622      	mov	r2, r4
 800a588:	462b      	mov	r3, r5
 800a58a:	f7f6 f835 	bl	80005f8 <__aeabi_dmul>
 800a58e:	bd70      	pop	{r4, r5, r6, pc}

0800a590 <_strtod_l>:
 800a590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a594:	b0a3      	sub	sp, #140	; 0x8c
 800a596:	461f      	mov	r7, r3
 800a598:	2300      	movs	r3, #0
 800a59a:	931e      	str	r3, [sp, #120]	; 0x78
 800a59c:	4ba4      	ldr	r3, [pc, #656]	; (800a830 <_strtod_l+0x2a0>)
 800a59e:	9219      	str	r2, [sp, #100]	; 0x64
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	9307      	str	r3, [sp, #28]
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	4688      	mov	r8, r1
 800a5aa:	f7f5 fe11 	bl	80001d0 <strlen>
 800a5ae:	f04f 0a00 	mov.w	sl, #0
 800a5b2:	4605      	mov	r5, r0
 800a5b4:	f04f 0b00 	mov.w	fp, #0
 800a5b8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a5bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a5be:	781a      	ldrb	r2, [r3, #0]
 800a5c0:	2a2b      	cmp	r2, #43	; 0x2b
 800a5c2:	d04c      	beq.n	800a65e <_strtod_l+0xce>
 800a5c4:	d839      	bhi.n	800a63a <_strtod_l+0xaa>
 800a5c6:	2a0d      	cmp	r2, #13
 800a5c8:	d832      	bhi.n	800a630 <_strtod_l+0xa0>
 800a5ca:	2a08      	cmp	r2, #8
 800a5cc:	d832      	bhi.n	800a634 <_strtod_l+0xa4>
 800a5ce:	2a00      	cmp	r2, #0
 800a5d0:	d03c      	beq.n	800a64c <_strtod_l+0xbc>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	930e      	str	r3, [sp, #56]	; 0x38
 800a5d6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a5d8:	7833      	ldrb	r3, [r6, #0]
 800a5da:	2b30      	cmp	r3, #48	; 0x30
 800a5dc:	f040 80b4 	bne.w	800a748 <_strtod_l+0x1b8>
 800a5e0:	7873      	ldrb	r3, [r6, #1]
 800a5e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a5e6:	2b58      	cmp	r3, #88	; 0x58
 800a5e8:	d16c      	bne.n	800a6c4 <_strtod_l+0x134>
 800a5ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5ec:	9301      	str	r3, [sp, #4]
 800a5ee:	ab1e      	add	r3, sp, #120	; 0x78
 800a5f0:	9702      	str	r7, [sp, #8]
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	4a8f      	ldr	r2, [pc, #572]	; (800a834 <_strtod_l+0x2a4>)
 800a5f6:	ab1f      	add	r3, sp, #124	; 0x7c
 800a5f8:	a91d      	add	r1, sp, #116	; 0x74
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f001 fd40 	bl	800c080 <__gethex>
 800a600:	f010 0707 	ands.w	r7, r0, #7
 800a604:	4605      	mov	r5, r0
 800a606:	d005      	beq.n	800a614 <_strtod_l+0x84>
 800a608:	2f06      	cmp	r7, #6
 800a60a:	d12a      	bne.n	800a662 <_strtod_l+0xd2>
 800a60c:	3601      	adds	r6, #1
 800a60e:	2300      	movs	r3, #0
 800a610:	961d      	str	r6, [sp, #116]	; 0x74
 800a612:	930e      	str	r3, [sp, #56]	; 0x38
 800a614:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a616:	2b00      	cmp	r3, #0
 800a618:	f040 8596 	bne.w	800b148 <_strtod_l+0xbb8>
 800a61c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a61e:	b1db      	cbz	r3, 800a658 <_strtod_l+0xc8>
 800a620:	4652      	mov	r2, sl
 800a622:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a626:	ec43 2b10 	vmov	d0, r2, r3
 800a62a:	b023      	add	sp, #140	; 0x8c
 800a62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a630:	2a20      	cmp	r2, #32
 800a632:	d1ce      	bne.n	800a5d2 <_strtod_l+0x42>
 800a634:	3301      	adds	r3, #1
 800a636:	931d      	str	r3, [sp, #116]	; 0x74
 800a638:	e7c0      	b.n	800a5bc <_strtod_l+0x2c>
 800a63a:	2a2d      	cmp	r2, #45	; 0x2d
 800a63c:	d1c9      	bne.n	800a5d2 <_strtod_l+0x42>
 800a63e:	2201      	movs	r2, #1
 800a640:	920e      	str	r2, [sp, #56]	; 0x38
 800a642:	1c5a      	adds	r2, r3, #1
 800a644:	921d      	str	r2, [sp, #116]	; 0x74
 800a646:	785b      	ldrb	r3, [r3, #1]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1c4      	bne.n	800a5d6 <_strtod_l+0x46>
 800a64c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a64e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a652:	2b00      	cmp	r3, #0
 800a654:	f040 8576 	bne.w	800b144 <_strtod_l+0xbb4>
 800a658:	4652      	mov	r2, sl
 800a65a:	465b      	mov	r3, fp
 800a65c:	e7e3      	b.n	800a626 <_strtod_l+0x96>
 800a65e:	2200      	movs	r2, #0
 800a660:	e7ee      	b.n	800a640 <_strtod_l+0xb0>
 800a662:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a664:	b13a      	cbz	r2, 800a676 <_strtod_l+0xe6>
 800a666:	2135      	movs	r1, #53	; 0x35
 800a668:	a820      	add	r0, sp, #128	; 0x80
 800a66a:	f002 fcb4 	bl	800cfd6 <__copybits>
 800a66e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a670:	4620      	mov	r0, r4
 800a672:	f002 f879 	bl	800c768 <_Bfree>
 800a676:	3f01      	subs	r7, #1
 800a678:	2f05      	cmp	r7, #5
 800a67a:	d807      	bhi.n	800a68c <_strtod_l+0xfc>
 800a67c:	e8df f007 	tbb	[pc, r7]
 800a680:	1d180b0e 	.word	0x1d180b0e
 800a684:	030e      	.short	0x030e
 800a686:	f04f 0b00 	mov.w	fp, #0
 800a68a:	46da      	mov	sl, fp
 800a68c:	0728      	lsls	r0, r5, #28
 800a68e:	d5c1      	bpl.n	800a614 <_strtod_l+0x84>
 800a690:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a694:	e7be      	b.n	800a614 <_strtod_l+0x84>
 800a696:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800a69a:	e7f7      	b.n	800a68c <_strtod_l+0xfc>
 800a69c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800a6a0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a6a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a6a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a6aa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a6ae:	e7ed      	b.n	800a68c <_strtod_l+0xfc>
 800a6b0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800a838 <_strtod_l+0x2a8>
 800a6b4:	f04f 0a00 	mov.w	sl, #0
 800a6b8:	e7e8      	b.n	800a68c <_strtod_l+0xfc>
 800a6ba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a6be:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a6c2:	e7e3      	b.n	800a68c <_strtod_l+0xfc>
 800a6c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a6c6:	1c5a      	adds	r2, r3, #1
 800a6c8:	921d      	str	r2, [sp, #116]	; 0x74
 800a6ca:	785b      	ldrb	r3, [r3, #1]
 800a6cc:	2b30      	cmp	r3, #48	; 0x30
 800a6ce:	d0f9      	beq.n	800a6c4 <_strtod_l+0x134>
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d09f      	beq.n	800a614 <_strtod_l+0x84>
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	f04f 0900 	mov.w	r9, #0
 800a6da:	9304      	str	r3, [sp, #16]
 800a6dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a6de:	930a      	str	r3, [sp, #40]	; 0x28
 800a6e0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a6e4:	464f      	mov	r7, r9
 800a6e6:	220a      	movs	r2, #10
 800a6e8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a6ea:	7806      	ldrb	r6, [r0, #0]
 800a6ec:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a6f0:	b2d9      	uxtb	r1, r3
 800a6f2:	2909      	cmp	r1, #9
 800a6f4:	d92a      	bls.n	800a74c <_strtod_l+0x1bc>
 800a6f6:	9907      	ldr	r1, [sp, #28]
 800a6f8:	462a      	mov	r2, r5
 800a6fa:	f002 fedd 	bl	800d4b8 <strncmp>
 800a6fe:	b398      	cbz	r0, 800a768 <_strtod_l+0x1d8>
 800a700:	2000      	movs	r0, #0
 800a702:	4633      	mov	r3, r6
 800a704:	463d      	mov	r5, r7
 800a706:	9007      	str	r0, [sp, #28]
 800a708:	4602      	mov	r2, r0
 800a70a:	2b65      	cmp	r3, #101	; 0x65
 800a70c:	d001      	beq.n	800a712 <_strtod_l+0x182>
 800a70e:	2b45      	cmp	r3, #69	; 0x45
 800a710:	d118      	bne.n	800a744 <_strtod_l+0x1b4>
 800a712:	b91d      	cbnz	r5, 800a71c <_strtod_l+0x18c>
 800a714:	9b04      	ldr	r3, [sp, #16]
 800a716:	4303      	orrs	r3, r0
 800a718:	d098      	beq.n	800a64c <_strtod_l+0xbc>
 800a71a:	2500      	movs	r5, #0
 800a71c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800a720:	f108 0301 	add.w	r3, r8, #1
 800a724:	931d      	str	r3, [sp, #116]	; 0x74
 800a726:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a72a:	2b2b      	cmp	r3, #43	; 0x2b
 800a72c:	d075      	beq.n	800a81a <_strtod_l+0x28a>
 800a72e:	2b2d      	cmp	r3, #45	; 0x2d
 800a730:	d07b      	beq.n	800a82a <_strtod_l+0x29a>
 800a732:	f04f 0c00 	mov.w	ip, #0
 800a736:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a73a:	2909      	cmp	r1, #9
 800a73c:	f240 8082 	bls.w	800a844 <_strtod_l+0x2b4>
 800a740:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a744:	2600      	movs	r6, #0
 800a746:	e09d      	b.n	800a884 <_strtod_l+0x2f4>
 800a748:	2300      	movs	r3, #0
 800a74a:	e7c4      	b.n	800a6d6 <_strtod_l+0x146>
 800a74c:	2f08      	cmp	r7, #8
 800a74e:	bfd8      	it	le
 800a750:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a752:	f100 0001 	add.w	r0, r0, #1
 800a756:	bfda      	itte	le
 800a758:	fb02 3301 	mlale	r3, r2, r1, r3
 800a75c:	9309      	strle	r3, [sp, #36]	; 0x24
 800a75e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a762:	3701      	adds	r7, #1
 800a764:	901d      	str	r0, [sp, #116]	; 0x74
 800a766:	e7bf      	b.n	800a6e8 <_strtod_l+0x158>
 800a768:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a76a:	195a      	adds	r2, r3, r5
 800a76c:	921d      	str	r2, [sp, #116]	; 0x74
 800a76e:	5d5b      	ldrb	r3, [r3, r5]
 800a770:	2f00      	cmp	r7, #0
 800a772:	d037      	beq.n	800a7e4 <_strtod_l+0x254>
 800a774:	9007      	str	r0, [sp, #28]
 800a776:	463d      	mov	r5, r7
 800a778:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a77c:	2a09      	cmp	r2, #9
 800a77e:	d912      	bls.n	800a7a6 <_strtod_l+0x216>
 800a780:	2201      	movs	r2, #1
 800a782:	e7c2      	b.n	800a70a <_strtod_l+0x17a>
 800a784:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a786:	1c5a      	adds	r2, r3, #1
 800a788:	921d      	str	r2, [sp, #116]	; 0x74
 800a78a:	785b      	ldrb	r3, [r3, #1]
 800a78c:	3001      	adds	r0, #1
 800a78e:	2b30      	cmp	r3, #48	; 0x30
 800a790:	d0f8      	beq.n	800a784 <_strtod_l+0x1f4>
 800a792:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a796:	2a08      	cmp	r2, #8
 800a798:	f200 84db 	bhi.w	800b152 <_strtod_l+0xbc2>
 800a79c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a79e:	9007      	str	r0, [sp, #28]
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	920a      	str	r2, [sp, #40]	; 0x28
 800a7a4:	4605      	mov	r5, r0
 800a7a6:	3b30      	subs	r3, #48	; 0x30
 800a7a8:	f100 0201 	add.w	r2, r0, #1
 800a7ac:	d014      	beq.n	800a7d8 <_strtod_l+0x248>
 800a7ae:	9907      	ldr	r1, [sp, #28]
 800a7b0:	4411      	add	r1, r2
 800a7b2:	9107      	str	r1, [sp, #28]
 800a7b4:	462a      	mov	r2, r5
 800a7b6:	eb00 0e05 	add.w	lr, r0, r5
 800a7ba:	210a      	movs	r1, #10
 800a7bc:	4572      	cmp	r2, lr
 800a7be:	d113      	bne.n	800a7e8 <_strtod_l+0x258>
 800a7c0:	182a      	adds	r2, r5, r0
 800a7c2:	2a08      	cmp	r2, #8
 800a7c4:	f105 0501 	add.w	r5, r5, #1
 800a7c8:	4405      	add	r5, r0
 800a7ca:	dc1c      	bgt.n	800a806 <_strtod_l+0x276>
 800a7cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7ce:	220a      	movs	r2, #10
 800a7d0:	fb02 3301 	mla	r3, r2, r1, r3
 800a7d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7da:	1c59      	adds	r1, r3, #1
 800a7dc:	911d      	str	r1, [sp, #116]	; 0x74
 800a7de:	785b      	ldrb	r3, [r3, #1]
 800a7e0:	4610      	mov	r0, r2
 800a7e2:	e7c9      	b.n	800a778 <_strtod_l+0x1e8>
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	e7d2      	b.n	800a78e <_strtod_l+0x1fe>
 800a7e8:	2a08      	cmp	r2, #8
 800a7ea:	dc04      	bgt.n	800a7f6 <_strtod_l+0x266>
 800a7ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a7ee:	434e      	muls	r6, r1
 800a7f0:	9609      	str	r6, [sp, #36]	; 0x24
 800a7f2:	3201      	adds	r2, #1
 800a7f4:	e7e2      	b.n	800a7bc <_strtod_l+0x22c>
 800a7f6:	f102 0c01 	add.w	ip, r2, #1
 800a7fa:	f1bc 0f10 	cmp.w	ip, #16
 800a7fe:	bfd8      	it	le
 800a800:	fb01 f909 	mulle.w	r9, r1, r9
 800a804:	e7f5      	b.n	800a7f2 <_strtod_l+0x262>
 800a806:	2d10      	cmp	r5, #16
 800a808:	bfdc      	itt	le
 800a80a:	220a      	movle	r2, #10
 800a80c:	fb02 3909 	mlale	r9, r2, r9, r3
 800a810:	e7e1      	b.n	800a7d6 <_strtod_l+0x246>
 800a812:	2300      	movs	r3, #0
 800a814:	9307      	str	r3, [sp, #28]
 800a816:	2201      	movs	r2, #1
 800a818:	e77c      	b.n	800a714 <_strtod_l+0x184>
 800a81a:	f04f 0c00 	mov.w	ip, #0
 800a81e:	f108 0302 	add.w	r3, r8, #2
 800a822:	931d      	str	r3, [sp, #116]	; 0x74
 800a824:	f898 3002 	ldrb.w	r3, [r8, #2]
 800a828:	e785      	b.n	800a736 <_strtod_l+0x1a6>
 800a82a:	f04f 0c01 	mov.w	ip, #1
 800a82e:	e7f6      	b.n	800a81e <_strtod_l+0x28e>
 800a830:	0800e388 	.word	0x0800e388
 800a834:	0800e138 	.word	0x0800e138
 800a838:	7ff00000 	.word	0x7ff00000
 800a83c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a83e:	1c59      	adds	r1, r3, #1
 800a840:	911d      	str	r1, [sp, #116]	; 0x74
 800a842:	785b      	ldrb	r3, [r3, #1]
 800a844:	2b30      	cmp	r3, #48	; 0x30
 800a846:	d0f9      	beq.n	800a83c <_strtod_l+0x2ac>
 800a848:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a84c:	2908      	cmp	r1, #8
 800a84e:	f63f af79 	bhi.w	800a744 <_strtod_l+0x1b4>
 800a852:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a856:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a858:	9308      	str	r3, [sp, #32]
 800a85a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a85c:	1c59      	adds	r1, r3, #1
 800a85e:	911d      	str	r1, [sp, #116]	; 0x74
 800a860:	785b      	ldrb	r3, [r3, #1]
 800a862:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800a866:	2e09      	cmp	r6, #9
 800a868:	d937      	bls.n	800a8da <_strtod_l+0x34a>
 800a86a:	9e08      	ldr	r6, [sp, #32]
 800a86c:	1b89      	subs	r1, r1, r6
 800a86e:	2908      	cmp	r1, #8
 800a870:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a874:	dc02      	bgt.n	800a87c <_strtod_l+0x2ec>
 800a876:	4576      	cmp	r6, lr
 800a878:	bfa8      	it	ge
 800a87a:	4676      	movge	r6, lr
 800a87c:	f1bc 0f00 	cmp.w	ip, #0
 800a880:	d000      	beq.n	800a884 <_strtod_l+0x2f4>
 800a882:	4276      	negs	r6, r6
 800a884:	2d00      	cmp	r5, #0
 800a886:	d14f      	bne.n	800a928 <_strtod_l+0x398>
 800a888:	9904      	ldr	r1, [sp, #16]
 800a88a:	4301      	orrs	r1, r0
 800a88c:	f47f aec2 	bne.w	800a614 <_strtod_l+0x84>
 800a890:	2a00      	cmp	r2, #0
 800a892:	f47f aedb 	bne.w	800a64c <_strtod_l+0xbc>
 800a896:	2b69      	cmp	r3, #105	; 0x69
 800a898:	d027      	beq.n	800a8ea <_strtod_l+0x35a>
 800a89a:	dc24      	bgt.n	800a8e6 <_strtod_l+0x356>
 800a89c:	2b49      	cmp	r3, #73	; 0x49
 800a89e:	d024      	beq.n	800a8ea <_strtod_l+0x35a>
 800a8a0:	2b4e      	cmp	r3, #78	; 0x4e
 800a8a2:	f47f aed3 	bne.w	800a64c <_strtod_l+0xbc>
 800a8a6:	499e      	ldr	r1, [pc, #632]	; (800ab20 <_strtod_l+0x590>)
 800a8a8:	a81d      	add	r0, sp, #116	; 0x74
 800a8aa:	f001 fe41 	bl	800c530 <__match>
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	f43f aecc 	beq.w	800a64c <_strtod_l+0xbc>
 800a8b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	2b28      	cmp	r3, #40	; 0x28
 800a8ba:	d12d      	bne.n	800a918 <_strtod_l+0x388>
 800a8bc:	4999      	ldr	r1, [pc, #612]	; (800ab24 <_strtod_l+0x594>)
 800a8be:	aa20      	add	r2, sp, #128	; 0x80
 800a8c0:	a81d      	add	r0, sp, #116	; 0x74
 800a8c2:	f001 fe49 	bl	800c558 <__hexnan>
 800a8c6:	2805      	cmp	r0, #5
 800a8c8:	d126      	bne.n	800a918 <_strtod_l+0x388>
 800a8ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8cc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800a8d0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a8d4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a8d8:	e69c      	b.n	800a614 <_strtod_l+0x84>
 800a8da:	210a      	movs	r1, #10
 800a8dc:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a8e0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a8e4:	e7b9      	b.n	800a85a <_strtod_l+0x2ca>
 800a8e6:	2b6e      	cmp	r3, #110	; 0x6e
 800a8e8:	e7db      	b.n	800a8a2 <_strtod_l+0x312>
 800a8ea:	498f      	ldr	r1, [pc, #572]	; (800ab28 <_strtod_l+0x598>)
 800a8ec:	a81d      	add	r0, sp, #116	; 0x74
 800a8ee:	f001 fe1f 	bl	800c530 <__match>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	f43f aeaa 	beq.w	800a64c <_strtod_l+0xbc>
 800a8f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8fa:	498c      	ldr	r1, [pc, #560]	; (800ab2c <_strtod_l+0x59c>)
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	a81d      	add	r0, sp, #116	; 0x74
 800a900:	931d      	str	r3, [sp, #116]	; 0x74
 800a902:	f001 fe15 	bl	800c530 <__match>
 800a906:	b910      	cbnz	r0, 800a90e <_strtod_l+0x37e>
 800a908:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a90a:	3301      	adds	r3, #1
 800a90c:	931d      	str	r3, [sp, #116]	; 0x74
 800a90e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800ab3c <_strtod_l+0x5ac>
 800a912:	f04f 0a00 	mov.w	sl, #0
 800a916:	e67d      	b.n	800a614 <_strtod_l+0x84>
 800a918:	4885      	ldr	r0, [pc, #532]	; (800ab30 <_strtod_l+0x5a0>)
 800a91a:	f002 fdb5 	bl	800d488 <nan>
 800a91e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a922:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a926:	e675      	b.n	800a614 <_strtod_l+0x84>
 800a928:	9b07      	ldr	r3, [sp, #28]
 800a92a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a92c:	1af3      	subs	r3, r6, r3
 800a92e:	2f00      	cmp	r7, #0
 800a930:	bf08      	it	eq
 800a932:	462f      	moveq	r7, r5
 800a934:	2d10      	cmp	r5, #16
 800a936:	9308      	str	r3, [sp, #32]
 800a938:	46a8      	mov	r8, r5
 800a93a:	bfa8      	it	ge
 800a93c:	f04f 0810 	movge.w	r8, #16
 800a940:	f7f5 fde0 	bl	8000504 <__aeabi_ui2d>
 800a944:	2d09      	cmp	r5, #9
 800a946:	4682      	mov	sl, r0
 800a948:	468b      	mov	fp, r1
 800a94a:	dd13      	ble.n	800a974 <_strtod_l+0x3e4>
 800a94c:	4b79      	ldr	r3, [pc, #484]	; (800ab34 <_strtod_l+0x5a4>)
 800a94e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a952:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a956:	f7f5 fe4f 	bl	80005f8 <__aeabi_dmul>
 800a95a:	4682      	mov	sl, r0
 800a95c:	4648      	mov	r0, r9
 800a95e:	468b      	mov	fp, r1
 800a960:	f7f5 fdd0 	bl	8000504 <__aeabi_ui2d>
 800a964:	4602      	mov	r2, r0
 800a966:	460b      	mov	r3, r1
 800a968:	4650      	mov	r0, sl
 800a96a:	4659      	mov	r1, fp
 800a96c:	f7f5 fc8e 	bl	800028c <__adddf3>
 800a970:	4682      	mov	sl, r0
 800a972:	468b      	mov	fp, r1
 800a974:	2d0f      	cmp	r5, #15
 800a976:	dc38      	bgt.n	800a9ea <_strtod_l+0x45a>
 800a978:	9b08      	ldr	r3, [sp, #32]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f43f ae4a 	beq.w	800a614 <_strtod_l+0x84>
 800a980:	dd24      	ble.n	800a9cc <_strtod_l+0x43c>
 800a982:	2b16      	cmp	r3, #22
 800a984:	dc0b      	bgt.n	800a99e <_strtod_l+0x40e>
 800a986:	4d6b      	ldr	r5, [pc, #428]	; (800ab34 <_strtod_l+0x5a4>)
 800a988:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800a98c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a990:	4652      	mov	r2, sl
 800a992:	465b      	mov	r3, fp
 800a994:	f7f5 fe30 	bl	80005f8 <__aeabi_dmul>
 800a998:	4682      	mov	sl, r0
 800a99a:	468b      	mov	fp, r1
 800a99c:	e63a      	b.n	800a614 <_strtod_l+0x84>
 800a99e:	9a08      	ldr	r2, [sp, #32]
 800a9a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	db20      	blt.n	800a9ea <_strtod_l+0x45a>
 800a9a8:	4c62      	ldr	r4, [pc, #392]	; (800ab34 <_strtod_l+0x5a4>)
 800a9aa:	f1c5 050f 	rsb	r5, r5, #15
 800a9ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a9b2:	4652      	mov	r2, sl
 800a9b4:	465b      	mov	r3, fp
 800a9b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9ba:	f7f5 fe1d 	bl	80005f8 <__aeabi_dmul>
 800a9be:	9b08      	ldr	r3, [sp, #32]
 800a9c0:	1b5d      	subs	r5, r3, r5
 800a9c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a9c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a9ca:	e7e3      	b.n	800a994 <_strtod_l+0x404>
 800a9cc:	9b08      	ldr	r3, [sp, #32]
 800a9ce:	3316      	adds	r3, #22
 800a9d0:	db0b      	blt.n	800a9ea <_strtod_l+0x45a>
 800a9d2:	9b07      	ldr	r3, [sp, #28]
 800a9d4:	4a57      	ldr	r2, [pc, #348]	; (800ab34 <_strtod_l+0x5a4>)
 800a9d6:	1b9e      	subs	r6, r3, r6
 800a9d8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a9dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9e0:	4650      	mov	r0, sl
 800a9e2:	4659      	mov	r1, fp
 800a9e4:	f7f5 ff32 	bl	800084c <__aeabi_ddiv>
 800a9e8:	e7d6      	b.n	800a998 <_strtod_l+0x408>
 800a9ea:	9b08      	ldr	r3, [sp, #32]
 800a9ec:	eba5 0808 	sub.w	r8, r5, r8
 800a9f0:	4498      	add	r8, r3
 800a9f2:	f1b8 0f00 	cmp.w	r8, #0
 800a9f6:	dd71      	ble.n	800aadc <_strtod_l+0x54c>
 800a9f8:	f018 030f 	ands.w	r3, r8, #15
 800a9fc:	d00a      	beq.n	800aa14 <_strtod_l+0x484>
 800a9fe:	494d      	ldr	r1, [pc, #308]	; (800ab34 <_strtod_l+0x5a4>)
 800aa00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa04:	4652      	mov	r2, sl
 800aa06:	465b      	mov	r3, fp
 800aa08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa0c:	f7f5 fdf4 	bl	80005f8 <__aeabi_dmul>
 800aa10:	4682      	mov	sl, r0
 800aa12:	468b      	mov	fp, r1
 800aa14:	f038 080f 	bics.w	r8, r8, #15
 800aa18:	d04d      	beq.n	800aab6 <_strtod_l+0x526>
 800aa1a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800aa1e:	dd22      	ble.n	800aa66 <_strtod_l+0x4d6>
 800aa20:	2500      	movs	r5, #0
 800aa22:	462e      	mov	r6, r5
 800aa24:	9509      	str	r5, [sp, #36]	; 0x24
 800aa26:	9507      	str	r5, [sp, #28]
 800aa28:	2322      	movs	r3, #34	; 0x22
 800aa2a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800ab3c <_strtod_l+0x5ac>
 800aa2e:	6023      	str	r3, [r4, #0]
 800aa30:	f04f 0a00 	mov.w	sl, #0
 800aa34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f43f adec 	beq.w	800a614 <_strtod_l+0x84>
 800aa3c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f001 fe92 	bl	800c768 <_Bfree>
 800aa44:	9907      	ldr	r1, [sp, #28]
 800aa46:	4620      	mov	r0, r4
 800aa48:	f001 fe8e 	bl	800c768 <_Bfree>
 800aa4c:	4631      	mov	r1, r6
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f001 fe8a 	bl	800c768 <_Bfree>
 800aa54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa56:	4620      	mov	r0, r4
 800aa58:	f001 fe86 	bl	800c768 <_Bfree>
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f001 fe82 	bl	800c768 <_Bfree>
 800aa64:	e5d6      	b.n	800a614 <_strtod_l+0x84>
 800aa66:	2300      	movs	r3, #0
 800aa68:	ea4f 1828 	mov.w	r8, r8, asr #4
 800aa6c:	4650      	mov	r0, sl
 800aa6e:	4659      	mov	r1, fp
 800aa70:	4699      	mov	r9, r3
 800aa72:	f1b8 0f01 	cmp.w	r8, #1
 800aa76:	dc21      	bgt.n	800aabc <_strtod_l+0x52c>
 800aa78:	b10b      	cbz	r3, 800aa7e <_strtod_l+0x4ee>
 800aa7a:	4682      	mov	sl, r0
 800aa7c:	468b      	mov	fp, r1
 800aa7e:	4b2e      	ldr	r3, [pc, #184]	; (800ab38 <_strtod_l+0x5a8>)
 800aa80:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800aa84:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800aa88:	4652      	mov	r2, sl
 800aa8a:	465b      	mov	r3, fp
 800aa8c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800aa90:	f7f5 fdb2 	bl	80005f8 <__aeabi_dmul>
 800aa94:	4b29      	ldr	r3, [pc, #164]	; (800ab3c <_strtod_l+0x5ac>)
 800aa96:	460a      	mov	r2, r1
 800aa98:	400b      	ands	r3, r1
 800aa9a:	4929      	ldr	r1, [pc, #164]	; (800ab40 <_strtod_l+0x5b0>)
 800aa9c:	428b      	cmp	r3, r1
 800aa9e:	4682      	mov	sl, r0
 800aaa0:	d8be      	bhi.n	800aa20 <_strtod_l+0x490>
 800aaa2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aaa6:	428b      	cmp	r3, r1
 800aaa8:	bf86      	itte	hi
 800aaaa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ab44 <_strtod_l+0x5b4>
 800aaae:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800aab2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800aab6:	2300      	movs	r3, #0
 800aab8:	9304      	str	r3, [sp, #16]
 800aaba:	e081      	b.n	800abc0 <_strtod_l+0x630>
 800aabc:	f018 0f01 	tst.w	r8, #1
 800aac0:	d007      	beq.n	800aad2 <_strtod_l+0x542>
 800aac2:	4b1d      	ldr	r3, [pc, #116]	; (800ab38 <_strtod_l+0x5a8>)
 800aac4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800aac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aacc:	f7f5 fd94 	bl	80005f8 <__aeabi_dmul>
 800aad0:	2301      	movs	r3, #1
 800aad2:	f109 0901 	add.w	r9, r9, #1
 800aad6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aada:	e7ca      	b.n	800aa72 <_strtod_l+0x4e2>
 800aadc:	d0eb      	beq.n	800aab6 <_strtod_l+0x526>
 800aade:	f1c8 0800 	rsb	r8, r8, #0
 800aae2:	f018 020f 	ands.w	r2, r8, #15
 800aae6:	d00a      	beq.n	800aafe <_strtod_l+0x56e>
 800aae8:	4b12      	ldr	r3, [pc, #72]	; (800ab34 <_strtod_l+0x5a4>)
 800aaea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aaee:	4650      	mov	r0, sl
 800aaf0:	4659      	mov	r1, fp
 800aaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf6:	f7f5 fea9 	bl	800084c <__aeabi_ddiv>
 800aafa:	4682      	mov	sl, r0
 800aafc:	468b      	mov	fp, r1
 800aafe:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ab02:	d0d8      	beq.n	800aab6 <_strtod_l+0x526>
 800ab04:	f1b8 0f1f 	cmp.w	r8, #31
 800ab08:	dd1e      	ble.n	800ab48 <_strtod_l+0x5b8>
 800ab0a:	2500      	movs	r5, #0
 800ab0c:	462e      	mov	r6, r5
 800ab0e:	9509      	str	r5, [sp, #36]	; 0x24
 800ab10:	9507      	str	r5, [sp, #28]
 800ab12:	2322      	movs	r3, #34	; 0x22
 800ab14:	f04f 0a00 	mov.w	sl, #0
 800ab18:	f04f 0b00 	mov.w	fp, #0
 800ab1c:	6023      	str	r3, [r4, #0]
 800ab1e:	e789      	b.n	800aa34 <_strtod_l+0x4a4>
 800ab20:	0800e109 	.word	0x0800e109
 800ab24:	0800e14c 	.word	0x0800e14c
 800ab28:	0800e101 	.word	0x0800e101
 800ab2c:	0800e28c 	.word	0x0800e28c
 800ab30:	0800e548 	.word	0x0800e548
 800ab34:	0800e428 	.word	0x0800e428
 800ab38:	0800e400 	.word	0x0800e400
 800ab3c:	7ff00000 	.word	0x7ff00000
 800ab40:	7ca00000 	.word	0x7ca00000
 800ab44:	7fefffff 	.word	0x7fefffff
 800ab48:	f018 0310 	ands.w	r3, r8, #16
 800ab4c:	bf18      	it	ne
 800ab4e:	236a      	movne	r3, #106	; 0x6a
 800ab50:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800af08 <_strtod_l+0x978>
 800ab54:	9304      	str	r3, [sp, #16]
 800ab56:	4650      	mov	r0, sl
 800ab58:	4659      	mov	r1, fp
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	f018 0f01 	tst.w	r8, #1
 800ab60:	d004      	beq.n	800ab6c <_strtod_l+0x5dc>
 800ab62:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ab66:	f7f5 fd47 	bl	80005f8 <__aeabi_dmul>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ab70:	f109 0908 	add.w	r9, r9, #8
 800ab74:	d1f2      	bne.n	800ab5c <_strtod_l+0x5cc>
 800ab76:	b10b      	cbz	r3, 800ab7c <_strtod_l+0x5ec>
 800ab78:	4682      	mov	sl, r0
 800ab7a:	468b      	mov	fp, r1
 800ab7c:	9b04      	ldr	r3, [sp, #16]
 800ab7e:	b1bb      	cbz	r3, 800abb0 <_strtod_l+0x620>
 800ab80:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ab84:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	4659      	mov	r1, fp
 800ab8c:	dd10      	ble.n	800abb0 <_strtod_l+0x620>
 800ab8e:	2b1f      	cmp	r3, #31
 800ab90:	f340 8128 	ble.w	800ade4 <_strtod_l+0x854>
 800ab94:	2b34      	cmp	r3, #52	; 0x34
 800ab96:	bfde      	ittt	le
 800ab98:	3b20      	suble	r3, #32
 800ab9a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800ab9e:	fa02 f303 	lslle.w	r3, r2, r3
 800aba2:	f04f 0a00 	mov.w	sl, #0
 800aba6:	bfcc      	ite	gt
 800aba8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800abac:	ea03 0b01 	andle.w	fp, r3, r1
 800abb0:	2200      	movs	r2, #0
 800abb2:	2300      	movs	r3, #0
 800abb4:	4650      	mov	r0, sl
 800abb6:	4659      	mov	r1, fp
 800abb8:	f7f5 ff86 	bl	8000ac8 <__aeabi_dcmpeq>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d1a4      	bne.n	800ab0a <_strtod_l+0x57a>
 800abc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc2:	9300      	str	r3, [sp, #0]
 800abc4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800abc6:	462b      	mov	r3, r5
 800abc8:	463a      	mov	r2, r7
 800abca:	4620      	mov	r0, r4
 800abcc:	f001 fe38 	bl	800c840 <__s2b>
 800abd0:	9009      	str	r0, [sp, #36]	; 0x24
 800abd2:	2800      	cmp	r0, #0
 800abd4:	f43f af24 	beq.w	800aa20 <_strtod_l+0x490>
 800abd8:	9b07      	ldr	r3, [sp, #28]
 800abda:	1b9e      	subs	r6, r3, r6
 800abdc:	9b08      	ldr	r3, [sp, #32]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	bfb4      	ite	lt
 800abe2:	4633      	movlt	r3, r6
 800abe4:	2300      	movge	r3, #0
 800abe6:	9310      	str	r3, [sp, #64]	; 0x40
 800abe8:	9b08      	ldr	r3, [sp, #32]
 800abea:	2500      	movs	r5, #0
 800abec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800abf0:	9318      	str	r3, [sp, #96]	; 0x60
 800abf2:	462e      	mov	r6, r5
 800abf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf6:	4620      	mov	r0, r4
 800abf8:	6859      	ldr	r1, [r3, #4]
 800abfa:	f001 fd75 	bl	800c6e8 <_Balloc>
 800abfe:	9007      	str	r0, [sp, #28]
 800ac00:	2800      	cmp	r0, #0
 800ac02:	f43f af11 	beq.w	800aa28 <_strtod_l+0x498>
 800ac06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac08:	691a      	ldr	r2, [r3, #16]
 800ac0a:	3202      	adds	r2, #2
 800ac0c:	f103 010c 	add.w	r1, r3, #12
 800ac10:	0092      	lsls	r2, r2, #2
 800ac12:	300c      	adds	r0, #12
 800ac14:	f001 fd5a 	bl	800c6cc <memcpy>
 800ac18:	ec4b ab10 	vmov	d0, sl, fp
 800ac1c:	aa20      	add	r2, sp, #128	; 0x80
 800ac1e:	a91f      	add	r1, sp, #124	; 0x7c
 800ac20:	4620      	mov	r0, r4
 800ac22:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ac26:	f002 f947 	bl	800ceb8 <__d2b>
 800ac2a:	901e      	str	r0, [sp, #120]	; 0x78
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	f43f aefb 	beq.w	800aa28 <_strtod_l+0x498>
 800ac32:	2101      	movs	r1, #1
 800ac34:	4620      	mov	r0, r4
 800ac36:	f001 fe9d 	bl	800c974 <__i2b>
 800ac3a:	4606      	mov	r6, r0
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	f43f aef3 	beq.w	800aa28 <_strtod_l+0x498>
 800ac42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ac44:	9904      	ldr	r1, [sp, #16]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	bfab      	itete	ge
 800ac4a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ac4c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ac4e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ac50:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800ac54:	bfac      	ite	ge
 800ac56:	eb03 0902 	addge.w	r9, r3, r2
 800ac5a:	1ad7      	sublt	r7, r2, r3
 800ac5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ac5e:	eba3 0801 	sub.w	r8, r3, r1
 800ac62:	4490      	add	r8, r2
 800ac64:	4ba3      	ldr	r3, [pc, #652]	; (800aef4 <_strtod_l+0x964>)
 800ac66:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ac6a:	4598      	cmp	r8, r3
 800ac6c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ac70:	f280 80cc 	bge.w	800ae0c <_strtod_l+0x87c>
 800ac74:	eba3 0308 	sub.w	r3, r3, r8
 800ac78:	2b1f      	cmp	r3, #31
 800ac7a:	eba2 0203 	sub.w	r2, r2, r3
 800ac7e:	f04f 0101 	mov.w	r1, #1
 800ac82:	f300 80b6 	bgt.w	800adf2 <_strtod_l+0x862>
 800ac86:	fa01 f303 	lsl.w	r3, r1, r3
 800ac8a:	9311      	str	r3, [sp, #68]	; 0x44
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	930c      	str	r3, [sp, #48]	; 0x30
 800ac90:	eb09 0802 	add.w	r8, r9, r2
 800ac94:	9b04      	ldr	r3, [sp, #16]
 800ac96:	45c1      	cmp	r9, r8
 800ac98:	4417      	add	r7, r2
 800ac9a:	441f      	add	r7, r3
 800ac9c:	464b      	mov	r3, r9
 800ac9e:	bfa8      	it	ge
 800aca0:	4643      	movge	r3, r8
 800aca2:	42bb      	cmp	r3, r7
 800aca4:	bfa8      	it	ge
 800aca6:	463b      	movge	r3, r7
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	bfc2      	ittt	gt
 800acac:	eba8 0803 	subgt.w	r8, r8, r3
 800acb0:	1aff      	subgt	r7, r7, r3
 800acb2:	eba9 0903 	subgt.w	r9, r9, r3
 800acb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acb8:	2b00      	cmp	r3, #0
 800acba:	dd17      	ble.n	800acec <_strtod_l+0x75c>
 800acbc:	4631      	mov	r1, r6
 800acbe:	461a      	mov	r2, r3
 800acc0:	4620      	mov	r0, r4
 800acc2:	f001 ff13 	bl	800caec <__pow5mult>
 800acc6:	4606      	mov	r6, r0
 800acc8:	2800      	cmp	r0, #0
 800acca:	f43f aead 	beq.w	800aa28 <_strtod_l+0x498>
 800acce:	4601      	mov	r1, r0
 800acd0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800acd2:	4620      	mov	r0, r4
 800acd4:	f001 fe64 	bl	800c9a0 <__multiply>
 800acd8:	900f      	str	r0, [sp, #60]	; 0x3c
 800acda:	2800      	cmp	r0, #0
 800acdc:	f43f aea4 	beq.w	800aa28 <_strtod_l+0x498>
 800ace0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ace2:	4620      	mov	r0, r4
 800ace4:	f001 fd40 	bl	800c768 <_Bfree>
 800ace8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acea:	931e      	str	r3, [sp, #120]	; 0x78
 800acec:	f1b8 0f00 	cmp.w	r8, #0
 800acf0:	f300 8091 	bgt.w	800ae16 <_strtod_l+0x886>
 800acf4:	9b08      	ldr	r3, [sp, #32]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	dd08      	ble.n	800ad0c <_strtod_l+0x77c>
 800acfa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800acfc:	9907      	ldr	r1, [sp, #28]
 800acfe:	4620      	mov	r0, r4
 800ad00:	f001 fef4 	bl	800caec <__pow5mult>
 800ad04:	9007      	str	r0, [sp, #28]
 800ad06:	2800      	cmp	r0, #0
 800ad08:	f43f ae8e 	beq.w	800aa28 <_strtod_l+0x498>
 800ad0c:	2f00      	cmp	r7, #0
 800ad0e:	dd08      	ble.n	800ad22 <_strtod_l+0x792>
 800ad10:	9907      	ldr	r1, [sp, #28]
 800ad12:	463a      	mov	r2, r7
 800ad14:	4620      	mov	r0, r4
 800ad16:	f001 ff43 	bl	800cba0 <__lshift>
 800ad1a:	9007      	str	r0, [sp, #28]
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	f43f ae83 	beq.w	800aa28 <_strtod_l+0x498>
 800ad22:	f1b9 0f00 	cmp.w	r9, #0
 800ad26:	dd08      	ble.n	800ad3a <_strtod_l+0x7aa>
 800ad28:	4631      	mov	r1, r6
 800ad2a:	464a      	mov	r2, r9
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	f001 ff37 	bl	800cba0 <__lshift>
 800ad32:	4606      	mov	r6, r0
 800ad34:	2800      	cmp	r0, #0
 800ad36:	f43f ae77 	beq.w	800aa28 <_strtod_l+0x498>
 800ad3a:	9a07      	ldr	r2, [sp, #28]
 800ad3c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f001 ffb6 	bl	800ccb0 <__mdiff>
 800ad44:	4605      	mov	r5, r0
 800ad46:	2800      	cmp	r0, #0
 800ad48:	f43f ae6e 	beq.w	800aa28 <_strtod_l+0x498>
 800ad4c:	68c3      	ldr	r3, [r0, #12]
 800ad4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad50:	2300      	movs	r3, #0
 800ad52:	60c3      	str	r3, [r0, #12]
 800ad54:	4631      	mov	r1, r6
 800ad56:	f001 ff8f 	bl	800cc78 <__mcmp>
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	da65      	bge.n	800ae2a <_strtod_l+0x89a>
 800ad5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad60:	ea53 030a 	orrs.w	r3, r3, sl
 800ad64:	f040 8087 	bne.w	800ae76 <_strtod_l+0x8e6>
 800ad68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f040 8082 	bne.w	800ae76 <_strtod_l+0x8e6>
 800ad72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ad76:	0d1b      	lsrs	r3, r3, #20
 800ad78:	051b      	lsls	r3, r3, #20
 800ad7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ad7e:	d97a      	bls.n	800ae76 <_strtod_l+0x8e6>
 800ad80:	696b      	ldr	r3, [r5, #20]
 800ad82:	b913      	cbnz	r3, 800ad8a <_strtod_l+0x7fa>
 800ad84:	692b      	ldr	r3, [r5, #16]
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	dd75      	ble.n	800ae76 <_strtod_l+0x8e6>
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f001 ff06 	bl	800cba0 <__lshift>
 800ad94:	4631      	mov	r1, r6
 800ad96:	4605      	mov	r5, r0
 800ad98:	f001 ff6e 	bl	800cc78 <__mcmp>
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	dd6a      	ble.n	800ae76 <_strtod_l+0x8e6>
 800ada0:	9904      	ldr	r1, [sp, #16]
 800ada2:	4a55      	ldr	r2, [pc, #340]	; (800aef8 <_strtod_l+0x968>)
 800ada4:	465b      	mov	r3, fp
 800ada6:	2900      	cmp	r1, #0
 800ada8:	f000 8085 	beq.w	800aeb6 <_strtod_l+0x926>
 800adac:	ea02 010b 	and.w	r1, r2, fp
 800adb0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800adb4:	dc7f      	bgt.n	800aeb6 <_strtod_l+0x926>
 800adb6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800adba:	f77f aeaa 	ble.w	800ab12 <_strtod_l+0x582>
 800adbe:	4a4f      	ldr	r2, [pc, #316]	; (800aefc <_strtod_l+0x96c>)
 800adc0:	2300      	movs	r3, #0
 800adc2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800adc6:	4650      	mov	r0, sl
 800adc8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800adcc:	4659      	mov	r1, fp
 800adce:	f7f5 fc13 	bl	80005f8 <__aeabi_dmul>
 800add2:	460b      	mov	r3, r1
 800add4:	4303      	orrs	r3, r0
 800add6:	bf08      	it	eq
 800add8:	2322      	moveq	r3, #34	; 0x22
 800adda:	4682      	mov	sl, r0
 800addc:	468b      	mov	fp, r1
 800adde:	bf08      	it	eq
 800ade0:	6023      	streq	r3, [r4, #0]
 800ade2:	e62b      	b.n	800aa3c <_strtod_l+0x4ac>
 800ade4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ade8:	fa02 f303 	lsl.w	r3, r2, r3
 800adec:	ea03 0a0a 	and.w	sl, r3, sl
 800adf0:	e6de      	b.n	800abb0 <_strtod_l+0x620>
 800adf2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800adf6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800adfa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800adfe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ae02:	fa01 f308 	lsl.w	r3, r1, r8
 800ae06:	930c      	str	r3, [sp, #48]	; 0x30
 800ae08:	9111      	str	r1, [sp, #68]	; 0x44
 800ae0a:	e741      	b.n	800ac90 <_strtod_l+0x700>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	930c      	str	r3, [sp, #48]	; 0x30
 800ae10:	2301      	movs	r3, #1
 800ae12:	9311      	str	r3, [sp, #68]	; 0x44
 800ae14:	e73c      	b.n	800ac90 <_strtod_l+0x700>
 800ae16:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ae18:	4642      	mov	r2, r8
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f001 fec0 	bl	800cba0 <__lshift>
 800ae20:	901e      	str	r0, [sp, #120]	; 0x78
 800ae22:	2800      	cmp	r0, #0
 800ae24:	f47f af66 	bne.w	800acf4 <_strtod_l+0x764>
 800ae28:	e5fe      	b.n	800aa28 <_strtod_l+0x498>
 800ae2a:	465f      	mov	r7, fp
 800ae2c:	d16e      	bne.n	800af0c <_strtod_l+0x97c>
 800ae2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae34:	b342      	cbz	r2, 800ae88 <_strtod_l+0x8f8>
 800ae36:	4a32      	ldr	r2, [pc, #200]	; (800af00 <_strtod_l+0x970>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d128      	bne.n	800ae8e <_strtod_l+0x8fe>
 800ae3c:	9b04      	ldr	r3, [sp, #16]
 800ae3e:	4650      	mov	r0, sl
 800ae40:	b1eb      	cbz	r3, 800ae7e <_strtod_l+0x8ee>
 800ae42:	4a2d      	ldr	r2, [pc, #180]	; (800aef8 <_strtod_l+0x968>)
 800ae44:	403a      	ands	r2, r7
 800ae46:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ae4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ae4e:	d819      	bhi.n	800ae84 <_strtod_l+0x8f4>
 800ae50:	0d12      	lsrs	r2, r2, #20
 800ae52:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ae56:	fa01 f303 	lsl.w	r3, r1, r3
 800ae5a:	4298      	cmp	r0, r3
 800ae5c:	d117      	bne.n	800ae8e <_strtod_l+0x8fe>
 800ae5e:	4b29      	ldr	r3, [pc, #164]	; (800af04 <_strtod_l+0x974>)
 800ae60:	429f      	cmp	r7, r3
 800ae62:	d102      	bne.n	800ae6a <_strtod_l+0x8da>
 800ae64:	3001      	adds	r0, #1
 800ae66:	f43f addf 	beq.w	800aa28 <_strtod_l+0x498>
 800ae6a:	4b23      	ldr	r3, [pc, #140]	; (800aef8 <_strtod_l+0x968>)
 800ae6c:	403b      	ands	r3, r7
 800ae6e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ae72:	f04f 0a00 	mov.w	sl, #0
 800ae76:	9b04      	ldr	r3, [sp, #16]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d1a0      	bne.n	800adbe <_strtod_l+0x82e>
 800ae7c:	e5de      	b.n	800aa3c <_strtod_l+0x4ac>
 800ae7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae82:	e7ea      	b.n	800ae5a <_strtod_l+0x8ca>
 800ae84:	460b      	mov	r3, r1
 800ae86:	e7e8      	b.n	800ae5a <_strtod_l+0x8ca>
 800ae88:	ea53 030a 	orrs.w	r3, r3, sl
 800ae8c:	d088      	beq.n	800ada0 <_strtod_l+0x810>
 800ae8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae90:	b1db      	cbz	r3, 800aeca <_strtod_l+0x93a>
 800ae92:	423b      	tst	r3, r7
 800ae94:	d0ef      	beq.n	800ae76 <_strtod_l+0x8e6>
 800ae96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae98:	9a04      	ldr	r2, [sp, #16]
 800ae9a:	4650      	mov	r0, sl
 800ae9c:	4659      	mov	r1, fp
 800ae9e:	b1c3      	cbz	r3, 800aed2 <_strtod_l+0x942>
 800aea0:	f7ff fb5a 	bl	800a558 <sulp>
 800aea4:	4602      	mov	r2, r0
 800aea6:	460b      	mov	r3, r1
 800aea8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aeac:	f7f5 f9ee 	bl	800028c <__adddf3>
 800aeb0:	4682      	mov	sl, r0
 800aeb2:	468b      	mov	fp, r1
 800aeb4:	e7df      	b.n	800ae76 <_strtod_l+0x8e6>
 800aeb6:	4013      	ands	r3, r2
 800aeb8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800aebc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aec0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aec4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800aec8:	e7d5      	b.n	800ae76 <_strtod_l+0x8e6>
 800aeca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aecc:	ea13 0f0a 	tst.w	r3, sl
 800aed0:	e7e0      	b.n	800ae94 <_strtod_l+0x904>
 800aed2:	f7ff fb41 	bl	800a558 <sulp>
 800aed6:	4602      	mov	r2, r0
 800aed8:	460b      	mov	r3, r1
 800aeda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aede:	f7f5 f9d3 	bl	8000288 <__aeabi_dsub>
 800aee2:	2200      	movs	r2, #0
 800aee4:	2300      	movs	r3, #0
 800aee6:	4682      	mov	sl, r0
 800aee8:	468b      	mov	fp, r1
 800aeea:	f7f5 fded 	bl	8000ac8 <__aeabi_dcmpeq>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d0c1      	beq.n	800ae76 <_strtod_l+0x8e6>
 800aef2:	e60e      	b.n	800ab12 <_strtod_l+0x582>
 800aef4:	fffffc02 	.word	0xfffffc02
 800aef8:	7ff00000 	.word	0x7ff00000
 800aefc:	39500000 	.word	0x39500000
 800af00:	000fffff 	.word	0x000fffff
 800af04:	7fefffff 	.word	0x7fefffff
 800af08:	0800e160 	.word	0x0800e160
 800af0c:	4631      	mov	r1, r6
 800af0e:	4628      	mov	r0, r5
 800af10:	f002 f82e 	bl	800cf70 <__ratio>
 800af14:	ec59 8b10 	vmov	r8, r9, d0
 800af18:	ee10 0a10 	vmov	r0, s0
 800af1c:	2200      	movs	r2, #0
 800af1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af22:	4649      	mov	r1, r9
 800af24:	f7f5 fde4 	bl	8000af0 <__aeabi_dcmple>
 800af28:	2800      	cmp	r0, #0
 800af2a:	d07c      	beq.n	800b026 <_strtod_l+0xa96>
 800af2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d04c      	beq.n	800afcc <_strtod_l+0xa3c>
 800af32:	4b95      	ldr	r3, [pc, #596]	; (800b188 <_strtod_l+0xbf8>)
 800af34:	2200      	movs	r2, #0
 800af36:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800af3a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b188 <_strtod_l+0xbf8>
 800af3e:	f04f 0800 	mov.w	r8, #0
 800af42:	4b92      	ldr	r3, [pc, #584]	; (800b18c <_strtod_l+0xbfc>)
 800af44:	403b      	ands	r3, r7
 800af46:	9311      	str	r3, [sp, #68]	; 0x44
 800af48:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800af4a:	4b91      	ldr	r3, [pc, #580]	; (800b190 <_strtod_l+0xc00>)
 800af4c:	429a      	cmp	r2, r3
 800af4e:	f040 80b2 	bne.w	800b0b6 <_strtod_l+0xb26>
 800af52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800af56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af5a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800af5e:	ec4b ab10 	vmov	d0, sl, fp
 800af62:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800af66:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800af6a:	f001 ff29 	bl	800cdc0 <__ulp>
 800af6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af72:	ec53 2b10 	vmov	r2, r3, d0
 800af76:	f7f5 fb3f 	bl	80005f8 <__aeabi_dmul>
 800af7a:	4652      	mov	r2, sl
 800af7c:	465b      	mov	r3, fp
 800af7e:	f7f5 f985 	bl	800028c <__adddf3>
 800af82:	460b      	mov	r3, r1
 800af84:	4981      	ldr	r1, [pc, #516]	; (800b18c <_strtod_l+0xbfc>)
 800af86:	4a83      	ldr	r2, [pc, #524]	; (800b194 <_strtod_l+0xc04>)
 800af88:	4019      	ands	r1, r3
 800af8a:	4291      	cmp	r1, r2
 800af8c:	4682      	mov	sl, r0
 800af8e:	d95e      	bls.n	800b04e <_strtod_l+0xabe>
 800af90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af92:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800af96:	4293      	cmp	r3, r2
 800af98:	d103      	bne.n	800afa2 <_strtod_l+0xa12>
 800af9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af9c:	3301      	adds	r3, #1
 800af9e:	f43f ad43 	beq.w	800aa28 <_strtod_l+0x498>
 800afa2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b1a0 <_strtod_l+0xc10>
 800afa6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800afaa:	991e      	ldr	r1, [sp, #120]	; 0x78
 800afac:	4620      	mov	r0, r4
 800afae:	f001 fbdb 	bl	800c768 <_Bfree>
 800afb2:	9907      	ldr	r1, [sp, #28]
 800afb4:	4620      	mov	r0, r4
 800afb6:	f001 fbd7 	bl	800c768 <_Bfree>
 800afba:	4631      	mov	r1, r6
 800afbc:	4620      	mov	r0, r4
 800afbe:	f001 fbd3 	bl	800c768 <_Bfree>
 800afc2:	4629      	mov	r1, r5
 800afc4:	4620      	mov	r0, r4
 800afc6:	f001 fbcf 	bl	800c768 <_Bfree>
 800afca:	e613      	b.n	800abf4 <_strtod_l+0x664>
 800afcc:	f1ba 0f00 	cmp.w	sl, #0
 800afd0:	d11b      	bne.n	800b00a <_strtod_l+0xa7a>
 800afd2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afd6:	b9f3      	cbnz	r3, 800b016 <_strtod_l+0xa86>
 800afd8:	4b6b      	ldr	r3, [pc, #428]	; (800b188 <_strtod_l+0xbf8>)
 800afda:	2200      	movs	r2, #0
 800afdc:	4640      	mov	r0, r8
 800afde:	4649      	mov	r1, r9
 800afe0:	f7f5 fd7c 	bl	8000adc <__aeabi_dcmplt>
 800afe4:	b9d0      	cbnz	r0, 800b01c <_strtod_l+0xa8c>
 800afe6:	4640      	mov	r0, r8
 800afe8:	4649      	mov	r1, r9
 800afea:	4b6b      	ldr	r3, [pc, #428]	; (800b198 <_strtod_l+0xc08>)
 800afec:	2200      	movs	r2, #0
 800afee:	f7f5 fb03 	bl	80005f8 <__aeabi_dmul>
 800aff2:	4680      	mov	r8, r0
 800aff4:	4689      	mov	r9, r1
 800aff6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800affa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800affe:	931b      	str	r3, [sp, #108]	; 0x6c
 800b000:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b004:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b008:	e79b      	b.n	800af42 <_strtod_l+0x9b2>
 800b00a:	f1ba 0f01 	cmp.w	sl, #1
 800b00e:	d102      	bne.n	800b016 <_strtod_l+0xa86>
 800b010:	2f00      	cmp	r7, #0
 800b012:	f43f ad7e 	beq.w	800ab12 <_strtod_l+0x582>
 800b016:	4b61      	ldr	r3, [pc, #388]	; (800b19c <_strtod_l+0xc0c>)
 800b018:	2200      	movs	r2, #0
 800b01a:	e78c      	b.n	800af36 <_strtod_l+0x9a6>
 800b01c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b198 <_strtod_l+0xc08>
 800b020:	f04f 0800 	mov.w	r8, #0
 800b024:	e7e7      	b.n	800aff6 <_strtod_l+0xa66>
 800b026:	4b5c      	ldr	r3, [pc, #368]	; (800b198 <_strtod_l+0xc08>)
 800b028:	4640      	mov	r0, r8
 800b02a:	4649      	mov	r1, r9
 800b02c:	2200      	movs	r2, #0
 800b02e:	f7f5 fae3 	bl	80005f8 <__aeabi_dmul>
 800b032:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b034:	4680      	mov	r8, r0
 800b036:	4689      	mov	r9, r1
 800b038:	b933      	cbnz	r3, 800b048 <_strtod_l+0xab8>
 800b03a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b03e:	9012      	str	r0, [sp, #72]	; 0x48
 800b040:	9313      	str	r3, [sp, #76]	; 0x4c
 800b042:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b046:	e7dd      	b.n	800b004 <_strtod_l+0xa74>
 800b048:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800b04c:	e7f9      	b.n	800b042 <_strtod_l+0xab2>
 800b04e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b052:	9b04      	ldr	r3, [sp, #16]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d1a8      	bne.n	800afaa <_strtod_l+0xa1a>
 800b058:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b05c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b05e:	0d1b      	lsrs	r3, r3, #20
 800b060:	051b      	lsls	r3, r3, #20
 800b062:	429a      	cmp	r2, r3
 800b064:	d1a1      	bne.n	800afaa <_strtod_l+0xa1a>
 800b066:	4640      	mov	r0, r8
 800b068:	4649      	mov	r1, r9
 800b06a:	f7f5 fe25 	bl	8000cb8 <__aeabi_d2lz>
 800b06e:	f7f5 fa95 	bl	800059c <__aeabi_l2d>
 800b072:	4602      	mov	r2, r0
 800b074:	460b      	mov	r3, r1
 800b076:	4640      	mov	r0, r8
 800b078:	4649      	mov	r1, r9
 800b07a:	f7f5 f905 	bl	8000288 <__aeabi_dsub>
 800b07e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b080:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b084:	ea43 030a 	orr.w	r3, r3, sl
 800b088:	4313      	orrs	r3, r2
 800b08a:	4680      	mov	r8, r0
 800b08c:	4689      	mov	r9, r1
 800b08e:	d053      	beq.n	800b138 <_strtod_l+0xba8>
 800b090:	a335      	add	r3, pc, #212	; (adr r3, 800b168 <_strtod_l+0xbd8>)
 800b092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b096:	f7f5 fd21 	bl	8000adc <__aeabi_dcmplt>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	f47f acce 	bne.w	800aa3c <_strtod_l+0x4ac>
 800b0a0:	a333      	add	r3, pc, #204	; (adr r3, 800b170 <_strtod_l+0xbe0>)
 800b0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a6:	4640      	mov	r0, r8
 800b0a8:	4649      	mov	r1, r9
 800b0aa:	f7f5 fd35 	bl	8000b18 <__aeabi_dcmpgt>
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	f43f af7b 	beq.w	800afaa <_strtod_l+0xa1a>
 800b0b4:	e4c2      	b.n	800aa3c <_strtod_l+0x4ac>
 800b0b6:	9b04      	ldr	r3, [sp, #16]
 800b0b8:	b333      	cbz	r3, 800b108 <_strtod_l+0xb78>
 800b0ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b0c0:	d822      	bhi.n	800b108 <_strtod_l+0xb78>
 800b0c2:	a32d      	add	r3, pc, #180	; (adr r3, 800b178 <_strtod_l+0xbe8>)
 800b0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c8:	4640      	mov	r0, r8
 800b0ca:	4649      	mov	r1, r9
 800b0cc:	f7f5 fd10 	bl	8000af0 <__aeabi_dcmple>
 800b0d0:	b1a0      	cbz	r0, 800b0fc <_strtod_l+0xb6c>
 800b0d2:	4649      	mov	r1, r9
 800b0d4:	4640      	mov	r0, r8
 800b0d6:	f7f5 fd67 	bl	8000ba8 <__aeabi_d2uiz>
 800b0da:	2801      	cmp	r0, #1
 800b0dc:	bf38      	it	cc
 800b0de:	2001      	movcc	r0, #1
 800b0e0:	f7f5 fa10 	bl	8000504 <__aeabi_ui2d>
 800b0e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0e6:	4680      	mov	r8, r0
 800b0e8:	4689      	mov	r9, r1
 800b0ea:	bb13      	cbnz	r3, 800b132 <_strtod_l+0xba2>
 800b0ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0f0:	9014      	str	r0, [sp, #80]	; 0x50
 800b0f2:	9315      	str	r3, [sp, #84]	; 0x54
 800b0f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b0f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b0fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b100:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b104:	1a9b      	subs	r3, r3, r2
 800b106:	930d      	str	r3, [sp, #52]	; 0x34
 800b108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b10c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b110:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b114:	f001 fe54 	bl	800cdc0 <__ulp>
 800b118:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b11c:	ec53 2b10 	vmov	r2, r3, d0
 800b120:	f7f5 fa6a 	bl	80005f8 <__aeabi_dmul>
 800b124:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b128:	f7f5 f8b0 	bl	800028c <__adddf3>
 800b12c:	4682      	mov	sl, r0
 800b12e:	468b      	mov	fp, r1
 800b130:	e78f      	b.n	800b052 <_strtod_l+0xac2>
 800b132:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800b136:	e7dd      	b.n	800b0f4 <_strtod_l+0xb64>
 800b138:	a311      	add	r3, pc, #68	; (adr r3, 800b180 <_strtod_l+0xbf0>)
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	f7f5 fccd 	bl	8000adc <__aeabi_dcmplt>
 800b142:	e7b4      	b.n	800b0ae <_strtod_l+0xb1e>
 800b144:	2300      	movs	r3, #0
 800b146:	930e      	str	r3, [sp, #56]	; 0x38
 800b148:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b14a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b14c:	6013      	str	r3, [r2, #0]
 800b14e:	f7ff ba65 	b.w	800a61c <_strtod_l+0x8c>
 800b152:	2b65      	cmp	r3, #101	; 0x65
 800b154:	f43f ab5d 	beq.w	800a812 <_strtod_l+0x282>
 800b158:	2b45      	cmp	r3, #69	; 0x45
 800b15a:	f43f ab5a 	beq.w	800a812 <_strtod_l+0x282>
 800b15e:	2201      	movs	r2, #1
 800b160:	f7ff bb92 	b.w	800a888 <_strtod_l+0x2f8>
 800b164:	f3af 8000 	nop.w
 800b168:	94a03595 	.word	0x94a03595
 800b16c:	3fdfffff 	.word	0x3fdfffff
 800b170:	35afe535 	.word	0x35afe535
 800b174:	3fe00000 	.word	0x3fe00000
 800b178:	ffc00000 	.word	0xffc00000
 800b17c:	41dfffff 	.word	0x41dfffff
 800b180:	94a03595 	.word	0x94a03595
 800b184:	3fcfffff 	.word	0x3fcfffff
 800b188:	3ff00000 	.word	0x3ff00000
 800b18c:	7ff00000 	.word	0x7ff00000
 800b190:	7fe00000 	.word	0x7fe00000
 800b194:	7c9fffff 	.word	0x7c9fffff
 800b198:	3fe00000 	.word	0x3fe00000
 800b19c:	bff00000 	.word	0xbff00000
 800b1a0:	7fefffff 	.word	0x7fefffff

0800b1a4 <_strtod_r>:
 800b1a4:	4b01      	ldr	r3, [pc, #4]	; (800b1ac <_strtod_r+0x8>)
 800b1a6:	f7ff b9f3 	b.w	800a590 <_strtod_l>
 800b1aa:	bf00      	nop
 800b1ac:	200001e8 	.word	0x200001e8

0800b1b0 <_strtol_l.isra.0>:
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1b6:	d001      	beq.n	800b1bc <_strtol_l.isra.0+0xc>
 800b1b8:	2b24      	cmp	r3, #36	; 0x24
 800b1ba:	d906      	bls.n	800b1ca <_strtol_l.isra.0+0x1a>
 800b1bc:	f7fe fac6 	bl	800974c <__errno>
 800b1c0:	2316      	movs	r3, #22
 800b1c2:	6003      	str	r3, [r0, #0]
 800b1c4:	2000      	movs	r0, #0
 800b1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ca:	4f3a      	ldr	r7, [pc, #232]	; (800b2b4 <_strtol_l.isra.0+0x104>)
 800b1cc:	468e      	mov	lr, r1
 800b1ce:	4676      	mov	r6, lr
 800b1d0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b1d4:	5de5      	ldrb	r5, [r4, r7]
 800b1d6:	f015 0508 	ands.w	r5, r5, #8
 800b1da:	d1f8      	bne.n	800b1ce <_strtol_l.isra.0+0x1e>
 800b1dc:	2c2d      	cmp	r4, #45	; 0x2d
 800b1de:	d134      	bne.n	800b24a <_strtol_l.isra.0+0x9a>
 800b1e0:	f89e 4000 	ldrb.w	r4, [lr]
 800b1e4:	f04f 0801 	mov.w	r8, #1
 800b1e8:	f106 0e02 	add.w	lr, r6, #2
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d05c      	beq.n	800b2aa <_strtol_l.isra.0+0xfa>
 800b1f0:	2b10      	cmp	r3, #16
 800b1f2:	d10c      	bne.n	800b20e <_strtol_l.isra.0+0x5e>
 800b1f4:	2c30      	cmp	r4, #48	; 0x30
 800b1f6:	d10a      	bne.n	800b20e <_strtol_l.isra.0+0x5e>
 800b1f8:	f89e 4000 	ldrb.w	r4, [lr]
 800b1fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b200:	2c58      	cmp	r4, #88	; 0x58
 800b202:	d14d      	bne.n	800b2a0 <_strtol_l.isra.0+0xf0>
 800b204:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b208:	2310      	movs	r3, #16
 800b20a:	f10e 0e02 	add.w	lr, lr, #2
 800b20e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b212:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800b216:	2600      	movs	r6, #0
 800b218:	fbbc f9f3 	udiv	r9, ip, r3
 800b21c:	4635      	mov	r5, r6
 800b21e:	fb03 ca19 	mls	sl, r3, r9, ip
 800b222:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b226:	2f09      	cmp	r7, #9
 800b228:	d818      	bhi.n	800b25c <_strtol_l.isra.0+0xac>
 800b22a:	463c      	mov	r4, r7
 800b22c:	42a3      	cmp	r3, r4
 800b22e:	dd24      	ble.n	800b27a <_strtol_l.isra.0+0xca>
 800b230:	2e00      	cmp	r6, #0
 800b232:	db1f      	blt.n	800b274 <_strtol_l.isra.0+0xc4>
 800b234:	45a9      	cmp	r9, r5
 800b236:	d31d      	bcc.n	800b274 <_strtol_l.isra.0+0xc4>
 800b238:	d101      	bne.n	800b23e <_strtol_l.isra.0+0x8e>
 800b23a:	45a2      	cmp	sl, r4
 800b23c:	db1a      	blt.n	800b274 <_strtol_l.isra.0+0xc4>
 800b23e:	fb05 4503 	mla	r5, r5, r3, r4
 800b242:	2601      	movs	r6, #1
 800b244:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b248:	e7eb      	b.n	800b222 <_strtol_l.isra.0+0x72>
 800b24a:	2c2b      	cmp	r4, #43	; 0x2b
 800b24c:	bf08      	it	eq
 800b24e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b252:	46a8      	mov	r8, r5
 800b254:	bf08      	it	eq
 800b256:	f106 0e02 	addeq.w	lr, r6, #2
 800b25a:	e7c7      	b.n	800b1ec <_strtol_l.isra.0+0x3c>
 800b25c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b260:	2f19      	cmp	r7, #25
 800b262:	d801      	bhi.n	800b268 <_strtol_l.isra.0+0xb8>
 800b264:	3c37      	subs	r4, #55	; 0x37
 800b266:	e7e1      	b.n	800b22c <_strtol_l.isra.0+0x7c>
 800b268:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b26c:	2f19      	cmp	r7, #25
 800b26e:	d804      	bhi.n	800b27a <_strtol_l.isra.0+0xca>
 800b270:	3c57      	subs	r4, #87	; 0x57
 800b272:	e7db      	b.n	800b22c <_strtol_l.isra.0+0x7c>
 800b274:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b278:	e7e4      	b.n	800b244 <_strtol_l.isra.0+0x94>
 800b27a:	2e00      	cmp	r6, #0
 800b27c:	da05      	bge.n	800b28a <_strtol_l.isra.0+0xda>
 800b27e:	2322      	movs	r3, #34	; 0x22
 800b280:	6003      	str	r3, [r0, #0]
 800b282:	4665      	mov	r5, ip
 800b284:	b942      	cbnz	r2, 800b298 <_strtol_l.isra.0+0xe8>
 800b286:	4628      	mov	r0, r5
 800b288:	e79d      	b.n	800b1c6 <_strtol_l.isra.0+0x16>
 800b28a:	f1b8 0f00 	cmp.w	r8, #0
 800b28e:	d000      	beq.n	800b292 <_strtol_l.isra.0+0xe2>
 800b290:	426d      	negs	r5, r5
 800b292:	2a00      	cmp	r2, #0
 800b294:	d0f7      	beq.n	800b286 <_strtol_l.isra.0+0xd6>
 800b296:	b10e      	cbz	r6, 800b29c <_strtol_l.isra.0+0xec>
 800b298:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800b29c:	6011      	str	r1, [r2, #0]
 800b29e:	e7f2      	b.n	800b286 <_strtol_l.isra.0+0xd6>
 800b2a0:	2430      	movs	r4, #48	; 0x30
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1b3      	bne.n	800b20e <_strtol_l.isra.0+0x5e>
 800b2a6:	2308      	movs	r3, #8
 800b2a8:	e7b1      	b.n	800b20e <_strtol_l.isra.0+0x5e>
 800b2aa:	2c30      	cmp	r4, #48	; 0x30
 800b2ac:	d0a4      	beq.n	800b1f8 <_strtol_l.isra.0+0x48>
 800b2ae:	230a      	movs	r3, #10
 800b2b0:	e7ad      	b.n	800b20e <_strtol_l.isra.0+0x5e>
 800b2b2:	bf00      	nop
 800b2b4:	0800e189 	.word	0x0800e189

0800b2b8 <_strtol_r>:
 800b2b8:	f7ff bf7a 	b.w	800b1b0 <_strtol_l.isra.0>

0800b2bc <quorem>:
 800b2bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c0:	6903      	ldr	r3, [r0, #16]
 800b2c2:	690c      	ldr	r4, [r1, #16]
 800b2c4:	42a3      	cmp	r3, r4
 800b2c6:	4607      	mov	r7, r0
 800b2c8:	f2c0 8081 	blt.w	800b3ce <quorem+0x112>
 800b2cc:	3c01      	subs	r4, #1
 800b2ce:	f101 0814 	add.w	r8, r1, #20
 800b2d2:	f100 0514 	add.w	r5, r0, #20
 800b2d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2da:	9301      	str	r3, [sp, #4]
 800b2dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b2e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b2ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b2f0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b2f4:	d331      	bcc.n	800b35a <quorem+0x9e>
 800b2f6:	f04f 0e00 	mov.w	lr, #0
 800b2fa:	4640      	mov	r0, r8
 800b2fc:	46ac      	mov	ip, r5
 800b2fe:	46f2      	mov	sl, lr
 800b300:	f850 2b04 	ldr.w	r2, [r0], #4
 800b304:	b293      	uxth	r3, r2
 800b306:	fb06 e303 	mla	r3, r6, r3, lr
 800b30a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b30e:	b29b      	uxth	r3, r3
 800b310:	ebaa 0303 	sub.w	r3, sl, r3
 800b314:	0c12      	lsrs	r2, r2, #16
 800b316:	f8dc a000 	ldr.w	sl, [ip]
 800b31a:	fb06 e202 	mla	r2, r6, r2, lr
 800b31e:	fa13 f38a 	uxtah	r3, r3, sl
 800b322:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b326:	fa1f fa82 	uxth.w	sl, r2
 800b32a:	f8dc 2000 	ldr.w	r2, [ip]
 800b32e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b332:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b336:	b29b      	uxth	r3, r3
 800b338:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b33c:	4581      	cmp	r9, r0
 800b33e:	f84c 3b04 	str.w	r3, [ip], #4
 800b342:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b346:	d2db      	bcs.n	800b300 <quorem+0x44>
 800b348:	f855 300b 	ldr.w	r3, [r5, fp]
 800b34c:	b92b      	cbnz	r3, 800b35a <quorem+0x9e>
 800b34e:	9b01      	ldr	r3, [sp, #4]
 800b350:	3b04      	subs	r3, #4
 800b352:	429d      	cmp	r5, r3
 800b354:	461a      	mov	r2, r3
 800b356:	d32e      	bcc.n	800b3b6 <quorem+0xfa>
 800b358:	613c      	str	r4, [r7, #16]
 800b35a:	4638      	mov	r0, r7
 800b35c:	f001 fc8c 	bl	800cc78 <__mcmp>
 800b360:	2800      	cmp	r0, #0
 800b362:	db24      	blt.n	800b3ae <quorem+0xf2>
 800b364:	3601      	adds	r6, #1
 800b366:	4628      	mov	r0, r5
 800b368:	f04f 0c00 	mov.w	ip, #0
 800b36c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b370:	f8d0 e000 	ldr.w	lr, [r0]
 800b374:	b293      	uxth	r3, r2
 800b376:	ebac 0303 	sub.w	r3, ip, r3
 800b37a:	0c12      	lsrs	r2, r2, #16
 800b37c:	fa13 f38e 	uxtah	r3, r3, lr
 800b380:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b384:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b388:	b29b      	uxth	r3, r3
 800b38a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b38e:	45c1      	cmp	r9, r8
 800b390:	f840 3b04 	str.w	r3, [r0], #4
 800b394:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b398:	d2e8      	bcs.n	800b36c <quorem+0xb0>
 800b39a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b39e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3a2:	b922      	cbnz	r2, 800b3ae <quorem+0xf2>
 800b3a4:	3b04      	subs	r3, #4
 800b3a6:	429d      	cmp	r5, r3
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	d30a      	bcc.n	800b3c2 <quorem+0x106>
 800b3ac:	613c      	str	r4, [r7, #16]
 800b3ae:	4630      	mov	r0, r6
 800b3b0:	b003      	add	sp, #12
 800b3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b6:	6812      	ldr	r2, [r2, #0]
 800b3b8:	3b04      	subs	r3, #4
 800b3ba:	2a00      	cmp	r2, #0
 800b3bc:	d1cc      	bne.n	800b358 <quorem+0x9c>
 800b3be:	3c01      	subs	r4, #1
 800b3c0:	e7c7      	b.n	800b352 <quorem+0x96>
 800b3c2:	6812      	ldr	r2, [r2, #0]
 800b3c4:	3b04      	subs	r3, #4
 800b3c6:	2a00      	cmp	r2, #0
 800b3c8:	d1f0      	bne.n	800b3ac <quorem+0xf0>
 800b3ca:	3c01      	subs	r4, #1
 800b3cc:	e7eb      	b.n	800b3a6 <quorem+0xea>
 800b3ce:	2000      	movs	r0, #0
 800b3d0:	e7ee      	b.n	800b3b0 <quorem+0xf4>
 800b3d2:	0000      	movs	r0, r0
 800b3d4:	0000      	movs	r0, r0
	...

0800b3d8 <_dtoa_r>:
 800b3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3dc:	ed2d 8b02 	vpush	{d8}
 800b3e0:	ec57 6b10 	vmov	r6, r7, d0
 800b3e4:	b095      	sub	sp, #84	; 0x54
 800b3e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b3e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b3ec:	9105      	str	r1, [sp, #20]
 800b3ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	9209      	str	r2, [sp, #36]	; 0x24
 800b3f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3f8:	b975      	cbnz	r5, 800b418 <_dtoa_r+0x40>
 800b3fa:	2010      	movs	r0, #16
 800b3fc:	f001 f94c 	bl	800c698 <malloc>
 800b400:	4602      	mov	r2, r0
 800b402:	6260      	str	r0, [r4, #36]	; 0x24
 800b404:	b920      	cbnz	r0, 800b410 <_dtoa_r+0x38>
 800b406:	4bb2      	ldr	r3, [pc, #712]	; (800b6d0 <_dtoa_r+0x2f8>)
 800b408:	21ea      	movs	r1, #234	; 0xea
 800b40a:	48b2      	ldr	r0, [pc, #712]	; (800b6d4 <_dtoa_r+0x2fc>)
 800b40c:	f002 f874 	bl	800d4f8 <__assert_func>
 800b410:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b414:	6005      	str	r5, [r0, #0]
 800b416:	60c5      	str	r5, [r0, #12]
 800b418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b41a:	6819      	ldr	r1, [r3, #0]
 800b41c:	b151      	cbz	r1, 800b434 <_dtoa_r+0x5c>
 800b41e:	685a      	ldr	r2, [r3, #4]
 800b420:	604a      	str	r2, [r1, #4]
 800b422:	2301      	movs	r3, #1
 800b424:	4093      	lsls	r3, r2
 800b426:	608b      	str	r3, [r1, #8]
 800b428:	4620      	mov	r0, r4
 800b42a:	f001 f99d 	bl	800c768 <_Bfree>
 800b42e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b430:	2200      	movs	r2, #0
 800b432:	601a      	str	r2, [r3, #0]
 800b434:	1e3b      	subs	r3, r7, #0
 800b436:	bfb9      	ittee	lt
 800b438:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b43c:	9303      	strlt	r3, [sp, #12]
 800b43e:	2300      	movge	r3, #0
 800b440:	f8c8 3000 	strge.w	r3, [r8]
 800b444:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b448:	4ba3      	ldr	r3, [pc, #652]	; (800b6d8 <_dtoa_r+0x300>)
 800b44a:	bfbc      	itt	lt
 800b44c:	2201      	movlt	r2, #1
 800b44e:	f8c8 2000 	strlt.w	r2, [r8]
 800b452:	ea33 0309 	bics.w	r3, r3, r9
 800b456:	d11b      	bne.n	800b490 <_dtoa_r+0xb8>
 800b458:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b45a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b45e:	6013      	str	r3, [r2, #0]
 800b460:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b464:	4333      	orrs	r3, r6
 800b466:	f000 857a 	beq.w	800bf5e <_dtoa_r+0xb86>
 800b46a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b46c:	b963      	cbnz	r3, 800b488 <_dtoa_r+0xb0>
 800b46e:	4b9b      	ldr	r3, [pc, #620]	; (800b6dc <_dtoa_r+0x304>)
 800b470:	e024      	b.n	800b4bc <_dtoa_r+0xe4>
 800b472:	4b9b      	ldr	r3, [pc, #620]	; (800b6e0 <_dtoa_r+0x308>)
 800b474:	9300      	str	r3, [sp, #0]
 800b476:	3308      	adds	r3, #8
 800b478:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b47a:	6013      	str	r3, [r2, #0]
 800b47c:	9800      	ldr	r0, [sp, #0]
 800b47e:	b015      	add	sp, #84	; 0x54
 800b480:	ecbd 8b02 	vpop	{d8}
 800b484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b488:	4b94      	ldr	r3, [pc, #592]	; (800b6dc <_dtoa_r+0x304>)
 800b48a:	9300      	str	r3, [sp, #0]
 800b48c:	3303      	adds	r3, #3
 800b48e:	e7f3      	b.n	800b478 <_dtoa_r+0xa0>
 800b490:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b494:	2200      	movs	r2, #0
 800b496:	ec51 0b17 	vmov	r0, r1, d7
 800b49a:	2300      	movs	r3, #0
 800b49c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b4a0:	f7f5 fb12 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4a4:	4680      	mov	r8, r0
 800b4a6:	b158      	cbz	r0, 800b4c0 <_dtoa_r+0xe8>
 800b4a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	6013      	str	r3, [r2, #0]
 800b4ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	f000 8551 	beq.w	800bf58 <_dtoa_r+0xb80>
 800b4b6:	488b      	ldr	r0, [pc, #556]	; (800b6e4 <_dtoa_r+0x30c>)
 800b4b8:	6018      	str	r0, [r3, #0]
 800b4ba:	1e43      	subs	r3, r0, #1
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	e7dd      	b.n	800b47c <_dtoa_r+0xa4>
 800b4c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b4c4:	aa12      	add	r2, sp, #72	; 0x48
 800b4c6:	a913      	add	r1, sp, #76	; 0x4c
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f001 fcf5 	bl	800ceb8 <__d2b>
 800b4ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b4d2:	4683      	mov	fp, r0
 800b4d4:	2d00      	cmp	r5, #0
 800b4d6:	d07c      	beq.n	800b5d2 <_dtoa_r+0x1fa>
 800b4d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b4de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b4e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b4ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b4ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b4f2:	4b7d      	ldr	r3, [pc, #500]	; (800b6e8 <_dtoa_r+0x310>)
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	4630      	mov	r0, r6
 800b4f8:	4639      	mov	r1, r7
 800b4fa:	f7f4 fec5 	bl	8000288 <__aeabi_dsub>
 800b4fe:	a36e      	add	r3, pc, #440	; (adr r3, 800b6b8 <_dtoa_r+0x2e0>)
 800b500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b504:	f7f5 f878 	bl	80005f8 <__aeabi_dmul>
 800b508:	a36d      	add	r3, pc, #436	; (adr r3, 800b6c0 <_dtoa_r+0x2e8>)
 800b50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50e:	f7f4 febd 	bl	800028c <__adddf3>
 800b512:	4606      	mov	r6, r0
 800b514:	4628      	mov	r0, r5
 800b516:	460f      	mov	r7, r1
 800b518:	f7f5 f804 	bl	8000524 <__aeabi_i2d>
 800b51c:	a36a      	add	r3, pc, #424	; (adr r3, 800b6c8 <_dtoa_r+0x2f0>)
 800b51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b522:	f7f5 f869 	bl	80005f8 <__aeabi_dmul>
 800b526:	4602      	mov	r2, r0
 800b528:	460b      	mov	r3, r1
 800b52a:	4630      	mov	r0, r6
 800b52c:	4639      	mov	r1, r7
 800b52e:	f7f4 fead 	bl	800028c <__adddf3>
 800b532:	4606      	mov	r6, r0
 800b534:	460f      	mov	r7, r1
 800b536:	f7f5 fb0f 	bl	8000b58 <__aeabi_d2iz>
 800b53a:	2200      	movs	r2, #0
 800b53c:	4682      	mov	sl, r0
 800b53e:	2300      	movs	r3, #0
 800b540:	4630      	mov	r0, r6
 800b542:	4639      	mov	r1, r7
 800b544:	f7f5 faca 	bl	8000adc <__aeabi_dcmplt>
 800b548:	b148      	cbz	r0, 800b55e <_dtoa_r+0x186>
 800b54a:	4650      	mov	r0, sl
 800b54c:	f7f4 ffea 	bl	8000524 <__aeabi_i2d>
 800b550:	4632      	mov	r2, r6
 800b552:	463b      	mov	r3, r7
 800b554:	f7f5 fab8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b558:	b908      	cbnz	r0, 800b55e <_dtoa_r+0x186>
 800b55a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b55e:	f1ba 0f16 	cmp.w	sl, #22
 800b562:	d854      	bhi.n	800b60e <_dtoa_r+0x236>
 800b564:	4b61      	ldr	r3, [pc, #388]	; (800b6ec <_dtoa_r+0x314>)
 800b566:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b572:	f7f5 fab3 	bl	8000adc <__aeabi_dcmplt>
 800b576:	2800      	cmp	r0, #0
 800b578:	d04b      	beq.n	800b612 <_dtoa_r+0x23a>
 800b57a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b57e:	2300      	movs	r3, #0
 800b580:	930e      	str	r3, [sp, #56]	; 0x38
 800b582:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b584:	1b5d      	subs	r5, r3, r5
 800b586:	1e6b      	subs	r3, r5, #1
 800b588:	9304      	str	r3, [sp, #16]
 800b58a:	bf43      	ittte	mi
 800b58c:	2300      	movmi	r3, #0
 800b58e:	f1c5 0801 	rsbmi	r8, r5, #1
 800b592:	9304      	strmi	r3, [sp, #16]
 800b594:	f04f 0800 	movpl.w	r8, #0
 800b598:	f1ba 0f00 	cmp.w	sl, #0
 800b59c:	db3b      	blt.n	800b616 <_dtoa_r+0x23e>
 800b59e:	9b04      	ldr	r3, [sp, #16]
 800b5a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b5a4:	4453      	add	r3, sl
 800b5a6:	9304      	str	r3, [sp, #16]
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	9306      	str	r3, [sp, #24]
 800b5ac:	9b05      	ldr	r3, [sp, #20]
 800b5ae:	2b09      	cmp	r3, #9
 800b5b0:	d869      	bhi.n	800b686 <_dtoa_r+0x2ae>
 800b5b2:	2b05      	cmp	r3, #5
 800b5b4:	bfc4      	itt	gt
 800b5b6:	3b04      	subgt	r3, #4
 800b5b8:	9305      	strgt	r3, [sp, #20]
 800b5ba:	9b05      	ldr	r3, [sp, #20]
 800b5bc:	f1a3 0302 	sub.w	r3, r3, #2
 800b5c0:	bfcc      	ite	gt
 800b5c2:	2500      	movgt	r5, #0
 800b5c4:	2501      	movle	r5, #1
 800b5c6:	2b03      	cmp	r3, #3
 800b5c8:	d869      	bhi.n	800b69e <_dtoa_r+0x2c6>
 800b5ca:	e8df f003 	tbb	[pc, r3]
 800b5ce:	4e2c      	.short	0x4e2c
 800b5d0:	5a4c      	.short	0x5a4c
 800b5d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b5d6:	441d      	add	r5, r3
 800b5d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b5dc:	2b20      	cmp	r3, #32
 800b5de:	bfc1      	itttt	gt
 800b5e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b5e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b5e8:	fa09 f303 	lslgt.w	r3, r9, r3
 800b5ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b5f0:	bfda      	itte	le
 800b5f2:	f1c3 0320 	rsble	r3, r3, #32
 800b5f6:	fa06 f003 	lslle.w	r0, r6, r3
 800b5fa:	4318      	orrgt	r0, r3
 800b5fc:	f7f4 ff82 	bl	8000504 <__aeabi_ui2d>
 800b600:	2301      	movs	r3, #1
 800b602:	4606      	mov	r6, r0
 800b604:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b608:	3d01      	subs	r5, #1
 800b60a:	9310      	str	r3, [sp, #64]	; 0x40
 800b60c:	e771      	b.n	800b4f2 <_dtoa_r+0x11a>
 800b60e:	2301      	movs	r3, #1
 800b610:	e7b6      	b.n	800b580 <_dtoa_r+0x1a8>
 800b612:	900e      	str	r0, [sp, #56]	; 0x38
 800b614:	e7b5      	b.n	800b582 <_dtoa_r+0x1aa>
 800b616:	f1ca 0300 	rsb	r3, sl, #0
 800b61a:	9306      	str	r3, [sp, #24]
 800b61c:	2300      	movs	r3, #0
 800b61e:	eba8 080a 	sub.w	r8, r8, sl
 800b622:	930d      	str	r3, [sp, #52]	; 0x34
 800b624:	e7c2      	b.n	800b5ac <_dtoa_r+0x1d4>
 800b626:	2300      	movs	r3, #0
 800b628:	9308      	str	r3, [sp, #32]
 800b62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	dc39      	bgt.n	800b6a4 <_dtoa_r+0x2cc>
 800b630:	f04f 0901 	mov.w	r9, #1
 800b634:	f8cd 9004 	str.w	r9, [sp, #4]
 800b638:	464b      	mov	r3, r9
 800b63a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b63e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b640:	2200      	movs	r2, #0
 800b642:	6042      	str	r2, [r0, #4]
 800b644:	2204      	movs	r2, #4
 800b646:	f102 0614 	add.w	r6, r2, #20
 800b64a:	429e      	cmp	r6, r3
 800b64c:	6841      	ldr	r1, [r0, #4]
 800b64e:	d92f      	bls.n	800b6b0 <_dtoa_r+0x2d8>
 800b650:	4620      	mov	r0, r4
 800b652:	f001 f849 	bl	800c6e8 <_Balloc>
 800b656:	9000      	str	r0, [sp, #0]
 800b658:	2800      	cmp	r0, #0
 800b65a:	d14b      	bne.n	800b6f4 <_dtoa_r+0x31c>
 800b65c:	4b24      	ldr	r3, [pc, #144]	; (800b6f0 <_dtoa_r+0x318>)
 800b65e:	4602      	mov	r2, r0
 800b660:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b664:	e6d1      	b.n	800b40a <_dtoa_r+0x32>
 800b666:	2301      	movs	r3, #1
 800b668:	e7de      	b.n	800b628 <_dtoa_r+0x250>
 800b66a:	2300      	movs	r3, #0
 800b66c:	9308      	str	r3, [sp, #32]
 800b66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b670:	eb0a 0903 	add.w	r9, sl, r3
 800b674:	f109 0301 	add.w	r3, r9, #1
 800b678:	2b01      	cmp	r3, #1
 800b67a:	9301      	str	r3, [sp, #4]
 800b67c:	bfb8      	it	lt
 800b67e:	2301      	movlt	r3, #1
 800b680:	e7dd      	b.n	800b63e <_dtoa_r+0x266>
 800b682:	2301      	movs	r3, #1
 800b684:	e7f2      	b.n	800b66c <_dtoa_r+0x294>
 800b686:	2501      	movs	r5, #1
 800b688:	2300      	movs	r3, #0
 800b68a:	9305      	str	r3, [sp, #20]
 800b68c:	9508      	str	r5, [sp, #32]
 800b68e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800b692:	2200      	movs	r2, #0
 800b694:	f8cd 9004 	str.w	r9, [sp, #4]
 800b698:	2312      	movs	r3, #18
 800b69a:	9209      	str	r2, [sp, #36]	; 0x24
 800b69c:	e7cf      	b.n	800b63e <_dtoa_r+0x266>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	9308      	str	r3, [sp, #32]
 800b6a2:	e7f4      	b.n	800b68e <_dtoa_r+0x2b6>
 800b6a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b6a8:	f8cd 9004 	str.w	r9, [sp, #4]
 800b6ac:	464b      	mov	r3, r9
 800b6ae:	e7c6      	b.n	800b63e <_dtoa_r+0x266>
 800b6b0:	3101      	adds	r1, #1
 800b6b2:	6041      	str	r1, [r0, #4]
 800b6b4:	0052      	lsls	r2, r2, #1
 800b6b6:	e7c6      	b.n	800b646 <_dtoa_r+0x26e>
 800b6b8:	636f4361 	.word	0x636f4361
 800b6bc:	3fd287a7 	.word	0x3fd287a7
 800b6c0:	8b60c8b3 	.word	0x8b60c8b3
 800b6c4:	3fc68a28 	.word	0x3fc68a28
 800b6c8:	509f79fb 	.word	0x509f79fb
 800b6cc:	3fd34413 	.word	0x3fd34413
 800b6d0:	0800e296 	.word	0x0800e296
 800b6d4:	0800e2ad 	.word	0x0800e2ad
 800b6d8:	7ff00000 	.word	0x7ff00000
 800b6dc:	0800e292 	.word	0x0800e292
 800b6e0:	0800e289 	.word	0x0800e289
 800b6e4:	0800e10d 	.word	0x0800e10d
 800b6e8:	3ff80000 	.word	0x3ff80000
 800b6ec:	0800e428 	.word	0x0800e428
 800b6f0:	0800e30c 	.word	0x0800e30c
 800b6f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6f6:	9a00      	ldr	r2, [sp, #0]
 800b6f8:	601a      	str	r2, [r3, #0]
 800b6fa:	9b01      	ldr	r3, [sp, #4]
 800b6fc:	2b0e      	cmp	r3, #14
 800b6fe:	f200 80ad 	bhi.w	800b85c <_dtoa_r+0x484>
 800b702:	2d00      	cmp	r5, #0
 800b704:	f000 80aa 	beq.w	800b85c <_dtoa_r+0x484>
 800b708:	f1ba 0f00 	cmp.w	sl, #0
 800b70c:	dd36      	ble.n	800b77c <_dtoa_r+0x3a4>
 800b70e:	4ac3      	ldr	r2, [pc, #780]	; (800ba1c <_dtoa_r+0x644>)
 800b710:	f00a 030f 	and.w	r3, sl, #15
 800b714:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b718:	ed93 7b00 	vldr	d7, [r3]
 800b71c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b720:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b724:	eeb0 8a47 	vmov.f32	s16, s14
 800b728:	eef0 8a67 	vmov.f32	s17, s15
 800b72c:	d016      	beq.n	800b75c <_dtoa_r+0x384>
 800b72e:	4bbc      	ldr	r3, [pc, #752]	; (800ba20 <_dtoa_r+0x648>)
 800b730:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b734:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b738:	f7f5 f888 	bl	800084c <__aeabi_ddiv>
 800b73c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b740:	f007 070f 	and.w	r7, r7, #15
 800b744:	2503      	movs	r5, #3
 800b746:	4eb6      	ldr	r6, [pc, #728]	; (800ba20 <_dtoa_r+0x648>)
 800b748:	b957      	cbnz	r7, 800b760 <_dtoa_r+0x388>
 800b74a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b74e:	ec53 2b18 	vmov	r2, r3, d8
 800b752:	f7f5 f87b 	bl	800084c <__aeabi_ddiv>
 800b756:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b75a:	e029      	b.n	800b7b0 <_dtoa_r+0x3d8>
 800b75c:	2502      	movs	r5, #2
 800b75e:	e7f2      	b.n	800b746 <_dtoa_r+0x36e>
 800b760:	07f9      	lsls	r1, r7, #31
 800b762:	d508      	bpl.n	800b776 <_dtoa_r+0x39e>
 800b764:	ec51 0b18 	vmov	r0, r1, d8
 800b768:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b76c:	f7f4 ff44 	bl	80005f8 <__aeabi_dmul>
 800b770:	ec41 0b18 	vmov	d8, r0, r1
 800b774:	3501      	adds	r5, #1
 800b776:	107f      	asrs	r7, r7, #1
 800b778:	3608      	adds	r6, #8
 800b77a:	e7e5      	b.n	800b748 <_dtoa_r+0x370>
 800b77c:	f000 80a6 	beq.w	800b8cc <_dtoa_r+0x4f4>
 800b780:	f1ca 0600 	rsb	r6, sl, #0
 800b784:	4ba5      	ldr	r3, [pc, #660]	; (800ba1c <_dtoa_r+0x644>)
 800b786:	4fa6      	ldr	r7, [pc, #664]	; (800ba20 <_dtoa_r+0x648>)
 800b788:	f006 020f 	and.w	r2, r6, #15
 800b78c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b794:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b798:	f7f4 ff2e 	bl	80005f8 <__aeabi_dmul>
 800b79c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7a0:	1136      	asrs	r6, r6, #4
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	2502      	movs	r5, #2
 800b7a6:	2e00      	cmp	r6, #0
 800b7a8:	f040 8085 	bne.w	800b8b6 <_dtoa_r+0x4de>
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d1d2      	bne.n	800b756 <_dtoa_r+0x37e>
 800b7b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	f000 808c 	beq.w	800b8d0 <_dtoa_r+0x4f8>
 800b7b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b7bc:	4b99      	ldr	r3, [pc, #612]	; (800ba24 <_dtoa_r+0x64c>)
 800b7be:	2200      	movs	r2, #0
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	4639      	mov	r1, r7
 800b7c4:	f7f5 f98a 	bl	8000adc <__aeabi_dcmplt>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	f000 8081 	beq.w	800b8d0 <_dtoa_r+0x4f8>
 800b7ce:	9b01      	ldr	r3, [sp, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d07d      	beq.n	800b8d0 <_dtoa_r+0x4f8>
 800b7d4:	f1b9 0f00 	cmp.w	r9, #0
 800b7d8:	dd3c      	ble.n	800b854 <_dtoa_r+0x47c>
 800b7da:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b7de:	9307      	str	r3, [sp, #28]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	4b91      	ldr	r3, [pc, #580]	; (800ba28 <_dtoa_r+0x650>)
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	4639      	mov	r1, r7
 800b7e8:	f7f4 ff06 	bl	80005f8 <__aeabi_dmul>
 800b7ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7f0:	3501      	adds	r5, #1
 800b7f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b7f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	f7f4 fe92 	bl	8000524 <__aeabi_i2d>
 800b800:	4632      	mov	r2, r6
 800b802:	463b      	mov	r3, r7
 800b804:	f7f4 fef8 	bl	80005f8 <__aeabi_dmul>
 800b808:	4b88      	ldr	r3, [pc, #544]	; (800ba2c <_dtoa_r+0x654>)
 800b80a:	2200      	movs	r2, #0
 800b80c:	f7f4 fd3e 	bl	800028c <__adddf3>
 800b810:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b818:	9303      	str	r3, [sp, #12]
 800b81a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d15c      	bne.n	800b8da <_dtoa_r+0x502>
 800b820:	4b83      	ldr	r3, [pc, #524]	; (800ba30 <_dtoa_r+0x658>)
 800b822:	2200      	movs	r2, #0
 800b824:	4630      	mov	r0, r6
 800b826:	4639      	mov	r1, r7
 800b828:	f7f4 fd2e 	bl	8000288 <__aeabi_dsub>
 800b82c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b830:	4606      	mov	r6, r0
 800b832:	460f      	mov	r7, r1
 800b834:	f7f5 f970 	bl	8000b18 <__aeabi_dcmpgt>
 800b838:	2800      	cmp	r0, #0
 800b83a:	f040 8296 	bne.w	800bd6a <_dtoa_r+0x992>
 800b83e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b842:	4630      	mov	r0, r6
 800b844:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b848:	4639      	mov	r1, r7
 800b84a:	f7f5 f947 	bl	8000adc <__aeabi_dcmplt>
 800b84e:	2800      	cmp	r0, #0
 800b850:	f040 8288 	bne.w	800bd64 <_dtoa_r+0x98c>
 800b854:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b858:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b85c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b85e:	2b00      	cmp	r3, #0
 800b860:	f2c0 8158 	blt.w	800bb14 <_dtoa_r+0x73c>
 800b864:	f1ba 0f0e 	cmp.w	sl, #14
 800b868:	f300 8154 	bgt.w	800bb14 <_dtoa_r+0x73c>
 800b86c:	4b6b      	ldr	r3, [pc, #428]	; (800ba1c <_dtoa_r+0x644>)
 800b86e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b872:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f280 80e3 	bge.w	800ba44 <_dtoa_r+0x66c>
 800b87e:	9b01      	ldr	r3, [sp, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	f300 80df 	bgt.w	800ba44 <_dtoa_r+0x66c>
 800b886:	f040 826d 	bne.w	800bd64 <_dtoa_r+0x98c>
 800b88a:	4b69      	ldr	r3, [pc, #420]	; (800ba30 <_dtoa_r+0x658>)
 800b88c:	2200      	movs	r2, #0
 800b88e:	4640      	mov	r0, r8
 800b890:	4649      	mov	r1, r9
 800b892:	f7f4 feb1 	bl	80005f8 <__aeabi_dmul>
 800b896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b89a:	f7f5 f933 	bl	8000b04 <__aeabi_dcmpge>
 800b89e:	9e01      	ldr	r6, [sp, #4]
 800b8a0:	4637      	mov	r7, r6
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	f040 8243 	bne.w	800bd2e <_dtoa_r+0x956>
 800b8a8:	9d00      	ldr	r5, [sp, #0]
 800b8aa:	2331      	movs	r3, #49	; 0x31
 800b8ac:	f805 3b01 	strb.w	r3, [r5], #1
 800b8b0:	f10a 0a01 	add.w	sl, sl, #1
 800b8b4:	e23f      	b.n	800bd36 <_dtoa_r+0x95e>
 800b8b6:	07f2      	lsls	r2, r6, #31
 800b8b8:	d505      	bpl.n	800b8c6 <_dtoa_r+0x4ee>
 800b8ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8be:	f7f4 fe9b 	bl	80005f8 <__aeabi_dmul>
 800b8c2:	3501      	adds	r5, #1
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	1076      	asrs	r6, r6, #1
 800b8c8:	3708      	adds	r7, #8
 800b8ca:	e76c      	b.n	800b7a6 <_dtoa_r+0x3ce>
 800b8cc:	2502      	movs	r5, #2
 800b8ce:	e76f      	b.n	800b7b0 <_dtoa_r+0x3d8>
 800b8d0:	9b01      	ldr	r3, [sp, #4]
 800b8d2:	f8cd a01c 	str.w	sl, [sp, #28]
 800b8d6:	930c      	str	r3, [sp, #48]	; 0x30
 800b8d8:	e78d      	b.n	800b7f6 <_dtoa_r+0x41e>
 800b8da:	9900      	ldr	r1, [sp, #0]
 800b8dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b8de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8e0:	4b4e      	ldr	r3, [pc, #312]	; (800ba1c <_dtoa_r+0x644>)
 800b8e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8e6:	4401      	add	r1, r0
 800b8e8:	9102      	str	r1, [sp, #8]
 800b8ea:	9908      	ldr	r1, [sp, #32]
 800b8ec:	eeb0 8a47 	vmov.f32	s16, s14
 800b8f0:	eef0 8a67 	vmov.f32	s17, s15
 800b8f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b8fc:	2900      	cmp	r1, #0
 800b8fe:	d045      	beq.n	800b98c <_dtoa_r+0x5b4>
 800b900:	494c      	ldr	r1, [pc, #304]	; (800ba34 <_dtoa_r+0x65c>)
 800b902:	2000      	movs	r0, #0
 800b904:	f7f4 ffa2 	bl	800084c <__aeabi_ddiv>
 800b908:	ec53 2b18 	vmov	r2, r3, d8
 800b90c:	f7f4 fcbc 	bl	8000288 <__aeabi_dsub>
 800b910:	9d00      	ldr	r5, [sp, #0]
 800b912:	ec41 0b18 	vmov	d8, r0, r1
 800b916:	4639      	mov	r1, r7
 800b918:	4630      	mov	r0, r6
 800b91a:	f7f5 f91d 	bl	8000b58 <__aeabi_d2iz>
 800b91e:	900c      	str	r0, [sp, #48]	; 0x30
 800b920:	f7f4 fe00 	bl	8000524 <__aeabi_i2d>
 800b924:	4602      	mov	r2, r0
 800b926:	460b      	mov	r3, r1
 800b928:	4630      	mov	r0, r6
 800b92a:	4639      	mov	r1, r7
 800b92c:	f7f4 fcac 	bl	8000288 <__aeabi_dsub>
 800b930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b932:	3330      	adds	r3, #48	; 0x30
 800b934:	f805 3b01 	strb.w	r3, [r5], #1
 800b938:	ec53 2b18 	vmov	r2, r3, d8
 800b93c:	4606      	mov	r6, r0
 800b93e:	460f      	mov	r7, r1
 800b940:	f7f5 f8cc 	bl	8000adc <__aeabi_dcmplt>
 800b944:	2800      	cmp	r0, #0
 800b946:	d165      	bne.n	800ba14 <_dtoa_r+0x63c>
 800b948:	4632      	mov	r2, r6
 800b94a:	463b      	mov	r3, r7
 800b94c:	4935      	ldr	r1, [pc, #212]	; (800ba24 <_dtoa_r+0x64c>)
 800b94e:	2000      	movs	r0, #0
 800b950:	f7f4 fc9a 	bl	8000288 <__aeabi_dsub>
 800b954:	ec53 2b18 	vmov	r2, r3, d8
 800b958:	f7f5 f8c0 	bl	8000adc <__aeabi_dcmplt>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	f040 80b9 	bne.w	800bad4 <_dtoa_r+0x6fc>
 800b962:	9b02      	ldr	r3, [sp, #8]
 800b964:	429d      	cmp	r5, r3
 800b966:	f43f af75 	beq.w	800b854 <_dtoa_r+0x47c>
 800b96a:	4b2f      	ldr	r3, [pc, #188]	; (800ba28 <_dtoa_r+0x650>)
 800b96c:	ec51 0b18 	vmov	r0, r1, d8
 800b970:	2200      	movs	r2, #0
 800b972:	f7f4 fe41 	bl	80005f8 <__aeabi_dmul>
 800b976:	4b2c      	ldr	r3, [pc, #176]	; (800ba28 <_dtoa_r+0x650>)
 800b978:	ec41 0b18 	vmov	d8, r0, r1
 800b97c:	2200      	movs	r2, #0
 800b97e:	4630      	mov	r0, r6
 800b980:	4639      	mov	r1, r7
 800b982:	f7f4 fe39 	bl	80005f8 <__aeabi_dmul>
 800b986:	4606      	mov	r6, r0
 800b988:	460f      	mov	r7, r1
 800b98a:	e7c4      	b.n	800b916 <_dtoa_r+0x53e>
 800b98c:	ec51 0b17 	vmov	r0, r1, d7
 800b990:	f7f4 fe32 	bl	80005f8 <__aeabi_dmul>
 800b994:	9b02      	ldr	r3, [sp, #8]
 800b996:	9d00      	ldr	r5, [sp, #0]
 800b998:	930c      	str	r3, [sp, #48]	; 0x30
 800b99a:	ec41 0b18 	vmov	d8, r0, r1
 800b99e:	4639      	mov	r1, r7
 800b9a0:	4630      	mov	r0, r6
 800b9a2:	f7f5 f8d9 	bl	8000b58 <__aeabi_d2iz>
 800b9a6:	9011      	str	r0, [sp, #68]	; 0x44
 800b9a8:	f7f4 fdbc 	bl	8000524 <__aeabi_i2d>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	4639      	mov	r1, r7
 800b9b4:	f7f4 fc68 	bl	8000288 <__aeabi_dsub>
 800b9b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9ba:	3330      	adds	r3, #48	; 0x30
 800b9bc:	f805 3b01 	strb.w	r3, [r5], #1
 800b9c0:	9b02      	ldr	r3, [sp, #8]
 800b9c2:	429d      	cmp	r5, r3
 800b9c4:	4606      	mov	r6, r0
 800b9c6:	460f      	mov	r7, r1
 800b9c8:	f04f 0200 	mov.w	r2, #0
 800b9cc:	d134      	bne.n	800ba38 <_dtoa_r+0x660>
 800b9ce:	4b19      	ldr	r3, [pc, #100]	; (800ba34 <_dtoa_r+0x65c>)
 800b9d0:	ec51 0b18 	vmov	r0, r1, d8
 800b9d4:	f7f4 fc5a 	bl	800028c <__adddf3>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	460b      	mov	r3, r1
 800b9dc:	4630      	mov	r0, r6
 800b9de:	4639      	mov	r1, r7
 800b9e0:	f7f5 f89a 	bl	8000b18 <__aeabi_dcmpgt>
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	d175      	bne.n	800bad4 <_dtoa_r+0x6fc>
 800b9e8:	ec53 2b18 	vmov	r2, r3, d8
 800b9ec:	4911      	ldr	r1, [pc, #68]	; (800ba34 <_dtoa_r+0x65c>)
 800b9ee:	2000      	movs	r0, #0
 800b9f0:	f7f4 fc4a 	bl	8000288 <__aeabi_dsub>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	4639      	mov	r1, r7
 800b9fc:	f7f5 f86e 	bl	8000adc <__aeabi_dcmplt>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	f43f af27 	beq.w	800b854 <_dtoa_r+0x47c>
 800ba06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ba08:	1e6b      	subs	r3, r5, #1
 800ba0a:	930c      	str	r3, [sp, #48]	; 0x30
 800ba0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ba10:	2b30      	cmp	r3, #48	; 0x30
 800ba12:	d0f8      	beq.n	800ba06 <_dtoa_r+0x62e>
 800ba14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ba18:	e04a      	b.n	800bab0 <_dtoa_r+0x6d8>
 800ba1a:	bf00      	nop
 800ba1c:	0800e428 	.word	0x0800e428
 800ba20:	0800e400 	.word	0x0800e400
 800ba24:	3ff00000 	.word	0x3ff00000
 800ba28:	40240000 	.word	0x40240000
 800ba2c:	401c0000 	.word	0x401c0000
 800ba30:	40140000 	.word	0x40140000
 800ba34:	3fe00000 	.word	0x3fe00000
 800ba38:	4baf      	ldr	r3, [pc, #700]	; (800bcf8 <_dtoa_r+0x920>)
 800ba3a:	f7f4 fddd 	bl	80005f8 <__aeabi_dmul>
 800ba3e:	4606      	mov	r6, r0
 800ba40:	460f      	mov	r7, r1
 800ba42:	e7ac      	b.n	800b99e <_dtoa_r+0x5c6>
 800ba44:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ba48:	9d00      	ldr	r5, [sp, #0]
 800ba4a:	4642      	mov	r2, r8
 800ba4c:	464b      	mov	r3, r9
 800ba4e:	4630      	mov	r0, r6
 800ba50:	4639      	mov	r1, r7
 800ba52:	f7f4 fefb 	bl	800084c <__aeabi_ddiv>
 800ba56:	f7f5 f87f 	bl	8000b58 <__aeabi_d2iz>
 800ba5a:	9002      	str	r0, [sp, #8]
 800ba5c:	f7f4 fd62 	bl	8000524 <__aeabi_i2d>
 800ba60:	4642      	mov	r2, r8
 800ba62:	464b      	mov	r3, r9
 800ba64:	f7f4 fdc8 	bl	80005f8 <__aeabi_dmul>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	4639      	mov	r1, r7
 800ba70:	f7f4 fc0a 	bl	8000288 <__aeabi_dsub>
 800ba74:	9e02      	ldr	r6, [sp, #8]
 800ba76:	9f01      	ldr	r7, [sp, #4]
 800ba78:	3630      	adds	r6, #48	; 0x30
 800ba7a:	f805 6b01 	strb.w	r6, [r5], #1
 800ba7e:	9e00      	ldr	r6, [sp, #0]
 800ba80:	1bae      	subs	r6, r5, r6
 800ba82:	42b7      	cmp	r7, r6
 800ba84:	4602      	mov	r2, r0
 800ba86:	460b      	mov	r3, r1
 800ba88:	d137      	bne.n	800bafa <_dtoa_r+0x722>
 800ba8a:	f7f4 fbff 	bl	800028c <__adddf3>
 800ba8e:	4642      	mov	r2, r8
 800ba90:	464b      	mov	r3, r9
 800ba92:	4606      	mov	r6, r0
 800ba94:	460f      	mov	r7, r1
 800ba96:	f7f5 f83f 	bl	8000b18 <__aeabi_dcmpgt>
 800ba9a:	b9c8      	cbnz	r0, 800bad0 <_dtoa_r+0x6f8>
 800ba9c:	4642      	mov	r2, r8
 800ba9e:	464b      	mov	r3, r9
 800baa0:	4630      	mov	r0, r6
 800baa2:	4639      	mov	r1, r7
 800baa4:	f7f5 f810 	bl	8000ac8 <__aeabi_dcmpeq>
 800baa8:	b110      	cbz	r0, 800bab0 <_dtoa_r+0x6d8>
 800baaa:	9b02      	ldr	r3, [sp, #8]
 800baac:	07d9      	lsls	r1, r3, #31
 800baae:	d40f      	bmi.n	800bad0 <_dtoa_r+0x6f8>
 800bab0:	4620      	mov	r0, r4
 800bab2:	4659      	mov	r1, fp
 800bab4:	f000 fe58 	bl	800c768 <_Bfree>
 800bab8:	2300      	movs	r3, #0
 800baba:	702b      	strb	r3, [r5, #0]
 800babc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800babe:	f10a 0001 	add.w	r0, sl, #1
 800bac2:	6018      	str	r0, [r3, #0]
 800bac4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f43f acd8 	beq.w	800b47c <_dtoa_r+0xa4>
 800bacc:	601d      	str	r5, [r3, #0]
 800bace:	e4d5      	b.n	800b47c <_dtoa_r+0xa4>
 800bad0:	f8cd a01c 	str.w	sl, [sp, #28]
 800bad4:	462b      	mov	r3, r5
 800bad6:	461d      	mov	r5, r3
 800bad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800badc:	2a39      	cmp	r2, #57	; 0x39
 800bade:	d108      	bne.n	800baf2 <_dtoa_r+0x71a>
 800bae0:	9a00      	ldr	r2, [sp, #0]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d1f7      	bne.n	800bad6 <_dtoa_r+0x6fe>
 800bae6:	9a07      	ldr	r2, [sp, #28]
 800bae8:	9900      	ldr	r1, [sp, #0]
 800baea:	3201      	adds	r2, #1
 800baec:	9207      	str	r2, [sp, #28]
 800baee:	2230      	movs	r2, #48	; 0x30
 800baf0:	700a      	strb	r2, [r1, #0]
 800baf2:	781a      	ldrb	r2, [r3, #0]
 800baf4:	3201      	adds	r2, #1
 800baf6:	701a      	strb	r2, [r3, #0]
 800baf8:	e78c      	b.n	800ba14 <_dtoa_r+0x63c>
 800bafa:	4b7f      	ldr	r3, [pc, #508]	; (800bcf8 <_dtoa_r+0x920>)
 800bafc:	2200      	movs	r2, #0
 800bafe:	f7f4 fd7b 	bl	80005f8 <__aeabi_dmul>
 800bb02:	2200      	movs	r2, #0
 800bb04:	2300      	movs	r3, #0
 800bb06:	4606      	mov	r6, r0
 800bb08:	460f      	mov	r7, r1
 800bb0a:	f7f4 ffdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	d09b      	beq.n	800ba4a <_dtoa_r+0x672>
 800bb12:	e7cd      	b.n	800bab0 <_dtoa_r+0x6d8>
 800bb14:	9a08      	ldr	r2, [sp, #32]
 800bb16:	2a00      	cmp	r2, #0
 800bb18:	f000 80c4 	beq.w	800bca4 <_dtoa_r+0x8cc>
 800bb1c:	9a05      	ldr	r2, [sp, #20]
 800bb1e:	2a01      	cmp	r2, #1
 800bb20:	f300 80a8 	bgt.w	800bc74 <_dtoa_r+0x89c>
 800bb24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bb26:	2a00      	cmp	r2, #0
 800bb28:	f000 80a0 	beq.w	800bc6c <_dtoa_r+0x894>
 800bb2c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bb30:	9e06      	ldr	r6, [sp, #24]
 800bb32:	4645      	mov	r5, r8
 800bb34:	9a04      	ldr	r2, [sp, #16]
 800bb36:	2101      	movs	r1, #1
 800bb38:	441a      	add	r2, r3
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	4498      	add	r8, r3
 800bb3e:	9204      	str	r2, [sp, #16]
 800bb40:	f000 ff18 	bl	800c974 <__i2b>
 800bb44:	4607      	mov	r7, r0
 800bb46:	2d00      	cmp	r5, #0
 800bb48:	dd0b      	ble.n	800bb62 <_dtoa_r+0x78a>
 800bb4a:	9b04      	ldr	r3, [sp, #16]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	dd08      	ble.n	800bb62 <_dtoa_r+0x78a>
 800bb50:	42ab      	cmp	r3, r5
 800bb52:	9a04      	ldr	r2, [sp, #16]
 800bb54:	bfa8      	it	ge
 800bb56:	462b      	movge	r3, r5
 800bb58:	eba8 0803 	sub.w	r8, r8, r3
 800bb5c:	1aed      	subs	r5, r5, r3
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	9304      	str	r3, [sp, #16]
 800bb62:	9b06      	ldr	r3, [sp, #24]
 800bb64:	b1fb      	cbz	r3, 800bba6 <_dtoa_r+0x7ce>
 800bb66:	9b08      	ldr	r3, [sp, #32]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	f000 809f 	beq.w	800bcac <_dtoa_r+0x8d4>
 800bb6e:	2e00      	cmp	r6, #0
 800bb70:	dd11      	ble.n	800bb96 <_dtoa_r+0x7be>
 800bb72:	4639      	mov	r1, r7
 800bb74:	4632      	mov	r2, r6
 800bb76:	4620      	mov	r0, r4
 800bb78:	f000 ffb8 	bl	800caec <__pow5mult>
 800bb7c:	465a      	mov	r2, fp
 800bb7e:	4601      	mov	r1, r0
 800bb80:	4607      	mov	r7, r0
 800bb82:	4620      	mov	r0, r4
 800bb84:	f000 ff0c 	bl	800c9a0 <__multiply>
 800bb88:	4659      	mov	r1, fp
 800bb8a:	9007      	str	r0, [sp, #28]
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f000 fdeb 	bl	800c768 <_Bfree>
 800bb92:	9b07      	ldr	r3, [sp, #28]
 800bb94:	469b      	mov	fp, r3
 800bb96:	9b06      	ldr	r3, [sp, #24]
 800bb98:	1b9a      	subs	r2, r3, r6
 800bb9a:	d004      	beq.n	800bba6 <_dtoa_r+0x7ce>
 800bb9c:	4659      	mov	r1, fp
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f000 ffa4 	bl	800caec <__pow5mult>
 800bba4:	4683      	mov	fp, r0
 800bba6:	2101      	movs	r1, #1
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f000 fee3 	bl	800c974 <__i2b>
 800bbae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	4606      	mov	r6, r0
 800bbb4:	dd7c      	ble.n	800bcb0 <_dtoa_r+0x8d8>
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	4601      	mov	r1, r0
 800bbba:	4620      	mov	r0, r4
 800bbbc:	f000 ff96 	bl	800caec <__pow5mult>
 800bbc0:	9b05      	ldr	r3, [sp, #20]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	4606      	mov	r6, r0
 800bbc6:	dd76      	ble.n	800bcb6 <_dtoa_r+0x8de>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	9306      	str	r3, [sp, #24]
 800bbcc:	6933      	ldr	r3, [r6, #16]
 800bbce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bbd2:	6918      	ldr	r0, [r3, #16]
 800bbd4:	f000 fe7e 	bl	800c8d4 <__hi0bits>
 800bbd8:	f1c0 0020 	rsb	r0, r0, #32
 800bbdc:	9b04      	ldr	r3, [sp, #16]
 800bbde:	4418      	add	r0, r3
 800bbe0:	f010 001f 	ands.w	r0, r0, #31
 800bbe4:	f000 8086 	beq.w	800bcf4 <_dtoa_r+0x91c>
 800bbe8:	f1c0 0320 	rsb	r3, r0, #32
 800bbec:	2b04      	cmp	r3, #4
 800bbee:	dd7f      	ble.n	800bcf0 <_dtoa_r+0x918>
 800bbf0:	f1c0 001c 	rsb	r0, r0, #28
 800bbf4:	9b04      	ldr	r3, [sp, #16]
 800bbf6:	4403      	add	r3, r0
 800bbf8:	4480      	add	r8, r0
 800bbfa:	4405      	add	r5, r0
 800bbfc:	9304      	str	r3, [sp, #16]
 800bbfe:	f1b8 0f00 	cmp.w	r8, #0
 800bc02:	dd05      	ble.n	800bc10 <_dtoa_r+0x838>
 800bc04:	4659      	mov	r1, fp
 800bc06:	4642      	mov	r2, r8
 800bc08:	4620      	mov	r0, r4
 800bc0a:	f000 ffc9 	bl	800cba0 <__lshift>
 800bc0e:	4683      	mov	fp, r0
 800bc10:	9b04      	ldr	r3, [sp, #16]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	dd05      	ble.n	800bc22 <_dtoa_r+0x84a>
 800bc16:	4631      	mov	r1, r6
 800bc18:	461a      	mov	r2, r3
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f000 ffc0 	bl	800cba0 <__lshift>
 800bc20:	4606      	mov	r6, r0
 800bc22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d069      	beq.n	800bcfc <_dtoa_r+0x924>
 800bc28:	4631      	mov	r1, r6
 800bc2a:	4658      	mov	r0, fp
 800bc2c:	f001 f824 	bl	800cc78 <__mcmp>
 800bc30:	2800      	cmp	r0, #0
 800bc32:	da63      	bge.n	800bcfc <_dtoa_r+0x924>
 800bc34:	2300      	movs	r3, #0
 800bc36:	4659      	mov	r1, fp
 800bc38:	220a      	movs	r2, #10
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	f000 fdb6 	bl	800c7ac <__multadd>
 800bc40:	9b08      	ldr	r3, [sp, #32]
 800bc42:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bc46:	4683      	mov	fp, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f000 818f 	beq.w	800bf6c <_dtoa_r+0xb94>
 800bc4e:	4639      	mov	r1, r7
 800bc50:	2300      	movs	r3, #0
 800bc52:	220a      	movs	r2, #10
 800bc54:	4620      	mov	r0, r4
 800bc56:	f000 fda9 	bl	800c7ac <__multadd>
 800bc5a:	f1b9 0f00 	cmp.w	r9, #0
 800bc5e:	4607      	mov	r7, r0
 800bc60:	f300 808e 	bgt.w	800bd80 <_dtoa_r+0x9a8>
 800bc64:	9b05      	ldr	r3, [sp, #20]
 800bc66:	2b02      	cmp	r3, #2
 800bc68:	dc50      	bgt.n	800bd0c <_dtoa_r+0x934>
 800bc6a:	e089      	b.n	800bd80 <_dtoa_r+0x9a8>
 800bc6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bc72:	e75d      	b.n	800bb30 <_dtoa_r+0x758>
 800bc74:	9b01      	ldr	r3, [sp, #4]
 800bc76:	1e5e      	subs	r6, r3, #1
 800bc78:	9b06      	ldr	r3, [sp, #24]
 800bc7a:	42b3      	cmp	r3, r6
 800bc7c:	bfbf      	itttt	lt
 800bc7e:	9b06      	ldrlt	r3, [sp, #24]
 800bc80:	9606      	strlt	r6, [sp, #24]
 800bc82:	1af2      	sublt	r2, r6, r3
 800bc84:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800bc86:	bfb6      	itet	lt
 800bc88:	189b      	addlt	r3, r3, r2
 800bc8a:	1b9e      	subge	r6, r3, r6
 800bc8c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800bc8e:	9b01      	ldr	r3, [sp, #4]
 800bc90:	bfb8      	it	lt
 800bc92:	2600      	movlt	r6, #0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	bfb5      	itete	lt
 800bc98:	eba8 0503 	sublt.w	r5, r8, r3
 800bc9c:	9b01      	ldrge	r3, [sp, #4]
 800bc9e:	2300      	movlt	r3, #0
 800bca0:	4645      	movge	r5, r8
 800bca2:	e747      	b.n	800bb34 <_dtoa_r+0x75c>
 800bca4:	9e06      	ldr	r6, [sp, #24]
 800bca6:	9f08      	ldr	r7, [sp, #32]
 800bca8:	4645      	mov	r5, r8
 800bcaa:	e74c      	b.n	800bb46 <_dtoa_r+0x76e>
 800bcac:	9a06      	ldr	r2, [sp, #24]
 800bcae:	e775      	b.n	800bb9c <_dtoa_r+0x7c4>
 800bcb0:	9b05      	ldr	r3, [sp, #20]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	dc18      	bgt.n	800bce8 <_dtoa_r+0x910>
 800bcb6:	9b02      	ldr	r3, [sp, #8]
 800bcb8:	b9b3      	cbnz	r3, 800bce8 <_dtoa_r+0x910>
 800bcba:	9b03      	ldr	r3, [sp, #12]
 800bcbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bcc0:	b9a3      	cbnz	r3, 800bcec <_dtoa_r+0x914>
 800bcc2:	9b03      	ldr	r3, [sp, #12]
 800bcc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bcc8:	0d1b      	lsrs	r3, r3, #20
 800bcca:	051b      	lsls	r3, r3, #20
 800bccc:	b12b      	cbz	r3, 800bcda <_dtoa_r+0x902>
 800bcce:	9b04      	ldr	r3, [sp, #16]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	9304      	str	r3, [sp, #16]
 800bcd4:	f108 0801 	add.w	r8, r8, #1
 800bcd8:	2301      	movs	r3, #1
 800bcda:	9306      	str	r3, [sp, #24]
 800bcdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f47f af74 	bne.w	800bbcc <_dtoa_r+0x7f4>
 800bce4:	2001      	movs	r0, #1
 800bce6:	e779      	b.n	800bbdc <_dtoa_r+0x804>
 800bce8:	2300      	movs	r3, #0
 800bcea:	e7f6      	b.n	800bcda <_dtoa_r+0x902>
 800bcec:	9b02      	ldr	r3, [sp, #8]
 800bcee:	e7f4      	b.n	800bcda <_dtoa_r+0x902>
 800bcf0:	d085      	beq.n	800bbfe <_dtoa_r+0x826>
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	301c      	adds	r0, #28
 800bcf6:	e77d      	b.n	800bbf4 <_dtoa_r+0x81c>
 800bcf8:	40240000 	.word	0x40240000
 800bcfc:	9b01      	ldr	r3, [sp, #4]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	dc38      	bgt.n	800bd74 <_dtoa_r+0x99c>
 800bd02:	9b05      	ldr	r3, [sp, #20]
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	dd35      	ble.n	800bd74 <_dtoa_r+0x99c>
 800bd08:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bd0c:	f1b9 0f00 	cmp.w	r9, #0
 800bd10:	d10d      	bne.n	800bd2e <_dtoa_r+0x956>
 800bd12:	4631      	mov	r1, r6
 800bd14:	464b      	mov	r3, r9
 800bd16:	2205      	movs	r2, #5
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f000 fd47 	bl	800c7ac <__multadd>
 800bd1e:	4601      	mov	r1, r0
 800bd20:	4606      	mov	r6, r0
 800bd22:	4658      	mov	r0, fp
 800bd24:	f000 ffa8 	bl	800cc78 <__mcmp>
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	f73f adbd 	bgt.w	800b8a8 <_dtoa_r+0x4d0>
 800bd2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd30:	9d00      	ldr	r5, [sp, #0]
 800bd32:	ea6f 0a03 	mvn.w	sl, r3
 800bd36:	f04f 0800 	mov.w	r8, #0
 800bd3a:	4631      	mov	r1, r6
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f000 fd13 	bl	800c768 <_Bfree>
 800bd42:	2f00      	cmp	r7, #0
 800bd44:	f43f aeb4 	beq.w	800bab0 <_dtoa_r+0x6d8>
 800bd48:	f1b8 0f00 	cmp.w	r8, #0
 800bd4c:	d005      	beq.n	800bd5a <_dtoa_r+0x982>
 800bd4e:	45b8      	cmp	r8, r7
 800bd50:	d003      	beq.n	800bd5a <_dtoa_r+0x982>
 800bd52:	4641      	mov	r1, r8
 800bd54:	4620      	mov	r0, r4
 800bd56:	f000 fd07 	bl	800c768 <_Bfree>
 800bd5a:	4639      	mov	r1, r7
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f000 fd03 	bl	800c768 <_Bfree>
 800bd62:	e6a5      	b.n	800bab0 <_dtoa_r+0x6d8>
 800bd64:	2600      	movs	r6, #0
 800bd66:	4637      	mov	r7, r6
 800bd68:	e7e1      	b.n	800bd2e <_dtoa_r+0x956>
 800bd6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bd6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bd70:	4637      	mov	r7, r6
 800bd72:	e599      	b.n	800b8a8 <_dtoa_r+0x4d0>
 800bd74:	9b08      	ldr	r3, [sp, #32]
 800bd76:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	f000 80fd 	beq.w	800bf7a <_dtoa_r+0xba2>
 800bd80:	2d00      	cmp	r5, #0
 800bd82:	dd05      	ble.n	800bd90 <_dtoa_r+0x9b8>
 800bd84:	4639      	mov	r1, r7
 800bd86:	462a      	mov	r2, r5
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f000 ff09 	bl	800cba0 <__lshift>
 800bd8e:	4607      	mov	r7, r0
 800bd90:	9b06      	ldr	r3, [sp, #24]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d05c      	beq.n	800be50 <_dtoa_r+0xa78>
 800bd96:	6879      	ldr	r1, [r7, #4]
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f000 fca5 	bl	800c6e8 <_Balloc>
 800bd9e:	4605      	mov	r5, r0
 800bda0:	b928      	cbnz	r0, 800bdae <_dtoa_r+0x9d6>
 800bda2:	4b80      	ldr	r3, [pc, #512]	; (800bfa4 <_dtoa_r+0xbcc>)
 800bda4:	4602      	mov	r2, r0
 800bda6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bdaa:	f7ff bb2e 	b.w	800b40a <_dtoa_r+0x32>
 800bdae:	693a      	ldr	r2, [r7, #16]
 800bdb0:	3202      	adds	r2, #2
 800bdb2:	0092      	lsls	r2, r2, #2
 800bdb4:	f107 010c 	add.w	r1, r7, #12
 800bdb8:	300c      	adds	r0, #12
 800bdba:	f000 fc87 	bl	800c6cc <memcpy>
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f000 feec 	bl	800cba0 <__lshift>
 800bdc8:	9b00      	ldr	r3, [sp, #0]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	9301      	str	r3, [sp, #4]
 800bdce:	9b00      	ldr	r3, [sp, #0]
 800bdd0:	444b      	add	r3, r9
 800bdd2:	9307      	str	r3, [sp, #28]
 800bdd4:	9b02      	ldr	r3, [sp, #8]
 800bdd6:	f003 0301 	and.w	r3, r3, #1
 800bdda:	46b8      	mov	r8, r7
 800bddc:	9306      	str	r3, [sp, #24]
 800bdde:	4607      	mov	r7, r0
 800bde0:	9b01      	ldr	r3, [sp, #4]
 800bde2:	4631      	mov	r1, r6
 800bde4:	3b01      	subs	r3, #1
 800bde6:	4658      	mov	r0, fp
 800bde8:	9302      	str	r3, [sp, #8]
 800bdea:	f7ff fa67 	bl	800b2bc <quorem>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	3330      	adds	r3, #48	; 0x30
 800bdf2:	9004      	str	r0, [sp, #16]
 800bdf4:	4641      	mov	r1, r8
 800bdf6:	4658      	mov	r0, fp
 800bdf8:	9308      	str	r3, [sp, #32]
 800bdfa:	f000 ff3d 	bl	800cc78 <__mcmp>
 800bdfe:	463a      	mov	r2, r7
 800be00:	4681      	mov	r9, r0
 800be02:	4631      	mov	r1, r6
 800be04:	4620      	mov	r0, r4
 800be06:	f000 ff53 	bl	800ccb0 <__mdiff>
 800be0a:	68c2      	ldr	r2, [r0, #12]
 800be0c:	9b08      	ldr	r3, [sp, #32]
 800be0e:	4605      	mov	r5, r0
 800be10:	bb02      	cbnz	r2, 800be54 <_dtoa_r+0xa7c>
 800be12:	4601      	mov	r1, r0
 800be14:	4658      	mov	r0, fp
 800be16:	f000 ff2f 	bl	800cc78 <__mcmp>
 800be1a:	9b08      	ldr	r3, [sp, #32]
 800be1c:	4602      	mov	r2, r0
 800be1e:	4629      	mov	r1, r5
 800be20:	4620      	mov	r0, r4
 800be22:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800be26:	f000 fc9f 	bl	800c768 <_Bfree>
 800be2a:	9b05      	ldr	r3, [sp, #20]
 800be2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be2e:	9d01      	ldr	r5, [sp, #4]
 800be30:	ea43 0102 	orr.w	r1, r3, r2
 800be34:	9b06      	ldr	r3, [sp, #24]
 800be36:	430b      	orrs	r3, r1
 800be38:	9b08      	ldr	r3, [sp, #32]
 800be3a:	d10d      	bne.n	800be58 <_dtoa_r+0xa80>
 800be3c:	2b39      	cmp	r3, #57	; 0x39
 800be3e:	d029      	beq.n	800be94 <_dtoa_r+0xabc>
 800be40:	f1b9 0f00 	cmp.w	r9, #0
 800be44:	dd01      	ble.n	800be4a <_dtoa_r+0xa72>
 800be46:	9b04      	ldr	r3, [sp, #16]
 800be48:	3331      	adds	r3, #49	; 0x31
 800be4a:	9a02      	ldr	r2, [sp, #8]
 800be4c:	7013      	strb	r3, [r2, #0]
 800be4e:	e774      	b.n	800bd3a <_dtoa_r+0x962>
 800be50:	4638      	mov	r0, r7
 800be52:	e7b9      	b.n	800bdc8 <_dtoa_r+0x9f0>
 800be54:	2201      	movs	r2, #1
 800be56:	e7e2      	b.n	800be1e <_dtoa_r+0xa46>
 800be58:	f1b9 0f00 	cmp.w	r9, #0
 800be5c:	db06      	blt.n	800be6c <_dtoa_r+0xa94>
 800be5e:	9905      	ldr	r1, [sp, #20]
 800be60:	ea41 0909 	orr.w	r9, r1, r9
 800be64:	9906      	ldr	r1, [sp, #24]
 800be66:	ea59 0101 	orrs.w	r1, r9, r1
 800be6a:	d120      	bne.n	800beae <_dtoa_r+0xad6>
 800be6c:	2a00      	cmp	r2, #0
 800be6e:	ddec      	ble.n	800be4a <_dtoa_r+0xa72>
 800be70:	4659      	mov	r1, fp
 800be72:	2201      	movs	r2, #1
 800be74:	4620      	mov	r0, r4
 800be76:	9301      	str	r3, [sp, #4]
 800be78:	f000 fe92 	bl	800cba0 <__lshift>
 800be7c:	4631      	mov	r1, r6
 800be7e:	4683      	mov	fp, r0
 800be80:	f000 fefa 	bl	800cc78 <__mcmp>
 800be84:	2800      	cmp	r0, #0
 800be86:	9b01      	ldr	r3, [sp, #4]
 800be88:	dc02      	bgt.n	800be90 <_dtoa_r+0xab8>
 800be8a:	d1de      	bne.n	800be4a <_dtoa_r+0xa72>
 800be8c:	07da      	lsls	r2, r3, #31
 800be8e:	d5dc      	bpl.n	800be4a <_dtoa_r+0xa72>
 800be90:	2b39      	cmp	r3, #57	; 0x39
 800be92:	d1d8      	bne.n	800be46 <_dtoa_r+0xa6e>
 800be94:	9a02      	ldr	r2, [sp, #8]
 800be96:	2339      	movs	r3, #57	; 0x39
 800be98:	7013      	strb	r3, [r2, #0]
 800be9a:	462b      	mov	r3, r5
 800be9c:	461d      	mov	r5, r3
 800be9e:	3b01      	subs	r3, #1
 800bea0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bea4:	2a39      	cmp	r2, #57	; 0x39
 800bea6:	d050      	beq.n	800bf4a <_dtoa_r+0xb72>
 800bea8:	3201      	adds	r2, #1
 800beaa:	701a      	strb	r2, [r3, #0]
 800beac:	e745      	b.n	800bd3a <_dtoa_r+0x962>
 800beae:	2a00      	cmp	r2, #0
 800beb0:	dd03      	ble.n	800beba <_dtoa_r+0xae2>
 800beb2:	2b39      	cmp	r3, #57	; 0x39
 800beb4:	d0ee      	beq.n	800be94 <_dtoa_r+0xabc>
 800beb6:	3301      	adds	r3, #1
 800beb8:	e7c7      	b.n	800be4a <_dtoa_r+0xa72>
 800beba:	9a01      	ldr	r2, [sp, #4]
 800bebc:	9907      	ldr	r1, [sp, #28]
 800bebe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bec2:	428a      	cmp	r2, r1
 800bec4:	d02a      	beq.n	800bf1c <_dtoa_r+0xb44>
 800bec6:	4659      	mov	r1, fp
 800bec8:	2300      	movs	r3, #0
 800beca:	220a      	movs	r2, #10
 800becc:	4620      	mov	r0, r4
 800bece:	f000 fc6d 	bl	800c7ac <__multadd>
 800bed2:	45b8      	cmp	r8, r7
 800bed4:	4683      	mov	fp, r0
 800bed6:	f04f 0300 	mov.w	r3, #0
 800beda:	f04f 020a 	mov.w	r2, #10
 800bede:	4641      	mov	r1, r8
 800bee0:	4620      	mov	r0, r4
 800bee2:	d107      	bne.n	800bef4 <_dtoa_r+0xb1c>
 800bee4:	f000 fc62 	bl	800c7ac <__multadd>
 800bee8:	4680      	mov	r8, r0
 800beea:	4607      	mov	r7, r0
 800beec:	9b01      	ldr	r3, [sp, #4]
 800beee:	3301      	adds	r3, #1
 800bef0:	9301      	str	r3, [sp, #4]
 800bef2:	e775      	b.n	800bde0 <_dtoa_r+0xa08>
 800bef4:	f000 fc5a 	bl	800c7ac <__multadd>
 800bef8:	4639      	mov	r1, r7
 800befa:	4680      	mov	r8, r0
 800befc:	2300      	movs	r3, #0
 800befe:	220a      	movs	r2, #10
 800bf00:	4620      	mov	r0, r4
 800bf02:	f000 fc53 	bl	800c7ac <__multadd>
 800bf06:	4607      	mov	r7, r0
 800bf08:	e7f0      	b.n	800beec <_dtoa_r+0xb14>
 800bf0a:	f1b9 0f00 	cmp.w	r9, #0
 800bf0e:	9a00      	ldr	r2, [sp, #0]
 800bf10:	bfcc      	ite	gt
 800bf12:	464d      	movgt	r5, r9
 800bf14:	2501      	movle	r5, #1
 800bf16:	4415      	add	r5, r2
 800bf18:	f04f 0800 	mov.w	r8, #0
 800bf1c:	4659      	mov	r1, fp
 800bf1e:	2201      	movs	r2, #1
 800bf20:	4620      	mov	r0, r4
 800bf22:	9301      	str	r3, [sp, #4]
 800bf24:	f000 fe3c 	bl	800cba0 <__lshift>
 800bf28:	4631      	mov	r1, r6
 800bf2a:	4683      	mov	fp, r0
 800bf2c:	f000 fea4 	bl	800cc78 <__mcmp>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	dcb2      	bgt.n	800be9a <_dtoa_r+0xac2>
 800bf34:	d102      	bne.n	800bf3c <_dtoa_r+0xb64>
 800bf36:	9b01      	ldr	r3, [sp, #4]
 800bf38:	07db      	lsls	r3, r3, #31
 800bf3a:	d4ae      	bmi.n	800be9a <_dtoa_r+0xac2>
 800bf3c:	462b      	mov	r3, r5
 800bf3e:	461d      	mov	r5, r3
 800bf40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf44:	2a30      	cmp	r2, #48	; 0x30
 800bf46:	d0fa      	beq.n	800bf3e <_dtoa_r+0xb66>
 800bf48:	e6f7      	b.n	800bd3a <_dtoa_r+0x962>
 800bf4a:	9a00      	ldr	r2, [sp, #0]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d1a5      	bne.n	800be9c <_dtoa_r+0xac4>
 800bf50:	f10a 0a01 	add.w	sl, sl, #1
 800bf54:	2331      	movs	r3, #49	; 0x31
 800bf56:	e779      	b.n	800be4c <_dtoa_r+0xa74>
 800bf58:	4b13      	ldr	r3, [pc, #76]	; (800bfa8 <_dtoa_r+0xbd0>)
 800bf5a:	f7ff baaf 	b.w	800b4bc <_dtoa_r+0xe4>
 800bf5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	f47f aa86 	bne.w	800b472 <_dtoa_r+0x9a>
 800bf66:	4b11      	ldr	r3, [pc, #68]	; (800bfac <_dtoa_r+0xbd4>)
 800bf68:	f7ff baa8 	b.w	800b4bc <_dtoa_r+0xe4>
 800bf6c:	f1b9 0f00 	cmp.w	r9, #0
 800bf70:	dc03      	bgt.n	800bf7a <_dtoa_r+0xba2>
 800bf72:	9b05      	ldr	r3, [sp, #20]
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	f73f aec9 	bgt.w	800bd0c <_dtoa_r+0x934>
 800bf7a:	9d00      	ldr	r5, [sp, #0]
 800bf7c:	4631      	mov	r1, r6
 800bf7e:	4658      	mov	r0, fp
 800bf80:	f7ff f99c 	bl	800b2bc <quorem>
 800bf84:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bf88:	f805 3b01 	strb.w	r3, [r5], #1
 800bf8c:	9a00      	ldr	r2, [sp, #0]
 800bf8e:	1aaa      	subs	r2, r5, r2
 800bf90:	4591      	cmp	r9, r2
 800bf92:	ddba      	ble.n	800bf0a <_dtoa_r+0xb32>
 800bf94:	4659      	mov	r1, fp
 800bf96:	2300      	movs	r3, #0
 800bf98:	220a      	movs	r2, #10
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f000 fc06 	bl	800c7ac <__multadd>
 800bfa0:	4683      	mov	fp, r0
 800bfa2:	e7eb      	b.n	800bf7c <_dtoa_r+0xba4>
 800bfa4:	0800e30c 	.word	0x0800e30c
 800bfa8:	0800e10c 	.word	0x0800e10c
 800bfac:	0800e289 	.word	0x0800e289

0800bfb0 <rshift>:
 800bfb0:	6903      	ldr	r3, [r0, #16]
 800bfb2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bfb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfba:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bfbe:	f100 0414 	add.w	r4, r0, #20
 800bfc2:	dd45      	ble.n	800c050 <rshift+0xa0>
 800bfc4:	f011 011f 	ands.w	r1, r1, #31
 800bfc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bfcc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bfd0:	d10c      	bne.n	800bfec <rshift+0x3c>
 800bfd2:	f100 0710 	add.w	r7, r0, #16
 800bfd6:	4629      	mov	r1, r5
 800bfd8:	42b1      	cmp	r1, r6
 800bfda:	d334      	bcc.n	800c046 <rshift+0x96>
 800bfdc:	1a9b      	subs	r3, r3, r2
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	1eea      	subs	r2, r5, #3
 800bfe2:	4296      	cmp	r6, r2
 800bfe4:	bf38      	it	cc
 800bfe6:	2300      	movcc	r3, #0
 800bfe8:	4423      	add	r3, r4
 800bfea:	e015      	b.n	800c018 <rshift+0x68>
 800bfec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bff0:	f1c1 0820 	rsb	r8, r1, #32
 800bff4:	40cf      	lsrs	r7, r1
 800bff6:	f105 0e04 	add.w	lr, r5, #4
 800bffa:	46a1      	mov	r9, r4
 800bffc:	4576      	cmp	r6, lr
 800bffe:	46f4      	mov	ip, lr
 800c000:	d815      	bhi.n	800c02e <rshift+0x7e>
 800c002:	1a9b      	subs	r3, r3, r2
 800c004:	009a      	lsls	r2, r3, #2
 800c006:	3a04      	subs	r2, #4
 800c008:	3501      	adds	r5, #1
 800c00a:	42ae      	cmp	r6, r5
 800c00c:	bf38      	it	cc
 800c00e:	2200      	movcc	r2, #0
 800c010:	18a3      	adds	r3, r4, r2
 800c012:	50a7      	str	r7, [r4, r2]
 800c014:	b107      	cbz	r7, 800c018 <rshift+0x68>
 800c016:	3304      	adds	r3, #4
 800c018:	1b1a      	subs	r2, r3, r4
 800c01a:	42a3      	cmp	r3, r4
 800c01c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c020:	bf08      	it	eq
 800c022:	2300      	moveq	r3, #0
 800c024:	6102      	str	r2, [r0, #16]
 800c026:	bf08      	it	eq
 800c028:	6143      	streq	r3, [r0, #20]
 800c02a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c02e:	f8dc c000 	ldr.w	ip, [ip]
 800c032:	fa0c fc08 	lsl.w	ip, ip, r8
 800c036:	ea4c 0707 	orr.w	r7, ip, r7
 800c03a:	f849 7b04 	str.w	r7, [r9], #4
 800c03e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c042:	40cf      	lsrs	r7, r1
 800c044:	e7da      	b.n	800bffc <rshift+0x4c>
 800c046:	f851 cb04 	ldr.w	ip, [r1], #4
 800c04a:	f847 cf04 	str.w	ip, [r7, #4]!
 800c04e:	e7c3      	b.n	800bfd8 <rshift+0x28>
 800c050:	4623      	mov	r3, r4
 800c052:	e7e1      	b.n	800c018 <rshift+0x68>

0800c054 <__hexdig_fun>:
 800c054:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c058:	2b09      	cmp	r3, #9
 800c05a:	d802      	bhi.n	800c062 <__hexdig_fun+0xe>
 800c05c:	3820      	subs	r0, #32
 800c05e:	b2c0      	uxtb	r0, r0
 800c060:	4770      	bx	lr
 800c062:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c066:	2b05      	cmp	r3, #5
 800c068:	d801      	bhi.n	800c06e <__hexdig_fun+0x1a>
 800c06a:	3847      	subs	r0, #71	; 0x47
 800c06c:	e7f7      	b.n	800c05e <__hexdig_fun+0xa>
 800c06e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c072:	2b05      	cmp	r3, #5
 800c074:	d801      	bhi.n	800c07a <__hexdig_fun+0x26>
 800c076:	3827      	subs	r0, #39	; 0x27
 800c078:	e7f1      	b.n	800c05e <__hexdig_fun+0xa>
 800c07a:	2000      	movs	r0, #0
 800c07c:	4770      	bx	lr
	...

0800c080 <__gethex>:
 800c080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c084:	ed2d 8b02 	vpush	{d8}
 800c088:	b089      	sub	sp, #36	; 0x24
 800c08a:	ee08 0a10 	vmov	s16, r0
 800c08e:	9304      	str	r3, [sp, #16]
 800c090:	4bbc      	ldr	r3, [pc, #752]	; (800c384 <__gethex+0x304>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	9301      	str	r3, [sp, #4]
 800c096:	4618      	mov	r0, r3
 800c098:	468b      	mov	fp, r1
 800c09a:	4690      	mov	r8, r2
 800c09c:	f7f4 f898 	bl	80001d0 <strlen>
 800c0a0:	9b01      	ldr	r3, [sp, #4]
 800c0a2:	f8db 2000 	ldr.w	r2, [fp]
 800c0a6:	4403      	add	r3, r0
 800c0a8:	4682      	mov	sl, r0
 800c0aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c0ae:	9305      	str	r3, [sp, #20]
 800c0b0:	1c93      	adds	r3, r2, #2
 800c0b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c0b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c0ba:	32fe      	adds	r2, #254	; 0xfe
 800c0bc:	18d1      	adds	r1, r2, r3
 800c0be:	461f      	mov	r7, r3
 800c0c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c0c4:	9100      	str	r1, [sp, #0]
 800c0c6:	2830      	cmp	r0, #48	; 0x30
 800c0c8:	d0f8      	beq.n	800c0bc <__gethex+0x3c>
 800c0ca:	f7ff ffc3 	bl	800c054 <__hexdig_fun>
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	d13a      	bne.n	800c14a <__gethex+0xca>
 800c0d4:	9901      	ldr	r1, [sp, #4]
 800c0d6:	4652      	mov	r2, sl
 800c0d8:	4638      	mov	r0, r7
 800c0da:	f001 f9ed 	bl	800d4b8 <strncmp>
 800c0de:	4605      	mov	r5, r0
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	d168      	bne.n	800c1b6 <__gethex+0x136>
 800c0e4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c0e8:	eb07 060a 	add.w	r6, r7, sl
 800c0ec:	f7ff ffb2 	bl	800c054 <__hexdig_fun>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	d062      	beq.n	800c1ba <__gethex+0x13a>
 800c0f4:	4633      	mov	r3, r6
 800c0f6:	7818      	ldrb	r0, [r3, #0]
 800c0f8:	2830      	cmp	r0, #48	; 0x30
 800c0fa:	461f      	mov	r7, r3
 800c0fc:	f103 0301 	add.w	r3, r3, #1
 800c100:	d0f9      	beq.n	800c0f6 <__gethex+0x76>
 800c102:	f7ff ffa7 	bl	800c054 <__hexdig_fun>
 800c106:	2301      	movs	r3, #1
 800c108:	fab0 f480 	clz	r4, r0
 800c10c:	0964      	lsrs	r4, r4, #5
 800c10e:	4635      	mov	r5, r6
 800c110:	9300      	str	r3, [sp, #0]
 800c112:	463a      	mov	r2, r7
 800c114:	4616      	mov	r6, r2
 800c116:	3201      	adds	r2, #1
 800c118:	7830      	ldrb	r0, [r6, #0]
 800c11a:	f7ff ff9b 	bl	800c054 <__hexdig_fun>
 800c11e:	2800      	cmp	r0, #0
 800c120:	d1f8      	bne.n	800c114 <__gethex+0x94>
 800c122:	9901      	ldr	r1, [sp, #4]
 800c124:	4652      	mov	r2, sl
 800c126:	4630      	mov	r0, r6
 800c128:	f001 f9c6 	bl	800d4b8 <strncmp>
 800c12c:	b980      	cbnz	r0, 800c150 <__gethex+0xd0>
 800c12e:	b94d      	cbnz	r5, 800c144 <__gethex+0xc4>
 800c130:	eb06 050a 	add.w	r5, r6, sl
 800c134:	462a      	mov	r2, r5
 800c136:	4616      	mov	r6, r2
 800c138:	3201      	adds	r2, #1
 800c13a:	7830      	ldrb	r0, [r6, #0]
 800c13c:	f7ff ff8a 	bl	800c054 <__hexdig_fun>
 800c140:	2800      	cmp	r0, #0
 800c142:	d1f8      	bne.n	800c136 <__gethex+0xb6>
 800c144:	1bad      	subs	r5, r5, r6
 800c146:	00ad      	lsls	r5, r5, #2
 800c148:	e004      	b.n	800c154 <__gethex+0xd4>
 800c14a:	2400      	movs	r4, #0
 800c14c:	4625      	mov	r5, r4
 800c14e:	e7e0      	b.n	800c112 <__gethex+0x92>
 800c150:	2d00      	cmp	r5, #0
 800c152:	d1f7      	bne.n	800c144 <__gethex+0xc4>
 800c154:	7833      	ldrb	r3, [r6, #0]
 800c156:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c15a:	2b50      	cmp	r3, #80	; 0x50
 800c15c:	d13b      	bne.n	800c1d6 <__gethex+0x156>
 800c15e:	7873      	ldrb	r3, [r6, #1]
 800c160:	2b2b      	cmp	r3, #43	; 0x2b
 800c162:	d02c      	beq.n	800c1be <__gethex+0x13e>
 800c164:	2b2d      	cmp	r3, #45	; 0x2d
 800c166:	d02e      	beq.n	800c1c6 <__gethex+0x146>
 800c168:	1c71      	adds	r1, r6, #1
 800c16a:	f04f 0900 	mov.w	r9, #0
 800c16e:	7808      	ldrb	r0, [r1, #0]
 800c170:	f7ff ff70 	bl	800c054 <__hexdig_fun>
 800c174:	1e43      	subs	r3, r0, #1
 800c176:	b2db      	uxtb	r3, r3
 800c178:	2b18      	cmp	r3, #24
 800c17a:	d82c      	bhi.n	800c1d6 <__gethex+0x156>
 800c17c:	f1a0 0210 	sub.w	r2, r0, #16
 800c180:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c184:	f7ff ff66 	bl	800c054 <__hexdig_fun>
 800c188:	1e43      	subs	r3, r0, #1
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	2b18      	cmp	r3, #24
 800c18e:	d91d      	bls.n	800c1cc <__gethex+0x14c>
 800c190:	f1b9 0f00 	cmp.w	r9, #0
 800c194:	d000      	beq.n	800c198 <__gethex+0x118>
 800c196:	4252      	negs	r2, r2
 800c198:	4415      	add	r5, r2
 800c19a:	f8cb 1000 	str.w	r1, [fp]
 800c19e:	b1e4      	cbz	r4, 800c1da <__gethex+0x15a>
 800c1a0:	9b00      	ldr	r3, [sp, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	bf14      	ite	ne
 800c1a6:	2700      	movne	r7, #0
 800c1a8:	2706      	moveq	r7, #6
 800c1aa:	4638      	mov	r0, r7
 800c1ac:	b009      	add	sp, #36	; 0x24
 800c1ae:	ecbd 8b02 	vpop	{d8}
 800c1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b6:	463e      	mov	r6, r7
 800c1b8:	4625      	mov	r5, r4
 800c1ba:	2401      	movs	r4, #1
 800c1bc:	e7ca      	b.n	800c154 <__gethex+0xd4>
 800c1be:	f04f 0900 	mov.w	r9, #0
 800c1c2:	1cb1      	adds	r1, r6, #2
 800c1c4:	e7d3      	b.n	800c16e <__gethex+0xee>
 800c1c6:	f04f 0901 	mov.w	r9, #1
 800c1ca:	e7fa      	b.n	800c1c2 <__gethex+0x142>
 800c1cc:	230a      	movs	r3, #10
 800c1ce:	fb03 0202 	mla	r2, r3, r2, r0
 800c1d2:	3a10      	subs	r2, #16
 800c1d4:	e7d4      	b.n	800c180 <__gethex+0x100>
 800c1d6:	4631      	mov	r1, r6
 800c1d8:	e7df      	b.n	800c19a <__gethex+0x11a>
 800c1da:	1bf3      	subs	r3, r6, r7
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	4621      	mov	r1, r4
 800c1e0:	2b07      	cmp	r3, #7
 800c1e2:	dc0b      	bgt.n	800c1fc <__gethex+0x17c>
 800c1e4:	ee18 0a10 	vmov	r0, s16
 800c1e8:	f000 fa7e 	bl	800c6e8 <_Balloc>
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	b940      	cbnz	r0, 800c202 <__gethex+0x182>
 800c1f0:	4b65      	ldr	r3, [pc, #404]	; (800c388 <__gethex+0x308>)
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	21de      	movs	r1, #222	; 0xde
 800c1f6:	4865      	ldr	r0, [pc, #404]	; (800c38c <__gethex+0x30c>)
 800c1f8:	f001 f97e 	bl	800d4f8 <__assert_func>
 800c1fc:	3101      	adds	r1, #1
 800c1fe:	105b      	asrs	r3, r3, #1
 800c200:	e7ee      	b.n	800c1e0 <__gethex+0x160>
 800c202:	f100 0914 	add.w	r9, r0, #20
 800c206:	f04f 0b00 	mov.w	fp, #0
 800c20a:	f1ca 0301 	rsb	r3, sl, #1
 800c20e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c212:	f8cd b000 	str.w	fp, [sp]
 800c216:	9306      	str	r3, [sp, #24]
 800c218:	42b7      	cmp	r7, r6
 800c21a:	d340      	bcc.n	800c29e <__gethex+0x21e>
 800c21c:	9802      	ldr	r0, [sp, #8]
 800c21e:	9b00      	ldr	r3, [sp, #0]
 800c220:	f840 3b04 	str.w	r3, [r0], #4
 800c224:	eba0 0009 	sub.w	r0, r0, r9
 800c228:	1080      	asrs	r0, r0, #2
 800c22a:	0146      	lsls	r6, r0, #5
 800c22c:	6120      	str	r0, [r4, #16]
 800c22e:	4618      	mov	r0, r3
 800c230:	f000 fb50 	bl	800c8d4 <__hi0bits>
 800c234:	1a30      	subs	r0, r6, r0
 800c236:	f8d8 6000 	ldr.w	r6, [r8]
 800c23a:	42b0      	cmp	r0, r6
 800c23c:	dd63      	ble.n	800c306 <__gethex+0x286>
 800c23e:	1b87      	subs	r7, r0, r6
 800c240:	4639      	mov	r1, r7
 800c242:	4620      	mov	r0, r4
 800c244:	f000 feea 	bl	800d01c <__any_on>
 800c248:	4682      	mov	sl, r0
 800c24a:	b1a8      	cbz	r0, 800c278 <__gethex+0x1f8>
 800c24c:	1e7b      	subs	r3, r7, #1
 800c24e:	1159      	asrs	r1, r3, #5
 800c250:	f003 021f 	and.w	r2, r3, #31
 800c254:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c258:	f04f 0a01 	mov.w	sl, #1
 800c25c:	fa0a f202 	lsl.w	r2, sl, r2
 800c260:	420a      	tst	r2, r1
 800c262:	d009      	beq.n	800c278 <__gethex+0x1f8>
 800c264:	4553      	cmp	r3, sl
 800c266:	dd05      	ble.n	800c274 <__gethex+0x1f4>
 800c268:	1eb9      	subs	r1, r7, #2
 800c26a:	4620      	mov	r0, r4
 800c26c:	f000 fed6 	bl	800d01c <__any_on>
 800c270:	2800      	cmp	r0, #0
 800c272:	d145      	bne.n	800c300 <__gethex+0x280>
 800c274:	f04f 0a02 	mov.w	sl, #2
 800c278:	4639      	mov	r1, r7
 800c27a:	4620      	mov	r0, r4
 800c27c:	f7ff fe98 	bl	800bfb0 <rshift>
 800c280:	443d      	add	r5, r7
 800c282:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c286:	42ab      	cmp	r3, r5
 800c288:	da4c      	bge.n	800c324 <__gethex+0x2a4>
 800c28a:	ee18 0a10 	vmov	r0, s16
 800c28e:	4621      	mov	r1, r4
 800c290:	f000 fa6a 	bl	800c768 <_Bfree>
 800c294:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c296:	2300      	movs	r3, #0
 800c298:	6013      	str	r3, [r2, #0]
 800c29a:	27a3      	movs	r7, #163	; 0xa3
 800c29c:	e785      	b.n	800c1aa <__gethex+0x12a>
 800c29e:	1e73      	subs	r3, r6, #1
 800c2a0:	9a05      	ldr	r2, [sp, #20]
 800c2a2:	9303      	str	r3, [sp, #12]
 800c2a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d019      	beq.n	800c2e0 <__gethex+0x260>
 800c2ac:	f1bb 0f20 	cmp.w	fp, #32
 800c2b0:	d107      	bne.n	800c2c2 <__gethex+0x242>
 800c2b2:	9b02      	ldr	r3, [sp, #8]
 800c2b4:	9a00      	ldr	r2, [sp, #0]
 800c2b6:	f843 2b04 	str.w	r2, [r3], #4
 800c2ba:	9302      	str	r3, [sp, #8]
 800c2bc:	2300      	movs	r3, #0
 800c2be:	9300      	str	r3, [sp, #0]
 800c2c0:	469b      	mov	fp, r3
 800c2c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c2c6:	f7ff fec5 	bl	800c054 <__hexdig_fun>
 800c2ca:	9b00      	ldr	r3, [sp, #0]
 800c2cc:	f000 000f 	and.w	r0, r0, #15
 800c2d0:	fa00 f00b 	lsl.w	r0, r0, fp
 800c2d4:	4303      	orrs	r3, r0
 800c2d6:	9300      	str	r3, [sp, #0]
 800c2d8:	f10b 0b04 	add.w	fp, fp, #4
 800c2dc:	9b03      	ldr	r3, [sp, #12]
 800c2de:	e00d      	b.n	800c2fc <__gethex+0x27c>
 800c2e0:	9b03      	ldr	r3, [sp, #12]
 800c2e2:	9a06      	ldr	r2, [sp, #24]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	42bb      	cmp	r3, r7
 800c2e8:	d3e0      	bcc.n	800c2ac <__gethex+0x22c>
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	9901      	ldr	r1, [sp, #4]
 800c2ee:	9307      	str	r3, [sp, #28]
 800c2f0:	4652      	mov	r2, sl
 800c2f2:	f001 f8e1 	bl	800d4b8 <strncmp>
 800c2f6:	9b07      	ldr	r3, [sp, #28]
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	d1d7      	bne.n	800c2ac <__gethex+0x22c>
 800c2fc:	461e      	mov	r6, r3
 800c2fe:	e78b      	b.n	800c218 <__gethex+0x198>
 800c300:	f04f 0a03 	mov.w	sl, #3
 800c304:	e7b8      	b.n	800c278 <__gethex+0x1f8>
 800c306:	da0a      	bge.n	800c31e <__gethex+0x29e>
 800c308:	1a37      	subs	r7, r6, r0
 800c30a:	4621      	mov	r1, r4
 800c30c:	ee18 0a10 	vmov	r0, s16
 800c310:	463a      	mov	r2, r7
 800c312:	f000 fc45 	bl	800cba0 <__lshift>
 800c316:	1bed      	subs	r5, r5, r7
 800c318:	4604      	mov	r4, r0
 800c31a:	f100 0914 	add.w	r9, r0, #20
 800c31e:	f04f 0a00 	mov.w	sl, #0
 800c322:	e7ae      	b.n	800c282 <__gethex+0x202>
 800c324:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c328:	42a8      	cmp	r0, r5
 800c32a:	dd72      	ble.n	800c412 <__gethex+0x392>
 800c32c:	1b45      	subs	r5, r0, r5
 800c32e:	42ae      	cmp	r6, r5
 800c330:	dc36      	bgt.n	800c3a0 <__gethex+0x320>
 800c332:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c336:	2b02      	cmp	r3, #2
 800c338:	d02a      	beq.n	800c390 <__gethex+0x310>
 800c33a:	2b03      	cmp	r3, #3
 800c33c:	d02c      	beq.n	800c398 <__gethex+0x318>
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d115      	bne.n	800c36e <__gethex+0x2ee>
 800c342:	42ae      	cmp	r6, r5
 800c344:	d113      	bne.n	800c36e <__gethex+0x2ee>
 800c346:	2e01      	cmp	r6, #1
 800c348:	d10b      	bne.n	800c362 <__gethex+0x2e2>
 800c34a:	9a04      	ldr	r2, [sp, #16]
 800c34c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c350:	6013      	str	r3, [r2, #0]
 800c352:	2301      	movs	r3, #1
 800c354:	6123      	str	r3, [r4, #16]
 800c356:	f8c9 3000 	str.w	r3, [r9]
 800c35a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c35c:	2762      	movs	r7, #98	; 0x62
 800c35e:	601c      	str	r4, [r3, #0]
 800c360:	e723      	b.n	800c1aa <__gethex+0x12a>
 800c362:	1e71      	subs	r1, r6, #1
 800c364:	4620      	mov	r0, r4
 800c366:	f000 fe59 	bl	800d01c <__any_on>
 800c36a:	2800      	cmp	r0, #0
 800c36c:	d1ed      	bne.n	800c34a <__gethex+0x2ca>
 800c36e:	ee18 0a10 	vmov	r0, s16
 800c372:	4621      	mov	r1, r4
 800c374:	f000 f9f8 	bl	800c768 <_Bfree>
 800c378:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c37a:	2300      	movs	r3, #0
 800c37c:	6013      	str	r3, [r2, #0]
 800c37e:	2750      	movs	r7, #80	; 0x50
 800c380:	e713      	b.n	800c1aa <__gethex+0x12a>
 800c382:	bf00      	nop
 800c384:	0800e388 	.word	0x0800e388
 800c388:	0800e30c 	.word	0x0800e30c
 800c38c:	0800e31d 	.word	0x0800e31d
 800c390:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c392:	2b00      	cmp	r3, #0
 800c394:	d1eb      	bne.n	800c36e <__gethex+0x2ee>
 800c396:	e7d8      	b.n	800c34a <__gethex+0x2ca>
 800c398:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d1d5      	bne.n	800c34a <__gethex+0x2ca>
 800c39e:	e7e6      	b.n	800c36e <__gethex+0x2ee>
 800c3a0:	1e6f      	subs	r7, r5, #1
 800c3a2:	f1ba 0f00 	cmp.w	sl, #0
 800c3a6:	d131      	bne.n	800c40c <__gethex+0x38c>
 800c3a8:	b127      	cbz	r7, 800c3b4 <__gethex+0x334>
 800c3aa:	4639      	mov	r1, r7
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	f000 fe35 	bl	800d01c <__any_on>
 800c3b2:	4682      	mov	sl, r0
 800c3b4:	117b      	asrs	r3, r7, #5
 800c3b6:	2101      	movs	r1, #1
 800c3b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c3bc:	f007 071f 	and.w	r7, r7, #31
 800c3c0:	fa01 f707 	lsl.w	r7, r1, r7
 800c3c4:	421f      	tst	r7, r3
 800c3c6:	4629      	mov	r1, r5
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	bf18      	it	ne
 800c3cc:	f04a 0a02 	orrne.w	sl, sl, #2
 800c3d0:	1b76      	subs	r6, r6, r5
 800c3d2:	f7ff fded 	bl	800bfb0 <rshift>
 800c3d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c3da:	2702      	movs	r7, #2
 800c3dc:	f1ba 0f00 	cmp.w	sl, #0
 800c3e0:	d048      	beq.n	800c474 <__gethex+0x3f4>
 800c3e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c3e6:	2b02      	cmp	r3, #2
 800c3e8:	d015      	beq.n	800c416 <__gethex+0x396>
 800c3ea:	2b03      	cmp	r3, #3
 800c3ec:	d017      	beq.n	800c41e <__gethex+0x39e>
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d109      	bne.n	800c406 <__gethex+0x386>
 800c3f2:	f01a 0f02 	tst.w	sl, #2
 800c3f6:	d006      	beq.n	800c406 <__gethex+0x386>
 800c3f8:	f8d9 0000 	ldr.w	r0, [r9]
 800c3fc:	ea4a 0a00 	orr.w	sl, sl, r0
 800c400:	f01a 0f01 	tst.w	sl, #1
 800c404:	d10e      	bne.n	800c424 <__gethex+0x3a4>
 800c406:	f047 0710 	orr.w	r7, r7, #16
 800c40a:	e033      	b.n	800c474 <__gethex+0x3f4>
 800c40c:	f04f 0a01 	mov.w	sl, #1
 800c410:	e7d0      	b.n	800c3b4 <__gethex+0x334>
 800c412:	2701      	movs	r7, #1
 800c414:	e7e2      	b.n	800c3dc <__gethex+0x35c>
 800c416:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c418:	f1c3 0301 	rsb	r3, r3, #1
 800c41c:	9315      	str	r3, [sp, #84]	; 0x54
 800c41e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c420:	2b00      	cmp	r3, #0
 800c422:	d0f0      	beq.n	800c406 <__gethex+0x386>
 800c424:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c428:	f104 0314 	add.w	r3, r4, #20
 800c42c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c430:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c434:	f04f 0c00 	mov.w	ip, #0
 800c438:	4618      	mov	r0, r3
 800c43a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c43e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c442:	d01c      	beq.n	800c47e <__gethex+0x3fe>
 800c444:	3201      	adds	r2, #1
 800c446:	6002      	str	r2, [r0, #0]
 800c448:	2f02      	cmp	r7, #2
 800c44a:	f104 0314 	add.w	r3, r4, #20
 800c44e:	d13f      	bne.n	800c4d0 <__gethex+0x450>
 800c450:	f8d8 2000 	ldr.w	r2, [r8]
 800c454:	3a01      	subs	r2, #1
 800c456:	42b2      	cmp	r2, r6
 800c458:	d10a      	bne.n	800c470 <__gethex+0x3f0>
 800c45a:	1171      	asrs	r1, r6, #5
 800c45c:	2201      	movs	r2, #1
 800c45e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c462:	f006 061f 	and.w	r6, r6, #31
 800c466:	fa02 f606 	lsl.w	r6, r2, r6
 800c46a:	421e      	tst	r6, r3
 800c46c:	bf18      	it	ne
 800c46e:	4617      	movne	r7, r2
 800c470:	f047 0720 	orr.w	r7, r7, #32
 800c474:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c476:	601c      	str	r4, [r3, #0]
 800c478:	9b04      	ldr	r3, [sp, #16]
 800c47a:	601d      	str	r5, [r3, #0]
 800c47c:	e695      	b.n	800c1aa <__gethex+0x12a>
 800c47e:	4299      	cmp	r1, r3
 800c480:	f843 cc04 	str.w	ip, [r3, #-4]
 800c484:	d8d8      	bhi.n	800c438 <__gethex+0x3b8>
 800c486:	68a3      	ldr	r3, [r4, #8]
 800c488:	459b      	cmp	fp, r3
 800c48a:	db19      	blt.n	800c4c0 <__gethex+0x440>
 800c48c:	6861      	ldr	r1, [r4, #4]
 800c48e:	ee18 0a10 	vmov	r0, s16
 800c492:	3101      	adds	r1, #1
 800c494:	f000 f928 	bl	800c6e8 <_Balloc>
 800c498:	4681      	mov	r9, r0
 800c49a:	b918      	cbnz	r0, 800c4a4 <__gethex+0x424>
 800c49c:	4b1a      	ldr	r3, [pc, #104]	; (800c508 <__gethex+0x488>)
 800c49e:	4602      	mov	r2, r0
 800c4a0:	2184      	movs	r1, #132	; 0x84
 800c4a2:	e6a8      	b.n	800c1f6 <__gethex+0x176>
 800c4a4:	6922      	ldr	r2, [r4, #16]
 800c4a6:	3202      	adds	r2, #2
 800c4a8:	f104 010c 	add.w	r1, r4, #12
 800c4ac:	0092      	lsls	r2, r2, #2
 800c4ae:	300c      	adds	r0, #12
 800c4b0:	f000 f90c 	bl	800c6cc <memcpy>
 800c4b4:	4621      	mov	r1, r4
 800c4b6:	ee18 0a10 	vmov	r0, s16
 800c4ba:	f000 f955 	bl	800c768 <_Bfree>
 800c4be:	464c      	mov	r4, r9
 800c4c0:	6923      	ldr	r3, [r4, #16]
 800c4c2:	1c5a      	adds	r2, r3, #1
 800c4c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c4c8:	6122      	str	r2, [r4, #16]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	615a      	str	r2, [r3, #20]
 800c4ce:	e7bb      	b.n	800c448 <__gethex+0x3c8>
 800c4d0:	6922      	ldr	r2, [r4, #16]
 800c4d2:	455a      	cmp	r2, fp
 800c4d4:	dd0b      	ble.n	800c4ee <__gethex+0x46e>
 800c4d6:	2101      	movs	r1, #1
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f7ff fd69 	bl	800bfb0 <rshift>
 800c4de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c4e2:	3501      	adds	r5, #1
 800c4e4:	42ab      	cmp	r3, r5
 800c4e6:	f6ff aed0 	blt.w	800c28a <__gethex+0x20a>
 800c4ea:	2701      	movs	r7, #1
 800c4ec:	e7c0      	b.n	800c470 <__gethex+0x3f0>
 800c4ee:	f016 061f 	ands.w	r6, r6, #31
 800c4f2:	d0fa      	beq.n	800c4ea <__gethex+0x46a>
 800c4f4:	449a      	add	sl, r3
 800c4f6:	f1c6 0620 	rsb	r6, r6, #32
 800c4fa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c4fe:	f000 f9e9 	bl	800c8d4 <__hi0bits>
 800c502:	42b0      	cmp	r0, r6
 800c504:	dbe7      	blt.n	800c4d6 <__gethex+0x456>
 800c506:	e7f0      	b.n	800c4ea <__gethex+0x46a>
 800c508:	0800e30c 	.word	0x0800e30c

0800c50c <L_shift>:
 800c50c:	f1c2 0208 	rsb	r2, r2, #8
 800c510:	0092      	lsls	r2, r2, #2
 800c512:	b570      	push	{r4, r5, r6, lr}
 800c514:	f1c2 0620 	rsb	r6, r2, #32
 800c518:	6843      	ldr	r3, [r0, #4]
 800c51a:	6804      	ldr	r4, [r0, #0]
 800c51c:	fa03 f506 	lsl.w	r5, r3, r6
 800c520:	432c      	orrs	r4, r5
 800c522:	40d3      	lsrs	r3, r2
 800c524:	6004      	str	r4, [r0, #0]
 800c526:	f840 3f04 	str.w	r3, [r0, #4]!
 800c52a:	4288      	cmp	r0, r1
 800c52c:	d3f4      	bcc.n	800c518 <L_shift+0xc>
 800c52e:	bd70      	pop	{r4, r5, r6, pc}

0800c530 <__match>:
 800c530:	b530      	push	{r4, r5, lr}
 800c532:	6803      	ldr	r3, [r0, #0]
 800c534:	3301      	adds	r3, #1
 800c536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c53a:	b914      	cbnz	r4, 800c542 <__match+0x12>
 800c53c:	6003      	str	r3, [r0, #0]
 800c53e:	2001      	movs	r0, #1
 800c540:	bd30      	pop	{r4, r5, pc}
 800c542:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c546:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c54a:	2d19      	cmp	r5, #25
 800c54c:	bf98      	it	ls
 800c54e:	3220      	addls	r2, #32
 800c550:	42a2      	cmp	r2, r4
 800c552:	d0f0      	beq.n	800c536 <__match+0x6>
 800c554:	2000      	movs	r0, #0
 800c556:	e7f3      	b.n	800c540 <__match+0x10>

0800c558 <__hexnan>:
 800c558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c55c:	680b      	ldr	r3, [r1, #0]
 800c55e:	6801      	ldr	r1, [r0, #0]
 800c560:	115e      	asrs	r6, r3, #5
 800c562:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c566:	f013 031f 	ands.w	r3, r3, #31
 800c56a:	b087      	sub	sp, #28
 800c56c:	bf18      	it	ne
 800c56e:	3604      	addne	r6, #4
 800c570:	2500      	movs	r5, #0
 800c572:	1f37      	subs	r7, r6, #4
 800c574:	4682      	mov	sl, r0
 800c576:	4690      	mov	r8, r2
 800c578:	9301      	str	r3, [sp, #4]
 800c57a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c57e:	46b9      	mov	r9, r7
 800c580:	463c      	mov	r4, r7
 800c582:	9502      	str	r5, [sp, #8]
 800c584:	46ab      	mov	fp, r5
 800c586:	784a      	ldrb	r2, [r1, #1]
 800c588:	1c4b      	adds	r3, r1, #1
 800c58a:	9303      	str	r3, [sp, #12]
 800c58c:	b342      	cbz	r2, 800c5e0 <__hexnan+0x88>
 800c58e:	4610      	mov	r0, r2
 800c590:	9105      	str	r1, [sp, #20]
 800c592:	9204      	str	r2, [sp, #16]
 800c594:	f7ff fd5e 	bl	800c054 <__hexdig_fun>
 800c598:	2800      	cmp	r0, #0
 800c59a:	d14f      	bne.n	800c63c <__hexnan+0xe4>
 800c59c:	9a04      	ldr	r2, [sp, #16]
 800c59e:	9905      	ldr	r1, [sp, #20]
 800c5a0:	2a20      	cmp	r2, #32
 800c5a2:	d818      	bhi.n	800c5d6 <__hexnan+0x7e>
 800c5a4:	9b02      	ldr	r3, [sp, #8]
 800c5a6:	459b      	cmp	fp, r3
 800c5a8:	dd13      	ble.n	800c5d2 <__hexnan+0x7a>
 800c5aa:	454c      	cmp	r4, r9
 800c5ac:	d206      	bcs.n	800c5bc <__hexnan+0x64>
 800c5ae:	2d07      	cmp	r5, #7
 800c5b0:	dc04      	bgt.n	800c5bc <__hexnan+0x64>
 800c5b2:	462a      	mov	r2, r5
 800c5b4:	4649      	mov	r1, r9
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	f7ff ffa8 	bl	800c50c <L_shift>
 800c5bc:	4544      	cmp	r4, r8
 800c5be:	d950      	bls.n	800c662 <__hexnan+0x10a>
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	f1a4 0904 	sub.w	r9, r4, #4
 800c5c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c5ca:	f8cd b008 	str.w	fp, [sp, #8]
 800c5ce:	464c      	mov	r4, r9
 800c5d0:	461d      	mov	r5, r3
 800c5d2:	9903      	ldr	r1, [sp, #12]
 800c5d4:	e7d7      	b.n	800c586 <__hexnan+0x2e>
 800c5d6:	2a29      	cmp	r2, #41	; 0x29
 800c5d8:	d156      	bne.n	800c688 <__hexnan+0x130>
 800c5da:	3102      	adds	r1, #2
 800c5dc:	f8ca 1000 	str.w	r1, [sl]
 800c5e0:	f1bb 0f00 	cmp.w	fp, #0
 800c5e4:	d050      	beq.n	800c688 <__hexnan+0x130>
 800c5e6:	454c      	cmp	r4, r9
 800c5e8:	d206      	bcs.n	800c5f8 <__hexnan+0xa0>
 800c5ea:	2d07      	cmp	r5, #7
 800c5ec:	dc04      	bgt.n	800c5f8 <__hexnan+0xa0>
 800c5ee:	462a      	mov	r2, r5
 800c5f0:	4649      	mov	r1, r9
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f7ff ff8a 	bl	800c50c <L_shift>
 800c5f8:	4544      	cmp	r4, r8
 800c5fa:	d934      	bls.n	800c666 <__hexnan+0x10e>
 800c5fc:	f1a8 0204 	sub.w	r2, r8, #4
 800c600:	4623      	mov	r3, r4
 800c602:	f853 1b04 	ldr.w	r1, [r3], #4
 800c606:	f842 1f04 	str.w	r1, [r2, #4]!
 800c60a:	429f      	cmp	r7, r3
 800c60c:	d2f9      	bcs.n	800c602 <__hexnan+0xaa>
 800c60e:	1b3b      	subs	r3, r7, r4
 800c610:	f023 0303 	bic.w	r3, r3, #3
 800c614:	3304      	adds	r3, #4
 800c616:	3401      	adds	r4, #1
 800c618:	3e03      	subs	r6, #3
 800c61a:	42b4      	cmp	r4, r6
 800c61c:	bf88      	it	hi
 800c61e:	2304      	movhi	r3, #4
 800c620:	4443      	add	r3, r8
 800c622:	2200      	movs	r2, #0
 800c624:	f843 2b04 	str.w	r2, [r3], #4
 800c628:	429f      	cmp	r7, r3
 800c62a:	d2fb      	bcs.n	800c624 <__hexnan+0xcc>
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	b91b      	cbnz	r3, 800c638 <__hexnan+0xe0>
 800c630:	4547      	cmp	r7, r8
 800c632:	d127      	bne.n	800c684 <__hexnan+0x12c>
 800c634:	2301      	movs	r3, #1
 800c636:	603b      	str	r3, [r7, #0]
 800c638:	2005      	movs	r0, #5
 800c63a:	e026      	b.n	800c68a <__hexnan+0x132>
 800c63c:	3501      	adds	r5, #1
 800c63e:	2d08      	cmp	r5, #8
 800c640:	f10b 0b01 	add.w	fp, fp, #1
 800c644:	dd06      	ble.n	800c654 <__hexnan+0xfc>
 800c646:	4544      	cmp	r4, r8
 800c648:	d9c3      	bls.n	800c5d2 <__hexnan+0x7a>
 800c64a:	2300      	movs	r3, #0
 800c64c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c650:	2501      	movs	r5, #1
 800c652:	3c04      	subs	r4, #4
 800c654:	6822      	ldr	r2, [r4, #0]
 800c656:	f000 000f 	and.w	r0, r0, #15
 800c65a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c65e:	6022      	str	r2, [r4, #0]
 800c660:	e7b7      	b.n	800c5d2 <__hexnan+0x7a>
 800c662:	2508      	movs	r5, #8
 800c664:	e7b5      	b.n	800c5d2 <__hexnan+0x7a>
 800c666:	9b01      	ldr	r3, [sp, #4]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d0df      	beq.n	800c62c <__hexnan+0xd4>
 800c66c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c670:	f1c3 0320 	rsb	r3, r3, #32
 800c674:	fa22 f303 	lsr.w	r3, r2, r3
 800c678:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c67c:	401a      	ands	r2, r3
 800c67e:	f846 2c04 	str.w	r2, [r6, #-4]
 800c682:	e7d3      	b.n	800c62c <__hexnan+0xd4>
 800c684:	3f04      	subs	r7, #4
 800c686:	e7d1      	b.n	800c62c <__hexnan+0xd4>
 800c688:	2004      	movs	r0, #4
 800c68a:	b007      	add	sp, #28
 800c68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c690 <_localeconv_r>:
 800c690:	4800      	ldr	r0, [pc, #0]	; (800c694 <_localeconv_r+0x4>)
 800c692:	4770      	bx	lr
 800c694:	200002d8 	.word	0x200002d8

0800c698 <malloc>:
 800c698:	4b02      	ldr	r3, [pc, #8]	; (800c6a4 <malloc+0xc>)
 800c69a:	4601      	mov	r1, r0
 800c69c:	6818      	ldr	r0, [r3, #0]
 800c69e:	f000 bd3d 	b.w	800d11c <_malloc_r>
 800c6a2:	bf00      	nop
 800c6a4:	20000180 	.word	0x20000180

0800c6a8 <__ascii_mbtowc>:
 800c6a8:	b082      	sub	sp, #8
 800c6aa:	b901      	cbnz	r1, 800c6ae <__ascii_mbtowc+0x6>
 800c6ac:	a901      	add	r1, sp, #4
 800c6ae:	b142      	cbz	r2, 800c6c2 <__ascii_mbtowc+0x1a>
 800c6b0:	b14b      	cbz	r3, 800c6c6 <__ascii_mbtowc+0x1e>
 800c6b2:	7813      	ldrb	r3, [r2, #0]
 800c6b4:	600b      	str	r3, [r1, #0]
 800c6b6:	7812      	ldrb	r2, [r2, #0]
 800c6b8:	1e10      	subs	r0, r2, #0
 800c6ba:	bf18      	it	ne
 800c6bc:	2001      	movne	r0, #1
 800c6be:	b002      	add	sp, #8
 800c6c0:	4770      	bx	lr
 800c6c2:	4610      	mov	r0, r2
 800c6c4:	e7fb      	b.n	800c6be <__ascii_mbtowc+0x16>
 800c6c6:	f06f 0001 	mvn.w	r0, #1
 800c6ca:	e7f8      	b.n	800c6be <__ascii_mbtowc+0x16>

0800c6cc <memcpy>:
 800c6cc:	440a      	add	r2, r1
 800c6ce:	4291      	cmp	r1, r2
 800c6d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c6d4:	d100      	bne.n	800c6d8 <memcpy+0xc>
 800c6d6:	4770      	bx	lr
 800c6d8:	b510      	push	{r4, lr}
 800c6da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6e2:	4291      	cmp	r1, r2
 800c6e4:	d1f9      	bne.n	800c6da <memcpy+0xe>
 800c6e6:	bd10      	pop	{r4, pc}

0800c6e8 <_Balloc>:
 800c6e8:	b570      	push	{r4, r5, r6, lr}
 800c6ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c6ec:	4604      	mov	r4, r0
 800c6ee:	460d      	mov	r5, r1
 800c6f0:	b976      	cbnz	r6, 800c710 <_Balloc+0x28>
 800c6f2:	2010      	movs	r0, #16
 800c6f4:	f7ff ffd0 	bl	800c698 <malloc>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	6260      	str	r0, [r4, #36]	; 0x24
 800c6fc:	b920      	cbnz	r0, 800c708 <_Balloc+0x20>
 800c6fe:	4b18      	ldr	r3, [pc, #96]	; (800c760 <_Balloc+0x78>)
 800c700:	4818      	ldr	r0, [pc, #96]	; (800c764 <_Balloc+0x7c>)
 800c702:	2166      	movs	r1, #102	; 0x66
 800c704:	f000 fef8 	bl	800d4f8 <__assert_func>
 800c708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c70c:	6006      	str	r6, [r0, #0]
 800c70e:	60c6      	str	r6, [r0, #12]
 800c710:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c712:	68f3      	ldr	r3, [r6, #12]
 800c714:	b183      	cbz	r3, 800c738 <_Balloc+0x50>
 800c716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c718:	68db      	ldr	r3, [r3, #12]
 800c71a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c71e:	b9b8      	cbnz	r0, 800c750 <_Balloc+0x68>
 800c720:	2101      	movs	r1, #1
 800c722:	fa01 f605 	lsl.w	r6, r1, r5
 800c726:	1d72      	adds	r2, r6, #5
 800c728:	0092      	lsls	r2, r2, #2
 800c72a:	4620      	mov	r0, r4
 800c72c:	f000 fc97 	bl	800d05e <_calloc_r>
 800c730:	b160      	cbz	r0, 800c74c <_Balloc+0x64>
 800c732:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c736:	e00e      	b.n	800c756 <_Balloc+0x6e>
 800c738:	2221      	movs	r2, #33	; 0x21
 800c73a:	2104      	movs	r1, #4
 800c73c:	4620      	mov	r0, r4
 800c73e:	f000 fc8e 	bl	800d05e <_calloc_r>
 800c742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c744:	60f0      	str	r0, [r6, #12]
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d1e4      	bne.n	800c716 <_Balloc+0x2e>
 800c74c:	2000      	movs	r0, #0
 800c74e:	bd70      	pop	{r4, r5, r6, pc}
 800c750:	6802      	ldr	r2, [r0, #0]
 800c752:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c756:	2300      	movs	r3, #0
 800c758:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c75c:	e7f7      	b.n	800c74e <_Balloc+0x66>
 800c75e:	bf00      	nop
 800c760:	0800e296 	.word	0x0800e296
 800c764:	0800e39c 	.word	0x0800e39c

0800c768 <_Bfree>:
 800c768:	b570      	push	{r4, r5, r6, lr}
 800c76a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c76c:	4605      	mov	r5, r0
 800c76e:	460c      	mov	r4, r1
 800c770:	b976      	cbnz	r6, 800c790 <_Bfree+0x28>
 800c772:	2010      	movs	r0, #16
 800c774:	f7ff ff90 	bl	800c698 <malloc>
 800c778:	4602      	mov	r2, r0
 800c77a:	6268      	str	r0, [r5, #36]	; 0x24
 800c77c:	b920      	cbnz	r0, 800c788 <_Bfree+0x20>
 800c77e:	4b09      	ldr	r3, [pc, #36]	; (800c7a4 <_Bfree+0x3c>)
 800c780:	4809      	ldr	r0, [pc, #36]	; (800c7a8 <_Bfree+0x40>)
 800c782:	218a      	movs	r1, #138	; 0x8a
 800c784:	f000 feb8 	bl	800d4f8 <__assert_func>
 800c788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c78c:	6006      	str	r6, [r0, #0]
 800c78e:	60c6      	str	r6, [r0, #12]
 800c790:	b13c      	cbz	r4, 800c7a2 <_Bfree+0x3a>
 800c792:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c794:	6862      	ldr	r2, [r4, #4]
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c79c:	6021      	str	r1, [r4, #0]
 800c79e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c7a2:	bd70      	pop	{r4, r5, r6, pc}
 800c7a4:	0800e296 	.word	0x0800e296
 800c7a8:	0800e39c 	.word	0x0800e39c

0800c7ac <__multadd>:
 800c7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7b0:	690e      	ldr	r6, [r1, #16]
 800c7b2:	4607      	mov	r7, r0
 800c7b4:	4698      	mov	r8, r3
 800c7b6:	460c      	mov	r4, r1
 800c7b8:	f101 0014 	add.w	r0, r1, #20
 800c7bc:	2300      	movs	r3, #0
 800c7be:	6805      	ldr	r5, [r0, #0]
 800c7c0:	b2a9      	uxth	r1, r5
 800c7c2:	fb02 8101 	mla	r1, r2, r1, r8
 800c7c6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c7ca:	0c2d      	lsrs	r5, r5, #16
 800c7cc:	fb02 c505 	mla	r5, r2, r5, ip
 800c7d0:	b289      	uxth	r1, r1
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c7d8:	429e      	cmp	r6, r3
 800c7da:	f840 1b04 	str.w	r1, [r0], #4
 800c7de:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c7e2:	dcec      	bgt.n	800c7be <__multadd+0x12>
 800c7e4:	f1b8 0f00 	cmp.w	r8, #0
 800c7e8:	d022      	beq.n	800c830 <__multadd+0x84>
 800c7ea:	68a3      	ldr	r3, [r4, #8]
 800c7ec:	42b3      	cmp	r3, r6
 800c7ee:	dc19      	bgt.n	800c824 <__multadd+0x78>
 800c7f0:	6861      	ldr	r1, [r4, #4]
 800c7f2:	4638      	mov	r0, r7
 800c7f4:	3101      	adds	r1, #1
 800c7f6:	f7ff ff77 	bl	800c6e8 <_Balloc>
 800c7fa:	4605      	mov	r5, r0
 800c7fc:	b928      	cbnz	r0, 800c80a <__multadd+0x5e>
 800c7fe:	4602      	mov	r2, r0
 800c800:	4b0d      	ldr	r3, [pc, #52]	; (800c838 <__multadd+0x8c>)
 800c802:	480e      	ldr	r0, [pc, #56]	; (800c83c <__multadd+0x90>)
 800c804:	21b5      	movs	r1, #181	; 0xb5
 800c806:	f000 fe77 	bl	800d4f8 <__assert_func>
 800c80a:	6922      	ldr	r2, [r4, #16]
 800c80c:	3202      	adds	r2, #2
 800c80e:	f104 010c 	add.w	r1, r4, #12
 800c812:	0092      	lsls	r2, r2, #2
 800c814:	300c      	adds	r0, #12
 800c816:	f7ff ff59 	bl	800c6cc <memcpy>
 800c81a:	4621      	mov	r1, r4
 800c81c:	4638      	mov	r0, r7
 800c81e:	f7ff ffa3 	bl	800c768 <_Bfree>
 800c822:	462c      	mov	r4, r5
 800c824:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c828:	3601      	adds	r6, #1
 800c82a:	f8c3 8014 	str.w	r8, [r3, #20]
 800c82e:	6126      	str	r6, [r4, #16]
 800c830:	4620      	mov	r0, r4
 800c832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c836:	bf00      	nop
 800c838:	0800e30c 	.word	0x0800e30c
 800c83c:	0800e39c 	.word	0x0800e39c

0800c840 <__s2b>:
 800c840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c844:	460c      	mov	r4, r1
 800c846:	4615      	mov	r5, r2
 800c848:	461f      	mov	r7, r3
 800c84a:	2209      	movs	r2, #9
 800c84c:	3308      	adds	r3, #8
 800c84e:	4606      	mov	r6, r0
 800c850:	fb93 f3f2 	sdiv	r3, r3, r2
 800c854:	2100      	movs	r1, #0
 800c856:	2201      	movs	r2, #1
 800c858:	429a      	cmp	r2, r3
 800c85a:	db09      	blt.n	800c870 <__s2b+0x30>
 800c85c:	4630      	mov	r0, r6
 800c85e:	f7ff ff43 	bl	800c6e8 <_Balloc>
 800c862:	b940      	cbnz	r0, 800c876 <__s2b+0x36>
 800c864:	4602      	mov	r2, r0
 800c866:	4b19      	ldr	r3, [pc, #100]	; (800c8cc <__s2b+0x8c>)
 800c868:	4819      	ldr	r0, [pc, #100]	; (800c8d0 <__s2b+0x90>)
 800c86a:	21ce      	movs	r1, #206	; 0xce
 800c86c:	f000 fe44 	bl	800d4f8 <__assert_func>
 800c870:	0052      	lsls	r2, r2, #1
 800c872:	3101      	adds	r1, #1
 800c874:	e7f0      	b.n	800c858 <__s2b+0x18>
 800c876:	9b08      	ldr	r3, [sp, #32]
 800c878:	6143      	str	r3, [r0, #20]
 800c87a:	2d09      	cmp	r5, #9
 800c87c:	f04f 0301 	mov.w	r3, #1
 800c880:	6103      	str	r3, [r0, #16]
 800c882:	dd16      	ble.n	800c8b2 <__s2b+0x72>
 800c884:	f104 0909 	add.w	r9, r4, #9
 800c888:	46c8      	mov	r8, r9
 800c88a:	442c      	add	r4, r5
 800c88c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c890:	4601      	mov	r1, r0
 800c892:	3b30      	subs	r3, #48	; 0x30
 800c894:	220a      	movs	r2, #10
 800c896:	4630      	mov	r0, r6
 800c898:	f7ff ff88 	bl	800c7ac <__multadd>
 800c89c:	45a0      	cmp	r8, r4
 800c89e:	d1f5      	bne.n	800c88c <__s2b+0x4c>
 800c8a0:	f1a5 0408 	sub.w	r4, r5, #8
 800c8a4:	444c      	add	r4, r9
 800c8a6:	1b2d      	subs	r5, r5, r4
 800c8a8:	1963      	adds	r3, r4, r5
 800c8aa:	42bb      	cmp	r3, r7
 800c8ac:	db04      	blt.n	800c8b8 <__s2b+0x78>
 800c8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8b2:	340a      	adds	r4, #10
 800c8b4:	2509      	movs	r5, #9
 800c8b6:	e7f6      	b.n	800c8a6 <__s2b+0x66>
 800c8b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c8bc:	4601      	mov	r1, r0
 800c8be:	3b30      	subs	r3, #48	; 0x30
 800c8c0:	220a      	movs	r2, #10
 800c8c2:	4630      	mov	r0, r6
 800c8c4:	f7ff ff72 	bl	800c7ac <__multadd>
 800c8c8:	e7ee      	b.n	800c8a8 <__s2b+0x68>
 800c8ca:	bf00      	nop
 800c8cc:	0800e30c 	.word	0x0800e30c
 800c8d0:	0800e39c 	.word	0x0800e39c

0800c8d4 <__hi0bits>:
 800c8d4:	0c03      	lsrs	r3, r0, #16
 800c8d6:	041b      	lsls	r3, r3, #16
 800c8d8:	b9d3      	cbnz	r3, 800c910 <__hi0bits+0x3c>
 800c8da:	0400      	lsls	r0, r0, #16
 800c8dc:	2310      	movs	r3, #16
 800c8de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c8e2:	bf04      	itt	eq
 800c8e4:	0200      	lsleq	r0, r0, #8
 800c8e6:	3308      	addeq	r3, #8
 800c8e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c8ec:	bf04      	itt	eq
 800c8ee:	0100      	lsleq	r0, r0, #4
 800c8f0:	3304      	addeq	r3, #4
 800c8f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c8f6:	bf04      	itt	eq
 800c8f8:	0080      	lsleq	r0, r0, #2
 800c8fa:	3302      	addeq	r3, #2
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	db05      	blt.n	800c90c <__hi0bits+0x38>
 800c900:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c904:	f103 0301 	add.w	r3, r3, #1
 800c908:	bf08      	it	eq
 800c90a:	2320      	moveq	r3, #32
 800c90c:	4618      	mov	r0, r3
 800c90e:	4770      	bx	lr
 800c910:	2300      	movs	r3, #0
 800c912:	e7e4      	b.n	800c8de <__hi0bits+0xa>

0800c914 <__lo0bits>:
 800c914:	6803      	ldr	r3, [r0, #0]
 800c916:	f013 0207 	ands.w	r2, r3, #7
 800c91a:	4601      	mov	r1, r0
 800c91c:	d00b      	beq.n	800c936 <__lo0bits+0x22>
 800c91e:	07da      	lsls	r2, r3, #31
 800c920:	d424      	bmi.n	800c96c <__lo0bits+0x58>
 800c922:	0798      	lsls	r0, r3, #30
 800c924:	bf49      	itett	mi
 800c926:	085b      	lsrmi	r3, r3, #1
 800c928:	089b      	lsrpl	r3, r3, #2
 800c92a:	2001      	movmi	r0, #1
 800c92c:	600b      	strmi	r3, [r1, #0]
 800c92e:	bf5c      	itt	pl
 800c930:	600b      	strpl	r3, [r1, #0]
 800c932:	2002      	movpl	r0, #2
 800c934:	4770      	bx	lr
 800c936:	b298      	uxth	r0, r3
 800c938:	b9b0      	cbnz	r0, 800c968 <__lo0bits+0x54>
 800c93a:	0c1b      	lsrs	r3, r3, #16
 800c93c:	2010      	movs	r0, #16
 800c93e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c942:	bf04      	itt	eq
 800c944:	0a1b      	lsreq	r3, r3, #8
 800c946:	3008      	addeq	r0, #8
 800c948:	071a      	lsls	r2, r3, #28
 800c94a:	bf04      	itt	eq
 800c94c:	091b      	lsreq	r3, r3, #4
 800c94e:	3004      	addeq	r0, #4
 800c950:	079a      	lsls	r2, r3, #30
 800c952:	bf04      	itt	eq
 800c954:	089b      	lsreq	r3, r3, #2
 800c956:	3002      	addeq	r0, #2
 800c958:	07da      	lsls	r2, r3, #31
 800c95a:	d403      	bmi.n	800c964 <__lo0bits+0x50>
 800c95c:	085b      	lsrs	r3, r3, #1
 800c95e:	f100 0001 	add.w	r0, r0, #1
 800c962:	d005      	beq.n	800c970 <__lo0bits+0x5c>
 800c964:	600b      	str	r3, [r1, #0]
 800c966:	4770      	bx	lr
 800c968:	4610      	mov	r0, r2
 800c96a:	e7e8      	b.n	800c93e <__lo0bits+0x2a>
 800c96c:	2000      	movs	r0, #0
 800c96e:	4770      	bx	lr
 800c970:	2020      	movs	r0, #32
 800c972:	4770      	bx	lr

0800c974 <__i2b>:
 800c974:	b510      	push	{r4, lr}
 800c976:	460c      	mov	r4, r1
 800c978:	2101      	movs	r1, #1
 800c97a:	f7ff feb5 	bl	800c6e8 <_Balloc>
 800c97e:	4602      	mov	r2, r0
 800c980:	b928      	cbnz	r0, 800c98e <__i2b+0x1a>
 800c982:	4b05      	ldr	r3, [pc, #20]	; (800c998 <__i2b+0x24>)
 800c984:	4805      	ldr	r0, [pc, #20]	; (800c99c <__i2b+0x28>)
 800c986:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c98a:	f000 fdb5 	bl	800d4f8 <__assert_func>
 800c98e:	2301      	movs	r3, #1
 800c990:	6144      	str	r4, [r0, #20]
 800c992:	6103      	str	r3, [r0, #16]
 800c994:	bd10      	pop	{r4, pc}
 800c996:	bf00      	nop
 800c998:	0800e30c 	.word	0x0800e30c
 800c99c:	0800e39c 	.word	0x0800e39c

0800c9a0 <__multiply>:
 800c9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a4:	4614      	mov	r4, r2
 800c9a6:	690a      	ldr	r2, [r1, #16]
 800c9a8:	6923      	ldr	r3, [r4, #16]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	bfb8      	it	lt
 800c9ae:	460b      	movlt	r3, r1
 800c9b0:	460d      	mov	r5, r1
 800c9b2:	bfbc      	itt	lt
 800c9b4:	4625      	movlt	r5, r4
 800c9b6:	461c      	movlt	r4, r3
 800c9b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c9bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c9c0:	68ab      	ldr	r3, [r5, #8]
 800c9c2:	6869      	ldr	r1, [r5, #4]
 800c9c4:	eb0a 0709 	add.w	r7, sl, r9
 800c9c8:	42bb      	cmp	r3, r7
 800c9ca:	b085      	sub	sp, #20
 800c9cc:	bfb8      	it	lt
 800c9ce:	3101      	addlt	r1, #1
 800c9d0:	f7ff fe8a 	bl	800c6e8 <_Balloc>
 800c9d4:	b930      	cbnz	r0, 800c9e4 <__multiply+0x44>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	4b42      	ldr	r3, [pc, #264]	; (800cae4 <__multiply+0x144>)
 800c9da:	4843      	ldr	r0, [pc, #268]	; (800cae8 <__multiply+0x148>)
 800c9dc:	f240 115d 	movw	r1, #349	; 0x15d
 800c9e0:	f000 fd8a 	bl	800d4f8 <__assert_func>
 800c9e4:	f100 0614 	add.w	r6, r0, #20
 800c9e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c9ec:	4633      	mov	r3, r6
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	4543      	cmp	r3, r8
 800c9f2:	d31e      	bcc.n	800ca32 <__multiply+0x92>
 800c9f4:	f105 0c14 	add.w	ip, r5, #20
 800c9f8:	f104 0314 	add.w	r3, r4, #20
 800c9fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ca00:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ca04:	9202      	str	r2, [sp, #8]
 800ca06:	ebac 0205 	sub.w	r2, ip, r5
 800ca0a:	3a15      	subs	r2, #21
 800ca0c:	f022 0203 	bic.w	r2, r2, #3
 800ca10:	3204      	adds	r2, #4
 800ca12:	f105 0115 	add.w	r1, r5, #21
 800ca16:	458c      	cmp	ip, r1
 800ca18:	bf38      	it	cc
 800ca1a:	2204      	movcc	r2, #4
 800ca1c:	9201      	str	r2, [sp, #4]
 800ca1e:	9a02      	ldr	r2, [sp, #8]
 800ca20:	9303      	str	r3, [sp, #12]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d808      	bhi.n	800ca38 <__multiply+0x98>
 800ca26:	2f00      	cmp	r7, #0
 800ca28:	dc55      	bgt.n	800cad6 <__multiply+0x136>
 800ca2a:	6107      	str	r7, [r0, #16]
 800ca2c:	b005      	add	sp, #20
 800ca2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca32:	f843 2b04 	str.w	r2, [r3], #4
 800ca36:	e7db      	b.n	800c9f0 <__multiply+0x50>
 800ca38:	f8b3 a000 	ldrh.w	sl, [r3]
 800ca3c:	f1ba 0f00 	cmp.w	sl, #0
 800ca40:	d020      	beq.n	800ca84 <__multiply+0xe4>
 800ca42:	f105 0e14 	add.w	lr, r5, #20
 800ca46:	46b1      	mov	r9, r6
 800ca48:	2200      	movs	r2, #0
 800ca4a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ca4e:	f8d9 b000 	ldr.w	fp, [r9]
 800ca52:	b2a1      	uxth	r1, r4
 800ca54:	fa1f fb8b 	uxth.w	fp, fp
 800ca58:	fb0a b101 	mla	r1, sl, r1, fp
 800ca5c:	4411      	add	r1, r2
 800ca5e:	f8d9 2000 	ldr.w	r2, [r9]
 800ca62:	0c24      	lsrs	r4, r4, #16
 800ca64:	0c12      	lsrs	r2, r2, #16
 800ca66:	fb0a 2404 	mla	r4, sl, r4, r2
 800ca6a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ca6e:	b289      	uxth	r1, r1
 800ca70:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ca74:	45f4      	cmp	ip, lr
 800ca76:	f849 1b04 	str.w	r1, [r9], #4
 800ca7a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ca7e:	d8e4      	bhi.n	800ca4a <__multiply+0xaa>
 800ca80:	9901      	ldr	r1, [sp, #4]
 800ca82:	5072      	str	r2, [r6, r1]
 800ca84:	9a03      	ldr	r2, [sp, #12]
 800ca86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ca8a:	3304      	adds	r3, #4
 800ca8c:	f1b9 0f00 	cmp.w	r9, #0
 800ca90:	d01f      	beq.n	800cad2 <__multiply+0x132>
 800ca92:	6834      	ldr	r4, [r6, #0]
 800ca94:	f105 0114 	add.w	r1, r5, #20
 800ca98:	46b6      	mov	lr, r6
 800ca9a:	f04f 0a00 	mov.w	sl, #0
 800ca9e:	880a      	ldrh	r2, [r1, #0]
 800caa0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800caa4:	fb09 b202 	mla	r2, r9, r2, fp
 800caa8:	4492      	add	sl, r2
 800caaa:	b2a4      	uxth	r4, r4
 800caac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800cab0:	f84e 4b04 	str.w	r4, [lr], #4
 800cab4:	f851 4b04 	ldr.w	r4, [r1], #4
 800cab8:	f8be 2000 	ldrh.w	r2, [lr]
 800cabc:	0c24      	lsrs	r4, r4, #16
 800cabe:	fb09 2404 	mla	r4, r9, r4, r2
 800cac2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800cac6:	458c      	cmp	ip, r1
 800cac8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cacc:	d8e7      	bhi.n	800ca9e <__multiply+0xfe>
 800cace:	9a01      	ldr	r2, [sp, #4]
 800cad0:	50b4      	str	r4, [r6, r2]
 800cad2:	3604      	adds	r6, #4
 800cad4:	e7a3      	b.n	800ca1e <__multiply+0x7e>
 800cad6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d1a5      	bne.n	800ca2a <__multiply+0x8a>
 800cade:	3f01      	subs	r7, #1
 800cae0:	e7a1      	b.n	800ca26 <__multiply+0x86>
 800cae2:	bf00      	nop
 800cae4:	0800e30c 	.word	0x0800e30c
 800cae8:	0800e39c 	.word	0x0800e39c

0800caec <__pow5mult>:
 800caec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caf0:	4615      	mov	r5, r2
 800caf2:	f012 0203 	ands.w	r2, r2, #3
 800caf6:	4606      	mov	r6, r0
 800caf8:	460f      	mov	r7, r1
 800cafa:	d007      	beq.n	800cb0c <__pow5mult+0x20>
 800cafc:	4c25      	ldr	r4, [pc, #148]	; (800cb94 <__pow5mult+0xa8>)
 800cafe:	3a01      	subs	r2, #1
 800cb00:	2300      	movs	r3, #0
 800cb02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb06:	f7ff fe51 	bl	800c7ac <__multadd>
 800cb0a:	4607      	mov	r7, r0
 800cb0c:	10ad      	asrs	r5, r5, #2
 800cb0e:	d03d      	beq.n	800cb8c <__pow5mult+0xa0>
 800cb10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cb12:	b97c      	cbnz	r4, 800cb34 <__pow5mult+0x48>
 800cb14:	2010      	movs	r0, #16
 800cb16:	f7ff fdbf 	bl	800c698 <malloc>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	6270      	str	r0, [r6, #36]	; 0x24
 800cb1e:	b928      	cbnz	r0, 800cb2c <__pow5mult+0x40>
 800cb20:	4b1d      	ldr	r3, [pc, #116]	; (800cb98 <__pow5mult+0xac>)
 800cb22:	481e      	ldr	r0, [pc, #120]	; (800cb9c <__pow5mult+0xb0>)
 800cb24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cb28:	f000 fce6 	bl	800d4f8 <__assert_func>
 800cb2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb30:	6004      	str	r4, [r0, #0]
 800cb32:	60c4      	str	r4, [r0, #12]
 800cb34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cb38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb3c:	b94c      	cbnz	r4, 800cb52 <__pow5mult+0x66>
 800cb3e:	f240 2171 	movw	r1, #625	; 0x271
 800cb42:	4630      	mov	r0, r6
 800cb44:	f7ff ff16 	bl	800c974 <__i2b>
 800cb48:	2300      	movs	r3, #0
 800cb4a:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb4e:	4604      	mov	r4, r0
 800cb50:	6003      	str	r3, [r0, #0]
 800cb52:	f04f 0900 	mov.w	r9, #0
 800cb56:	07eb      	lsls	r3, r5, #31
 800cb58:	d50a      	bpl.n	800cb70 <__pow5mult+0x84>
 800cb5a:	4639      	mov	r1, r7
 800cb5c:	4622      	mov	r2, r4
 800cb5e:	4630      	mov	r0, r6
 800cb60:	f7ff ff1e 	bl	800c9a0 <__multiply>
 800cb64:	4639      	mov	r1, r7
 800cb66:	4680      	mov	r8, r0
 800cb68:	4630      	mov	r0, r6
 800cb6a:	f7ff fdfd 	bl	800c768 <_Bfree>
 800cb6e:	4647      	mov	r7, r8
 800cb70:	106d      	asrs	r5, r5, #1
 800cb72:	d00b      	beq.n	800cb8c <__pow5mult+0xa0>
 800cb74:	6820      	ldr	r0, [r4, #0]
 800cb76:	b938      	cbnz	r0, 800cb88 <__pow5mult+0x9c>
 800cb78:	4622      	mov	r2, r4
 800cb7a:	4621      	mov	r1, r4
 800cb7c:	4630      	mov	r0, r6
 800cb7e:	f7ff ff0f 	bl	800c9a0 <__multiply>
 800cb82:	6020      	str	r0, [r4, #0]
 800cb84:	f8c0 9000 	str.w	r9, [r0]
 800cb88:	4604      	mov	r4, r0
 800cb8a:	e7e4      	b.n	800cb56 <__pow5mult+0x6a>
 800cb8c:	4638      	mov	r0, r7
 800cb8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb92:	bf00      	nop
 800cb94:	0800e4f0 	.word	0x0800e4f0
 800cb98:	0800e296 	.word	0x0800e296
 800cb9c:	0800e39c 	.word	0x0800e39c

0800cba0 <__lshift>:
 800cba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cba4:	460c      	mov	r4, r1
 800cba6:	6849      	ldr	r1, [r1, #4]
 800cba8:	6923      	ldr	r3, [r4, #16]
 800cbaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cbae:	68a3      	ldr	r3, [r4, #8]
 800cbb0:	4607      	mov	r7, r0
 800cbb2:	4691      	mov	r9, r2
 800cbb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cbb8:	f108 0601 	add.w	r6, r8, #1
 800cbbc:	42b3      	cmp	r3, r6
 800cbbe:	db0b      	blt.n	800cbd8 <__lshift+0x38>
 800cbc0:	4638      	mov	r0, r7
 800cbc2:	f7ff fd91 	bl	800c6e8 <_Balloc>
 800cbc6:	4605      	mov	r5, r0
 800cbc8:	b948      	cbnz	r0, 800cbde <__lshift+0x3e>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	4b28      	ldr	r3, [pc, #160]	; (800cc70 <__lshift+0xd0>)
 800cbce:	4829      	ldr	r0, [pc, #164]	; (800cc74 <__lshift+0xd4>)
 800cbd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cbd4:	f000 fc90 	bl	800d4f8 <__assert_func>
 800cbd8:	3101      	adds	r1, #1
 800cbda:	005b      	lsls	r3, r3, #1
 800cbdc:	e7ee      	b.n	800cbbc <__lshift+0x1c>
 800cbde:	2300      	movs	r3, #0
 800cbe0:	f100 0114 	add.w	r1, r0, #20
 800cbe4:	f100 0210 	add.w	r2, r0, #16
 800cbe8:	4618      	mov	r0, r3
 800cbea:	4553      	cmp	r3, sl
 800cbec:	db33      	blt.n	800cc56 <__lshift+0xb6>
 800cbee:	6920      	ldr	r0, [r4, #16]
 800cbf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbf4:	f104 0314 	add.w	r3, r4, #20
 800cbf8:	f019 091f 	ands.w	r9, r9, #31
 800cbfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc04:	d02b      	beq.n	800cc5e <__lshift+0xbe>
 800cc06:	f1c9 0e20 	rsb	lr, r9, #32
 800cc0a:	468a      	mov	sl, r1
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	6818      	ldr	r0, [r3, #0]
 800cc10:	fa00 f009 	lsl.w	r0, r0, r9
 800cc14:	4302      	orrs	r2, r0
 800cc16:	f84a 2b04 	str.w	r2, [sl], #4
 800cc1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc1e:	459c      	cmp	ip, r3
 800cc20:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc24:	d8f3      	bhi.n	800cc0e <__lshift+0x6e>
 800cc26:	ebac 0304 	sub.w	r3, ip, r4
 800cc2a:	3b15      	subs	r3, #21
 800cc2c:	f023 0303 	bic.w	r3, r3, #3
 800cc30:	3304      	adds	r3, #4
 800cc32:	f104 0015 	add.w	r0, r4, #21
 800cc36:	4584      	cmp	ip, r0
 800cc38:	bf38      	it	cc
 800cc3a:	2304      	movcc	r3, #4
 800cc3c:	50ca      	str	r2, [r1, r3]
 800cc3e:	b10a      	cbz	r2, 800cc44 <__lshift+0xa4>
 800cc40:	f108 0602 	add.w	r6, r8, #2
 800cc44:	3e01      	subs	r6, #1
 800cc46:	4638      	mov	r0, r7
 800cc48:	612e      	str	r6, [r5, #16]
 800cc4a:	4621      	mov	r1, r4
 800cc4c:	f7ff fd8c 	bl	800c768 <_Bfree>
 800cc50:	4628      	mov	r0, r5
 800cc52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc56:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	e7c5      	b.n	800cbea <__lshift+0x4a>
 800cc5e:	3904      	subs	r1, #4
 800cc60:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc64:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc68:	459c      	cmp	ip, r3
 800cc6a:	d8f9      	bhi.n	800cc60 <__lshift+0xc0>
 800cc6c:	e7ea      	b.n	800cc44 <__lshift+0xa4>
 800cc6e:	bf00      	nop
 800cc70:	0800e30c 	.word	0x0800e30c
 800cc74:	0800e39c 	.word	0x0800e39c

0800cc78 <__mcmp>:
 800cc78:	b530      	push	{r4, r5, lr}
 800cc7a:	6902      	ldr	r2, [r0, #16]
 800cc7c:	690c      	ldr	r4, [r1, #16]
 800cc7e:	1b12      	subs	r2, r2, r4
 800cc80:	d10e      	bne.n	800cca0 <__mcmp+0x28>
 800cc82:	f100 0314 	add.w	r3, r0, #20
 800cc86:	3114      	adds	r1, #20
 800cc88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cc8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cc90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cc94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cc98:	42a5      	cmp	r5, r4
 800cc9a:	d003      	beq.n	800cca4 <__mcmp+0x2c>
 800cc9c:	d305      	bcc.n	800ccaa <__mcmp+0x32>
 800cc9e:	2201      	movs	r2, #1
 800cca0:	4610      	mov	r0, r2
 800cca2:	bd30      	pop	{r4, r5, pc}
 800cca4:	4283      	cmp	r3, r0
 800cca6:	d3f3      	bcc.n	800cc90 <__mcmp+0x18>
 800cca8:	e7fa      	b.n	800cca0 <__mcmp+0x28>
 800ccaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccae:	e7f7      	b.n	800cca0 <__mcmp+0x28>

0800ccb0 <__mdiff>:
 800ccb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb4:	460c      	mov	r4, r1
 800ccb6:	4606      	mov	r6, r0
 800ccb8:	4611      	mov	r1, r2
 800ccba:	4620      	mov	r0, r4
 800ccbc:	4617      	mov	r7, r2
 800ccbe:	f7ff ffdb 	bl	800cc78 <__mcmp>
 800ccc2:	1e05      	subs	r5, r0, #0
 800ccc4:	d110      	bne.n	800cce8 <__mdiff+0x38>
 800ccc6:	4629      	mov	r1, r5
 800ccc8:	4630      	mov	r0, r6
 800ccca:	f7ff fd0d 	bl	800c6e8 <_Balloc>
 800ccce:	b930      	cbnz	r0, 800ccde <__mdiff+0x2e>
 800ccd0:	4b39      	ldr	r3, [pc, #228]	; (800cdb8 <__mdiff+0x108>)
 800ccd2:	4602      	mov	r2, r0
 800ccd4:	f240 2132 	movw	r1, #562	; 0x232
 800ccd8:	4838      	ldr	r0, [pc, #224]	; (800cdbc <__mdiff+0x10c>)
 800ccda:	f000 fc0d 	bl	800d4f8 <__assert_func>
 800ccde:	2301      	movs	r3, #1
 800cce0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cce4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce8:	bfa4      	itt	ge
 800ccea:	463b      	movge	r3, r7
 800ccec:	4627      	movge	r7, r4
 800ccee:	4630      	mov	r0, r6
 800ccf0:	6879      	ldr	r1, [r7, #4]
 800ccf2:	bfa6      	itte	ge
 800ccf4:	461c      	movge	r4, r3
 800ccf6:	2500      	movge	r5, #0
 800ccf8:	2501      	movlt	r5, #1
 800ccfa:	f7ff fcf5 	bl	800c6e8 <_Balloc>
 800ccfe:	b920      	cbnz	r0, 800cd0a <__mdiff+0x5a>
 800cd00:	4b2d      	ldr	r3, [pc, #180]	; (800cdb8 <__mdiff+0x108>)
 800cd02:	4602      	mov	r2, r0
 800cd04:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cd08:	e7e6      	b.n	800ccd8 <__mdiff+0x28>
 800cd0a:	693e      	ldr	r6, [r7, #16]
 800cd0c:	60c5      	str	r5, [r0, #12]
 800cd0e:	6925      	ldr	r5, [r4, #16]
 800cd10:	f107 0114 	add.w	r1, r7, #20
 800cd14:	f104 0914 	add.w	r9, r4, #20
 800cd18:	f100 0e14 	add.w	lr, r0, #20
 800cd1c:	f107 0210 	add.w	r2, r7, #16
 800cd20:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cd24:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cd28:	46f2      	mov	sl, lr
 800cd2a:	2700      	movs	r7, #0
 800cd2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cd30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cd34:	fa1f f883 	uxth.w	r8, r3
 800cd38:	fa17 f78b 	uxtah	r7, r7, fp
 800cd3c:	0c1b      	lsrs	r3, r3, #16
 800cd3e:	eba7 0808 	sub.w	r8, r7, r8
 800cd42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cd46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cd4a:	fa1f f888 	uxth.w	r8, r8
 800cd4e:	141f      	asrs	r7, r3, #16
 800cd50:	454d      	cmp	r5, r9
 800cd52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cd56:	f84a 3b04 	str.w	r3, [sl], #4
 800cd5a:	d8e7      	bhi.n	800cd2c <__mdiff+0x7c>
 800cd5c:	1b2b      	subs	r3, r5, r4
 800cd5e:	3b15      	subs	r3, #21
 800cd60:	f023 0303 	bic.w	r3, r3, #3
 800cd64:	3304      	adds	r3, #4
 800cd66:	3415      	adds	r4, #21
 800cd68:	42a5      	cmp	r5, r4
 800cd6a:	bf38      	it	cc
 800cd6c:	2304      	movcc	r3, #4
 800cd6e:	4419      	add	r1, r3
 800cd70:	4473      	add	r3, lr
 800cd72:	469e      	mov	lr, r3
 800cd74:	460d      	mov	r5, r1
 800cd76:	4565      	cmp	r5, ip
 800cd78:	d30e      	bcc.n	800cd98 <__mdiff+0xe8>
 800cd7a:	f10c 0203 	add.w	r2, ip, #3
 800cd7e:	1a52      	subs	r2, r2, r1
 800cd80:	f022 0203 	bic.w	r2, r2, #3
 800cd84:	3903      	subs	r1, #3
 800cd86:	458c      	cmp	ip, r1
 800cd88:	bf38      	it	cc
 800cd8a:	2200      	movcc	r2, #0
 800cd8c:	441a      	add	r2, r3
 800cd8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cd92:	b17b      	cbz	r3, 800cdb4 <__mdiff+0x104>
 800cd94:	6106      	str	r6, [r0, #16]
 800cd96:	e7a5      	b.n	800cce4 <__mdiff+0x34>
 800cd98:	f855 8b04 	ldr.w	r8, [r5], #4
 800cd9c:	fa17 f488 	uxtah	r4, r7, r8
 800cda0:	1422      	asrs	r2, r4, #16
 800cda2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cda6:	b2a4      	uxth	r4, r4
 800cda8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cdac:	f84e 4b04 	str.w	r4, [lr], #4
 800cdb0:	1417      	asrs	r7, r2, #16
 800cdb2:	e7e0      	b.n	800cd76 <__mdiff+0xc6>
 800cdb4:	3e01      	subs	r6, #1
 800cdb6:	e7ea      	b.n	800cd8e <__mdiff+0xde>
 800cdb8:	0800e30c 	.word	0x0800e30c
 800cdbc:	0800e39c 	.word	0x0800e39c

0800cdc0 <__ulp>:
 800cdc0:	b082      	sub	sp, #8
 800cdc2:	ed8d 0b00 	vstr	d0, [sp]
 800cdc6:	9b01      	ldr	r3, [sp, #4]
 800cdc8:	4912      	ldr	r1, [pc, #72]	; (800ce14 <__ulp+0x54>)
 800cdca:	4019      	ands	r1, r3
 800cdcc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cdd0:	2900      	cmp	r1, #0
 800cdd2:	dd05      	ble.n	800cde0 <__ulp+0x20>
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	ec43 2b10 	vmov	d0, r2, r3
 800cddc:	b002      	add	sp, #8
 800cdde:	4770      	bx	lr
 800cde0:	4249      	negs	r1, r1
 800cde2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cde6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cdea:	f04f 0200 	mov.w	r2, #0
 800cdee:	f04f 0300 	mov.w	r3, #0
 800cdf2:	da04      	bge.n	800cdfe <__ulp+0x3e>
 800cdf4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cdf8:	fa41 f300 	asr.w	r3, r1, r0
 800cdfc:	e7ec      	b.n	800cdd8 <__ulp+0x18>
 800cdfe:	f1a0 0114 	sub.w	r1, r0, #20
 800ce02:	291e      	cmp	r1, #30
 800ce04:	bfda      	itte	le
 800ce06:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ce0a:	fa20 f101 	lsrle.w	r1, r0, r1
 800ce0e:	2101      	movgt	r1, #1
 800ce10:	460a      	mov	r2, r1
 800ce12:	e7e1      	b.n	800cdd8 <__ulp+0x18>
 800ce14:	7ff00000 	.word	0x7ff00000

0800ce18 <__b2d>:
 800ce18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1a:	6905      	ldr	r5, [r0, #16]
 800ce1c:	f100 0714 	add.w	r7, r0, #20
 800ce20:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ce24:	1f2e      	subs	r6, r5, #4
 800ce26:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	f7ff fd52 	bl	800c8d4 <__hi0bits>
 800ce30:	f1c0 0320 	rsb	r3, r0, #32
 800ce34:	280a      	cmp	r0, #10
 800ce36:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ceb4 <__b2d+0x9c>
 800ce3a:	600b      	str	r3, [r1, #0]
 800ce3c:	dc14      	bgt.n	800ce68 <__b2d+0x50>
 800ce3e:	f1c0 0e0b 	rsb	lr, r0, #11
 800ce42:	fa24 f10e 	lsr.w	r1, r4, lr
 800ce46:	42b7      	cmp	r7, r6
 800ce48:	ea41 030c 	orr.w	r3, r1, ip
 800ce4c:	bf34      	ite	cc
 800ce4e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ce52:	2100      	movcs	r1, #0
 800ce54:	3015      	adds	r0, #21
 800ce56:	fa04 f000 	lsl.w	r0, r4, r0
 800ce5a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ce5e:	ea40 0201 	orr.w	r2, r0, r1
 800ce62:	ec43 2b10 	vmov	d0, r2, r3
 800ce66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce68:	42b7      	cmp	r7, r6
 800ce6a:	bf3a      	itte	cc
 800ce6c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ce70:	f1a5 0608 	subcc.w	r6, r5, #8
 800ce74:	2100      	movcs	r1, #0
 800ce76:	380b      	subs	r0, #11
 800ce78:	d017      	beq.n	800ceaa <__b2d+0x92>
 800ce7a:	f1c0 0c20 	rsb	ip, r0, #32
 800ce7e:	fa04 f500 	lsl.w	r5, r4, r0
 800ce82:	42be      	cmp	r6, r7
 800ce84:	fa21 f40c 	lsr.w	r4, r1, ip
 800ce88:	ea45 0504 	orr.w	r5, r5, r4
 800ce8c:	bf8c      	ite	hi
 800ce8e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ce92:	2400      	movls	r4, #0
 800ce94:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ce98:	fa01 f000 	lsl.w	r0, r1, r0
 800ce9c:	fa24 f40c 	lsr.w	r4, r4, ip
 800cea0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cea4:	ea40 0204 	orr.w	r2, r0, r4
 800cea8:	e7db      	b.n	800ce62 <__b2d+0x4a>
 800ceaa:	ea44 030c 	orr.w	r3, r4, ip
 800ceae:	460a      	mov	r2, r1
 800ceb0:	e7d7      	b.n	800ce62 <__b2d+0x4a>
 800ceb2:	bf00      	nop
 800ceb4:	3ff00000 	.word	0x3ff00000

0800ceb8 <__d2b>:
 800ceb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cebc:	4689      	mov	r9, r1
 800cebe:	2101      	movs	r1, #1
 800cec0:	ec57 6b10 	vmov	r6, r7, d0
 800cec4:	4690      	mov	r8, r2
 800cec6:	f7ff fc0f 	bl	800c6e8 <_Balloc>
 800ceca:	4604      	mov	r4, r0
 800cecc:	b930      	cbnz	r0, 800cedc <__d2b+0x24>
 800cece:	4602      	mov	r2, r0
 800ced0:	4b25      	ldr	r3, [pc, #148]	; (800cf68 <__d2b+0xb0>)
 800ced2:	4826      	ldr	r0, [pc, #152]	; (800cf6c <__d2b+0xb4>)
 800ced4:	f240 310a 	movw	r1, #778	; 0x30a
 800ced8:	f000 fb0e 	bl	800d4f8 <__assert_func>
 800cedc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cee0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cee4:	bb35      	cbnz	r5, 800cf34 <__d2b+0x7c>
 800cee6:	2e00      	cmp	r6, #0
 800cee8:	9301      	str	r3, [sp, #4]
 800ceea:	d028      	beq.n	800cf3e <__d2b+0x86>
 800ceec:	4668      	mov	r0, sp
 800ceee:	9600      	str	r6, [sp, #0]
 800cef0:	f7ff fd10 	bl	800c914 <__lo0bits>
 800cef4:	9900      	ldr	r1, [sp, #0]
 800cef6:	b300      	cbz	r0, 800cf3a <__d2b+0x82>
 800cef8:	9a01      	ldr	r2, [sp, #4]
 800cefa:	f1c0 0320 	rsb	r3, r0, #32
 800cefe:	fa02 f303 	lsl.w	r3, r2, r3
 800cf02:	430b      	orrs	r3, r1
 800cf04:	40c2      	lsrs	r2, r0
 800cf06:	6163      	str	r3, [r4, #20]
 800cf08:	9201      	str	r2, [sp, #4]
 800cf0a:	9b01      	ldr	r3, [sp, #4]
 800cf0c:	61a3      	str	r3, [r4, #24]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	bf14      	ite	ne
 800cf12:	2202      	movne	r2, #2
 800cf14:	2201      	moveq	r2, #1
 800cf16:	6122      	str	r2, [r4, #16]
 800cf18:	b1d5      	cbz	r5, 800cf50 <__d2b+0x98>
 800cf1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cf1e:	4405      	add	r5, r0
 800cf20:	f8c9 5000 	str.w	r5, [r9]
 800cf24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cf28:	f8c8 0000 	str.w	r0, [r8]
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	b003      	add	sp, #12
 800cf30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf38:	e7d5      	b.n	800cee6 <__d2b+0x2e>
 800cf3a:	6161      	str	r1, [r4, #20]
 800cf3c:	e7e5      	b.n	800cf0a <__d2b+0x52>
 800cf3e:	a801      	add	r0, sp, #4
 800cf40:	f7ff fce8 	bl	800c914 <__lo0bits>
 800cf44:	9b01      	ldr	r3, [sp, #4]
 800cf46:	6163      	str	r3, [r4, #20]
 800cf48:	2201      	movs	r2, #1
 800cf4a:	6122      	str	r2, [r4, #16]
 800cf4c:	3020      	adds	r0, #32
 800cf4e:	e7e3      	b.n	800cf18 <__d2b+0x60>
 800cf50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cf54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cf58:	f8c9 0000 	str.w	r0, [r9]
 800cf5c:	6918      	ldr	r0, [r3, #16]
 800cf5e:	f7ff fcb9 	bl	800c8d4 <__hi0bits>
 800cf62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf66:	e7df      	b.n	800cf28 <__d2b+0x70>
 800cf68:	0800e30c 	.word	0x0800e30c
 800cf6c:	0800e39c 	.word	0x0800e39c

0800cf70 <__ratio>:
 800cf70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf74:	4688      	mov	r8, r1
 800cf76:	4669      	mov	r1, sp
 800cf78:	4681      	mov	r9, r0
 800cf7a:	f7ff ff4d 	bl	800ce18 <__b2d>
 800cf7e:	a901      	add	r1, sp, #4
 800cf80:	4640      	mov	r0, r8
 800cf82:	ec55 4b10 	vmov	r4, r5, d0
 800cf86:	f7ff ff47 	bl	800ce18 <__b2d>
 800cf8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cf92:	eba3 0c02 	sub.w	ip, r3, r2
 800cf96:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cf9a:	1a9b      	subs	r3, r3, r2
 800cf9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cfa0:	ec51 0b10 	vmov	r0, r1, d0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	bfd6      	itet	le
 800cfa8:	460a      	movle	r2, r1
 800cfaa:	462a      	movgt	r2, r5
 800cfac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cfb0:	468b      	mov	fp, r1
 800cfb2:	462f      	mov	r7, r5
 800cfb4:	bfd4      	ite	le
 800cfb6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cfba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	ee10 2a10 	vmov	r2, s0
 800cfc4:	465b      	mov	r3, fp
 800cfc6:	4639      	mov	r1, r7
 800cfc8:	f7f3 fc40 	bl	800084c <__aeabi_ddiv>
 800cfcc:	ec41 0b10 	vmov	d0, r0, r1
 800cfd0:	b003      	add	sp, #12
 800cfd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cfd6 <__copybits>:
 800cfd6:	3901      	subs	r1, #1
 800cfd8:	b570      	push	{r4, r5, r6, lr}
 800cfda:	1149      	asrs	r1, r1, #5
 800cfdc:	6914      	ldr	r4, [r2, #16]
 800cfde:	3101      	adds	r1, #1
 800cfe0:	f102 0314 	add.w	r3, r2, #20
 800cfe4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cfe8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cfec:	1f05      	subs	r5, r0, #4
 800cfee:	42a3      	cmp	r3, r4
 800cff0:	d30c      	bcc.n	800d00c <__copybits+0x36>
 800cff2:	1aa3      	subs	r3, r4, r2
 800cff4:	3b11      	subs	r3, #17
 800cff6:	f023 0303 	bic.w	r3, r3, #3
 800cffa:	3211      	adds	r2, #17
 800cffc:	42a2      	cmp	r2, r4
 800cffe:	bf88      	it	hi
 800d000:	2300      	movhi	r3, #0
 800d002:	4418      	add	r0, r3
 800d004:	2300      	movs	r3, #0
 800d006:	4288      	cmp	r0, r1
 800d008:	d305      	bcc.n	800d016 <__copybits+0x40>
 800d00a:	bd70      	pop	{r4, r5, r6, pc}
 800d00c:	f853 6b04 	ldr.w	r6, [r3], #4
 800d010:	f845 6f04 	str.w	r6, [r5, #4]!
 800d014:	e7eb      	b.n	800cfee <__copybits+0x18>
 800d016:	f840 3b04 	str.w	r3, [r0], #4
 800d01a:	e7f4      	b.n	800d006 <__copybits+0x30>

0800d01c <__any_on>:
 800d01c:	f100 0214 	add.w	r2, r0, #20
 800d020:	6900      	ldr	r0, [r0, #16]
 800d022:	114b      	asrs	r3, r1, #5
 800d024:	4298      	cmp	r0, r3
 800d026:	b510      	push	{r4, lr}
 800d028:	db11      	blt.n	800d04e <__any_on+0x32>
 800d02a:	dd0a      	ble.n	800d042 <__any_on+0x26>
 800d02c:	f011 011f 	ands.w	r1, r1, #31
 800d030:	d007      	beq.n	800d042 <__any_on+0x26>
 800d032:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d036:	fa24 f001 	lsr.w	r0, r4, r1
 800d03a:	fa00 f101 	lsl.w	r1, r0, r1
 800d03e:	428c      	cmp	r4, r1
 800d040:	d10b      	bne.n	800d05a <__any_on+0x3e>
 800d042:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d046:	4293      	cmp	r3, r2
 800d048:	d803      	bhi.n	800d052 <__any_on+0x36>
 800d04a:	2000      	movs	r0, #0
 800d04c:	bd10      	pop	{r4, pc}
 800d04e:	4603      	mov	r3, r0
 800d050:	e7f7      	b.n	800d042 <__any_on+0x26>
 800d052:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d056:	2900      	cmp	r1, #0
 800d058:	d0f5      	beq.n	800d046 <__any_on+0x2a>
 800d05a:	2001      	movs	r0, #1
 800d05c:	e7f6      	b.n	800d04c <__any_on+0x30>

0800d05e <_calloc_r>:
 800d05e:	b513      	push	{r0, r1, r4, lr}
 800d060:	434a      	muls	r2, r1
 800d062:	4611      	mov	r1, r2
 800d064:	9201      	str	r2, [sp, #4]
 800d066:	f000 f859 	bl	800d11c <_malloc_r>
 800d06a:	4604      	mov	r4, r0
 800d06c:	b118      	cbz	r0, 800d076 <_calloc_r+0x18>
 800d06e:	9a01      	ldr	r2, [sp, #4]
 800d070:	2100      	movs	r1, #0
 800d072:	f7fc fb95 	bl	80097a0 <memset>
 800d076:	4620      	mov	r0, r4
 800d078:	b002      	add	sp, #8
 800d07a:	bd10      	pop	{r4, pc}

0800d07c <_free_r>:
 800d07c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d07e:	2900      	cmp	r1, #0
 800d080:	d048      	beq.n	800d114 <_free_r+0x98>
 800d082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d086:	9001      	str	r0, [sp, #4]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	f1a1 0404 	sub.w	r4, r1, #4
 800d08e:	bfb8      	it	lt
 800d090:	18e4      	addlt	r4, r4, r3
 800d092:	f000 fa7b 	bl	800d58c <__malloc_lock>
 800d096:	4a20      	ldr	r2, [pc, #128]	; (800d118 <_free_r+0x9c>)
 800d098:	9801      	ldr	r0, [sp, #4]
 800d09a:	6813      	ldr	r3, [r2, #0]
 800d09c:	4615      	mov	r5, r2
 800d09e:	b933      	cbnz	r3, 800d0ae <_free_r+0x32>
 800d0a0:	6063      	str	r3, [r4, #4]
 800d0a2:	6014      	str	r4, [r2, #0]
 800d0a4:	b003      	add	sp, #12
 800d0a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0aa:	f000 ba75 	b.w	800d598 <__malloc_unlock>
 800d0ae:	42a3      	cmp	r3, r4
 800d0b0:	d90b      	bls.n	800d0ca <_free_r+0x4e>
 800d0b2:	6821      	ldr	r1, [r4, #0]
 800d0b4:	1862      	adds	r2, r4, r1
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	bf04      	itt	eq
 800d0ba:	681a      	ldreq	r2, [r3, #0]
 800d0bc:	685b      	ldreq	r3, [r3, #4]
 800d0be:	6063      	str	r3, [r4, #4]
 800d0c0:	bf04      	itt	eq
 800d0c2:	1852      	addeq	r2, r2, r1
 800d0c4:	6022      	streq	r2, [r4, #0]
 800d0c6:	602c      	str	r4, [r5, #0]
 800d0c8:	e7ec      	b.n	800d0a4 <_free_r+0x28>
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	b10b      	cbz	r3, 800d0d4 <_free_r+0x58>
 800d0d0:	42a3      	cmp	r3, r4
 800d0d2:	d9fa      	bls.n	800d0ca <_free_r+0x4e>
 800d0d4:	6811      	ldr	r1, [r2, #0]
 800d0d6:	1855      	adds	r5, r2, r1
 800d0d8:	42a5      	cmp	r5, r4
 800d0da:	d10b      	bne.n	800d0f4 <_free_r+0x78>
 800d0dc:	6824      	ldr	r4, [r4, #0]
 800d0de:	4421      	add	r1, r4
 800d0e0:	1854      	adds	r4, r2, r1
 800d0e2:	42a3      	cmp	r3, r4
 800d0e4:	6011      	str	r1, [r2, #0]
 800d0e6:	d1dd      	bne.n	800d0a4 <_free_r+0x28>
 800d0e8:	681c      	ldr	r4, [r3, #0]
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	6053      	str	r3, [r2, #4]
 800d0ee:	4421      	add	r1, r4
 800d0f0:	6011      	str	r1, [r2, #0]
 800d0f2:	e7d7      	b.n	800d0a4 <_free_r+0x28>
 800d0f4:	d902      	bls.n	800d0fc <_free_r+0x80>
 800d0f6:	230c      	movs	r3, #12
 800d0f8:	6003      	str	r3, [r0, #0]
 800d0fa:	e7d3      	b.n	800d0a4 <_free_r+0x28>
 800d0fc:	6825      	ldr	r5, [r4, #0]
 800d0fe:	1961      	adds	r1, r4, r5
 800d100:	428b      	cmp	r3, r1
 800d102:	bf04      	itt	eq
 800d104:	6819      	ldreq	r1, [r3, #0]
 800d106:	685b      	ldreq	r3, [r3, #4]
 800d108:	6063      	str	r3, [r4, #4]
 800d10a:	bf04      	itt	eq
 800d10c:	1949      	addeq	r1, r1, r5
 800d10e:	6021      	streq	r1, [r4, #0]
 800d110:	6054      	str	r4, [r2, #4]
 800d112:	e7c7      	b.n	800d0a4 <_free_r+0x28>
 800d114:	b003      	add	sp, #12
 800d116:	bd30      	pop	{r4, r5, pc}
 800d118:	2000059c 	.word	0x2000059c

0800d11c <_malloc_r>:
 800d11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d11e:	1ccd      	adds	r5, r1, #3
 800d120:	f025 0503 	bic.w	r5, r5, #3
 800d124:	3508      	adds	r5, #8
 800d126:	2d0c      	cmp	r5, #12
 800d128:	bf38      	it	cc
 800d12a:	250c      	movcc	r5, #12
 800d12c:	2d00      	cmp	r5, #0
 800d12e:	4606      	mov	r6, r0
 800d130:	db01      	blt.n	800d136 <_malloc_r+0x1a>
 800d132:	42a9      	cmp	r1, r5
 800d134:	d903      	bls.n	800d13e <_malloc_r+0x22>
 800d136:	230c      	movs	r3, #12
 800d138:	6033      	str	r3, [r6, #0]
 800d13a:	2000      	movs	r0, #0
 800d13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d13e:	f000 fa25 	bl	800d58c <__malloc_lock>
 800d142:	4921      	ldr	r1, [pc, #132]	; (800d1c8 <_malloc_r+0xac>)
 800d144:	680a      	ldr	r2, [r1, #0]
 800d146:	4614      	mov	r4, r2
 800d148:	b99c      	cbnz	r4, 800d172 <_malloc_r+0x56>
 800d14a:	4f20      	ldr	r7, [pc, #128]	; (800d1cc <_malloc_r+0xb0>)
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	b923      	cbnz	r3, 800d15a <_malloc_r+0x3e>
 800d150:	4621      	mov	r1, r4
 800d152:	4630      	mov	r0, r6
 800d154:	f000 f9a0 	bl	800d498 <_sbrk_r>
 800d158:	6038      	str	r0, [r7, #0]
 800d15a:	4629      	mov	r1, r5
 800d15c:	4630      	mov	r0, r6
 800d15e:	f000 f99b 	bl	800d498 <_sbrk_r>
 800d162:	1c43      	adds	r3, r0, #1
 800d164:	d123      	bne.n	800d1ae <_malloc_r+0x92>
 800d166:	230c      	movs	r3, #12
 800d168:	6033      	str	r3, [r6, #0]
 800d16a:	4630      	mov	r0, r6
 800d16c:	f000 fa14 	bl	800d598 <__malloc_unlock>
 800d170:	e7e3      	b.n	800d13a <_malloc_r+0x1e>
 800d172:	6823      	ldr	r3, [r4, #0]
 800d174:	1b5b      	subs	r3, r3, r5
 800d176:	d417      	bmi.n	800d1a8 <_malloc_r+0x8c>
 800d178:	2b0b      	cmp	r3, #11
 800d17a:	d903      	bls.n	800d184 <_malloc_r+0x68>
 800d17c:	6023      	str	r3, [r4, #0]
 800d17e:	441c      	add	r4, r3
 800d180:	6025      	str	r5, [r4, #0]
 800d182:	e004      	b.n	800d18e <_malloc_r+0x72>
 800d184:	6863      	ldr	r3, [r4, #4]
 800d186:	42a2      	cmp	r2, r4
 800d188:	bf0c      	ite	eq
 800d18a:	600b      	streq	r3, [r1, #0]
 800d18c:	6053      	strne	r3, [r2, #4]
 800d18e:	4630      	mov	r0, r6
 800d190:	f000 fa02 	bl	800d598 <__malloc_unlock>
 800d194:	f104 000b 	add.w	r0, r4, #11
 800d198:	1d23      	adds	r3, r4, #4
 800d19a:	f020 0007 	bic.w	r0, r0, #7
 800d19e:	1ac2      	subs	r2, r0, r3
 800d1a0:	d0cc      	beq.n	800d13c <_malloc_r+0x20>
 800d1a2:	1a1b      	subs	r3, r3, r0
 800d1a4:	50a3      	str	r3, [r4, r2]
 800d1a6:	e7c9      	b.n	800d13c <_malloc_r+0x20>
 800d1a8:	4622      	mov	r2, r4
 800d1aa:	6864      	ldr	r4, [r4, #4]
 800d1ac:	e7cc      	b.n	800d148 <_malloc_r+0x2c>
 800d1ae:	1cc4      	adds	r4, r0, #3
 800d1b0:	f024 0403 	bic.w	r4, r4, #3
 800d1b4:	42a0      	cmp	r0, r4
 800d1b6:	d0e3      	beq.n	800d180 <_malloc_r+0x64>
 800d1b8:	1a21      	subs	r1, r4, r0
 800d1ba:	4630      	mov	r0, r6
 800d1bc:	f000 f96c 	bl	800d498 <_sbrk_r>
 800d1c0:	3001      	adds	r0, #1
 800d1c2:	d1dd      	bne.n	800d180 <_malloc_r+0x64>
 800d1c4:	e7cf      	b.n	800d166 <_malloc_r+0x4a>
 800d1c6:	bf00      	nop
 800d1c8:	2000059c 	.word	0x2000059c
 800d1cc:	200005a0 	.word	0x200005a0

0800d1d0 <__ssputs_r>:
 800d1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1d4:	688e      	ldr	r6, [r1, #8]
 800d1d6:	429e      	cmp	r6, r3
 800d1d8:	4682      	mov	sl, r0
 800d1da:	460c      	mov	r4, r1
 800d1dc:	4690      	mov	r8, r2
 800d1de:	461f      	mov	r7, r3
 800d1e0:	d838      	bhi.n	800d254 <__ssputs_r+0x84>
 800d1e2:	898a      	ldrh	r2, [r1, #12]
 800d1e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d1e8:	d032      	beq.n	800d250 <__ssputs_r+0x80>
 800d1ea:	6825      	ldr	r5, [r4, #0]
 800d1ec:	6909      	ldr	r1, [r1, #16]
 800d1ee:	eba5 0901 	sub.w	r9, r5, r1
 800d1f2:	6965      	ldr	r5, [r4, #20]
 800d1f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	444b      	add	r3, r9
 800d200:	106d      	asrs	r5, r5, #1
 800d202:	429d      	cmp	r5, r3
 800d204:	bf38      	it	cc
 800d206:	461d      	movcc	r5, r3
 800d208:	0553      	lsls	r3, r2, #21
 800d20a:	d531      	bpl.n	800d270 <__ssputs_r+0xa0>
 800d20c:	4629      	mov	r1, r5
 800d20e:	f7ff ff85 	bl	800d11c <_malloc_r>
 800d212:	4606      	mov	r6, r0
 800d214:	b950      	cbnz	r0, 800d22c <__ssputs_r+0x5c>
 800d216:	230c      	movs	r3, #12
 800d218:	f8ca 3000 	str.w	r3, [sl]
 800d21c:	89a3      	ldrh	r3, [r4, #12]
 800d21e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d222:	81a3      	strh	r3, [r4, #12]
 800d224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d22c:	6921      	ldr	r1, [r4, #16]
 800d22e:	464a      	mov	r2, r9
 800d230:	f7ff fa4c 	bl	800c6cc <memcpy>
 800d234:	89a3      	ldrh	r3, [r4, #12]
 800d236:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d23a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d23e:	81a3      	strh	r3, [r4, #12]
 800d240:	6126      	str	r6, [r4, #16]
 800d242:	6165      	str	r5, [r4, #20]
 800d244:	444e      	add	r6, r9
 800d246:	eba5 0509 	sub.w	r5, r5, r9
 800d24a:	6026      	str	r6, [r4, #0]
 800d24c:	60a5      	str	r5, [r4, #8]
 800d24e:	463e      	mov	r6, r7
 800d250:	42be      	cmp	r6, r7
 800d252:	d900      	bls.n	800d256 <__ssputs_r+0x86>
 800d254:	463e      	mov	r6, r7
 800d256:	4632      	mov	r2, r6
 800d258:	6820      	ldr	r0, [r4, #0]
 800d25a:	4641      	mov	r1, r8
 800d25c:	f000 f97c 	bl	800d558 <memmove>
 800d260:	68a3      	ldr	r3, [r4, #8]
 800d262:	6822      	ldr	r2, [r4, #0]
 800d264:	1b9b      	subs	r3, r3, r6
 800d266:	4432      	add	r2, r6
 800d268:	60a3      	str	r3, [r4, #8]
 800d26a:	6022      	str	r2, [r4, #0]
 800d26c:	2000      	movs	r0, #0
 800d26e:	e7db      	b.n	800d228 <__ssputs_r+0x58>
 800d270:	462a      	mov	r2, r5
 800d272:	f000 f997 	bl	800d5a4 <_realloc_r>
 800d276:	4606      	mov	r6, r0
 800d278:	2800      	cmp	r0, #0
 800d27a:	d1e1      	bne.n	800d240 <__ssputs_r+0x70>
 800d27c:	6921      	ldr	r1, [r4, #16]
 800d27e:	4650      	mov	r0, sl
 800d280:	f7ff fefc 	bl	800d07c <_free_r>
 800d284:	e7c7      	b.n	800d216 <__ssputs_r+0x46>
	...

0800d288 <_svfiprintf_r>:
 800d288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d28c:	4698      	mov	r8, r3
 800d28e:	898b      	ldrh	r3, [r1, #12]
 800d290:	061b      	lsls	r3, r3, #24
 800d292:	b09d      	sub	sp, #116	; 0x74
 800d294:	4607      	mov	r7, r0
 800d296:	460d      	mov	r5, r1
 800d298:	4614      	mov	r4, r2
 800d29a:	d50e      	bpl.n	800d2ba <_svfiprintf_r+0x32>
 800d29c:	690b      	ldr	r3, [r1, #16]
 800d29e:	b963      	cbnz	r3, 800d2ba <_svfiprintf_r+0x32>
 800d2a0:	2140      	movs	r1, #64	; 0x40
 800d2a2:	f7ff ff3b 	bl	800d11c <_malloc_r>
 800d2a6:	6028      	str	r0, [r5, #0]
 800d2a8:	6128      	str	r0, [r5, #16]
 800d2aa:	b920      	cbnz	r0, 800d2b6 <_svfiprintf_r+0x2e>
 800d2ac:	230c      	movs	r3, #12
 800d2ae:	603b      	str	r3, [r7, #0]
 800d2b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2b4:	e0d1      	b.n	800d45a <_svfiprintf_r+0x1d2>
 800d2b6:	2340      	movs	r3, #64	; 0x40
 800d2b8:	616b      	str	r3, [r5, #20]
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	9309      	str	r3, [sp, #36]	; 0x24
 800d2be:	2320      	movs	r3, #32
 800d2c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2c8:	2330      	movs	r3, #48	; 0x30
 800d2ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d474 <_svfiprintf_r+0x1ec>
 800d2ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2d2:	f04f 0901 	mov.w	r9, #1
 800d2d6:	4623      	mov	r3, r4
 800d2d8:	469a      	mov	sl, r3
 800d2da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2de:	b10a      	cbz	r2, 800d2e4 <_svfiprintf_r+0x5c>
 800d2e0:	2a25      	cmp	r2, #37	; 0x25
 800d2e2:	d1f9      	bne.n	800d2d8 <_svfiprintf_r+0x50>
 800d2e4:	ebba 0b04 	subs.w	fp, sl, r4
 800d2e8:	d00b      	beq.n	800d302 <_svfiprintf_r+0x7a>
 800d2ea:	465b      	mov	r3, fp
 800d2ec:	4622      	mov	r2, r4
 800d2ee:	4629      	mov	r1, r5
 800d2f0:	4638      	mov	r0, r7
 800d2f2:	f7ff ff6d 	bl	800d1d0 <__ssputs_r>
 800d2f6:	3001      	adds	r0, #1
 800d2f8:	f000 80aa 	beq.w	800d450 <_svfiprintf_r+0x1c8>
 800d2fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2fe:	445a      	add	r2, fp
 800d300:	9209      	str	r2, [sp, #36]	; 0x24
 800d302:	f89a 3000 	ldrb.w	r3, [sl]
 800d306:	2b00      	cmp	r3, #0
 800d308:	f000 80a2 	beq.w	800d450 <_svfiprintf_r+0x1c8>
 800d30c:	2300      	movs	r3, #0
 800d30e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d316:	f10a 0a01 	add.w	sl, sl, #1
 800d31a:	9304      	str	r3, [sp, #16]
 800d31c:	9307      	str	r3, [sp, #28]
 800d31e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d322:	931a      	str	r3, [sp, #104]	; 0x68
 800d324:	4654      	mov	r4, sl
 800d326:	2205      	movs	r2, #5
 800d328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d32c:	4851      	ldr	r0, [pc, #324]	; (800d474 <_svfiprintf_r+0x1ec>)
 800d32e:	f7f2 ff57 	bl	80001e0 <memchr>
 800d332:	9a04      	ldr	r2, [sp, #16]
 800d334:	b9d8      	cbnz	r0, 800d36e <_svfiprintf_r+0xe6>
 800d336:	06d0      	lsls	r0, r2, #27
 800d338:	bf44      	itt	mi
 800d33a:	2320      	movmi	r3, #32
 800d33c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d340:	0711      	lsls	r1, r2, #28
 800d342:	bf44      	itt	mi
 800d344:	232b      	movmi	r3, #43	; 0x2b
 800d346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d34a:	f89a 3000 	ldrb.w	r3, [sl]
 800d34e:	2b2a      	cmp	r3, #42	; 0x2a
 800d350:	d015      	beq.n	800d37e <_svfiprintf_r+0xf6>
 800d352:	9a07      	ldr	r2, [sp, #28]
 800d354:	4654      	mov	r4, sl
 800d356:	2000      	movs	r0, #0
 800d358:	f04f 0c0a 	mov.w	ip, #10
 800d35c:	4621      	mov	r1, r4
 800d35e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d362:	3b30      	subs	r3, #48	; 0x30
 800d364:	2b09      	cmp	r3, #9
 800d366:	d94e      	bls.n	800d406 <_svfiprintf_r+0x17e>
 800d368:	b1b0      	cbz	r0, 800d398 <_svfiprintf_r+0x110>
 800d36a:	9207      	str	r2, [sp, #28]
 800d36c:	e014      	b.n	800d398 <_svfiprintf_r+0x110>
 800d36e:	eba0 0308 	sub.w	r3, r0, r8
 800d372:	fa09 f303 	lsl.w	r3, r9, r3
 800d376:	4313      	orrs	r3, r2
 800d378:	9304      	str	r3, [sp, #16]
 800d37a:	46a2      	mov	sl, r4
 800d37c:	e7d2      	b.n	800d324 <_svfiprintf_r+0x9c>
 800d37e:	9b03      	ldr	r3, [sp, #12]
 800d380:	1d19      	adds	r1, r3, #4
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	9103      	str	r1, [sp, #12]
 800d386:	2b00      	cmp	r3, #0
 800d388:	bfbb      	ittet	lt
 800d38a:	425b      	neglt	r3, r3
 800d38c:	f042 0202 	orrlt.w	r2, r2, #2
 800d390:	9307      	strge	r3, [sp, #28]
 800d392:	9307      	strlt	r3, [sp, #28]
 800d394:	bfb8      	it	lt
 800d396:	9204      	strlt	r2, [sp, #16]
 800d398:	7823      	ldrb	r3, [r4, #0]
 800d39a:	2b2e      	cmp	r3, #46	; 0x2e
 800d39c:	d10c      	bne.n	800d3b8 <_svfiprintf_r+0x130>
 800d39e:	7863      	ldrb	r3, [r4, #1]
 800d3a0:	2b2a      	cmp	r3, #42	; 0x2a
 800d3a2:	d135      	bne.n	800d410 <_svfiprintf_r+0x188>
 800d3a4:	9b03      	ldr	r3, [sp, #12]
 800d3a6:	1d1a      	adds	r2, r3, #4
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	9203      	str	r2, [sp, #12]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	bfb8      	it	lt
 800d3b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d3b4:	3402      	adds	r4, #2
 800d3b6:	9305      	str	r3, [sp, #20]
 800d3b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d484 <_svfiprintf_r+0x1fc>
 800d3bc:	7821      	ldrb	r1, [r4, #0]
 800d3be:	2203      	movs	r2, #3
 800d3c0:	4650      	mov	r0, sl
 800d3c2:	f7f2 ff0d 	bl	80001e0 <memchr>
 800d3c6:	b140      	cbz	r0, 800d3da <_svfiprintf_r+0x152>
 800d3c8:	2340      	movs	r3, #64	; 0x40
 800d3ca:	eba0 000a 	sub.w	r0, r0, sl
 800d3ce:	fa03 f000 	lsl.w	r0, r3, r0
 800d3d2:	9b04      	ldr	r3, [sp, #16]
 800d3d4:	4303      	orrs	r3, r0
 800d3d6:	3401      	adds	r4, #1
 800d3d8:	9304      	str	r3, [sp, #16]
 800d3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3de:	4826      	ldr	r0, [pc, #152]	; (800d478 <_svfiprintf_r+0x1f0>)
 800d3e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3e4:	2206      	movs	r2, #6
 800d3e6:	f7f2 fefb 	bl	80001e0 <memchr>
 800d3ea:	2800      	cmp	r0, #0
 800d3ec:	d038      	beq.n	800d460 <_svfiprintf_r+0x1d8>
 800d3ee:	4b23      	ldr	r3, [pc, #140]	; (800d47c <_svfiprintf_r+0x1f4>)
 800d3f0:	bb1b      	cbnz	r3, 800d43a <_svfiprintf_r+0x1b2>
 800d3f2:	9b03      	ldr	r3, [sp, #12]
 800d3f4:	3307      	adds	r3, #7
 800d3f6:	f023 0307 	bic.w	r3, r3, #7
 800d3fa:	3308      	adds	r3, #8
 800d3fc:	9303      	str	r3, [sp, #12]
 800d3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d400:	4433      	add	r3, r6
 800d402:	9309      	str	r3, [sp, #36]	; 0x24
 800d404:	e767      	b.n	800d2d6 <_svfiprintf_r+0x4e>
 800d406:	fb0c 3202 	mla	r2, ip, r2, r3
 800d40a:	460c      	mov	r4, r1
 800d40c:	2001      	movs	r0, #1
 800d40e:	e7a5      	b.n	800d35c <_svfiprintf_r+0xd4>
 800d410:	2300      	movs	r3, #0
 800d412:	3401      	adds	r4, #1
 800d414:	9305      	str	r3, [sp, #20]
 800d416:	4619      	mov	r1, r3
 800d418:	f04f 0c0a 	mov.w	ip, #10
 800d41c:	4620      	mov	r0, r4
 800d41e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d422:	3a30      	subs	r2, #48	; 0x30
 800d424:	2a09      	cmp	r2, #9
 800d426:	d903      	bls.n	800d430 <_svfiprintf_r+0x1a8>
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d0c5      	beq.n	800d3b8 <_svfiprintf_r+0x130>
 800d42c:	9105      	str	r1, [sp, #20]
 800d42e:	e7c3      	b.n	800d3b8 <_svfiprintf_r+0x130>
 800d430:	fb0c 2101 	mla	r1, ip, r1, r2
 800d434:	4604      	mov	r4, r0
 800d436:	2301      	movs	r3, #1
 800d438:	e7f0      	b.n	800d41c <_svfiprintf_r+0x194>
 800d43a:	ab03      	add	r3, sp, #12
 800d43c:	9300      	str	r3, [sp, #0]
 800d43e:	462a      	mov	r2, r5
 800d440:	4b0f      	ldr	r3, [pc, #60]	; (800d480 <_svfiprintf_r+0x1f8>)
 800d442:	a904      	add	r1, sp, #16
 800d444:	4638      	mov	r0, r7
 800d446:	f7fc fa53 	bl	80098f0 <_printf_float>
 800d44a:	1c42      	adds	r2, r0, #1
 800d44c:	4606      	mov	r6, r0
 800d44e:	d1d6      	bne.n	800d3fe <_svfiprintf_r+0x176>
 800d450:	89ab      	ldrh	r3, [r5, #12]
 800d452:	065b      	lsls	r3, r3, #25
 800d454:	f53f af2c 	bmi.w	800d2b0 <_svfiprintf_r+0x28>
 800d458:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d45a:	b01d      	add	sp, #116	; 0x74
 800d45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d460:	ab03      	add	r3, sp, #12
 800d462:	9300      	str	r3, [sp, #0]
 800d464:	462a      	mov	r2, r5
 800d466:	4b06      	ldr	r3, [pc, #24]	; (800d480 <_svfiprintf_r+0x1f8>)
 800d468:	a904      	add	r1, sp, #16
 800d46a:	4638      	mov	r0, r7
 800d46c:	f7fc fce4 	bl	8009e38 <_printf_i>
 800d470:	e7eb      	b.n	800d44a <_svfiprintf_r+0x1c2>
 800d472:	bf00      	nop
 800d474:	0800e4fc 	.word	0x0800e4fc
 800d478:	0800e506 	.word	0x0800e506
 800d47c:	080098f1 	.word	0x080098f1
 800d480:	0800d1d1 	.word	0x0800d1d1
 800d484:	0800e502 	.word	0x0800e502

0800d488 <nan>:
 800d488:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d490 <nan+0x8>
 800d48c:	4770      	bx	lr
 800d48e:	bf00      	nop
 800d490:	00000000 	.word	0x00000000
 800d494:	7ff80000 	.word	0x7ff80000

0800d498 <_sbrk_r>:
 800d498:	b538      	push	{r3, r4, r5, lr}
 800d49a:	4d06      	ldr	r5, [pc, #24]	; (800d4b4 <_sbrk_r+0x1c>)
 800d49c:	2300      	movs	r3, #0
 800d49e:	4604      	mov	r4, r0
 800d4a0:	4608      	mov	r0, r1
 800d4a2:	602b      	str	r3, [r5, #0]
 800d4a4:	f7f4 fb20 	bl	8001ae8 <_sbrk>
 800d4a8:	1c43      	adds	r3, r0, #1
 800d4aa:	d102      	bne.n	800d4b2 <_sbrk_r+0x1a>
 800d4ac:	682b      	ldr	r3, [r5, #0]
 800d4ae:	b103      	cbz	r3, 800d4b2 <_sbrk_r+0x1a>
 800d4b0:	6023      	str	r3, [r4, #0]
 800d4b2:	bd38      	pop	{r3, r4, r5, pc}
 800d4b4:	2000201c 	.word	0x2000201c

0800d4b8 <strncmp>:
 800d4b8:	b510      	push	{r4, lr}
 800d4ba:	b16a      	cbz	r2, 800d4d8 <strncmp+0x20>
 800d4bc:	3901      	subs	r1, #1
 800d4be:	1884      	adds	r4, r0, r2
 800d4c0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d4c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	d103      	bne.n	800d4d4 <strncmp+0x1c>
 800d4cc:	42a0      	cmp	r0, r4
 800d4ce:	d001      	beq.n	800d4d4 <strncmp+0x1c>
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d1f5      	bne.n	800d4c0 <strncmp+0x8>
 800d4d4:	1a98      	subs	r0, r3, r2
 800d4d6:	bd10      	pop	{r4, pc}
 800d4d8:	4610      	mov	r0, r2
 800d4da:	e7fc      	b.n	800d4d6 <strncmp+0x1e>

0800d4dc <__ascii_wctomb>:
 800d4dc:	b149      	cbz	r1, 800d4f2 <__ascii_wctomb+0x16>
 800d4de:	2aff      	cmp	r2, #255	; 0xff
 800d4e0:	bf85      	ittet	hi
 800d4e2:	238a      	movhi	r3, #138	; 0x8a
 800d4e4:	6003      	strhi	r3, [r0, #0]
 800d4e6:	700a      	strbls	r2, [r1, #0]
 800d4e8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d4ec:	bf98      	it	ls
 800d4ee:	2001      	movls	r0, #1
 800d4f0:	4770      	bx	lr
 800d4f2:	4608      	mov	r0, r1
 800d4f4:	4770      	bx	lr
	...

0800d4f8 <__assert_func>:
 800d4f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4fa:	4614      	mov	r4, r2
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	4b09      	ldr	r3, [pc, #36]	; (800d524 <__assert_func+0x2c>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	4605      	mov	r5, r0
 800d504:	68d8      	ldr	r0, [r3, #12]
 800d506:	b14c      	cbz	r4, 800d51c <__assert_func+0x24>
 800d508:	4b07      	ldr	r3, [pc, #28]	; (800d528 <__assert_func+0x30>)
 800d50a:	9100      	str	r1, [sp, #0]
 800d50c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d510:	4906      	ldr	r1, [pc, #24]	; (800d52c <__assert_func+0x34>)
 800d512:	462b      	mov	r3, r5
 800d514:	f000 f80e 	bl	800d534 <fiprintf>
 800d518:	f000 fa84 	bl	800da24 <abort>
 800d51c:	4b04      	ldr	r3, [pc, #16]	; (800d530 <__assert_func+0x38>)
 800d51e:	461c      	mov	r4, r3
 800d520:	e7f3      	b.n	800d50a <__assert_func+0x12>
 800d522:	bf00      	nop
 800d524:	20000180 	.word	0x20000180
 800d528:	0800e50d 	.word	0x0800e50d
 800d52c:	0800e51a 	.word	0x0800e51a
 800d530:	0800e548 	.word	0x0800e548

0800d534 <fiprintf>:
 800d534:	b40e      	push	{r1, r2, r3}
 800d536:	b503      	push	{r0, r1, lr}
 800d538:	4601      	mov	r1, r0
 800d53a:	ab03      	add	r3, sp, #12
 800d53c:	4805      	ldr	r0, [pc, #20]	; (800d554 <fiprintf+0x20>)
 800d53e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d542:	6800      	ldr	r0, [r0, #0]
 800d544:	9301      	str	r3, [sp, #4]
 800d546:	f000 f87d 	bl	800d644 <_vfiprintf_r>
 800d54a:	b002      	add	sp, #8
 800d54c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d550:	b003      	add	sp, #12
 800d552:	4770      	bx	lr
 800d554:	20000180 	.word	0x20000180

0800d558 <memmove>:
 800d558:	4288      	cmp	r0, r1
 800d55a:	b510      	push	{r4, lr}
 800d55c:	eb01 0402 	add.w	r4, r1, r2
 800d560:	d902      	bls.n	800d568 <memmove+0x10>
 800d562:	4284      	cmp	r4, r0
 800d564:	4623      	mov	r3, r4
 800d566:	d807      	bhi.n	800d578 <memmove+0x20>
 800d568:	1e43      	subs	r3, r0, #1
 800d56a:	42a1      	cmp	r1, r4
 800d56c:	d008      	beq.n	800d580 <memmove+0x28>
 800d56e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d572:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d576:	e7f8      	b.n	800d56a <memmove+0x12>
 800d578:	4402      	add	r2, r0
 800d57a:	4601      	mov	r1, r0
 800d57c:	428a      	cmp	r2, r1
 800d57e:	d100      	bne.n	800d582 <memmove+0x2a>
 800d580:	bd10      	pop	{r4, pc}
 800d582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d586:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d58a:	e7f7      	b.n	800d57c <memmove+0x24>

0800d58c <__malloc_lock>:
 800d58c:	4801      	ldr	r0, [pc, #4]	; (800d594 <__malloc_lock+0x8>)
 800d58e:	f000 bc09 	b.w	800dda4 <__retarget_lock_acquire_recursive>
 800d592:	bf00      	nop
 800d594:	20002024 	.word	0x20002024

0800d598 <__malloc_unlock>:
 800d598:	4801      	ldr	r0, [pc, #4]	; (800d5a0 <__malloc_unlock+0x8>)
 800d59a:	f000 bc04 	b.w	800dda6 <__retarget_lock_release_recursive>
 800d59e:	bf00      	nop
 800d5a0:	20002024 	.word	0x20002024

0800d5a4 <_realloc_r>:
 800d5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5a6:	4607      	mov	r7, r0
 800d5a8:	4614      	mov	r4, r2
 800d5aa:	460e      	mov	r6, r1
 800d5ac:	b921      	cbnz	r1, 800d5b8 <_realloc_r+0x14>
 800d5ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d5b2:	4611      	mov	r1, r2
 800d5b4:	f7ff bdb2 	b.w	800d11c <_malloc_r>
 800d5b8:	b922      	cbnz	r2, 800d5c4 <_realloc_r+0x20>
 800d5ba:	f7ff fd5f 	bl	800d07c <_free_r>
 800d5be:	4625      	mov	r5, r4
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5c4:	f000 fc54 	bl	800de70 <_malloc_usable_size_r>
 800d5c8:	42a0      	cmp	r0, r4
 800d5ca:	d20f      	bcs.n	800d5ec <_realloc_r+0x48>
 800d5cc:	4621      	mov	r1, r4
 800d5ce:	4638      	mov	r0, r7
 800d5d0:	f7ff fda4 	bl	800d11c <_malloc_r>
 800d5d4:	4605      	mov	r5, r0
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	d0f2      	beq.n	800d5c0 <_realloc_r+0x1c>
 800d5da:	4631      	mov	r1, r6
 800d5dc:	4622      	mov	r2, r4
 800d5de:	f7ff f875 	bl	800c6cc <memcpy>
 800d5e2:	4631      	mov	r1, r6
 800d5e4:	4638      	mov	r0, r7
 800d5e6:	f7ff fd49 	bl	800d07c <_free_r>
 800d5ea:	e7e9      	b.n	800d5c0 <_realloc_r+0x1c>
 800d5ec:	4635      	mov	r5, r6
 800d5ee:	e7e7      	b.n	800d5c0 <_realloc_r+0x1c>

0800d5f0 <__sfputc_r>:
 800d5f0:	6893      	ldr	r3, [r2, #8]
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	b410      	push	{r4}
 800d5f8:	6093      	str	r3, [r2, #8]
 800d5fa:	da08      	bge.n	800d60e <__sfputc_r+0x1e>
 800d5fc:	6994      	ldr	r4, [r2, #24]
 800d5fe:	42a3      	cmp	r3, r4
 800d600:	db01      	blt.n	800d606 <__sfputc_r+0x16>
 800d602:	290a      	cmp	r1, #10
 800d604:	d103      	bne.n	800d60e <__sfputc_r+0x1e>
 800d606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d60a:	f000 b94b 	b.w	800d8a4 <__swbuf_r>
 800d60e:	6813      	ldr	r3, [r2, #0]
 800d610:	1c58      	adds	r0, r3, #1
 800d612:	6010      	str	r0, [r2, #0]
 800d614:	7019      	strb	r1, [r3, #0]
 800d616:	4608      	mov	r0, r1
 800d618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d61c:	4770      	bx	lr

0800d61e <__sfputs_r>:
 800d61e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d620:	4606      	mov	r6, r0
 800d622:	460f      	mov	r7, r1
 800d624:	4614      	mov	r4, r2
 800d626:	18d5      	adds	r5, r2, r3
 800d628:	42ac      	cmp	r4, r5
 800d62a:	d101      	bne.n	800d630 <__sfputs_r+0x12>
 800d62c:	2000      	movs	r0, #0
 800d62e:	e007      	b.n	800d640 <__sfputs_r+0x22>
 800d630:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d634:	463a      	mov	r2, r7
 800d636:	4630      	mov	r0, r6
 800d638:	f7ff ffda 	bl	800d5f0 <__sfputc_r>
 800d63c:	1c43      	adds	r3, r0, #1
 800d63e:	d1f3      	bne.n	800d628 <__sfputs_r+0xa>
 800d640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d644 <_vfiprintf_r>:
 800d644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d648:	460d      	mov	r5, r1
 800d64a:	b09d      	sub	sp, #116	; 0x74
 800d64c:	4614      	mov	r4, r2
 800d64e:	4698      	mov	r8, r3
 800d650:	4606      	mov	r6, r0
 800d652:	b118      	cbz	r0, 800d65c <_vfiprintf_r+0x18>
 800d654:	6983      	ldr	r3, [r0, #24]
 800d656:	b90b      	cbnz	r3, 800d65c <_vfiprintf_r+0x18>
 800d658:	f000 fb06 	bl	800dc68 <__sinit>
 800d65c:	4b89      	ldr	r3, [pc, #548]	; (800d884 <_vfiprintf_r+0x240>)
 800d65e:	429d      	cmp	r5, r3
 800d660:	d11b      	bne.n	800d69a <_vfiprintf_r+0x56>
 800d662:	6875      	ldr	r5, [r6, #4]
 800d664:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d666:	07d9      	lsls	r1, r3, #31
 800d668:	d405      	bmi.n	800d676 <_vfiprintf_r+0x32>
 800d66a:	89ab      	ldrh	r3, [r5, #12]
 800d66c:	059a      	lsls	r2, r3, #22
 800d66e:	d402      	bmi.n	800d676 <_vfiprintf_r+0x32>
 800d670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d672:	f000 fb97 	bl	800dda4 <__retarget_lock_acquire_recursive>
 800d676:	89ab      	ldrh	r3, [r5, #12]
 800d678:	071b      	lsls	r3, r3, #28
 800d67a:	d501      	bpl.n	800d680 <_vfiprintf_r+0x3c>
 800d67c:	692b      	ldr	r3, [r5, #16]
 800d67e:	b9eb      	cbnz	r3, 800d6bc <_vfiprintf_r+0x78>
 800d680:	4629      	mov	r1, r5
 800d682:	4630      	mov	r0, r6
 800d684:	f000 f960 	bl	800d948 <__swsetup_r>
 800d688:	b1c0      	cbz	r0, 800d6bc <_vfiprintf_r+0x78>
 800d68a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d68c:	07dc      	lsls	r4, r3, #31
 800d68e:	d50e      	bpl.n	800d6ae <_vfiprintf_r+0x6a>
 800d690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d694:	b01d      	add	sp, #116	; 0x74
 800d696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d69a:	4b7b      	ldr	r3, [pc, #492]	; (800d888 <_vfiprintf_r+0x244>)
 800d69c:	429d      	cmp	r5, r3
 800d69e:	d101      	bne.n	800d6a4 <_vfiprintf_r+0x60>
 800d6a0:	68b5      	ldr	r5, [r6, #8]
 800d6a2:	e7df      	b.n	800d664 <_vfiprintf_r+0x20>
 800d6a4:	4b79      	ldr	r3, [pc, #484]	; (800d88c <_vfiprintf_r+0x248>)
 800d6a6:	429d      	cmp	r5, r3
 800d6a8:	bf08      	it	eq
 800d6aa:	68f5      	ldreq	r5, [r6, #12]
 800d6ac:	e7da      	b.n	800d664 <_vfiprintf_r+0x20>
 800d6ae:	89ab      	ldrh	r3, [r5, #12]
 800d6b0:	0598      	lsls	r0, r3, #22
 800d6b2:	d4ed      	bmi.n	800d690 <_vfiprintf_r+0x4c>
 800d6b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6b6:	f000 fb76 	bl	800dda6 <__retarget_lock_release_recursive>
 800d6ba:	e7e9      	b.n	800d690 <_vfiprintf_r+0x4c>
 800d6bc:	2300      	movs	r3, #0
 800d6be:	9309      	str	r3, [sp, #36]	; 0x24
 800d6c0:	2320      	movs	r3, #32
 800d6c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6ca:	2330      	movs	r3, #48	; 0x30
 800d6cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d890 <_vfiprintf_r+0x24c>
 800d6d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6d4:	f04f 0901 	mov.w	r9, #1
 800d6d8:	4623      	mov	r3, r4
 800d6da:	469a      	mov	sl, r3
 800d6dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6e0:	b10a      	cbz	r2, 800d6e6 <_vfiprintf_r+0xa2>
 800d6e2:	2a25      	cmp	r2, #37	; 0x25
 800d6e4:	d1f9      	bne.n	800d6da <_vfiprintf_r+0x96>
 800d6e6:	ebba 0b04 	subs.w	fp, sl, r4
 800d6ea:	d00b      	beq.n	800d704 <_vfiprintf_r+0xc0>
 800d6ec:	465b      	mov	r3, fp
 800d6ee:	4622      	mov	r2, r4
 800d6f0:	4629      	mov	r1, r5
 800d6f2:	4630      	mov	r0, r6
 800d6f4:	f7ff ff93 	bl	800d61e <__sfputs_r>
 800d6f8:	3001      	adds	r0, #1
 800d6fa:	f000 80aa 	beq.w	800d852 <_vfiprintf_r+0x20e>
 800d6fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d700:	445a      	add	r2, fp
 800d702:	9209      	str	r2, [sp, #36]	; 0x24
 800d704:	f89a 3000 	ldrb.w	r3, [sl]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	f000 80a2 	beq.w	800d852 <_vfiprintf_r+0x20e>
 800d70e:	2300      	movs	r3, #0
 800d710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d718:	f10a 0a01 	add.w	sl, sl, #1
 800d71c:	9304      	str	r3, [sp, #16]
 800d71e:	9307      	str	r3, [sp, #28]
 800d720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d724:	931a      	str	r3, [sp, #104]	; 0x68
 800d726:	4654      	mov	r4, sl
 800d728:	2205      	movs	r2, #5
 800d72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d72e:	4858      	ldr	r0, [pc, #352]	; (800d890 <_vfiprintf_r+0x24c>)
 800d730:	f7f2 fd56 	bl	80001e0 <memchr>
 800d734:	9a04      	ldr	r2, [sp, #16]
 800d736:	b9d8      	cbnz	r0, 800d770 <_vfiprintf_r+0x12c>
 800d738:	06d1      	lsls	r1, r2, #27
 800d73a:	bf44      	itt	mi
 800d73c:	2320      	movmi	r3, #32
 800d73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d742:	0713      	lsls	r3, r2, #28
 800d744:	bf44      	itt	mi
 800d746:	232b      	movmi	r3, #43	; 0x2b
 800d748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d74c:	f89a 3000 	ldrb.w	r3, [sl]
 800d750:	2b2a      	cmp	r3, #42	; 0x2a
 800d752:	d015      	beq.n	800d780 <_vfiprintf_r+0x13c>
 800d754:	9a07      	ldr	r2, [sp, #28]
 800d756:	4654      	mov	r4, sl
 800d758:	2000      	movs	r0, #0
 800d75a:	f04f 0c0a 	mov.w	ip, #10
 800d75e:	4621      	mov	r1, r4
 800d760:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d764:	3b30      	subs	r3, #48	; 0x30
 800d766:	2b09      	cmp	r3, #9
 800d768:	d94e      	bls.n	800d808 <_vfiprintf_r+0x1c4>
 800d76a:	b1b0      	cbz	r0, 800d79a <_vfiprintf_r+0x156>
 800d76c:	9207      	str	r2, [sp, #28]
 800d76e:	e014      	b.n	800d79a <_vfiprintf_r+0x156>
 800d770:	eba0 0308 	sub.w	r3, r0, r8
 800d774:	fa09 f303 	lsl.w	r3, r9, r3
 800d778:	4313      	orrs	r3, r2
 800d77a:	9304      	str	r3, [sp, #16]
 800d77c:	46a2      	mov	sl, r4
 800d77e:	e7d2      	b.n	800d726 <_vfiprintf_r+0xe2>
 800d780:	9b03      	ldr	r3, [sp, #12]
 800d782:	1d19      	adds	r1, r3, #4
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	9103      	str	r1, [sp, #12]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	bfbb      	ittet	lt
 800d78c:	425b      	neglt	r3, r3
 800d78e:	f042 0202 	orrlt.w	r2, r2, #2
 800d792:	9307      	strge	r3, [sp, #28]
 800d794:	9307      	strlt	r3, [sp, #28]
 800d796:	bfb8      	it	lt
 800d798:	9204      	strlt	r2, [sp, #16]
 800d79a:	7823      	ldrb	r3, [r4, #0]
 800d79c:	2b2e      	cmp	r3, #46	; 0x2e
 800d79e:	d10c      	bne.n	800d7ba <_vfiprintf_r+0x176>
 800d7a0:	7863      	ldrb	r3, [r4, #1]
 800d7a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d7a4:	d135      	bne.n	800d812 <_vfiprintf_r+0x1ce>
 800d7a6:	9b03      	ldr	r3, [sp, #12]
 800d7a8:	1d1a      	adds	r2, r3, #4
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	9203      	str	r2, [sp, #12]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	bfb8      	it	lt
 800d7b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d7b6:	3402      	adds	r4, #2
 800d7b8:	9305      	str	r3, [sp, #20]
 800d7ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d8a0 <_vfiprintf_r+0x25c>
 800d7be:	7821      	ldrb	r1, [r4, #0]
 800d7c0:	2203      	movs	r2, #3
 800d7c2:	4650      	mov	r0, sl
 800d7c4:	f7f2 fd0c 	bl	80001e0 <memchr>
 800d7c8:	b140      	cbz	r0, 800d7dc <_vfiprintf_r+0x198>
 800d7ca:	2340      	movs	r3, #64	; 0x40
 800d7cc:	eba0 000a 	sub.w	r0, r0, sl
 800d7d0:	fa03 f000 	lsl.w	r0, r3, r0
 800d7d4:	9b04      	ldr	r3, [sp, #16]
 800d7d6:	4303      	orrs	r3, r0
 800d7d8:	3401      	adds	r4, #1
 800d7da:	9304      	str	r3, [sp, #16]
 800d7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7e0:	482c      	ldr	r0, [pc, #176]	; (800d894 <_vfiprintf_r+0x250>)
 800d7e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7e6:	2206      	movs	r2, #6
 800d7e8:	f7f2 fcfa 	bl	80001e0 <memchr>
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	d03f      	beq.n	800d870 <_vfiprintf_r+0x22c>
 800d7f0:	4b29      	ldr	r3, [pc, #164]	; (800d898 <_vfiprintf_r+0x254>)
 800d7f2:	bb1b      	cbnz	r3, 800d83c <_vfiprintf_r+0x1f8>
 800d7f4:	9b03      	ldr	r3, [sp, #12]
 800d7f6:	3307      	adds	r3, #7
 800d7f8:	f023 0307 	bic.w	r3, r3, #7
 800d7fc:	3308      	adds	r3, #8
 800d7fe:	9303      	str	r3, [sp, #12]
 800d800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d802:	443b      	add	r3, r7
 800d804:	9309      	str	r3, [sp, #36]	; 0x24
 800d806:	e767      	b.n	800d6d8 <_vfiprintf_r+0x94>
 800d808:	fb0c 3202 	mla	r2, ip, r2, r3
 800d80c:	460c      	mov	r4, r1
 800d80e:	2001      	movs	r0, #1
 800d810:	e7a5      	b.n	800d75e <_vfiprintf_r+0x11a>
 800d812:	2300      	movs	r3, #0
 800d814:	3401      	adds	r4, #1
 800d816:	9305      	str	r3, [sp, #20]
 800d818:	4619      	mov	r1, r3
 800d81a:	f04f 0c0a 	mov.w	ip, #10
 800d81e:	4620      	mov	r0, r4
 800d820:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d824:	3a30      	subs	r2, #48	; 0x30
 800d826:	2a09      	cmp	r2, #9
 800d828:	d903      	bls.n	800d832 <_vfiprintf_r+0x1ee>
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d0c5      	beq.n	800d7ba <_vfiprintf_r+0x176>
 800d82e:	9105      	str	r1, [sp, #20]
 800d830:	e7c3      	b.n	800d7ba <_vfiprintf_r+0x176>
 800d832:	fb0c 2101 	mla	r1, ip, r1, r2
 800d836:	4604      	mov	r4, r0
 800d838:	2301      	movs	r3, #1
 800d83a:	e7f0      	b.n	800d81e <_vfiprintf_r+0x1da>
 800d83c:	ab03      	add	r3, sp, #12
 800d83e:	9300      	str	r3, [sp, #0]
 800d840:	462a      	mov	r2, r5
 800d842:	4b16      	ldr	r3, [pc, #88]	; (800d89c <_vfiprintf_r+0x258>)
 800d844:	a904      	add	r1, sp, #16
 800d846:	4630      	mov	r0, r6
 800d848:	f7fc f852 	bl	80098f0 <_printf_float>
 800d84c:	4607      	mov	r7, r0
 800d84e:	1c78      	adds	r0, r7, #1
 800d850:	d1d6      	bne.n	800d800 <_vfiprintf_r+0x1bc>
 800d852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d854:	07d9      	lsls	r1, r3, #31
 800d856:	d405      	bmi.n	800d864 <_vfiprintf_r+0x220>
 800d858:	89ab      	ldrh	r3, [r5, #12]
 800d85a:	059a      	lsls	r2, r3, #22
 800d85c:	d402      	bmi.n	800d864 <_vfiprintf_r+0x220>
 800d85e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d860:	f000 faa1 	bl	800dda6 <__retarget_lock_release_recursive>
 800d864:	89ab      	ldrh	r3, [r5, #12]
 800d866:	065b      	lsls	r3, r3, #25
 800d868:	f53f af12 	bmi.w	800d690 <_vfiprintf_r+0x4c>
 800d86c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d86e:	e711      	b.n	800d694 <_vfiprintf_r+0x50>
 800d870:	ab03      	add	r3, sp, #12
 800d872:	9300      	str	r3, [sp, #0]
 800d874:	462a      	mov	r2, r5
 800d876:	4b09      	ldr	r3, [pc, #36]	; (800d89c <_vfiprintf_r+0x258>)
 800d878:	a904      	add	r1, sp, #16
 800d87a:	4630      	mov	r0, r6
 800d87c:	f7fc fadc 	bl	8009e38 <_printf_i>
 800d880:	e7e4      	b.n	800d84c <_vfiprintf_r+0x208>
 800d882:	bf00      	nop
 800d884:	0800e56c 	.word	0x0800e56c
 800d888:	0800e58c 	.word	0x0800e58c
 800d88c:	0800e54c 	.word	0x0800e54c
 800d890:	0800e4fc 	.word	0x0800e4fc
 800d894:	0800e506 	.word	0x0800e506
 800d898:	080098f1 	.word	0x080098f1
 800d89c:	0800d61f 	.word	0x0800d61f
 800d8a0:	0800e502 	.word	0x0800e502

0800d8a4 <__swbuf_r>:
 800d8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8a6:	460e      	mov	r6, r1
 800d8a8:	4614      	mov	r4, r2
 800d8aa:	4605      	mov	r5, r0
 800d8ac:	b118      	cbz	r0, 800d8b6 <__swbuf_r+0x12>
 800d8ae:	6983      	ldr	r3, [r0, #24]
 800d8b0:	b90b      	cbnz	r3, 800d8b6 <__swbuf_r+0x12>
 800d8b2:	f000 f9d9 	bl	800dc68 <__sinit>
 800d8b6:	4b21      	ldr	r3, [pc, #132]	; (800d93c <__swbuf_r+0x98>)
 800d8b8:	429c      	cmp	r4, r3
 800d8ba:	d12b      	bne.n	800d914 <__swbuf_r+0x70>
 800d8bc:	686c      	ldr	r4, [r5, #4]
 800d8be:	69a3      	ldr	r3, [r4, #24]
 800d8c0:	60a3      	str	r3, [r4, #8]
 800d8c2:	89a3      	ldrh	r3, [r4, #12]
 800d8c4:	071a      	lsls	r2, r3, #28
 800d8c6:	d52f      	bpl.n	800d928 <__swbuf_r+0x84>
 800d8c8:	6923      	ldr	r3, [r4, #16]
 800d8ca:	b36b      	cbz	r3, 800d928 <__swbuf_r+0x84>
 800d8cc:	6923      	ldr	r3, [r4, #16]
 800d8ce:	6820      	ldr	r0, [r4, #0]
 800d8d0:	1ac0      	subs	r0, r0, r3
 800d8d2:	6963      	ldr	r3, [r4, #20]
 800d8d4:	b2f6      	uxtb	r6, r6
 800d8d6:	4283      	cmp	r3, r0
 800d8d8:	4637      	mov	r7, r6
 800d8da:	dc04      	bgt.n	800d8e6 <__swbuf_r+0x42>
 800d8dc:	4621      	mov	r1, r4
 800d8de:	4628      	mov	r0, r5
 800d8e0:	f000 f92e 	bl	800db40 <_fflush_r>
 800d8e4:	bb30      	cbnz	r0, 800d934 <__swbuf_r+0x90>
 800d8e6:	68a3      	ldr	r3, [r4, #8]
 800d8e8:	3b01      	subs	r3, #1
 800d8ea:	60a3      	str	r3, [r4, #8]
 800d8ec:	6823      	ldr	r3, [r4, #0]
 800d8ee:	1c5a      	adds	r2, r3, #1
 800d8f0:	6022      	str	r2, [r4, #0]
 800d8f2:	701e      	strb	r6, [r3, #0]
 800d8f4:	6963      	ldr	r3, [r4, #20]
 800d8f6:	3001      	adds	r0, #1
 800d8f8:	4283      	cmp	r3, r0
 800d8fa:	d004      	beq.n	800d906 <__swbuf_r+0x62>
 800d8fc:	89a3      	ldrh	r3, [r4, #12]
 800d8fe:	07db      	lsls	r3, r3, #31
 800d900:	d506      	bpl.n	800d910 <__swbuf_r+0x6c>
 800d902:	2e0a      	cmp	r6, #10
 800d904:	d104      	bne.n	800d910 <__swbuf_r+0x6c>
 800d906:	4621      	mov	r1, r4
 800d908:	4628      	mov	r0, r5
 800d90a:	f000 f919 	bl	800db40 <_fflush_r>
 800d90e:	b988      	cbnz	r0, 800d934 <__swbuf_r+0x90>
 800d910:	4638      	mov	r0, r7
 800d912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d914:	4b0a      	ldr	r3, [pc, #40]	; (800d940 <__swbuf_r+0x9c>)
 800d916:	429c      	cmp	r4, r3
 800d918:	d101      	bne.n	800d91e <__swbuf_r+0x7a>
 800d91a:	68ac      	ldr	r4, [r5, #8]
 800d91c:	e7cf      	b.n	800d8be <__swbuf_r+0x1a>
 800d91e:	4b09      	ldr	r3, [pc, #36]	; (800d944 <__swbuf_r+0xa0>)
 800d920:	429c      	cmp	r4, r3
 800d922:	bf08      	it	eq
 800d924:	68ec      	ldreq	r4, [r5, #12]
 800d926:	e7ca      	b.n	800d8be <__swbuf_r+0x1a>
 800d928:	4621      	mov	r1, r4
 800d92a:	4628      	mov	r0, r5
 800d92c:	f000 f80c 	bl	800d948 <__swsetup_r>
 800d930:	2800      	cmp	r0, #0
 800d932:	d0cb      	beq.n	800d8cc <__swbuf_r+0x28>
 800d934:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d938:	e7ea      	b.n	800d910 <__swbuf_r+0x6c>
 800d93a:	bf00      	nop
 800d93c:	0800e56c 	.word	0x0800e56c
 800d940:	0800e58c 	.word	0x0800e58c
 800d944:	0800e54c 	.word	0x0800e54c

0800d948 <__swsetup_r>:
 800d948:	4b32      	ldr	r3, [pc, #200]	; (800da14 <__swsetup_r+0xcc>)
 800d94a:	b570      	push	{r4, r5, r6, lr}
 800d94c:	681d      	ldr	r5, [r3, #0]
 800d94e:	4606      	mov	r6, r0
 800d950:	460c      	mov	r4, r1
 800d952:	b125      	cbz	r5, 800d95e <__swsetup_r+0x16>
 800d954:	69ab      	ldr	r3, [r5, #24]
 800d956:	b913      	cbnz	r3, 800d95e <__swsetup_r+0x16>
 800d958:	4628      	mov	r0, r5
 800d95a:	f000 f985 	bl	800dc68 <__sinit>
 800d95e:	4b2e      	ldr	r3, [pc, #184]	; (800da18 <__swsetup_r+0xd0>)
 800d960:	429c      	cmp	r4, r3
 800d962:	d10f      	bne.n	800d984 <__swsetup_r+0x3c>
 800d964:	686c      	ldr	r4, [r5, #4]
 800d966:	89a3      	ldrh	r3, [r4, #12]
 800d968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d96c:	0719      	lsls	r1, r3, #28
 800d96e:	d42c      	bmi.n	800d9ca <__swsetup_r+0x82>
 800d970:	06dd      	lsls	r5, r3, #27
 800d972:	d411      	bmi.n	800d998 <__swsetup_r+0x50>
 800d974:	2309      	movs	r3, #9
 800d976:	6033      	str	r3, [r6, #0]
 800d978:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d97c:	81a3      	strh	r3, [r4, #12]
 800d97e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d982:	e03e      	b.n	800da02 <__swsetup_r+0xba>
 800d984:	4b25      	ldr	r3, [pc, #148]	; (800da1c <__swsetup_r+0xd4>)
 800d986:	429c      	cmp	r4, r3
 800d988:	d101      	bne.n	800d98e <__swsetup_r+0x46>
 800d98a:	68ac      	ldr	r4, [r5, #8]
 800d98c:	e7eb      	b.n	800d966 <__swsetup_r+0x1e>
 800d98e:	4b24      	ldr	r3, [pc, #144]	; (800da20 <__swsetup_r+0xd8>)
 800d990:	429c      	cmp	r4, r3
 800d992:	bf08      	it	eq
 800d994:	68ec      	ldreq	r4, [r5, #12]
 800d996:	e7e6      	b.n	800d966 <__swsetup_r+0x1e>
 800d998:	0758      	lsls	r0, r3, #29
 800d99a:	d512      	bpl.n	800d9c2 <__swsetup_r+0x7a>
 800d99c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d99e:	b141      	cbz	r1, 800d9b2 <__swsetup_r+0x6a>
 800d9a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9a4:	4299      	cmp	r1, r3
 800d9a6:	d002      	beq.n	800d9ae <__swsetup_r+0x66>
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	f7ff fb67 	bl	800d07c <_free_r>
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	6363      	str	r3, [r4, #52]	; 0x34
 800d9b2:	89a3      	ldrh	r3, [r4, #12]
 800d9b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d9b8:	81a3      	strh	r3, [r4, #12]
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	6063      	str	r3, [r4, #4]
 800d9be:	6923      	ldr	r3, [r4, #16]
 800d9c0:	6023      	str	r3, [r4, #0]
 800d9c2:	89a3      	ldrh	r3, [r4, #12]
 800d9c4:	f043 0308 	orr.w	r3, r3, #8
 800d9c8:	81a3      	strh	r3, [r4, #12]
 800d9ca:	6923      	ldr	r3, [r4, #16]
 800d9cc:	b94b      	cbnz	r3, 800d9e2 <__swsetup_r+0x9a>
 800d9ce:	89a3      	ldrh	r3, [r4, #12]
 800d9d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d9d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9d8:	d003      	beq.n	800d9e2 <__swsetup_r+0x9a>
 800d9da:	4621      	mov	r1, r4
 800d9dc:	4630      	mov	r0, r6
 800d9de:	f000 fa07 	bl	800ddf0 <__smakebuf_r>
 800d9e2:	89a0      	ldrh	r0, [r4, #12]
 800d9e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9e8:	f010 0301 	ands.w	r3, r0, #1
 800d9ec:	d00a      	beq.n	800da04 <__swsetup_r+0xbc>
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	60a3      	str	r3, [r4, #8]
 800d9f2:	6963      	ldr	r3, [r4, #20]
 800d9f4:	425b      	negs	r3, r3
 800d9f6:	61a3      	str	r3, [r4, #24]
 800d9f8:	6923      	ldr	r3, [r4, #16]
 800d9fa:	b943      	cbnz	r3, 800da0e <__swsetup_r+0xc6>
 800d9fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800da00:	d1ba      	bne.n	800d978 <__swsetup_r+0x30>
 800da02:	bd70      	pop	{r4, r5, r6, pc}
 800da04:	0781      	lsls	r1, r0, #30
 800da06:	bf58      	it	pl
 800da08:	6963      	ldrpl	r3, [r4, #20]
 800da0a:	60a3      	str	r3, [r4, #8]
 800da0c:	e7f4      	b.n	800d9f8 <__swsetup_r+0xb0>
 800da0e:	2000      	movs	r0, #0
 800da10:	e7f7      	b.n	800da02 <__swsetup_r+0xba>
 800da12:	bf00      	nop
 800da14:	20000180 	.word	0x20000180
 800da18:	0800e56c 	.word	0x0800e56c
 800da1c:	0800e58c 	.word	0x0800e58c
 800da20:	0800e54c 	.word	0x0800e54c

0800da24 <abort>:
 800da24:	b508      	push	{r3, lr}
 800da26:	2006      	movs	r0, #6
 800da28:	f000 fa52 	bl	800ded0 <raise>
 800da2c:	2001      	movs	r0, #1
 800da2e:	f7f3 ffe3 	bl	80019f8 <_exit>
	...

0800da34 <__sflush_r>:
 800da34:	898a      	ldrh	r2, [r1, #12]
 800da36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da3a:	4605      	mov	r5, r0
 800da3c:	0710      	lsls	r0, r2, #28
 800da3e:	460c      	mov	r4, r1
 800da40:	d458      	bmi.n	800daf4 <__sflush_r+0xc0>
 800da42:	684b      	ldr	r3, [r1, #4]
 800da44:	2b00      	cmp	r3, #0
 800da46:	dc05      	bgt.n	800da54 <__sflush_r+0x20>
 800da48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	dc02      	bgt.n	800da54 <__sflush_r+0x20>
 800da4e:	2000      	movs	r0, #0
 800da50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da56:	2e00      	cmp	r6, #0
 800da58:	d0f9      	beq.n	800da4e <__sflush_r+0x1a>
 800da5a:	2300      	movs	r3, #0
 800da5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da60:	682f      	ldr	r7, [r5, #0]
 800da62:	602b      	str	r3, [r5, #0]
 800da64:	d032      	beq.n	800dacc <__sflush_r+0x98>
 800da66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da68:	89a3      	ldrh	r3, [r4, #12]
 800da6a:	075a      	lsls	r2, r3, #29
 800da6c:	d505      	bpl.n	800da7a <__sflush_r+0x46>
 800da6e:	6863      	ldr	r3, [r4, #4]
 800da70:	1ac0      	subs	r0, r0, r3
 800da72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da74:	b10b      	cbz	r3, 800da7a <__sflush_r+0x46>
 800da76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da78:	1ac0      	subs	r0, r0, r3
 800da7a:	2300      	movs	r3, #0
 800da7c:	4602      	mov	r2, r0
 800da7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da80:	6a21      	ldr	r1, [r4, #32]
 800da82:	4628      	mov	r0, r5
 800da84:	47b0      	blx	r6
 800da86:	1c43      	adds	r3, r0, #1
 800da88:	89a3      	ldrh	r3, [r4, #12]
 800da8a:	d106      	bne.n	800da9a <__sflush_r+0x66>
 800da8c:	6829      	ldr	r1, [r5, #0]
 800da8e:	291d      	cmp	r1, #29
 800da90:	d82c      	bhi.n	800daec <__sflush_r+0xb8>
 800da92:	4a2a      	ldr	r2, [pc, #168]	; (800db3c <__sflush_r+0x108>)
 800da94:	40ca      	lsrs	r2, r1
 800da96:	07d6      	lsls	r6, r2, #31
 800da98:	d528      	bpl.n	800daec <__sflush_r+0xb8>
 800da9a:	2200      	movs	r2, #0
 800da9c:	6062      	str	r2, [r4, #4]
 800da9e:	04d9      	lsls	r1, r3, #19
 800daa0:	6922      	ldr	r2, [r4, #16]
 800daa2:	6022      	str	r2, [r4, #0]
 800daa4:	d504      	bpl.n	800dab0 <__sflush_r+0x7c>
 800daa6:	1c42      	adds	r2, r0, #1
 800daa8:	d101      	bne.n	800daae <__sflush_r+0x7a>
 800daaa:	682b      	ldr	r3, [r5, #0]
 800daac:	b903      	cbnz	r3, 800dab0 <__sflush_r+0x7c>
 800daae:	6560      	str	r0, [r4, #84]	; 0x54
 800dab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dab2:	602f      	str	r7, [r5, #0]
 800dab4:	2900      	cmp	r1, #0
 800dab6:	d0ca      	beq.n	800da4e <__sflush_r+0x1a>
 800dab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dabc:	4299      	cmp	r1, r3
 800dabe:	d002      	beq.n	800dac6 <__sflush_r+0x92>
 800dac0:	4628      	mov	r0, r5
 800dac2:	f7ff fadb 	bl	800d07c <_free_r>
 800dac6:	2000      	movs	r0, #0
 800dac8:	6360      	str	r0, [r4, #52]	; 0x34
 800daca:	e7c1      	b.n	800da50 <__sflush_r+0x1c>
 800dacc:	6a21      	ldr	r1, [r4, #32]
 800dace:	2301      	movs	r3, #1
 800dad0:	4628      	mov	r0, r5
 800dad2:	47b0      	blx	r6
 800dad4:	1c41      	adds	r1, r0, #1
 800dad6:	d1c7      	bne.n	800da68 <__sflush_r+0x34>
 800dad8:	682b      	ldr	r3, [r5, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d0c4      	beq.n	800da68 <__sflush_r+0x34>
 800dade:	2b1d      	cmp	r3, #29
 800dae0:	d001      	beq.n	800dae6 <__sflush_r+0xb2>
 800dae2:	2b16      	cmp	r3, #22
 800dae4:	d101      	bne.n	800daea <__sflush_r+0xb6>
 800dae6:	602f      	str	r7, [r5, #0]
 800dae8:	e7b1      	b.n	800da4e <__sflush_r+0x1a>
 800daea:	89a3      	ldrh	r3, [r4, #12]
 800daec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daf0:	81a3      	strh	r3, [r4, #12]
 800daf2:	e7ad      	b.n	800da50 <__sflush_r+0x1c>
 800daf4:	690f      	ldr	r7, [r1, #16]
 800daf6:	2f00      	cmp	r7, #0
 800daf8:	d0a9      	beq.n	800da4e <__sflush_r+0x1a>
 800dafa:	0793      	lsls	r3, r2, #30
 800dafc:	680e      	ldr	r6, [r1, #0]
 800dafe:	bf08      	it	eq
 800db00:	694b      	ldreq	r3, [r1, #20]
 800db02:	600f      	str	r7, [r1, #0]
 800db04:	bf18      	it	ne
 800db06:	2300      	movne	r3, #0
 800db08:	eba6 0807 	sub.w	r8, r6, r7
 800db0c:	608b      	str	r3, [r1, #8]
 800db0e:	f1b8 0f00 	cmp.w	r8, #0
 800db12:	dd9c      	ble.n	800da4e <__sflush_r+0x1a>
 800db14:	6a21      	ldr	r1, [r4, #32]
 800db16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db18:	4643      	mov	r3, r8
 800db1a:	463a      	mov	r2, r7
 800db1c:	4628      	mov	r0, r5
 800db1e:	47b0      	blx	r6
 800db20:	2800      	cmp	r0, #0
 800db22:	dc06      	bgt.n	800db32 <__sflush_r+0xfe>
 800db24:	89a3      	ldrh	r3, [r4, #12]
 800db26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db2a:	81a3      	strh	r3, [r4, #12]
 800db2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db30:	e78e      	b.n	800da50 <__sflush_r+0x1c>
 800db32:	4407      	add	r7, r0
 800db34:	eba8 0800 	sub.w	r8, r8, r0
 800db38:	e7e9      	b.n	800db0e <__sflush_r+0xda>
 800db3a:	bf00      	nop
 800db3c:	20400001 	.word	0x20400001

0800db40 <_fflush_r>:
 800db40:	b538      	push	{r3, r4, r5, lr}
 800db42:	690b      	ldr	r3, [r1, #16]
 800db44:	4605      	mov	r5, r0
 800db46:	460c      	mov	r4, r1
 800db48:	b913      	cbnz	r3, 800db50 <_fflush_r+0x10>
 800db4a:	2500      	movs	r5, #0
 800db4c:	4628      	mov	r0, r5
 800db4e:	bd38      	pop	{r3, r4, r5, pc}
 800db50:	b118      	cbz	r0, 800db5a <_fflush_r+0x1a>
 800db52:	6983      	ldr	r3, [r0, #24]
 800db54:	b90b      	cbnz	r3, 800db5a <_fflush_r+0x1a>
 800db56:	f000 f887 	bl	800dc68 <__sinit>
 800db5a:	4b14      	ldr	r3, [pc, #80]	; (800dbac <_fflush_r+0x6c>)
 800db5c:	429c      	cmp	r4, r3
 800db5e:	d11b      	bne.n	800db98 <_fflush_r+0x58>
 800db60:	686c      	ldr	r4, [r5, #4]
 800db62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d0ef      	beq.n	800db4a <_fflush_r+0xa>
 800db6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db6c:	07d0      	lsls	r0, r2, #31
 800db6e:	d404      	bmi.n	800db7a <_fflush_r+0x3a>
 800db70:	0599      	lsls	r1, r3, #22
 800db72:	d402      	bmi.n	800db7a <_fflush_r+0x3a>
 800db74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db76:	f000 f915 	bl	800dda4 <__retarget_lock_acquire_recursive>
 800db7a:	4628      	mov	r0, r5
 800db7c:	4621      	mov	r1, r4
 800db7e:	f7ff ff59 	bl	800da34 <__sflush_r>
 800db82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db84:	07da      	lsls	r2, r3, #31
 800db86:	4605      	mov	r5, r0
 800db88:	d4e0      	bmi.n	800db4c <_fflush_r+0xc>
 800db8a:	89a3      	ldrh	r3, [r4, #12]
 800db8c:	059b      	lsls	r3, r3, #22
 800db8e:	d4dd      	bmi.n	800db4c <_fflush_r+0xc>
 800db90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db92:	f000 f908 	bl	800dda6 <__retarget_lock_release_recursive>
 800db96:	e7d9      	b.n	800db4c <_fflush_r+0xc>
 800db98:	4b05      	ldr	r3, [pc, #20]	; (800dbb0 <_fflush_r+0x70>)
 800db9a:	429c      	cmp	r4, r3
 800db9c:	d101      	bne.n	800dba2 <_fflush_r+0x62>
 800db9e:	68ac      	ldr	r4, [r5, #8]
 800dba0:	e7df      	b.n	800db62 <_fflush_r+0x22>
 800dba2:	4b04      	ldr	r3, [pc, #16]	; (800dbb4 <_fflush_r+0x74>)
 800dba4:	429c      	cmp	r4, r3
 800dba6:	bf08      	it	eq
 800dba8:	68ec      	ldreq	r4, [r5, #12]
 800dbaa:	e7da      	b.n	800db62 <_fflush_r+0x22>
 800dbac:	0800e56c 	.word	0x0800e56c
 800dbb0:	0800e58c 	.word	0x0800e58c
 800dbb4:	0800e54c 	.word	0x0800e54c

0800dbb8 <std>:
 800dbb8:	2300      	movs	r3, #0
 800dbba:	b510      	push	{r4, lr}
 800dbbc:	4604      	mov	r4, r0
 800dbbe:	e9c0 3300 	strd	r3, r3, [r0]
 800dbc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dbc6:	6083      	str	r3, [r0, #8]
 800dbc8:	8181      	strh	r1, [r0, #12]
 800dbca:	6643      	str	r3, [r0, #100]	; 0x64
 800dbcc:	81c2      	strh	r2, [r0, #14]
 800dbce:	6183      	str	r3, [r0, #24]
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	2208      	movs	r2, #8
 800dbd4:	305c      	adds	r0, #92	; 0x5c
 800dbd6:	f7fb fde3 	bl	80097a0 <memset>
 800dbda:	4b05      	ldr	r3, [pc, #20]	; (800dbf0 <std+0x38>)
 800dbdc:	6263      	str	r3, [r4, #36]	; 0x24
 800dbde:	4b05      	ldr	r3, [pc, #20]	; (800dbf4 <std+0x3c>)
 800dbe0:	62a3      	str	r3, [r4, #40]	; 0x28
 800dbe2:	4b05      	ldr	r3, [pc, #20]	; (800dbf8 <std+0x40>)
 800dbe4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dbe6:	4b05      	ldr	r3, [pc, #20]	; (800dbfc <std+0x44>)
 800dbe8:	6224      	str	r4, [r4, #32]
 800dbea:	6323      	str	r3, [r4, #48]	; 0x30
 800dbec:	bd10      	pop	{r4, pc}
 800dbee:	bf00      	nop
 800dbf0:	0800df09 	.word	0x0800df09
 800dbf4:	0800df2b 	.word	0x0800df2b
 800dbf8:	0800df63 	.word	0x0800df63
 800dbfc:	0800df87 	.word	0x0800df87

0800dc00 <_cleanup_r>:
 800dc00:	4901      	ldr	r1, [pc, #4]	; (800dc08 <_cleanup_r+0x8>)
 800dc02:	f000 b8af 	b.w	800dd64 <_fwalk_reent>
 800dc06:	bf00      	nop
 800dc08:	0800db41 	.word	0x0800db41

0800dc0c <__sfmoreglue>:
 800dc0c:	b570      	push	{r4, r5, r6, lr}
 800dc0e:	1e4a      	subs	r2, r1, #1
 800dc10:	2568      	movs	r5, #104	; 0x68
 800dc12:	4355      	muls	r5, r2
 800dc14:	460e      	mov	r6, r1
 800dc16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dc1a:	f7ff fa7f 	bl	800d11c <_malloc_r>
 800dc1e:	4604      	mov	r4, r0
 800dc20:	b140      	cbz	r0, 800dc34 <__sfmoreglue+0x28>
 800dc22:	2100      	movs	r1, #0
 800dc24:	e9c0 1600 	strd	r1, r6, [r0]
 800dc28:	300c      	adds	r0, #12
 800dc2a:	60a0      	str	r0, [r4, #8]
 800dc2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dc30:	f7fb fdb6 	bl	80097a0 <memset>
 800dc34:	4620      	mov	r0, r4
 800dc36:	bd70      	pop	{r4, r5, r6, pc}

0800dc38 <__sfp_lock_acquire>:
 800dc38:	4801      	ldr	r0, [pc, #4]	; (800dc40 <__sfp_lock_acquire+0x8>)
 800dc3a:	f000 b8b3 	b.w	800dda4 <__retarget_lock_acquire_recursive>
 800dc3e:	bf00      	nop
 800dc40:	20002028 	.word	0x20002028

0800dc44 <__sfp_lock_release>:
 800dc44:	4801      	ldr	r0, [pc, #4]	; (800dc4c <__sfp_lock_release+0x8>)
 800dc46:	f000 b8ae 	b.w	800dda6 <__retarget_lock_release_recursive>
 800dc4a:	bf00      	nop
 800dc4c:	20002028 	.word	0x20002028

0800dc50 <__sinit_lock_acquire>:
 800dc50:	4801      	ldr	r0, [pc, #4]	; (800dc58 <__sinit_lock_acquire+0x8>)
 800dc52:	f000 b8a7 	b.w	800dda4 <__retarget_lock_acquire_recursive>
 800dc56:	bf00      	nop
 800dc58:	20002023 	.word	0x20002023

0800dc5c <__sinit_lock_release>:
 800dc5c:	4801      	ldr	r0, [pc, #4]	; (800dc64 <__sinit_lock_release+0x8>)
 800dc5e:	f000 b8a2 	b.w	800dda6 <__retarget_lock_release_recursive>
 800dc62:	bf00      	nop
 800dc64:	20002023 	.word	0x20002023

0800dc68 <__sinit>:
 800dc68:	b510      	push	{r4, lr}
 800dc6a:	4604      	mov	r4, r0
 800dc6c:	f7ff fff0 	bl	800dc50 <__sinit_lock_acquire>
 800dc70:	69a3      	ldr	r3, [r4, #24]
 800dc72:	b11b      	cbz	r3, 800dc7c <__sinit+0x14>
 800dc74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc78:	f7ff bff0 	b.w	800dc5c <__sinit_lock_release>
 800dc7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dc80:	6523      	str	r3, [r4, #80]	; 0x50
 800dc82:	4b13      	ldr	r3, [pc, #76]	; (800dcd0 <__sinit+0x68>)
 800dc84:	4a13      	ldr	r2, [pc, #76]	; (800dcd4 <__sinit+0x6c>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	62a2      	str	r2, [r4, #40]	; 0x28
 800dc8a:	42a3      	cmp	r3, r4
 800dc8c:	bf04      	itt	eq
 800dc8e:	2301      	moveq	r3, #1
 800dc90:	61a3      	streq	r3, [r4, #24]
 800dc92:	4620      	mov	r0, r4
 800dc94:	f000 f820 	bl	800dcd8 <__sfp>
 800dc98:	6060      	str	r0, [r4, #4]
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	f000 f81c 	bl	800dcd8 <__sfp>
 800dca0:	60a0      	str	r0, [r4, #8]
 800dca2:	4620      	mov	r0, r4
 800dca4:	f000 f818 	bl	800dcd8 <__sfp>
 800dca8:	2200      	movs	r2, #0
 800dcaa:	60e0      	str	r0, [r4, #12]
 800dcac:	2104      	movs	r1, #4
 800dcae:	6860      	ldr	r0, [r4, #4]
 800dcb0:	f7ff ff82 	bl	800dbb8 <std>
 800dcb4:	68a0      	ldr	r0, [r4, #8]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	2109      	movs	r1, #9
 800dcba:	f7ff ff7d 	bl	800dbb8 <std>
 800dcbe:	68e0      	ldr	r0, [r4, #12]
 800dcc0:	2202      	movs	r2, #2
 800dcc2:	2112      	movs	r1, #18
 800dcc4:	f7ff ff78 	bl	800dbb8 <std>
 800dcc8:	2301      	movs	r3, #1
 800dcca:	61a3      	str	r3, [r4, #24]
 800dccc:	e7d2      	b.n	800dc74 <__sinit+0xc>
 800dcce:	bf00      	nop
 800dcd0:	0800e0f8 	.word	0x0800e0f8
 800dcd4:	0800dc01 	.word	0x0800dc01

0800dcd8 <__sfp>:
 800dcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcda:	4607      	mov	r7, r0
 800dcdc:	f7ff ffac 	bl	800dc38 <__sfp_lock_acquire>
 800dce0:	4b1e      	ldr	r3, [pc, #120]	; (800dd5c <__sfp+0x84>)
 800dce2:	681e      	ldr	r6, [r3, #0]
 800dce4:	69b3      	ldr	r3, [r6, #24]
 800dce6:	b913      	cbnz	r3, 800dcee <__sfp+0x16>
 800dce8:	4630      	mov	r0, r6
 800dcea:	f7ff ffbd 	bl	800dc68 <__sinit>
 800dcee:	3648      	adds	r6, #72	; 0x48
 800dcf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dcf4:	3b01      	subs	r3, #1
 800dcf6:	d503      	bpl.n	800dd00 <__sfp+0x28>
 800dcf8:	6833      	ldr	r3, [r6, #0]
 800dcfa:	b30b      	cbz	r3, 800dd40 <__sfp+0x68>
 800dcfc:	6836      	ldr	r6, [r6, #0]
 800dcfe:	e7f7      	b.n	800dcf0 <__sfp+0x18>
 800dd00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dd04:	b9d5      	cbnz	r5, 800dd3c <__sfp+0x64>
 800dd06:	4b16      	ldr	r3, [pc, #88]	; (800dd60 <__sfp+0x88>)
 800dd08:	60e3      	str	r3, [r4, #12]
 800dd0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dd0e:	6665      	str	r5, [r4, #100]	; 0x64
 800dd10:	f000 f847 	bl	800dda2 <__retarget_lock_init_recursive>
 800dd14:	f7ff ff96 	bl	800dc44 <__sfp_lock_release>
 800dd18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dd1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dd20:	6025      	str	r5, [r4, #0]
 800dd22:	61a5      	str	r5, [r4, #24]
 800dd24:	2208      	movs	r2, #8
 800dd26:	4629      	mov	r1, r5
 800dd28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dd2c:	f7fb fd38 	bl	80097a0 <memset>
 800dd30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dd34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dd38:	4620      	mov	r0, r4
 800dd3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd3c:	3468      	adds	r4, #104	; 0x68
 800dd3e:	e7d9      	b.n	800dcf4 <__sfp+0x1c>
 800dd40:	2104      	movs	r1, #4
 800dd42:	4638      	mov	r0, r7
 800dd44:	f7ff ff62 	bl	800dc0c <__sfmoreglue>
 800dd48:	4604      	mov	r4, r0
 800dd4a:	6030      	str	r0, [r6, #0]
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	d1d5      	bne.n	800dcfc <__sfp+0x24>
 800dd50:	f7ff ff78 	bl	800dc44 <__sfp_lock_release>
 800dd54:	230c      	movs	r3, #12
 800dd56:	603b      	str	r3, [r7, #0]
 800dd58:	e7ee      	b.n	800dd38 <__sfp+0x60>
 800dd5a:	bf00      	nop
 800dd5c:	0800e0f8 	.word	0x0800e0f8
 800dd60:	ffff0001 	.word	0xffff0001

0800dd64 <_fwalk_reent>:
 800dd64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd68:	4606      	mov	r6, r0
 800dd6a:	4688      	mov	r8, r1
 800dd6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dd70:	2700      	movs	r7, #0
 800dd72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd76:	f1b9 0901 	subs.w	r9, r9, #1
 800dd7a:	d505      	bpl.n	800dd88 <_fwalk_reent+0x24>
 800dd7c:	6824      	ldr	r4, [r4, #0]
 800dd7e:	2c00      	cmp	r4, #0
 800dd80:	d1f7      	bne.n	800dd72 <_fwalk_reent+0xe>
 800dd82:	4638      	mov	r0, r7
 800dd84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd88:	89ab      	ldrh	r3, [r5, #12]
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d907      	bls.n	800dd9e <_fwalk_reent+0x3a>
 800dd8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd92:	3301      	adds	r3, #1
 800dd94:	d003      	beq.n	800dd9e <_fwalk_reent+0x3a>
 800dd96:	4629      	mov	r1, r5
 800dd98:	4630      	mov	r0, r6
 800dd9a:	47c0      	blx	r8
 800dd9c:	4307      	orrs	r7, r0
 800dd9e:	3568      	adds	r5, #104	; 0x68
 800dda0:	e7e9      	b.n	800dd76 <_fwalk_reent+0x12>

0800dda2 <__retarget_lock_init_recursive>:
 800dda2:	4770      	bx	lr

0800dda4 <__retarget_lock_acquire_recursive>:
 800dda4:	4770      	bx	lr

0800dda6 <__retarget_lock_release_recursive>:
 800dda6:	4770      	bx	lr

0800dda8 <__swhatbuf_r>:
 800dda8:	b570      	push	{r4, r5, r6, lr}
 800ddaa:	460e      	mov	r6, r1
 800ddac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddb0:	2900      	cmp	r1, #0
 800ddb2:	b096      	sub	sp, #88	; 0x58
 800ddb4:	4614      	mov	r4, r2
 800ddb6:	461d      	mov	r5, r3
 800ddb8:	da07      	bge.n	800ddca <__swhatbuf_r+0x22>
 800ddba:	2300      	movs	r3, #0
 800ddbc:	602b      	str	r3, [r5, #0]
 800ddbe:	89b3      	ldrh	r3, [r6, #12]
 800ddc0:	061a      	lsls	r2, r3, #24
 800ddc2:	d410      	bmi.n	800dde6 <__swhatbuf_r+0x3e>
 800ddc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddc8:	e00e      	b.n	800dde8 <__swhatbuf_r+0x40>
 800ddca:	466a      	mov	r2, sp
 800ddcc:	f000 f902 	bl	800dfd4 <_fstat_r>
 800ddd0:	2800      	cmp	r0, #0
 800ddd2:	dbf2      	blt.n	800ddba <__swhatbuf_r+0x12>
 800ddd4:	9a01      	ldr	r2, [sp, #4]
 800ddd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ddda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ddde:	425a      	negs	r2, r3
 800dde0:	415a      	adcs	r2, r3
 800dde2:	602a      	str	r2, [r5, #0]
 800dde4:	e7ee      	b.n	800ddc4 <__swhatbuf_r+0x1c>
 800dde6:	2340      	movs	r3, #64	; 0x40
 800dde8:	2000      	movs	r0, #0
 800ddea:	6023      	str	r3, [r4, #0]
 800ddec:	b016      	add	sp, #88	; 0x58
 800ddee:	bd70      	pop	{r4, r5, r6, pc}

0800ddf0 <__smakebuf_r>:
 800ddf0:	898b      	ldrh	r3, [r1, #12]
 800ddf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ddf4:	079d      	lsls	r5, r3, #30
 800ddf6:	4606      	mov	r6, r0
 800ddf8:	460c      	mov	r4, r1
 800ddfa:	d507      	bpl.n	800de0c <__smakebuf_r+0x1c>
 800ddfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de00:	6023      	str	r3, [r4, #0]
 800de02:	6123      	str	r3, [r4, #16]
 800de04:	2301      	movs	r3, #1
 800de06:	6163      	str	r3, [r4, #20]
 800de08:	b002      	add	sp, #8
 800de0a:	bd70      	pop	{r4, r5, r6, pc}
 800de0c:	ab01      	add	r3, sp, #4
 800de0e:	466a      	mov	r2, sp
 800de10:	f7ff ffca 	bl	800dda8 <__swhatbuf_r>
 800de14:	9900      	ldr	r1, [sp, #0]
 800de16:	4605      	mov	r5, r0
 800de18:	4630      	mov	r0, r6
 800de1a:	f7ff f97f 	bl	800d11c <_malloc_r>
 800de1e:	b948      	cbnz	r0, 800de34 <__smakebuf_r+0x44>
 800de20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de24:	059a      	lsls	r2, r3, #22
 800de26:	d4ef      	bmi.n	800de08 <__smakebuf_r+0x18>
 800de28:	f023 0303 	bic.w	r3, r3, #3
 800de2c:	f043 0302 	orr.w	r3, r3, #2
 800de30:	81a3      	strh	r3, [r4, #12]
 800de32:	e7e3      	b.n	800ddfc <__smakebuf_r+0xc>
 800de34:	4b0d      	ldr	r3, [pc, #52]	; (800de6c <__smakebuf_r+0x7c>)
 800de36:	62b3      	str	r3, [r6, #40]	; 0x28
 800de38:	89a3      	ldrh	r3, [r4, #12]
 800de3a:	6020      	str	r0, [r4, #0]
 800de3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de40:	81a3      	strh	r3, [r4, #12]
 800de42:	9b00      	ldr	r3, [sp, #0]
 800de44:	6163      	str	r3, [r4, #20]
 800de46:	9b01      	ldr	r3, [sp, #4]
 800de48:	6120      	str	r0, [r4, #16]
 800de4a:	b15b      	cbz	r3, 800de64 <__smakebuf_r+0x74>
 800de4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de50:	4630      	mov	r0, r6
 800de52:	f000 f8d1 	bl	800dff8 <_isatty_r>
 800de56:	b128      	cbz	r0, 800de64 <__smakebuf_r+0x74>
 800de58:	89a3      	ldrh	r3, [r4, #12]
 800de5a:	f023 0303 	bic.w	r3, r3, #3
 800de5e:	f043 0301 	orr.w	r3, r3, #1
 800de62:	81a3      	strh	r3, [r4, #12]
 800de64:	89a0      	ldrh	r0, [r4, #12]
 800de66:	4305      	orrs	r5, r0
 800de68:	81a5      	strh	r5, [r4, #12]
 800de6a:	e7cd      	b.n	800de08 <__smakebuf_r+0x18>
 800de6c:	0800dc01 	.word	0x0800dc01

0800de70 <_malloc_usable_size_r>:
 800de70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de74:	1f18      	subs	r0, r3, #4
 800de76:	2b00      	cmp	r3, #0
 800de78:	bfbc      	itt	lt
 800de7a:	580b      	ldrlt	r3, [r1, r0]
 800de7c:	18c0      	addlt	r0, r0, r3
 800de7e:	4770      	bx	lr

0800de80 <_raise_r>:
 800de80:	291f      	cmp	r1, #31
 800de82:	b538      	push	{r3, r4, r5, lr}
 800de84:	4604      	mov	r4, r0
 800de86:	460d      	mov	r5, r1
 800de88:	d904      	bls.n	800de94 <_raise_r+0x14>
 800de8a:	2316      	movs	r3, #22
 800de8c:	6003      	str	r3, [r0, #0]
 800de8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de92:	bd38      	pop	{r3, r4, r5, pc}
 800de94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800de96:	b112      	cbz	r2, 800de9e <_raise_r+0x1e>
 800de98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de9c:	b94b      	cbnz	r3, 800deb2 <_raise_r+0x32>
 800de9e:	4620      	mov	r0, r4
 800dea0:	f000 f830 	bl	800df04 <_getpid_r>
 800dea4:	462a      	mov	r2, r5
 800dea6:	4601      	mov	r1, r0
 800dea8:	4620      	mov	r0, r4
 800deaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800deae:	f000 b817 	b.w	800dee0 <_kill_r>
 800deb2:	2b01      	cmp	r3, #1
 800deb4:	d00a      	beq.n	800decc <_raise_r+0x4c>
 800deb6:	1c59      	adds	r1, r3, #1
 800deb8:	d103      	bne.n	800dec2 <_raise_r+0x42>
 800deba:	2316      	movs	r3, #22
 800debc:	6003      	str	r3, [r0, #0]
 800debe:	2001      	movs	r0, #1
 800dec0:	e7e7      	b.n	800de92 <_raise_r+0x12>
 800dec2:	2400      	movs	r4, #0
 800dec4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dec8:	4628      	mov	r0, r5
 800deca:	4798      	blx	r3
 800decc:	2000      	movs	r0, #0
 800dece:	e7e0      	b.n	800de92 <_raise_r+0x12>

0800ded0 <raise>:
 800ded0:	4b02      	ldr	r3, [pc, #8]	; (800dedc <raise+0xc>)
 800ded2:	4601      	mov	r1, r0
 800ded4:	6818      	ldr	r0, [r3, #0]
 800ded6:	f7ff bfd3 	b.w	800de80 <_raise_r>
 800deda:	bf00      	nop
 800dedc:	20000180 	.word	0x20000180

0800dee0 <_kill_r>:
 800dee0:	b538      	push	{r3, r4, r5, lr}
 800dee2:	4d07      	ldr	r5, [pc, #28]	; (800df00 <_kill_r+0x20>)
 800dee4:	2300      	movs	r3, #0
 800dee6:	4604      	mov	r4, r0
 800dee8:	4608      	mov	r0, r1
 800deea:	4611      	mov	r1, r2
 800deec:	602b      	str	r3, [r5, #0]
 800deee:	f7f3 fd73 	bl	80019d8 <_kill>
 800def2:	1c43      	adds	r3, r0, #1
 800def4:	d102      	bne.n	800defc <_kill_r+0x1c>
 800def6:	682b      	ldr	r3, [r5, #0]
 800def8:	b103      	cbz	r3, 800defc <_kill_r+0x1c>
 800defa:	6023      	str	r3, [r4, #0]
 800defc:	bd38      	pop	{r3, r4, r5, pc}
 800defe:	bf00      	nop
 800df00:	2000201c 	.word	0x2000201c

0800df04 <_getpid_r>:
 800df04:	f7f3 bd60 	b.w	80019c8 <_getpid>

0800df08 <__sread>:
 800df08:	b510      	push	{r4, lr}
 800df0a:	460c      	mov	r4, r1
 800df0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df10:	f000 f894 	bl	800e03c <_read_r>
 800df14:	2800      	cmp	r0, #0
 800df16:	bfab      	itete	ge
 800df18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800df1a:	89a3      	ldrhlt	r3, [r4, #12]
 800df1c:	181b      	addge	r3, r3, r0
 800df1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df22:	bfac      	ite	ge
 800df24:	6563      	strge	r3, [r4, #84]	; 0x54
 800df26:	81a3      	strhlt	r3, [r4, #12]
 800df28:	bd10      	pop	{r4, pc}

0800df2a <__swrite>:
 800df2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df2e:	461f      	mov	r7, r3
 800df30:	898b      	ldrh	r3, [r1, #12]
 800df32:	05db      	lsls	r3, r3, #23
 800df34:	4605      	mov	r5, r0
 800df36:	460c      	mov	r4, r1
 800df38:	4616      	mov	r6, r2
 800df3a:	d505      	bpl.n	800df48 <__swrite+0x1e>
 800df3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df40:	2302      	movs	r3, #2
 800df42:	2200      	movs	r2, #0
 800df44:	f000 f868 	bl	800e018 <_lseek_r>
 800df48:	89a3      	ldrh	r3, [r4, #12]
 800df4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df52:	81a3      	strh	r3, [r4, #12]
 800df54:	4632      	mov	r2, r6
 800df56:	463b      	mov	r3, r7
 800df58:	4628      	mov	r0, r5
 800df5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df5e:	f000 b817 	b.w	800df90 <_write_r>

0800df62 <__sseek>:
 800df62:	b510      	push	{r4, lr}
 800df64:	460c      	mov	r4, r1
 800df66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df6a:	f000 f855 	bl	800e018 <_lseek_r>
 800df6e:	1c43      	adds	r3, r0, #1
 800df70:	89a3      	ldrh	r3, [r4, #12]
 800df72:	bf15      	itete	ne
 800df74:	6560      	strne	r0, [r4, #84]	; 0x54
 800df76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df7e:	81a3      	strheq	r3, [r4, #12]
 800df80:	bf18      	it	ne
 800df82:	81a3      	strhne	r3, [r4, #12]
 800df84:	bd10      	pop	{r4, pc}

0800df86 <__sclose>:
 800df86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df8a:	f000 b813 	b.w	800dfb4 <_close_r>
	...

0800df90 <_write_r>:
 800df90:	b538      	push	{r3, r4, r5, lr}
 800df92:	4d07      	ldr	r5, [pc, #28]	; (800dfb0 <_write_r+0x20>)
 800df94:	4604      	mov	r4, r0
 800df96:	4608      	mov	r0, r1
 800df98:	4611      	mov	r1, r2
 800df9a:	2200      	movs	r2, #0
 800df9c:	602a      	str	r2, [r5, #0]
 800df9e:	461a      	mov	r2, r3
 800dfa0:	f7f3 fd51 	bl	8001a46 <_write>
 800dfa4:	1c43      	adds	r3, r0, #1
 800dfa6:	d102      	bne.n	800dfae <_write_r+0x1e>
 800dfa8:	682b      	ldr	r3, [r5, #0]
 800dfaa:	b103      	cbz	r3, 800dfae <_write_r+0x1e>
 800dfac:	6023      	str	r3, [r4, #0]
 800dfae:	bd38      	pop	{r3, r4, r5, pc}
 800dfb0:	2000201c 	.word	0x2000201c

0800dfb4 <_close_r>:
 800dfb4:	b538      	push	{r3, r4, r5, lr}
 800dfb6:	4d06      	ldr	r5, [pc, #24]	; (800dfd0 <_close_r+0x1c>)
 800dfb8:	2300      	movs	r3, #0
 800dfba:	4604      	mov	r4, r0
 800dfbc:	4608      	mov	r0, r1
 800dfbe:	602b      	str	r3, [r5, #0]
 800dfc0:	f7f3 fd5d 	bl	8001a7e <_close>
 800dfc4:	1c43      	adds	r3, r0, #1
 800dfc6:	d102      	bne.n	800dfce <_close_r+0x1a>
 800dfc8:	682b      	ldr	r3, [r5, #0]
 800dfca:	b103      	cbz	r3, 800dfce <_close_r+0x1a>
 800dfcc:	6023      	str	r3, [r4, #0]
 800dfce:	bd38      	pop	{r3, r4, r5, pc}
 800dfd0:	2000201c 	.word	0x2000201c

0800dfd4 <_fstat_r>:
 800dfd4:	b538      	push	{r3, r4, r5, lr}
 800dfd6:	4d07      	ldr	r5, [pc, #28]	; (800dff4 <_fstat_r+0x20>)
 800dfd8:	2300      	movs	r3, #0
 800dfda:	4604      	mov	r4, r0
 800dfdc:	4608      	mov	r0, r1
 800dfde:	4611      	mov	r1, r2
 800dfe0:	602b      	str	r3, [r5, #0]
 800dfe2:	f7f3 fd58 	bl	8001a96 <_fstat>
 800dfe6:	1c43      	adds	r3, r0, #1
 800dfe8:	d102      	bne.n	800dff0 <_fstat_r+0x1c>
 800dfea:	682b      	ldr	r3, [r5, #0]
 800dfec:	b103      	cbz	r3, 800dff0 <_fstat_r+0x1c>
 800dfee:	6023      	str	r3, [r4, #0]
 800dff0:	bd38      	pop	{r3, r4, r5, pc}
 800dff2:	bf00      	nop
 800dff4:	2000201c 	.word	0x2000201c

0800dff8 <_isatty_r>:
 800dff8:	b538      	push	{r3, r4, r5, lr}
 800dffa:	4d06      	ldr	r5, [pc, #24]	; (800e014 <_isatty_r+0x1c>)
 800dffc:	2300      	movs	r3, #0
 800dffe:	4604      	mov	r4, r0
 800e000:	4608      	mov	r0, r1
 800e002:	602b      	str	r3, [r5, #0]
 800e004:	f7f3 fd57 	bl	8001ab6 <_isatty>
 800e008:	1c43      	adds	r3, r0, #1
 800e00a:	d102      	bne.n	800e012 <_isatty_r+0x1a>
 800e00c:	682b      	ldr	r3, [r5, #0]
 800e00e:	b103      	cbz	r3, 800e012 <_isatty_r+0x1a>
 800e010:	6023      	str	r3, [r4, #0]
 800e012:	bd38      	pop	{r3, r4, r5, pc}
 800e014:	2000201c 	.word	0x2000201c

0800e018 <_lseek_r>:
 800e018:	b538      	push	{r3, r4, r5, lr}
 800e01a:	4d07      	ldr	r5, [pc, #28]	; (800e038 <_lseek_r+0x20>)
 800e01c:	4604      	mov	r4, r0
 800e01e:	4608      	mov	r0, r1
 800e020:	4611      	mov	r1, r2
 800e022:	2200      	movs	r2, #0
 800e024:	602a      	str	r2, [r5, #0]
 800e026:	461a      	mov	r2, r3
 800e028:	f7f3 fd50 	bl	8001acc <_lseek>
 800e02c:	1c43      	adds	r3, r0, #1
 800e02e:	d102      	bne.n	800e036 <_lseek_r+0x1e>
 800e030:	682b      	ldr	r3, [r5, #0]
 800e032:	b103      	cbz	r3, 800e036 <_lseek_r+0x1e>
 800e034:	6023      	str	r3, [r4, #0]
 800e036:	bd38      	pop	{r3, r4, r5, pc}
 800e038:	2000201c 	.word	0x2000201c

0800e03c <_read_r>:
 800e03c:	b538      	push	{r3, r4, r5, lr}
 800e03e:	4d07      	ldr	r5, [pc, #28]	; (800e05c <_read_r+0x20>)
 800e040:	4604      	mov	r4, r0
 800e042:	4608      	mov	r0, r1
 800e044:	4611      	mov	r1, r2
 800e046:	2200      	movs	r2, #0
 800e048:	602a      	str	r2, [r5, #0]
 800e04a:	461a      	mov	r2, r3
 800e04c:	f7f3 fcde 	bl	8001a0c <_read>
 800e050:	1c43      	adds	r3, r0, #1
 800e052:	d102      	bne.n	800e05a <_read_r+0x1e>
 800e054:	682b      	ldr	r3, [r5, #0]
 800e056:	b103      	cbz	r3, 800e05a <_read_r+0x1e>
 800e058:	6023      	str	r3, [r4, #0]
 800e05a:	bd38      	pop	{r3, r4, r5, pc}
 800e05c:	2000201c 	.word	0x2000201c

0800e060 <_init>:
 800e060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e062:	bf00      	nop
 800e064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e066:	bc08      	pop	{r3}
 800e068:	469e      	mov	lr, r3
 800e06a:	4770      	bx	lr

0800e06c <_fini>:
 800e06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e06e:	bf00      	nop
 800e070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e072:	bc08      	pop	{r3}
 800e074:	469e      	mov	lr, r3
 800e076:	4770      	bx	lr
