
dac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bf4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08009d80  08009d80  00019d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f78  08009f78  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009f78  08009f78  00019f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f80  08009f80  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f80  08009f80  00019f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f84  08009f84  00019f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009b0  20000090  0800a018  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a40  0800a018  00020a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bbce  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d1f  00000000  00000000  0003bc8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  0003f9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  00040c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002587a  00000000  00000000  00041da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017199  00000000  00000000  00067622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc877  00000000  00000000  0007e7bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015b032  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005468  00000000  00000000  0015b088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009d64 	.word	0x08009d64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009d64 	.word	0x08009d64

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b18:	f000 b96e 	b.w	8000df8 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	468c      	mov	ip, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 8083 	bne.w	8000c4a <__udivmoddi4+0x116>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4617      	mov	r7, r2
 8000b48:	d947      	bls.n	8000bda <__udivmoddi4+0xa6>
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	b142      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b50:	f1c2 0020 	rsb	r0, r2, #32
 8000b54:	fa24 f000 	lsr.w	r0, r4, r0
 8000b58:	4091      	lsls	r1, r2
 8000b5a:	4097      	lsls	r7, r2
 8000b5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b60:	4094      	lsls	r4, r2
 8000b62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b66:	0c23      	lsrs	r3, r4, #16
 8000b68:	fbbc f6f8 	udiv	r6, ip, r8
 8000b6c:	fa1f fe87 	uxth.w	lr, r7
 8000b70:	fb08 c116 	mls	r1, r8, r6, ip
 8000b74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b78:	fb06 f10e 	mul.w	r1, r6, lr
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x60>
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b86:	f080 8119 	bcs.w	8000dbc <__udivmoddi4+0x288>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 8116 	bls.w	8000dbc <__udivmoddi4+0x288>
 8000b90:	3e02      	subs	r6, #2
 8000b92:	443b      	add	r3, r7
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x8c>
 8000bac:	193c      	adds	r4, r7, r4
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bb2:	f080 8105 	bcs.w	8000dc0 <__udivmoddi4+0x28c>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	f240 8102 	bls.w	8000dc0 <__udivmoddi4+0x28c>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	443c      	add	r4, r7
 8000bc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc4:	eba4 040e 	sub.w	r4, r4, lr
 8000bc8:	2600      	movs	r6, #0
 8000bca:	b11d      	cbz	r5, 8000bd4 <__udivmoddi4+0xa0>
 8000bcc:	40d4      	lsrs	r4, r2
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	b902      	cbnz	r2, 8000bde <__udivmoddi4+0xaa>
 8000bdc:	deff      	udf	#255	; 0xff
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d150      	bne.n	8000c88 <__udivmoddi4+0x154>
 8000be6:	1bcb      	subs	r3, r1, r7
 8000be8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bec:	fa1f f887 	uxth.w	r8, r7
 8000bf0:	2601      	movs	r6, #1
 8000bf2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bf6:	0c21      	lsrs	r1, r4, #16
 8000bf8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c00:	fb08 f30c 	mul.w	r3, r8, ip
 8000c04:	428b      	cmp	r3, r1
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0xe4>
 8000c08:	1879      	adds	r1, r7, r1
 8000c0a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0xe2>
 8000c10:	428b      	cmp	r3, r1
 8000c12:	f200 80e9 	bhi.w	8000de8 <__udivmoddi4+0x2b4>
 8000c16:	4684      	mov	ip, r0
 8000c18:	1ac9      	subs	r1, r1, r3
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c28:	fb08 f800 	mul.w	r8, r8, r0
 8000c2c:	45a0      	cmp	r8, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x10c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x10a>
 8000c38:	45a0      	cmp	r8, r4
 8000c3a:	f200 80d9 	bhi.w	8000df0 <__udivmoddi4+0x2bc>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 0408 	sub.w	r4, r4, r8
 8000c44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c48:	e7bf      	b.n	8000bca <__udivmoddi4+0x96>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0x12e>
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	f000 80b1 	beq.w	8000db6 <__udivmoddi4+0x282>
 8000c54:	2600      	movs	r6, #0
 8000c56:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	fab3 f683 	clz	r6, r3
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d14a      	bne.n	8000d00 <__udivmoddi4+0x1cc>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0x140>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 80b8 	bhi.w	8000de4 <__udivmoddi4+0x2b0>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb61 0103 	sbc.w	r1, r1, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d0a8      	beq.n	8000bd4 <__udivmoddi4+0xa0>
 8000c82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c86:	e7a5      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c90:	4097      	lsls	r7, r2
 8000c92:	fa01 f002 	lsl.w	r0, r1, r2
 8000c96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9a:	40d9      	lsrs	r1, r3
 8000c9c:	4330      	orrs	r0, r6
 8000c9e:	0c03      	lsrs	r3, r0, #16
 8000ca0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ca4:	fa1f f887 	uxth.w	r8, r7
 8000ca8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb0:	fb06 f108 	mul.w	r1, r6, r8
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cba:	d909      	bls.n	8000cd0 <__udivmoddi4+0x19c>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000cc2:	f080 808d 	bcs.w	8000de0 <__udivmoddi4+0x2ac>
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	f240 808a 	bls.w	8000de0 <__udivmoddi4+0x2ac>
 8000ccc:	3e02      	subs	r6, #2
 8000cce:	443b      	add	r3, r7
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b281      	uxth	r1, r0
 8000cd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce0:	fb00 f308 	mul.w	r3, r0, r8
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ce8:	1879      	adds	r1, r7, r1
 8000cea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cee:	d273      	bcs.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d971      	bls.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4439      	add	r1, r7
 8000cf8:	1acb      	subs	r3, r1, r3
 8000cfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cfe:	e778      	b.n	8000bf2 <__udivmoddi4+0xbe>
 8000d00:	f1c6 0c20 	rsb	ip, r6, #32
 8000d04:	fa03 f406 	lsl.w	r4, r3, r6
 8000d08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d0c:	431c      	orrs	r4, r3
 8000d0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d12:	fa01 f306 	lsl.w	r3, r1, r6
 8000d16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d1e:	431f      	orrs	r7, r3
 8000d20:	0c3b      	lsrs	r3, r7, #16
 8000d22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d26:	fa1f f884 	uxth.w	r8, r4
 8000d2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d32:	fb09 fa08 	mul.w	sl, r9, r8
 8000d36:	458a      	cmp	sl, r1
 8000d38:	fa02 f206 	lsl.w	r2, r2, r6
 8000d3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x220>
 8000d42:	1861      	adds	r1, r4, r1
 8000d44:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d48:	d248      	bcs.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4a:	458a      	cmp	sl, r1
 8000d4c:	d946      	bls.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d52:	4421      	add	r1, r4
 8000d54:	eba1 010a 	sub.w	r1, r1, sl
 8000d58:	b2bf      	uxth	r7, r7
 8000d5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d66:	fb00 f808 	mul.w	r8, r0, r8
 8000d6a:	45b8      	cmp	r8, r7
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x24a>
 8000d6e:	19e7      	adds	r7, r4, r7
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d22e      	bcs.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d76:	45b8      	cmp	r8, r7
 8000d78:	d92c      	bls.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4427      	add	r7, r4
 8000d7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d82:	eba7 0708 	sub.w	r7, r7, r8
 8000d86:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8a:	454f      	cmp	r7, r9
 8000d8c:	46c6      	mov	lr, r8
 8000d8e:	4649      	mov	r1, r9
 8000d90:	d31a      	bcc.n	8000dc8 <__udivmoddi4+0x294>
 8000d92:	d017      	beq.n	8000dc4 <__udivmoddi4+0x290>
 8000d94:	b15d      	cbz	r5, 8000dae <__udivmoddi4+0x27a>
 8000d96:	ebb3 020e 	subs.w	r2, r3, lr
 8000d9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000da2:	40f2      	lsrs	r2, r6
 8000da4:	ea4c 0202 	orr.w	r2, ip, r2
 8000da8:	40f7      	lsrs	r7, r6
 8000daa:	e9c5 2700 	strd	r2, r7, [r5]
 8000dae:	2600      	movs	r6, #0
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	462e      	mov	r6, r5
 8000db8:	4628      	mov	r0, r5
 8000dba:	e70b      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000dbc:	4606      	mov	r6, r0
 8000dbe:	e6e9      	b.n	8000b94 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fd      	b.n	8000bc0 <__udivmoddi4+0x8c>
 8000dc4:	4543      	cmp	r3, r8
 8000dc6:	d2e5      	bcs.n	8000d94 <__udivmoddi4+0x260>
 8000dc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	e7df      	b.n	8000d94 <__udivmoddi4+0x260>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e7d2      	b.n	8000d7e <__udivmoddi4+0x24a>
 8000dd8:	4660      	mov	r0, ip
 8000dda:	e78d      	b.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ddc:	4681      	mov	r9, r0
 8000dde:	e7b9      	b.n	8000d54 <__udivmoddi4+0x220>
 8000de0:	4666      	mov	r6, ip
 8000de2:	e775      	b.n	8000cd0 <__udivmoddi4+0x19c>
 8000de4:	4630      	mov	r0, r6
 8000de6:	e74a      	b.n	8000c7e <__udivmoddi4+0x14a>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	4439      	add	r1, r7
 8000dee:	e713      	b.n	8000c18 <__udivmoddi4+0xe4>
 8000df0:	3802      	subs	r0, #2
 8000df2:	443c      	add	r4, r7
 8000df4:	e724      	b.n	8000c40 <__udivmoddi4+0x10c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	0000      	movs	r0, r0
	...

08000e00 <calcsin>:
uint32_t sine_val[100];

#define PI 3.1415926

void calcsin ()
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
	for (int i=0; i<100; i++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	e03a      	b.n	8000e82 <calcsin+0x82>
	{
		sine_val[i] = ((sin(i*2*PI/100) + 1)*(4096/2));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fb2b 	bl	800046c <__aeabi_i2d>
 8000e16:	a324      	add	r3, pc, #144	; (adr r3, 8000ea8 <calcsin+0xa8>)
 8000e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1c:	f7ff fb90 	bl	8000540 <__aeabi_dmul>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4610      	mov	r0, r2
 8000e26:	4619      	mov	r1, r3
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <calcsin+0x98>)
 8000e2e:	f7ff fcb1 	bl	8000794 <__aeabi_ddiv>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	ec43 2b17 	vmov	d7, r2, r3
 8000e3a:	eeb0 0a47 	vmov.f32	s0, s14
 8000e3e:	eef0 0a67 	vmov.f32	s1, s15
 8000e42:	f007 ff59 	bl	8008cf8 <sin>
 8000e46:	ec51 0b10 	vmov	r0, r1, d0
 8000e4a:	f04f 0200 	mov.w	r2, #0
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <calcsin+0x9c>)
 8000e50:	f7ff f9c0 	bl	80001d4 <__adddf3>
 8000e54:	4602      	mov	r2, r0
 8000e56:	460b      	mov	r3, r1
 8000e58:	4610      	mov	r0, r2
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <calcsin+0xa0>)
 8000e62:	f7ff fb6d 	bl	8000540 <__aeabi_dmul>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f7ff fe29 	bl	8000ac4 <__aeabi_d2uiz>
 8000e72:	4602      	mov	r2, r0
 8000e74:	490b      	ldr	r1, [pc, #44]	; (8000ea4 <calcsin+0xa4>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<100; i++)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b63      	cmp	r3, #99	; 0x63
 8000e86:	ddc1      	ble.n	8000e0c <calcsin+0xc>
	}
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	f3af 8000 	nop.w
 8000e98:	40590000 	.word	0x40590000
 8000e9c:	3ff00000 	.word	0x3ff00000
 8000ea0:	40a00000 	.word	0x40a00000
 8000ea4:	200000bc 	.word	0x200000bc
 8000ea8:	4d12d84a 	.word	0x4d12d84a
 8000eac:	400921fb 	.word	0x400921fb

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb6:	f000 fc61 	bl	800177c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eba:	f000 f823 	bl	8000f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebe:	f000 f973 	bl	80011a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec2:	f000 f951 	bl	8001168 <MX_DMA_Init>
  MX_USB_HOST_Init();
 8000ec6:	f007 fb03 	bl	80084d0 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000eca:	f000 f885 	bl	8000fd8 <MX_ADC1_Init>
  MX_DAC_Init();
 8000ece:	f000 f8d5 	bl	800107c <MX_DAC_Init>
  MX_TIM2_Init();
 8000ed2:	f000 f8fd 	bl	80010d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000ed6:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <main+0x48>)
 8000ed8:	f004 f968 	bl	80051ac <HAL_TIM_Base_Start>

  calcsin();
 8000edc:	f7ff ff90 	bl	8000e00 <calcsin>

  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sine_val, 100, DAC_ALIGN_12B_R);
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2364      	movs	r3, #100	; 0x64
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <main+0x4c>)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <main+0x50>)
 8000eec:	f001 f872 	bl	8001fd4 <HAL_DAC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000ef0:	f007 fb14 	bl	800851c <MX_USB_HOST_Process>
 8000ef4:	e7fc      	b.n	8000ef0 <main+0x40>
 8000ef6:	bf00      	nop
 8000ef8:	20000308 	.word	0x20000308
 8000efc:	200000bc 	.word	0x200000bc
 8000f00:	200002f4 	.word	0x200002f4

08000f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b094      	sub	sp, #80	; 0x50
 8000f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0a:	f107 0320 	add.w	r3, r7, #32
 8000f0e:	2230      	movs	r2, #48	; 0x30
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f007 fe1e 	bl	8008b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <SystemClock_Config+0xcc>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	4a27      	ldr	r2, [pc, #156]	; (8000fd0 <SystemClock_Config+0xcc>)
 8000f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f36:	6413      	str	r3, [r2, #64]	; 0x40
 8000f38:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <SystemClock_Config+0xcc>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <SystemClock_Config+0xd0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a21      	ldr	r2, [pc, #132]	; (8000fd4 <SystemClock_Config+0xd0>)
 8000f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <SystemClock_Config+0xd0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f60:	2301      	movs	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f74:	2308      	movs	r3, #8
 8000f76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f78:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f82:	2307      	movs	r3, #7
 8000f84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f86:	f107 0320 	add.w	r3, r7, #32
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f003 fc7e 	bl	800488c <HAL_RCC_OscConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f96:	f000 fa37 	bl	8001408 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fa6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000faa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000fac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fb0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	2105      	movs	r1, #5
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f003 fedf 	bl	8004d7c <HAL_RCC_ClockConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fc4:	f000 fa20 	bl	8001408 <Error_Handler>
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3750      	adds	r7, #80	; 0x50
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40007000 	.word	0x40007000

08000fd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fde:	463b      	mov	r3, r7
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fea:	4b21      	ldr	r3, [pc, #132]	; (8001070 <MX_ADC1_Init+0x98>)
 8000fec:	4a21      	ldr	r2, [pc, #132]	; (8001074 <MX_ADC1_Init+0x9c>)
 8000fee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <MX_ADC1_Init+0x98>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ff6:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <MX_ADC1_Init+0x98>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_ADC1_Init+0x98>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001002:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <MX_ADC1_Init+0x98>)
 8001004:	2200      	movs	r2, #0
 8001006:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_ADC1_Init+0x98>)
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_ADC1_Init+0x98>)
 8001012:	2200      	movs	r2, #0
 8001014:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <MX_ADC1_Init+0x98>)
 8001018:	4a17      	ldr	r2, [pc, #92]	; (8001078 <MX_ADC1_Init+0xa0>)
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_ADC1_Init+0x98>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <MX_ADC1_Init+0x98>)
 8001024:	2201      	movs	r2, #1
 8001026:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_ADC1_Init+0x98>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_ADC1_Init+0x98>)
 8001032:	2201      	movs	r2, #1
 8001034:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001036:	480e      	ldr	r0, [pc, #56]	; (8001070 <MX_ADC1_Init+0x98>)
 8001038:	f000 fc36 	bl	80018a8 <HAL_ADC_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001042:	f000 f9e1 	bl	8001408 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001046:	2301      	movs	r3, #1
 8001048:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800104a:	2301      	movs	r3, #1
 800104c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001052:	463b      	mov	r3, r7
 8001054:	4619      	mov	r1, r3
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <MX_ADC1_Init+0x98>)
 8001058:	f000 fc6a 	bl	8001930 <HAL_ADC_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001062:	f000 f9d1 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200002ac 	.word	0x200002ac
 8001074:	40012000 	.word	0x40012000
 8001078:	0f000001 	.word	0x0f000001

0800107c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001082:	463b      	mov	r3, r7
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_DAC_Init+0x4c>)
 800108c:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <MX_DAC_Init+0x50>)
 800108e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001090:	480d      	ldr	r0, [pc, #52]	; (80010c8 <MX_DAC_Init+0x4c>)
 8001092:	f000 ff7c 	bl	8001f8e <HAL_DAC_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800109c:	f000 f9b4 	bl	8001408 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80010a0:	2324      	movs	r3, #36	; 0x24
 80010a2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	2200      	movs	r2, #0
 80010ac:	4619      	mov	r1, r3
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <MX_DAC_Init+0x4c>)
 80010b0:	f001 f87c 	bl	80021ac <HAL_DAC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80010ba:	f000 f9a5 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200002f4 	.word	0x200002f4
 80010cc:	40007400 	.word	0x40007400

080010d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d6:	f107 0308 	add.w	r3, r7, #8
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e4:	463b      	mov	r3, r7
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <MX_TIM2_Init+0x94>)
 80010ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_TIM2_Init+0x94>)
 80010f6:	2253      	movs	r2, #83	; 0x53
 80010f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <MX_TIM2_Init+0x94>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001100:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_TIM2_Init+0x94>)
 8001102:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001106:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_TIM2_Init+0x94>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_TIM2_Init+0x94>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001114:	4813      	ldr	r0, [pc, #76]	; (8001164 <MX_TIM2_Init+0x94>)
 8001116:	f003 fff9 	bl	800510c <HAL_TIM_Base_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001120:	f000 f972 	bl	8001408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001128:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	4619      	mov	r1, r3
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <MX_TIM2_Init+0x94>)
 8001132:	f004 f8a3 	bl	800527c <HAL_TIM_ConfigClockSource>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800113c:	f000 f964 	bl	8001408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_TIM2_Init+0x94>)
 800114e:	f004 fa97 	bl	8005680 <HAL_TIMEx_MasterConfigSynchronization>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001158:	f000 f956 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000308 	.word	0x20000308

08001168 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_DMA_Init+0x3c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <MX_DMA_Init+0x3c>)
 8001178:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_DMA_Init+0x3c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2010      	movs	r0, #16
 8001190:	f000 fec7 	bl	8001f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001194:	2010      	movs	r0, #16
 8001196:	f000 fee0 	bl	8001f5a <HAL_NVIC_EnableIRQ>

}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800

080011a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	; 0x30
 80011ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
 80011c2:	4b8b      	ldr	r3, [pc, #556]	; (80013f0 <MX_GPIO_Init+0x248>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a8a      	ldr	r2, [pc, #552]	; (80013f0 <MX_GPIO_Init+0x248>)
 80011c8:	f043 0310 	orr.w	r3, r3, #16
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b88      	ldr	r3, [pc, #544]	; (80013f0 <MX_GPIO_Init+0x248>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0310 	and.w	r3, r3, #16
 80011d6:	61bb      	str	r3, [r7, #24]
 80011d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	4b84      	ldr	r3, [pc, #528]	; (80013f0 <MX_GPIO_Init+0x248>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a83      	ldr	r2, [pc, #524]	; (80013f0 <MX_GPIO_Init+0x248>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b81      	ldr	r3, [pc, #516]	; (80013f0 <MX_GPIO_Init+0x248>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b7d      	ldr	r3, [pc, #500]	; (80013f0 <MX_GPIO_Init+0x248>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a7c      	ldr	r2, [pc, #496]	; (80013f0 <MX_GPIO_Init+0x248>)
 8001200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b7a      	ldr	r3, [pc, #488]	; (80013f0 <MX_GPIO_Init+0x248>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b76      	ldr	r3, [pc, #472]	; (80013f0 <MX_GPIO_Init+0x248>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a75      	ldr	r2, [pc, #468]	; (80013f0 <MX_GPIO_Init+0x248>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b73      	ldr	r3, [pc, #460]	; (80013f0 <MX_GPIO_Init+0x248>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	4b6f      	ldr	r3, [pc, #444]	; (80013f0 <MX_GPIO_Init+0x248>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a6e      	ldr	r2, [pc, #440]	; (80013f0 <MX_GPIO_Init+0x248>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b6c      	ldr	r3, [pc, #432]	; (80013f0 <MX_GPIO_Init+0x248>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b68      	ldr	r3, [pc, #416]	; (80013f0 <MX_GPIO_Init+0x248>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a67      	ldr	r2, [pc, #412]	; (80013f0 <MX_GPIO_Init+0x248>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b65      	ldr	r3, [pc, #404]	; (80013f0 <MX_GPIO_Init+0x248>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2108      	movs	r1, #8
 800126a:	4862      	ldr	r0, [pc, #392]	; (80013f4 <MX_GPIO_Init+0x24c>)
 800126c:	f001 fd84 	bl	8002d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	2101      	movs	r1, #1
 8001274:	4860      	ldr	r0, [pc, #384]	; (80013f8 <MX_GPIO_Init+0x250>)
 8001276:	f001 fd7f 	bl	8002d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800127a:	2200      	movs	r2, #0
 800127c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001280:	485e      	ldr	r0, [pc, #376]	; (80013fc <MX_GPIO_Init+0x254>)
 8001282:	f001 fd79 	bl	8002d78 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001286:	2308      	movs	r3, #8
 8001288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	4855      	ldr	r0, [pc, #340]	; (80013f4 <MX_GPIO_Init+0x24c>)
 800129e:	f001 fbcf 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012b2:	f107 031c 	add.w	r3, r7, #28
 80012b6:	4619      	mov	r1, r3
 80012b8:	484f      	ldr	r0, [pc, #316]	; (80013f8 <MX_GPIO_Init+0x250>)
 80012ba:	f001 fbc1 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80012be:	2308      	movs	r3, #8
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ce:	2305      	movs	r3, #5
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	4847      	ldr	r0, [pc, #284]	; (80013f8 <MX_GPIO_Init+0x250>)
 80012da:	f001 fbb1 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012de:	2301      	movs	r3, #1
 80012e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012e2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80012e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	4843      	ldr	r0, [pc, #268]	; (8001400 <MX_GPIO_Init+0x258>)
 80012f4:	f001 fba4 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80012f8:	23c0      	movs	r3, #192	; 0xc0
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001308:	2305      	movs	r3, #5
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	483b      	ldr	r0, [pc, #236]	; (8001400 <MX_GPIO_Init+0x258>)
 8001314:	f001 fb94 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001318:	2304      	movs	r3, #4
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131c:	2300      	movs	r3, #0
 800131e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	4836      	ldr	r0, [pc, #216]	; (8001404 <MX_GPIO_Init+0x25c>)
 800132c:	f001 fb88 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001342:	2305      	movs	r3, #5
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4619      	mov	r1, r3
 800134c:	482d      	ldr	r0, [pc, #180]	; (8001404 <MX_GPIO_Init+0x25c>)
 800134e:	f001 fb77 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001352:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001356:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4824      	ldr	r0, [pc, #144]	; (80013fc <MX_GPIO_Init+0x254>)
 800136c:	f001 fb68 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001370:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001382:	2306      	movs	r3, #6
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	4619      	mov	r1, r3
 800138c:	481a      	ldr	r0, [pc, #104]	; (80013f8 <MX_GPIO_Init+0x250>)
 800138e:	f001 fb57 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001392:	2320      	movs	r3, #32
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	4815      	ldr	r0, [pc, #84]	; (80013fc <MX_GPIO_Init+0x254>)
 80013a6:	f001 fb4b 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80013aa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80013ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b0:	2312      	movs	r3, #18
 80013b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013bc:	2304      	movs	r3, #4
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	480f      	ldr	r0, [pc, #60]	; (8001404 <MX_GPIO_Init+0x25c>)
 80013c8:	f001 fb3a 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013d0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80013d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	4804      	ldr	r0, [pc, #16]	; (80013f4 <MX_GPIO_Init+0x24c>)
 80013e2:	f001 fb2d 	bl	8002a40 <HAL_GPIO_Init>

}
 80013e6:	bf00      	nop
 80013e8:	3730      	adds	r7, #48	; 0x30
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020c00 	.word	0x40020c00
 8001400:	40020000 	.word	0x40020000
 8001404:	40020400 	.word	0x40020400

08001408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800140c:	b672      	cpsid	i
}
 800140e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001410:	e7fe      	b.n	8001410 <Error_Handler+0x8>
	...

08001414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_MspInit+0x4c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <HAL_MspInit+0x4c>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <HAL_MspInit+0x4c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_MspInit+0x4c>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	4a08      	ldr	r2, [pc, #32]	; (8001460 <HAL_MspInit+0x4c>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_MspInit+0x4c>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001452:	2007      	movs	r0, #7
 8001454:	f000 fd5a 	bl	8001f0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40023800 	.word	0x40023800

08001464 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <HAL_ADC_MspInit+0x7c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d127      	bne.n	80014d6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <HAL_ADC_MspInit+0x80>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	4a15      	ldr	r2, [pc, #84]	; (80014e4 <HAL_ADC_MspInit+0x80>)
 8001490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001494:	6453      	str	r3, [r2, #68]	; 0x44
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_ADC_MspInit+0x80>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_ADC_MspInit+0x80>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <HAL_ADC_MspInit+0x80>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <HAL_ADC_MspInit+0x80>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014be:	2302      	movs	r3, #2
 80014c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c2:	2303      	movs	r3, #3
 80014c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <HAL_ADC_MspInit+0x84>)
 80014d2:	f001 fab5 	bl	8002a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	; 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40012000 	.word	0x40012000
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020000 	.word	0x40020000

080014ec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a2f      	ldr	r2, [pc, #188]	; (80015c8 <HAL_DAC_MspInit+0xdc>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d158      	bne.n	80015c0 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <HAL_DAC_MspInit+0xe0>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a2d      	ldr	r2, [pc, #180]	; (80015cc <HAL_DAC_MspInit+0xe0>)
 8001518:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <HAL_DAC_MspInit+0xe0>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b27      	ldr	r3, [pc, #156]	; (80015cc <HAL_DAC_MspInit+0xe0>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a26      	ldr	r2, [pc, #152]	; (80015cc <HAL_DAC_MspInit+0xe0>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b24      	ldr	r3, [pc, #144]	; (80015cc <HAL_DAC_MspInit+0xe0>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001546:	2310      	movs	r3, #16
 8001548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800154a:	2303      	movs	r3, #3
 800154c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	481d      	ldr	r0, [pc, #116]	; (80015d0 <HAL_DAC_MspInit+0xe4>)
 800155a:	f001 fa71 	bl	8002a40 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <HAL_DAC_MspInit+0xe8>)
 8001560:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <HAL_DAC_MspInit+0xec>)
 8001562:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_DAC_MspInit+0xe8>)
 8001566:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800156a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <HAL_DAC_MspInit+0xe8>)
 800156e:	2240      	movs	r2, #64	; 0x40
 8001570:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_DAC_MspInit+0xe8>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <HAL_DAC_MspInit+0xe8>)
 800157a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <HAL_DAC_MspInit+0xe8>)
 8001582:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001586:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_DAC_MspInit+0xe8>)
 800158a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_DAC_MspInit+0xe8>)
 8001592:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001596:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <HAL_DAC_MspInit+0xe8>)
 800159a:	2200      	movs	r2, #0
 800159c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <HAL_DAC_MspInit+0xe8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80015a4:	480b      	ldr	r0, [pc, #44]	; (80015d4 <HAL_DAC_MspInit+0xe8>)
 80015a6:	f000 fedb 	bl	8002360 <HAL_DMA_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80015b0:	f7ff ff2a 	bl	8001408 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <HAL_DAC_MspInit+0xe8>)
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	4a06      	ldr	r2, [pc, #24]	; (80015d4 <HAL_DAC_MspInit+0xe8>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80015c0:	bf00      	nop
 80015c2:	3728      	adds	r7, #40	; 0x28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40007400 	.word	0x40007400
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	2000024c 	.word	0x2000024c
 80015d8:	40026088 	.word	0x40026088

080015dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ec:	d10d      	bne.n	800160a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_TIM_Base_MspInit+0x3c>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <HAL_TIM_Base_MspInit+0x3c>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6413      	str	r3, [r2, #64]	; 0x40
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_TIM_Base_MspInit+0x3c>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800160a:	bf00      	nop
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800

0800161c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <NMI_Handler+0x4>

08001622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <MemManage_Handler+0x4>

0800162e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <BusFault_Handler+0x4>

08001634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <UsageFault_Handler+0x4>

0800163a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001668:	f000 f8da 	bl	8001820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <DMA1_Stream5_IRQHandler+0x10>)
 8001676:	f000 ff79 	bl	800256c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000024c 	.word	0x2000024c

08001684 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <OTG_FS_IRQHandler+0x10>)
 800168a:	f001 fdf9 	bl	8003280 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000072c 	.word	0x2000072c

08001698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <_sbrk+0x5c>)
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <_sbrk+0x60>)
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <_sbrk+0x64>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	; (8001700 <_sbrk+0x68>)
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d207      	bcs.n	80016d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c8:	f007 fa0a 	bl	8008ae0 <__errno>
 80016cc:	4603      	mov	r3, r0
 80016ce:	220c      	movs	r2, #12
 80016d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016d6:	e009      	b.n	80016ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <_sbrk+0x64>)
 80016e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ea:	68fb      	ldr	r3, [r7, #12]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20020000 	.word	0x20020000
 80016f8:	00000400 	.word	0x00000400
 80016fc:	200000ac 	.word	0x200000ac
 8001700:	20000a40 	.word	0x20000a40

08001704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <SystemInit+0x20>)
 800170a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <SystemInit+0x20>)
 8001710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001760 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800172c:	480d      	ldr	r0, [pc, #52]	; (8001764 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800172e:	490e      	ldr	r1, [pc, #56]	; (8001768 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001730:	4a0e      	ldr	r2, [pc, #56]	; (800176c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001734:	e002      	b.n	800173c <LoopCopyDataInit>

08001736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173a:	3304      	adds	r3, #4

0800173c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800173c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001740:	d3f9      	bcc.n	8001736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001744:	4c0b      	ldr	r4, [pc, #44]	; (8001774 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001748:	e001      	b.n	800174e <LoopFillZerobss>

0800174a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800174c:	3204      	adds	r2, #4

0800174e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001750:	d3fb      	bcc.n	800174a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001752:	f7ff ffd7 	bl	8001704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001756:	f007 f9c9 	bl	8008aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175a:	f7ff fba9 	bl	8000eb0 <main>
  bx  lr    
 800175e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001760:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001768:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800176c:	08009f88 	.word	0x08009f88
  ldr r2, =_sbss
 8001770:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001774:	20000a40 	.word	0x20000a40

08001778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC_IRQHandler>
	...

0800177c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <HAL_Init+0x40>)
 8001786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_Init+0x40>)
 8001792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_Init+0x40>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a07      	ldr	r2, [pc, #28]	; (80017bc <HAL_Init+0x40>)
 800179e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f000 fbb1 	bl	8001f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 f808 	bl	80017c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b0:	f7ff fe30 	bl	8001414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023c00 	.word	0x40023c00

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x54>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x58>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 fbc9 	bl	8001f76 <HAL_SYSTICK_Config>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00e      	b.n	800180c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d80a      	bhi.n	800180a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f4:	2200      	movs	r2, #0
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017fc:	f000 fb91 	bl	8001f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001800:	4a06      	ldr	r2, [pc, #24]	; (800181c <HAL_InitTick+0x5c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000000 	.word	0x20000000
 8001818:	20000008 	.word	0x20000008
 800181c:	20000004 	.word	0x20000004

08001820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x20>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x24>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_IncTick+0x24>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000008 	.word	0x20000008
 8001844:	20000350 	.word	0x20000350

08001848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_GetTick+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000350 	.word	0x20000350

08001860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff ffee 	bl	8001848 <HAL_GetTick>
 800186c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001878:	d005      	beq.n	8001886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_Delay+0x44>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001886:	bf00      	nop
 8001888:	f7ff ffde 	bl	8001848 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	429a      	cmp	r2, r3
 8001896:	d8f7      	bhi.n	8001888 <HAL_Delay+0x28>
  {
  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000008 	.word	0x20000008

080018a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e033      	b.n	8001926 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d109      	bne.n	80018da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fdcc 	bl	8001464 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d118      	bne.n	8001918 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018ee:	f023 0302 	bic.w	r3, r3, #2
 80018f2:	f043 0202 	orr.w	r2, r3, #2
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f93a 	bl	8001b74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f023 0303 	bic.w	r3, r3, #3
 800190e:	f043 0201 	orr.w	r2, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
 8001916:	e001      	b.n	800191c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_ADC_ConfigChannel+0x1c>
 8001948:	2302      	movs	r3, #2
 800194a:	e105      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x228>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b09      	cmp	r3, #9
 800195a:	d925      	bls.n	80019a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68d9      	ldr	r1, [r3, #12]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	3b1e      	subs	r3, #30
 8001972:	2207      	movs	r2, #7
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43da      	mvns	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	400a      	ands	r2, r1
 8001980:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68d9      	ldr	r1, [r3, #12]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	b29b      	uxth	r3, r3
 8001992:	4618      	mov	r0, r3
 8001994:	4603      	mov	r3, r0
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4403      	add	r3, r0
 800199a:	3b1e      	subs	r3, #30
 800199c:	409a      	lsls	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	e022      	b.n	80019ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6919      	ldr	r1, [r3, #16]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	4613      	mov	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4413      	add	r3, r2
 80019bc:	2207      	movs	r2, #7
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43da      	mvns	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	400a      	ands	r2, r1
 80019ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6919      	ldr	r1, [r3, #16]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	4618      	mov	r0, r3
 80019de:	4603      	mov	r3, r0
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4403      	add	r3, r0
 80019e4:	409a      	lsls	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d824      	bhi.n	8001a40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	3b05      	subs	r3, #5
 8001a08:	221f      	movs	r2, #31
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	400a      	ands	r2, r1
 8001a16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4618      	mov	r0, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	3b05      	subs	r3, #5
 8001a32:	fa00 f203 	lsl.w	r2, r0, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a3e:	e04c      	b.n	8001ada <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b0c      	cmp	r3, #12
 8001a46:	d824      	bhi.n	8001a92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	3b23      	subs	r3, #35	; 0x23
 8001a5a:	221f      	movs	r2, #31
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43da      	mvns	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	400a      	ands	r2, r1
 8001a68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	3b23      	subs	r3, #35	; 0x23
 8001a84:	fa00 f203 	lsl.w	r2, r0, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a90:	e023      	b.n	8001ada <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3b41      	subs	r3, #65	; 0x41
 8001aa4:	221f      	movs	r2, #31
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	400a      	ands	r2, r1
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	3b41      	subs	r3, #65	; 0x41
 8001ace:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ada:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <HAL_ADC_ConfigChannel+0x234>)
 8001adc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a21      	ldr	r2, [pc, #132]	; (8001b68 <HAL_ADC_ConfigChannel+0x238>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d109      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x1cc>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b12      	cmp	r3, #18
 8001aee:	d105      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <HAL_ADC_ConfigChannel+0x238>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d123      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x21e>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b10      	cmp	r3, #16
 8001b0c:	d003      	beq.n	8001b16 <HAL_ADC_ConfigChannel+0x1e6>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b11      	cmp	r3, #17
 8001b14:	d11b      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b10      	cmp	r3, #16
 8001b28:	d111      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_ADC_ConfigChannel+0x23c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <HAL_ADC_ConfigChannel+0x240>)
 8001b30:	fba2 2303 	umull	r2, r3, r2, r3
 8001b34:	0c9a      	lsrs	r2, r3, #18
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b40:	e002      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f9      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40012300 	.word	0x40012300
 8001b68:	40012000 	.word	0x40012000
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	431bde83 	.word	0x431bde83

08001b74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b7c:	4b79      	ldr	r3, [pc, #484]	; (8001d64 <ADC_Init+0x1f0>)
 8001b7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	431a      	orrs	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ba8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6859      	ldr	r1, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	021a      	lsls	r2, r3, #8
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6859      	ldr	r1, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6899      	ldr	r1, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	4a58      	ldr	r2, [pc, #352]	; (8001d68 <ADC_Init+0x1f4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d022      	beq.n	8001c52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6899      	ldr	r1, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6899      	ldr	r1, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	e00f      	b.n	8001c72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0202 	bic.w	r2, r2, #2
 8001c80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6899      	ldr	r1, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7e1b      	ldrb	r3, [r3, #24]
 8001c8c:	005a      	lsls	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d01b      	beq.n	8001cd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6859      	ldr	r1, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	035a      	lsls	r2, r3, #13
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	e007      	b.n	8001ce8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	051a      	lsls	r2, r3, #20
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6899      	ldr	r1, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d2a:	025a      	lsls	r2, r3, #9
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6899      	ldr	r1, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	029a      	lsls	r2, r3, #10
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	609a      	str	r2, [r3, #8]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	40012300 	.word	0x40012300
 8001d68:	0f000001 	.word	0x0f000001

08001d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9e:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	60d3      	str	r3, [r2, #12]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <__NVIC_GetPriorityGrouping+0x18>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	f003 0307 	and.w	r3, r3, #7
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	db0b      	blt.n	8001dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	f003 021f 	and.w	r2, r3, #31
 8001de8:	4907      	ldr	r1, [pc, #28]	; (8001e08 <__NVIC_EnableIRQ+0x38>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	2001      	movs	r0, #1
 8001df2:	fa00 f202 	lsl.w	r2, r0, r2
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e100 	.word	0xe000e100

08001e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db0a      	blt.n	8001e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	490c      	ldr	r1, [pc, #48]	; (8001e58 <__NVIC_SetPriority+0x4c>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e34:	e00a      	b.n	8001e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4908      	ldr	r1, [pc, #32]	; (8001e5c <__NVIC_SetPriority+0x50>)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3b04      	subs	r3, #4
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	440b      	add	r3, r1
 8001e4a:	761a      	strb	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f1c3 0307 	rsb	r3, r3, #7
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	bf28      	it	cs
 8001e7e:	2304      	movcs	r3, #4
 8001e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d902      	bls.n	8001e90 <NVIC_EncodePriority+0x30>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3b03      	subs	r3, #3
 8001e8e:	e000      	b.n	8001e92 <NVIC_EncodePriority+0x32>
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43d9      	mvns	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	4313      	orrs	r3, r2
         );
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed8:	d301      	bcc.n	8001ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00f      	b.n	8001efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <SysTick_Config+0x40>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee6:	210f      	movs	r1, #15
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eec:	f7ff ff8e 	bl	8001e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <SysTick_Config+0x40>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <SysTick_Config+0x40>)
 8001ef8:	2207      	movs	r2, #7
 8001efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	e000e010 	.word	0xe000e010

08001f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff29 	bl	8001d6c <__NVIC_SetPriorityGrouping>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f34:	f7ff ff3e 	bl	8001db4 <__NVIC_GetPriorityGrouping>
 8001f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	6978      	ldr	r0, [r7, #20]
 8001f40:	f7ff ff8e 	bl	8001e60 <NVIC_EncodePriority>
 8001f44:	4602      	mov	r2, r0
 8001f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff5d 	bl	8001e0c <__NVIC_SetPriority>
}
 8001f52:	bf00      	nop
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff31 	bl	8001dd0 <__NVIC_EnableIRQ>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ffa2 	bl	8001ec8 <SysTick_Config>
 8001f84:	4603      	mov	r3, r0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e014      	b.n	8001fca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	791b      	ldrb	r3, [r3, #4]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d105      	bne.n	8001fb6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff fa9b 	bl	80014ec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	795b      	ldrb	r3, [r3, #5]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_DAC_Start_DMA+0x22>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e0ab      	b.n	800214e <HAL_DAC_Start_DMA+0x17a>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2202      	movs	r2, #2
 8002000:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d12f      	bne.n	8002068 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	4a52      	ldr	r2, [pc, #328]	; (8002158 <HAL_DAC_Start_DMA+0x184>)
 800200e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	4a51      	ldr	r2, [pc, #324]	; (800215c <HAL_DAC_Start_DMA+0x188>)
 8002016:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	4a50      	ldr	r2, [pc, #320]	; (8002160 <HAL_DAC_Start_DMA+0x18c>)
 800201e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800202e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	2b08      	cmp	r3, #8
 8002034:	d013      	beq.n	800205e <HAL_DAC_Start_DMA+0x8a>
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	2b08      	cmp	r3, #8
 800203a:	d845      	bhi.n	80020c8 <HAL_DAC_Start_DMA+0xf4>
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_DAC_Start_DMA+0x76>
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	2b04      	cmp	r3, #4
 8002046:	d005      	beq.n	8002054 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002048:	e03e      	b.n	80020c8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	3308      	adds	r3, #8
 8002050:	613b      	str	r3, [r7, #16]
        break;
 8002052:	e03c      	b.n	80020ce <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	330c      	adds	r3, #12
 800205a:	613b      	str	r3, [r7, #16]
        break;
 800205c:	e037      	b.n	80020ce <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	3310      	adds	r3, #16
 8002064:	613b      	str	r3, [r7, #16]
        break;
 8002066:	e032      	b.n	80020ce <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4a3d      	ldr	r2, [pc, #244]	; (8002164 <HAL_DAC_Start_DMA+0x190>)
 800206e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4a3c      	ldr	r2, [pc, #240]	; (8002168 <HAL_DAC_Start_DMA+0x194>)
 8002076:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a3b      	ldr	r2, [pc, #236]	; (800216c <HAL_DAC_Start_DMA+0x198>)
 800207e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800208e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	2b08      	cmp	r3, #8
 8002094:	d013      	beq.n	80020be <HAL_DAC_Start_DMA+0xea>
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	2b08      	cmp	r3, #8
 800209a:	d817      	bhi.n	80020cc <HAL_DAC_Start_DMA+0xf8>
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_DAC_Start_DMA+0xd6>
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d005      	beq.n	80020b4 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80020a8:	e010      	b.n	80020cc <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	3314      	adds	r3, #20
 80020b0:	613b      	str	r3, [r7, #16]
        break;
 80020b2:	e00c      	b.n	80020ce <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3318      	adds	r3, #24
 80020ba:	613b      	str	r3, [r7, #16]
        break;
 80020bc:	e007      	b.n	80020ce <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	331c      	adds	r3, #28
 80020c4:	613b      	str	r3, [r7, #16]
        break;
 80020c6:	e002      	b.n	80020ce <HAL_DAC_Start_DMA+0xfa>
        break;
 80020c8:	bf00      	nop
 80020ca:	e000      	b.n	80020ce <HAL_DAC_Start_DMA+0xfa>
        break;
 80020cc:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d111      	bne.n	80020f8 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020e2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6898      	ldr	r0, [r3, #8]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	f000 f9e5 	bl	80024bc <HAL_DMA_Start_IT>
 80020f2:	4603      	mov	r3, r0
 80020f4:	75fb      	strb	r3, [r7, #23]
 80020f6:	e010      	b.n	800211a <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002106:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	68d8      	ldr	r0, [r3, #12]
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	f000 f9d3 	bl	80024bc <HAL_DMA_Start_IT>
 8002116:	4603      	mov	r3, r0
 8002118:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002120:	7dfb      	ldrb	r3, [r7, #23]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10c      	bne.n	8002140 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6819      	ldr	r1, [r3, #0]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2201      	movs	r2, #1
 8002134:	409a      	lsls	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	e005      	b.n	800214c <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	f043 0204 	orr.w	r2, r3, #4
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800214c:	7dfb      	ldrb	r3, [r7, #23]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	0800224b 	.word	0x0800224b
 800215c:	0800226d 	.word	0x0800226d
 8002160:	08002289 	.word	0x08002289
 8002164:	080022f3 	.word	0x080022f3
 8002168:	08002315 	.word	0x08002315
 800216c:	08002331 	.word	0x08002331

08002170 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	795b      	ldrb	r3, [r3, #5]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_DAC_ConfigChannel+0x18>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e03c      	b.n	800223e <HAL_DAC_ConfigChannel+0x92>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2202      	movs	r2, #2
 80021ce:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	f640 72fe 	movw	r2, #4094	; 0xffe
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	4013      	ands	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4313      	orrs	r3, r2
 800220a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6819      	ldr	r1, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	22c0      	movs	r2, #192	; 0xc0
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	400a      	ands	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b084      	sub	sp, #16
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002256:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f7ff ff89 	bl	8002170 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	711a      	strb	r2, [r3, #4]
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002278:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f7ff ff82 	bl	8002184 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002294:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f043 0204 	orr.w	r2, r3, #4
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f7ff ff78 	bl	8002198 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2201      	movs	r2, #1
 80022ac:	711a      	strb	r2, [r3, #4]
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fe:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f7ff ffd8 	bl	80022b6 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	711a      	strb	r2, [r3, #4]
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002320:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f7ff ffd1 	bl	80022ca <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f043 0204 	orr.w	r2, r3, #4
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f7ff ffc7 	bl	80022de <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2201      	movs	r2, #1
 8002354:	711a      	strb	r2, [r3, #4]
}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800236c:	f7ff fa6c 	bl	8001848 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e099      	b.n	80024b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800239c:	e00f      	b.n	80023be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800239e:	f7ff fa53 	bl	8001848 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b05      	cmp	r3, #5
 80023aa:	d908      	bls.n	80023be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2220      	movs	r2, #32
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2203      	movs	r2, #3
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e078      	b.n	80024b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1e8      	bne.n	800239e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	4b38      	ldr	r3, [pc, #224]	; (80024b8 <HAL_DMA_Init+0x158>)
 80023d8:	4013      	ands	r3, r2
 80023da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	2b04      	cmp	r3, #4
 8002416:	d107      	bne.n	8002428 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	4313      	orrs	r3, r2
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4313      	orrs	r3, r2
 8002426:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f023 0307 	bic.w	r3, r3, #7
 800243e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	4313      	orrs	r3, r2
 8002448:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	2b04      	cmp	r3, #4
 8002450:	d117      	bne.n	8002482 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4313      	orrs	r3, r2
 800245a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00e      	beq.n	8002482 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 fa6f 	bl	8002948 <DMA_CheckFifoParam>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2240      	movs	r2, #64	; 0x40
 8002474:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800247e:	2301      	movs	r3, #1
 8002480:	e016      	b.n	80024b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fa26 	bl	80028dc <DMA_CalcBaseAndBitshift>
 8002490:	4603      	mov	r3, r0
 8002492:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002498:	223f      	movs	r2, #63	; 0x3f
 800249a:	409a      	lsls	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	f010803f 	.word	0xf010803f

080024bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_DMA_Start_IT+0x26>
 80024de:	2302      	movs	r3, #2
 80024e0:	e040      	b.n	8002564 <HAL_DMA_Start_IT+0xa8>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d12f      	bne.n	8002556 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2202      	movs	r2, #2
 80024fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f9b8 	bl	8002880 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002514:	223f      	movs	r2, #63	; 0x3f
 8002516:	409a      	lsls	r2, r3
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0216 	orr.w	r2, r2, #22
 800252a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0208 	orr.w	r2, r2, #8
 8002542:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	e005      	b.n	8002562 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800255e:	2302      	movs	r3, #2
 8002560:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002562:	7dfb      	ldrb	r3, [r7, #23]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002578:	4b92      	ldr	r3, [pc, #584]	; (80027c4 <HAL_DMA_IRQHandler+0x258>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a92      	ldr	r2, [pc, #584]	; (80027c8 <HAL_DMA_IRQHandler+0x25c>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0a9b      	lsrs	r3, r3, #10
 8002584:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002596:	2208      	movs	r2, #8
 8002598:	409a      	lsls	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d01a      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d013      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0204 	bic.w	r2, r2, #4
 80025be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c4:	2208      	movs	r2, #8
 80025c6:	409a      	lsls	r2, r3
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d0:	f043 0201 	orr.w	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	2201      	movs	r2, #1
 80025de:	409a      	lsls	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d012      	beq.n	800260e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fa:	2201      	movs	r2, #1
 80025fc:	409a      	lsls	r2, r3
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	f043 0202 	orr.w	r2, r3, #2
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002612:	2204      	movs	r2, #4
 8002614:	409a      	lsls	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4013      	ands	r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d012      	beq.n	8002644 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00b      	beq.n	8002644 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002630:	2204      	movs	r2, #4
 8002632:	409a      	lsls	r2, r3
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263c:	f043 0204 	orr.w	r2, r3, #4
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002648:	2210      	movs	r2, #16
 800264a:	409a      	lsls	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4013      	ands	r3, r2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d043      	beq.n	80026dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d03c      	beq.n	80026dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002666:	2210      	movs	r2, #16
 8002668:	409a      	lsls	r2, r3
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d018      	beq.n	80026ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d108      	bne.n	800269c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	2b00      	cmp	r3, #0
 8002690:	d024      	beq.n	80026dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	4798      	blx	r3
 800269a:	e01f      	b.n	80026dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d01b      	beq.n	80026dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	4798      	blx	r3
 80026ac:	e016      	b.n	80026dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d107      	bne.n	80026cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0208 	bic.w	r2, r2, #8
 80026ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e0:	2220      	movs	r2, #32
 80026e2:	409a      	lsls	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 808e 	beq.w	800280a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8086 	beq.w	800280a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002702:	2220      	movs	r2, #32
 8002704:	409a      	lsls	r2, r3
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b05      	cmp	r3, #5
 8002714:	d136      	bne.n	8002784 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0216 	bic.w	r2, r2, #22
 8002724:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695a      	ldr	r2, [r3, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002734:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	d103      	bne.n	8002746 <HAL_DMA_IRQHandler+0x1da>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0208 	bic.w	r2, r2, #8
 8002754:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275a:	223f      	movs	r2, #63	; 0x3f
 800275c:	409a      	lsls	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002776:	2b00      	cmp	r3, #0
 8002778:	d07d      	beq.n	8002876 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
        }
        return;
 8002782:	e078      	b.n	8002876 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d01c      	beq.n	80027cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d108      	bne.n	80027b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d030      	beq.n	800280a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	4798      	blx	r3
 80027b0:	e02b      	b.n	800280a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d027      	beq.n	800280a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	4798      	blx	r3
 80027c2:	e022      	b.n	800280a <HAL_DMA_IRQHandler+0x29e>
 80027c4:	20000000 	.word	0x20000000
 80027c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10f      	bne.n	80027fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0210 	bic.w	r2, r2, #16
 80027e8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280e:	2b00      	cmp	r3, #0
 8002810:	d032      	beq.n	8002878 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d022      	beq.n	8002864 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2205      	movs	r2, #5
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	3301      	adds	r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	429a      	cmp	r2, r3
 8002840:	d307      	bcc.n	8002852 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1f2      	bne.n	8002836 <HAL_DMA_IRQHandler+0x2ca>
 8002850:	e000      	b.n	8002854 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002852:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	4798      	blx	r3
 8002874:	e000      	b.n	8002878 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002876:	bf00      	nop
    }
  }
}
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop

08002880 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800289c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b40      	cmp	r3, #64	; 0x40
 80028ac:	d108      	bne.n	80028c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028be:	e007      	b.n	80028d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	60da      	str	r2, [r3, #12]
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	3b10      	subs	r3, #16
 80028ec:	4a14      	ldr	r2, [pc, #80]	; (8002940 <DMA_CalcBaseAndBitshift+0x64>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	091b      	lsrs	r3, r3, #4
 80028f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028f6:	4a13      	ldr	r2, [pc, #76]	; (8002944 <DMA_CalcBaseAndBitshift+0x68>)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d909      	bls.n	800291e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002912:	f023 0303 	bic.w	r3, r3, #3
 8002916:	1d1a      	adds	r2, r3, #4
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	659a      	str	r2, [r3, #88]	; 0x58
 800291c:	e007      	b.n	800292e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002926:	f023 0303 	bic.w	r3, r3, #3
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002932:	4618      	mov	r0, r3
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	aaaaaaab 	.word	0xaaaaaaab
 8002944:	08009d94 	.word	0x08009d94

08002948 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d11f      	bne.n	80029a2 <DMA_CheckFifoParam+0x5a>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d856      	bhi.n	8002a16 <DMA_CheckFifoParam+0xce>
 8002968:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <DMA_CheckFifoParam+0x28>)
 800296a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296e:	bf00      	nop
 8002970:	08002981 	.word	0x08002981
 8002974:	08002993 	.word	0x08002993
 8002978:	08002981 	.word	0x08002981
 800297c:	08002a17 	.word	0x08002a17
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d046      	beq.n	8002a1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002990:	e043      	b.n	8002a1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800299a:	d140      	bne.n	8002a1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a0:	e03d      	b.n	8002a1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029aa:	d121      	bne.n	80029f0 <DMA_CheckFifoParam+0xa8>
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d837      	bhi.n	8002a22 <DMA_CheckFifoParam+0xda>
 80029b2:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <DMA_CheckFifoParam+0x70>)
 80029b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b8:	080029c9 	.word	0x080029c9
 80029bc:	080029cf 	.word	0x080029cf
 80029c0:	080029c9 	.word	0x080029c9
 80029c4:	080029e1 	.word	0x080029e1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
      break;
 80029cc:	e030      	b.n	8002a30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d025      	beq.n	8002a26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029de:	e022      	b.n	8002a26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029e8:	d11f      	bne.n	8002a2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029ee:	e01c      	b.n	8002a2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d903      	bls.n	80029fe <DMA_CheckFifoParam+0xb6>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d003      	beq.n	8002a04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029fc:	e018      	b.n	8002a30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
      break;
 8002a02:	e015      	b.n	8002a30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00e      	beq.n	8002a2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
      break;
 8002a14:	e00b      	b.n	8002a2e <DMA_CheckFifoParam+0xe6>
      break;
 8002a16:	bf00      	nop
 8002a18:	e00a      	b.n	8002a30 <DMA_CheckFifoParam+0xe8>
      break;
 8002a1a:	bf00      	nop
 8002a1c:	e008      	b.n	8002a30 <DMA_CheckFifoParam+0xe8>
      break;
 8002a1e:	bf00      	nop
 8002a20:	e006      	b.n	8002a30 <DMA_CheckFifoParam+0xe8>
      break;
 8002a22:	bf00      	nop
 8002a24:	e004      	b.n	8002a30 <DMA_CheckFifoParam+0xe8>
      break;
 8002a26:	bf00      	nop
 8002a28:	e002      	b.n	8002a30 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a2a:	bf00      	nop
 8002a2c:	e000      	b.n	8002a30 <DMA_CheckFifoParam+0xe8>
      break;
 8002a2e:	bf00      	nop
    }
  } 
  
  return status; 
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop

08002a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b089      	sub	sp, #36	; 0x24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	e16b      	b.n	8002d34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	f040 815a 	bne.w	8002d2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d005      	beq.n	8002a92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d130      	bne.n	8002af4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ac8:	2201      	movs	r2, #1
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	f003 0201 	and.w	r2, r3, #1
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d017      	beq.n	8002b30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d123      	bne.n	8002b84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	08da      	lsrs	r2, r3, #3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3208      	adds	r2, #8
 8002b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	220f      	movs	r2, #15
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	08da      	lsrs	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3208      	adds	r2, #8
 8002b7e:	69b9      	ldr	r1, [r7, #24]
 8002b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	2203      	movs	r2, #3
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0203 	and.w	r2, r3, #3
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80b4 	beq.w	8002d2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	4b60      	ldr	r3, [pc, #384]	; (8002d4c <HAL_GPIO_Init+0x30c>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	4a5f      	ldr	r2, [pc, #380]	; (8002d4c <HAL_GPIO_Init+0x30c>)
 8002bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd6:	4b5d      	ldr	r3, [pc, #372]	; (8002d4c <HAL_GPIO_Init+0x30c>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002be2:	4a5b      	ldr	r2, [pc, #364]	; (8002d50 <HAL_GPIO_Init+0x310>)
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	089b      	lsrs	r3, r3, #2
 8002be8:	3302      	adds	r3, #2
 8002bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	220f      	movs	r2, #15
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a52      	ldr	r2, [pc, #328]	; (8002d54 <HAL_GPIO_Init+0x314>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d02b      	beq.n	8002c66 <HAL_GPIO_Init+0x226>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a51      	ldr	r2, [pc, #324]	; (8002d58 <HAL_GPIO_Init+0x318>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d025      	beq.n	8002c62 <HAL_GPIO_Init+0x222>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a50      	ldr	r2, [pc, #320]	; (8002d5c <HAL_GPIO_Init+0x31c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d01f      	beq.n	8002c5e <HAL_GPIO_Init+0x21e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a4f      	ldr	r2, [pc, #316]	; (8002d60 <HAL_GPIO_Init+0x320>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d019      	beq.n	8002c5a <HAL_GPIO_Init+0x21a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a4e      	ldr	r2, [pc, #312]	; (8002d64 <HAL_GPIO_Init+0x324>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d013      	beq.n	8002c56 <HAL_GPIO_Init+0x216>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a4d      	ldr	r2, [pc, #308]	; (8002d68 <HAL_GPIO_Init+0x328>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00d      	beq.n	8002c52 <HAL_GPIO_Init+0x212>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a4c      	ldr	r2, [pc, #304]	; (8002d6c <HAL_GPIO_Init+0x32c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d007      	beq.n	8002c4e <HAL_GPIO_Init+0x20e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a4b      	ldr	r2, [pc, #300]	; (8002d70 <HAL_GPIO_Init+0x330>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d101      	bne.n	8002c4a <HAL_GPIO_Init+0x20a>
 8002c46:	2307      	movs	r3, #7
 8002c48:	e00e      	b.n	8002c68 <HAL_GPIO_Init+0x228>
 8002c4a:	2308      	movs	r3, #8
 8002c4c:	e00c      	b.n	8002c68 <HAL_GPIO_Init+0x228>
 8002c4e:	2306      	movs	r3, #6
 8002c50:	e00a      	b.n	8002c68 <HAL_GPIO_Init+0x228>
 8002c52:	2305      	movs	r3, #5
 8002c54:	e008      	b.n	8002c68 <HAL_GPIO_Init+0x228>
 8002c56:	2304      	movs	r3, #4
 8002c58:	e006      	b.n	8002c68 <HAL_GPIO_Init+0x228>
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e004      	b.n	8002c68 <HAL_GPIO_Init+0x228>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e002      	b.n	8002c68 <HAL_GPIO_Init+0x228>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <HAL_GPIO_Init+0x228>
 8002c66:	2300      	movs	r3, #0
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	f002 0203 	and.w	r2, r2, #3
 8002c6e:	0092      	lsls	r2, r2, #2
 8002c70:	4093      	lsls	r3, r2
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c78:	4935      	ldr	r1, [pc, #212]	; (8002d50 <HAL_GPIO_Init+0x310>)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	089b      	lsrs	r3, r3, #2
 8002c7e:	3302      	adds	r3, #2
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c86:	4b3b      	ldr	r3, [pc, #236]	; (8002d74 <HAL_GPIO_Init+0x334>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4013      	ands	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002caa:	4a32      	ldr	r2, [pc, #200]	; (8002d74 <HAL_GPIO_Init+0x334>)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cb0:	4b30      	ldr	r3, [pc, #192]	; (8002d74 <HAL_GPIO_Init+0x334>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cd4:	4a27      	ldr	r2, [pc, #156]	; (8002d74 <HAL_GPIO_Init+0x334>)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cda:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <HAL_GPIO_Init+0x334>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cfe:	4a1d      	ldr	r2, [pc, #116]	; (8002d74 <HAL_GPIO_Init+0x334>)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <HAL_GPIO_Init+0x334>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d28:	4a12      	ldr	r2, [pc, #72]	; (8002d74 <HAL_GPIO_Init+0x334>)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3301      	adds	r3, #1
 8002d32:	61fb      	str	r3, [r7, #28]
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	2b0f      	cmp	r3, #15
 8002d38:	f67f ae90 	bls.w	8002a5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	3724      	adds	r7, #36	; 0x24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40013800 	.word	0x40013800
 8002d54:	40020000 	.word	0x40020000
 8002d58:	40020400 	.word	0x40020400
 8002d5c:	40020800 	.word	0x40020800
 8002d60:	40020c00 	.word	0x40020c00
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40021400 	.word	0x40021400
 8002d6c:	40021800 	.word	0x40021800
 8002d70:	40021c00 	.word	0x40021c00
 8002d74:	40013c00 	.word	0x40013c00

08002d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	807b      	strh	r3, [r7, #2]
 8002d84:	4613      	mov	r3, r2
 8002d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d88:	787b      	ldrb	r3, [r7, #1]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d8e:	887a      	ldrh	r2, [r7, #2]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d94:	e003      	b.n	8002d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d96:	887b      	ldrh	r3, [r7, #2]
 8002d98:	041a      	lsls	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	619a      	str	r2, [r3, #24]
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002daa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dac:	b08f      	sub	sp, #60	; 0x3c
 8002dae:	af0a      	add	r7, sp, #40	; 0x28
 8002db0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e054      	b.n	8002e66 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f005 fbd8 	bl	800858c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2203      	movs	r2, #3
 8002de0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d102      	bne.n	8002df6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f002 fd2e 	bl	800585c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	603b      	str	r3, [r7, #0]
 8002e06:	687e      	ldr	r6, [r7, #4]
 8002e08:	466d      	mov	r5, sp
 8002e0a:	f106 0410 	add.w	r4, r6, #16
 8002e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e1e:	1d33      	adds	r3, r6, #4
 8002e20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e22:	6838      	ldr	r0, [r7, #0]
 8002e24:	f002 fca8 	bl	8005778 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f002 fd25 	bl	800587e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	687e      	ldr	r6, [r7, #4]
 8002e3c:	466d      	mov	r5, sp
 8002e3e:	f106 0410 	add.w	r4, r6, #16
 8002e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e52:	1d33      	adds	r3, r6, #4
 8002e54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e56:	6838      	ldr	r0, [r7, #0]
 8002e58:	f002 fe8c 	bl	8005b74 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e6e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002e6e:	b590      	push	{r4, r7, lr}
 8002e70:	b089      	sub	sp, #36	; 0x24
 8002e72:	af04      	add	r7, sp, #16
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	4608      	mov	r0, r1
 8002e78:	4611      	mov	r1, r2
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	70fb      	strb	r3, [r7, #3]
 8002e80:	460b      	mov	r3, r1
 8002e82:	70bb      	strb	r3, [r7, #2]
 8002e84:	4613      	mov	r3, r2
 8002e86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_HCD_HC_Init+0x28>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e076      	b.n	8002f84 <HAL_HCD_HC_Init+0x116>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	212c      	movs	r1, #44	; 0x2c
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	333d      	adds	r3, #61	; 0x3d
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	212c      	movs	r1, #44	; 0x2c
 8002eb6:	fb01 f303 	mul.w	r3, r1, r3
 8002eba:	4413      	add	r3, r2
 8002ebc:	3338      	adds	r3, #56	; 0x38
 8002ebe:	787a      	ldrb	r2, [r7, #1]
 8002ec0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	212c      	movs	r1, #44	; 0x2c
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	3340      	adds	r3, #64	; 0x40
 8002ed0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002ed2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	212c      	movs	r1, #44	; 0x2c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	3339      	adds	r3, #57	; 0x39
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002ee6:	78fb      	ldrb	r3, [r7, #3]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	212c      	movs	r1, #44	; 0x2c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	333f      	adds	r3, #63	; 0x3f
 8002ef4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002ef8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	78ba      	ldrb	r2, [r7, #2]
 8002efe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f02:	b2d0      	uxtb	r0, r2
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	212c      	movs	r1, #44	; 0x2c
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	333a      	adds	r3, #58	; 0x3a
 8002f10:	4602      	mov	r2, r0
 8002f12:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002f14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	da09      	bge.n	8002f30 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	212c      	movs	r1, #44	; 0x2c
 8002f22:	fb01 f303 	mul.w	r3, r1, r3
 8002f26:	4413      	add	r3, r2
 8002f28:	333b      	adds	r3, #59	; 0x3b
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	e008      	b.n	8002f42 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	212c      	movs	r1, #44	; 0x2c
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	333b      	adds	r3, #59	; 0x3b
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002f42:	78fb      	ldrb	r3, [r7, #3]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	212c      	movs	r1, #44	; 0x2c
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	333c      	adds	r3, #60	; 0x3c
 8002f50:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f54:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	787c      	ldrb	r4, [r7, #1]
 8002f5c:	78ba      	ldrb	r2, [r7, #2]
 8002f5e:	78f9      	ldrb	r1, [r7, #3]
 8002f60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f62:	9302      	str	r3, [sp, #8]
 8002f64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f68:	9301      	str	r3, [sp, #4]
 8002f6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	4623      	mov	r3, r4
 8002f72:	f002 ff79 	bl	8005e68 <USB_HC_Init>
 8002f76:	4603      	mov	r3, r0
 8002f78:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd90      	pop	{r4, r7, pc}

08002f8c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_HCD_HC_Halt+0x1e>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e00f      	b.n	8002fca <HAL_HCD_HC_Halt+0x3e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f003 f9b5 	bl	800632a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	4608      	mov	r0, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	70fb      	strb	r3, [r7, #3]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	70bb      	strb	r3, [r7, #2]
 8002fea:	4613      	mov	r3, r2
 8002fec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	212c      	movs	r1, #44	; 0x2c
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	333b      	adds	r3, #59	; 0x3b
 8002ffc:	78ba      	ldrb	r2, [r7, #2]
 8002ffe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	4413      	add	r3, r2
 800300c:	333f      	adds	r3, #63	; 0x3f
 800300e:	787a      	ldrb	r2, [r7, #1]
 8003010:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003012:	7c3b      	ldrb	r3, [r7, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d112      	bne.n	800303e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003018:	78fb      	ldrb	r3, [r7, #3]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	212c      	movs	r1, #44	; 0x2c
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	4413      	add	r3, r2
 8003024:	3342      	adds	r3, #66	; 0x42
 8003026:	2203      	movs	r2, #3
 8003028:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800302a:	78fb      	ldrb	r3, [r7, #3]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	212c      	movs	r1, #44	; 0x2c
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	333d      	adds	r3, #61	; 0x3d
 8003038:	7f3a      	ldrb	r2, [r7, #28]
 800303a:	701a      	strb	r2, [r3, #0]
 800303c:	e008      	b.n	8003050 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	212c      	movs	r1, #44	; 0x2c
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	4413      	add	r3, r2
 800304a:	3342      	adds	r3, #66	; 0x42
 800304c:	2202      	movs	r2, #2
 800304e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003050:	787b      	ldrb	r3, [r7, #1]
 8003052:	2b03      	cmp	r3, #3
 8003054:	f200 80c6 	bhi.w	80031e4 <HAL_HCD_HC_SubmitRequest+0x210>
 8003058:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800305a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305e:	bf00      	nop
 8003060:	08003071 	.word	0x08003071
 8003064:	080031d1 	.word	0x080031d1
 8003068:	080030d5 	.word	0x080030d5
 800306c:	08003153 	.word	0x08003153
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003070:	7c3b      	ldrb	r3, [r7, #16]
 8003072:	2b01      	cmp	r3, #1
 8003074:	f040 80b8 	bne.w	80031e8 <HAL_HCD_HC_SubmitRequest+0x214>
 8003078:	78bb      	ldrb	r3, [r7, #2]
 800307a:	2b00      	cmp	r3, #0
 800307c:	f040 80b4 	bne.w	80031e8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003080:	8b3b      	ldrh	r3, [r7, #24]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d108      	bne.n	8003098 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	212c      	movs	r1, #44	; 0x2c
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	4413      	add	r3, r2
 8003092:	3355      	adds	r3, #85	; 0x55
 8003094:	2201      	movs	r2, #1
 8003096:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	212c      	movs	r1, #44	; 0x2c
 800309e:	fb01 f303 	mul.w	r3, r1, r3
 80030a2:	4413      	add	r3, r2
 80030a4:	3355      	adds	r3, #85	; 0x55
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d109      	bne.n	80030c0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	212c      	movs	r1, #44	; 0x2c
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	3342      	adds	r3, #66	; 0x42
 80030ba:	2200      	movs	r2, #0
 80030bc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030be:	e093      	b.n	80031e8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	212c      	movs	r1, #44	; 0x2c
 80030c6:	fb01 f303 	mul.w	r3, r1, r3
 80030ca:	4413      	add	r3, r2
 80030cc:	3342      	adds	r3, #66	; 0x42
 80030ce:	2202      	movs	r2, #2
 80030d0:	701a      	strb	r2, [r3, #0]
      break;
 80030d2:	e089      	b.n	80031e8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80030d4:	78bb      	ldrb	r3, [r7, #2]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d11d      	bne.n	8003116 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	212c      	movs	r1, #44	; 0x2c
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	4413      	add	r3, r2
 80030e6:	3355      	adds	r3, #85	; 0x55
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	3342      	adds	r3, #66	; 0x42
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003100:	e073      	b.n	80031ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	3342      	adds	r3, #66	; 0x42
 8003110:	2202      	movs	r2, #2
 8003112:	701a      	strb	r2, [r3, #0]
      break;
 8003114:	e069      	b.n	80031ea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003116:	78fb      	ldrb	r3, [r7, #3]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	212c      	movs	r1, #44	; 0x2c
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	4413      	add	r3, r2
 8003122:	3354      	adds	r3, #84	; 0x54
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	212c      	movs	r1, #44	; 0x2c
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	4413      	add	r3, r2
 8003136:	3342      	adds	r3, #66	; 0x42
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]
      break;
 800313c:	e055      	b.n	80031ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	3342      	adds	r3, #66	; 0x42
 800314c:	2202      	movs	r2, #2
 800314e:	701a      	strb	r2, [r3, #0]
      break;
 8003150:	e04b      	b.n	80031ea <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003152:	78bb      	ldrb	r3, [r7, #2]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d11d      	bne.n	8003194 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	3355      	adds	r3, #85	; 0x55
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d109      	bne.n	8003180 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	212c      	movs	r1, #44	; 0x2c
 8003172:	fb01 f303 	mul.w	r3, r1, r3
 8003176:	4413      	add	r3, r2
 8003178:	3342      	adds	r3, #66	; 0x42
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800317e:	e034      	b.n	80031ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	212c      	movs	r1, #44	; 0x2c
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	3342      	adds	r3, #66	; 0x42
 800318e:	2202      	movs	r2, #2
 8003190:	701a      	strb	r2, [r3, #0]
      break;
 8003192:	e02a      	b.n	80031ea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	212c      	movs	r1, #44	; 0x2c
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	4413      	add	r3, r2
 80031a0:	3354      	adds	r3, #84	; 0x54
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d109      	bne.n	80031bc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	212c      	movs	r1, #44	; 0x2c
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	4413      	add	r3, r2
 80031b4:	3342      	adds	r3, #66	; 0x42
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]
      break;
 80031ba:	e016      	b.n	80031ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	212c      	movs	r1, #44	; 0x2c
 80031c2:	fb01 f303 	mul.w	r3, r1, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	3342      	adds	r3, #66	; 0x42
 80031ca:	2202      	movs	r2, #2
 80031cc:	701a      	strb	r2, [r3, #0]
      break;
 80031ce:	e00c      	b.n	80031ea <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	212c      	movs	r1, #44	; 0x2c
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	4413      	add	r3, r2
 80031dc:	3342      	adds	r3, #66	; 0x42
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
      break;
 80031e2:	e002      	b.n	80031ea <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80031e4:	bf00      	nop
 80031e6:	e000      	b.n	80031ea <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80031e8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	212c      	movs	r1, #44	; 0x2c
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	3344      	adds	r3, #68	; 0x44
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	8b3a      	ldrh	r2, [r7, #24]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	202c      	movs	r0, #44	; 0x2c
 8003204:	fb00 f303 	mul.w	r3, r0, r3
 8003208:	440b      	add	r3, r1
 800320a:	334c      	adds	r3, #76	; 0x4c
 800320c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	212c      	movs	r1, #44	; 0x2c
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	4413      	add	r3, r2
 800321a:	3360      	adds	r3, #96	; 0x60
 800321c:	2200      	movs	r2, #0
 800321e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	212c      	movs	r1, #44	; 0x2c
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	4413      	add	r3, r2
 800322c:	3350      	adds	r3, #80	; 0x50
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	212c      	movs	r1, #44	; 0x2c
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	4413      	add	r3, r2
 800323e:	3339      	adds	r3, #57	; 0x39
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003244:	78fb      	ldrb	r3, [r7, #3]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	212c      	movs	r1, #44	; 0x2c
 800324a:	fb01 f303 	mul.w	r3, r1, r3
 800324e:	4413      	add	r3, r2
 8003250:	3361      	adds	r3, #97	; 0x61
 8003252:	2200      	movs	r2, #0
 8003254:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	222c      	movs	r2, #44	; 0x2c
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	3338      	adds	r3, #56	; 0x38
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	18d1      	adds	r1, r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	f002 ff08 	bl	8006084 <USB_HC_StartXfer>
 8003274:	4603      	mov	r3, r0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop

08003280 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f002 fc2b 	bl	8005af2 <USB_GetMode>
 800329c:	4603      	mov	r3, r0
 800329e:	2b01      	cmp	r3, #1
 80032a0:	f040 80f6 	bne.w	8003490 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f002 fc0f 	bl	8005acc <USB_ReadInterrupts>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80ec 	beq.w	800348e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f002 fc06 	bl	8005acc <USB_ReadInterrupts>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032ca:	d104      	bne.n	80032d6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80032d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f002 fbf6 	bl	8005acc <USB_ReadInterrupts>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ea:	d104      	bne.n	80032f6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f002 fbe6 	bl	8005acc <USB_ReadInterrupts>
 8003300:	4603      	mov	r3, r0
 8003302:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003306:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800330a:	d104      	bne.n	8003316 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003314:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f002 fbd6 	bl	8005acc <USB_ReadInterrupts>
 8003320:	4603      	mov	r3, r0
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b02      	cmp	r3, #2
 8003328:	d103      	bne.n	8003332 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2202      	movs	r2, #2
 8003330:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f002 fbc8 	bl	8005acc <USB_ReadInterrupts>
 800333c:	4603      	mov	r3, r0
 800333e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003346:	d11c      	bne.n	8003382 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003350:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10f      	bne.n	8003382 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003362:	2110      	movs	r1, #16
 8003364:	6938      	ldr	r0, [r7, #16]
 8003366:	f002 fad7 	bl	8005918 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800336a:	6938      	ldr	r0, [r7, #16]
 800336c:	f002 faf8 	bl	8005960 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2101      	movs	r1, #1
 8003376:	4618      	mov	r0, r3
 8003378:	f002 fcb0 	bl	8005cdc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f005 f983 	bl	8008688 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f002 fba0 	bl	8005acc <USB_ReadInterrupts>
 800338c:	4603      	mov	r3, r0
 800338e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003392:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003396:	d102      	bne.n	800339e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f001 fa03 	bl	80047a4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f002 fb92 	bl	8005acc <USB_ReadInterrupts>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d106      	bne.n	80033c0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f005 f94c 	bl	8008650 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2208      	movs	r2, #8
 80033be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f002 fb81 	bl	8005acc <USB_ReadInterrupts>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d101      	bne.n	80033d8 <HAL_HCD_IRQHandler+0x158>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <HAL_HCD_IRQHandler+0x15a>
 80033d8:	2300      	movs	r3, #0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d012      	beq.n	8003404 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699a      	ldr	r2, [r3, #24]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0210 	bic.w	r2, r2, #16
 80033ec:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f001 f906 	bl	8004600 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0210 	orr.w	r2, r2, #16
 8003402:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f002 fb5f 	bl	8005acc <USB_ReadInterrupts>
 800340e:	4603      	mov	r3, r0
 8003410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003414:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003418:	d13a      	bne.n	8003490 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f002 ff72 	bl	8006308 <USB_HC_ReadInterrupt>
 8003424:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	e025      	b.n	8003478 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d018      	beq.n	8003472 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4413      	add	r3, r2
 8003448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003456:	d106      	bne.n	8003466 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	4619      	mov	r1, r3
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f8ab 	bl	80035ba <HCD_HC_IN_IRQHandler>
 8003464:	e005      	b.n	8003472 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	4619      	mov	r1, r3
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fcc6 	bl	8003dfe <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	3301      	adds	r3, #1
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	429a      	cmp	r2, r3
 8003480:	d3d4      	bcc.n	800342c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800348a:	615a      	str	r2, [r3, #20]
 800348c:	e000      	b.n	8003490 <HAL_HCD_IRQHandler+0x210>
      return;
 800348e:	bf00      	nop
    }
  }
}
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_HCD_Start+0x16>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e013      	b.n	80034d4 <HAL_HCD_Start+0x3e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2101      	movs	r1, #1
 80034ba:	4618      	mov	r0, r3
 80034bc:	f002 fc72 	bl	8005da4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f002 f9b8 	bl	800583a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_HCD_Stop+0x16>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e00d      	b.n	800350e <HAL_HCD_Stop+0x32>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f003 f86c 	bl	80065dc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f002 fc14 	bl	8005d50 <USB_ResetPort>
 8003528:	4603      	mov	r3, r0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	212c      	movs	r1, #44	; 0x2c
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	4413      	add	r3, r2
 800354a:	3360      	adds	r3, #96	; 0x60
 800354c:	781b      	ldrb	r3, [r3, #0]
}
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	460b      	mov	r3, r1
 8003564:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	212c      	movs	r1, #44	; 0x2c
 800356c:	fb01 f303 	mul.w	r3, r1, r3
 8003570:	4413      	add	r3, r2
 8003572:	3350      	adds	r3, #80	; 0x50
 8003574:	681b      	ldr	r3, [r3, #0]
}
 8003576:	4618      	mov	r0, r3
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f002 fc58 	bl	8005e44 <USB_GetCurrentFrame>
 8003594:	4603      	mov	r3, r0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f002 fc33 	bl	8005e16 <USB_GetHostSpeed>
 80035b0:	4603      	mov	r3, r0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b086      	sub	sp, #24
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	460b      	mov	r3, r1
 80035c4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d119      	bne.n	800361e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f6:	461a      	mov	r2, r3
 80035f8:	2304      	movs	r3, #4
 80035fa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4413      	add	r3, r2
 8003604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	0151      	lsls	r1, r2, #5
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	440a      	add	r2, r1
 8003612:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003616:	f043 0302 	orr.w	r3, r3, #2
 800361a:	60d3      	str	r3, [r2, #12]
 800361c:	e101      	b.n	8003822 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4413      	add	r3, r2
 8003626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003634:	d12b      	bne.n	800368e <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4413      	add	r3, r2
 800363e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003642:	461a      	mov	r2, r3
 8003644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003648:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	212c      	movs	r1, #44	; 0x2c
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	4413      	add	r3, r2
 8003656:	3361      	adds	r3, #97	; 0x61
 8003658:	2207      	movs	r2, #7
 800365a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4413      	add	r3, r2
 8003664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	0151      	lsls	r1, r2, #5
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	440a      	add	r2, r1
 8003672:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003676:	f043 0302 	orr.w	r3, r3, #2
 800367a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	4611      	mov	r1, r2
 8003686:	4618      	mov	r0, r3
 8003688:	f002 fe4f 	bl	800632a <USB_HC_Halt>
 800368c:	e0c9      	b.n	8003822 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4413      	add	r3, r2
 8003696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d109      	bne.n	80036b8 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b0:	461a      	mov	r2, r3
 80036b2:	2320      	movs	r3, #32
 80036b4:	6093      	str	r3, [r2, #8]
 80036b6:	e0b4      	b.n	8003822 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d133      	bne.n	8003736 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	0151      	lsls	r1, r2, #5
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	440a      	add	r2, r1
 80036e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036e8:	f043 0302 	orr.w	r3, r3, #2
 80036ec:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	212c      	movs	r1, #44	; 0x2c
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	4413      	add	r3, r2
 80036fa:	3361      	adds	r3, #97	; 0x61
 80036fc:	2205      	movs	r2, #5
 80036fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4413      	add	r3, r2
 8003708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370c:	461a      	mov	r2, r3
 800370e:	2310      	movs	r3, #16
 8003710:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4413      	add	r3, r2
 800371a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371e:	461a      	mov	r2, r3
 8003720:	2308      	movs	r3, #8
 8003722:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f002 fdfb 	bl	800632a <USB_HC_Halt>
 8003734:	e075      	b.n	8003822 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4413      	add	r3, r2
 800373e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374c:	d134      	bne.n	80037b8 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4413      	add	r3, r2
 8003756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	0151      	lsls	r1, r2, #5
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	440a      	add	r2, r1
 8003764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	212c      	movs	r1, #44	; 0x2c
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	4413      	add	r3, r2
 800377a:	3361      	adds	r3, #97	; 0x61
 800377c:	2208      	movs	r2, #8
 800377e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4413      	add	r3, r2
 8003788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378c:	461a      	mov	r2, r3
 800378e:	2310      	movs	r3, #16
 8003790:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379e:	461a      	mov	r2, r3
 80037a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037a4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	4611      	mov	r1, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f002 fdba 	bl	800632a <USB_HC_Halt>
 80037b6:	e034      	b.n	8003822 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ca:	2b80      	cmp	r3, #128	; 0x80
 80037cc:	d129      	bne.n	8003822 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	0151      	lsls	r1, r2, #5
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	440a      	add	r2, r1
 80037e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037e8:	f043 0302 	orr.w	r3, r3, #2
 80037ec:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	212c      	movs	r1, #44	; 0x2c
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	4413      	add	r3, r2
 80037fa:	3361      	adds	r3, #97	; 0x61
 80037fc:	2206      	movs	r2, #6
 80037fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	4611      	mov	r1, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f002 fd8d 	bl	800632a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4413      	add	r3, r2
 8003818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381c:	461a      	mov	r2, r3
 800381e:	2380      	movs	r3, #128	; 0x80
 8003820:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4413      	add	r3, r2
 800382a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003838:	d122      	bne.n	8003880 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4413      	add	r3, r2
 8003842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	0151      	lsls	r1, r2, #5
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	440a      	add	r2, r1
 8003850:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003854:	f043 0302 	orr.w	r3, r3, #2
 8003858:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f002 fd60 	bl	800632a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4413      	add	r3, r2
 8003872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003876:	461a      	mov	r2, r3
 8003878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800387c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800387e:	e2ba      	b.n	8003df6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4413      	add	r3, r2
 8003888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b01      	cmp	r3, #1
 8003894:	f040 811b 	bne.w	8003ace <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d019      	beq.n	80038d4 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	212c      	movs	r1, #44	; 0x2c
 80038a6:	fb01 f303 	mul.w	r3, r1, r3
 80038aa:	4413      	add	r3, r2
 80038ac:	3348      	adds	r3, #72	; 0x48
 80038ae:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	0159      	lsls	r1, r3, #5
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	440b      	add	r3, r1
 80038b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80038c2:	1ad2      	subs	r2, r2, r3
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	202c      	movs	r0, #44	; 0x2c
 80038ca:	fb00 f303 	mul.w	r3, r0, r3
 80038ce:	440b      	add	r3, r1
 80038d0:	3350      	adds	r3, #80	; 0x50
 80038d2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	3361      	adds	r3, #97	; 0x61
 80038e2:	2201      	movs	r2, #1
 80038e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	212c      	movs	r1, #44	; 0x2c
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	4413      	add	r3, r2
 80038f2:	335c      	adds	r3, #92	; 0x5c
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003904:	461a      	mov	r2, r3
 8003906:	2301      	movs	r3, #1
 8003908:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	212c      	movs	r1, #44	; 0x2c
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	333f      	adds	r3, #63	; 0x3f
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	212c      	movs	r1, #44	; 0x2c
 8003924:	fb01 f303 	mul.w	r3, r1, r3
 8003928:	4413      	add	r3, r2
 800392a:	333f      	adds	r3, #63	; 0x3f
 800392c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800392e:	2b02      	cmp	r3, #2
 8003930:	d121      	bne.n	8003976 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4413      	add	r3, r2
 800393a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	0151      	lsls	r1, r2, #5
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	440a      	add	r2, r1
 8003948:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800394c:	f043 0302 	orr.w	r3, r3, #2
 8003950:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	4611      	mov	r1, r2
 800395c:	4618      	mov	r0, r3
 800395e:	f002 fce4 	bl	800632a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4413      	add	r3, r2
 800396a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396e:	461a      	mov	r2, r3
 8003970:	2310      	movs	r3, #16
 8003972:	6093      	str	r3, [r2, #8]
 8003974:	e066      	b.n	8003a44 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	212c      	movs	r1, #44	; 0x2c
 800397c:	fb01 f303 	mul.w	r3, r1, r3
 8003980:	4413      	add	r3, r2
 8003982:	333f      	adds	r3, #63	; 0x3f
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b03      	cmp	r3, #3
 8003988:	d127      	bne.n	80039da <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4413      	add	r3, r2
 8003992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	0151      	lsls	r1, r2, #5
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	440a      	add	r2, r1
 80039a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039a8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	212c      	movs	r1, #44	; 0x2c
 80039b0:	fb01 f303 	mul.w	r3, r1, r3
 80039b4:	4413      	add	r3, r2
 80039b6:	3360      	adds	r3, #96	; 0x60
 80039b8:	2201      	movs	r2, #1
 80039ba:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	b2d9      	uxtb	r1, r3
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	202c      	movs	r0, #44	; 0x2c
 80039c6:	fb00 f303 	mul.w	r3, r0, r3
 80039ca:	4413      	add	r3, r2
 80039cc:	3360      	adds	r3, #96	; 0x60
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f004 fe66 	bl	80086a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80039d8:	e034      	b.n	8003a44 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	212c      	movs	r1, #44	; 0x2c
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	333f      	adds	r3, #63	; 0x3f
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d12a      	bne.n	8003a44 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	212c      	movs	r1, #44	; 0x2c
 80039f4:	fb01 f303 	mul.w	r3, r1, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	3360      	adds	r3, #96	; 0x60
 80039fc:	2201      	movs	r2, #1
 80039fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	212c      	movs	r1, #44	; 0x2c
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3354      	adds	r3, #84	; 0x54
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	f083 0301 	eor.w	r3, r3, #1
 8003a14:	b2d8      	uxtb	r0, r3
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	212c      	movs	r1, #44	; 0x2c
 8003a1c:	fb01 f303 	mul.w	r3, r1, r3
 8003a20:	4413      	add	r3, r2
 8003a22:	3354      	adds	r3, #84	; 0x54
 8003a24:	4602      	mov	r2, r0
 8003a26:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	b2d9      	uxtb	r1, r3
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	202c      	movs	r0, #44	; 0x2c
 8003a32:	fb00 f303 	mul.w	r3, r0, r3
 8003a36:	4413      	add	r3, r2
 8003a38:	3360      	adds	r3, #96	; 0x60
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f004 fe30 	bl	80086a4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d12b      	bne.n	8003aa4 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	212c      	movs	r1, #44	; 0x2c
 8003a52:	fb01 f303 	mul.w	r3, r1, r3
 8003a56:	4413      	add	r3, r2
 8003a58:	3348      	adds	r3, #72	; 0x48
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	202c      	movs	r0, #44	; 0x2c
 8003a62:	fb00 f202 	mul.w	r2, r0, r2
 8003a66:	440a      	add	r2, r1
 8003a68:	3240      	adds	r2, #64	; 0x40
 8003a6a:	8812      	ldrh	r2, [r2, #0]
 8003a6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 81be 	beq.w	8003df6 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	212c      	movs	r1, #44	; 0x2c
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	4413      	add	r3, r2
 8003a86:	3354      	adds	r3, #84	; 0x54
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	f083 0301 	eor.w	r3, r3, #1
 8003a8e:	b2d8      	uxtb	r0, r3
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	212c      	movs	r1, #44	; 0x2c
 8003a96:	fb01 f303 	mul.w	r3, r1, r3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3354      	adds	r3, #84	; 0x54
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	701a      	strb	r2, [r3, #0]
}
 8003aa2:	e1a8      	b.n	8003df6 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	212c      	movs	r1, #44	; 0x2c
 8003aaa:	fb01 f303 	mul.w	r3, r1, r3
 8003aae:	4413      	add	r3, r2
 8003ab0:	3354      	adds	r3, #84	; 0x54
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	f083 0301 	eor.w	r3, r3, #1
 8003ab8:	b2d8      	uxtb	r0, r3
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	212c      	movs	r1, #44	; 0x2c
 8003ac0:	fb01 f303 	mul.w	r3, r1, r3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3354      	adds	r3, #84	; 0x54
 8003ac8:	4602      	mov	r2, r0
 8003aca:	701a      	strb	r2, [r3, #0]
}
 8003acc:	e193      	b.n	8003df6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	f040 8106 	bne.w	8003cf2 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	0151      	lsls	r1, r2, #5
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	440a      	add	r2, r1
 8003afc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b00:	f023 0302 	bic.w	r3, r3, #2
 8003b04:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	212c      	movs	r1, #44	; 0x2c
 8003b0c:	fb01 f303 	mul.w	r3, r1, r3
 8003b10:	4413      	add	r3, r2
 8003b12:	3361      	adds	r3, #97	; 0x61
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d109      	bne.n	8003b2e <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	212c      	movs	r1, #44	; 0x2c
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	4413      	add	r3, r2
 8003b26:	3360      	adds	r3, #96	; 0x60
 8003b28:	2201      	movs	r2, #1
 8003b2a:	701a      	strb	r2, [r3, #0]
 8003b2c:	e0c9      	b.n	8003cc2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	212c      	movs	r1, #44	; 0x2c
 8003b34:	fb01 f303 	mul.w	r3, r1, r3
 8003b38:	4413      	add	r3, r2
 8003b3a:	3361      	adds	r3, #97	; 0x61
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b05      	cmp	r3, #5
 8003b40:	d109      	bne.n	8003b56 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	212c      	movs	r1, #44	; 0x2c
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3360      	adds	r3, #96	; 0x60
 8003b50:	2205      	movs	r2, #5
 8003b52:	701a      	strb	r2, [r3, #0]
 8003b54:	e0b5      	b.n	8003cc2 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	212c      	movs	r1, #44	; 0x2c
 8003b5c:	fb01 f303 	mul.w	r3, r1, r3
 8003b60:	4413      	add	r3, r2
 8003b62:	3361      	adds	r3, #97	; 0x61
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b06      	cmp	r3, #6
 8003b68:	d009      	beq.n	8003b7e <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	212c      	movs	r1, #44	; 0x2c
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	4413      	add	r3, r2
 8003b76:	3361      	adds	r3, #97	; 0x61
 8003b78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d150      	bne.n	8003c20 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	212c      	movs	r1, #44	; 0x2c
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	4413      	add	r3, r2
 8003b8a:	335c      	adds	r3, #92	; 0x5c
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	202c      	movs	r0, #44	; 0x2c
 8003b96:	fb00 f303 	mul.w	r3, r0, r3
 8003b9a:	440b      	add	r3, r1
 8003b9c:	335c      	adds	r3, #92	; 0x5c
 8003b9e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	212c      	movs	r1, #44	; 0x2c
 8003ba6:	fb01 f303 	mul.w	r3, r1, r3
 8003baa:	4413      	add	r3, r2
 8003bac:	335c      	adds	r3, #92	; 0x5c
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d912      	bls.n	8003bda <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	212c      	movs	r1, #44	; 0x2c
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	335c      	adds	r3, #92	; 0x5c
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	212c      	movs	r1, #44	; 0x2c
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3360      	adds	r3, #96	; 0x60
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bd8:	e073      	b.n	8003cc2 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	212c      	movs	r1, #44	; 0x2c
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	3360      	adds	r3, #96	; 0x60
 8003be8:	2202      	movs	r2, #2
 8003bea:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c02:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c0a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c18:	461a      	mov	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c1e:	e050      	b.n	8003cc2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	212c      	movs	r1, #44	; 0x2c
 8003c26:	fb01 f303 	mul.w	r3, r1, r3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3361      	adds	r3, #97	; 0x61
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d122      	bne.n	8003c7a <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	212c      	movs	r1, #44	; 0x2c
 8003c3a:	fb01 f303 	mul.w	r3, r1, r3
 8003c3e:	4413      	add	r3, r2
 8003c40:	3360      	adds	r3, #96	; 0x60
 8003c42:	2202      	movs	r2, #2
 8003c44:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c5c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c64:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c72:	461a      	mov	r2, r3
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	e023      	b.n	8003cc2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	212c      	movs	r1, #44	; 0x2c
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	4413      	add	r3, r2
 8003c86:	3361      	adds	r3, #97	; 0x61
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b07      	cmp	r3, #7
 8003c8c:	d119      	bne.n	8003cc2 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	212c      	movs	r1, #44	; 0x2c
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	4413      	add	r3, r2
 8003c9a:	335c      	adds	r3, #92	; 0x5c
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	202c      	movs	r0, #44	; 0x2c
 8003ca6:	fb00 f303 	mul.w	r3, r0, r3
 8003caa:	440b      	add	r3, r1
 8003cac:	335c      	adds	r3, #92	; 0x5c
 8003cae:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	212c      	movs	r1, #44	; 0x2c
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	3360      	adds	r3, #96	; 0x60
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cce:	461a      	mov	r2, r3
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	b2d9      	uxtb	r1, r3
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	202c      	movs	r0, #44	; 0x2c
 8003cde:	fb00 f303 	mul.w	r3, r0, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3360      	adds	r3, #96	; 0x60
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f004 fcda 	bl	80086a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003cf0:	e081      	b.n	8003df6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	2b10      	cmp	r3, #16
 8003d06:	d176      	bne.n	8003df6 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	212c      	movs	r1, #44	; 0x2c
 8003d0e:	fb01 f303 	mul.w	r3, r1, r3
 8003d12:	4413      	add	r3, r2
 8003d14:	333f      	adds	r3, #63	; 0x3f
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d121      	bne.n	8003d60 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	212c      	movs	r1, #44	; 0x2c
 8003d22:	fb01 f303 	mul.w	r3, r1, r3
 8003d26:	4413      	add	r3, r2
 8003d28:	335c      	adds	r3, #92	; 0x5c
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	0151      	lsls	r1, r2, #5
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	440a      	add	r2, r1
 8003d44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d48:	f043 0302 	orr.w	r3, r3, #2
 8003d4c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	4611      	mov	r1, r2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f002 fae6 	bl	800632a <USB_HC_Halt>
 8003d5e:	e041      	b.n	8003de4 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	212c      	movs	r1, #44	; 0x2c
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	333f      	adds	r3, #63	; 0x3f
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d009      	beq.n	8003d88 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	212c      	movs	r1, #44	; 0x2c
 8003d7a:	fb01 f303 	mul.w	r3, r1, r3
 8003d7e:	4413      	add	r3, r2
 8003d80:	333f      	adds	r3, #63	; 0x3f
 8003d82:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d12d      	bne.n	8003de4 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	212c      	movs	r1, #44	; 0x2c
 8003d8e:	fb01 f303 	mul.w	r3, r1, r3
 8003d92:	4413      	add	r3, r2
 8003d94:	335c      	adds	r3, #92	; 0x5c
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d120      	bne.n	8003de4 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	212c      	movs	r1, #44	; 0x2c
 8003da8:	fb01 f303 	mul.w	r3, r1, r3
 8003dac:	4413      	add	r3, r2
 8003dae:	3361      	adds	r3, #97	; 0x61
 8003db0:	2203      	movs	r2, #3
 8003db2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	0151      	lsls	r1, r2, #5
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	440a      	add	r2, r1
 8003dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dce:	f043 0302 	orr.w	r3, r3, #2
 8003dd2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	4611      	mov	r1, r2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f002 faa3 	bl	800632a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df0:	461a      	mov	r2, r3
 8003df2:	2310      	movs	r3, #16
 8003df4:	6093      	str	r3, [r2, #8]
}
 8003df6:	bf00      	nop
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b088      	sub	sp, #32
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d119      	bne.n	8003e62 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2304      	movs	r3, #4
 8003e3e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	0151      	lsls	r1, r2, #5
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	440a      	add	r2, r1
 8003e56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e5a:	f043 0302 	orr.w	r3, r3, #2
 8003e5e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003e60:	e3ca      	b.n	80045f8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 0320 	and.w	r3, r3, #32
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d13e      	bne.n	8003ef6 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e84:	461a      	mov	r2, r3
 8003e86:	2320      	movs	r3, #32
 8003e88:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	212c      	movs	r1, #44	; 0x2c
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	4413      	add	r3, r2
 8003e96:	333d      	adds	r3, #61	; 0x3d
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	f040 83ac 	bne.w	80045f8 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	212c      	movs	r1, #44	; 0x2c
 8003ea6:	fb01 f303 	mul.w	r3, r1, r3
 8003eaa:	4413      	add	r3, r2
 8003eac:	333d      	adds	r3, #61	; 0x3d
 8003eae:	2200      	movs	r2, #0
 8003eb0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	212c      	movs	r1, #44	; 0x2c
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3360      	adds	r3, #96	; 0x60
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	0151      	lsls	r1, r2, #5
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	440a      	add	r2, r1
 8003eda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ede:	f043 0302 	orr.w	r3, r3, #2
 8003ee2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	4611      	mov	r1, r2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f002 fa1b 	bl	800632a <USB_HC_Halt>
}
 8003ef4:	e380      	b.n	80045f8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f0c:	d122      	bne.n	8003f54 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	0151      	lsls	r1, r2, #5
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	440a      	add	r2, r1
 8003f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f28:	f043 0302 	orr.w	r3, r3, #2
 8003f2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	4611      	mov	r1, r2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f002 f9f6 	bl	800632a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f50:	6093      	str	r3, [r2, #8]
}
 8003f52:	e351      	b.n	80045f8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d150      	bne.n	800400c <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	212c      	movs	r1, #44	; 0x2c
 8003f70:	fb01 f303 	mul.w	r3, r1, r3
 8003f74:	4413      	add	r3, r2
 8003f76:	335c      	adds	r3, #92	; 0x5c
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8e:	2b40      	cmp	r3, #64	; 0x40
 8003f90:	d111      	bne.n	8003fb6 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	212c      	movs	r1, #44	; 0x2c
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	333d      	adds	r3, #61	; 0x3d
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2340      	movs	r3, #64	; 0x40
 8003fb4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	0151      	lsls	r1, r2, #5
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	440a      	add	r2, r1
 8003fcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fd0:	f043 0302 	orr.w	r3, r3, #2
 8003fd4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	4611      	mov	r1, r2
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f002 f9a2 	bl	800632a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	212c      	movs	r1, #44	; 0x2c
 8003ffe:	fb01 f303 	mul.w	r3, r1, r3
 8004002:	4413      	add	r3, r2
 8004004:	3361      	adds	r3, #97	; 0x61
 8004006:	2201      	movs	r2, #1
 8004008:	701a      	strb	r2, [r3, #0]
}
 800400a:	e2f5      	b.n	80045f8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	4413      	add	r3, r2
 8004014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401e:	2b40      	cmp	r3, #64	; 0x40
 8004020:	d13c      	bne.n	800409c <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	212c      	movs	r1, #44	; 0x2c
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	4413      	add	r3, r2
 800402e:	3361      	adds	r3, #97	; 0x61
 8004030:	2204      	movs	r2, #4
 8004032:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	212c      	movs	r1, #44	; 0x2c
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	4413      	add	r3, r2
 8004040:	333d      	adds	r3, #61	; 0x3d
 8004042:	2201      	movs	r2, #1
 8004044:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	212c      	movs	r1, #44	; 0x2c
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	4413      	add	r3, r2
 8004052:	335c      	adds	r3, #92	; 0x5c
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	4413      	add	r3, r2
 8004060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	0151      	lsls	r1, r2, #5
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	440a      	add	r2, r1
 800406e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004072:	f043 0302 	orr.w	r3, r3, #2
 8004076:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	4611      	mov	r1, r2
 8004082:	4618      	mov	r0, r3
 8004084:	f002 f951 	bl	800632a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	4413      	add	r3, r2
 8004090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004094:	461a      	mov	r2, r3
 8004096:	2340      	movs	r3, #64	; 0x40
 8004098:	6093      	str	r3, [r2, #8]
}
 800409a:	e2ad      	b.n	80045f8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d12a      	bne.n	8004108 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040be:	461a      	mov	r2, r3
 80040c0:	2308      	movs	r3, #8
 80040c2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	0151      	lsls	r1, r2, #5
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	440a      	add	r2, r1
 80040da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040de:	f043 0302 	orr.w	r3, r3, #2
 80040e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	4611      	mov	r1, r2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f002 f91b 	bl	800632a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	212c      	movs	r1, #44	; 0x2c
 80040fa:	fb01 f303 	mul.w	r3, r1, r3
 80040fe:	4413      	add	r3, r2
 8004100:	3361      	adds	r3, #97	; 0x61
 8004102:	2205      	movs	r2, #5
 8004104:	701a      	strb	r2, [r3, #0]
}
 8004106:	e277      	b.n	80045f8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	4413      	add	r3, r2
 8004110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b10      	cmp	r3, #16
 800411c:	d150      	bne.n	80041c0 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	212c      	movs	r1, #44	; 0x2c
 8004124:	fb01 f303 	mul.w	r3, r1, r3
 8004128:	4413      	add	r3, r2
 800412a:	335c      	adds	r3, #92	; 0x5c
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	212c      	movs	r1, #44	; 0x2c
 8004136:	fb01 f303 	mul.w	r3, r1, r3
 800413a:	4413      	add	r3, r2
 800413c:	3361      	adds	r3, #97	; 0x61
 800413e:	2203      	movs	r2, #3
 8004140:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	212c      	movs	r1, #44	; 0x2c
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	4413      	add	r3, r2
 800414e:	333d      	adds	r3, #61	; 0x3d
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d112      	bne.n	800417c <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	212c      	movs	r1, #44	; 0x2c
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	4413      	add	r3, r2
 8004162:	333c      	adds	r3, #60	; 0x3c
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d108      	bne.n	800417c <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	212c      	movs	r1, #44	; 0x2c
 8004170:	fb01 f303 	mul.w	r3, r1, r3
 8004174:	4413      	add	r3, r2
 8004176:	333d      	adds	r3, #61	; 0x3d
 8004178:	2201      	movs	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	4413      	add	r3, r2
 8004184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	0151      	lsls	r1, r2, #5
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	440a      	add	r2, r1
 8004192:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004196:	f043 0302 	orr.w	r3, r3, #2
 800419a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	4611      	mov	r1, r2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f002 f8bf 	bl	800632a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b8:	461a      	mov	r2, r3
 80041ba:	2310      	movs	r3, #16
 80041bc:	6093      	str	r3, [r2, #8]
}
 80041be:	e21b      	b.n	80045f8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d2:	2b80      	cmp	r3, #128	; 0x80
 80041d4:	d174      	bne.n	80042c0 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d121      	bne.n	8004222 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	212c      	movs	r1, #44	; 0x2c
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	4413      	add	r3, r2
 80041ea:	3361      	adds	r3, #97	; 0x61
 80041ec:	2206      	movs	r2, #6
 80041ee:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	0151      	lsls	r1, r2, #5
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	440a      	add	r2, r1
 8004206:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800420a:	f043 0302 	orr.w	r3, r3, #2
 800420e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	4611      	mov	r1, r2
 800421a:	4618      	mov	r0, r3
 800421c:	f002 f885 	bl	800632a <USB_HC_Halt>
 8004220:	e044      	b.n	80042ac <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	212c      	movs	r1, #44	; 0x2c
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	4413      	add	r3, r2
 800422e:	335c      	adds	r3, #92	; 0x5c
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	202c      	movs	r0, #44	; 0x2c
 800423a:	fb00 f303 	mul.w	r3, r0, r3
 800423e:	440b      	add	r3, r1
 8004240:	335c      	adds	r3, #92	; 0x5c
 8004242:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	212c      	movs	r1, #44	; 0x2c
 800424a:	fb01 f303 	mul.w	r3, r1, r3
 800424e:	4413      	add	r3, r2
 8004250:	335c      	adds	r3, #92	; 0x5c
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d920      	bls.n	800429a <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	212c      	movs	r1, #44	; 0x2c
 800425e:	fb01 f303 	mul.w	r3, r1, r3
 8004262:	4413      	add	r3, r2
 8004264:	335c      	adds	r3, #92	; 0x5c
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	212c      	movs	r1, #44	; 0x2c
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	4413      	add	r3, r2
 8004276:	3360      	adds	r3, #96	; 0x60
 8004278:	2204      	movs	r2, #4
 800427a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	b2d9      	uxtb	r1, r3
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	202c      	movs	r0, #44	; 0x2c
 8004286:	fb00 f303 	mul.w	r3, r0, r3
 800428a:	4413      	add	r3, r2
 800428c:	3360      	adds	r3, #96	; 0x60
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f004 fa06 	bl	80086a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004298:	e008      	b.n	80042ac <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	212c      	movs	r1, #44	; 0x2c
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	4413      	add	r3, r2
 80042a6:	3360      	adds	r3, #96	; 0x60
 80042a8:	2202      	movs	r2, #2
 80042aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b8:	461a      	mov	r2, r3
 80042ba:	2380      	movs	r3, #128	; 0x80
 80042bc:	6093      	str	r3, [r2, #8]
}
 80042be:	e19b      	b.n	80045f8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d6:	d134      	bne.n	8004342 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	0151      	lsls	r1, r2, #5
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	440a      	add	r2, r1
 80042ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042f2:	f043 0302 	orr.w	r3, r3, #2
 80042f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	4611      	mov	r1, r2
 8004302:	4618      	mov	r0, r3
 8004304:	f002 f811 	bl	800632a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	4413      	add	r3, r2
 8004310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004314:	461a      	mov	r2, r3
 8004316:	2310      	movs	r3, #16
 8004318:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	4413      	add	r3, r2
 8004322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004326:	461a      	mov	r2, r3
 8004328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800432c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	212c      	movs	r1, #44	; 0x2c
 8004334:	fb01 f303 	mul.w	r3, r1, r3
 8004338:	4413      	add	r3, r2
 800433a:	3361      	adds	r3, #97	; 0x61
 800433c:	2208      	movs	r2, #8
 800433e:	701a      	strb	r2, [r3, #0]
}
 8004340:	e15a      	b.n	80045f8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	4413      	add	r3, r2
 800434a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b02      	cmp	r3, #2
 8004356:	f040 814f 	bne.w	80045f8 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	4413      	add	r3, r2
 8004362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	0151      	lsls	r1, r2, #5
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	440a      	add	r2, r1
 8004370:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004374:	f023 0302 	bic.w	r3, r3, #2
 8004378:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	212c      	movs	r1, #44	; 0x2c
 8004380:	fb01 f303 	mul.w	r3, r1, r3
 8004384:	4413      	add	r3, r2
 8004386:	3361      	adds	r3, #97	; 0x61
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d17d      	bne.n	800448a <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	212c      	movs	r1, #44	; 0x2c
 8004394:	fb01 f303 	mul.w	r3, r1, r3
 8004398:	4413      	add	r3, r2
 800439a:	3360      	adds	r3, #96	; 0x60
 800439c:	2201      	movs	r2, #1
 800439e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	212c      	movs	r1, #44	; 0x2c
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	4413      	add	r3, r2
 80043ac:	333f      	adds	r3, #63	; 0x3f
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d00a      	beq.n	80043ca <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	212c      	movs	r1, #44	; 0x2c
 80043ba:	fb01 f303 	mul.w	r3, r1, r3
 80043be:	4413      	add	r3, r2
 80043c0:	333f      	adds	r3, #63	; 0x3f
 80043c2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	f040 8100 	bne.w	80045ca <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d113      	bne.n	80043fa <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	212c      	movs	r1, #44	; 0x2c
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	4413      	add	r3, r2
 80043de:	3355      	adds	r3, #85	; 0x55
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	f083 0301 	eor.w	r3, r3, #1
 80043e6:	b2d8      	uxtb	r0, r3
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	212c      	movs	r1, #44	; 0x2c
 80043ee:	fb01 f303 	mul.w	r3, r1, r3
 80043f2:	4413      	add	r3, r2
 80043f4:	3355      	adds	r3, #85	; 0x55
 80043f6:	4602      	mov	r2, r0
 80043f8:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	f040 80e3 	bne.w	80045ca <HCD_HC_OUT_IRQHandler+0x7cc>
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	212c      	movs	r1, #44	; 0x2c
 800440a:	fb01 f303 	mul.w	r3, r1, r3
 800440e:	4413      	add	r3, r2
 8004410:	334c      	adds	r3, #76	; 0x4c
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80d8 	beq.w	80045ca <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	212c      	movs	r1, #44	; 0x2c
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	4413      	add	r3, r2
 8004426:	334c      	adds	r3, #76	; 0x4c
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	202c      	movs	r0, #44	; 0x2c
 8004430:	fb00 f202 	mul.w	r2, r0, r2
 8004434:	440a      	add	r2, r1
 8004436:	3240      	adds	r2, #64	; 0x40
 8004438:	8812      	ldrh	r2, [r2, #0]
 800443a:	4413      	add	r3, r2
 800443c:	3b01      	subs	r3, #1
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	202c      	movs	r0, #44	; 0x2c
 8004444:	fb00 f202 	mul.w	r2, r0, r2
 8004448:	440a      	add	r2, r1
 800444a:	3240      	adds	r2, #64	; 0x40
 800444c:	8812      	ldrh	r2, [r2, #0]
 800444e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 80b5 	beq.w	80045ca <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	212c      	movs	r1, #44	; 0x2c
 8004466:	fb01 f303 	mul.w	r3, r1, r3
 800446a:	4413      	add	r3, r2
 800446c:	3355      	adds	r3, #85	; 0x55
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	f083 0301 	eor.w	r3, r3, #1
 8004474:	b2d8      	uxtb	r0, r3
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	212c      	movs	r1, #44	; 0x2c
 800447c:	fb01 f303 	mul.w	r3, r1, r3
 8004480:	4413      	add	r3, r2
 8004482:	3355      	adds	r3, #85	; 0x55
 8004484:	4602      	mov	r2, r0
 8004486:	701a      	strb	r2, [r3, #0]
 8004488:	e09f      	b.n	80045ca <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	212c      	movs	r1, #44	; 0x2c
 8004490:	fb01 f303 	mul.w	r3, r1, r3
 8004494:	4413      	add	r3, r2
 8004496:	3361      	adds	r3, #97	; 0x61
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b03      	cmp	r3, #3
 800449c:	d109      	bne.n	80044b2 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	212c      	movs	r1, #44	; 0x2c
 80044a4:	fb01 f303 	mul.w	r3, r1, r3
 80044a8:	4413      	add	r3, r2
 80044aa:	3360      	adds	r3, #96	; 0x60
 80044ac:	2202      	movs	r2, #2
 80044ae:	701a      	strb	r2, [r3, #0]
 80044b0:	e08b      	b.n	80045ca <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	212c      	movs	r1, #44	; 0x2c
 80044b8:	fb01 f303 	mul.w	r3, r1, r3
 80044bc:	4413      	add	r3, r2
 80044be:	3361      	adds	r3, #97	; 0x61
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d109      	bne.n	80044da <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	212c      	movs	r1, #44	; 0x2c
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	4413      	add	r3, r2
 80044d2:	3360      	adds	r3, #96	; 0x60
 80044d4:	2202      	movs	r2, #2
 80044d6:	701a      	strb	r2, [r3, #0]
 80044d8:	e077      	b.n	80045ca <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	212c      	movs	r1, #44	; 0x2c
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	4413      	add	r3, r2
 80044e6:	3361      	adds	r3, #97	; 0x61
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b05      	cmp	r3, #5
 80044ec:	d109      	bne.n	8004502 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	212c      	movs	r1, #44	; 0x2c
 80044f4:	fb01 f303 	mul.w	r3, r1, r3
 80044f8:	4413      	add	r3, r2
 80044fa:	3360      	adds	r3, #96	; 0x60
 80044fc:	2205      	movs	r2, #5
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	e063      	b.n	80045ca <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	212c      	movs	r1, #44	; 0x2c
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	4413      	add	r3, r2
 800450e:	3361      	adds	r3, #97	; 0x61
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b06      	cmp	r3, #6
 8004514:	d009      	beq.n	800452a <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	212c      	movs	r1, #44	; 0x2c
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	4413      	add	r3, r2
 8004522:	3361      	adds	r3, #97	; 0x61
 8004524:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004526:	2b08      	cmp	r3, #8
 8004528:	d14f      	bne.n	80045ca <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	212c      	movs	r1, #44	; 0x2c
 8004530:	fb01 f303 	mul.w	r3, r1, r3
 8004534:	4413      	add	r3, r2
 8004536:	335c      	adds	r3, #92	; 0x5c
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	202c      	movs	r0, #44	; 0x2c
 8004542:	fb00 f303 	mul.w	r3, r0, r3
 8004546:	440b      	add	r3, r1
 8004548:	335c      	adds	r3, #92	; 0x5c
 800454a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	212c      	movs	r1, #44	; 0x2c
 8004552:	fb01 f303 	mul.w	r3, r1, r3
 8004556:	4413      	add	r3, r2
 8004558:	335c      	adds	r3, #92	; 0x5c
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d912      	bls.n	8004586 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	212c      	movs	r1, #44	; 0x2c
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	4413      	add	r3, r2
 800456c:	335c      	adds	r3, #92	; 0x5c
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	212c      	movs	r1, #44	; 0x2c
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	4413      	add	r3, r2
 800457e:	3360      	adds	r3, #96	; 0x60
 8004580:	2204      	movs	r2, #4
 8004582:	701a      	strb	r2, [r3, #0]
 8004584:	e021      	b.n	80045ca <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	212c      	movs	r1, #44	; 0x2c
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	4413      	add	r3, r2
 8004592:	3360      	adds	r3, #96	; 0x60
 8004594:	2202      	movs	r2, #2
 8004596:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045ae:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045b6:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c4:	461a      	mov	r2, r3
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d6:	461a      	mov	r2, r3
 80045d8:	2302      	movs	r3, #2
 80045da:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	b2d9      	uxtb	r1, r3
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	202c      	movs	r0, #44	; 0x2c
 80045e6:	fb00 f303 	mul.w	r3, r0, r3
 80045ea:	4413      	add	r3, r2
 80045ec:	3360      	adds	r3, #96	; 0x60
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f004 f856 	bl	80086a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80045f8:	bf00      	nop
 80045fa:	3720      	adds	r7, #32
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08a      	sub	sp, #40	; 0x28
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	0c5b      	lsrs	r3, r3, #17
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	091b      	lsrs	r3, r3, #4
 8004630:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004634:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d004      	beq.n	8004646 <HCD_RXQLVL_IRQHandler+0x46>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2b05      	cmp	r3, #5
 8004640:	f000 80a9 	beq.w	8004796 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004644:	e0aa      	b.n	800479c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80a6 	beq.w	800479a <HCD_RXQLVL_IRQHandler+0x19a>
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	212c      	movs	r1, #44	; 0x2c
 8004654:	fb01 f303 	mul.w	r3, r1, r3
 8004658:	4413      	add	r3, r2
 800465a:	3344      	adds	r3, #68	; 0x44
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 809b 	beq.w	800479a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	212c      	movs	r1, #44	; 0x2c
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	4413      	add	r3, r2
 8004670:	3350      	adds	r3, #80	; 0x50
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	441a      	add	r2, r3
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	202c      	movs	r0, #44	; 0x2c
 800467e:	fb00 f303 	mul.w	r3, r0, r3
 8004682:	440b      	add	r3, r1
 8004684:	334c      	adds	r3, #76	; 0x4c
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d87a      	bhi.n	8004782 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6818      	ldr	r0, [r3, #0]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	212c      	movs	r1, #44	; 0x2c
 8004696:	fb01 f303 	mul.w	r3, r1, r3
 800469a:	4413      	add	r3, r2
 800469c:	3344      	adds	r3, #68	; 0x44
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	b292      	uxth	r2, r2
 80046a4:	4619      	mov	r1, r3
 80046a6:	f001 f9b9 	bl	8005a1c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	212c      	movs	r1, #44	; 0x2c
 80046b0:	fb01 f303 	mul.w	r3, r1, r3
 80046b4:	4413      	add	r3, r2
 80046b6:	3344      	adds	r3, #68	; 0x44
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	441a      	add	r2, r3
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	202c      	movs	r0, #44	; 0x2c
 80046c4:	fb00 f303 	mul.w	r3, r0, r3
 80046c8:	440b      	add	r3, r1
 80046ca:	3344      	adds	r3, #68	; 0x44
 80046cc:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	212c      	movs	r1, #44	; 0x2c
 80046d4:	fb01 f303 	mul.w	r3, r1, r3
 80046d8:	4413      	add	r3, r2
 80046da:	3350      	adds	r3, #80	; 0x50
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	441a      	add	r2, r3
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	202c      	movs	r0, #44	; 0x2c
 80046e8:	fb00 f303 	mul.w	r3, r0, r3
 80046ec:	440b      	add	r3, r1
 80046ee:	3350      	adds	r3, #80	; 0x50
 80046f0:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	0cdb      	lsrs	r3, r3, #19
 8004702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004706:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	212c      	movs	r1, #44	; 0x2c
 800470e:	fb01 f303 	mul.w	r3, r1, r3
 8004712:	4413      	add	r3, r2
 8004714:	3340      	adds	r3, #64	; 0x40
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	461a      	mov	r2, r3
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	4293      	cmp	r3, r2
 800471e:	d13c      	bne.n	800479a <HCD_RXQLVL_IRQHandler+0x19a>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d039      	beq.n	800479a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	4413      	add	r3, r2
 800472e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800473c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004744:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	4413      	add	r3, r2
 800474e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004752:	461a      	mov	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	212c      	movs	r1, #44	; 0x2c
 800475e:	fb01 f303 	mul.w	r3, r1, r3
 8004762:	4413      	add	r3, r2
 8004764:	3354      	adds	r3, #84	; 0x54
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	f083 0301 	eor.w	r3, r3, #1
 800476c:	b2d8      	uxtb	r0, r3
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	212c      	movs	r1, #44	; 0x2c
 8004774:	fb01 f303 	mul.w	r3, r1, r3
 8004778:	4413      	add	r3, r2
 800477a:	3354      	adds	r3, #84	; 0x54
 800477c:	4602      	mov	r2, r0
 800477e:	701a      	strb	r2, [r3, #0]
      break;
 8004780:	e00b      	b.n	800479a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	212c      	movs	r1, #44	; 0x2c
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	4413      	add	r3, r2
 800478e:	3360      	adds	r3, #96	; 0x60
 8004790:	2204      	movs	r2, #4
 8004792:	701a      	strb	r2, [r3, #0]
      break;
 8004794:	e001      	b.n	800479a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004796:	bf00      	nop
 8004798:	e000      	b.n	800479c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800479a:	bf00      	nop
  }
}
 800479c:	bf00      	nop
 800479e:	3728      	adds	r7, #40	; 0x28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80047d0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d10b      	bne.n	80047f4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d102      	bne.n	80047ec <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f003 ff40 	bl	800866c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f043 0302 	orr.w	r3, r3, #2
 80047f2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d132      	bne.n	8004864 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	f043 0308 	orr.w	r3, r3, #8
 8004804:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b04      	cmp	r3, #4
 800480e:	d126      	bne.n	800485e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	2b02      	cmp	r3, #2
 8004816:	d113      	bne.n	8004840 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800481e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004822:	d106      	bne.n	8004832 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2102      	movs	r1, #2
 800482a:	4618      	mov	r0, r3
 800482c:	f001 fa56 	bl	8005cdc <USB_InitFSLSPClkSel>
 8004830:	e011      	b.n	8004856 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2101      	movs	r1, #1
 8004838:	4618      	mov	r0, r3
 800483a:	f001 fa4f 	bl	8005cdc <USB_InitFSLSPClkSel>
 800483e:	e00a      	b.n	8004856 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d106      	bne.n	8004856 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800484e:	461a      	mov	r2, r3
 8004850:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004854:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f003 ff32 	bl	80086c0 <HAL_HCD_PortEnabled_Callback>
 800485c:	e002      	b.n	8004864 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f003 ff3c 	bl	80086dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b20      	cmp	r3, #32
 800486c:	d103      	bne.n	8004876 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f043 0320 	orr.w	r3, r3, #32
 8004874:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800487c:	461a      	mov	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	6013      	str	r3, [r2, #0]
}
 8004882:	bf00      	nop
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e264      	b.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d075      	beq.n	8004996 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048aa:	4ba3      	ldr	r3, [pc, #652]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d00c      	beq.n	80048d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048b6:	4ba0      	ldr	r3, [pc, #640]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d112      	bne.n	80048e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c2:	4b9d      	ldr	r3, [pc, #628]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ce:	d10b      	bne.n	80048e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d0:	4b99      	ldr	r3, [pc, #612]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d05b      	beq.n	8004994 <HAL_RCC_OscConfig+0x108>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d157      	bne.n	8004994 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e23f      	b.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f0:	d106      	bne.n	8004900 <HAL_RCC_OscConfig+0x74>
 80048f2:	4b91      	ldr	r3, [pc, #580]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a90      	ldr	r2, [pc, #576]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 80048f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	e01d      	b.n	800493c <HAL_RCC_OscConfig+0xb0>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004908:	d10c      	bne.n	8004924 <HAL_RCC_OscConfig+0x98>
 800490a:	4b8b      	ldr	r3, [pc, #556]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a8a      	ldr	r2, [pc, #552]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 8004910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	4b88      	ldr	r3, [pc, #544]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a87      	ldr	r2, [pc, #540]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 800491c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	e00b      	b.n	800493c <HAL_RCC_OscConfig+0xb0>
 8004924:	4b84      	ldr	r3, [pc, #528]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a83      	ldr	r2, [pc, #524]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 800492a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	4b81      	ldr	r3, [pc, #516]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a80      	ldr	r2, [pc, #512]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 8004936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800493a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d013      	beq.n	800496c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004944:	f7fc ff80 	bl	8001848 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800494c:	f7fc ff7c 	bl	8001848 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b64      	cmp	r3, #100	; 0x64
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e204      	b.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495e:	4b76      	ldr	r3, [pc, #472]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCC_OscConfig+0xc0>
 800496a:	e014      	b.n	8004996 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496c:	f7fc ff6c 	bl	8001848 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004974:	f7fc ff68 	bl	8001848 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	; 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e1f0      	b.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004986:	4b6c      	ldr	r3, [pc, #432]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0xe8>
 8004992:	e000      	b.n	8004996 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d063      	beq.n	8004a6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049a2:	4b65      	ldr	r3, [pc, #404]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00b      	beq.n	80049c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ae:	4b62      	ldr	r3, [pc, #392]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d11c      	bne.n	80049f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ba:	4b5f      	ldr	r3, [pc, #380]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d116      	bne.n	80049f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c6:	4b5c      	ldr	r3, [pc, #368]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <HAL_RCC_OscConfig+0x152>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d001      	beq.n	80049de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e1c4      	b.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049de:	4b56      	ldr	r3, [pc, #344]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	4952      	ldr	r1, [pc, #328]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049f2:	e03a      	b.n	8004a6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d020      	beq.n	8004a3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049fc:	4b4f      	ldr	r3, [pc, #316]	; (8004b3c <HAL_RCC_OscConfig+0x2b0>)
 80049fe:	2201      	movs	r2, #1
 8004a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a02:	f7fc ff21 	bl	8001848 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a0a:	f7fc ff1d 	bl	8001848 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e1a5      	b.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1c:	4b46      	ldr	r3, [pc, #280]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a28:	4b43      	ldr	r3, [pc, #268]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4940      	ldr	r1, [pc, #256]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	600b      	str	r3, [r1, #0]
 8004a3c:	e015      	b.n	8004a6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a3e:	4b3f      	ldr	r3, [pc, #252]	; (8004b3c <HAL_RCC_OscConfig+0x2b0>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fc ff00 	bl	8001848 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a4c:	f7fc fefc 	bl	8001848 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e184      	b.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5e:	4b36      	ldr	r3, [pc, #216]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d030      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d016      	beq.n	8004aac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a7e:	4b30      	ldr	r3, [pc, #192]	; (8004b40 <HAL_RCC_OscConfig+0x2b4>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a84:	f7fc fee0 	bl	8001848 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a8c:	f7fc fedc 	bl	8001848 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e164      	b.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9e:	4b26      	ldr	r3, [pc, #152]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 8004aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0f0      	beq.n	8004a8c <HAL_RCC_OscConfig+0x200>
 8004aaa:	e015      	b.n	8004ad8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aac:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <HAL_RCC_OscConfig+0x2b4>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab2:	f7fc fec9 	bl	8001848 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aba:	f7fc fec5 	bl	8001848 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e14d      	b.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004acc:	4b1a      	ldr	r3, [pc, #104]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 8004ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f0      	bne.n	8004aba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 80a0 	beq.w	8004c26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aea:	4b13      	ldr	r3, [pc, #76]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10f      	bne.n	8004b16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af6:	2300      	movs	r3, #0
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	4a0e      	ldr	r2, [pc, #56]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 8004b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b04:	6413      	str	r3, [r2, #64]	; 0x40
 8004b06:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <HAL_RCC_OscConfig+0x2ac>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0e:	60bb      	str	r3, [r7, #8]
 8004b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b12:	2301      	movs	r3, #1
 8004b14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <HAL_RCC_OscConfig+0x2b8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d121      	bne.n	8004b66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b22:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <HAL_RCC_OscConfig+0x2b8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a07      	ldr	r2, [pc, #28]	; (8004b44 <HAL_RCC_OscConfig+0x2b8>)
 8004b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b2e:	f7fc fe8b 	bl	8001848 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b34:	e011      	b.n	8004b5a <HAL_RCC_OscConfig+0x2ce>
 8004b36:	bf00      	nop
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	42470000 	.word	0x42470000
 8004b40:	42470e80 	.word	0x42470e80
 8004b44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b48:	f7fc fe7e 	bl	8001848 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e106      	b.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b5a:	4b85      	ldr	r3, [pc, #532]	; (8004d70 <HAL_RCC_OscConfig+0x4e4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f0      	beq.n	8004b48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d106      	bne.n	8004b7c <HAL_RCC_OscConfig+0x2f0>
 8004b6e:	4b81      	ldr	r3, [pc, #516]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b72:	4a80      	ldr	r2, [pc, #512]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004b74:	f043 0301 	orr.w	r3, r3, #1
 8004b78:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7a:	e01c      	b.n	8004bb6 <HAL_RCC_OscConfig+0x32a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	2b05      	cmp	r3, #5
 8004b82:	d10c      	bne.n	8004b9e <HAL_RCC_OscConfig+0x312>
 8004b84:	4b7b      	ldr	r3, [pc, #492]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b88:	4a7a      	ldr	r2, [pc, #488]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004b8a:	f043 0304 	orr.w	r3, r3, #4
 8004b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b90:	4b78      	ldr	r3, [pc, #480]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b94:	4a77      	ldr	r2, [pc, #476]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9c:	e00b      	b.n	8004bb6 <HAL_RCC_OscConfig+0x32a>
 8004b9e:	4b75      	ldr	r3, [pc, #468]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba2:	4a74      	ldr	r2, [pc, #464]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004ba4:	f023 0301 	bic.w	r3, r3, #1
 8004ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8004baa:	4b72      	ldr	r3, [pc, #456]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bae:	4a71      	ldr	r2, [pc, #452]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004bb0:	f023 0304 	bic.w	r3, r3, #4
 8004bb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d015      	beq.n	8004bea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bbe:	f7fc fe43 	bl	8001848 <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc4:	e00a      	b.n	8004bdc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc6:	f7fc fe3f 	bl	8001848 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e0c5      	b.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bdc:	4b65      	ldr	r3, [pc, #404]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0ee      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x33a>
 8004be8:	e014      	b.n	8004c14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bea:	f7fc fe2d 	bl	8001848 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf0:	e00a      	b.n	8004c08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bf2:	f7fc fe29 	bl	8001848 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e0af      	b.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c08:	4b5a      	ldr	r3, [pc, #360]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1ee      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d105      	bne.n	8004c26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c1a:	4b56      	ldr	r3, [pc, #344]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	4a55      	ldr	r2, [pc, #340]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 809b 	beq.w	8004d66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c30:	4b50      	ldr	r3, [pc, #320]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 030c 	and.w	r3, r3, #12
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d05c      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d141      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c44:	4b4c      	ldr	r3, [pc, #304]	; (8004d78 <HAL_RCC_OscConfig+0x4ec>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4a:	f7fc fdfd 	bl	8001848 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c52:	f7fc fdf9 	bl	8001848 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e081      	b.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c64:	4b43      	ldr	r3, [pc, #268]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1f0      	bne.n	8004c52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69da      	ldr	r2, [r3, #28]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	019b      	lsls	r3, r3, #6
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	085b      	lsrs	r3, r3, #1
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	041b      	lsls	r3, r3, #16
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	061b      	lsls	r3, r3, #24
 8004c94:	4937      	ldr	r1, [pc, #220]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c9a:	4b37      	ldr	r3, [pc, #220]	; (8004d78 <HAL_RCC_OscConfig+0x4ec>)
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca0:	f7fc fdd2 	bl	8001848 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ca8:	f7fc fdce 	bl	8001848 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e056      	b.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cba:	4b2e      	ldr	r3, [pc, #184]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0f0      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x41c>
 8004cc6:	e04e      	b.n	8004d66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc8:	4b2b      	ldr	r3, [pc, #172]	; (8004d78 <HAL_RCC_OscConfig+0x4ec>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cce:	f7fc fdbb 	bl	8001848 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cd6:	f7fc fdb7 	bl	8001848 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e03f      	b.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce8:	4b22      	ldr	r3, [pc, #136]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1f0      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x44a>
 8004cf4:	e037      	b.n	8004d66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e032      	b.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d02:	4b1c      	ldr	r3, [pc, #112]	; (8004d74 <HAL_RCC_OscConfig+0x4e8>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d028      	beq.n	8004d62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d121      	bne.n	8004d62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d11a      	bne.n	8004d62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d32:	4013      	ands	r3, r2
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d111      	bne.n	8004d62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d48:	085b      	lsrs	r3, r3, #1
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d107      	bne.n	8004d62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d001      	beq.n	8004d66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e000      	b.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40007000 	.word	0x40007000
 8004d74:	40023800 	.word	0x40023800
 8004d78:	42470060 	.word	0x42470060

08004d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0cc      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d90:	4b68      	ldr	r3, [pc, #416]	; (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d90c      	bls.n	8004db8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9e:	4b65      	ldr	r3, [pc, #404]	; (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da6:	4b63      	ldr	r3, [pc, #396]	; (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d001      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0b8      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d020      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dd0:	4b59      	ldr	r3, [pc, #356]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	4a58      	ldr	r2, [pc, #352]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004de8:	4b53      	ldr	r3, [pc, #332]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	4a52      	ldr	r2, [pc, #328]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004df2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df4:	4b50      	ldr	r3, [pc, #320]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	494d      	ldr	r1, [pc, #308]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d044      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d107      	bne.n	8004e2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1a:	4b47      	ldr	r3, [pc, #284]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d119      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e07f      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d003      	beq.n	8004e3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d107      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e3a:	4b3f      	ldr	r3, [pc, #252]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e06f      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4a:	4b3b      	ldr	r3, [pc, #236]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e067      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e5a:	4b37      	ldr	r3, [pc, #220]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f023 0203 	bic.w	r2, r3, #3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	4934      	ldr	r1, [pc, #208]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e6c:	f7fc fcec 	bl	8001848 <HAL_GetTick>
 8004e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e72:	e00a      	b.n	8004e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e74:	f7fc fce8 	bl	8001848 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e04f      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8a:	4b2b      	ldr	r3, [pc, #172]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 020c 	and.w	r2, r3, #12
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d1eb      	bne.n	8004e74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e9c:	4b25      	ldr	r3, [pc, #148]	; (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d20c      	bcs.n	8004ec4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eaa:	4b22      	ldr	r3, [pc, #136]	; (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb2:	4b20      	ldr	r3, [pc, #128]	; (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d001      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e032      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ed0:	4b19      	ldr	r3, [pc, #100]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	4916      	ldr	r1, [pc, #88]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eee:	4b12      	ldr	r3, [pc, #72]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	490e      	ldr	r1, [pc, #56]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f02:	f000 f821 	bl	8004f48 <HAL_RCC_GetSysClockFreq>
 8004f06:	4602      	mov	r2, r0
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	091b      	lsrs	r3, r3, #4
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	490a      	ldr	r1, [pc, #40]	; (8004f3c <HAL_RCC_ClockConfig+0x1c0>)
 8004f14:	5ccb      	ldrb	r3, [r1, r3]
 8004f16:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1a:	4a09      	ldr	r2, [pc, #36]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f1e:	4b09      	ldr	r3, [pc, #36]	; (8004f44 <HAL_RCC_ClockConfig+0x1c8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fc fc4c 	bl	80017c0 <HAL_InitTick>

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40023c00 	.word	0x40023c00
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	08009d84 	.word	0x08009d84
 8004f40:	20000000 	.word	0x20000000
 8004f44:	20000004 	.word	0x20000004

08004f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	607b      	str	r3, [r7, #4]
 8004f54:	2300      	movs	r3, #0
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f60:	4b67      	ldr	r3, [pc, #412]	; (8005100 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 030c 	and.w	r3, r3, #12
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d00d      	beq.n	8004f88 <HAL_RCC_GetSysClockFreq+0x40>
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	f200 80bd 	bhi.w	80050ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <HAL_RCC_GetSysClockFreq+0x34>
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d003      	beq.n	8004f82 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f7a:	e0b7      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f7c:	4b61      	ldr	r3, [pc, #388]	; (8005104 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f7e:	60bb      	str	r3, [r7, #8]
       break;
 8004f80:	e0b7      	b.n	80050f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f82:	4b61      	ldr	r3, [pc, #388]	; (8005108 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004f84:	60bb      	str	r3, [r7, #8]
      break;
 8004f86:	e0b4      	b.n	80050f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f88:	4b5d      	ldr	r3, [pc, #372]	; (8005100 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f92:	4b5b      	ldr	r3, [pc, #364]	; (8005100 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d04d      	beq.n	800503a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f9e:	4b58      	ldr	r3, [pc, #352]	; (8005100 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	099b      	lsrs	r3, r3, #6
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004fae:	f04f 0100 	mov.w	r1, #0
 8004fb2:	ea02 0800 	and.w	r8, r2, r0
 8004fb6:	ea03 0901 	and.w	r9, r3, r1
 8004fba:	4640      	mov	r0, r8
 8004fbc:	4649      	mov	r1, r9
 8004fbe:	f04f 0200 	mov.w	r2, #0
 8004fc2:	f04f 0300 	mov.w	r3, #0
 8004fc6:	014b      	lsls	r3, r1, #5
 8004fc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004fcc:	0142      	lsls	r2, r0, #5
 8004fce:	4610      	mov	r0, r2
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	ebb0 0008 	subs.w	r0, r0, r8
 8004fd6:	eb61 0109 	sbc.w	r1, r1, r9
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	018b      	lsls	r3, r1, #6
 8004fe4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004fe8:	0182      	lsls	r2, r0, #6
 8004fea:	1a12      	subs	r2, r2, r0
 8004fec:	eb63 0301 	sbc.w	r3, r3, r1
 8004ff0:	f04f 0000 	mov.w	r0, #0
 8004ff4:	f04f 0100 	mov.w	r1, #0
 8004ff8:	00d9      	lsls	r1, r3, #3
 8004ffa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ffe:	00d0      	lsls	r0, r2, #3
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	eb12 0208 	adds.w	r2, r2, r8
 8005008:	eb43 0309 	adc.w	r3, r3, r9
 800500c:	f04f 0000 	mov.w	r0, #0
 8005010:	f04f 0100 	mov.w	r1, #0
 8005014:	0259      	lsls	r1, r3, #9
 8005016:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800501a:	0250      	lsls	r0, r2, #9
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4610      	mov	r0, r2
 8005022:	4619      	mov	r1, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	461a      	mov	r2, r3
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	f7fb fd6a 	bl	8000b04 <__aeabi_uldivmod>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4613      	mov	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	e04a      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800503a:	4b31      	ldr	r3, [pc, #196]	; (8005100 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	099b      	lsrs	r3, r3, #6
 8005040:	461a      	mov	r2, r3
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	f240 10ff 	movw	r0, #511	; 0x1ff
 800504a:	f04f 0100 	mov.w	r1, #0
 800504e:	ea02 0400 	and.w	r4, r2, r0
 8005052:	ea03 0501 	and.w	r5, r3, r1
 8005056:	4620      	mov	r0, r4
 8005058:	4629      	mov	r1, r5
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	f04f 0300 	mov.w	r3, #0
 8005062:	014b      	lsls	r3, r1, #5
 8005064:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005068:	0142      	lsls	r2, r0, #5
 800506a:	4610      	mov	r0, r2
 800506c:	4619      	mov	r1, r3
 800506e:	1b00      	subs	r0, r0, r4
 8005070:	eb61 0105 	sbc.w	r1, r1, r5
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	018b      	lsls	r3, r1, #6
 800507e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005082:	0182      	lsls	r2, r0, #6
 8005084:	1a12      	subs	r2, r2, r0
 8005086:	eb63 0301 	sbc.w	r3, r3, r1
 800508a:	f04f 0000 	mov.w	r0, #0
 800508e:	f04f 0100 	mov.w	r1, #0
 8005092:	00d9      	lsls	r1, r3, #3
 8005094:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005098:	00d0      	lsls	r0, r2, #3
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	1912      	adds	r2, r2, r4
 80050a0:	eb45 0303 	adc.w	r3, r5, r3
 80050a4:	f04f 0000 	mov.w	r0, #0
 80050a8:	f04f 0100 	mov.w	r1, #0
 80050ac:	0299      	lsls	r1, r3, #10
 80050ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80050b2:	0290      	lsls	r0, r2, #10
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4610      	mov	r0, r2
 80050ba:	4619      	mov	r1, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	461a      	mov	r2, r3
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	f7fb fd1e 	bl	8000b04 <__aeabi_uldivmod>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4613      	mov	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050d0:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	0c1b      	lsrs	r3, r3, #16
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	3301      	adds	r3, #1
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e8:	60bb      	str	r3, [r7, #8]
      break;
 80050ea:	e002      	b.n	80050f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050ec:	4b05      	ldr	r3, [pc, #20]	; (8005104 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050ee:	60bb      	str	r3, [r7, #8]
      break;
 80050f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050f2:	68bb      	ldr	r3, [r7, #8]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80050fe:	bf00      	nop
 8005100:	40023800 	.word	0x40023800
 8005104:	00f42400 	.word	0x00f42400
 8005108:	007a1200 	.word	0x007a1200

0800510c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e041      	b.n	80051a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fc fa52 	bl	80015dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3304      	adds	r3, #4
 8005148:	4619      	mov	r1, r3
 800514a:	4610      	mov	r0, r2
 800514c:	f000 f95e 	bl	800540c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d001      	beq.n	80051c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e046      	b.n	8005252 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a23      	ldr	r2, [pc, #140]	; (8005260 <HAL_TIM_Base_Start+0xb4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d022      	beq.n	800521c <HAL_TIM_Base_Start+0x70>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051de:	d01d      	beq.n	800521c <HAL_TIM_Base_Start+0x70>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1f      	ldr	r2, [pc, #124]	; (8005264 <HAL_TIM_Base_Start+0xb8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d018      	beq.n	800521c <HAL_TIM_Base_Start+0x70>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1e      	ldr	r2, [pc, #120]	; (8005268 <HAL_TIM_Base_Start+0xbc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d013      	beq.n	800521c <HAL_TIM_Base_Start+0x70>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1c      	ldr	r2, [pc, #112]	; (800526c <HAL_TIM_Base_Start+0xc0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00e      	beq.n	800521c <HAL_TIM_Base_Start+0x70>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1b      	ldr	r2, [pc, #108]	; (8005270 <HAL_TIM_Base_Start+0xc4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d009      	beq.n	800521c <HAL_TIM_Base_Start+0x70>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a19      	ldr	r2, [pc, #100]	; (8005274 <HAL_TIM_Base_Start+0xc8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d004      	beq.n	800521c <HAL_TIM_Base_Start+0x70>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a18      	ldr	r2, [pc, #96]	; (8005278 <HAL_TIM_Base_Start+0xcc>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d111      	bne.n	8005240 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b06      	cmp	r3, #6
 800522c:	d010      	beq.n	8005250 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0201 	orr.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800523e:	e007      	b.n	8005250 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0201 	orr.w	r2, r2, #1
 800524e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40010000 	.word	0x40010000
 8005264:	40000400 	.word	0x40000400
 8005268:	40000800 	.word	0x40000800
 800526c:	40000c00 	.word	0x40000c00
 8005270:	40010400 	.word	0x40010400
 8005274:	40014000 	.word	0x40014000
 8005278:	40001800 	.word	0x40001800

0800527c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_TIM_ConfigClockSource+0x1c>
 8005294:	2302      	movs	r3, #2
 8005296:	e0b4      	b.n	8005402 <HAL_TIM_ConfigClockSource+0x186>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052d0:	d03e      	beq.n	8005350 <HAL_TIM_ConfigClockSource+0xd4>
 80052d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052d6:	f200 8087 	bhi.w	80053e8 <HAL_TIM_ConfigClockSource+0x16c>
 80052da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052de:	f000 8086 	beq.w	80053ee <HAL_TIM_ConfigClockSource+0x172>
 80052e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e6:	d87f      	bhi.n	80053e8 <HAL_TIM_ConfigClockSource+0x16c>
 80052e8:	2b70      	cmp	r3, #112	; 0x70
 80052ea:	d01a      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0xa6>
 80052ec:	2b70      	cmp	r3, #112	; 0x70
 80052ee:	d87b      	bhi.n	80053e8 <HAL_TIM_ConfigClockSource+0x16c>
 80052f0:	2b60      	cmp	r3, #96	; 0x60
 80052f2:	d050      	beq.n	8005396 <HAL_TIM_ConfigClockSource+0x11a>
 80052f4:	2b60      	cmp	r3, #96	; 0x60
 80052f6:	d877      	bhi.n	80053e8 <HAL_TIM_ConfigClockSource+0x16c>
 80052f8:	2b50      	cmp	r3, #80	; 0x50
 80052fa:	d03c      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0xfa>
 80052fc:	2b50      	cmp	r3, #80	; 0x50
 80052fe:	d873      	bhi.n	80053e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005300:	2b40      	cmp	r3, #64	; 0x40
 8005302:	d058      	beq.n	80053b6 <HAL_TIM_ConfigClockSource+0x13a>
 8005304:	2b40      	cmp	r3, #64	; 0x40
 8005306:	d86f      	bhi.n	80053e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005308:	2b30      	cmp	r3, #48	; 0x30
 800530a:	d064      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0x15a>
 800530c:	2b30      	cmp	r3, #48	; 0x30
 800530e:	d86b      	bhi.n	80053e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005310:	2b20      	cmp	r3, #32
 8005312:	d060      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005314:	2b20      	cmp	r3, #32
 8005316:	d867      	bhi.n	80053e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005318:	2b00      	cmp	r3, #0
 800531a:	d05c      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0x15a>
 800531c:	2b10      	cmp	r3, #16
 800531e:	d05a      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005320:	e062      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6899      	ldr	r1, [r3, #8]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f000 f985 	bl	8005640 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005344:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	609a      	str	r2, [r3, #8]
      break;
 800534e:	e04f      	b.n	80053f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	6899      	ldr	r1, [r3, #8]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f000 f96e 	bl	8005640 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005372:	609a      	str	r2, [r3, #8]
      break;
 8005374:	e03c      	b.n	80053f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	6859      	ldr	r1, [r3, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	461a      	mov	r2, r3
 8005384:	f000 f8e2 	bl	800554c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2150      	movs	r1, #80	; 0x50
 800538e:	4618      	mov	r0, r3
 8005390:	f000 f93b 	bl	800560a <TIM_ITRx_SetConfig>
      break;
 8005394:	e02c      	b.n	80053f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6859      	ldr	r1, [r3, #4]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	461a      	mov	r2, r3
 80053a4:	f000 f901 	bl	80055aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2160      	movs	r1, #96	; 0x60
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 f92b 	bl	800560a <TIM_ITRx_SetConfig>
      break;
 80053b4:	e01c      	b.n	80053f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6859      	ldr	r1, [r3, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	461a      	mov	r2, r3
 80053c4:	f000 f8c2 	bl	800554c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2140      	movs	r1, #64	; 0x40
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 f91b 	bl	800560a <TIM_ITRx_SetConfig>
      break;
 80053d4:	e00c      	b.n	80053f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4619      	mov	r1, r3
 80053e0:	4610      	mov	r0, r2
 80053e2:	f000 f912 	bl	800560a <TIM_ITRx_SetConfig>
      break;
 80053e6:	e003      	b.n	80053f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	73fb      	strb	r3, [r7, #15]
      break;
 80053ec:	e000      	b.n	80053f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005400:	7bfb      	ldrb	r3, [r7, #15]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a40      	ldr	r2, [pc, #256]	; (8005520 <TIM_Base_SetConfig+0x114>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d013      	beq.n	800544c <TIM_Base_SetConfig+0x40>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542a:	d00f      	beq.n	800544c <TIM_Base_SetConfig+0x40>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a3d      	ldr	r2, [pc, #244]	; (8005524 <TIM_Base_SetConfig+0x118>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00b      	beq.n	800544c <TIM_Base_SetConfig+0x40>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a3c      	ldr	r2, [pc, #240]	; (8005528 <TIM_Base_SetConfig+0x11c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d007      	beq.n	800544c <TIM_Base_SetConfig+0x40>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a3b      	ldr	r2, [pc, #236]	; (800552c <TIM_Base_SetConfig+0x120>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d003      	beq.n	800544c <TIM_Base_SetConfig+0x40>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a3a      	ldr	r2, [pc, #232]	; (8005530 <TIM_Base_SetConfig+0x124>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d108      	bne.n	800545e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a2f      	ldr	r2, [pc, #188]	; (8005520 <TIM_Base_SetConfig+0x114>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d02b      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546c:	d027      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a2c      	ldr	r2, [pc, #176]	; (8005524 <TIM_Base_SetConfig+0x118>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d023      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a2b      	ldr	r2, [pc, #172]	; (8005528 <TIM_Base_SetConfig+0x11c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d01f      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a2a      	ldr	r2, [pc, #168]	; (800552c <TIM_Base_SetConfig+0x120>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d01b      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a29      	ldr	r2, [pc, #164]	; (8005530 <TIM_Base_SetConfig+0x124>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d017      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a28      	ldr	r2, [pc, #160]	; (8005534 <TIM_Base_SetConfig+0x128>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d013      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a27      	ldr	r2, [pc, #156]	; (8005538 <TIM_Base_SetConfig+0x12c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00f      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a26      	ldr	r2, [pc, #152]	; (800553c <TIM_Base_SetConfig+0x130>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00b      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a25      	ldr	r2, [pc, #148]	; (8005540 <TIM_Base_SetConfig+0x134>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d007      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a24      	ldr	r2, [pc, #144]	; (8005544 <TIM_Base_SetConfig+0x138>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d003      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a23      	ldr	r2, [pc, #140]	; (8005548 <TIM_Base_SetConfig+0x13c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d108      	bne.n	80054d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a0a      	ldr	r2, [pc, #40]	; (8005520 <TIM_Base_SetConfig+0x114>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <TIM_Base_SetConfig+0xf8>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a0c      	ldr	r2, [pc, #48]	; (8005530 <TIM_Base_SetConfig+0x124>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d103      	bne.n	800550c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	615a      	str	r2, [r3, #20]
}
 8005512:	bf00      	nop
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40010000 	.word	0x40010000
 8005524:	40000400 	.word	0x40000400
 8005528:	40000800 	.word	0x40000800
 800552c:	40000c00 	.word	0x40000c00
 8005530:	40010400 	.word	0x40010400
 8005534:	40014000 	.word	0x40014000
 8005538:	40014400 	.word	0x40014400
 800553c:	40014800 	.word	0x40014800
 8005540:	40001800 	.word	0x40001800
 8005544:	40001c00 	.word	0x40001c00
 8005548:	40002000 	.word	0x40002000

0800554c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	f023 0201 	bic.w	r2, r3, #1
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f023 030a 	bic.w	r3, r3, #10
 8005588:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b087      	sub	sp, #28
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	f023 0210 	bic.w	r2, r3, #16
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	031b      	lsls	r3, r3, #12
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	621a      	str	r2, [r3, #32]
}
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800560a:	b480      	push	{r7}
 800560c:	b085      	sub	sp, #20
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005620:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	f043 0307 	orr.w	r3, r3, #7
 800562c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	609a      	str	r2, [r3, #8]
}
 8005634:	bf00      	nop
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800565a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	021a      	lsls	r2, r3, #8
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	431a      	orrs	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4313      	orrs	r3, r2
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	609a      	str	r2, [r3, #8]
}
 8005674:	bf00      	nop
 8005676:	371c      	adds	r7, #28
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005694:	2302      	movs	r3, #2
 8005696:	e05a      	b.n	800574e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a21      	ldr	r2, [pc, #132]	; (800575c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d022      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e4:	d01d      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a1d      	ldr	r2, [pc, #116]	; (8005760 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d018      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a1b      	ldr	r2, [pc, #108]	; (8005764 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d013      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a1a      	ldr	r2, [pc, #104]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00e      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a18      	ldr	r2, [pc, #96]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d009      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a17      	ldr	r2, [pc, #92]	; (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d004      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a15      	ldr	r2, [pc, #84]	; (8005774 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d10c      	bne.n	800573c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	4313      	orrs	r3, r2
 8005732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40010000 	.word	0x40010000
 8005760:	40000400 	.word	0x40000400
 8005764:	40000800 	.word	0x40000800
 8005768:	40000c00 	.word	0x40000c00
 800576c:	40010400 	.word	0x40010400
 8005770:	40014000 	.word	0x40014000
 8005774:	40001800 	.word	0x40001800

08005778 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005778:	b084      	sub	sp, #16
 800577a:	b580      	push	{r7, lr}
 800577c:	b084      	sub	sp, #16
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	f107 001c 	add.w	r0, r7, #28
 8005786:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	2b01      	cmp	r3, #1
 800578e:	d122      	bne.n	80057d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d105      	bne.n	80057ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f9a0 	bl	8005b10 <USB_CoreReset>
 80057d0:	4603      	mov	r3, r0
 80057d2:	73fb      	strb	r3, [r7, #15]
 80057d4:	e01a      	b.n	800580c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f994 	bl	8005b10 <USB_CoreReset>
 80057e8:	4603      	mov	r3, r0
 80057ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	639a      	str	r2, [r3, #56]	; 0x38
 80057fe:	e005      	b.n	800580c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005804:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580e:	2b01      	cmp	r3, #1
 8005810:	d10b      	bne.n	800582a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f043 0206 	orr.w	r2, r3, #6
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f043 0220 	orr.w	r2, r3, #32
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800582a:	7bfb      	ldrb	r3, [r7, #15]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005836:	b004      	add	sp, #16
 8005838:	4770      	bx	lr

0800583a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f043 0201 	orr.w	r2, r3, #1
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f023 0201 	bic.w	r2, r3, #1
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b084      	sub	sp, #16
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	460b      	mov	r3, r1
 8005888:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d115      	bne.n	80058cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058ac:	2001      	movs	r0, #1
 80058ae:	f7fb ffd7 	bl	8001860 <HAL_Delay>
      ms++;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3301      	adds	r3, #1
 80058b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f91a 	bl	8005af2 <USB_GetMode>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d01e      	beq.n	8005902 <USB_SetCurrentMode+0x84>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b31      	cmp	r3, #49	; 0x31
 80058c8:	d9f0      	bls.n	80058ac <USB_SetCurrentMode+0x2e>
 80058ca:	e01a      	b.n	8005902 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d115      	bne.n	80058fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058de:	2001      	movs	r0, #1
 80058e0:	f7fb ffbe 	bl	8001860 <HAL_Delay>
      ms++;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3301      	adds	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f901 	bl	8005af2 <USB_GetMode>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d005      	beq.n	8005902 <USB_SetCurrentMode+0x84>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b31      	cmp	r3, #49	; 0x31
 80058fa:	d9f0      	bls.n	80058de <USB_SetCurrentMode+0x60>
 80058fc:	e001      	b.n	8005902 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e005      	b.n	800590e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b32      	cmp	r3, #50	; 0x32
 8005906:	d101      	bne.n	800590c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e000      	b.n	800590e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	019b      	lsls	r3, r3, #6
 800592a:	f043 0220 	orr.w	r2, r3, #32
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3301      	adds	r3, #1
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	4a08      	ldr	r2, [pc, #32]	; (800595c <USB_FlushTxFifo+0x44>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d901      	bls.n	8005942 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e006      	b.n	8005950 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b20      	cmp	r3, #32
 800594c:	d0f1      	beq.n	8005932 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	00030d40 	.word	0x00030d40

08005960 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2210      	movs	r2, #16
 8005970:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3301      	adds	r3, #1
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	4a08      	ldr	r2, [pc, #32]	; (800599c <USB_FlushRxFifo+0x3c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d901      	bls.n	8005982 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e006      	b.n	8005990 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f003 0310 	and.w	r3, r3, #16
 800598a:	2b10      	cmp	r3, #16
 800598c:	d0f1      	beq.n	8005972 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	00030d40 	.word	0x00030d40

080059a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b089      	sub	sp, #36	; 0x24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	4611      	mov	r1, r2
 80059ac:	461a      	mov	r2, r3
 80059ae:	460b      	mov	r3, r1
 80059b0:	71fb      	strb	r3, [r7, #7]
 80059b2:	4613      	mov	r3, r2
 80059b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80059be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d123      	bne.n	8005a0e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80059c6:	88bb      	ldrh	r3, [r7, #4]
 80059c8:	3303      	adds	r3, #3
 80059ca:	089b      	lsrs	r3, r3, #2
 80059cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80059ce:	2300      	movs	r3, #0
 80059d0:	61bb      	str	r3, [r7, #24]
 80059d2:	e018      	b.n	8005a06 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059d4:	79fb      	ldrb	r3, [r7, #7]
 80059d6:	031a      	lsls	r2, r3, #12
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059e0:	461a      	mov	r2, r3
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	3301      	adds	r3, #1
 80059ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	3301      	adds	r3, #1
 80059f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	3301      	adds	r3, #1
 80059f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	3301      	adds	r3, #1
 80059fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	3301      	adds	r3, #1
 8005a04:	61bb      	str	r3, [r7, #24]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d3e2      	bcc.n	80059d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3724      	adds	r7, #36	; 0x24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b08b      	sub	sp, #44	; 0x2c
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	4613      	mov	r3, r2
 8005a28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	089b      	lsrs	r3, r3, #2
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	f003 0303 	and.w	r3, r3, #3
 8005a40:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a42:	2300      	movs	r3, #0
 8005a44:	623b      	str	r3, [r7, #32]
 8005a46:	e014      	b.n	8005a72 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	3301      	adds	r3, #1
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	3301      	adds	r3, #1
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	3301      	adds	r3, #1
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	623b      	str	r3, [r7, #32]
 8005a72:	6a3a      	ldr	r2, [r7, #32]
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d3e6      	bcc.n	8005a48 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a7a:	8bfb      	ldrh	r3, [r7, #30]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01e      	beq.n	8005abe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f107 0310 	add.w	r3, r7, #16
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	701a      	strb	r2, [r3, #0]
      i++;
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	623b      	str	r3, [r7, #32]
      pDest++;
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	3301      	adds	r3, #1
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005ab2:	8bfb      	ldrh	r3, [r7, #30]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ab8:	8bfb      	ldrh	r3, [r7, #30]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1ea      	bne.n	8005a94 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	372c      	adds	r7, #44	; 0x2c
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	f003 0301 	and.w	r3, r3, #1
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
	...

08005b10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	4a13      	ldr	r2, [pc, #76]	; (8005b70 <USB_CoreReset+0x60>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d901      	bls.n	8005b2c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e01a      	b.n	8005b62 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	daf3      	bge.n	8005b1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f043 0201 	orr.w	r2, r3, #1
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3301      	adds	r3, #1
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	4a09      	ldr	r2, [pc, #36]	; (8005b70 <USB_CoreReset+0x60>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d901      	bls.n	8005b54 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e006      	b.n	8005b62 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d0f1      	beq.n	8005b44 <USB_CoreReset+0x34>

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	00030d40 	.word	0x00030d40

08005b74 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b74:	b084      	sub	sp, #16
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	f107 001c 	add.w	r0, r7, #28
 8005b82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b90:	461a      	mov	r2, r3
 8005b92:	2300      	movs	r3, #0
 8005b94:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d018      	beq.n	8005bf8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d10a      	bne.n	8005be2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bda:	f043 0304 	orr.w	r3, r3, #4
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	e014      	b.n	8005c0c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bf0:	f023 0304 	bic.w	r3, r3, #4
 8005bf4:	6013      	str	r3, [r2, #0]
 8005bf6:	e009      	b.n	8005c0c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c06:	f023 0304 	bic.w	r3, r3, #4
 8005c0a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005c0c:	2110      	movs	r1, #16
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7ff fe82 	bl	8005918 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff fea3 	bl	8005960 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	e015      	b.n	8005c4c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c32:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c40:	461a      	mov	r2, r3
 8005c42:	2300      	movs	r3, #0
 8005c44:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d3e5      	bcc.n	8005c20 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c60:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00b      	beq.n	8005c86 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c74:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a13      	ldr	r2, [pc, #76]	; (8005cc8 <USB_HostInit+0x154>)
 8005c7a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a13      	ldr	r2, [pc, #76]	; (8005ccc <USB_HostInit+0x158>)
 8005c80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005c84:	e009      	b.n	8005c9a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2280      	movs	r2, #128	; 0x80
 8005c8a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a10      	ldr	r2, [pc, #64]	; (8005cd0 <USB_HostInit+0x15c>)
 8005c90:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a0f      	ldr	r2, [pc, #60]	; (8005cd4 <USB_HostInit+0x160>)
 8005c96:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d105      	bne.n	8005cac <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	f043 0210 	orr.w	r2, r3, #16
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	699a      	ldr	r2, [r3, #24]
 8005cb0:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <USB_HostInit+0x164>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cc4:	b004      	add	sp, #16
 8005cc6:	4770      	bx	lr
 8005cc8:	01000200 	.word	0x01000200
 8005ccc:	00e00300 	.word	0x00e00300
 8005cd0:	00600080 	.word	0x00600080
 8005cd4:	004000e0 	.word	0x004000e0
 8005cd8:	a3200008 	.word	0xa3200008

08005cdc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cfa:	f023 0303 	bic.w	r3, r3, #3
 8005cfe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	68f9      	ldr	r1, [r7, #12]
 8005d10:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d14:	4313      	orrs	r3, r2
 8005d16:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d107      	bne.n	8005d2e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d24:	461a      	mov	r2, r3
 8005d26:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d2a:	6053      	str	r3, [r2, #4]
 8005d2c:	e009      	b.n	8005d42 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005d2e:	78fb      	ldrb	r3, [r7, #3]
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d106      	bne.n	8005d42 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005d40:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005d70:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d7e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005d80:	2064      	movs	r0, #100	; 0x64
 8005d82:	f7fb fd6d 	bl	8001860 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d92:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005d94:	200a      	movs	r0, #10
 8005d96:	f7fb fd63 	bl	8001860 <HAL_Delay>

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005dc8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d109      	bne.n	8005de8 <USB_DriveVbus+0x44>
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d106      	bne.n	8005de8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005de2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005de6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df2:	d109      	bne.n	8005e08 <USB_DriveVbus+0x64>
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e06:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b085      	sub	sp, #20
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	0c5b      	lsrs	r3, r3, #17
 8005e34:	f003 0303 	and.w	r3, r3, #3
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	b29b      	uxth	r3, r3
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
	...

08005e68 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b088      	sub	sp, #32
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	4608      	mov	r0, r1
 8005e72:	4611      	mov	r1, r2
 8005e74:	461a      	mov	r2, r3
 8005e76:	4603      	mov	r3, r0
 8005e78:	70fb      	strb	r3, [r7, #3]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	70bb      	strb	r3, [r7, #2]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005e8a:	78fb      	ldrb	r3, [r7, #3]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e96:	461a      	mov	r2, r3
 8005e98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e9c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005e9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d87e      	bhi.n	8005fa4 <USB_HC_Init+0x13c>
 8005ea6:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <USB_HC_Init+0x44>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005ebd 	.word	0x08005ebd
 8005eb0:	08005f67 	.word	0x08005f67
 8005eb4:	08005ebd 	.word	0x08005ebd
 8005eb8:	08005f29 	.word	0x08005f29
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ebc:	78fb      	ldrb	r3, [r7, #3]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec8:	461a      	mov	r2, r3
 8005eca:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ece:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ed0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	da10      	bge.n	8005efa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ed8:	78fb      	ldrb	r3, [r7, #3]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	78fa      	ldrb	r2, [r7, #3]
 8005ee8:	0151      	lsls	r1, r2, #5
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	440a      	add	r2, r1
 8005eee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ef6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005ef8:	e057      	b.n	8005faa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d051      	beq.n	8005faa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005f06:	78fb      	ldrb	r3, [r7, #3]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	78fa      	ldrb	r2, [r7, #3]
 8005f16:	0151      	lsls	r1, r2, #5
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	440a      	add	r2, r1
 8005f1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f24:	60d3      	str	r3, [r2, #12]
      break;
 8005f26:	e040      	b.n	8005faa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f34:	461a      	mov	r2, r3
 8005f36:	f240 639d 	movw	r3, #1693	; 0x69d
 8005f3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	da34      	bge.n	8005fae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f44:	78fb      	ldrb	r3, [r7, #3]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	78fa      	ldrb	r2, [r7, #3]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f62:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005f64:	e023      	b.n	8005fae <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f66:	78fb      	ldrb	r3, [r7, #3]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f72:	461a      	mov	r2, r3
 8005f74:	f240 2325 	movw	r3, #549	; 0x225
 8005f78:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	da17      	bge.n	8005fb2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005f82:	78fb      	ldrb	r3, [r7, #3]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	78fa      	ldrb	r2, [r7, #3]
 8005f92:	0151      	lsls	r1, r2, #5
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	440a      	add	r2, r1
 8005f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f9c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005fa0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005fa2:	e006      	b.n	8005fb2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	77fb      	strb	r3, [r7, #31]
      break;
 8005fa8:	e004      	b.n	8005fb4 <USB_HC_Init+0x14c>
      break;
 8005faa:	bf00      	nop
 8005fac:	e002      	b.n	8005fb4 <USB_HC_Init+0x14c>
      break;
 8005fae:	bf00      	nop
 8005fb0:	e000      	b.n	8005fb4 <USB_HC_Init+0x14c>
      break;
 8005fb2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fba:	699a      	ldr	r2, [r3, #24]
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	f003 030f 	and.w	r3, r3, #15
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc8:	6939      	ldr	r1, [r7, #16]
 8005fca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005fde:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	da03      	bge.n	8005fee <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fea:	61bb      	str	r3, [r7, #24]
 8005fec:	e001      	b.n	8005ff2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7ff ff0f 	bl	8005e16 <USB_GetHostSpeed>
 8005ff8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005ffa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d106      	bne.n	8006010 <USB_HC_Init+0x1a8>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d003      	beq.n	8006010 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800600c:	617b      	str	r3, [r7, #20]
 800600e:	e001      	b.n	8006014 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006014:	787b      	ldrb	r3, [r7, #1]
 8006016:	059b      	lsls	r3, r3, #22
 8006018:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800601c:	78bb      	ldrb	r3, [r7, #2]
 800601e:	02db      	lsls	r3, r3, #11
 8006020:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006024:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006026:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800602a:	049b      	lsls	r3, r3, #18
 800602c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006030:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006032:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006034:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006038:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800603e:	78fb      	ldrb	r3, [r7, #3]
 8006040:	0159      	lsls	r1, r3, #5
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	440b      	add	r3, r1
 8006046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006050:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006052:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006056:	2b03      	cmp	r3, #3
 8006058:	d10f      	bne.n	800607a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800605a:	78fb      	ldrb	r3, [r7, #3]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	4413      	add	r3, r2
 8006062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	78fa      	ldrb	r2, [r7, #3]
 800606a:	0151      	lsls	r1, r2, #5
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	440a      	add	r2, r1
 8006070:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006074:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006078:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800607a:	7ffb      	ldrb	r3, [r7, #31]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3720      	adds	r7, #32
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08c      	sub	sp, #48	; 0x30
 8006088:	af02      	add	r7, sp, #8
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	4613      	mov	r3, r2
 8006090:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	785b      	ldrb	r3, [r3, #1]
 800609a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800609c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060a0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d02d      	beq.n	800610a <USB_HC_StartXfer+0x86>
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	791b      	ldrb	r3, [r3, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d129      	bne.n	800610a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80060b6:	79fb      	ldrb	r3, [r7, #7]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d117      	bne.n	80060ec <USB_HC_StartXfer+0x68>
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	79db      	ldrb	r3, [r3, #7]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <USB_HC_StartXfer+0x48>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	79db      	ldrb	r3, [r3, #7]
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d10f      	bne.n	80060ec <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	69fa      	ldr	r2, [r7, #28]
 80060dc:	0151      	lsls	r1, r2, #5
 80060de:	6a3a      	ldr	r2, [r7, #32]
 80060e0:	440a      	add	r2, r1
 80060e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ea:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80060ec:	79fb      	ldrb	r3, [r7, #7]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10b      	bne.n	800610a <USB_HC_StartXfer+0x86>
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	795b      	ldrb	r3, [r3, #5]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d107      	bne.n	800610a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	4619      	mov	r1, r3
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 fa2f 	bl	8006564 <USB_DoPing>
      return HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	e0f8      	b.n	80062fc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d018      	beq.n	8006144 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	8912      	ldrh	r2, [r2, #8]
 800611a:	4413      	add	r3, r2
 800611c:	3b01      	subs	r3, #1
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	8912      	ldrh	r2, [r2, #8]
 8006122:	fbb3 f3f2 	udiv	r3, r3, r2
 8006126:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006128:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800612a:	8b7b      	ldrh	r3, [r7, #26]
 800612c:	429a      	cmp	r2, r3
 800612e:	d90b      	bls.n	8006148 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006130:	8b7b      	ldrh	r3, [r7, #26]
 8006132:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006134:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	8912      	ldrh	r2, [r2, #8]
 800613a:	fb02 f203 	mul.w	r2, r2, r3
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	611a      	str	r2, [r3, #16]
 8006142:	e001      	b.n	8006148 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006144:	2301      	movs	r3, #1
 8006146:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	78db      	ldrb	r3, [r3, #3]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d007      	beq.n	8006160 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006150:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	8912      	ldrh	r2, [r2, #8]
 8006156:	fb02 f203 	mul.w	r2, r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	611a      	str	r2, [r3, #16]
 800615e:	e003      	b.n	8006168 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	695a      	ldr	r2, [r3, #20]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006170:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006172:	04d9      	lsls	r1, r3, #19
 8006174:	4b63      	ldr	r3, [pc, #396]	; (8006304 <USB_HC_StartXfer+0x280>)
 8006176:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006178:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	7a9b      	ldrb	r3, [r3, #10]
 800617e:	075b      	lsls	r3, r3, #29
 8006180:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006184:	69f9      	ldr	r1, [r7, #28]
 8006186:	0148      	lsls	r0, r1, #5
 8006188:	6a39      	ldr	r1, [r7, #32]
 800618a:	4401      	add	r1, r0
 800618c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006190:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006192:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006194:	79fb      	ldrb	r3, [r7, #7]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d009      	beq.n	80061ae <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	68d9      	ldr	r1, [r3, #12]
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061aa:	460a      	mov	r2, r1
 80061ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	bf0c      	ite	eq
 80061be:	2301      	moveq	r3, #1
 80061c0:	2300      	movne	r3, #0
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	0151      	lsls	r1, r2, #5
 80061d8:	6a3a      	ldr	r2, [r7, #32]
 80061da:	440a      	add	r2, r1
 80061dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	7e7b      	ldrb	r3, [r7, #25]
 80061f6:	075b      	lsls	r3, r3, #29
 80061f8:	69f9      	ldr	r1, [r7, #28]
 80061fa:	0148      	lsls	r0, r1, #5
 80061fc:	6a39      	ldr	r1, [r7, #32]
 80061fe:	4401      	add	r1, r0
 8006200:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006204:	4313      	orrs	r3, r2
 8006206:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	4413      	add	r3, r2
 8006210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800621e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	78db      	ldrb	r3, [r3, #3]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d004      	beq.n	8006232 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	e003      	b.n	800623a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006238:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006240:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	4413      	add	r3, r2
 800624a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624e:	461a      	mov	r2, r3
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	e04e      	b.n	80062fc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	78db      	ldrb	r3, [r3, #3]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d149      	bne.n	80062fa <USB_HC_StartXfer+0x276>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d045      	beq.n	80062fa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	79db      	ldrb	r3, [r3, #7]
 8006272:	2b03      	cmp	r3, #3
 8006274:	d830      	bhi.n	80062d8 <USB_HC_StartXfer+0x254>
 8006276:	a201      	add	r2, pc, #4	; (adr r2, 800627c <USB_HC_StartXfer+0x1f8>)
 8006278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627c:	0800628d 	.word	0x0800628d
 8006280:	080062b1 	.word	0x080062b1
 8006284:	0800628d 	.word	0x0800628d
 8006288:	080062b1 	.word	0x080062b1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	3303      	adds	r3, #3
 8006292:	089b      	lsrs	r3, r3, #2
 8006294:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006296:	8afa      	ldrh	r2, [r7, #22]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	b29b      	uxth	r3, r3
 800629e:	429a      	cmp	r2, r3
 80062a0:	d91c      	bls.n	80062dc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	f043 0220 	orr.w	r2, r3, #32
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80062ae:	e015      	b.n	80062dc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	3303      	adds	r3, #3
 80062b6:	089b      	lsrs	r3, r3, #2
 80062b8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80062ba:	8afa      	ldrh	r2, [r7, #22]
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d90a      	bls.n	80062e0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80062d6:	e003      	b.n	80062e0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80062d8:	bf00      	nop
 80062da:	e002      	b.n	80062e2 <USB_HC_StartXfer+0x25e>
        break;
 80062dc:	bf00      	nop
 80062de:	e000      	b.n	80062e2 <USB_HC_StartXfer+0x25e>
        break;
 80062e0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	68d9      	ldr	r1, [r3, #12]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	785a      	ldrb	r2, [r3, #1]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	2000      	movs	r0, #0
 80062f2:	9000      	str	r0, [sp, #0]
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f7ff fb53 	bl	80059a0 <USB_WritePacket>
  }

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3728      	adds	r7, #40	; 0x28
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	1ff80000 	.word	0x1ff80000

08006308 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	b29b      	uxth	r3, r3
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800632a:	b480      	push	{r7}
 800632c:	b089      	sub	sp, #36	; 0x24
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	460b      	mov	r3, r1
 8006334:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800633a:	78fb      	ldrb	r3, [r7, #3]
 800633c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	4413      	add	r3, r2
 800634a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	0c9b      	lsrs	r3, r3, #18
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	4413      	add	r3, r2
 8006360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	0fdb      	lsrs	r3, r3, #31
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 0320 	and.w	r3, r3, #32
 8006376:	2b20      	cmp	r3, #32
 8006378:	d104      	bne.n	8006384 <USB_HC_Halt+0x5a>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	e0e8      	b.n	8006556 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d002      	beq.n	8006390 <USB_HC_Halt+0x66>
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	2b02      	cmp	r3, #2
 800638e:	d173      	bne.n	8006478 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	4413      	add	r3, r2
 8006398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	0151      	lsls	r1, r2, #5
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	440a      	add	r2, r1
 80063a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063ae:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f003 0320 	and.w	r3, r3, #32
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f040 80cb 	bne.w	8006554 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d143      	bne.n	8006452 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	0151      	lsls	r1, r2, #5
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	440a      	add	r2, r1
 80063e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063e8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	0151      	lsls	r1, r2, #5
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	440a      	add	r2, r1
 8006400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006408:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	4413      	add	r3, r2
 8006412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	0151      	lsls	r1, r2, #5
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	440a      	add	r2, r1
 8006420:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006424:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006428:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	3301      	adds	r3, #1
 800642e:	61fb      	str	r3, [r7, #28]
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006436:	d81d      	bhi.n	8006474 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	4413      	add	r3, r2
 8006440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800644a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800644e:	d0ec      	beq.n	800642a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006450:	e080      	b.n	8006554 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	4413      	add	r3, r2
 800645a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	0151      	lsls	r1, r2, #5
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	440a      	add	r2, r1
 8006468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800646c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006470:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006472:	e06f      	b.n	8006554 <USB_HC_Halt+0x22a>
            break;
 8006474:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006476:	e06d      	b.n	8006554 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	4413      	add	r3, r2
 8006480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	0151      	lsls	r1, r2, #5
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	440a      	add	r2, r1
 800648e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006492:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006496:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d143      	bne.n	8006530 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	0151      	lsls	r1, r2, #5
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	440a      	add	r2, r1
 80064be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	0151      	lsls	r1, r2, #5
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	440a      	add	r2, r1
 80064de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	0151      	lsls	r1, r2, #5
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	440a      	add	r2, r1
 80064fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006502:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006506:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	3301      	adds	r3, #1
 800650c:	61fb      	str	r3, [r7, #28]
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006514:	d81d      	bhi.n	8006552 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	4413      	add	r3, r2
 800651e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800652c:	d0ec      	beq.n	8006508 <USB_HC_Halt+0x1de>
 800652e:	e011      	b.n	8006554 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	4413      	add	r3, r2
 8006538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	0151      	lsls	r1, r2, #5
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	440a      	add	r2, r1
 8006546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800654a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	e000      	b.n	8006554 <USB_HC_Halt+0x22a>
          break;
 8006552:	bf00      	nop
    }
  }

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3724      	adds	r7, #36	; 0x24
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
	...

08006564 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006574:	78fb      	ldrb	r3, [r7, #3]
 8006576:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006578:	2301      	movs	r3, #1
 800657a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	04da      	lsls	r2, r3, #19
 8006580:	4b15      	ldr	r3, [pc, #84]	; (80065d8 <USB_DoPing+0x74>)
 8006582:	4013      	ands	r3, r2
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	0151      	lsls	r1, r2, #5
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	440a      	add	r2, r1
 800658c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006594:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	4413      	add	r3, r2
 800659e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065ac:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065b4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c2:	461a      	mov	r2, r3
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	371c      	adds	r7, #28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	1ff80000 	.word	0x1ff80000

080065dc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff f935 	bl	800585c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80065f2:	2110      	movs	r1, #16
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7ff f98f 	bl	8005918 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff f9b0 	bl	8005960 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006600:	2300      	movs	r3, #0
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	e01f      	b.n	8006646 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4413      	add	r3, r2
 800660e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800661c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006624:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800662c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4413      	add	r3, r2
 8006636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663a:	461a      	mov	r2, r3
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	3301      	adds	r3, #1
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2b0f      	cmp	r3, #15
 800664a:	d9dc      	bls.n	8006606 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800664c:	2300      	movs	r3, #0
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	e034      	b.n	80066bc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	4413      	add	r3, r2
 800665a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006668:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006670:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006678:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4413      	add	r3, r2
 8006682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006686:	461a      	mov	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	3301      	adds	r3, #1
 8006690:	617b      	str	r3, [r7, #20]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006698:	d80c      	bhi.n	80066b4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066b0:	d0ec      	beq.n	800668c <USB_StopHost+0xb0>
 80066b2:	e000      	b.n	80066b6 <USB_StopHost+0xda>
        break;
 80066b4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	3301      	adds	r3, #1
 80066ba:	613b      	str	r3, [r7, #16]
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2b0f      	cmp	r3, #15
 80066c0:	d9c7      	bls.n	8006652 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066c8:	461a      	mov	r2, r3
 80066ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066ce:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066d6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7ff f8ae 	bl	800583a <USB_EnableGlobalInt>

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80066e8:	b590      	push	{r4, r7, lr}
 80066ea:	b089      	sub	sp, #36	; 0x24
 80066ec:	af04      	add	r7, sp, #16
 80066ee:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80066f0:	2301      	movs	r3, #1
 80066f2:	2202      	movs	r2, #2
 80066f4:	2102      	movs	r1, #2
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fc66 	bl	8006fc8 <USBH_FindInterface>
 80066fc:	4603      	mov	r3, r0
 80066fe:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	2bff      	cmp	r3, #255	; 0xff
 8006704:	d002      	beq.n	800670c <USBH_CDC_InterfaceInit+0x24>
 8006706:	7bfb      	ldrb	r3, [r7, #15]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d901      	bls.n	8006710 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800670c:	2302      	movs	r3, #2
 800670e:	e13d      	b.n	800698c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	4619      	mov	r1, r3
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fc3b 	bl	8006f90 <USBH_SelectInterface>
 800671a:	4603      	mov	r3, r0
 800671c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800671e:	7bbb      	ldrb	r3, [r7, #14]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006724:	2302      	movs	r3, #2
 8006726:	e131      	b.n	800698c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800672e:	2050      	movs	r0, #80	; 0x50
 8006730:	f002 fa00 	bl	8008b34 <malloc>
 8006734:	4603      	mov	r3, r0
 8006736:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006748:	2302      	movs	r3, #2
 800674a:	e11f      	b.n	800698c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800674c:	2250      	movs	r2, #80	; 0x50
 800674e:	2100      	movs	r1, #0
 8006750:	68b8      	ldr	r0, [r7, #8]
 8006752:	f002 f9ff 	bl	8008b54 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006756:	7bfb      	ldrb	r3, [r7, #15]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	211a      	movs	r1, #26
 800675c:	fb01 f303 	mul.w	r3, r1, r3
 8006760:	4413      	add	r3, r2
 8006762:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	b25b      	sxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	da15      	bge.n	800679a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800676e:	7bfb      	ldrb	r3, [r7, #15]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	211a      	movs	r1, #26
 8006774:	fb01 f303 	mul.w	r3, r1, r3
 8006778:	4413      	add	r3, r2
 800677a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800677e:	781a      	ldrb	r2, [r3, #0]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006784:	7bfb      	ldrb	r3, [r7, #15]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	211a      	movs	r1, #26
 800678a:	fb01 f303 	mul.w	r3, r1, r3
 800678e:	4413      	add	r3, r2
 8006790:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006794:	881a      	ldrh	r2, [r3, #0]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	785b      	ldrb	r3, [r3, #1]
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 fe32 	bl	800840a <USBH_AllocPipe>
 80067a6:	4603      	mov	r3, r0
 80067a8:	461a      	mov	r2, r3
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	7819      	ldrb	r1, [r3, #0]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	7858      	ldrb	r0, [r3, #1]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	8952      	ldrh	r2, [r2, #10]
 80067c6:	9202      	str	r2, [sp, #8]
 80067c8:	2203      	movs	r2, #3
 80067ca:	9201      	str	r2, [sp, #4]
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	4623      	mov	r3, r4
 80067d0:	4602      	mov	r2, r0
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f001 fdea 	bl	80083ac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	2200      	movs	r2, #0
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f002 f8f9 	bl	80089d8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80067e6:	2300      	movs	r3, #0
 80067e8:	2200      	movs	r2, #0
 80067ea:	210a      	movs	r1, #10
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fbeb 	bl	8006fc8 <USBH_FindInterface>
 80067f2:	4603      	mov	r3, r0
 80067f4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	2bff      	cmp	r3, #255	; 0xff
 80067fa:	d002      	beq.n	8006802 <USBH_CDC_InterfaceInit+0x11a>
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d901      	bls.n	8006806 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006802:	2302      	movs	r3, #2
 8006804:	e0c2      	b.n	800698c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006806:	7bfb      	ldrb	r3, [r7, #15]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	211a      	movs	r1, #26
 800680c:	fb01 f303 	mul.w	r3, r1, r3
 8006810:	4413      	add	r3, r2
 8006812:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	b25b      	sxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	da16      	bge.n	800684c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800681e:	7bfb      	ldrb	r3, [r7, #15]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	211a      	movs	r1, #26
 8006824:	fb01 f303 	mul.w	r3, r1, r3
 8006828:	4413      	add	r3, r2
 800682a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800682e:	781a      	ldrb	r2, [r3, #0]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006834:	7bfb      	ldrb	r3, [r7, #15]
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	211a      	movs	r1, #26
 800683a:	fb01 f303 	mul.w	r3, r1, r3
 800683e:	4413      	add	r3, r2
 8006840:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006844:	881a      	ldrh	r2, [r3, #0]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	835a      	strh	r2, [r3, #26]
 800684a:	e015      	b.n	8006878 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	211a      	movs	r1, #26
 8006852:	fb01 f303 	mul.w	r3, r1, r3
 8006856:	4413      	add	r3, r2
 8006858:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800685c:	781a      	ldrb	r2, [r3, #0]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	211a      	movs	r1, #26
 8006868:	fb01 f303 	mul.w	r3, r1, r3
 800686c:	4413      	add	r3, r2
 800686e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006872:	881a      	ldrh	r2, [r3, #0]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006878:	7bfb      	ldrb	r3, [r7, #15]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	211a      	movs	r1, #26
 800687e:	fb01 f303 	mul.w	r3, r1, r3
 8006882:	4413      	add	r3, r2
 8006884:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	b25b      	sxtb	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	da16      	bge.n	80068be <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	211a      	movs	r1, #26
 8006896:	fb01 f303 	mul.w	r3, r1, r3
 800689a:	4413      	add	r3, r2
 800689c:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068a0:	781a      	ldrb	r2, [r3, #0]
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	211a      	movs	r1, #26
 80068ac:	fb01 f303 	mul.w	r3, r1, r3
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80068b6:	881a      	ldrh	r2, [r3, #0]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	835a      	strh	r2, [r3, #26]
 80068bc:	e015      	b.n	80068ea <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	211a      	movs	r1, #26
 80068c4:	fb01 f303 	mul.w	r3, r1, r3
 80068c8:	4413      	add	r3, r2
 80068ca:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068ce:	781a      	ldrb	r2, [r3, #0]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	211a      	movs	r1, #26
 80068da:	fb01 f303 	mul.w	r3, r1, r3
 80068de:	4413      	add	r3, r2
 80068e0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80068e4:	881a      	ldrh	r2, [r3, #0]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	7b9b      	ldrb	r3, [r3, #14]
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 fd8a 	bl	800840a <USBH_AllocPipe>
 80068f6:	4603      	mov	r3, r0
 80068f8:	461a      	mov	r2, r3
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	7bdb      	ldrb	r3, [r3, #15]
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f001 fd80 	bl	800840a <USBH_AllocPipe>
 800690a:	4603      	mov	r3, r0
 800690c:	461a      	mov	r2, r3
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	7b59      	ldrb	r1, [r3, #13]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	7b98      	ldrb	r0, [r3, #14]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	8b12      	ldrh	r2, [r2, #24]
 800692a:	9202      	str	r2, [sp, #8]
 800692c:	2202      	movs	r2, #2
 800692e:	9201      	str	r2, [sp, #4]
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	4623      	mov	r3, r4
 8006934:	4602      	mov	r2, r0
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f001 fd38 	bl	80083ac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	7b19      	ldrb	r1, [r3, #12]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	7bd8      	ldrb	r0, [r3, #15]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	8b52      	ldrh	r2, [r2, #26]
 8006954:	9202      	str	r2, [sp, #8]
 8006956:	2202      	movs	r2, #2
 8006958:	9201      	str	r2, [sp, #4]
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	4623      	mov	r3, r4
 800695e:	4602      	mov	r2, r0
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f001 fd23 	bl	80083ac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	7b5b      	ldrb	r3, [r3, #13]
 8006972:	2200      	movs	r2, #0
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f002 f82e 	bl	80089d8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	7b1b      	ldrb	r3, [r3, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f002 f827 	bl	80089d8 <USBH_LL_SetToggle>

  return USBH_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	bd90      	pop	{r4, r7, pc}

08006994 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069a2:	69db      	ldr	r3, [r3, #28]
 80069a4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00e      	beq.n	80069cc <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 fd18 	bl	80083ea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f001 fd43 	bl	800844c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	7b1b      	ldrb	r3, [r3, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00e      	beq.n	80069f2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	7b1b      	ldrb	r3, [r3, #12]
 80069d8:	4619      	mov	r1, r3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f001 fd05 	bl	80083ea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	7b1b      	ldrb	r3, [r3, #12]
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f001 fd30 	bl	800844c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	7b5b      	ldrb	r3, [r3, #13]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00e      	beq.n	8006a18 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	7b5b      	ldrb	r3, [r3, #13]
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 fcf2 	bl	80083ea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	7b5b      	ldrb	r3, [r3, #13]
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f001 fd1d 	bl	800844c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00b      	beq.n	8006a3c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f002 f889 	bl	8008b44 <free>
    phost->pActiveClass->pData = 0U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a38:	2200      	movs	r2, #0
 8006a3a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	3340      	adds	r3, #64	; 0x40
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f8b1 	bl	8006bc6 <GetLineCoding>
 8006a64:	4603      	mov	r3, r0
 8006a66:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006a68:	7afb      	ldrb	r3, [r7, #11]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d105      	bne.n	8006a7a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a74:	2102      	movs	r1, #2
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006a7a:	7afb      	ldrb	r3, [r7, #11]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	d877      	bhi.n	8006b98 <USBH_CDC_Process+0x114>
 8006aa8:	a201      	add	r2, pc, #4	; (adr r2, 8006ab0 <USBH_CDC_Process+0x2c>)
 8006aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aae:	bf00      	nop
 8006ab0:	08006ac5 	.word	0x08006ac5
 8006ab4:	08006acb 	.word	0x08006acb
 8006ab8:	08006afb 	.word	0x08006afb
 8006abc:	08006b6f 	.word	0x08006b6f
 8006ac0:	08006b7d 	.word	0x08006b7d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac8:	e06d      	b.n	8006ba6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f897 	bl	8006c04 <SetLineCoding>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ada:	7bbb      	ldrb	r3, [r7, #14]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d104      	bne.n	8006aea <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ae8:	e058      	b.n	8006b9c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006aea:	7bbb      	ldrb	r3, [r7, #14]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d055      	beq.n	8006b9c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2204      	movs	r2, #4
 8006af4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006af8:	e050      	b.n	8006b9c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	3340      	adds	r3, #64	; 0x40
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f860 	bl	8006bc6 <GetLineCoding>
 8006b06:	4603      	mov	r3, r0
 8006b08:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b0a:	7bbb      	ldrb	r3, [r7, #14]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d126      	bne.n	8006b5e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b22:	791b      	ldrb	r3, [r3, #4]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d13b      	bne.n	8006ba0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b32:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d133      	bne.n	8006ba0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b42:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d12b      	bne.n	8006ba0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b50:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d124      	bne.n	8006ba0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f958 	bl	8006e0c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b5c:	e020      	b.n	8006ba0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d01d      	beq.n	8006ba0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2204      	movs	r2, #4
 8006b68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b6c:	e018      	b.n	8006ba0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f867 	bl	8006c42 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f8da 	bl	8006d2e <CDC_ProcessReception>
      break;
 8006b7a:	e014      	b.n	8006ba6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 ffe3 	bl	8007b4a <USBH_ClrFeature>
 8006b84:	4603      	mov	r3, r0
 8006b86:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b88:	7bbb      	ldrb	r3, [r7, #14]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006b96:	e005      	b.n	8006ba4 <USBH_CDC_Process+0x120>

    default:
      break;
 8006b98:	bf00      	nop
 8006b9a:	e004      	b.n	8006ba6 <USBH_CDC_Process+0x122>
      break;
 8006b9c:	bf00      	nop
 8006b9e:	e002      	b.n	8006ba6 <USBH_CDC_Process+0x122>
      break;
 8006ba0:	bf00      	nop
 8006ba2:	e000      	b.n	8006ba6 <USBH_CDC_Process+0x122>
      break;
 8006ba4:	bf00      	nop

  }

  return status;
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	22a1      	movs	r2, #161	; 0xa1
 8006bd4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2221      	movs	r2, #33	; 0x21
 8006bda:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2207      	movs	r2, #7
 8006bec:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2207      	movs	r2, #7
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f001 f988 	bl	8007f0a <USBH_CtlReq>
 8006bfa:	4603      	mov	r3, r0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2221      	movs	r2, #33	; 0x21
 8006c12:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2220      	movs	r2, #32
 8006c18:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2207      	movs	r2, #7
 8006c2a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2207      	movs	r2, #7
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f001 f969 	bl	8007f0a <USBH_CtlReq>
 8006c38:	4603      	mov	r3, r0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b086      	sub	sp, #24
 8006c46:	af02      	add	r7, sp, #8
 8006c48:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c54:	2300      	movs	r3, #0
 8006c56:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d002      	beq.n	8006c68 <CDC_ProcessTransmission+0x26>
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d023      	beq.n	8006cae <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006c66:	e05e      	b.n	8006d26 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	8b12      	ldrh	r2, [r2, #24]
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d90b      	bls.n	8006c8c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	69d9      	ldr	r1, [r3, #28]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8b1a      	ldrh	r2, [r3, #24]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	7b5b      	ldrb	r3, [r3, #13]
 8006c80:	2001      	movs	r0, #1
 8006c82:	9000      	str	r0, [sp, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 fb4e 	bl	8008326 <USBH_BulkSendData>
 8006c8a:	e00b      	b.n	8006ca4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	7b5b      	ldrb	r3, [r3, #13]
 8006c9a:	2001      	movs	r0, #1
 8006c9c:	9000      	str	r0, [sp, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f001 fb41 	bl	8008326 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006cac:	e03b      	b.n	8006d26 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	7b5b      	ldrb	r3, [r3, #13]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 fe65 	bl	8008984 <USBH_LL_GetURBState>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006cbe:	7afb      	ldrb	r3, [r7, #11]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d128      	bne.n	8006d16 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	8b12      	ldrh	r2, [r2, #24]
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d90e      	bls.n	8006cee <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	8b12      	ldrh	r2, [r2, #24]
 8006cd8:	1a9a      	subs	r2, r3, r2
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	8b12      	ldrh	r2, [r2, #24]
 8006ce6:	441a      	add	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	61da      	str	r2, [r3, #28]
 8006cec:	e002      	b.n	8006cf4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d004      	beq.n	8006d06 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d04:	e00e      	b.n	8006d24 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f868 	bl	8006de4 <USBH_CDC_TransmitCallback>
      break;
 8006d14:	e006      	b.n	8006d24 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006d16:	7afb      	ldrb	r3, [r7, #11]
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d103      	bne.n	8006d24 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d24:	bf00      	nop
  }
}
 8006d26:	bf00      	nop
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b086      	sub	sp, #24
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d40:	2300      	movs	r3, #0
 8006d42:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d002      	beq.n	8006d54 <CDC_ProcessReception+0x26>
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d00e      	beq.n	8006d70 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006d52:	e043      	b.n	8006ddc <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	6a19      	ldr	r1, [r3, #32]
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	8b5a      	ldrh	r2, [r3, #26]
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	7b1b      	ldrb	r3, [r3, #12]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 fb05 	bl	8008370 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2204      	movs	r2, #4
 8006d6a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006d6e:	e035      	b.n	8006ddc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	7b1b      	ldrb	r3, [r3, #12]
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 fe04 	bl	8008984 <USBH_LL_GetURBState>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006d80:	7cfb      	ldrb	r3, [r7, #19]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d129      	bne.n	8006dda <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	7b1b      	ldrb	r3, [r3, #12]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 fd67 	bl	8008860 <USBH_LL_GetLastXferSize>
 8006d92:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d016      	beq.n	8006dcc <CDC_ProcessReception+0x9e>
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	8b5b      	ldrh	r3, [r3, #26]
 8006da2:	461a      	mov	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d910      	bls.n	8006dcc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	1ad2      	subs	r2, r2, r3
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	6a1a      	ldr	r2, [r3, #32]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	441a      	add	r2, r3
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2203      	movs	r2, #3
 8006dc6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006dca:	e006      	b.n	8006dda <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f80f 	bl	8006df8 <USBH_CDC_ReceiveCallback>
      break;
 8006dda:	bf00      	nop
  }
}
 8006ddc:	bf00      	nop
 8006dde:	3718      	adds	r7, #24
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006e34:	2302      	movs	r3, #2
 8006e36:	e029      	b.n	8006e8c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	79fa      	ldrb	r2, [r7, #7]
 8006e3c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 f81f 	bl	8006e94 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f001 fc37 	bl	80086f8 <USBH_LL_Init>

  return USBH_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60fb      	str	r3, [r7, #12]
 8006ea4:	e009      	b.n	8006eba <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	33e0      	adds	r3, #224	; 0xe0
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	60fb      	str	r3, [r7, #12]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b0e      	cmp	r3, #14
 8006ebe:	d9f2      	bls.n	8006ea6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	e009      	b.n	8006eda <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee0:	d3f1      	bcc.n	8006ec6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2240      	movs	r2, #64	; 0x40
 8006f06:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d016      	beq.n	8006f7e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10e      	bne.n	8006f78 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f60:	1c59      	adds	r1, r3, #1
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	33de      	adds	r3, #222	; 0xde
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	73fb      	strb	r3, [r7, #15]
 8006f76:	e004      	b.n	8006f82 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006f78:	2302      	movs	r3, #2
 8006f7a:	73fb      	strb	r3, [r7, #15]
 8006f7c:	e001      	b.n	8006f82 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006f7e:	2302      	movs	r3, #2
 8006f80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006fa6:	78fa      	ldrb	r2, [r7, #3]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d204      	bcs.n	8006fb6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	78fa      	ldrb	r2, [r7, #3]
 8006fb0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006fb4:	e001      	b.n	8006fba <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	70fb      	strb	r3, [r7, #3]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	70bb      	strb	r3, [r7, #2]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006ff0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ff2:	e025      	b.n	8007040 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006ff4:	7dfb      	ldrb	r3, [r7, #23]
 8006ff6:	221a      	movs	r2, #26
 8006ff8:	fb02 f303 	mul.w	r3, r2, r3
 8006ffc:	3308      	adds	r3, #8
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	4413      	add	r3, r2
 8007002:	3302      	adds	r3, #2
 8007004:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	795b      	ldrb	r3, [r3, #5]
 800700a:	78fa      	ldrb	r2, [r7, #3]
 800700c:	429a      	cmp	r2, r3
 800700e:	d002      	beq.n	8007016 <USBH_FindInterface+0x4e>
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	2bff      	cmp	r3, #255	; 0xff
 8007014:	d111      	bne.n	800703a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800701a:	78ba      	ldrb	r2, [r7, #2]
 800701c:	429a      	cmp	r2, r3
 800701e:	d002      	beq.n	8007026 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007020:	78bb      	ldrb	r3, [r7, #2]
 8007022:	2bff      	cmp	r3, #255	; 0xff
 8007024:	d109      	bne.n	800703a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800702a:	787a      	ldrb	r2, [r7, #1]
 800702c:	429a      	cmp	r2, r3
 800702e:	d002      	beq.n	8007036 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007030:	787b      	ldrb	r3, [r7, #1]
 8007032:	2bff      	cmp	r3, #255	; 0xff
 8007034:	d101      	bne.n	800703a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007036:	7dfb      	ldrb	r3, [r7, #23]
 8007038:	e006      	b.n	8007048 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800703a:	7dfb      	ldrb	r3, [r7, #23]
 800703c:	3301      	adds	r3, #1
 800703e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007040:	7dfb      	ldrb	r3, [r7, #23]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d9d6      	bls.n	8006ff4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007046:	23ff      	movs	r3, #255	; 0xff
}
 8007048:	4618      	mov	r0, r3
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 fb87 	bl	8008770 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007062:	2101      	movs	r1, #1
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 fca0 	bl	80089aa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af04      	add	r7, sp, #16
 800707a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800707c:	2302      	movs	r3, #2
 800707e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b01      	cmp	r3, #1
 800708e:	d102      	bne.n	8007096 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2203      	movs	r2, #3
 8007094:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b0b      	cmp	r3, #11
 800709e:	f200 81b3 	bhi.w	8007408 <USBH_Process+0x394>
 80070a2:	a201      	add	r2, pc, #4	; (adr r2, 80070a8 <USBH_Process+0x34>)
 80070a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a8:	080070d9 	.word	0x080070d9
 80070ac:	0800710b 	.word	0x0800710b
 80070b0:	08007173 	.word	0x08007173
 80070b4:	080073a3 	.word	0x080073a3
 80070b8:	08007409 	.word	0x08007409
 80070bc:	08007217 	.word	0x08007217
 80070c0:	08007349 	.word	0x08007349
 80070c4:	0800724d 	.word	0x0800724d
 80070c8:	0800726d 	.word	0x0800726d
 80070cc:	0800728d 	.word	0x0800728d
 80070d0:	080072bb 	.word	0x080072bb
 80070d4:	0800738b 	.word	0x0800738b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 8193 	beq.w	800740c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80070ec:	20c8      	movs	r0, #200	; 0xc8
 80070ee:	f001 fca3 	bl	8008a38 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f001 fb99 	bl	800882a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007108:	e180      	b.n	800740c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007110:	2b01      	cmp	r3, #1
 8007112:	d107      	bne.n	8007124 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007122:	e182      	b.n	800742a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800712a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800712e:	d914      	bls.n	800715a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007136:	3301      	adds	r3, #1
 8007138:	b2da      	uxtb	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007146:	2b03      	cmp	r3, #3
 8007148:	d903      	bls.n	8007152 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	220d      	movs	r2, #13
 800714e:	701a      	strb	r2, [r3, #0]
      break;
 8007150:	e16b      	b.n	800742a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	701a      	strb	r2, [r3, #0]
      break;
 8007158:	e167      	b.n	800742a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007160:	f103 020a 	add.w	r2, r3, #10
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800716a:	200a      	movs	r0, #10
 800716c:	f001 fc64 	bl	8008a38 <USBH_Delay>
      break;
 8007170:	e15b      	b.n	800742a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d005      	beq.n	8007188 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007182:	2104      	movs	r1, #4
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007188:	2064      	movs	r0, #100	; 0x64
 800718a:	f001 fc55 	bl	8008a38 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f001 fb24 	bl	80087dc <USBH_LL_GetSpeed>
 8007194:	4603      	mov	r3, r0
 8007196:	461a      	mov	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2205      	movs	r2, #5
 80071a2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80071a4:	2100      	movs	r1, #0
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f001 f92f 	bl	800840a <USBH_AllocPipe>
 80071ac:	4603      	mov	r3, r0
 80071ae:	461a      	mov	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80071b4:	2180      	movs	r1, #128	; 0x80
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 f927 	bl	800840a <USBH_AllocPipe>
 80071bc:	4603      	mov	r3, r0
 80071be:	461a      	mov	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	7919      	ldrb	r1, [r3, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80071d8:	b292      	uxth	r2, r2
 80071da:	9202      	str	r2, [sp, #8]
 80071dc:	2200      	movs	r2, #0
 80071de:	9201      	str	r2, [sp, #4]
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	4603      	mov	r3, r0
 80071e4:	2280      	movs	r2, #128	; 0x80
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 f8e0 	bl	80083ac <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	7959      	ldrb	r1, [r3, #5]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007200:	b292      	uxth	r2, r2
 8007202:	9202      	str	r2, [sp, #8]
 8007204:	2200      	movs	r2, #0
 8007206:	9201      	str	r2, [sp, #4]
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	4603      	mov	r3, r0
 800720c:	2200      	movs	r2, #0
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 f8cc 	bl	80083ac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007214:	e109      	b.n	800742a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f90c 	bl	8007434 <USBH_HandleEnum>
 800721c:	4603      	mov	r3, r0
 800721e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007220:	7bbb      	ldrb	r3, [r7, #14]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	f040 80f3 	bne.w	8007410 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007238:	2b01      	cmp	r3, #1
 800723a:	d103      	bne.n	8007244 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2208      	movs	r2, #8
 8007240:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007242:	e0e5      	b.n	8007410 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2207      	movs	r2, #7
 8007248:	701a      	strb	r2, [r3, #0]
      break;
 800724a:	e0e1      	b.n	8007410 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 80de 	beq.w	8007414 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800725e:	2101      	movs	r1, #1
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2208      	movs	r2, #8
 8007268:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800726a:	e0d3      	b.n	8007414 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007272:	b29b      	uxth	r3, r3
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fc20 	bl	8007abc <USBH_SetCfg>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	f040 80ca 	bne.w	8007418 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2209      	movs	r2, #9
 8007288:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800728a:	e0c5      	b.n	8007418 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007292:	f003 0320 	and.w	r3, r3, #32
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00b      	beq.n	80072b2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800729a:	2101      	movs	r1, #1
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fc30 	bl	8007b02 <USBH_SetFeature>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f040 80b9 	bne.w	800741c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	220a      	movs	r2, #10
 80072ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80072b0:	e0b4      	b.n	800741c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	220a      	movs	r2, #10
 80072b6:	701a      	strb	r2, [r3, #0]
      break;
 80072b8:	e0b0      	b.n	800741c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 80ad 	beq.w	8007420 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80072ce:	2300      	movs	r3, #0
 80072d0:	73fb      	strb	r3, [r7, #15]
 80072d2:	e016      	b.n	8007302 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80072d4:	7bfa      	ldrb	r2, [r7, #15]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	32de      	adds	r2, #222	; 0xde
 80072da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072de:	791a      	ldrb	r2, [r3, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d108      	bne.n	80072fc <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80072ea:	7bfa      	ldrb	r2, [r7, #15]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	32de      	adds	r2, #222	; 0xde
 80072f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80072fa:	e005      	b.n	8007308 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	3301      	adds	r3, #1
 8007300:	73fb      	strb	r3, [r7, #15]
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0e5      	beq.n	80072d4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800730e:	2b00      	cmp	r3, #0
 8007310:	d016      	beq.n	8007340 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	4798      	blx	r3
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d109      	bne.n	8007338 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2206      	movs	r2, #6
 8007328:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007330:	2103      	movs	r1, #3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007336:	e073      	b.n	8007420 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	220d      	movs	r2, #13
 800733c:	701a      	strb	r2, [r3, #0]
      break;
 800733e:	e06f      	b.n	8007420 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	220d      	movs	r2, #13
 8007344:	701a      	strb	r2, [r3, #0]
      break;
 8007346:	e06b      	b.n	8007420 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800734e:	2b00      	cmp	r3, #0
 8007350:	d017      	beq.n	8007382 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	4798      	blx	r3
 800735e:	4603      	mov	r3, r0
 8007360:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d103      	bne.n	8007372 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	220b      	movs	r2, #11
 800736e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007370:	e058      	b.n	8007424 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b02      	cmp	r3, #2
 8007378:	d154      	bne.n	8007424 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	220d      	movs	r2, #13
 800737e:	701a      	strb	r2, [r3, #0]
      break;
 8007380:	e050      	b.n	8007424 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	220d      	movs	r2, #13
 8007386:	701a      	strb	r2, [r3, #0]
      break;
 8007388:	e04c      	b.n	8007424 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007390:	2b00      	cmp	r3, #0
 8007392:	d049      	beq.n	8007428 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	4798      	blx	r3
      }
      break;
 80073a0:	e042      	b.n	8007428 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7ff fd72 	bl	8006e94 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d009      	beq.n	80073ce <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d005      	beq.n	80073e4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073de:	2105      	movs	r1, #5
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d107      	bne.n	8007400 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7ff fe2b 	bl	8007054 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80073fe:	e014      	b.n	800742a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f001 f9b5 	bl	8008770 <USBH_LL_Start>
      break;
 8007406:	e010      	b.n	800742a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007408:	bf00      	nop
 800740a:	e00e      	b.n	800742a <USBH_Process+0x3b6>
      break;
 800740c:	bf00      	nop
 800740e:	e00c      	b.n	800742a <USBH_Process+0x3b6>
      break;
 8007410:	bf00      	nop
 8007412:	e00a      	b.n	800742a <USBH_Process+0x3b6>
    break;
 8007414:	bf00      	nop
 8007416:	e008      	b.n	800742a <USBH_Process+0x3b6>
      break;
 8007418:	bf00      	nop
 800741a:	e006      	b.n	800742a <USBH_Process+0x3b6>
      break;
 800741c:	bf00      	nop
 800741e:	e004      	b.n	800742a <USBH_Process+0x3b6>
      break;
 8007420:	bf00      	nop
 8007422:	e002      	b.n	800742a <USBH_Process+0x3b6>
      break;
 8007424:	bf00      	nop
 8007426:	e000      	b.n	800742a <USBH_Process+0x3b6>
      break;
 8007428:	bf00      	nop
  }
  return USBH_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b088      	sub	sp, #32
 8007438:	af04      	add	r7, sp, #16
 800743a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800743c:	2301      	movs	r3, #1
 800743e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007440:	2301      	movs	r3, #1
 8007442:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	785b      	ldrb	r3, [r3, #1]
 8007448:	2b07      	cmp	r3, #7
 800744a:	f200 81c1 	bhi.w	80077d0 <USBH_HandleEnum+0x39c>
 800744e:	a201      	add	r2, pc, #4	; (adr r2, 8007454 <USBH_HandleEnum+0x20>)
 8007450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007454:	08007475 	.word	0x08007475
 8007458:	08007533 	.word	0x08007533
 800745c:	0800759d 	.word	0x0800759d
 8007460:	0800762b 	.word	0x0800762b
 8007464:	08007695 	.word	0x08007695
 8007468:	08007705 	.word	0x08007705
 800746c:	0800774b 	.word	0x0800774b
 8007470:	08007791 	.word	0x08007791
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007474:	2108      	movs	r1, #8
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa50 	bl	800791c <USBH_Get_DevDesc>
 800747c:	4603      	mov	r3, r0
 800747e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007480:	7bbb      	ldrb	r3, [r7, #14]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d130      	bne.n	80074e8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	7919      	ldrb	r1, [r3, #4]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80074aa:	b292      	uxth	r2, r2
 80074ac:	9202      	str	r2, [sp, #8]
 80074ae:	2200      	movs	r2, #0
 80074b0:	9201      	str	r2, [sp, #4]
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	4603      	mov	r3, r0
 80074b6:	2280      	movs	r2, #128	; 0x80
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 ff77 	bl	80083ac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	7959      	ldrb	r1, [r3, #5]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074d2:	b292      	uxth	r2, r2
 80074d4:	9202      	str	r2, [sp, #8]
 80074d6:	2200      	movs	r2, #0
 80074d8:	9201      	str	r2, [sp, #4]
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	4603      	mov	r3, r0
 80074de:	2200      	movs	r2, #0
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 ff63 	bl	80083ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80074e6:	e175      	b.n	80077d4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	f040 8172 	bne.w	80077d4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074f6:	3301      	adds	r3, #1
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007506:	2b03      	cmp	r3, #3
 8007508:	d903      	bls.n	8007512 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	220d      	movs	r2, #13
 800750e:	701a      	strb	r2, [r3, #0]
      break;
 8007510:	e160      	b.n	80077d4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	795b      	ldrb	r3, [r3, #5]
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 ff97 	bl	800844c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	791b      	ldrb	r3, [r3, #4]
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 ff91 	bl	800844c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	701a      	strb	r2, [r3, #0]
      break;
 8007530:	e150      	b.n	80077d4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007532:	2112      	movs	r1, #18
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f9f1 	bl	800791c <USBH_Get_DevDesc>
 800753a:	4603      	mov	r3, r0
 800753c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d103      	bne.n	800754c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2202      	movs	r2, #2
 8007548:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800754a:	e145      	b.n	80077d8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800754c:	7bbb      	ldrb	r3, [r7, #14]
 800754e:	2b03      	cmp	r3, #3
 8007550:	f040 8142 	bne.w	80077d8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800755a:	3301      	adds	r3, #1
 800755c:	b2da      	uxtb	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800756a:	2b03      	cmp	r3, #3
 800756c:	d903      	bls.n	8007576 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	220d      	movs	r2, #13
 8007572:	701a      	strb	r2, [r3, #0]
      break;
 8007574:	e130      	b.n	80077d8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	795b      	ldrb	r3, [r3, #5]
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 ff65 	bl	800844c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	791b      	ldrb	r3, [r3, #4]
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 ff5f 	bl	800844c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	701a      	strb	r2, [r3, #0]
      break;
 800759a:	e11d      	b.n	80077d8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800759c:	2101      	movs	r1, #1
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fa68 	bl	8007a74 <USBH_SetAddress>
 80075a4:	4603      	mov	r3, r0
 80075a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075a8:	7bbb      	ldrb	r3, [r7, #14]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d132      	bne.n	8007614 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80075ae:	2002      	movs	r0, #2
 80075b0:	f001 fa42 	bl	8008a38 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2203      	movs	r2, #3
 80075c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	7919      	ldrb	r1, [r3, #4]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80075d6:	b292      	uxth	r2, r2
 80075d8:	9202      	str	r2, [sp, #8]
 80075da:	2200      	movs	r2, #0
 80075dc:	9201      	str	r2, [sp, #4]
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	4603      	mov	r3, r0
 80075e2:	2280      	movs	r2, #128	; 0x80
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fee1 	bl	80083ac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	7959      	ldrb	r1, [r3, #5]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075fe:	b292      	uxth	r2, r2
 8007600:	9202      	str	r2, [sp, #8]
 8007602:	2200      	movs	r2, #0
 8007604:	9201      	str	r2, [sp, #4]
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	4603      	mov	r3, r0
 800760a:	2200      	movs	r2, #0
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fecd 	bl	80083ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007612:	e0e3      	b.n	80077dc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007614:	7bbb      	ldrb	r3, [r7, #14]
 8007616:	2b03      	cmp	r3, #3
 8007618:	f040 80e0 	bne.w	80077dc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	220d      	movs	r2, #13
 8007620:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	705a      	strb	r2, [r3, #1]
      break;
 8007628:	e0d8      	b.n	80077dc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800762a:	2109      	movs	r1, #9
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f99d 	bl	800796c <USBH_Get_CfgDesc>
 8007632:	4603      	mov	r3, r0
 8007634:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007636:	7bbb      	ldrb	r3, [r7, #14]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d103      	bne.n	8007644 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2204      	movs	r2, #4
 8007640:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007642:	e0cd      	b.n	80077e0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007644:	7bbb      	ldrb	r3, [r7, #14]
 8007646:	2b03      	cmp	r3, #3
 8007648:	f040 80ca 	bne.w	80077e0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007652:	3301      	adds	r3, #1
 8007654:	b2da      	uxtb	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007662:	2b03      	cmp	r3, #3
 8007664:	d903      	bls.n	800766e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	220d      	movs	r2, #13
 800766a:	701a      	strb	r2, [r3, #0]
      break;
 800766c:	e0b8      	b.n	80077e0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	795b      	ldrb	r3, [r3, #5]
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fee9 	bl	800844c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	791b      	ldrb	r3, [r3, #4]
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fee3 	bl	800844c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	701a      	strb	r2, [r3, #0]
      break;
 8007692:	e0a5      	b.n	80077e0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f965 	bl	800796c <USBH_Get_CfgDesc>
 80076a2:	4603      	mov	r3, r0
 80076a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d103      	bne.n	80076b4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2205      	movs	r2, #5
 80076b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076b2:	e097      	b.n	80077e4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076b4:	7bbb      	ldrb	r3, [r7, #14]
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	f040 8094 	bne.w	80077e4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076c2:	3301      	adds	r3, #1
 80076c4:	b2da      	uxtb	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d903      	bls.n	80076de <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	220d      	movs	r2, #13
 80076da:	701a      	strb	r2, [r3, #0]
      break;
 80076dc:	e082      	b.n	80077e4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	795b      	ldrb	r3, [r3, #5]
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 feb1 	bl	800844c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	791b      	ldrb	r3, [r3, #4]
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 feab 	bl	800844c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	701a      	strb	r2, [r3, #0]
      break;
 8007702:	e06f      	b.n	80077e4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800770a:	2b00      	cmp	r3, #0
 800770c:	d019      	beq.n	8007742 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800771a:	23ff      	movs	r3, #255	; 0xff
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f949 	bl	80079b4 <USBH_Get_StringDesc>
 8007722:	4603      	mov	r3, r0
 8007724:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007726:	7bbb      	ldrb	r3, [r7, #14]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d103      	bne.n	8007734 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2206      	movs	r2, #6
 8007730:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007732:	e059      	b.n	80077e8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007734:	7bbb      	ldrb	r3, [r7, #14]
 8007736:	2b03      	cmp	r3, #3
 8007738:	d156      	bne.n	80077e8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2206      	movs	r2, #6
 800773e:	705a      	strb	r2, [r3, #1]
      break;
 8007740:	e052      	b.n	80077e8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2206      	movs	r2, #6
 8007746:	705a      	strb	r2, [r3, #1]
      break;
 8007748:	e04e      	b.n	80077e8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007750:	2b00      	cmp	r3, #0
 8007752:	d019      	beq.n	8007788 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007760:	23ff      	movs	r3, #255	; 0xff
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f926 	bl	80079b4 <USBH_Get_StringDesc>
 8007768:	4603      	mov	r3, r0
 800776a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800776c:	7bbb      	ldrb	r3, [r7, #14]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d103      	bne.n	800777a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2207      	movs	r2, #7
 8007776:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007778:	e038      	b.n	80077ec <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800777a:	7bbb      	ldrb	r3, [r7, #14]
 800777c:	2b03      	cmp	r3, #3
 800777e:	d135      	bne.n	80077ec <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2207      	movs	r2, #7
 8007784:	705a      	strb	r2, [r3, #1]
      break;
 8007786:	e031      	b.n	80077ec <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2207      	movs	r2, #7
 800778c:	705a      	strb	r2, [r3, #1]
      break;
 800778e:	e02d      	b.n	80077ec <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007796:	2b00      	cmp	r3, #0
 8007798:	d017      	beq.n	80077ca <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80077a6:	23ff      	movs	r3, #255	; 0xff
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f903 	bl	80079b4 <USBH_Get_StringDesc>
 80077ae:	4603      	mov	r3, r0
 80077b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d102      	bne.n	80077be <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80077bc:	e018      	b.n	80077f0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077be:	7bbb      	ldrb	r3, [r7, #14]
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d115      	bne.n	80077f0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	73fb      	strb	r3, [r7, #15]
      break;
 80077c8:	e012      	b.n	80077f0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	73fb      	strb	r3, [r7, #15]
      break;
 80077ce:	e00f      	b.n	80077f0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80077d0:	bf00      	nop
 80077d2:	e00e      	b.n	80077f2 <USBH_HandleEnum+0x3be>
      break;
 80077d4:	bf00      	nop
 80077d6:	e00c      	b.n	80077f2 <USBH_HandleEnum+0x3be>
      break;
 80077d8:	bf00      	nop
 80077da:	e00a      	b.n	80077f2 <USBH_HandleEnum+0x3be>
      break;
 80077dc:	bf00      	nop
 80077de:	e008      	b.n	80077f2 <USBH_HandleEnum+0x3be>
      break;
 80077e0:	bf00      	nop
 80077e2:	e006      	b.n	80077f2 <USBH_HandleEnum+0x3be>
      break;
 80077e4:	bf00      	nop
 80077e6:	e004      	b.n	80077f2 <USBH_HandleEnum+0x3be>
      break;
 80077e8:	bf00      	nop
 80077ea:	e002      	b.n	80077f2 <USBH_HandleEnum+0x3be>
      break;
 80077ec:	bf00      	nop
 80077ee:	e000      	b.n	80077f2 <USBH_HandleEnum+0x3be>
      break;
 80077f0:	bf00      	nop
  }
  return Status;
 80077f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800780e:	bf00      	nop
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b082      	sub	sp, #8
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007828:	1c5a      	adds	r2, r3, #1
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f804 	bl	800783e <USBH_HandleSof>
}
 8007836:	bf00      	nop
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b082      	sub	sp, #8
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b0b      	cmp	r3, #11
 800784e:	d10a      	bne.n	8007866 <USBH_HandleSof+0x28>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007856:	2b00      	cmp	r3, #0
 8007858:	d005      	beq.n	8007866 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	4798      	blx	r3
  }
}
 8007866:	bf00      	nop
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800787e:	bf00      	nop
}
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800789a:	bf00      	nop
}
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 ff56 	bl	80087a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	791b      	ldrb	r3, [r3, #4]
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fda3 	bl	800844c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	795b      	ldrb	r3, [r3, #5]
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fd9d 	bl	800844c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af02      	add	r7, sp, #8
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800792e:	78fb      	ldrb	r3, [r7, #3]
 8007930:	b29b      	uxth	r3, r3
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	4613      	mov	r3, r2
 8007936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800793a:	2100      	movs	r1, #0
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f864 	bl	8007a0a <USBH_GetDescriptor>
 8007942:	4603      	mov	r3, r0
 8007944:	73fb      	strb	r3, [r7, #15]
 8007946:	7bfb      	ldrb	r3, [r7, #15]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10a      	bne.n	8007962 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007958:	78fa      	ldrb	r2, [r7, #3]
 800795a:	b292      	uxth	r2, r2
 800795c:	4619      	mov	r1, r3
 800795e:	f000 f918 	bl	8007b92 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007962:	7bfb      	ldrb	r3, [r7, #15]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af02      	add	r7, sp, #8
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	331c      	adds	r3, #28
 800797c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800797e:	887b      	ldrh	r3, [r7, #2]
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007988:	2100      	movs	r1, #0
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f83d 	bl	8007a0a <USBH_GetDescriptor>
 8007990:	4603      	mov	r3, r0
 8007992:	72fb      	strb	r3, [r7, #11]
 8007994:	7afb      	ldrb	r3, [r7, #11]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d107      	bne.n	80079aa <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80079a0:	887a      	ldrh	r2, [r7, #2]
 80079a2:	68f9      	ldr	r1, [r7, #12]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f000 f964 	bl	8007c72 <USBH_ParseCfgDesc>
  }

  return status;
 80079aa:	7afb      	ldrb	r3, [r7, #11]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b088      	sub	sp, #32
 80079b8:	af02      	add	r7, sp, #8
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	607a      	str	r2, [r7, #4]
 80079be:	461a      	mov	r2, r3
 80079c0:	460b      	mov	r3, r1
 80079c2:	72fb      	strb	r3, [r7, #11]
 80079c4:	4613      	mov	r3, r2
 80079c6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80079c8:	7afb      	ldrb	r3, [r7, #11]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80079d0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80079d8:	893b      	ldrh	r3, [r7, #8]
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	460b      	mov	r3, r1
 80079de:	2100      	movs	r1, #0
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 f812 	bl	8007a0a <USBH_GetDescriptor>
 80079e6:	4603      	mov	r3, r0
 80079e8:	75fb      	strb	r3, [r7, #23]
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d107      	bne.n	8007a00 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079f6:	893a      	ldrh	r2, [r7, #8]
 80079f8:	6879      	ldr	r1, [r7, #4]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 fa37 	bl	8007e6e <USBH_ParseStringDesc>
  }

  return status;
 8007a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3718      	adds	r7, #24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	607b      	str	r3, [r7, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	72fb      	strb	r3, [r7, #11]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	789b      	ldrb	r3, [r3, #2]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d11c      	bne.n	8007a5e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007a24:	7afb      	ldrb	r3, [r7, #11]
 8007a26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2206      	movs	r2, #6
 8007a34:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	893a      	ldrh	r2, [r7, #8]
 8007a3a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007a3c:	893b      	ldrh	r3, [r7, #8]
 8007a3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a46:	d104      	bne.n	8007a52 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f240 4209 	movw	r2, #1033	; 0x409
 8007a4e:	829a      	strh	r2, [r3, #20]
 8007a50:	e002      	b.n	8007a58 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	8b3a      	ldrh	r2, [r7, #24]
 8007a5c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007a5e:	8b3b      	ldrh	r3, [r7, #24]
 8007a60:	461a      	mov	r2, r3
 8007a62:	6879      	ldr	r1, [r7, #4]
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 fa50 	bl	8007f0a <USBH_CtlReq>
 8007a6a:	4603      	mov	r3, r0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	789b      	ldrb	r3, [r3, #2]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d10f      	bne.n	8007aa8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2205      	movs	r2, #5
 8007a92:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007a94:	78fb      	ldrb	r3, [r7, #3]
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2100      	movs	r1, #0
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fa2c 	bl	8007f0a <USBH_CtlReq>
 8007ab2:	4603      	mov	r3, r0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	789b      	ldrb	r3, [r3, #2]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d10e      	bne.n	8007aee <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2209      	movs	r2, #9
 8007ada:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	887a      	ldrh	r2, [r7, #2]
 8007ae0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007aee:	2200      	movs	r2, #0
 8007af0:	2100      	movs	r1, #0
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fa09 	bl	8007f0a <USBH_CtlReq>
 8007af8:	4603      	mov	r3, r0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b082      	sub	sp, #8
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	789b      	ldrb	r3, [r3, #2]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d10f      	bne.n	8007b36 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2203      	movs	r2, #3
 8007b20:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007b22:	78fb      	ldrb	r3, [r7, #3]
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007b36:	2200      	movs	r2, #0
 8007b38:	2100      	movs	r1, #0
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f9e5 	bl	8007f0a <USBH_CtlReq>
 8007b40:	4603      	mov	r3, r0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b082      	sub	sp, #8
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	460b      	mov	r3, r1
 8007b54:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	789b      	ldrb	r3, [r3, #2]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d10f      	bne.n	8007b7e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2202      	movs	r2, #2
 8007b62:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007b70:	78fb      	ldrb	r3, [r7, #3]
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007b7e:	2200      	movs	r2, #0
 8007b80:	2100      	movs	r1, #0
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f9c1 	bl	8007f0a <USBH_CtlReq>
 8007b88:	4603      	mov	r3, r0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b085      	sub	sp, #20
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	60b9      	str	r1, [r7, #8]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	781a      	ldrb	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	785a      	ldrb	r2, [r3, #1]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	3302      	adds	r3, #2
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	3303      	adds	r3, #3
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	021b      	lsls	r3, r3, #8
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	791a      	ldrb	r2, [r3, #4]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	795a      	ldrb	r2, [r3, #5]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	799a      	ldrb	r2, [r3, #6]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	79da      	ldrb	r2, [r3, #7]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007bec:	88fb      	ldrh	r3, [r7, #6]
 8007bee:	2b08      	cmp	r3, #8
 8007bf0:	d939      	bls.n	8007c66 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	3309      	adds	r3, #9
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	021b      	lsls	r3, r3, #8
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	4313      	orrs	r3, r2
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	330a      	adds	r3, #10
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	330b      	adds	r3, #11
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	021b      	lsls	r3, r3, #8
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	4313      	orrs	r3, r2
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	330c      	adds	r3, #12
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	330d      	adds	r3, #13
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	021b      	lsls	r3, r3, #8
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	7b9a      	ldrb	r2, [r3, #14]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	7bda      	ldrb	r2, [r3, #15]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	7c1a      	ldrb	r2, [r3, #16]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	7c5a      	ldrb	r2, [r3, #17]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	745a      	strb	r2, [r3, #17]
  }
}
 8007c66:	bf00      	nop
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b08a      	sub	sp, #40	; 0x28
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	60f8      	str	r0, [r7, #12]
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007c84:	2300      	movs	r3, #0
 8007c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	781a      	ldrb	r2, [r3, #0]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	785a      	ldrb	r2, [r3, #1]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	3302      	adds	r3, #2
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	3303      	adds	r3, #3
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	021b      	lsls	r3, r3, #8
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	791a      	ldrb	r2, [r3, #4]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	795a      	ldrb	r2, [r3, #5]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	799a      	ldrb	r2, [r3, #6]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	79da      	ldrb	r2, [r3, #7]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	7a1a      	ldrb	r2, [r3, #8]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007ce8:	88fb      	ldrh	r3, [r7, #6]
 8007cea:	2b09      	cmp	r3, #9
 8007cec:	d95f      	bls.n	8007dae <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007cee:	2309      	movs	r3, #9
 8007cf0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007cf6:	e051      	b.n	8007d9c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007cf8:	f107 0316 	add.w	r3, r7, #22
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d00:	f000 f8e8 	bl	8007ed4 <USBH_GetNextDesc>
 8007d04:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d08:	785b      	ldrb	r3, [r3, #1]
 8007d0a:	2b04      	cmp	r3, #4
 8007d0c:	d146      	bne.n	8007d9c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007d0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d12:	221a      	movs	r2, #26
 8007d14:	fb02 f303 	mul.w	r3, r2, r3
 8007d18:	3308      	adds	r3, #8
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	3302      	adds	r3, #2
 8007d20:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007d22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d24:	69f8      	ldr	r0, [r7, #28]
 8007d26:	f000 f846 	bl	8007db6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007d30:	2300      	movs	r3, #0
 8007d32:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d34:	e022      	b.n	8007d7c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007d36:	f107 0316 	add.w	r3, r7, #22
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d3e:	f000 f8c9 	bl	8007ed4 <USBH_GetNextDesc>
 8007d42:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	785b      	ldrb	r3, [r3, #1]
 8007d48:	2b05      	cmp	r3, #5
 8007d4a:	d117      	bne.n	8007d7c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007d4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d50:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007d54:	3201      	adds	r2, #1
 8007d56:	00d2      	lsls	r2, r2, #3
 8007d58:	211a      	movs	r1, #26
 8007d5a:	fb01 f303 	mul.w	r3, r1, r3
 8007d5e:	4413      	add	r3, r2
 8007d60:	3308      	adds	r3, #8
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	4413      	add	r3, r2
 8007d66:	3304      	adds	r3, #4
 8007d68:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007d6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d6c:	69b8      	ldr	r0, [r7, #24]
 8007d6e:	f000 f851 	bl	8007e14 <USBH_ParseEPDesc>
            ep_ix++;
 8007d72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007d76:	3301      	adds	r3, #1
 8007d78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	791b      	ldrb	r3, [r3, #4]
 8007d80:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d204      	bcs.n	8007d92 <USBH_ParseCfgDesc+0x120>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	885a      	ldrh	r2, [r3, #2]
 8007d8c:	8afb      	ldrh	r3, [r7, #22]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d8d1      	bhi.n	8007d36 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007d92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d96:	3301      	adds	r3, #1
 8007d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d804      	bhi.n	8007dae <USBH_ParseCfgDesc+0x13c>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	885a      	ldrh	r2, [r3, #2]
 8007da8:	8afb      	ldrh	r3, [r7, #22]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d8a4      	bhi.n	8007cf8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007dae:	bf00      	nop
 8007db0:	3728      	adds	r7, #40	; 0x28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	781a      	ldrb	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	785a      	ldrb	r2, [r3, #1]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	789a      	ldrb	r2, [r3, #2]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	78da      	ldrb	r2, [r3, #3]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	791a      	ldrb	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	795a      	ldrb	r2, [r3, #5]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	799a      	ldrb	r2, [r3, #6]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	79da      	ldrb	r2, [r3, #7]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	7a1a      	ldrb	r2, [r3, #8]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	721a      	strb	r2, [r3, #8]
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	781a      	ldrb	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	785a      	ldrb	r2, [r3, #1]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	789a      	ldrb	r2, [r3, #2]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	78da      	ldrb	r2, [r3, #3]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	3304      	adds	r3, #4
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	3305      	adds	r3, #5
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	021b      	lsls	r3, r3, #8
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	4313      	orrs	r3, r2
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	799a      	ldrb	r2, [r3, #6]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	719a      	strb	r2, [r3, #6]
}
 8007e62:	bf00      	nop
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b087      	sub	sp, #28
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	60f8      	str	r0, [r7, #12]
 8007e76:	60b9      	str	r1, [r7, #8]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d120      	bne.n	8007ec8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	1e9a      	subs	r2, r3, #2
 8007e8c:	88fb      	ldrh	r3, [r7, #6]
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	bf28      	it	cs
 8007e92:	4613      	movcs	r3, r2
 8007e94:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	3302      	adds	r3, #2
 8007e9a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	82fb      	strh	r3, [r7, #22]
 8007ea0:	e00b      	b.n	8007eba <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007ea2:	8afb      	ldrh	r3, [r7, #22]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	781a      	ldrb	r2, [r3, #0]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007eb4:	8afb      	ldrh	r3, [r7, #22]
 8007eb6:	3302      	adds	r3, #2
 8007eb8:	82fb      	strh	r3, [r7, #22]
 8007eba:	8afa      	ldrh	r2, [r7, #22]
 8007ebc:	8abb      	ldrh	r3, [r7, #20]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d3ef      	bcc.n	8007ea2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	701a      	strb	r2, [r3, #0]
  }
}
 8007ec8:	bf00      	nop
 8007eca:	371c      	adds	r7, #28
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	881a      	ldrh	r2, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	4413      	add	r3, r2
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4413      	add	r3, r2
 8007efa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007efc:	68fb      	ldr	r3, [r7, #12]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b086      	sub	sp, #24
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	4613      	mov	r3, r2
 8007f16:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	789b      	ldrb	r3, [r3, #2]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d002      	beq.n	8007f2a <USBH_CtlReq+0x20>
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d00f      	beq.n	8007f48 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007f28:	e027      	b.n	8007f7a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	88fa      	ldrh	r2, [r7, #6]
 8007f34:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007f42:	2301      	movs	r3, #1
 8007f44:	75fb      	strb	r3, [r7, #23]
      break;
 8007f46:	e018      	b.n	8007f7a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 f81b 	bl	8007f84 <USBH_HandleControl>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <USBH_CtlReq+0x54>
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d106      	bne.n	8007f6c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2201      	movs	r2, #1
 8007f62:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	761a      	strb	r2, [r3, #24]
      break;
 8007f6a:	e005      	b.n	8007f78 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007f6c:	7dfb      	ldrb	r3, [r7, #23]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d102      	bne.n	8007f78 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2201      	movs	r2, #1
 8007f76:	709a      	strb	r2, [r3, #2]
      break;
 8007f78:	bf00      	nop
  }
  return status;
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3718      	adds	r7, #24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af02      	add	r7, sp, #8
 8007f8a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	7e1b      	ldrb	r3, [r3, #24]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	2b0a      	cmp	r3, #10
 8007f9c:	f200 8156 	bhi.w	800824c <USBH_HandleControl+0x2c8>
 8007fa0:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <USBH_HandleControl+0x24>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	08007fd5 	.word	0x08007fd5
 8007fac:	08007fef 	.word	0x08007fef
 8007fb0:	08008059 	.word	0x08008059
 8007fb4:	0800807f 	.word	0x0800807f
 8007fb8:	080080b7 	.word	0x080080b7
 8007fbc:	080080e1 	.word	0x080080e1
 8007fc0:	08008133 	.word	0x08008133
 8007fc4:	08008155 	.word	0x08008155
 8007fc8:	08008191 	.word	0x08008191
 8007fcc:	080081b7 	.word	0x080081b7
 8007fd0:	080081f5 	.word	0x080081f5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f103 0110 	add.w	r1, r3, #16
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	795b      	ldrb	r3, [r3, #5]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f943 	bl	800826c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2202      	movs	r2, #2
 8007fea:	761a      	strb	r2, [r3, #24]
      break;
 8007fec:	e139      	b.n	8008262 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	795b      	ldrb	r3, [r3, #5]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fcc5 	bl	8008984 <USBH_LL_GetURBState>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d11e      	bne.n	8008042 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	7c1b      	ldrb	r3, [r3, #16]
 8008008:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800800c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	8adb      	ldrh	r3, [r3, #22]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00a      	beq.n	800802c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008016:	7b7b      	ldrb	r3, [r7, #13]
 8008018:	2b80      	cmp	r3, #128	; 0x80
 800801a:	d103      	bne.n	8008024 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2203      	movs	r2, #3
 8008020:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008022:	e115      	b.n	8008250 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2205      	movs	r2, #5
 8008028:	761a      	strb	r2, [r3, #24]
      break;
 800802a:	e111      	b.n	8008250 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800802c:	7b7b      	ldrb	r3, [r7, #13]
 800802e:	2b80      	cmp	r3, #128	; 0x80
 8008030:	d103      	bne.n	800803a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2209      	movs	r2, #9
 8008036:	761a      	strb	r2, [r3, #24]
      break;
 8008038:	e10a      	b.n	8008250 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2207      	movs	r2, #7
 800803e:	761a      	strb	r2, [r3, #24]
      break;
 8008040:	e106      	b.n	8008250 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008042:	7bbb      	ldrb	r3, [r7, #14]
 8008044:	2b04      	cmp	r3, #4
 8008046:	d003      	beq.n	8008050 <USBH_HandleControl+0xcc>
 8008048:	7bbb      	ldrb	r3, [r7, #14]
 800804a:	2b02      	cmp	r3, #2
 800804c:	f040 8100 	bne.w	8008250 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	220b      	movs	r2, #11
 8008054:	761a      	strb	r2, [r3, #24]
      break;
 8008056:	e0fb      	b.n	8008250 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800805e:	b29a      	uxth	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6899      	ldr	r1, [r3, #8]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	899a      	ldrh	r2, [r3, #12]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	791b      	ldrb	r3, [r3, #4]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f93a 	bl	80082ea <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2204      	movs	r2, #4
 800807a:	761a      	strb	r2, [r3, #24]
      break;
 800807c:	e0f1      	b.n	8008262 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	791b      	ldrb	r3, [r3, #4]
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fc7d 	bl	8008984 <USBH_LL_GetURBState>
 800808a:	4603      	mov	r3, r0
 800808c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d102      	bne.n	800809a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2209      	movs	r2, #9
 8008098:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800809a:	7bbb      	ldrb	r3, [r7, #14]
 800809c:	2b05      	cmp	r3, #5
 800809e:	d102      	bne.n	80080a6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80080a0:	2303      	movs	r3, #3
 80080a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80080a4:	e0d6      	b.n	8008254 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80080a6:	7bbb      	ldrb	r3, [r7, #14]
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	f040 80d3 	bne.w	8008254 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	220b      	movs	r2, #11
 80080b2:	761a      	strb	r2, [r3, #24]
      break;
 80080b4:	e0ce      	b.n	8008254 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6899      	ldr	r1, [r3, #8]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	899a      	ldrh	r2, [r3, #12]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	795b      	ldrb	r3, [r3, #5]
 80080c2:	2001      	movs	r0, #1
 80080c4:	9000      	str	r0, [sp, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f8ea 	bl	80082a0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2206      	movs	r2, #6
 80080dc:	761a      	strb	r2, [r3, #24]
      break;
 80080de:	e0c0      	b.n	8008262 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	795b      	ldrb	r3, [r3, #5]
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fc4c 	bl	8008984 <USBH_LL_GetURBState>
 80080ec:	4603      	mov	r3, r0
 80080ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80080f0:	7bbb      	ldrb	r3, [r7, #14]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d103      	bne.n	80080fe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2207      	movs	r2, #7
 80080fa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80080fc:	e0ac      	b.n	8008258 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80080fe:	7bbb      	ldrb	r3, [r7, #14]
 8008100:	2b05      	cmp	r3, #5
 8008102:	d105      	bne.n	8008110 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	220c      	movs	r2, #12
 8008108:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800810a:	2303      	movs	r3, #3
 800810c:	73fb      	strb	r3, [r7, #15]
      break;
 800810e:	e0a3      	b.n	8008258 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	2b02      	cmp	r3, #2
 8008114:	d103      	bne.n	800811e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2205      	movs	r2, #5
 800811a:	761a      	strb	r2, [r3, #24]
      break;
 800811c:	e09c      	b.n	8008258 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	2b04      	cmp	r3, #4
 8008122:	f040 8099 	bne.w	8008258 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	220b      	movs	r2, #11
 800812a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800812c:	2302      	movs	r3, #2
 800812e:	73fb      	strb	r3, [r7, #15]
      break;
 8008130:	e092      	b.n	8008258 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	791b      	ldrb	r3, [r3, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	2100      	movs	r1, #0
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f8d5 	bl	80082ea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008146:	b29a      	uxth	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2208      	movs	r2, #8
 8008150:	761a      	strb	r2, [r3, #24]

      break;
 8008152:	e086      	b.n	8008262 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	791b      	ldrb	r3, [r3, #4]
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fc12 	bl	8008984 <USBH_LL_GetURBState>
 8008160:	4603      	mov	r3, r0
 8008162:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008164:	7bbb      	ldrb	r3, [r7, #14]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d105      	bne.n	8008176 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	220d      	movs	r2, #13
 800816e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008174:	e072      	b.n	800825c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008176:	7bbb      	ldrb	r3, [r7, #14]
 8008178:	2b04      	cmp	r3, #4
 800817a:	d103      	bne.n	8008184 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	220b      	movs	r2, #11
 8008180:	761a      	strb	r2, [r3, #24]
      break;
 8008182:	e06b      	b.n	800825c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008184:	7bbb      	ldrb	r3, [r7, #14]
 8008186:	2b05      	cmp	r3, #5
 8008188:	d168      	bne.n	800825c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800818a:	2303      	movs	r3, #3
 800818c:	73fb      	strb	r3, [r7, #15]
      break;
 800818e:	e065      	b.n	800825c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	795b      	ldrb	r3, [r3, #5]
 8008194:	2201      	movs	r2, #1
 8008196:	9200      	str	r2, [sp, #0]
 8008198:	2200      	movs	r2, #0
 800819a:	2100      	movs	r1, #0
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f87f 	bl	80082a0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	220a      	movs	r2, #10
 80081b2:	761a      	strb	r2, [r3, #24]
      break;
 80081b4:	e055      	b.n	8008262 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	795b      	ldrb	r3, [r3, #5]
 80081ba:	4619      	mov	r1, r3
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fbe1 	bl	8008984 <USBH_LL_GetURBState>
 80081c2:	4603      	mov	r3, r0
 80081c4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d105      	bne.n	80081d8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	220d      	movs	r2, #13
 80081d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80081d6:	e043      	b.n	8008260 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d103      	bne.n	80081e6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2209      	movs	r2, #9
 80081e2:	761a      	strb	r2, [r3, #24]
      break;
 80081e4:	e03c      	b.n	8008260 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80081e6:	7bbb      	ldrb	r3, [r7, #14]
 80081e8:	2b04      	cmp	r3, #4
 80081ea:	d139      	bne.n	8008260 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	220b      	movs	r2, #11
 80081f0:	761a      	strb	r2, [r3, #24]
      break;
 80081f2:	e035      	b.n	8008260 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	7e5b      	ldrb	r3, [r3, #25]
 80081f8:	3301      	adds	r3, #1
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	765a      	strb	r2, [r3, #25]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	7e5b      	ldrb	r3, [r3, #25]
 8008204:	2b02      	cmp	r3, #2
 8008206:	d806      	bhi.n	8008216 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008214:	e025      	b.n	8008262 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800821c:	2106      	movs	r1, #6
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	795b      	ldrb	r3, [r3, #5]
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f90c 	bl	800844c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	791b      	ldrb	r3, [r3, #4]
 8008238:	4619      	mov	r1, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f906 	bl	800844c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008246:	2302      	movs	r3, #2
 8008248:	73fb      	strb	r3, [r7, #15]
      break;
 800824a:	e00a      	b.n	8008262 <USBH_HandleControl+0x2de>

    default:
      break;
 800824c:	bf00      	nop
 800824e:	e008      	b.n	8008262 <USBH_HandleControl+0x2de>
      break;
 8008250:	bf00      	nop
 8008252:	e006      	b.n	8008262 <USBH_HandleControl+0x2de>
      break;
 8008254:	bf00      	nop
 8008256:	e004      	b.n	8008262 <USBH_HandleControl+0x2de>
      break;
 8008258:	bf00      	nop
 800825a:	e002      	b.n	8008262 <USBH_HandleControl+0x2de>
      break;
 800825c:	bf00      	nop
 800825e:	e000      	b.n	8008262 <USBH_HandleControl+0x2de>
      break;
 8008260:	bf00      	nop
  }

  return status;
 8008262:	7bfb      	ldrb	r3, [r7, #15]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b088      	sub	sp, #32
 8008270:	af04      	add	r7, sp, #16
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	4613      	mov	r3, r2
 8008278:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800827a:	79f9      	ldrb	r1, [r7, #7]
 800827c:	2300      	movs	r3, #0
 800827e:	9303      	str	r3, [sp, #12]
 8008280:	2308      	movs	r3, #8
 8008282:	9302      	str	r3, [sp, #8]
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	2300      	movs	r3, #0
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	2300      	movs	r3, #0
 800828e:	2200      	movs	r2, #0
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 fb46 	bl	8008922 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b088      	sub	sp, #32
 80082a4:	af04      	add	r7, sp, #16
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	4611      	mov	r1, r2
 80082ac:	461a      	mov	r2, r3
 80082ae:	460b      	mov	r3, r1
 80082b0:	80fb      	strh	r3, [r7, #6]
 80082b2:	4613      	mov	r3, r2
 80082b4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80082c0:	2300      	movs	r3, #0
 80082c2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80082c4:	7979      	ldrb	r1, [r7, #5]
 80082c6:	7e3b      	ldrb	r3, [r7, #24]
 80082c8:	9303      	str	r3, [sp, #12]
 80082ca:	88fb      	ldrh	r3, [r7, #6]
 80082cc:	9302      	str	r3, [sp, #8]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	2301      	movs	r3, #1
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	2300      	movs	r3, #0
 80082d8:	2200      	movs	r2, #0
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f000 fb21 	bl	8008922 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b088      	sub	sp, #32
 80082ee:	af04      	add	r7, sp, #16
 80082f0:	60f8      	str	r0, [r7, #12]
 80082f2:	60b9      	str	r1, [r7, #8]
 80082f4:	4611      	mov	r1, r2
 80082f6:	461a      	mov	r2, r3
 80082f8:	460b      	mov	r3, r1
 80082fa:	80fb      	strh	r3, [r7, #6]
 80082fc:	4613      	mov	r3, r2
 80082fe:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008300:	7979      	ldrb	r1, [r7, #5]
 8008302:	2300      	movs	r3, #0
 8008304:	9303      	str	r3, [sp, #12]
 8008306:	88fb      	ldrh	r3, [r7, #6]
 8008308:	9302      	str	r3, [sp, #8]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	9301      	str	r3, [sp, #4]
 800830e:	2301      	movs	r3, #1
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	2300      	movs	r3, #0
 8008314:	2201      	movs	r2, #1
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 fb03 	bl	8008922 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800831c:	2300      	movs	r3, #0

}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b088      	sub	sp, #32
 800832a:	af04      	add	r7, sp, #16
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	60b9      	str	r1, [r7, #8]
 8008330:	4611      	mov	r1, r2
 8008332:	461a      	mov	r2, r3
 8008334:	460b      	mov	r3, r1
 8008336:	80fb      	strh	r3, [r7, #6]
 8008338:	4613      	mov	r3, r2
 800833a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800834a:	7979      	ldrb	r1, [r7, #5]
 800834c:	7e3b      	ldrb	r3, [r7, #24]
 800834e:	9303      	str	r3, [sp, #12]
 8008350:	88fb      	ldrh	r3, [r7, #6]
 8008352:	9302      	str	r3, [sp, #8]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	9301      	str	r3, [sp, #4]
 8008358:	2301      	movs	r3, #1
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	2302      	movs	r3, #2
 800835e:	2200      	movs	r2, #0
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f000 fade 	bl	8008922 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b088      	sub	sp, #32
 8008374:	af04      	add	r7, sp, #16
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	4611      	mov	r1, r2
 800837c:	461a      	mov	r2, r3
 800837e:	460b      	mov	r3, r1
 8008380:	80fb      	strh	r3, [r7, #6]
 8008382:	4613      	mov	r3, r2
 8008384:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008386:	7979      	ldrb	r1, [r7, #5]
 8008388:	2300      	movs	r3, #0
 800838a:	9303      	str	r3, [sp, #12]
 800838c:	88fb      	ldrh	r3, [r7, #6]
 800838e:	9302      	str	r3, [sp, #8]
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	9301      	str	r3, [sp, #4]
 8008394:	2301      	movs	r3, #1
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	2302      	movs	r3, #2
 800839a:	2201      	movs	r2, #1
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 fac0 	bl	8008922 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af04      	add	r7, sp, #16
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	4608      	mov	r0, r1
 80083b6:	4611      	mov	r1, r2
 80083b8:	461a      	mov	r2, r3
 80083ba:	4603      	mov	r3, r0
 80083bc:	70fb      	strb	r3, [r7, #3]
 80083be:	460b      	mov	r3, r1
 80083c0:	70bb      	strb	r3, [r7, #2]
 80083c2:	4613      	mov	r3, r2
 80083c4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80083c6:	7878      	ldrb	r0, [r7, #1]
 80083c8:	78ba      	ldrb	r2, [r7, #2]
 80083ca:	78f9      	ldrb	r1, [r7, #3]
 80083cc:	8b3b      	ldrh	r3, [r7, #24]
 80083ce:	9302      	str	r3, [sp, #8]
 80083d0:	7d3b      	ldrb	r3, [r7, #20]
 80083d2:	9301      	str	r3, [sp, #4]
 80083d4:	7c3b      	ldrb	r3, [r7, #16]
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	4603      	mov	r3, r0
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fa53 	bl	8008886 <USBH_LL_OpenPipe>

  return USBH_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b082      	sub	sp, #8
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	460b      	mov	r3, r1
 80083f4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80083f6:	78fb      	ldrb	r3, [r7, #3]
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fa72 	bl	80088e4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	460b      	mov	r3, r1
 8008414:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f836 	bl	8008488 <USBH_GetFreePipe>
 800841c:	4603      	mov	r3, r0
 800841e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008420:	89fb      	ldrh	r3, [r7, #14]
 8008422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008426:	4293      	cmp	r3, r2
 8008428:	d00a      	beq.n	8008440 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800842a:	78fa      	ldrb	r2, [r7, #3]
 800842c:	89fb      	ldrh	r3, [r7, #14]
 800842e:	f003 030f 	and.w	r3, r3, #15
 8008432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	33e0      	adds	r3, #224	; 0xe0
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	440b      	add	r3, r1
 800843e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008440:	89fb      	ldrh	r3, [r7, #14]
 8008442:	b2db      	uxtb	r3, r3
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008458:	78fb      	ldrb	r3, [r7, #3]
 800845a:	2b0a      	cmp	r3, #10
 800845c:	d80d      	bhi.n	800847a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800845e:	78fb      	ldrb	r3, [r7, #3]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	33e0      	adds	r3, #224	; 0xe0
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	78fb      	ldrb	r3, [r7, #3]
 800846c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008470:	6879      	ldr	r1, [r7, #4]
 8008472:	33e0      	adds	r3, #224	; 0xe0
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	440b      	add	r3, r1
 8008478:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008490:	2300      	movs	r3, #0
 8008492:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008494:	2300      	movs	r3, #0
 8008496:	73fb      	strb	r3, [r7, #15]
 8008498:	e00f      	b.n	80084ba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800849a:	7bfb      	ldrb	r3, [r7, #15]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	33e0      	adds	r3, #224	; 0xe0
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4413      	add	r3, r2
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d102      	bne.n	80084b4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	e007      	b.n	80084c4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80084b4:	7bfb      	ldrb	r3, [r7, #15]
 80084b6:	3301      	adds	r3, #1
 80084b8:	73fb      	strb	r3, [r7, #15]
 80084ba:	7bfb      	ldrb	r3, [r7, #15]
 80084bc:	2b0a      	cmp	r3, #10
 80084be:	d9ec      	bls.n	800849a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80084c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80084d4:	2201      	movs	r2, #1
 80084d6:	490e      	ldr	r1, [pc, #56]	; (8008510 <MX_USB_HOST_Init+0x40>)
 80084d8:	480e      	ldr	r0, [pc, #56]	; (8008514 <MX_USB_HOST_Init+0x44>)
 80084da:	f7fe fca1 	bl	8006e20 <USBH_Init>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80084e4:	f7f8 ff90 	bl	8001408 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80084e8:	490b      	ldr	r1, [pc, #44]	; (8008518 <MX_USB_HOST_Init+0x48>)
 80084ea:	480a      	ldr	r0, [pc, #40]	; (8008514 <MX_USB_HOST_Init+0x44>)
 80084ec:	f7fe fd26 	bl	8006f3c <USBH_RegisterClass>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d001      	beq.n	80084fa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80084f6:	f7f8 ff87 	bl	8001408 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80084fa:	4806      	ldr	r0, [pc, #24]	; (8008514 <MX_USB_HOST_Init+0x44>)
 80084fc:	f7fe fdaa 	bl	8007054 <USBH_Start>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008506:	f7f8 ff7f 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800850a:	bf00      	nop
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	08008531 	.word	0x08008531
 8008514:	20000354 	.word	0x20000354
 8008518:	2000000c 	.word	0x2000000c

0800851c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008520:	4802      	ldr	r0, [pc, #8]	; (800852c <MX_USB_HOST_Process+0x10>)
 8008522:	f7fe fda7 	bl	8007074 <USBH_Process>
}
 8008526:	bf00      	nop
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20000354 	.word	0x20000354

08008530 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800853c:	78fb      	ldrb	r3, [r7, #3]
 800853e:	3b01      	subs	r3, #1
 8008540:	2b04      	cmp	r3, #4
 8008542:	d819      	bhi.n	8008578 <USBH_UserProcess+0x48>
 8008544:	a201      	add	r2, pc, #4	; (adr r2, 800854c <USBH_UserProcess+0x1c>)
 8008546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854a:	bf00      	nop
 800854c:	08008579 	.word	0x08008579
 8008550:	08008569 	.word	0x08008569
 8008554:	08008579 	.word	0x08008579
 8008558:	08008571 	.word	0x08008571
 800855c:	08008561 	.word	0x08008561
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008560:	4b09      	ldr	r3, [pc, #36]	; (8008588 <USBH_UserProcess+0x58>)
 8008562:	2203      	movs	r2, #3
 8008564:	701a      	strb	r2, [r3, #0]
  break;
 8008566:	e008      	b.n	800857a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008568:	4b07      	ldr	r3, [pc, #28]	; (8008588 <USBH_UserProcess+0x58>)
 800856a:	2202      	movs	r2, #2
 800856c:	701a      	strb	r2, [r3, #0]
  break;
 800856e:	e004      	b.n	800857a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008570:	4b05      	ldr	r3, [pc, #20]	; (8008588 <USBH_UserProcess+0x58>)
 8008572:	2201      	movs	r2, #1
 8008574:	701a      	strb	r2, [r3, #0]
  break;
 8008576:	e000      	b.n	800857a <USBH_UserProcess+0x4a>

  default:
  break;
 8008578:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800857a:	bf00      	nop
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	200000b0 	.word	0x200000b0

0800858c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08a      	sub	sp, #40	; 0x28
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008594:	f107 0314 	add.w	r3, r7, #20
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	605a      	str	r2, [r3, #4]
 800859e:	609a      	str	r2, [r3, #8]
 80085a0:	60da      	str	r2, [r3, #12]
 80085a2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085ac:	d147      	bne.n	800863e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085ae:	2300      	movs	r3, #0
 80085b0:	613b      	str	r3, [r7, #16]
 80085b2:	4b25      	ldr	r3, [pc, #148]	; (8008648 <HAL_HCD_MspInit+0xbc>)
 80085b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b6:	4a24      	ldr	r2, [pc, #144]	; (8008648 <HAL_HCD_MspInit+0xbc>)
 80085b8:	f043 0301 	orr.w	r3, r3, #1
 80085bc:	6313      	str	r3, [r2, #48]	; 0x30
 80085be:	4b22      	ldr	r3, [pc, #136]	; (8008648 <HAL_HCD_MspInit+0xbc>)
 80085c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	613b      	str	r3, [r7, #16]
 80085c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80085ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085d0:	2300      	movs	r3, #0
 80085d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085d4:	2300      	movs	r3, #0
 80085d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80085d8:	f107 0314 	add.w	r3, r7, #20
 80085dc:	4619      	mov	r1, r3
 80085de:	481b      	ldr	r0, [pc, #108]	; (800864c <HAL_HCD_MspInit+0xc0>)
 80085e0:	f7fa fa2e 	bl	8002a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80085e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80085e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085ea:	2302      	movs	r3, #2
 80085ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ee:	2300      	movs	r3, #0
 80085f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085f2:	2300      	movs	r3, #0
 80085f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80085f6:	230a      	movs	r3, #10
 80085f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085fa:	f107 0314 	add.w	r3, r7, #20
 80085fe:	4619      	mov	r1, r3
 8008600:	4812      	ldr	r0, [pc, #72]	; (800864c <HAL_HCD_MspInit+0xc0>)
 8008602:	f7fa fa1d 	bl	8002a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008606:	4b10      	ldr	r3, [pc, #64]	; (8008648 <HAL_HCD_MspInit+0xbc>)
 8008608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800860a:	4a0f      	ldr	r2, [pc, #60]	; (8008648 <HAL_HCD_MspInit+0xbc>)
 800860c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008610:	6353      	str	r3, [r2, #52]	; 0x34
 8008612:	2300      	movs	r3, #0
 8008614:	60fb      	str	r3, [r7, #12]
 8008616:	4b0c      	ldr	r3, [pc, #48]	; (8008648 <HAL_HCD_MspInit+0xbc>)
 8008618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800861a:	4a0b      	ldr	r2, [pc, #44]	; (8008648 <HAL_HCD_MspInit+0xbc>)
 800861c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008620:	6453      	str	r3, [r2, #68]	; 0x44
 8008622:	4b09      	ldr	r3, [pc, #36]	; (8008648 <HAL_HCD_MspInit+0xbc>)
 8008624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800862e:	2200      	movs	r2, #0
 8008630:	2100      	movs	r1, #0
 8008632:	2043      	movs	r0, #67	; 0x43
 8008634:	f7f9 fc75 	bl	8001f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008638:	2043      	movs	r0, #67	; 0x43
 800863a:	f7f9 fc8e 	bl	8001f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800863e:	bf00      	nop
 8008640:	3728      	adds	r7, #40	; 0x28
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	40023800 	.word	0x40023800
 800864c:	40020000 	.word	0x40020000

08008650 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff f8db 	bl	800781a <USBH_LL_IncTimer>
}
 8008664:	bf00      	nop
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800867a:	4618      	mov	r0, r3
 800867c:	f7ff f913 	bl	80078a6 <USBH_LL_Connect>
}
 8008680:	bf00      	nop
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff f91c 	bl	80078d4 <USBH_LL_Disconnect>
}
 800869c:	bf00      	nop
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
 80086b0:	4613      	mov	r3, r2
 80086b2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80086b4:	bf00      	nop
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7ff f8cd 	bl	800786e <USBH_LL_PortEnabled>
}
 80086d4:	bf00      	nop
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7ff f8cd 	bl	800788a <USBH_LL_PortDisabled>
}
 80086f0:	bf00      	nop
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008706:	2b01      	cmp	r3, #1
 8008708:	d12a      	bne.n	8008760 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800870a:	4a18      	ldr	r2, [pc, #96]	; (800876c <USBH_LL_Init+0x74>)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a15      	ldr	r2, [pc, #84]	; (800876c <USBH_LL_Init+0x74>)
 8008716:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800871a:	4b14      	ldr	r3, [pc, #80]	; (800876c <USBH_LL_Init+0x74>)
 800871c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008720:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008722:	4b12      	ldr	r3, [pc, #72]	; (800876c <USBH_LL_Init+0x74>)
 8008724:	2208      	movs	r2, #8
 8008726:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008728:	4b10      	ldr	r3, [pc, #64]	; (800876c <USBH_LL_Init+0x74>)
 800872a:	2201      	movs	r2, #1
 800872c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800872e:	4b0f      	ldr	r3, [pc, #60]	; (800876c <USBH_LL_Init+0x74>)
 8008730:	2200      	movs	r2, #0
 8008732:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008734:	4b0d      	ldr	r3, [pc, #52]	; (800876c <USBH_LL_Init+0x74>)
 8008736:	2202      	movs	r2, #2
 8008738:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800873a:	4b0c      	ldr	r3, [pc, #48]	; (800876c <USBH_LL_Init+0x74>)
 800873c:	2200      	movs	r2, #0
 800873e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008740:	480a      	ldr	r0, [pc, #40]	; (800876c <USBH_LL_Init+0x74>)
 8008742:	f7fa fb32 	bl	8002daa <HAL_HCD_Init>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800874c:	f7f8 fe5c 	bl	8001408 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008750:	4806      	ldr	r0, [pc, #24]	; (800876c <USBH_LL_Init+0x74>)
 8008752:	f7fa ff16 	bl	8003582 <HAL_HCD_GetCurrentFrame>
 8008756:	4603      	mov	r3, r0
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7ff f84e 	bl	80077fc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	2000072c 	.word	0x2000072c

08008770 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800877c:	2300      	movs	r3, #0
 800877e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008786:	4618      	mov	r0, r3
 8008788:	f7fa fe85 	bl	8003496 <HAL_HCD_Start>
 800878c:	4603      	mov	r3, r0
 800878e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008790:	7bfb      	ldrb	r3, [r7, #15]
 8008792:	4618      	mov	r0, r3
 8008794:	f000 f95c 	bl	8008a50 <USBH_Get_USB_Status>
 8008798:	4603      	mov	r3, r0
 800879a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800879c:	7bbb      	ldrb	r3, [r7, #14]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087bc:	4618      	mov	r0, r3
 80087be:	f7fa fe8d 	bl	80034dc <HAL_HCD_Stop>
 80087c2:	4603      	mov	r3, r0
 80087c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 f941 	bl	8008a50 <USBH_Get_USB_Status>
 80087ce:	4603      	mov	r3, r0
 80087d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80087e4:	2301      	movs	r3, #1
 80087e6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7fa fed5 	bl	800359e <HAL_HCD_GetCurrentSpeed>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d00c      	beq.n	8008814 <USBH_LL_GetSpeed+0x38>
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d80d      	bhi.n	800881a <USBH_LL_GetSpeed+0x3e>
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d002      	beq.n	8008808 <USBH_LL_GetSpeed+0x2c>
 8008802:	2b01      	cmp	r3, #1
 8008804:	d003      	beq.n	800880e <USBH_LL_GetSpeed+0x32>
 8008806:	e008      	b.n	800881a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]
    break;
 800880c:	e008      	b.n	8008820 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800880e:	2301      	movs	r3, #1
 8008810:	73fb      	strb	r3, [r7, #15]
    break;
 8008812:	e005      	b.n	8008820 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008814:	2302      	movs	r3, #2
 8008816:	73fb      	strb	r3, [r7, #15]
    break;
 8008818:	e002      	b.n	8008820 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800881a:	2301      	movs	r3, #1
 800881c:	73fb      	strb	r3, [r7, #15]
    break;
 800881e:	bf00      	nop
  }
  return  speed;
 8008820:	7bfb      	ldrb	r3, [r7, #15]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008840:	4618      	mov	r0, r3
 8008842:	f7fa fe68 	bl	8003516 <HAL_HCD_ResetPort>
 8008846:	4603      	mov	r3, r0
 8008848:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800884a:	7bfb      	ldrb	r3, [r7, #15]
 800884c:	4618      	mov	r0, r3
 800884e:	f000 f8ff 	bl	8008a50 <USBH_Get_USB_Status>
 8008852:	4603      	mov	r3, r0
 8008854:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008856:	7bbb      	ldrb	r3, [r7, #14]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008872:	78fa      	ldrb	r2, [r7, #3]
 8008874:	4611      	mov	r1, r2
 8008876:	4618      	mov	r0, r3
 8008878:	f7fa fe6f 	bl	800355a <HAL_HCD_HC_GetXferCount>
 800887c:	4603      	mov	r3, r0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008886:	b590      	push	{r4, r7, lr}
 8008888:	b089      	sub	sp, #36	; 0x24
 800888a:	af04      	add	r7, sp, #16
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	4608      	mov	r0, r1
 8008890:	4611      	mov	r1, r2
 8008892:	461a      	mov	r2, r3
 8008894:	4603      	mov	r3, r0
 8008896:	70fb      	strb	r3, [r7, #3]
 8008898:	460b      	mov	r3, r1
 800889a:	70bb      	strb	r3, [r7, #2]
 800889c:	4613      	mov	r3, r2
 800889e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80088ae:	787c      	ldrb	r4, [r7, #1]
 80088b0:	78ba      	ldrb	r2, [r7, #2]
 80088b2:	78f9      	ldrb	r1, [r7, #3]
 80088b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088b6:	9302      	str	r3, [sp, #8]
 80088b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	4623      	mov	r3, r4
 80088c6:	f7fa fad2 	bl	8002e6e <HAL_HCD_HC_Init>
 80088ca:	4603      	mov	r3, r0
 80088cc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 f8bd 	bl	8008a50 <USBH_Get_USB_Status>
 80088d6:	4603      	mov	r3, r0
 80088d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088da:	7bbb      	ldrb	r3, [r7, #14]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd90      	pop	{r4, r7, pc}

080088e4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088fe:	78fa      	ldrb	r2, [r7, #3]
 8008900:	4611      	mov	r1, r2
 8008902:	4618      	mov	r0, r3
 8008904:	f7fa fb42 	bl	8002f8c <HAL_HCD_HC_Halt>
 8008908:	4603      	mov	r3, r0
 800890a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800890c:	7bfb      	ldrb	r3, [r7, #15]
 800890e:	4618      	mov	r0, r3
 8008910:	f000 f89e 	bl	8008a50 <USBH_Get_USB_Status>
 8008914:	4603      	mov	r3, r0
 8008916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008918:	7bbb      	ldrb	r3, [r7, #14]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008922:	b590      	push	{r4, r7, lr}
 8008924:	b089      	sub	sp, #36	; 0x24
 8008926:	af04      	add	r7, sp, #16
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	4608      	mov	r0, r1
 800892c:	4611      	mov	r1, r2
 800892e:	461a      	mov	r2, r3
 8008930:	4603      	mov	r3, r0
 8008932:	70fb      	strb	r3, [r7, #3]
 8008934:	460b      	mov	r3, r1
 8008936:	70bb      	strb	r3, [r7, #2]
 8008938:	4613      	mov	r3, r2
 800893a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800894a:	787c      	ldrb	r4, [r7, #1]
 800894c:	78ba      	ldrb	r2, [r7, #2]
 800894e:	78f9      	ldrb	r1, [r7, #3]
 8008950:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008954:	9303      	str	r3, [sp, #12]
 8008956:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008958:	9302      	str	r3, [sp, #8]
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	4623      	mov	r3, r4
 8008966:	f7fa fb35 	bl	8002fd4 <HAL_HCD_HC_SubmitRequest>
 800896a:	4603      	mov	r3, r0
 800896c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	4618      	mov	r0, r3
 8008972:	f000 f86d 	bl	8008a50 <USBH_Get_USB_Status>
 8008976:	4603      	mov	r3, r0
 8008978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800897a:	7bbb      	ldrb	r3, [r7, #14]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	bd90      	pop	{r4, r7, pc}

08008984 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008996:	78fa      	ldrb	r2, [r7, #3]
 8008998:	4611      	mov	r1, r2
 800899a:	4618      	mov	r0, r3
 800899c:	f7fa fdc9 	bl	8003532 <HAL_HCD_HC_GetURBState>
 80089a0:	4603      	mov	r3, r0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b082      	sub	sp, #8
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	460b      	mov	r3, r1
 80089b4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d103      	bne.n	80089c8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80089c0:	78fb      	ldrb	r3, [r7, #3]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f000 f870 	bl	8008aa8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80089c8:	20c8      	movs	r0, #200	; 0xc8
 80089ca:	f7f8 ff49 	bl	8001860 <HAL_Delay>
  return USBH_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
 80089e4:	4613      	mov	r3, r2
 80089e6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089ee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	212c      	movs	r1, #44	; 0x2c
 80089f6:	fb01 f303 	mul.w	r3, r1, r3
 80089fa:	4413      	add	r3, r2
 80089fc:	333b      	adds	r3, #59	; 0x3b
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d009      	beq.n	8008a18 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008a04:	78fb      	ldrb	r3, [r7, #3]
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	212c      	movs	r1, #44	; 0x2c
 8008a0a:	fb01 f303 	mul.w	r3, r1, r3
 8008a0e:	4413      	add	r3, r2
 8008a10:	3354      	adds	r3, #84	; 0x54
 8008a12:	78ba      	ldrb	r2, [r7, #2]
 8008a14:	701a      	strb	r2, [r3, #0]
 8008a16:	e008      	b.n	8008a2a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008a18:	78fb      	ldrb	r3, [r7, #3]
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	212c      	movs	r1, #44	; 0x2c
 8008a1e:	fb01 f303 	mul.w	r3, r1, r3
 8008a22:	4413      	add	r3, r2
 8008a24:	3355      	adds	r3, #85	; 0x55
 8008a26:	78ba      	ldrb	r2, [r7, #2]
 8008a28:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7f8 ff0d 	bl	8001860 <HAL_Delay>
}
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
	...

08008a50 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	4603      	mov	r3, r0
 8008a58:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a5e:	79fb      	ldrb	r3, [r7, #7]
 8008a60:	2b03      	cmp	r3, #3
 8008a62:	d817      	bhi.n	8008a94 <USBH_Get_USB_Status+0x44>
 8008a64:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <USBH_Get_USB_Status+0x1c>)
 8008a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6a:	bf00      	nop
 8008a6c:	08008a7d 	.word	0x08008a7d
 8008a70:	08008a83 	.word	0x08008a83
 8008a74:	08008a89 	.word	0x08008a89
 8008a78:	08008a8f 	.word	0x08008a8f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a80:	e00b      	b.n	8008a9a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008a82:	2302      	movs	r3, #2
 8008a84:	73fb      	strb	r3, [r7, #15]
    break;
 8008a86:	e008      	b.n	8008a9a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a8c:	e005      	b.n	8008a9a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008a8e:	2302      	movs	r3, #2
 8008a90:	73fb      	strb	r3, [r7, #15]
    break;
 8008a92:	e002      	b.n	8008a9a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008a94:	2302      	movs	r3, #2
 8008a96:	73fb      	strb	r3, [r7, #15]
    break;
 8008a98:	bf00      	nop
  }
  return usb_status;
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	4603      	mov	r3, r0
 8008ab0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008ab2:	79fb      	ldrb	r3, [r7, #7]
 8008ab4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d102      	bne.n	8008ac2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008abc:	2301      	movs	r3, #1
 8008abe:	73fb      	strb	r3, [r7, #15]
 8008ac0:	e001      	b.n	8008ac6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	2101      	movs	r1, #1
 8008acc:	4803      	ldr	r0, [pc, #12]	; (8008adc <MX_DriverVbusFS+0x34>)
 8008ace:	f7fa f953 	bl	8002d78 <HAL_GPIO_WritePin>
}
 8008ad2:	bf00      	nop
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	40020800 	.word	0x40020800

08008ae0 <__errno>:
 8008ae0:	4b01      	ldr	r3, [pc, #4]	; (8008ae8 <__errno+0x8>)
 8008ae2:	6818      	ldr	r0, [r3, #0]
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	2000002c 	.word	0x2000002c

08008aec <__libc_init_array>:
 8008aec:	b570      	push	{r4, r5, r6, lr}
 8008aee:	4d0d      	ldr	r5, [pc, #52]	; (8008b24 <__libc_init_array+0x38>)
 8008af0:	4c0d      	ldr	r4, [pc, #52]	; (8008b28 <__libc_init_array+0x3c>)
 8008af2:	1b64      	subs	r4, r4, r5
 8008af4:	10a4      	asrs	r4, r4, #2
 8008af6:	2600      	movs	r6, #0
 8008af8:	42a6      	cmp	r6, r4
 8008afa:	d109      	bne.n	8008b10 <__libc_init_array+0x24>
 8008afc:	4d0b      	ldr	r5, [pc, #44]	; (8008b2c <__libc_init_array+0x40>)
 8008afe:	4c0c      	ldr	r4, [pc, #48]	; (8008b30 <__libc_init_array+0x44>)
 8008b00:	f001 f930 	bl	8009d64 <_init>
 8008b04:	1b64      	subs	r4, r4, r5
 8008b06:	10a4      	asrs	r4, r4, #2
 8008b08:	2600      	movs	r6, #0
 8008b0a:	42a6      	cmp	r6, r4
 8008b0c:	d105      	bne.n	8008b1a <__libc_init_array+0x2e>
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}
 8008b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b14:	4798      	blx	r3
 8008b16:	3601      	adds	r6, #1
 8008b18:	e7ee      	b.n	8008af8 <__libc_init_array+0xc>
 8008b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b1e:	4798      	blx	r3
 8008b20:	3601      	adds	r6, #1
 8008b22:	e7f2      	b.n	8008b0a <__libc_init_array+0x1e>
 8008b24:	08009f80 	.word	0x08009f80
 8008b28:	08009f80 	.word	0x08009f80
 8008b2c:	08009f80 	.word	0x08009f80
 8008b30:	08009f84 	.word	0x08009f84

08008b34 <malloc>:
 8008b34:	4b02      	ldr	r3, [pc, #8]	; (8008b40 <malloc+0xc>)
 8008b36:	4601      	mov	r1, r0
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	f000 b863 	b.w	8008c04 <_malloc_r>
 8008b3e:	bf00      	nop
 8008b40:	2000002c 	.word	0x2000002c

08008b44 <free>:
 8008b44:	4b02      	ldr	r3, [pc, #8]	; (8008b50 <free+0xc>)
 8008b46:	4601      	mov	r1, r0
 8008b48:	6818      	ldr	r0, [r3, #0]
 8008b4a:	f000 b80b 	b.w	8008b64 <_free_r>
 8008b4e:	bf00      	nop
 8008b50:	2000002c 	.word	0x2000002c

08008b54 <memset>:
 8008b54:	4402      	add	r2, r0
 8008b56:	4603      	mov	r3, r0
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d100      	bne.n	8008b5e <memset+0xa>
 8008b5c:	4770      	bx	lr
 8008b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b62:	e7f9      	b.n	8008b58 <memset+0x4>

08008b64 <_free_r>:
 8008b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b66:	2900      	cmp	r1, #0
 8008b68:	d048      	beq.n	8008bfc <_free_r+0x98>
 8008b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b6e:	9001      	str	r0, [sp, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f1a1 0404 	sub.w	r4, r1, #4
 8008b76:	bfb8      	it	lt
 8008b78:	18e4      	addlt	r4, r4, r3
 8008b7a:	f000 f8ad 	bl	8008cd8 <__malloc_lock>
 8008b7e:	4a20      	ldr	r2, [pc, #128]	; (8008c00 <_free_r+0x9c>)
 8008b80:	9801      	ldr	r0, [sp, #4]
 8008b82:	6813      	ldr	r3, [r2, #0]
 8008b84:	4615      	mov	r5, r2
 8008b86:	b933      	cbnz	r3, 8008b96 <_free_r+0x32>
 8008b88:	6063      	str	r3, [r4, #4]
 8008b8a:	6014      	str	r4, [r2, #0]
 8008b8c:	b003      	add	sp, #12
 8008b8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b92:	f000 b8a7 	b.w	8008ce4 <__malloc_unlock>
 8008b96:	42a3      	cmp	r3, r4
 8008b98:	d90b      	bls.n	8008bb2 <_free_r+0x4e>
 8008b9a:	6821      	ldr	r1, [r4, #0]
 8008b9c:	1862      	adds	r2, r4, r1
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	bf04      	itt	eq
 8008ba2:	681a      	ldreq	r2, [r3, #0]
 8008ba4:	685b      	ldreq	r3, [r3, #4]
 8008ba6:	6063      	str	r3, [r4, #4]
 8008ba8:	bf04      	itt	eq
 8008baa:	1852      	addeq	r2, r2, r1
 8008bac:	6022      	streq	r2, [r4, #0]
 8008bae:	602c      	str	r4, [r5, #0]
 8008bb0:	e7ec      	b.n	8008b8c <_free_r+0x28>
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	b10b      	cbz	r3, 8008bbc <_free_r+0x58>
 8008bb8:	42a3      	cmp	r3, r4
 8008bba:	d9fa      	bls.n	8008bb2 <_free_r+0x4e>
 8008bbc:	6811      	ldr	r1, [r2, #0]
 8008bbe:	1855      	adds	r5, r2, r1
 8008bc0:	42a5      	cmp	r5, r4
 8008bc2:	d10b      	bne.n	8008bdc <_free_r+0x78>
 8008bc4:	6824      	ldr	r4, [r4, #0]
 8008bc6:	4421      	add	r1, r4
 8008bc8:	1854      	adds	r4, r2, r1
 8008bca:	42a3      	cmp	r3, r4
 8008bcc:	6011      	str	r1, [r2, #0]
 8008bce:	d1dd      	bne.n	8008b8c <_free_r+0x28>
 8008bd0:	681c      	ldr	r4, [r3, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	6053      	str	r3, [r2, #4]
 8008bd6:	4421      	add	r1, r4
 8008bd8:	6011      	str	r1, [r2, #0]
 8008bda:	e7d7      	b.n	8008b8c <_free_r+0x28>
 8008bdc:	d902      	bls.n	8008be4 <_free_r+0x80>
 8008bde:	230c      	movs	r3, #12
 8008be0:	6003      	str	r3, [r0, #0]
 8008be2:	e7d3      	b.n	8008b8c <_free_r+0x28>
 8008be4:	6825      	ldr	r5, [r4, #0]
 8008be6:	1961      	adds	r1, r4, r5
 8008be8:	428b      	cmp	r3, r1
 8008bea:	bf04      	itt	eq
 8008bec:	6819      	ldreq	r1, [r3, #0]
 8008bee:	685b      	ldreq	r3, [r3, #4]
 8008bf0:	6063      	str	r3, [r4, #4]
 8008bf2:	bf04      	itt	eq
 8008bf4:	1949      	addeq	r1, r1, r5
 8008bf6:	6021      	streq	r1, [r4, #0]
 8008bf8:	6054      	str	r4, [r2, #4]
 8008bfa:	e7c7      	b.n	8008b8c <_free_r+0x28>
 8008bfc:	b003      	add	sp, #12
 8008bfe:	bd30      	pop	{r4, r5, pc}
 8008c00:	200000b4 	.word	0x200000b4

08008c04 <_malloc_r>:
 8008c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c06:	1ccd      	adds	r5, r1, #3
 8008c08:	f025 0503 	bic.w	r5, r5, #3
 8008c0c:	3508      	adds	r5, #8
 8008c0e:	2d0c      	cmp	r5, #12
 8008c10:	bf38      	it	cc
 8008c12:	250c      	movcc	r5, #12
 8008c14:	2d00      	cmp	r5, #0
 8008c16:	4606      	mov	r6, r0
 8008c18:	db01      	blt.n	8008c1e <_malloc_r+0x1a>
 8008c1a:	42a9      	cmp	r1, r5
 8008c1c:	d903      	bls.n	8008c26 <_malloc_r+0x22>
 8008c1e:	230c      	movs	r3, #12
 8008c20:	6033      	str	r3, [r6, #0]
 8008c22:	2000      	movs	r0, #0
 8008c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c26:	f000 f857 	bl	8008cd8 <__malloc_lock>
 8008c2a:	4921      	ldr	r1, [pc, #132]	; (8008cb0 <_malloc_r+0xac>)
 8008c2c:	680a      	ldr	r2, [r1, #0]
 8008c2e:	4614      	mov	r4, r2
 8008c30:	b99c      	cbnz	r4, 8008c5a <_malloc_r+0x56>
 8008c32:	4f20      	ldr	r7, [pc, #128]	; (8008cb4 <_malloc_r+0xb0>)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	b923      	cbnz	r3, 8008c42 <_malloc_r+0x3e>
 8008c38:	4621      	mov	r1, r4
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f000 f83c 	bl	8008cb8 <_sbrk_r>
 8008c40:	6038      	str	r0, [r7, #0]
 8008c42:	4629      	mov	r1, r5
 8008c44:	4630      	mov	r0, r6
 8008c46:	f000 f837 	bl	8008cb8 <_sbrk_r>
 8008c4a:	1c43      	adds	r3, r0, #1
 8008c4c:	d123      	bne.n	8008c96 <_malloc_r+0x92>
 8008c4e:	230c      	movs	r3, #12
 8008c50:	6033      	str	r3, [r6, #0]
 8008c52:	4630      	mov	r0, r6
 8008c54:	f000 f846 	bl	8008ce4 <__malloc_unlock>
 8008c58:	e7e3      	b.n	8008c22 <_malloc_r+0x1e>
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	1b5b      	subs	r3, r3, r5
 8008c5e:	d417      	bmi.n	8008c90 <_malloc_r+0x8c>
 8008c60:	2b0b      	cmp	r3, #11
 8008c62:	d903      	bls.n	8008c6c <_malloc_r+0x68>
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	441c      	add	r4, r3
 8008c68:	6025      	str	r5, [r4, #0]
 8008c6a:	e004      	b.n	8008c76 <_malloc_r+0x72>
 8008c6c:	6863      	ldr	r3, [r4, #4]
 8008c6e:	42a2      	cmp	r2, r4
 8008c70:	bf0c      	ite	eq
 8008c72:	600b      	streq	r3, [r1, #0]
 8008c74:	6053      	strne	r3, [r2, #4]
 8008c76:	4630      	mov	r0, r6
 8008c78:	f000 f834 	bl	8008ce4 <__malloc_unlock>
 8008c7c:	f104 000b 	add.w	r0, r4, #11
 8008c80:	1d23      	adds	r3, r4, #4
 8008c82:	f020 0007 	bic.w	r0, r0, #7
 8008c86:	1ac2      	subs	r2, r0, r3
 8008c88:	d0cc      	beq.n	8008c24 <_malloc_r+0x20>
 8008c8a:	1a1b      	subs	r3, r3, r0
 8008c8c:	50a3      	str	r3, [r4, r2]
 8008c8e:	e7c9      	b.n	8008c24 <_malloc_r+0x20>
 8008c90:	4622      	mov	r2, r4
 8008c92:	6864      	ldr	r4, [r4, #4]
 8008c94:	e7cc      	b.n	8008c30 <_malloc_r+0x2c>
 8008c96:	1cc4      	adds	r4, r0, #3
 8008c98:	f024 0403 	bic.w	r4, r4, #3
 8008c9c:	42a0      	cmp	r0, r4
 8008c9e:	d0e3      	beq.n	8008c68 <_malloc_r+0x64>
 8008ca0:	1a21      	subs	r1, r4, r0
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f000 f808 	bl	8008cb8 <_sbrk_r>
 8008ca8:	3001      	adds	r0, #1
 8008caa:	d1dd      	bne.n	8008c68 <_malloc_r+0x64>
 8008cac:	e7cf      	b.n	8008c4e <_malloc_r+0x4a>
 8008cae:	bf00      	nop
 8008cb0:	200000b4 	.word	0x200000b4
 8008cb4:	200000b8 	.word	0x200000b8

08008cb8 <_sbrk_r>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	4d06      	ldr	r5, [pc, #24]	; (8008cd4 <_sbrk_r+0x1c>)
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	4608      	mov	r0, r1
 8008cc2:	602b      	str	r3, [r5, #0]
 8008cc4:	f7f8 fce8 	bl	8001698 <_sbrk>
 8008cc8:	1c43      	adds	r3, r0, #1
 8008cca:	d102      	bne.n	8008cd2 <_sbrk_r+0x1a>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	b103      	cbz	r3, 8008cd2 <_sbrk_r+0x1a>
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	20000a30 	.word	0x20000a30

08008cd8 <__malloc_lock>:
 8008cd8:	4801      	ldr	r0, [pc, #4]	; (8008ce0 <__malloc_lock+0x8>)
 8008cda:	f000 b809 	b.w	8008cf0 <__retarget_lock_acquire_recursive>
 8008cde:	bf00      	nop
 8008ce0:	20000a38 	.word	0x20000a38

08008ce4 <__malloc_unlock>:
 8008ce4:	4801      	ldr	r0, [pc, #4]	; (8008cec <__malloc_unlock+0x8>)
 8008ce6:	f000 b804 	b.w	8008cf2 <__retarget_lock_release_recursive>
 8008cea:	bf00      	nop
 8008cec:	20000a38 	.word	0x20000a38

08008cf0 <__retarget_lock_acquire_recursive>:
 8008cf0:	4770      	bx	lr

08008cf2 <__retarget_lock_release_recursive>:
 8008cf2:	4770      	bx	lr
 8008cf4:	0000      	movs	r0, r0
	...

08008cf8 <sin>:
 8008cf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008cfa:	ec53 2b10 	vmov	r2, r3, d0
 8008cfe:	4826      	ldr	r0, [pc, #152]	; (8008d98 <sin+0xa0>)
 8008d00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008d04:	4281      	cmp	r1, r0
 8008d06:	dc07      	bgt.n	8008d18 <sin+0x20>
 8008d08:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008d90 <sin+0x98>
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	f000 fe5b 	bl	80099c8 <__kernel_sin>
 8008d12:	ec51 0b10 	vmov	r0, r1, d0
 8008d16:	e007      	b.n	8008d28 <sin+0x30>
 8008d18:	4820      	ldr	r0, [pc, #128]	; (8008d9c <sin+0xa4>)
 8008d1a:	4281      	cmp	r1, r0
 8008d1c:	dd09      	ble.n	8008d32 <sin+0x3a>
 8008d1e:	ee10 0a10 	vmov	r0, s0
 8008d22:	4619      	mov	r1, r3
 8008d24:	f7f7 fa54 	bl	80001d0 <__aeabi_dsub>
 8008d28:	ec41 0b10 	vmov	d0, r0, r1
 8008d2c:	b005      	add	sp, #20
 8008d2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d32:	4668      	mov	r0, sp
 8008d34:	f000 f834 	bl	8008da0 <__ieee754_rem_pio2>
 8008d38:	f000 0003 	and.w	r0, r0, #3
 8008d3c:	2801      	cmp	r0, #1
 8008d3e:	d008      	beq.n	8008d52 <sin+0x5a>
 8008d40:	2802      	cmp	r0, #2
 8008d42:	d00d      	beq.n	8008d60 <sin+0x68>
 8008d44:	b9d0      	cbnz	r0, 8008d7c <sin+0x84>
 8008d46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008d4a:	ed9d 0b00 	vldr	d0, [sp]
 8008d4e:	2001      	movs	r0, #1
 8008d50:	e7dd      	b.n	8008d0e <sin+0x16>
 8008d52:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008d56:	ed9d 0b00 	vldr	d0, [sp]
 8008d5a:	f000 fa2d 	bl	80091b8 <__kernel_cos>
 8008d5e:	e7d8      	b.n	8008d12 <sin+0x1a>
 8008d60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008d64:	ed9d 0b00 	vldr	d0, [sp]
 8008d68:	2001      	movs	r0, #1
 8008d6a:	f000 fe2d 	bl	80099c8 <__kernel_sin>
 8008d6e:	ec53 2b10 	vmov	r2, r3, d0
 8008d72:	ee10 0a10 	vmov	r0, s0
 8008d76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008d7a:	e7d5      	b.n	8008d28 <sin+0x30>
 8008d7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008d80:	ed9d 0b00 	vldr	d0, [sp]
 8008d84:	f000 fa18 	bl	80091b8 <__kernel_cos>
 8008d88:	e7f1      	b.n	8008d6e <sin+0x76>
 8008d8a:	bf00      	nop
 8008d8c:	f3af 8000 	nop.w
	...
 8008d98:	3fe921fb 	.word	0x3fe921fb
 8008d9c:	7fefffff 	.word	0x7fefffff

08008da0 <__ieee754_rem_pio2>:
 8008da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da4:	ed2d 8b02 	vpush	{d8}
 8008da8:	ec55 4b10 	vmov	r4, r5, d0
 8008dac:	4bca      	ldr	r3, [pc, #808]	; (80090d8 <__ieee754_rem_pio2+0x338>)
 8008dae:	b08b      	sub	sp, #44	; 0x2c
 8008db0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008db4:	4598      	cmp	r8, r3
 8008db6:	4682      	mov	sl, r0
 8008db8:	9502      	str	r5, [sp, #8]
 8008dba:	dc08      	bgt.n	8008dce <__ieee754_rem_pio2+0x2e>
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	ed80 0b00 	vstr	d0, [r0]
 8008dc4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008dc8:	f04f 0b00 	mov.w	fp, #0
 8008dcc:	e028      	b.n	8008e20 <__ieee754_rem_pio2+0x80>
 8008dce:	4bc3      	ldr	r3, [pc, #780]	; (80090dc <__ieee754_rem_pio2+0x33c>)
 8008dd0:	4598      	cmp	r8, r3
 8008dd2:	dc78      	bgt.n	8008ec6 <__ieee754_rem_pio2+0x126>
 8008dd4:	9b02      	ldr	r3, [sp, #8]
 8008dd6:	4ec2      	ldr	r6, [pc, #776]	; (80090e0 <__ieee754_rem_pio2+0x340>)
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	ee10 0a10 	vmov	r0, s0
 8008dde:	a3b0      	add	r3, pc, #704	; (adr r3, 80090a0 <__ieee754_rem_pio2+0x300>)
 8008de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de4:	4629      	mov	r1, r5
 8008de6:	dd39      	ble.n	8008e5c <__ieee754_rem_pio2+0xbc>
 8008de8:	f7f7 f9f2 	bl	80001d0 <__aeabi_dsub>
 8008dec:	45b0      	cmp	r8, r6
 8008dee:	4604      	mov	r4, r0
 8008df0:	460d      	mov	r5, r1
 8008df2:	d01b      	beq.n	8008e2c <__ieee754_rem_pio2+0x8c>
 8008df4:	a3ac      	add	r3, pc, #688	; (adr r3, 80090a8 <__ieee754_rem_pio2+0x308>)
 8008df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfa:	f7f7 f9e9 	bl	80001d0 <__aeabi_dsub>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	e9ca 2300 	strd	r2, r3, [sl]
 8008e06:	4620      	mov	r0, r4
 8008e08:	4629      	mov	r1, r5
 8008e0a:	f7f7 f9e1 	bl	80001d0 <__aeabi_dsub>
 8008e0e:	a3a6      	add	r3, pc, #664	; (adr r3, 80090a8 <__ieee754_rem_pio2+0x308>)
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	f7f7 f9dc 	bl	80001d0 <__aeabi_dsub>
 8008e18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008e1c:	f04f 0b01 	mov.w	fp, #1
 8008e20:	4658      	mov	r0, fp
 8008e22:	b00b      	add	sp, #44	; 0x2c
 8008e24:	ecbd 8b02 	vpop	{d8}
 8008e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e2c:	a3a0      	add	r3, pc, #640	; (adr r3, 80090b0 <__ieee754_rem_pio2+0x310>)
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	f7f7 f9cd 	bl	80001d0 <__aeabi_dsub>
 8008e36:	a3a0      	add	r3, pc, #640	; (adr r3, 80090b8 <__ieee754_rem_pio2+0x318>)
 8008e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	460d      	mov	r5, r1
 8008e40:	f7f7 f9c6 	bl	80001d0 <__aeabi_dsub>
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	e9ca 2300 	strd	r2, r3, [sl]
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	4629      	mov	r1, r5
 8008e50:	f7f7 f9be 	bl	80001d0 <__aeabi_dsub>
 8008e54:	a398      	add	r3, pc, #608	; (adr r3, 80090b8 <__ieee754_rem_pio2+0x318>)
 8008e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5a:	e7db      	b.n	8008e14 <__ieee754_rem_pio2+0x74>
 8008e5c:	f7f7 f9ba 	bl	80001d4 <__adddf3>
 8008e60:	45b0      	cmp	r8, r6
 8008e62:	4604      	mov	r4, r0
 8008e64:	460d      	mov	r5, r1
 8008e66:	d016      	beq.n	8008e96 <__ieee754_rem_pio2+0xf6>
 8008e68:	a38f      	add	r3, pc, #572	; (adr r3, 80090a8 <__ieee754_rem_pio2+0x308>)
 8008e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6e:	f7f7 f9b1 	bl	80001d4 <__adddf3>
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	e9ca 2300 	strd	r2, r3, [sl]
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	4629      	mov	r1, r5
 8008e7e:	f7f7 f9a7 	bl	80001d0 <__aeabi_dsub>
 8008e82:	a389      	add	r3, pc, #548	; (adr r3, 80090a8 <__ieee754_rem_pio2+0x308>)
 8008e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e88:	f7f7 f9a4 	bl	80001d4 <__adddf3>
 8008e8c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8008e90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008e94:	e7c4      	b.n	8008e20 <__ieee754_rem_pio2+0x80>
 8008e96:	a386      	add	r3, pc, #536	; (adr r3, 80090b0 <__ieee754_rem_pio2+0x310>)
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	f7f7 f99a 	bl	80001d4 <__adddf3>
 8008ea0:	a385      	add	r3, pc, #532	; (adr r3, 80090b8 <__ieee754_rem_pio2+0x318>)
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	460d      	mov	r5, r1
 8008eaa:	f7f7 f993 	bl	80001d4 <__adddf3>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	e9ca 2300 	strd	r2, r3, [sl]
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	4629      	mov	r1, r5
 8008eba:	f7f7 f989 	bl	80001d0 <__aeabi_dsub>
 8008ebe:	a37e      	add	r3, pc, #504	; (adr r3, 80090b8 <__ieee754_rem_pio2+0x318>)
 8008ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec4:	e7e0      	b.n	8008e88 <__ieee754_rem_pio2+0xe8>
 8008ec6:	4b87      	ldr	r3, [pc, #540]	; (80090e4 <__ieee754_rem_pio2+0x344>)
 8008ec8:	4598      	cmp	r8, r3
 8008eca:	f300 80d9 	bgt.w	8009080 <__ieee754_rem_pio2+0x2e0>
 8008ece:	f000 fe39 	bl	8009b44 <fabs>
 8008ed2:	ec55 4b10 	vmov	r4, r5, d0
 8008ed6:	ee10 0a10 	vmov	r0, s0
 8008eda:	a379      	add	r3, pc, #484	; (adr r3, 80090c0 <__ieee754_rem_pio2+0x320>)
 8008edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	f7f7 fb2d 	bl	8000540 <__aeabi_dmul>
 8008ee6:	4b80      	ldr	r3, [pc, #512]	; (80090e8 <__ieee754_rem_pio2+0x348>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f7f7 f973 	bl	80001d4 <__adddf3>
 8008eee:	f7f7 fdc1 	bl	8000a74 <__aeabi_d2iz>
 8008ef2:	4683      	mov	fp, r0
 8008ef4:	f7f7 faba 	bl	800046c <__aeabi_i2d>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	ec43 2b18 	vmov	d8, r2, r3
 8008f00:	a367      	add	r3, pc, #412	; (adr r3, 80090a0 <__ieee754_rem_pio2+0x300>)
 8008f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f06:	f7f7 fb1b 	bl	8000540 <__aeabi_dmul>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	4620      	mov	r0, r4
 8008f10:	4629      	mov	r1, r5
 8008f12:	f7f7 f95d 	bl	80001d0 <__aeabi_dsub>
 8008f16:	a364      	add	r3, pc, #400	; (adr r3, 80090a8 <__ieee754_rem_pio2+0x308>)
 8008f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	460f      	mov	r7, r1
 8008f20:	ec51 0b18 	vmov	r0, r1, d8
 8008f24:	f7f7 fb0c 	bl	8000540 <__aeabi_dmul>
 8008f28:	f1bb 0f1f 	cmp.w	fp, #31
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	460d      	mov	r5, r1
 8008f30:	dc0d      	bgt.n	8008f4e <__ieee754_rem_pio2+0x1ae>
 8008f32:	4b6e      	ldr	r3, [pc, #440]	; (80090ec <__ieee754_rem_pio2+0x34c>)
 8008f34:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8008f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f3c:	4543      	cmp	r3, r8
 8008f3e:	d006      	beq.n	8008f4e <__ieee754_rem_pio2+0x1ae>
 8008f40:	4622      	mov	r2, r4
 8008f42:	462b      	mov	r3, r5
 8008f44:	4630      	mov	r0, r6
 8008f46:	4639      	mov	r1, r7
 8008f48:	f7f7 f942 	bl	80001d0 <__aeabi_dsub>
 8008f4c:	e00f      	b.n	8008f6e <__ieee754_rem_pio2+0x1ce>
 8008f4e:	462b      	mov	r3, r5
 8008f50:	4622      	mov	r2, r4
 8008f52:	4630      	mov	r0, r6
 8008f54:	4639      	mov	r1, r7
 8008f56:	f7f7 f93b 	bl	80001d0 <__aeabi_dsub>
 8008f5a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008f5e:	9303      	str	r3, [sp, #12]
 8008f60:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008f64:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008f68:	f1b8 0f10 	cmp.w	r8, #16
 8008f6c:	dc02      	bgt.n	8008f74 <__ieee754_rem_pio2+0x1d4>
 8008f6e:	e9ca 0100 	strd	r0, r1, [sl]
 8008f72:	e039      	b.n	8008fe8 <__ieee754_rem_pio2+0x248>
 8008f74:	a34e      	add	r3, pc, #312	; (adr r3, 80090b0 <__ieee754_rem_pio2+0x310>)
 8008f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7a:	ec51 0b18 	vmov	r0, r1, d8
 8008f7e:	f7f7 fadf 	bl	8000540 <__aeabi_dmul>
 8008f82:	4604      	mov	r4, r0
 8008f84:	460d      	mov	r5, r1
 8008f86:	4602      	mov	r2, r0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	4639      	mov	r1, r7
 8008f8e:	f7f7 f91f 	bl	80001d0 <__aeabi_dsub>
 8008f92:	4602      	mov	r2, r0
 8008f94:	460b      	mov	r3, r1
 8008f96:	4680      	mov	r8, r0
 8008f98:	4689      	mov	r9, r1
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	4639      	mov	r1, r7
 8008f9e:	f7f7 f917 	bl	80001d0 <__aeabi_dsub>
 8008fa2:	4622      	mov	r2, r4
 8008fa4:	462b      	mov	r3, r5
 8008fa6:	f7f7 f913 	bl	80001d0 <__aeabi_dsub>
 8008faa:	a343      	add	r3, pc, #268	; (adr r3, 80090b8 <__ieee754_rem_pio2+0x318>)
 8008fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	460d      	mov	r5, r1
 8008fb4:	ec51 0b18 	vmov	r0, r1, d8
 8008fb8:	f7f7 fac2 	bl	8000540 <__aeabi_dmul>
 8008fbc:	4622      	mov	r2, r4
 8008fbe:	462b      	mov	r3, r5
 8008fc0:	f7f7 f906 	bl	80001d0 <__aeabi_dsub>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	4604      	mov	r4, r0
 8008fca:	460d      	mov	r5, r1
 8008fcc:	4640      	mov	r0, r8
 8008fce:	4649      	mov	r1, r9
 8008fd0:	f7f7 f8fe 	bl	80001d0 <__aeabi_dsub>
 8008fd4:	9a03      	ldr	r2, [sp, #12]
 8008fd6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	2b31      	cmp	r3, #49	; 0x31
 8008fde:	dc24      	bgt.n	800902a <__ieee754_rem_pio2+0x28a>
 8008fe0:	e9ca 0100 	strd	r0, r1, [sl]
 8008fe4:	4646      	mov	r6, r8
 8008fe6:	464f      	mov	r7, r9
 8008fe8:	e9da 8900 	ldrd	r8, r9, [sl]
 8008fec:	4630      	mov	r0, r6
 8008fee:	4642      	mov	r2, r8
 8008ff0:	464b      	mov	r3, r9
 8008ff2:	4639      	mov	r1, r7
 8008ff4:	f7f7 f8ec 	bl	80001d0 <__aeabi_dsub>
 8008ff8:	462b      	mov	r3, r5
 8008ffa:	4622      	mov	r2, r4
 8008ffc:	f7f7 f8e8 	bl	80001d0 <__aeabi_dsub>
 8009000:	9b02      	ldr	r3, [sp, #8]
 8009002:	2b00      	cmp	r3, #0
 8009004:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009008:	f6bf af0a 	bge.w	8008e20 <__ieee754_rem_pio2+0x80>
 800900c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009010:	f8ca 3004 	str.w	r3, [sl, #4]
 8009014:	f8ca 8000 	str.w	r8, [sl]
 8009018:	f8ca 0008 	str.w	r0, [sl, #8]
 800901c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009020:	f8ca 300c 	str.w	r3, [sl, #12]
 8009024:	f1cb 0b00 	rsb	fp, fp, #0
 8009028:	e6fa      	b.n	8008e20 <__ieee754_rem_pio2+0x80>
 800902a:	a327      	add	r3, pc, #156	; (adr r3, 80090c8 <__ieee754_rem_pio2+0x328>)
 800902c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009030:	ec51 0b18 	vmov	r0, r1, d8
 8009034:	f7f7 fa84 	bl	8000540 <__aeabi_dmul>
 8009038:	4604      	mov	r4, r0
 800903a:	460d      	mov	r5, r1
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	4640      	mov	r0, r8
 8009042:	4649      	mov	r1, r9
 8009044:	f7f7 f8c4 	bl	80001d0 <__aeabi_dsub>
 8009048:	4602      	mov	r2, r0
 800904a:	460b      	mov	r3, r1
 800904c:	4606      	mov	r6, r0
 800904e:	460f      	mov	r7, r1
 8009050:	4640      	mov	r0, r8
 8009052:	4649      	mov	r1, r9
 8009054:	f7f7 f8bc 	bl	80001d0 <__aeabi_dsub>
 8009058:	4622      	mov	r2, r4
 800905a:	462b      	mov	r3, r5
 800905c:	f7f7 f8b8 	bl	80001d0 <__aeabi_dsub>
 8009060:	a31b      	add	r3, pc, #108	; (adr r3, 80090d0 <__ieee754_rem_pio2+0x330>)
 8009062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009066:	4604      	mov	r4, r0
 8009068:	460d      	mov	r5, r1
 800906a:	ec51 0b18 	vmov	r0, r1, d8
 800906e:	f7f7 fa67 	bl	8000540 <__aeabi_dmul>
 8009072:	4622      	mov	r2, r4
 8009074:	462b      	mov	r3, r5
 8009076:	f7f7 f8ab 	bl	80001d0 <__aeabi_dsub>
 800907a:	4604      	mov	r4, r0
 800907c:	460d      	mov	r5, r1
 800907e:	e75f      	b.n	8008f40 <__ieee754_rem_pio2+0x1a0>
 8009080:	4b1b      	ldr	r3, [pc, #108]	; (80090f0 <__ieee754_rem_pio2+0x350>)
 8009082:	4598      	cmp	r8, r3
 8009084:	dd36      	ble.n	80090f4 <__ieee754_rem_pio2+0x354>
 8009086:	ee10 2a10 	vmov	r2, s0
 800908a:	462b      	mov	r3, r5
 800908c:	4620      	mov	r0, r4
 800908e:	4629      	mov	r1, r5
 8009090:	f7f7 f89e 	bl	80001d0 <__aeabi_dsub>
 8009094:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009098:	e9ca 0100 	strd	r0, r1, [sl]
 800909c:	e694      	b.n	8008dc8 <__ieee754_rem_pio2+0x28>
 800909e:	bf00      	nop
 80090a0:	54400000 	.word	0x54400000
 80090a4:	3ff921fb 	.word	0x3ff921fb
 80090a8:	1a626331 	.word	0x1a626331
 80090ac:	3dd0b461 	.word	0x3dd0b461
 80090b0:	1a600000 	.word	0x1a600000
 80090b4:	3dd0b461 	.word	0x3dd0b461
 80090b8:	2e037073 	.word	0x2e037073
 80090bc:	3ba3198a 	.word	0x3ba3198a
 80090c0:	6dc9c883 	.word	0x6dc9c883
 80090c4:	3fe45f30 	.word	0x3fe45f30
 80090c8:	2e000000 	.word	0x2e000000
 80090cc:	3ba3198a 	.word	0x3ba3198a
 80090d0:	252049c1 	.word	0x252049c1
 80090d4:	397b839a 	.word	0x397b839a
 80090d8:	3fe921fb 	.word	0x3fe921fb
 80090dc:	4002d97b 	.word	0x4002d97b
 80090e0:	3ff921fb 	.word	0x3ff921fb
 80090e4:	413921fb 	.word	0x413921fb
 80090e8:	3fe00000 	.word	0x3fe00000
 80090ec:	08009d9c 	.word	0x08009d9c
 80090f0:	7fefffff 	.word	0x7fefffff
 80090f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80090f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80090fc:	ee10 0a10 	vmov	r0, s0
 8009100:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009104:	ee10 6a10 	vmov	r6, s0
 8009108:	460f      	mov	r7, r1
 800910a:	f7f7 fcb3 	bl	8000a74 <__aeabi_d2iz>
 800910e:	f7f7 f9ad 	bl	800046c <__aeabi_i2d>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	4630      	mov	r0, r6
 8009118:	4639      	mov	r1, r7
 800911a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800911e:	f7f7 f857 	bl	80001d0 <__aeabi_dsub>
 8009122:	4b22      	ldr	r3, [pc, #136]	; (80091ac <__ieee754_rem_pio2+0x40c>)
 8009124:	2200      	movs	r2, #0
 8009126:	f7f7 fa0b 	bl	8000540 <__aeabi_dmul>
 800912a:	460f      	mov	r7, r1
 800912c:	4606      	mov	r6, r0
 800912e:	f7f7 fca1 	bl	8000a74 <__aeabi_d2iz>
 8009132:	f7f7 f99b 	bl	800046c <__aeabi_i2d>
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	4630      	mov	r0, r6
 800913c:	4639      	mov	r1, r7
 800913e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009142:	f7f7 f845 	bl	80001d0 <__aeabi_dsub>
 8009146:	4b19      	ldr	r3, [pc, #100]	; (80091ac <__ieee754_rem_pio2+0x40c>)
 8009148:	2200      	movs	r2, #0
 800914a:	f7f7 f9f9 	bl	8000540 <__aeabi_dmul>
 800914e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009152:	ad04      	add	r5, sp, #16
 8009154:	f04f 0803 	mov.w	r8, #3
 8009158:	46a9      	mov	r9, r5
 800915a:	2600      	movs	r6, #0
 800915c:	2700      	movs	r7, #0
 800915e:	4632      	mov	r2, r6
 8009160:	463b      	mov	r3, r7
 8009162:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009166:	46c3      	mov	fp, r8
 8009168:	3d08      	subs	r5, #8
 800916a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800916e:	f7f7 fc4f 	bl	8000a10 <__aeabi_dcmpeq>
 8009172:	2800      	cmp	r0, #0
 8009174:	d1f3      	bne.n	800915e <__ieee754_rem_pio2+0x3be>
 8009176:	4b0e      	ldr	r3, [pc, #56]	; (80091b0 <__ieee754_rem_pio2+0x410>)
 8009178:	9301      	str	r3, [sp, #4]
 800917a:	2302      	movs	r3, #2
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	4622      	mov	r2, r4
 8009180:	465b      	mov	r3, fp
 8009182:	4651      	mov	r1, sl
 8009184:	4648      	mov	r0, r9
 8009186:	f000 f8df 	bl	8009348 <__kernel_rem_pio2>
 800918a:	9b02      	ldr	r3, [sp, #8]
 800918c:	2b00      	cmp	r3, #0
 800918e:	4683      	mov	fp, r0
 8009190:	f6bf ae46 	bge.w	8008e20 <__ieee754_rem_pio2+0x80>
 8009194:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009198:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800919c:	f8ca 3004 	str.w	r3, [sl, #4]
 80091a0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80091a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80091a8:	e73a      	b.n	8009020 <__ieee754_rem_pio2+0x280>
 80091aa:	bf00      	nop
 80091ac:	41700000 	.word	0x41700000
 80091b0:	08009e1c 	.word	0x08009e1c
 80091b4:	00000000 	.word	0x00000000

080091b8 <__kernel_cos>:
 80091b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091bc:	ec57 6b10 	vmov	r6, r7, d0
 80091c0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80091c4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80091c8:	ed8d 1b00 	vstr	d1, [sp]
 80091cc:	da07      	bge.n	80091de <__kernel_cos+0x26>
 80091ce:	ee10 0a10 	vmov	r0, s0
 80091d2:	4639      	mov	r1, r7
 80091d4:	f7f7 fc4e 	bl	8000a74 <__aeabi_d2iz>
 80091d8:	2800      	cmp	r0, #0
 80091da:	f000 8088 	beq.w	80092ee <__kernel_cos+0x136>
 80091de:	4632      	mov	r2, r6
 80091e0:	463b      	mov	r3, r7
 80091e2:	4630      	mov	r0, r6
 80091e4:	4639      	mov	r1, r7
 80091e6:	f7f7 f9ab 	bl	8000540 <__aeabi_dmul>
 80091ea:	4b51      	ldr	r3, [pc, #324]	; (8009330 <__kernel_cos+0x178>)
 80091ec:	2200      	movs	r2, #0
 80091ee:	4604      	mov	r4, r0
 80091f0:	460d      	mov	r5, r1
 80091f2:	f7f7 f9a5 	bl	8000540 <__aeabi_dmul>
 80091f6:	a340      	add	r3, pc, #256	; (adr r3, 80092f8 <__kernel_cos+0x140>)
 80091f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fc:	4682      	mov	sl, r0
 80091fe:	468b      	mov	fp, r1
 8009200:	4620      	mov	r0, r4
 8009202:	4629      	mov	r1, r5
 8009204:	f7f7 f99c 	bl	8000540 <__aeabi_dmul>
 8009208:	a33d      	add	r3, pc, #244	; (adr r3, 8009300 <__kernel_cos+0x148>)
 800920a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920e:	f7f6 ffe1 	bl	80001d4 <__adddf3>
 8009212:	4622      	mov	r2, r4
 8009214:	462b      	mov	r3, r5
 8009216:	f7f7 f993 	bl	8000540 <__aeabi_dmul>
 800921a:	a33b      	add	r3, pc, #236	; (adr r3, 8009308 <__kernel_cos+0x150>)
 800921c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009220:	f7f6 ffd6 	bl	80001d0 <__aeabi_dsub>
 8009224:	4622      	mov	r2, r4
 8009226:	462b      	mov	r3, r5
 8009228:	f7f7 f98a 	bl	8000540 <__aeabi_dmul>
 800922c:	a338      	add	r3, pc, #224	; (adr r3, 8009310 <__kernel_cos+0x158>)
 800922e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009232:	f7f6 ffcf 	bl	80001d4 <__adddf3>
 8009236:	4622      	mov	r2, r4
 8009238:	462b      	mov	r3, r5
 800923a:	f7f7 f981 	bl	8000540 <__aeabi_dmul>
 800923e:	a336      	add	r3, pc, #216	; (adr r3, 8009318 <__kernel_cos+0x160>)
 8009240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009244:	f7f6 ffc4 	bl	80001d0 <__aeabi_dsub>
 8009248:	4622      	mov	r2, r4
 800924a:	462b      	mov	r3, r5
 800924c:	f7f7 f978 	bl	8000540 <__aeabi_dmul>
 8009250:	a333      	add	r3, pc, #204	; (adr r3, 8009320 <__kernel_cos+0x168>)
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	f7f6 ffbd 	bl	80001d4 <__adddf3>
 800925a:	4622      	mov	r2, r4
 800925c:	462b      	mov	r3, r5
 800925e:	f7f7 f96f 	bl	8000540 <__aeabi_dmul>
 8009262:	4622      	mov	r2, r4
 8009264:	462b      	mov	r3, r5
 8009266:	f7f7 f96b 	bl	8000540 <__aeabi_dmul>
 800926a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800926e:	4604      	mov	r4, r0
 8009270:	460d      	mov	r5, r1
 8009272:	4630      	mov	r0, r6
 8009274:	4639      	mov	r1, r7
 8009276:	f7f7 f963 	bl	8000540 <__aeabi_dmul>
 800927a:	460b      	mov	r3, r1
 800927c:	4602      	mov	r2, r0
 800927e:	4629      	mov	r1, r5
 8009280:	4620      	mov	r0, r4
 8009282:	f7f6 ffa5 	bl	80001d0 <__aeabi_dsub>
 8009286:	4b2b      	ldr	r3, [pc, #172]	; (8009334 <__kernel_cos+0x17c>)
 8009288:	4598      	cmp	r8, r3
 800928a:	4606      	mov	r6, r0
 800928c:	460f      	mov	r7, r1
 800928e:	dc10      	bgt.n	80092b2 <__kernel_cos+0xfa>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4650      	mov	r0, sl
 8009296:	4659      	mov	r1, fp
 8009298:	f7f6 ff9a 	bl	80001d0 <__aeabi_dsub>
 800929c:	460b      	mov	r3, r1
 800929e:	4926      	ldr	r1, [pc, #152]	; (8009338 <__kernel_cos+0x180>)
 80092a0:	4602      	mov	r2, r0
 80092a2:	2000      	movs	r0, #0
 80092a4:	f7f6 ff94 	bl	80001d0 <__aeabi_dsub>
 80092a8:	ec41 0b10 	vmov	d0, r0, r1
 80092ac:	b003      	add	sp, #12
 80092ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b2:	4b22      	ldr	r3, [pc, #136]	; (800933c <__kernel_cos+0x184>)
 80092b4:	4920      	ldr	r1, [pc, #128]	; (8009338 <__kernel_cos+0x180>)
 80092b6:	4598      	cmp	r8, r3
 80092b8:	bfcc      	ite	gt
 80092ba:	4d21      	ldrgt	r5, [pc, #132]	; (8009340 <__kernel_cos+0x188>)
 80092bc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80092c0:	2400      	movs	r4, #0
 80092c2:	4622      	mov	r2, r4
 80092c4:	462b      	mov	r3, r5
 80092c6:	2000      	movs	r0, #0
 80092c8:	f7f6 ff82 	bl	80001d0 <__aeabi_dsub>
 80092cc:	4622      	mov	r2, r4
 80092ce:	4680      	mov	r8, r0
 80092d0:	4689      	mov	r9, r1
 80092d2:	462b      	mov	r3, r5
 80092d4:	4650      	mov	r0, sl
 80092d6:	4659      	mov	r1, fp
 80092d8:	f7f6 ff7a 	bl	80001d0 <__aeabi_dsub>
 80092dc:	4632      	mov	r2, r6
 80092de:	463b      	mov	r3, r7
 80092e0:	f7f6 ff76 	bl	80001d0 <__aeabi_dsub>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	4640      	mov	r0, r8
 80092ea:	4649      	mov	r1, r9
 80092ec:	e7da      	b.n	80092a4 <__kernel_cos+0xec>
 80092ee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009328 <__kernel_cos+0x170>
 80092f2:	e7db      	b.n	80092ac <__kernel_cos+0xf4>
 80092f4:	f3af 8000 	nop.w
 80092f8:	be8838d4 	.word	0xbe8838d4
 80092fc:	bda8fae9 	.word	0xbda8fae9
 8009300:	bdb4b1c4 	.word	0xbdb4b1c4
 8009304:	3e21ee9e 	.word	0x3e21ee9e
 8009308:	809c52ad 	.word	0x809c52ad
 800930c:	3e927e4f 	.word	0x3e927e4f
 8009310:	19cb1590 	.word	0x19cb1590
 8009314:	3efa01a0 	.word	0x3efa01a0
 8009318:	16c15177 	.word	0x16c15177
 800931c:	3f56c16c 	.word	0x3f56c16c
 8009320:	5555554c 	.word	0x5555554c
 8009324:	3fa55555 	.word	0x3fa55555
 8009328:	00000000 	.word	0x00000000
 800932c:	3ff00000 	.word	0x3ff00000
 8009330:	3fe00000 	.word	0x3fe00000
 8009334:	3fd33332 	.word	0x3fd33332
 8009338:	3ff00000 	.word	0x3ff00000
 800933c:	3fe90000 	.word	0x3fe90000
 8009340:	3fd20000 	.word	0x3fd20000
 8009344:	00000000 	.word	0x00000000

08009348 <__kernel_rem_pio2>:
 8009348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934c:	ed2d 8b02 	vpush	{d8}
 8009350:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009354:	f112 0f14 	cmn.w	r2, #20
 8009358:	9308      	str	r3, [sp, #32]
 800935a:	9101      	str	r1, [sp, #4]
 800935c:	4bc6      	ldr	r3, [pc, #792]	; (8009678 <__kernel_rem_pio2+0x330>)
 800935e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8009360:	9009      	str	r0, [sp, #36]	; 0x24
 8009362:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009366:	9304      	str	r3, [sp, #16]
 8009368:	9b08      	ldr	r3, [sp, #32]
 800936a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800936e:	bfa8      	it	ge
 8009370:	1ed4      	subge	r4, r2, #3
 8009372:	9306      	str	r3, [sp, #24]
 8009374:	bfb2      	itee	lt
 8009376:	2400      	movlt	r4, #0
 8009378:	2318      	movge	r3, #24
 800937a:	fb94 f4f3 	sdivge	r4, r4, r3
 800937e:	f06f 0317 	mvn.w	r3, #23
 8009382:	fb04 3303 	mla	r3, r4, r3, r3
 8009386:	eb03 0a02 	add.w	sl, r3, r2
 800938a:	9b04      	ldr	r3, [sp, #16]
 800938c:	9a06      	ldr	r2, [sp, #24]
 800938e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009668 <__kernel_rem_pio2+0x320>
 8009392:	eb03 0802 	add.w	r8, r3, r2
 8009396:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009398:	1aa7      	subs	r7, r4, r2
 800939a:	ae20      	add	r6, sp, #128	; 0x80
 800939c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80093a0:	2500      	movs	r5, #0
 80093a2:	4545      	cmp	r5, r8
 80093a4:	dd18      	ble.n	80093d8 <__kernel_rem_pio2+0x90>
 80093a6:	9b08      	ldr	r3, [sp, #32]
 80093a8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80093ac:	aa20      	add	r2, sp, #128	; 0x80
 80093ae:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009668 <__kernel_rem_pio2+0x320>
 80093b2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80093b6:	f1c3 0301 	rsb	r3, r3, #1
 80093ba:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80093be:	9307      	str	r3, [sp, #28]
 80093c0:	9b07      	ldr	r3, [sp, #28]
 80093c2:	9a04      	ldr	r2, [sp, #16]
 80093c4:	4443      	add	r3, r8
 80093c6:	429a      	cmp	r2, r3
 80093c8:	db2f      	blt.n	800942a <__kernel_rem_pio2+0xe2>
 80093ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80093ce:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80093d2:	462f      	mov	r7, r5
 80093d4:	2600      	movs	r6, #0
 80093d6:	e01b      	b.n	8009410 <__kernel_rem_pio2+0xc8>
 80093d8:	42ef      	cmn	r7, r5
 80093da:	d407      	bmi.n	80093ec <__kernel_rem_pio2+0xa4>
 80093dc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80093e0:	f7f7 f844 	bl	800046c <__aeabi_i2d>
 80093e4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80093e8:	3501      	adds	r5, #1
 80093ea:	e7da      	b.n	80093a2 <__kernel_rem_pio2+0x5a>
 80093ec:	ec51 0b18 	vmov	r0, r1, d8
 80093f0:	e7f8      	b.n	80093e4 <__kernel_rem_pio2+0x9c>
 80093f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093f6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80093fa:	f7f7 f8a1 	bl	8000540 <__aeabi_dmul>
 80093fe:	4602      	mov	r2, r0
 8009400:	460b      	mov	r3, r1
 8009402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009406:	f7f6 fee5 	bl	80001d4 <__adddf3>
 800940a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800940e:	3601      	adds	r6, #1
 8009410:	9b06      	ldr	r3, [sp, #24]
 8009412:	429e      	cmp	r6, r3
 8009414:	f1a7 0708 	sub.w	r7, r7, #8
 8009418:	ddeb      	ble.n	80093f2 <__kernel_rem_pio2+0xaa>
 800941a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800941e:	3508      	adds	r5, #8
 8009420:	ecab 7b02 	vstmia	fp!, {d7}
 8009424:	f108 0801 	add.w	r8, r8, #1
 8009428:	e7ca      	b.n	80093c0 <__kernel_rem_pio2+0x78>
 800942a:	9b04      	ldr	r3, [sp, #16]
 800942c:	aa0c      	add	r2, sp, #48	; 0x30
 800942e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009432:	930b      	str	r3, [sp, #44]	; 0x2c
 8009434:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009436:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800943a:	9c04      	ldr	r4, [sp, #16]
 800943c:	930a      	str	r3, [sp, #40]	; 0x28
 800943e:	ab98      	add	r3, sp, #608	; 0x260
 8009440:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009444:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009448:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800944c:	f8cd b008 	str.w	fp, [sp, #8]
 8009450:	4625      	mov	r5, r4
 8009452:	2d00      	cmp	r5, #0
 8009454:	dc78      	bgt.n	8009548 <__kernel_rem_pio2+0x200>
 8009456:	ec47 6b10 	vmov	d0, r6, r7
 800945a:	4650      	mov	r0, sl
 800945c:	f000 fbfc 	bl	8009c58 <scalbn>
 8009460:	ec57 6b10 	vmov	r6, r7, d0
 8009464:	2200      	movs	r2, #0
 8009466:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800946a:	ee10 0a10 	vmov	r0, s0
 800946e:	4639      	mov	r1, r7
 8009470:	f7f7 f866 	bl	8000540 <__aeabi_dmul>
 8009474:	ec41 0b10 	vmov	d0, r0, r1
 8009478:	f000 fb6e 	bl	8009b58 <floor>
 800947c:	4b7f      	ldr	r3, [pc, #508]	; (800967c <__kernel_rem_pio2+0x334>)
 800947e:	ec51 0b10 	vmov	r0, r1, d0
 8009482:	2200      	movs	r2, #0
 8009484:	f7f7 f85c 	bl	8000540 <__aeabi_dmul>
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	4630      	mov	r0, r6
 800948e:	4639      	mov	r1, r7
 8009490:	f7f6 fe9e 	bl	80001d0 <__aeabi_dsub>
 8009494:	460f      	mov	r7, r1
 8009496:	4606      	mov	r6, r0
 8009498:	f7f7 faec 	bl	8000a74 <__aeabi_d2iz>
 800949c:	9007      	str	r0, [sp, #28]
 800949e:	f7f6 ffe5 	bl	800046c <__aeabi_i2d>
 80094a2:	4602      	mov	r2, r0
 80094a4:	460b      	mov	r3, r1
 80094a6:	4630      	mov	r0, r6
 80094a8:	4639      	mov	r1, r7
 80094aa:	f7f6 fe91 	bl	80001d0 <__aeabi_dsub>
 80094ae:	f1ba 0f00 	cmp.w	sl, #0
 80094b2:	4606      	mov	r6, r0
 80094b4:	460f      	mov	r7, r1
 80094b6:	dd70      	ble.n	800959a <__kernel_rem_pio2+0x252>
 80094b8:	1e62      	subs	r2, r4, #1
 80094ba:	ab0c      	add	r3, sp, #48	; 0x30
 80094bc:	9d07      	ldr	r5, [sp, #28]
 80094be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80094c2:	f1ca 0118 	rsb	r1, sl, #24
 80094c6:	fa40 f301 	asr.w	r3, r0, r1
 80094ca:	441d      	add	r5, r3
 80094cc:	408b      	lsls	r3, r1
 80094ce:	1ac0      	subs	r0, r0, r3
 80094d0:	ab0c      	add	r3, sp, #48	; 0x30
 80094d2:	9507      	str	r5, [sp, #28]
 80094d4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80094d8:	f1ca 0317 	rsb	r3, sl, #23
 80094dc:	fa40 f303 	asr.w	r3, r0, r3
 80094e0:	9302      	str	r3, [sp, #8]
 80094e2:	9b02      	ldr	r3, [sp, #8]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	dd66      	ble.n	80095b6 <__kernel_rem_pio2+0x26e>
 80094e8:	9b07      	ldr	r3, [sp, #28]
 80094ea:	2200      	movs	r2, #0
 80094ec:	3301      	adds	r3, #1
 80094ee:	9307      	str	r3, [sp, #28]
 80094f0:	4615      	mov	r5, r2
 80094f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80094f6:	4294      	cmp	r4, r2
 80094f8:	f300 8099 	bgt.w	800962e <__kernel_rem_pio2+0x2e6>
 80094fc:	f1ba 0f00 	cmp.w	sl, #0
 8009500:	dd07      	ble.n	8009512 <__kernel_rem_pio2+0x1ca>
 8009502:	f1ba 0f01 	cmp.w	sl, #1
 8009506:	f000 80a5 	beq.w	8009654 <__kernel_rem_pio2+0x30c>
 800950a:	f1ba 0f02 	cmp.w	sl, #2
 800950e:	f000 80c1 	beq.w	8009694 <__kernel_rem_pio2+0x34c>
 8009512:	9b02      	ldr	r3, [sp, #8]
 8009514:	2b02      	cmp	r3, #2
 8009516:	d14e      	bne.n	80095b6 <__kernel_rem_pio2+0x26e>
 8009518:	4632      	mov	r2, r6
 800951a:	463b      	mov	r3, r7
 800951c:	4958      	ldr	r1, [pc, #352]	; (8009680 <__kernel_rem_pio2+0x338>)
 800951e:	2000      	movs	r0, #0
 8009520:	f7f6 fe56 	bl	80001d0 <__aeabi_dsub>
 8009524:	4606      	mov	r6, r0
 8009526:	460f      	mov	r7, r1
 8009528:	2d00      	cmp	r5, #0
 800952a:	d044      	beq.n	80095b6 <__kernel_rem_pio2+0x26e>
 800952c:	4650      	mov	r0, sl
 800952e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009670 <__kernel_rem_pio2+0x328>
 8009532:	f000 fb91 	bl	8009c58 <scalbn>
 8009536:	4630      	mov	r0, r6
 8009538:	4639      	mov	r1, r7
 800953a:	ec53 2b10 	vmov	r2, r3, d0
 800953e:	f7f6 fe47 	bl	80001d0 <__aeabi_dsub>
 8009542:	4606      	mov	r6, r0
 8009544:	460f      	mov	r7, r1
 8009546:	e036      	b.n	80095b6 <__kernel_rem_pio2+0x26e>
 8009548:	4b4e      	ldr	r3, [pc, #312]	; (8009684 <__kernel_rem_pio2+0x33c>)
 800954a:	2200      	movs	r2, #0
 800954c:	4630      	mov	r0, r6
 800954e:	4639      	mov	r1, r7
 8009550:	f7f6 fff6 	bl	8000540 <__aeabi_dmul>
 8009554:	f7f7 fa8e 	bl	8000a74 <__aeabi_d2iz>
 8009558:	f7f6 ff88 	bl	800046c <__aeabi_i2d>
 800955c:	4b4a      	ldr	r3, [pc, #296]	; (8009688 <__kernel_rem_pio2+0x340>)
 800955e:	2200      	movs	r2, #0
 8009560:	4680      	mov	r8, r0
 8009562:	4689      	mov	r9, r1
 8009564:	f7f6 ffec 	bl	8000540 <__aeabi_dmul>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4630      	mov	r0, r6
 800956e:	4639      	mov	r1, r7
 8009570:	f7f6 fe2e 	bl	80001d0 <__aeabi_dsub>
 8009574:	f7f7 fa7e 	bl	8000a74 <__aeabi_d2iz>
 8009578:	9b02      	ldr	r3, [sp, #8]
 800957a:	f843 0b04 	str.w	r0, [r3], #4
 800957e:	3d01      	subs	r5, #1
 8009580:	9302      	str	r3, [sp, #8]
 8009582:	ab70      	add	r3, sp, #448	; 0x1c0
 8009584:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958c:	4640      	mov	r0, r8
 800958e:	4649      	mov	r1, r9
 8009590:	f7f6 fe20 	bl	80001d4 <__adddf3>
 8009594:	4606      	mov	r6, r0
 8009596:	460f      	mov	r7, r1
 8009598:	e75b      	b.n	8009452 <__kernel_rem_pio2+0x10a>
 800959a:	d105      	bne.n	80095a8 <__kernel_rem_pio2+0x260>
 800959c:	1e63      	subs	r3, r4, #1
 800959e:	aa0c      	add	r2, sp, #48	; 0x30
 80095a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80095a4:	15c3      	asrs	r3, r0, #23
 80095a6:	e79b      	b.n	80094e0 <__kernel_rem_pio2+0x198>
 80095a8:	4b38      	ldr	r3, [pc, #224]	; (800968c <__kernel_rem_pio2+0x344>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	f7f7 fa4e 	bl	8000a4c <__aeabi_dcmpge>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d139      	bne.n	8009628 <__kernel_rem_pio2+0x2e0>
 80095b4:	9002      	str	r0, [sp, #8]
 80095b6:	2200      	movs	r2, #0
 80095b8:	2300      	movs	r3, #0
 80095ba:	4630      	mov	r0, r6
 80095bc:	4639      	mov	r1, r7
 80095be:	f7f7 fa27 	bl	8000a10 <__aeabi_dcmpeq>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	f000 80b4 	beq.w	8009730 <__kernel_rem_pio2+0x3e8>
 80095c8:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 80095cc:	465b      	mov	r3, fp
 80095ce:	2200      	movs	r2, #0
 80095d0:	9904      	ldr	r1, [sp, #16]
 80095d2:	428b      	cmp	r3, r1
 80095d4:	da65      	bge.n	80096a2 <__kernel_rem_pio2+0x35a>
 80095d6:	2a00      	cmp	r2, #0
 80095d8:	d07b      	beq.n	80096d2 <__kernel_rem_pio2+0x38a>
 80095da:	ab0c      	add	r3, sp, #48	; 0x30
 80095dc:	f1aa 0a18 	sub.w	sl, sl, #24
 80095e0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 80a0 	beq.w	800972a <__kernel_rem_pio2+0x3e2>
 80095ea:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009670 <__kernel_rem_pio2+0x328>
 80095ee:	4650      	mov	r0, sl
 80095f0:	f000 fb32 	bl	8009c58 <scalbn>
 80095f4:	4f23      	ldr	r7, [pc, #140]	; (8009684 <__kernel_rem_pio2+0x33c>)
 80095f6:	ec55 4b10 	vmov	r4, r5, d0
 80095fa:	46d8      	mov	r8, fp
 80095fc:	2600      	movs	r6, #0
 80095fe:	f1b8 0f00 	cmp.w	r8, #0
 8009602:	f280 80cf 	bge.w	80097a4 <__kernel_rem_pio2+0x45c>
 8009606:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8009668 <__kernel_rem_pio2+0x320>
 800960a:	465f      	mov	r7, fp
 800960c:	f04f 0800 	mov.w	r8, #0
 8009610:	2f00      	cmp	r7, #0
 8009612:	f2c0 80fd 	blt.w	8009810 <__kernel_rem_pio2+0x4c8>
 8009616:	ab70      	add	r3, sp, #448	; 0x1c0
 8009618:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009690 <__kernel_rem_pio2+0x348>
 800961c:	ec55 4b18 	vmov	r4, r5, d8
 8009620:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8009624:	2600      	movs	r6, #0
 8009626:	e0e5      	b.n	80097f4 <__kernel_rem_pio2+0x4ac>
 8009628:	2302      	movs	r3, #2
 800962a:	9302      	str	r3, [sp, #8]
 800962c:	e75c      	b.n	80094e8 <__kernel_rem_pio2+0x1a0>
 800962e:	f8db 3000 	ldr.w	r3, [fp]
 8009632:	b955      	cbnz	r5, 800964a <__kernel_rem_pio2+0x302>
 8009634:	b123      	cbz	r3, 8009640 <__kernel_rem_pio2+0x2f8>
 8009636:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800963a:	f8cb 3000 	str.w	r3, [fp]
 800963e:	2301      	movs	r3, #1
 8009640:	3201      	adds	r2, #1
 8009642:	f10b 0b04 	add.w	fp, fp, #4
 8009646:	461d      	mov	r5, r3
 8009648:	e755      	b.n	80094f6 <__kernel_rem_pio2+0x1ae>
 800964a:	1acb      	subs	r3, r1, r3
 800964c:	f8cb 3000 	str.w	r3, [fp]
 8009650:	462b      	mov	r3, r5
 8009652:	e7f5      	b.n	8009640 <__kernel_rem_pio2+0x2f8>
 8009654:	1e62      	subs	r2, r4, #1
 8009656:	ab0c      	add	r3, sp, #48	; 0x30
 8009658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800965c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009660:	a90c      	add	r1, sp, #48	; 0x30
 8009662:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009666:	e754      	b.n	8009512 <__kernel_rem_pio2+0x1ca>
	...
 8009674:	3ff00000 	.word	0x3ff00000
 8009678:	08009f68 	.word	0x08009f68
 800967c:	40200000 	.word	0x40200000
 8009680:	3ff00000 	.word	0x3ff00000
 8009684:	3e700000 	.word	0x3e700000
 8009688:	41700000 	.word	0x41700000
 800968c:	3fe00000 	.word	0x3fe00000
 8009690:	08009f28 	.word	0x08009f28
 8009694:	1e62      	subs	r2, r4, #1
 8009696:	ab0c      	add	r3, sp, #48	; 0x30
 8009698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800969c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80096a0:	e7de      	b.n	8009660 <__kernel_rem_pio2+0x318>
 80096a2:	a90c      	add	r1, sp, #48	; 0x30
 80096a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80096a8:	3b01      	subs	r3, #1
 80096aa:	430a      	orrs	r2, r1
 80096ac:	e790      	b.n	80095d0 <__kernel_rem_pio2+0x288>
 80096ae:	3301      	adds	r3, #1
 80096b0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80096b4:	2900      	cmp	r1, #0
 80096b6:	d0fa      	beq.n	80096ae <__kernel_rem_pio2+0x366>
 80096b8:	9a08      	ldr	r2, [sp, #32]
 80096ba:	18e3      	adds	r3, r4, r3
 80096bc:	18a6      	adds	r6, r4, r2
 80096be:	aa20      	add	r2, sp, #128	; 0x80
 80096c0:	1c65      	adds	r5, r4, #1
 80096c2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80096c6:	9302      	str	r3, [sp, #8]
 80096c8:	9b02      	ldr	r3, [sp, #8]
 80096ca:	42ab      	cmp	r3, r5
 80096cc:	da04      	bge.n	80096d8 <__kernel_rem_pio2+0x390>
 80096ce:	461c      	mov	r4, r3
 80096d0:	e6b5      	b.n	800943e <__kernel_rem_pio2+0xf6>
 80096d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096d4:	2301      	movs	r3, #1
 80096d6:	e7eb      	b.n	80096b0 <__kernel_rem_pio2+0x368>
 80096d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096de:	f7f6 fec5 	bl	800046c <__aeabi_i2d>
 80096e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80096e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e8:	46b3      	mov	fp, r6
 80096ea:	461c      	mov	r4, r3
 80096ec:	2700      	movs	r7, #0
 80096ee:	f04f 0800 	mov.w	r8, #0
 80096f2:	f04f 0900 	mov.w	r9, #0
 80096f6:	9b06      	ldr	r3, [sp, #24]
 80096f8:	429f      	cmp	r7, r3
 80096fa:	dd06      	ble.n	800970a <__kernel_rem_pio2+0x3c2>
 80096fc:	ab70      	add	r3, sp, #448	; 0x1c0
 80096fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009702:	e9c3 8900 	strd	r8, r9, [r3]
 8009706:	3501      	adds	r5, #1
 8009708:	e7de      	b.n	80096c8 <__kernel_rem_pio2+0x380>
 800970a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800970e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009712:	f7f6 ff15 	bl	8000540 <__aeabi_dmul>
 8009716:	4602      	mov	r2, r0
 8009718:	460b      	mov	r3, r1
 800971a:	4640      	mov	r0, r8
 800971c:	4649      	mov	r1, r9
 800971e:	f7f6 fd59 	bl	80001d4 <__adddf3>
 8009722:	3701      	adds	r7, #1
 8009724:	4680      	mov	r8, r0
 8009726:	4689      	mov	r9, r1
 8009728:	e7e5      	b.n	80096f6 <__kernel_rem_pio2+0x3ae>
 800972a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800972e:	e754      	b.n	80095da <__kernel_rem_pio2+0x292>
 8009730:	ec47 6b10 	vmov	d0, r6, r7
 8009734:	f1ca 0000 	rsb	r0, sl, #0
 8009738:	f000 fa8e 	bl	8009c58 <scalbn>
 800973c:	ec57 6b10 	vmov	r6, r7, d0
 8009740:	4b9f      	ldr	r3, [pc, #636]	; (80099c0 <__kernel_rem_pio2+0x678>)
 8009742:	ee10 0a10 	vmov	r0, s0
 8009746:	2200      	movs	r2, #0
 8009748:	4639      	mov	r1, r7
 800974a:	f7f7 f97f 	bl	8000a4c <__aeabi_dcmpge>
 800974e:	b300      	cbz	r0, 8009792 <__kernel_rem_pio2+0x44a>
 8009750:	4b9c      	ldr	r3, [pc, #624]	; (80099c4 <__kernel_rem_pio2+0x67c>)
 8009752:	2200      	movs	r2, #0
 8009754:	4630      	mov	r0, r6
 8009756:	4639      	mov	r1, r7
 8009758:	f7f6 fef2 	bl	8000540 <__aeabi_dmul>
 800975c:	f7f7 f98a 	bl	8000a74 <__aeabi_d2iz>
 8009760:	4605      	mov	r5, r0
 8009762:	f7f6 fe83 	bl	800046c <__aeabi_i2d>
 8009766:	4b96      	ldr	r3, [pc, #600]	; (80099c0 <__kernel_rem_pio2+0x678>)
 8009768:	2200      	movs	r2, #0
 800976a:	f7f6 fee9 	bl	8000540 <__aeabi_dmul>
 800976e:	460b      	mov	r3, r1
 8009770:	4602      	mov	r2, r0
 8009772:	4639      	mov	r1, r7
 8009774:	4630      	mov	r0, r6
 8009776:	f7f6 fd2b 	bl	80001d0 <__aeabi_dsub>
 800977a:	f7f7 f97b 	bl	8000a74 <__aeabi_d2iz>
 800977e:	f104 0b01 	add.w	fp, r4, #1
 8009782:	ab0c      	add	r3, sp, #48	; 0x30
 8009784:	f10a 0a18 	add.w	sl, sl, #24
 8009788:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800978c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009790:	e72b      	b.n	80095ea <__kernel_rem_pio2+0x2a2>
 8009792:	4630      	mov	r0, r6
 8009794:	4639      	mov	r1, r7
 8009796:	f7f7 f96d 	bl	8000a74 <__aeabi_d2iz>
 800979a:	ab0c      	add	r3, sp, #48	; 0x30
 800979c:	46a3      	mov	fp, r4
 800979e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80097a2:	e722      	b.n	80095ea <__kernel_rem_pio2+0x2a2>
 80097a4:	ab70      	add	r3, sp, #448	; 0x1c0
 80097a6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80097aa:	ab0c      	add	r3, sp, #48	; 0x30
 80097ac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80097b0:	f7f6 fe5c 	bl	800046c <__aeabi_i2d>
 80097b4:	4622      	mov	r2, r4
 80097b6:	462b      	mov	r3, r5
 80097b8:	f7f6 fec2 	bl	8000540 <__aeabi_dmul>
 80097bc:	4632      	mov	r2, r6
 80097be:	e9c9 0100 	strd	r0, r1, [r9]
 80097c2:	463b      	mov	r3, r7
 80097c4:	4620      	mov	r0, r4
 80097c6:	4629      	mov	r1, r5
 80097c8:	f7f6 feba 	bl	8000540 <__aeabi_dmul>
 80097cc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80097d0:	4604      	mov	r4, r0
 80097d2:	460d      	mov	r5, r1
 80097d4:	e713      	b.n	80095fe <__kernel_rem_pio2+0x2b6>
 80097d6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80097da:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80097de:	f7f6 feaf 	bl	8000540 <__aeabi_dmul>
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	4620      	mov	r0, r4
 80097e8:	4629      	mov	r1, r5
 80097ea:	f7f6 fcf3 	bl	80001d4 <__adddf3>
 80097ee:	3601      	adds	r6, #1
 80097f0:	4604      	mov	r4, r0
 80097f2:	460d      	mov	r5, r1
 80097f4:	9b04      	ldr	r3, [sp, #16]
 80097f6:	429e      	cmp	r6, r3
 80097f8:	dc01      	bgt.n	80097fe <__kernel_rem_pio2+0x4b6>
 80097fa:	45b0      	cmp	r8, r6
 80097fc:	daeb      	bge.n	80097d6 <__kernel_rem_pio2+0x48e>
 80097fe:	ab48      	add	r3, sp, #288	; 0x120
 8009800:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009804:	e9c3 4500 	strd	r4, r5, [r3]
 8009808:	3f01      	subs	r7, #1
 800980a:	f108 0801 	add.w	r8, r8, #1
 800980e:	e6ff      	b.n	8009610 <__kernel_rem_pio2+0x2c8>
 8009810:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009812:	2b02      	cmp	r3, #2
 8009814:	dc0b      	bgt.n	800982e <__kernel_rem_pio2+0x4e6>
 8009816:	2b00      	cmp	r3, #0
 8009818:	dc6e      	bgt.n	80098f8 <__kernel_rem_pio2+0x5b0>
 800981a:	d045      	beq.n	80098a8 <__kernel_rem_pio2+0x560>
 800981c:	9b07      	ldr	r3, [sp, #28]
 800981e:	f003 0007 	and.w	r0, r3, #7
 8009822:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009826:	ecbd 8b02 	vpop	{d8}
 800982a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009830:	2b03      	cmp	r3, #3
 8009832:	d1f3      	bne.n	800981c <__kernel_rem_pio2+0x4d4>
 8009834:	ab48      	add	r3, sp, #288	; 0x120
 8009836:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800983a:	46d0      	mov	r8, sl
 800983c:	46d9      	mov	r9, fp
 800983e:	f1b9 0f00 	cmp.w	r9, #0
 8009842:	f1a8 0808 	sub.w	r8, r8, #8
 8009846:	dc64      	bgt.n	8009912 <__kernel_rem_pio2+0x5ca>
 8009848:	465c      	mov	r4, fp
 800984a:	2c01      	cmp	r4, #1
 800984c:	f1aa 0a08 	sub.w	sl, sl, #8
 8009850:	dc7e      	bgt.n	8009950 <__kernel_rem_pio2+0x608>
 8009852:	2000      	movs	r0, #0
 8009854:	2100      	movs	r1, #0
 8009856:	f1bb 0f01 	cmp.w	fp, #1
 800985a:	f300 8097 	bgt.w	800998c <__kernel_rem_pio2+0x644>
 800985e:	9b02      	ldr	r3, [sp, #8]
 8009860:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8009864:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009868:	2b00      	cmp	r3, #0
 800986a:	f040 8099 	bne.w	80099a0 <__kernel_rem_pio2+0x658>
 800986e:	9b01      	ldr	r3, [sp, #4]
 8009870:	e9c3 5600 	strd	r5, r6, [r3]
 8009874:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009878:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800987c:	e7ce      	b.n	800981c <__kernel_rem_pio2+0x4d4>
 800987e:	ab48      	add	r3, sp, #288	; 0x120
 8009880:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009888:	f7f6 fca4 	bl	80001d4 <__adddf3>
 800988c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009890:	f1bb 0f00 	cmp.w	fp, #0
 8009894:	daf3      	bge.n	800987e <__kernel_rem_pio2+0x536>
 8009896:	9b02      	ldr	r3, [sp, #8]
 8009898:	b113      	cbz	r3, 80098a0 <__kernel_rem_pio2+0x558>
 800989a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800989e:	4619      	mov	r1, r3
 80098a0:	9b01      	ldr	r3, [sp, #4]
 80098a2:	e9c3 0100 	strd	r0, r1, [r3]
 80098a6:	e7b9      	b.n	800981c <__kernel_rem_pio2+0x4d4>
 80098a8:	2000      	movs	r0, #0
 80098aa:	2100      	movs	r1, #0
 80098ac:	e7f0      	b.n	8009890 <__kernel_rem_pio2+0x548>
 80098ae:	ab48      	add	r3, sp, #288	; 0x120
 80098b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f7f6 fc8c 	bl	80001d4 <__adddf3>
 80098bc:	3c01      	subs	r4, #1
 80098be:	2c00      	cmp	r4, #0
 80098c0:	daf5      	bge.n	80098ae <__kernel_rem_pio2+0x566>
 80098c2:	9b02      	ldr	r3, [sp, #8]
 80098c4:	b1e3      	cbz	r3, 8009900 <__kernel_rem_pio2+0x5b8>
 80098c6:	4602      	mov	r2, r0
 80098c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098cc:	9c01      	ldr	r4, [sp, #4]
 80098ce:	e9c4 2300 	strd	r2, r3, [r4]
 80098d2:	4602      	mov	r2, r0
 80098d4:	460b      	mov	r3, r1
 80098d6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80098da:	f7f6 fc79 	bl	80001d0 <__aeabi_dsub>
 80098de:	ad4a      	add	r5, sp, #296	; 0x128
 80098e0:	2401      	movs	r4, #1
 80098e2:	45a3      	cmp	fp, r4
 80098e4:	da0f      	bge.n	8009906 <__kernel_rem_pio2+0x5be>
 80098e6:	9b02      	ldr	r3, [sp, #8]
 80098e8:	b113      	cbz	r3, 80098f0 <__kernel_rem_pio2+0x5a8>
 80098ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098ee:	4619      	mov	r1, r3
 80098f0:	9b01      	ldr	r3, [sp, #4]
 80098f2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80098f6:	e791      	b.n	800981c <__kernel_rem_pio2+0x4d4>
 80098f8:	465c      	mov	r4, fp
 80098fa:	2000      	movs	r0, #0
 80098fc:	2100      	movs	r1, #0
 80098fe:	e7de      	b.n	80098be <__kernel_rem_pio2+0x576>
 8009900:	4602      	mov	r2, r0
 8009902:	460b      	mov	r3, r1
 8009904:	e7e2      	b.n	80098cc <__kernel_rem_pio2+0x584>
 8009906:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800990a:	f7f6 fc63 	bl	80001d4 <__adddf3>
 800990e:	3401      	adds	r4, #1
 8009910:	e7e7      	b.n	80098e2 <__kernel_rem_pio2+0x59a>
 8009912:	e9d8 4500 	ldrd	r4, r5, [r8]
 8009916:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800991a:	4620      	mov	r0, r4
 800991c:	4632      	mov	r2, r6
 800991e:	463b      	mov	r3, r7
 8009920:	4629      	mov	r1, r5
 8009922:	f7f6 fc57 	bl	80001d4 <__adddf3>
 8009926:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800992a:	4602      	mov	r2, r0
 800992c:	460b      	mov	r3, r1
 800992e:	4620      	mov	r0, r4
 8009930:	4629      	mov	r1, r5
 8009932:	f7f6 fc4d 	bl	80001d0 <__aeabi_dsub>
 8009936:	4632      	mov	r2, r6
 8009938:	463b      	mov	r3, r7
 800993a:	f7f6 fc4b 	bl	80001d4 <__adddf3>
 800993e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009942:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8009946:	ed88 7b00 	vstr	d7, [r8]
 800994a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800994e:	e776      	b.n	800983e <__kernel_rem_pio2+0x4f6>
 8009950:	e9da 8900 	ldrd	r8, r9, [sl]
 8009954:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009958:	4640      	mov	r0, r8
 800995a:	4632      	mov	r2, r6
 800995c:	463b      	mov	r3, r7
 800995e:	4649      	mov	r1, r9
 8009960:	f7f6 fc38 	bl	80001d4 <__adddf3>
 8009964:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009968:	4602      	mov	r2, r0
 800996a:	460b      	mov	r3, r1
 800996c:	4640      	mov	r0, r8
 800996e:	4649      	mov	r1, r9
 8009970:	f7f6 fc2e 	bl	80001d0 <__aeabi_dsub>
 8009974:	4632      	mov	r2, r6
 8009976:	463b      	mov	r3, r7
 8009978:	f7f6 fc2c 	bl	80001d4 <__adddf3>
 800997c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009980:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009984:	ed8a 7b00 	vstr	d7, [sl]
 8009988:	3c01      	subs	r4, #1
 800998a:	e75e      	b.n	800984a <__kernel_rem_pio2+0x502>
 800998c:	ab48      	add	r3, sp, #288	; 0x120
 800998e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009996:	f7f6 fc1d 	bl	80001d4 <__adddf3>
 800999a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800999e:	e75a      	b.n	8009856 <__kernel_rem_pio2+0x50e>
 80099a0:	9b01      	ldr	r3, [sp, #4]
 80099a2:	9a01      	ldr	r2, [sp, #4]
 80099a4:	601d      	str	r5, [r3, #0]
 80099a6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80099aa:	605c      	str	r4, [r3, #4]
 80099ac:	609f      	str	r7, [r3, #8]
 80099ae:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80099b2:	60d3      	str	r3, [r2, #12]
 80099b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099b8:	6110      	str	r0, [r2, #16]
 80099ba:	6153      	str	r3, [r2, #20]
 80099bc:	e72e      	b.n	800981c <__kernel_rem_pio2+0x4d4>
 80099be:	bf00      	nop
 80099c0:	41700000 	.word	0x41700000
 80099c4:	3e700000 	.word	0x3e700000

080099c8 <__kernel_sin>:
 80099c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099cc:	ed2d 8b04 	vpush	{d8-d9}
 80099d0:	eeb0 8a41 	vmov.f32	s16, s2
 80099d4:	eef0 8a61 	vmov.f32	s17, s3
 80099d8:	ec55 4b10 	vmov	r4, r5, d0
 80099dc:	b083      	sub	sp, #12
 80099de:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80099e2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80099e6:	9001      	str	r0, [sp, #4]
 80099e8:	da06      	bge.n	80099f8 <__kernel_sin+0x30>
 80099ea:	ee10 0a10 	vmov	r0, s0
 80099ee:	4629      	mov	r1, r5
 80099f0:	f7f7 f840 	bl	8000a74 <__aeabi_d2iz>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	d051      	beq.n	8009a9c <__kernel_sin+0xd4>
 80099f8:	4622      	mov	r2, r4
 80099fa:	462b      	mov	r3, r5
 80099fc:	4620      	mov	r0, r4
 80099fe:	4629      	mov	r1, r5
 8009a00:	f7f6 fd9e 	bl	8000540 <__aeabi_dmul>
 8009a04:	4682      	mov	sl, r0
 8009a06:	468b      	mov	fp, r1
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	4629      	mov	r1, r5
 8009a10:	f7f6 fd96 	bl	8000540 <__aeabi_dmul>
 8009a14:	a341      	add	r3, pc, #260	; (adr r3, 8009b1c <__kernel_sin+0x154>)
 8009a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1a:	4680      	mov	r8, r0
 8009a1c:	4689      	mov	r9, r1
 8009a1e:	4650      	mov	r0, sl
 8009a20:	4659      	mov	r1, fp
 8009a22:	f7f6 fd8d 	bl	8000540 <__aeabi_dmul>
 8009a26:	a33f      	add	r3, pc, #252	; (adr r3, 8009b24 <__kernel_sin+0x15c>)
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	f7f6 fbd0 	bl	80001d0 <__aeabi_dsub>
 8009a30:	4652      	mov	r2, sl
 8009a32:	465b      	mov	r3, fp
 8009a34:	f7f6 fd84 	bl	8000540 <__aeabi_dmul>
 8009a38:	a33c      	add	r3, pc, #240	; (adr r3, 8009b2c <__kernel_sin+0x164>)
 8009a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3e:	f7f6 fbc9 	bl	80001d4 <__adddf3>
 8009a42:	4652      	mov	r2, sl
 8009a44:	465b      	mov	r3, fp
 8009a46:	f7f6 fd7b 	bl	8000540 <__aeabi_dmul>
 8009a4a:	a33a      	add	r3, pc, #232	; (adr r3, 8009b34 <__kernel_sin+0x16c>)
 8009a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a50:	f7f6 fbbe 	bl	80001d0 <__aeabi_dsub>
 8009a54:	4652      	mov	r2, sl
 8009a56:	465b      	mov	r3, fp
 8009a58:	f7f6 fd72 	bl	8000540 <__aeabi_dmul>
 8009a5c:	a337      	add	r3, pc, #220	; (adr r3, 8009b3c <__kernel_sin+0x174>)
 8009a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a62:	f7f6 fbb7 	bl	80001d4 <__adddf3>
 8009a66:	9b01      	ldr	r3, [sp, #4]
 8009a68:	4606      	mov	r6, r0
 8009a6a:	460f      	mov	r7, r1
 8009a6c:	b9eb      	cbnz	r3, 8009aaa <__kernel_sin+0xe2>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	460b      	mov	r3, r1
 8009a72:	4650      	mov	r0, sl
 8009a74:	4659      	mov	r1, fp
 8009a76:	f7f6 fd63 	bl	8000540 <__aeabi_dmul>
 8009a7a:	a325      	add	r3, pc, #148	; (adr r3, 8009b10 <__kernel_sin+0x148>)
 8009a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a80:	f7f6 fba6 	bl	80001d0 <__aeabi_dsub>
 8009a84:	4642      	mov	r2, r8
 8009a86:	464b      	mov	r3, r9
 8009a88:	f7f6 fd5a 	bl	8000540 <__aeabi_dmul>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	4620      	mov	r0, r4
 8009a92:	4629      	mov	r1, r5
 8009a94:	f7f6 fb9e 	bl	80001d4 <__adddf3>
 8009a98:	4604      	mov	r4, r0
 8009a9a:	460d      	mov	r5, r1
 8009a9c:	ec45 4b10 	vmov	d0, r4, r5
 8009aa0:	b003      	add	sp, #12
 8009aa2:	ecbd 8b04 	vpop	{d8-d9}
 8009aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aaa:	4b1b      	ldr	r3, [pc, #108]	; (8009b18 <__kernel_sin+0x150>)
 8009aac:	ec51 0b18 	vmov	r0, r1, d8
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f7f6 fd45 	bl	8000540 <__aeabi_dmul>
 8009ab6:	4632      	mov	r2, r6
 8009ab8:	ec41 0b19 	vmov	d9, r0, r1
 8009abc:	463b      	mov	r3, r7
 8009abe:	4640      	mov	r0, r8
 8009ac0:	4649      	mov	r1, r9
 8009ac2:	f7f6 fd3d 	bl	8000540 <__aeabi_dmul>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	460b      	mov	r3, r1
 8009aca:	ec51 0b19 	vmov	r0, r1, d9
 8009ace:	f7f6 fb7f 	bl	80001d0 <__aeabi_dsub>
 8009ad2:	4652      	mov	r2, sl
 8009ad4:	465b      	mov	r3, fp
 8009ad6:	f7f6 fd33 	bl	8000540 <__aeabi_dmul>
 8009ada:	ec53 2b18 	vmov	r2, r3, d8
 8009ade:	f7f6 fb77 	bl	80001d0 <__aeabi_dsub>
 8009ae2:	a30b      	add	r3, pc, #44	; (adr r3, 8009b10 <__kernel_sin+0x148>)
 8009ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae8:	4606      	mov	r6, r0
 8009aea:	460f      	mov	r7, r1
 8009aec:	4640      	mov	r0, r8
 8009aee:	4649      	mov	r1, r9
 8009af0:	f7f6 fd26 	bl	8000540 <__aeabi_dmul>
 8009af4:	4602      	mov	r2, r0
 8009af6:	460b      	mov	r3, r1
 8009af8:	4630      	mov	r0, r6
 8009afa:	4639      	mov	r1, r7
 8009afc:	f7f6 fb6a 	bl	80001d4 <__adddf3>
 8009b00:	4602      	mov	r2, r0
 8009b02:	460b      	mov	r3, r1
 8009b04:	4620      	mov	r0, r4
 8009b06:	4629      	mov	r1, r5
 8009b08:	f7f6 fb62 	bl	80001d0 <__aeabi_dsub>
 8009b0c:	e7c4      	b.n	8009a98 <__kernel_sin+0xd0>
 8009b0e:	bf00      	nop
 8009b10:	55555549 	.word	0x55555549
 8009b14:	3fc55555 	.word	0x3fc55555
 8009b18:	3fe00000 	.word	0x3fe00000
 8009b1c:	5acfd57c 	.word	0x5acfd57c
 8009b20:	3de5d93a 	.word	0x3de5d93a
 8009b24:	8a2b9ceb 	.word	0x8a2b9ceb
 8009b28:	3e5ae5e6 	.word	0x3e5ae5e6
 8009b2c:	57b1fe7d 	.word	0x57b1fe7d
 8009b30:	3ec71de3 	.word	0x3ec71de3
 8009b34:	19c161d5 	.word	0x19c161d5
 8009b38:	3f2a01a0 	.word	0x3f2a01a0
 8009b3c:	1110f8a6 	.word	0x1110f8a6
 8009b40:	3f811111 	.word	0x3f811111

08009b44 <fabs>:
 8009b44:	ec51 0b10 	vmov	r0, r1, d0
 8009b48:	ee10 2a10 	vmov	r2, s0
 8009b4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009b50:	ec43 2b10 	vmov	d0, r2, r3
 8009b54:	4770      	bx	lr
	...

08009b58 <floor>:
 8009b58:	ec51 0b10 	vmov	r0, r1, d0
 8009b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009b64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009b68:	2e13      	cmp	r6, #19
 8009b6a:	ee10 5a10 	vmov	r5, s0
 8009b6e:	ee10 8a10 	vmov	r8, s0
 8009b72:	460c      	mov	r4, r1
 8009b74:	dc32      	bgt.n	8009bdc <floor+0x84>
 8009b76:	2e00      	cmp	r6, #0
 8009b78:	da14      	bge.n	8009ba4 <floor+0x4c>
 8009b7a:	a333      	add	r3, pc, #204	; (adr r3, 8009c48 <floor+0xf0>)
 8009b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b80:	f7f6 fb28 	bl	80001d4 <__adddf3>
 8009b84:	2200      	movs	r2, #0
 8009b86:	2300      	movs	r3, #0
 8009b88:	f7f6 ff6a 	bl	8000a60 <__aeabi_dcmpgt>
 8009b8c:	b138      	cbz	r0, 8009b9e <floor+0x46>
 8009b8e:	2c00      	cmp	r4, #0
 8009b90:	da57      	bge.n	8009c42 <floor+0xea>
 8009b92:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009b96:	431d      	orrs	r5, r3
 8009b98:	d001      	beq.n	8009b9e <floor+0x46>
 8009b9a:	4c2d      	ldr	r4, [pc, #180]	; (8009c50 <floor+0xf8>)
 8009b9c:	2500      	movs	r5, #0
 8009b9e:	4621      	mov	r1, r4
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	e025      	b.n	8009bf0 <floor+0x98>
 8009ba4:	4f2b      	ldr	r7, [pc, #172]	; (8009c54 <floor+0xfc>)
 8009ba6:	4137      	asrs	r7, r6
 8009ba8:	ea01 0307 	and.w	r3, r1, r7
 8009bac:	4303      	orrs	r3, r0
 8009bae:	d01f      	beq.n	8009bf0 <floor+0x98>
 8009bb0:	a325      	add	r3, pc, #148	; (adr r3, 8009c48 <floor+0xf0>)
 8009bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb6:	f7f6 fb0d 	bl	80001d4 <__adddf3>
 8009bba:	2200      	movs	r2, #0
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	f7f6 ff4f 	bl	8000a60 <__aeabi_dcmpgt>
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	d0eb      	beq.n	8009b9e <floor+0x46>
 8009bc6:	2c00      	cmp	r4, #0
 8009bc8:	bfbe      	ittt	lt
 8009bca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009bce:	fa43 f606 	asrlt.w	r6, r3, r6
 8009bd2:	19a4      	addlt	r4, r4, r6
 8009bd4:	ea24 0407 	bic.w	r4, r4, r7
 8009bd8:	2500      	movs	r5, #0
 8009bda:	e7e0      	b.n	8009b9e <floor+0x46>
 8009bdc:	2e33      	cmp	r6, #51	; 0x33
 8009bde:	dd0b      	ble.n	8009bf8 <floor+0xa0>
 8009be0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009be4:	d104      	bne.n	8009bf0 <floor+0x98>
 8009be6:	ee10 2a10 	vmov	r2, s0
 8009bea:	460b      	mov	r3, r1
 8009bec:	f7f6 faf2 	bl	80001d4 <__adddf3>
 8009bf0:	ec41 0b10 	vmov	d0, r0, r1
 8009bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bf8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c00:	fa23 f707 	lsr.w	r7, r3, r7
 8009c04:	4207      	tst	r7, r0
 8009c06:	d0f3      	beq.n	8009bf0 <floor+0x98>
 8009c08:	a30f      	add	r3, pc, #60	; (adr r3, 8009c48 <floor+0xf0>)
 8009c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0e:	f7f6 fae1 	bl	80001d4 <__adddf3>
 8009c12:	2200      	movs	r2, #0
 8009c14:	2300      	movs	r3, #0
 8009c16:	f7f6 ff23 	bl	8000a60 <__aeabi_dcmpgt>
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	d0bf      	beq.n	8009b9e <floor+0x46>
 8009c1e:	2c00      	cmp	r4, #0
 8009c20:	da02      	bge.n	8009c28 <floor+0xd0>
 8009c22:	2e14      	cmp	r6, #20
 8009c24:	d103      	bne.n	8009c2e <floor+0xd6>
 8009c26:	3401      	adds	r4, #1
 8009c28:	ea25 0507 	bic.w	r5, r5, r7
 8009c2c:	e7b7      	b.n	8009b9e <floor+0x46>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009c34:	fa03 f606 	lsl.w	r6, r3, r6
 8009c38:	4435      	add	r5, r6
 8009c3a:	4545      	cmp	r5, r8
 8009c3c:	bf38      	it	cc
 8009c3e:	18e4      	addcc	r4, r4, r3
 8009c40:	e7f2      	b.n	8009c28 <floor+0xd0>
 8009c42:	2500      	movs	r5, #0
 8009c44:	462c      	mov	r4, r5
 8009c46:	e7aa      	b.n	8009b9e <floor+0x46>
 8009c48:	8800759c 	.word	0x8800759c
 8009c4c:	7e37e43c 	.word	0x7e37e43c
 8009c50:	bff00000 	.word	0xbff00000
 8009c54:	000fffff 	.word	0x000fffff

08009c58 <scalbn>:
 8009c58:	b570      	push	{r4, r5, r6, lr}
 8009c5a:	ec55 4b10 	vmov	r4, r5, d0
 8009c5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009c62:	4606      	mov	r6, r0
 8009c64:	462b      	mov	r3, r5
 8009c66:	b99a      	cbnz	r2, 8009c90 <scalbn+0x38>
 8009c68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009c6c:	4323      	orrs	r3, r4
 8009c6e:	d036      	beq.n	8009cde <scalbn+0x86>
 8009c70:	4b39      	ldr	r3, [pc, #228]	; (8009d58 <scalbn+0x100>)
 8009c72:	4629      	mov	r1, r5
 8009c74:	ee10 0a10 	vmov	r0, s0
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f7f6 fc61 	bl	8000540 <__aeabi_dmul>
 8009c7e:	4b37      	ldr	r3, [pc, #220]	; (8009d5c <scalbn+0x104>)
 8009c80:	429e      	cmp	r6, r3
 8009c82:	4604      	mov	r4, r0
 8009c84:	460d      	mov	r5, r1
 8009c86:	da10      	bge.n	8009caa <scalbn+0x52>
 8009c88:	a32b      	add	r3, pc, #172	; (adr r3, 8009d38 <scalbn+0xe0>)
 8009c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8e:	e03a      	b.n	8009d06 <scalbn+0xae>
 8009c90:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009c94:	428a      	cmp	r2, r1
 8009c96:	d10c      	bne.n	8009cb2 <scalbn+0x5a>
 8009c98:	ee10 2a10 	vmov	r2, s0
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	4629      	mov	r1, r5
 8009ca0:	f7f6 fa98 	bl	80001d4 <__adddf3>
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	460d      	mov	r5, r1
 8009ca8:	e019      	b.n	8009cde <scalbn+0x86>
 8009caa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009cae:	460b      	mov	r3, r1
 8009cb0:	3a36      	subs	r2, #54	; 0x36
 8009cb2:	4432      	add	r2, r6
 8009cb4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009cb8:	428a      	cmp	r2, r1
 8009cba:	dd08      	ble.n	8009cce <scalbn+0x76>
 8009cbc:	2d00      	cmp	r5, #0
 8009cbe:	a120      	add	r1, pc, #128	; (adr r1, 8009d40 <scalbn+0xe8>)
 8009cc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cc4:	da1c      	bge.n	8009d00 <scalbn+0xa8>
 8009cc6:	a120      	add	r1, pc, #128	; (adr r1, 8009d48 <scalbn+0xf0>)
 8009cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ccc:	e018      	b.n	8009d00 <scalbn+0xa8>
 8009cce:	2a00      	cmp	r2, #0
 8009cd0:	dd08      	ble.n	8009ce4 <scalbn+0x8c>
 8009cd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009cd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009cda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009cde:	ec45 4b10 	vmov	d0, r4, r5
 8009ce2:	bd70      	pop	{r4, r5, r6, pc}
 8009ce4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009ce8:	da19      	bge.n	8009d1e <scalbn+0xc6>
 8009cea:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009cee:	429e      	cmp	r6, r3
 8009cf0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009cf4:	dd0a      	ble.n	8009d0c <scalbn+0xb4>
 8009cf6:	a112      	add	r1, pc, #72	; (adr r1, 8009d40 <scalbn+0xe8>)
 8009cf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1e2      	bne.n	8009cc6 <scalbn+0x6e>
 8009d00:	a30f      	add	r3, pc, #60	; (adr r3, 8009d40 <scalbn+0xe8>)
 8009d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d06:	f7f6 fc1b 	bl	8000540 <__aeabi_dmul>
 8009d0a:	e7cb      	b.n	8009ca4 <scalbn+0x4c>
 8009d0c:	a10a      	add	r1, pc, #40	; (adr r1, 8009d38 <scalbn+0xe0>)
 8009d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d0b8      	beq.n	8009c88 <scalbn+0x30>
 8009d16:	a10e      	add	r1, pc, #56	; (adr r1, 8009d50 <scalbn+0xf8>)
 8009d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d1c:	e7b4      	b.n	8009c88 <scalbn+0x30>
 8009d1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009d22:	3236      	adds	r2, #54	; 0x36
 8009d24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009d28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	4b0c      	ldr	r3, [pc, #48]	; (8009d60 <scalbn+0x108>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	e7e8      	b.n	8009d06 <scalbn+0xae>
 8009d34:	f3af 8000 	nop.w
 8009d38:	c2f8f359 	.word	0xc2f8f359
 8009d3c:	01a56e1f 	.word	0x01a56e1f
 8009d40:	8800759c 	.word	0x8800759c
 8009d44:	7e37e43c 	.word	0x7e37e43c
 8009d48:	8800759c 	.word	0x8800759c
 8009d4c:	fe37e43c 	.word	0xfe37e43c
 8009d50:	c2f8f359 	.word	0xc2f8f359
 8009d54:	81a56e1f 	.word	0x81a56e1f
 8009d58:	43500000 	.word	0x43500000
 8009d5c:	ffff3cb0 	.word	0xffff3cb0
 8009d60:	3c900000 	.word	0x3c900000

08009d64 <_init>:
 8009d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d66:	bf00      	nop
 8009d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d6a:	bc08      	pop	{r3}
 8009d6c:	469e      	mov	lr, r3
 8009d6e:	4770      	bx	lr

08009d70 <_fini>:
 8009d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d72:	bf00      	nop
 8009d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d76:	bc08      	pop	{r3}
 8009d78:	469e      	mov	lr, r3
 8009d7a:	4770      	bx	lr
