
adc_int.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000916c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080092fc  080092fc  000192fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093a8  080093a8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080093a8  080093a8  000193a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093b0  080093b0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093b0  080093b0  000193b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093b4  080093b4  000193b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080093b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c74  200001e4  0800959c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e58  0800959c  00021e58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b8bd  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d77  00000000  00000000  0003bad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0003f848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  00040b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f9a  00000000  00000000  00041c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196b1  00000000  00000000  00067bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d74af  00000000  00000000  00081283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158732  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005264  00000000  00000000  00158788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092e4 	.word	0x080092e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080092e4 	.word	0x080092e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000900:	f000 b96e 	b.w	8000be0 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468c      	mov	ip, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	f040 8083 	bne.w	8000a32 <__udivmoddi4+0x116>
 800092c:	428a      	cmp	r2, r1
 800092e:	4617      	mov	r7, r2
 8000930:	d947      	bls.n	80009c2 <__udivmoddi4+0xa6>
 8000932:	fab2 f282 	clz	r2, r2
 8000936:	b142      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000938:	f1c2 0020 	rsb	r0, r2, #32
 800093c:	fa24 f000 	lsr.w	r0, r4, r0
 8000940:	4091      	lsls	r1, r2
 8000942:	4097      	lsls	r7, r2
 8000944:	ea40 0c01 	orr.w	ip, r0, r1
 8000948:	4094      	lsls	r4, r2
 800094a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800094e:	0c23      	lsrs	r3, r4, #16
 8000950:	fbbc f6f8 	udiv	r6, ip, r8
 8000954:	fa1f fe87 	uxth.w	lr, r7
 8000958:	fb08 c116 	mls	r1, r8, r6, ip
 800095c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000960:	fb06 f10e 	mul.w	r1, r6, lr
 8000964:	4299      	cmp	r1, r3
 8000966:	d909      	bls.n	800097c <__udivmoddi4+0x60>
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800096e:	f080 8119 	bcs.w	8000ba4 <__udivmoddi4+0x288>
 8000972:	4299      	cmp	r1, r3
 8000974:	f240 8116 	bls.w	8000ba4 <__udivmoddi4+0x288>
 8000978:	3e02      	subs	r6, #2
 800097a:	443b      	add	r3, r7
 800097c:	1a5b      	subs	r3, r3, r1
 800097e:	b2a4      	uxth	r4, r4
 8000980:	fbb3 f0f8 	udiv	r0, r3, r8
 8000984:	fb08 3310 	mls	r3, r8, r0, r3
 8000988:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800098c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000990:	45a6      	cmp	lr, r4
 8000992:	d909      	bls.n	80009a8 <__udivmoddi4+0x8c>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800099a:	f080 8105 	bcs.w	8000ba8 <__udivmoddi4+0x28c>
 800099e:	45a6      	cmp	lr, r4
 80009a0:	f240 8102 	bls.w	8000ba8 <__udivmoddi4+0x28c>
 80009a4:	3802      	subs	r0, #2
 80009a6:	443c      	add	r4, r7
 80009a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ac:	eba4 040e 	sub.w	r4, r4, lr
 80009b0:	2600      	movs	r6, #0
 80009b2:	b11d      	cbz	r5, 80009bc <__udivmoddi4+0xa0>
 80009b4:	40d4      	lsrs	r4, r2
 80009b6:	2300      	movs	r3, #0
 80009b8:	e9c5 4300 	strd	r4, r3, [r5]
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	b902      	cbnz	r2, 80009c6 <__udivmoddi4+0xaa>
 80009c4:	deff      	udf	#255	; 0xff
 80009c6:	fab2 f282 	clz	r2, r2
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d150      	bne.n	8000a70 <__udivmoddi4+0x154>
 80009ce:	1bcb      	subs	r3, r1, r7
 80009d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	2601      	movs	r6, #1
 80009da:	fbb3 fcfe 	udiv	ip, r3, lr
 80009de:	0c21      	lsrs	r1, r4, #16
 80009e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009e8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0xe4>
 80009f0:	1879      	adds	r1, r7, r1
 80009f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0xe2>
 80009f8:	428b      	cmp	r3, r1
 80009fa:	f200 80e9 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 80009fe:	4684      	mov	ip, r0
 8000a00:	1ac9      	subs	r1, r1, r3
 8000a02:	b2a3      	uxth	r3, r4
 8000a04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a10:	fb08 f800 	mul.w	r8, r8, r0
 8000a14:	45a0      	cmp	r8, r4
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x10c>
 8000a18:	193c      	adds	r4, r7, r4
 8000a1a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x10a>
 8000a20:	45a0      	cmp	r8, r4
 8000a22:	f200 80d9 	bhi.w	8000bd8 <__udivmoddi4+0x2bc>
 8000a26:	4618      	mov	r0, r3
 8000a28:	eba4 0408 	sub.w	r4, r4, r8
 8000a2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a30:	e7bf      	b.n	80009b2 <__udivmoddi4+0x96>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d909      	bls.n	8000a4a <__udivmoddi4+0x12e>
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	f000 80b1 	beq.w	8000b9e <__udivmoddi4+0x282>
 8000a3c:	2600      	movs	r6, #0
 8000a3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a42:	4630      	mov	r0, r6
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	fab3 f683 	clz	r6, r3
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d14a      	bne.n	8000ae8 <__udivmoddi4+0x1cc>
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d302      	bcc.n	8000a5c <__udivmoddi4+0x140>
 8000a56:	4282      	cmp	r2, r0
 8000a58:	f200 80b8 	bhi.w	8000bcc <__udivmoddi4+0x2b0>
 8000a5c:	1a84      	subs	r4, r0, r2
 8000a5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a62:	2001      	movs	r0, #1
 8000a64:	468c      	mov	ip, r1
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	d0a8      	beq.n	80009bc <__udivmoddi4+0xa0>
 8000a6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a6e:	e7a5      	b.n	80009bc <__udivmoddi4+0xa0>
 8000a70:	f1c2 0320 	rsb	r3, r2, #32
 8000a74:	fa20 f603 	lsr.w	r6, r0, r3
 8000a78:	4097      	lsls	r7, r2
 8000a7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a82:	40d9      	lsrs	r1, r3
 8000a84:	4330      	orrs	r0, r6
 8000a86:	0c03      	lsrs	r3, r0, #16
 8000a88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a98:	fb06 f108 	mul.w	r1, r6, r8
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000aa2:	d909      	bls.n	8000ab8 <__udivmoddi4+0x19c>
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000aaa:	f080 808d 	bcs.w	8000bc8 <__udivmoddi4+0x2ac>
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	f240 808a 	bls.w	8000bc8 <__udivmoddi4+0x2ac>
 8000ab4:	3e02      	subs	r6, #2
 8000ab6:	443b      	add	r3, r7
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	b281      	uxth	r1, r0
 8000abc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac8:	fb00 f308 	mul.w	r3, r0, r8
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x1c4>
 8000ad0:	1879      	adds	r1, r7, r1
 8000ad2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ad6:	d273      	bcs.n	8000bc0 <__udivmoddi4+0x2a4>
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d971      	bls.n	8000bc0 <__udivmoddi4+0x2a4>
 8000adc:	3802      	subs	r0, #2
 8000ade:	4439      	add	r1, r7
 8000ae0:	1acb      	subs	r3, r1, r3
 8000ae2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ae6:	e778      	b.n	80009da <__udivmoddi4+0xbe>
 8000ae8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aec:	fa03 f406 	lsl.w	r4, r3, r6
 8000af0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000af4:	431c      	orrs	r4, r3
 8000af6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000afa:	fa01 f306 	lsl.w	r3, r1, r6
 8000afe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b06:	431f      	orrs	r7, r3
 8000b08:	0c3b      	lsrs	r3, r7, #16
 8000b0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b0e:	fa1f f884 	uxth.w	r8, r4
 8000b12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b1e:	458a      	cmp	sl, r1
 8000b20:	fa02 f206 	lsl.w	r2, r2, r6
 8000b24:	fa00 f306 	lsl.w	r3, r0, r6
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x220>
 8000b2a:	1861      	adds	r1, r4, r1
 8000b2c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000b30:	d248      	bcs.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b32:	458a      	cmp	sl, r1
 8000b34:	d946      	bls.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b36:	f1a9 0902 	sub.w	r9, r9, #2
 8000b3a:	4421      	add	r1, r4
 8000b3c:	eba1 010a 	sub.w	r1, r1, sl
 8000b40:	b2bf      	uxth	r7, r7
 8000b42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b4e:	fb00 f808 	mul.w	r8, r0, r8
 8000b52:	45b8      	cmp	r8, r7
 8000b54:	d907      	bls.n	8000b66 <__udivmoddi4+0x24a>
 8000b56:	19e7      	adds	r7, r4, r7
 8000b58:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b5c:	d22e      	bcs.n	8000bbc <__udivmoddi4+0x2a0>
 8000b5e:	45b8      	cmp	r8, r7
 8000b60:	d92c      	bls.n	8000bbc <__udivmoddi4+0x2a0>
 8000b62:	3802      	subs	r0, #2
 8000b64:	4427      	add	r7, r4
 8000b66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b6a:	eba7 0708 	sub.w	r7, r7, r8
 8000b6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b72:	454f      	cmp	r7, r9
 8000b74:	46c6      	mov	lr, r8
 8000b76:	4649      	mov	r1, r9
 8000b78:	d31a      	bcc.n	8000bb0 <__udivmoddi4+0x294>
 8000b7a:	d017      	beq.n	8000bac <__udivmoddi4+0x290>
 8000b7c:	b15d      	cbz	r5, 8000b96 <__udivmoddi4+0x27a>
 8000b7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b82:	eb67 0701 	sbc.w	r7, r7, r1
 8000b86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b8a:	40f2      	lsrs	r2, r6
 8000b8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b90:	40f7      	lsrs	r7, r6
 8000b92:	e9c5 2700 	strd	r2, r7, [r5]
 8000b96:	2600      	movs	r6, #0
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	462e      	mov	r6, r5
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	e70b      	b.n	80009bc <__udivmoddi4+0xa0>
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	e6e9      	b.n	800097c <__udivmoddi4+0x60>
 8000ba8:	4618      	mov	r0, r3
 8000baa:	e6fd      	b.n	80009a8 <__udivmoddi4+0x8c>
 8000bac:	4543      	cmp	r3, r8
 8000bae:	d2e5      	bcs.n	8000b7c <__udivmoddi4+0x260>
 8000bb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000bb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000bb8:	3801      	subs	r0, #1
 8000bba:	e7df      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e7d2      	b.n	8000b66 <__udivmoddi4+0x24a>
 8000bc0:	4660      	mov	r0, ip
 8000bc2:	e78d      	b.n	8000ae0 <__udivmoddi4+0x1c4>
 8000bc4:	4681      	mov	r9, r0
 8000bc6:	e7b9      	b.n	8000b3c <__udivmoddi4+0x220>
 8000bc8:	4666      	mov	r6, ip
 8000bca:	e775      	b.n	8000ab8 <__udivmoddi4+0x19c>
 8000bcc:	4630      	mov	r0, r6
 8000bce:	e74a      	b.n	8000a66 <__udivmoddi4+0x14a>
 8000bd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bd4:	4439      	add	r1, r7
 8000bd6:	e713      	b.n	8000a00 <__udivmoddi4+0xe4>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	443c      	add	r4, r7
 8000bdc:	e724      	b.n	8000a28 <__udivmoddi4+0x10c>
 8000bde:	bf00      	nop

08000be0 <__aeabi_idiv0>:
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	0000      	movs	r0, r0
	...

08000be8 <adc_counts_to_volts>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float adc_counts_to_volts(uint32_t adc_counts)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	return (float)(adc_counts*3.3)/4096;
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff fdb1 	bl	8000758 <__aeabi_ui2d>
 8000bf6:	a30d      	add	r3, pc, #52	; (adr r3, 8000c2c <adc_counts_to_volts+0x44>)
 8000bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfc:	f7ff fb40 	bl	8000280 <__aeabi_dmul>
 8000c00:	4602      	mov	r2, r0
 8000c02:	460b      	mov	r3, r1
 8000c04:	4610      	mov	r0, r2
 8000c06:	4619      	mov	r1, r3
 8000c08:	f7ff fe20 	bl	800084c <__aeabi_d2f>
 8000c0c:	ee06 0a90 	vmov	s13, r0
 8000c10:	eddf 7a05 	vldr	s15, [pc, #20]	; 8000c28 <adc_counts_to_volts+0x40>
 8000c14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000c18:	eef0 7a47 	vmov.f32	s15, s14
}
 8000c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	45800000 	.word	0x45800000
 8000c2c:	66666666 	.word	0x66666666
 8000c30:	400a6666 	.word	0x400a6666

08000c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b094      	sub	sp, #80	; 0x50
 8000c38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3a:	f000 fcbf 	bl	80015bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3e:	f000 f847 	bl	8000cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c42:	f000 f9ad 	bl	8000fa0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c46:	f000 f917 	bl	8000e78 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000c4a:	f000 f943 	bl	8000ed4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000c4e:	f000 f971 	bl	8000f34 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000c52:	f000 f8bf 	bl	8000dd4 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000c56:	f007 f9a9 	bl	8007fac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t msg_buffer[64] = {'\0'};
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	223c      	movs	r2, #60	; 0x3c
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f007 fef3 	bl	8008a50 <memset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_ADC_Start(&hadc1); // start the adc
 8000c6a:	4817      	ldr	r0, [pc, #92]	; (8000cc8 <main+0x94>)
 8000c6c:	f000 fd80 	bl	8001770 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8000c70:	2164      	movs	r1, #100	; 0x64
 8000c72:	4815      	ldr	r0, [pc, #84]	; (8000cc8 <main+0x94>)
 8000c74:	f000 fe81 	bl	800197a <HAL_ADC_PollForConversion>

	uint32_t adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 8000c78:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <main+0x94>)
 8000c7a:	f000 ff09 	bl	8001a90 <HAL_ADC_GetValue>
 8000c7e:	6478      	str	r0, [r7, #68]	; 0x44

	HAL_ADC_Stop(&hadc1); // stop adc
 8000c80:	4811      	ldr	r0, [pc, #68]	; (8000cc8 <main+0x94>)
 8000c82:	f000 fe47 	bl	8001914 <HAL_ADC_Stop>

	float adc_volts = adc_counts_to_volts(adc_val);
 8000c86:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c88:	f7ff ffae 	bl	8000be8 <adc_counts_to_volts>
 8000c8c:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40

	snprintf(msg_buffer, sizeof(msg_buffer), "ADC value = %.2f V\r\n", adc_volts);
 8000c90:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000c92:	f7ff fd83 	bl	800079c <__aeabi_f2d>
 8000c96:	4602      	mov	r2, r0
 8000c98:	460b      	mov	r3, r1
 8000c9a:	4638      	mov	r0, r7
 8000c9c:	e9cd 2300 	strd	r2, r3, [sp]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <main+0x98>)
 8000ca2:	2140      	movs	r1, #64	; 0x40
 8000ca4:	f007 fedc 	bl	8008a60 <sniprintf>
	CDC_Transmit_FS((uint8_t*)msg_buffer, strlen(msg_buffer));
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fa90 	bl	80001d0 <strlen>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f007 fa36 	bl	8008128 <CDC_Transmit_FS>

	HAL_Delay (500); // wait for 500ms
 8000cbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc0:	f000 fcee 	bl	80016a0 <HAL_Delay>
  {
 8000cc4:	e7d1      	b.n	8000c6a <main+0x36>
 8000cc6:	bf00      	nop
 8000cc8:	20000484 	.word	0x20000484
 8000ccc:	080092fc 	.word	0x080092fc

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b098      	sub	sp, #96	; 0x60
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cda:	2230      	movs	r2, #48	; 0x30
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f007 feb6 	bl	8008a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	4b31      	ldr	r3, [pc, #196]	; (8000dcc <SystemClock_Config+0xfc>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a30      	ldr	r2, [pc, #192]	; (8000dcc <SystemClock_Config+0xfc>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <SystemClock_Config+0xfc>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b2b      	ldr	r3, [pc, #172]	; (8000dd0 <SystemClock_Config+0x100>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a2a      	ldr	r2, [pc, #168]	; (8000dd0 <SystemClock_Config+0x100>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <SystemClock_Config+0x100>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d44:	2302      	movs	r3, #2
 8000d46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d4e:	2308      	movs	r3, #8
 8000d50:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d52:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d56:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d64:	4618      	mov	r0, r3
 8000d66:	f003 faef 	bl	8004348 <HAL_RCC_OscConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000d70:	f000 fa14 	bl	800119c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d74:	230f      	movs	r3, #15
 8000d76:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	2105      	movs	r1, #5
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 fd50 	bl	8004838 <HAL_RCC_ClockConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d9e:	f000 f9fd 	bl	800119c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000da2:	2301      	movs	r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000da6:	23c0      	movs	r3, #192	; 0xc0
 8000da8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000daa:	2302      	movs	r3, #2
 8000dac:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	4618      	mov	r0, r3
 8000db4:	f003 ff28 	bl	8004c08 <HAL_RCCEx_PeriphCLKConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000dbe:	f000 f9ed 	bl	800119c <Error_Handler>
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3760      	adds	r7, #96	; 0x60
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40007000 	.word	0x40007000

08000dd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000de6:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000de8:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <MX_ADC1_Init+0x9c>)
 8000dea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dec:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000dee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000df2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e16:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <MX_ADC1_Init+0xa0>)
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e36:	f000 fc57 	bl	80016e8 <HAL_ADC_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e40:	f000 f9ac 	bl	800119c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e44:	2301      	movs	r3, #1
 8000e46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e50:	463b      	mov	r3, r7
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e56:	f000 fe29 	bl	8001aac <HAL_ADC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e60:	f000 f99c 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000484 	.word	0x20000484
 8000e70:	40012000 	.word	0x40012000
 8000e74:	0f000001 	.word	0x0f000001

08000e78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e7e:	4a13      	ldr	r2, [pc, #76]	; (8000ecc <MX_I2C1_Init+0x54>)
 8000e80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e84:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <MX_I2C1_Init+0x58>)
 8000e86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000eb6:	f001 fadf 	bl	8002478 <HAL_I2C_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ec0:	f000 f96c 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000430 	.word	0x20000430
 8000ecc:	40005400 	.word	0x40005400
 8000ed0:	000186a0 	.word	0x000186a0

08000ed4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <MX_I2S3_Init+0x54>)
 8000eda:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <MX_I2S3_Init+0x58>)
 8000edc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_I2S3_Init+0x54>)
 8000ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <MX_I2S3_Init+0x54>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_I2S3_Init+0x54>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <MX_I2S3_Init+0x54>)
 8000ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_I2S3_Init+0x54>)
 8000efc:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <MX_I2S3_Init+0x5c>)
 8000efe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_I2S3_Init+0x54>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_I2S3_Init+0x54>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_I2S3_Init+0x54>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_I2S3_Init+0x54>)
 8000f14:	f001 fbf4 	bl	8002700 <HAL_I2S_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000f1e:	f000 f93d 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000524 	.word	0x20000524
 8000f2c:	40003c00 	.word	0x40003c00
 8000f30:	00017700 	.word	0x00017700

08000f34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f3a:	4a18      	ldr	r2, [pc, #96]	; (8000f9c <MX_SPI1_Init+0x68>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f80:	220a      	movs	r2, #10
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f86:	f003 ff7f 	bl	8004e88 <HAL_SPI_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f90:	f000 f904 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200004cc 	.word	0x200004cc
 8000f9c:	40013000 	.word	0x40013000

08000fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08c      	sub	sp, #48	; 0x30
 8000fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
 8000fba:	4b72      	ldr	r3, [pc, #456]	; (8001184 <MX_GPIO_Init+0x1e4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a71      	ldr	r2, [pc, #452]	; (8001184 <MX_GPIO_Init+0x1e4>)
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b6f      	ldr	r3, [pc, #444]	; (8001184 <MX_GPIO_Init+0x1e4>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	61bb      	str	r3, [r7, #24]
 8000fd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	4b6b      	ldr	r3, [pc, #428]	; (8001184 <MX_GPIO_Init+0x1e4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a6a      	ldr	r2, [pc, #424]	; (8001184 <MX_GPIO_Init+0x1e4>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b68      	ldr	r3, [pc, #416]	; (8001184 <MX_GPIO_Init+0x1e4>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	4b64      	ldr	r3, [pc, #400]	; (8001184 <MX_GPIO_Init+0x1e4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a63      	ldr	r2, [pc, #396]	; (8001184 <MX_GPIO_Init+0x1e4>)
 8000ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b61      	ldr	r3, [pc, #388]	; (8001184 <MX_GPIO_Init+0x1e4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b5d      	ldr	r3, [pc, #372]	; (8001184 <MX_GPIO_Init+0x1e4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a5c      	ldr	r2, [pc, #368]	; (8001184 <MX_GPIO_Init+0x1e4>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b5a      	ldr	r3, [pc, #360]	; (8001184 <MX_GPIO_Init+0x1e4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	4b56      	ldr	r3, [pc, #344]	; (8001184 <MX_GPIO_Init+0x1e4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a55      	ldr	r2, [pc, #340]	; (8001184 <MX_GPIO_Init+0x1e4>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b53      	ldr	r3, [pc, #332]	; (8001184 <MX_GPIO_Init+0x1e4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	4b4f      	ldr	r3, [pc, #316]	; (8001184 <MX_GPIO_Init+0x1e4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a4e      	ldr	r2, [pc, #312]	; (8001184 <MX_GPIO_Init+0x1e4>)
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b4c      	ldr	r3, [pc, #304]	; (8001184 <MX_GPIO_Init+0x1e4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2108      	movs	r1, #8
 8001062:	4849      	ldr	r0, [pc, #292]	; (8001188 <MX_GPIO_Init+0x1e8>)
 8001064:	f001 f9ee 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	2101      	movs	r1, #1
 800106c:	4847      	ldr	r0, [pc, #284]	; (800118c <MX_GPIO_Init+0x1ec>)
 800106e:	f001 f9e9 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001072:	2200      	movs	r2, #0
 8001074:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001078:	4845      	ldr	r0, [pc, #276]	; (8001190 <MX_GPIO_Init+0x1f0>)
 800107a:	f001 f9e3 	bl	8002444 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800107e:	2308      	movs	r3, #8
 8001080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2301      	movs	r3, #1
 8001084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4619      	mov	r1, r3
 8001094:	483c      	ldr	r0, [pc, #240]	; (8001188 <MX_GPIO_Init+0x1e8>)
 8001096:	f001 f839 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800109a:	2301      	movs	r3, #1
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	4836      	ldr	r0, [pc, #216]	; (800118c <MX_GPIO_Init+0x1ec>)
 80010b2:	f001 f82b 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80010b6:	2308      	movs	r3, #8
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010c6:	2305      	movs	r3, #5
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	482e      	ldr	r0, [pc, #184]	; (800118c <MX_GPIO_Init+0x1ec>)
 80010d2:	f001 f81b 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010d6:	2301      	movs	r3, #1
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010da:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4619      	mov	r1, r3
 80010ea:	482a      	ldr	r0, [pc, #168]	; (8001194 <MX_GPIO_Init+0x1f4>)
 80010ec:	f001 f80e 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010f0:	2304      	movs	r3, #4
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f4:	2300      	movs	r3, #0
 80010f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	4825      	ldr	r0, [pc, #148]	; (8001198 <MX_GPIO_Init+0x1f8>)
 8001104:	f001 f802 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800110c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800111a:	2305      	movs	r3, #5
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4619      	mov	r1, r3
 8001124:	481c      	ldr	r0, [pc, #112]	; (8001198 <MX_GPIO_Init+0x1f8>)
 8001126:	f000 fff1 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800112a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800112e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	2301      	movs	r3, #1
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	4813      	ldr	r0, [pc, #76]	; (8001190 <MX_GPIO_Init+0x1f0>)
 8001144:	f000 ffe2 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001148:	2320      	movs	r3, #32
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_GPIO_Init+0x1f0>)
 800115c:	f000 ffd6 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001160:	2302      	movs	r3, #2
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001164:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	4804      	ldr	r0, [pc, #16]	; (8001188 <MX_GPIO_Init+0x1e8>)
 8001176:	f000 ffc9 	bl	800210c <HAL_GPIO_Init>

}
 800117a:	bf00      	nop
 800117c:	3730      	adds	r7, #48	; 0x30
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	40021000 	.word	0x40021000
 800118c:	40020800 	.word	0x40020800
 8001190:	40020c00 	.word	0x40020c00
 8001194:	40020000 	.word	0x40020000
 8001198:	40020400 	.word	0x40020400

0800119c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
}
 80011a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <Error_Handler+0x8>
	...

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_MspInit+0x4c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <HAL_MspInit+0x4c>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <HAL_MspInit+0x4c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_MspInit+0x4c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_MspInit+0x4c>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_MspInit+0x4c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011e6:	2007      	movs	r0, #7
 80011e8:	f000 ff4e 	bl	8002088 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800

080011f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a17      	ldr	r2, [pc, #92]	; (8001274 <HAL_ADC_MspInit+0x7c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d127      	bne.n	800126a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <HAL_ADC_MspInit+0x80>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	4a15      	ldr	r2, [pc, #84]	; (8001278 <HAL_ADC_MspInit+0x80>)
 8001224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001228:	6453      	str	r3, [r2, #68]	; 0x44
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <HAL_ADC_MspInit+0x80>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <HAL_ADC_MspInit+0x80>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <HAL_ADC_MspInit+0x80>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <HAL_ADC_MspInit+0x80>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001252:	2302      	movs	r3, #2
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001256:	2303      	movs	r3, #3
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <HAL_ADC_MspInit+0x84>)
 8001266:	f000 ff51 	bl	800210c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40012000 	.word	0x40012000
 8001278:	40023800 	.word	0x40023800
 800127c:	40020000 	.word	0x40020000

08001280 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a19      	ldr	r2, [pc, #100]	; (8001304 <HAL_I2C_MspInit+0x84>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d12c      	bne.n	80012fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <HAL_I2C_MspInit+0x88>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a17      	ldr	r2, [pc, #92]	; (8001308 <HAL_I2C_MspInit+0x88>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_I2C_MspInit+0x88>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80012be:	f44f 7310 	mov.w	r3, #576	; 0x240
 80012c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c4:	2312      	movs	r3, #18
 80012c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d0:	2304      	movs	r3, #4
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	480c      	ldr	r0, [pc, #48]	; (800130c <HAL_I2C_MspInit+0x8c>)
 80012dc:	f000 ff16 	bl	800210c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_I2C_MspInit+0x88>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	4a07      	ldr	r2, [pc, #28]	; (8001308 <HAL_I2C_MspInit+0x88>)
 80012ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ee:	6413      	str	r3, [r2, #64]	; 0x40
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_I2C_MspInit+0x88>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	; 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40005400 	.word	0x40005400
 8001308:	40023800 	.word	0x40023800
 800130c:	40020400 	.word	0x40020400

08001310 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a28      	ldr	r2, [pc, #160]	; (80013d0 <HAL_I2S_MspInit+0xc0>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d14a      	bne.n	80013c8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <HAL_I2S_MspInit+0xc4>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a26      	ldr	r2, [pc, #152]	; (80013d4 <HAL_I2S_MspInit+0xc4>)
 800133c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <HAL_I2S_MspInit+0xc4>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_I2S_MspInit+0xc4>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a1f      	ldr	r2, [pc, #124]	; (80013d4 <HAL_I2S_MspInit+0xc4>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <HAL_I2S_MspInit+0xc4>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_I2S_MspInit+0xc4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <HAL_I2S_MspInit+0xc4>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_I2S_MspInit+0xc4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001386:	2310      	movs	r3, #16
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001396:	2306      	movs	r3, #6
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	480d      	ldr	r0, [pc, #52]	; (80013d8 <HAL_I2S_MspInit+0xc8>)
 80013a2:	f000 feb3 	bl	800210c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80013a6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013b8:	2306      	movs	r3, #6
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	4806      	ldr	r0, [pc, #24]	; (80013dc <HAL_I2S_MspInit+0xcc>)
 80013c4:	f000 fea2 	bl	800210c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40003c00 	.word	0x40003c00
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020800 	.word	0x40020800

080013e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a19      	ldr	r2, [pc, #100]	; (8001464 <HAL_SPI_MspInit+0x84>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d12b      	bne.n	800145a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_SPI_MspInit+0x88>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a17      	ldr	r2, [pc, #92]	; (8001468 <HAL_SPI_MspInit+0x88>)
 800140c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_SPI_MspInit+0x88>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_SPI_MspInit+0x88>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <HAL_SPI_MspInit+0x88>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_SPI_MspInit+0x88>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800143a:	23e0      	movs	r3, #224	; 0xe0
 800143c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800144a:	2305      	movs	r3, #5
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <HAL_SPI_MspInit+0x8c>)
 8001456:	f000 fe59 	bl	800210c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40013000 	.word	0x40013000
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000

08001470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <NMI_Handler+0x4>

08001476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <MemManage_Handler+0x4>

08001482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <UsageFault_Handler+0x4>

0800148e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014bc:	f000 f8d0 	bl	8001660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <OTG_FS_IRQHandler+0x10>)
 80014ca:	f001 ff09 	bl	80032e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20001a40 	.word	0x20001a40

080014d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e0:	4a14      	ldr	r2, [pc, #80]	; (8001534 <_sbrk+0x5c>)
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <_sbrk+0x60>)
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <_sbrk+0x64>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <_sbrk+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	429a      	cmp	r2, r3
 8001506:	d207      	bcs.n	8001518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001508:	f007 fa78 	bl	80089fc <__errno>
 800150c:	4603      	mov	r3, r0
 800150e:	220c      	movs	r2, #12
 8001510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001516:	e009      	b.n	800152c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <_sbrk+0x64>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <_sbrk+0x64>)
 8001528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20020000 	.word	0x20020000
 8001538:	00000400 	.word	0x00000400
 800153c:	20000200 	.word	0x20000200
 8001540:	20001e58 	.word	0x20001e58

08001544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <SystemInit+0x20>)
 800154a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <SystemInit+0x20>)
 8001550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800156c:	480d      	ldr	r0, [pc, #52]	; (80015a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800156e:	490e      	ldr	r1, [pc, #56]	; (80015a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001570:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001574:	e002      	b.n	800157c <LoopCopyDataInit>

08001576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157a:	3304      	adds	r3, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800157c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001580:	d3f9      	bcc.n	8001576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001584:	4c0b      	ldr	r4, [pc, #44]	; (80015b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001588:	e001      	b.n	800158e <LoopFillZerobss>

0800158a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800158c:	3204      	adds	r2, #4

0800158e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001590:	d3fb      	bcc.n	800158a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001592:	f7ff ffd7 	bl	8001544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001596:	f007 fa37 	bl	8008a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159a:	f7ff fb4b 	bl	8000c34 <main>
  bx  lr    
 800159e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80015ac:	080093b8 	.word	0x080093b8
  ldr r2, =_sbss
 80015b0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80015b4:	20001e58 	.word	0x20001e58

080015b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC_IRQHandler>
	...

080015bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <HAL_Init+0x40>)
 80015c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_Init+0x40>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <HAL_Init+0x40>)
 80015d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_Init+0x40>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_Init+0x40>)
 80015de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f000 fd4f 	bl	8002088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f000 f808 	bl	8001600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f0:	f7ff fdda 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023c00 	.word	0x40023c00

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x54>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_InitTick+0x58>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001616:	fbb3 f3f1 	udiv	r3, r3, r1
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f000 fd67 	bl	80020f2 <HAL_SYSTICK_Config>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e00e      	b.n	800164c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d80a      	bhi.n	800164a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001634:	2200      	movs	r2, #0
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800163c:	f000 fd2f 	bl	800209e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001640:	4a06      	ldr	r2, [pc, #24]	; (800165c <HAL_InitTick+0x5c>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e000      	b.n	800164c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000000 	.word	0x20000000
 8001658:	20000008 	.word	0x20000008
 800165c:	20000004 	.word	0x20000004

08001660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x20>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_IncTick+0x24>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <HAL_IncTick+0x24>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000008 	.word	0x20000008
 8001684:	2000056c 	.word	0x2000056c

08001688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return uwTick;
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <HAL_GetTick+0x14>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	2000056c 	.word	0x2000056c

080016a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a8:	f7ff ffee 	bl	8001688 <HAL_GetTick>
 80016ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016b8:	d005      	beq.n	80016c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_Delay+0x44>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4413      	add	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016c6:	bf00      	nop
 80016c8:	f7ff ffde 	bl	8001688 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d8f7      	bhi.n	80016c8 <HAL_Delay+0x28>
  {
  }
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008

080016e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e033      	b.n	8001766 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	2b00      	cmp	r3, #0
 8001704:	d109      	bne.n	800171a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fd76 	bl	80011f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	2b00      	cmp	r3, #0
 8001724:	d118      	bne.n	8001758 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800172e:	f023 0302 	bic.w	r3, r3, #2
 8001732:	f043 0202 	orr.w	r2, r3, #2
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 fad8 	bl	8001cf0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f023 0303 	bic.w	r3, r3, #3
 800174e:	f043 0201 	orr.w	r2, r3, #1
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	641a      	str	r2, [r3, #64]	; 0x40
 8001756:	e001      	b.n	800175c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_ADC_Start+0x1a>
 8001786:	2302      	movs	r3, #2
 8001788:	e0b2      	b.n	80018f0 <HAL_ADC_Start+0x180>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b01      	cmp	r3, #1
 800179e:	d018      	beq.n	80017d2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0201 	orr.w	r2, r2, #1
 80017ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017b0:	4b52      	ldr	r3, [pc, #328]	; (80018fc <HAL_ADC_Start+0x18c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a52      	ldr	r2, [pc, #328]	; (8001900 <HAL_ADC_Start+0x190>)
 80017b6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ba:	0c9a      	lsrs	r2, r3, #18
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80017c4:	e002      	b.n	80017cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f9      	bne.n	80017c6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d17a      	bne.n	80018d6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017e8:	f023 0301 	bic.w	r3, r3, #1
 80017ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800180a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800181a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800181e:	d106      	bne.n	800182e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001824:	f023 0206 	bic.w	r2, r3, #6
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	645a      	str	r2, [r3, #68]	; 0x44
 800182c:	e002      	b.n	8001834 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800183c:	4b31      	ldr	r3, [pc, #196]	; (8001904 <HAL_ADC_Start+0x194>)
 800183e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001848:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	2b00      	cmp	r3, #0
 8001854:	d12a      	bne.n	80018ac <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a2b      	ldr	r2, [pc, #172]	; (8001908 <HAL_ADC_Start+0x198>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d015      	beq.n	800188c <HAL_ADC_Start+0x11c>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a29      	ldr	r2, [pc, #164]	; (800190c <HAL_ADC_Start+0x19c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d105      	bne.n	8001876 <HAL_ADC_Start+0x106>
 800186a:	4b26      	ldr	r3, [pc, #152]	; (8001904 <HAL_ADC_Start+0x194>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 031f 	and.w	r3, r3, #31
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00a      	beq.n	800188c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a25      	ldr	r2, [pc, #148]	; (8001910 <HAL_ADC_Start+0x1a0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d136      	bne.n	80018ee <HAL_ADC_Start+0x17e>
 8001880:	4b20      	ldr	r3, [pc, #128]	; (8001904 <HAL_ADC_Start+0x194>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	2b00      	cmp	r3, #0
 800188a:	d130      	bne.n	80018ee <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d129      	bne.n	80018ee <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	e020      	b.n	80018ee <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a15      	ldr	r2, [pc, #84]	; (8001908 <HAL_ADC_Start+0x198>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d11b      	bne.n	80018ee <HAL_ADC_Start+0x17e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d114      	bne.n	80018ee <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	e00b      	b.n	80018ee <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f043 0210 	orr.w	r2, r3, #16
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f043 0201 	orr.w	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	20000000 	.word	0x20000000
 8001900:	431bde83 	.word	0x431bde83
 8001904:	40012300 	.word	0x40012300
 8001908:	40012000 	.word	0x40012000
 800190c:	40012100 	.word	0x40012100
 8001910:	40012200 	.word	0x40012200

08001914 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <HAL_ADC_Stop+0x16>
 8001926:	2302      	movs	r3, #2
 8001928:	e021      	b.n	800196e <HAL_ADC_Stop+0x5a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0201 	bic.w	r2, r2, #1
 8001940:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d109      	bne.n	8001964 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	f043 0201 	orr.w	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001996:	d113      	bne.n	80019c0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019a6:	d10b      	bne.n	80019c0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	f043 0220 	orr.w	r2, r3, #32
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e063      	b.n	8001a88 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80019c0:	f7ff fe62 	bl	8001688 <HAL_GetTick>
 80019c4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019c6:	e021      	b.n	8001a0c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019ce:	d01d      	beq.n	8001a0c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <HAL_ADC_PollForConversion+0x6c>
 80019d6:	f7ff fe57 	bl	8001688 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d212      	bcs.n	8001a0c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d00b      	beq.n	8001a0c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	f043 0204 	orr.w	r2, r3, #4
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e03d      	b.n	8001a88 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d1d6      	bne.n	80019c8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f06f 0212 	mvn.w	r2, #18
 8001a22:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d123      	bne.n	8001a86 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d11f      	bne.n	8001a86 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d111      	bne.n	8001a86 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d105      	bne.n	8001a86 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f043 0201 	orr.w	r2, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x1c>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e105      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x228>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b09      	cmp	r3, #9
 8001ad6:	d925      	bls.n	8001b24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68d9      	ldr	r1, [r3, #12]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	3b1e      	subs	r3, #30
 8001aee:	2207      	movs	r2, #7
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43da      	mvns	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	400a      	ands	r2, r1
 8001afc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68d9      	ldr	r1, [r3, #12]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	4603      	mov	r3, r0
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4403      	add	r3, r0
 8001b16:	3b1e      	subs	r3, #30
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	e022      	b.n	8001b6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6919      	ldr	r1, [r3, #16]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	461a      	mov	r2, r3
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	2207      	movs	r2, #7
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	400a      	ands	r2, r1
 8001b46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6919      	ldr	r1, [r3, #16]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	4618      	mov	r0, r3
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4403      	add	r3, r0
 8001b60:	409a      	lsls	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d824      	bhi.n	8001bbc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	3b05      	subs	r3, #5
 8001b84:	221f      	movs	r2, #31
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	400a      	ands	r2, r1
 8001b92:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	3b05      	subs	r3, #5
 8001bae:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bba:	e04c      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b0c      	cmp	r3, #12
 8001bc2:	d824      	bhi.n	8001c0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3b23      	subs	r3, #35	; 0x23
 8001bd6:	221f      	movs	r2, #31
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43da      	mvns	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	400a      	ands	r2, r1
 8001be4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3b23      	subs	r3, #35	; 0x23
 8001c00:	fa00 f203 	lsl.w	r2, r0, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c0c:	e023      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3b41      	subs	r3, #65	; 0x41
 8001c20:	221f      	movs	r2, #31
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	3b41      	subs	r3, #65	; 0x41
 8001c4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c56:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <HAL_ADC_ConfigChannel+0x234>)
 8001c58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a21      	ldr	r2, [pc, #132]	; (8001ce4 <HAL_ADC_ConfigChannel+0x238>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d109      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x1cc>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b12      	cmp	r3, #18
 8001c6a:	d105      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a19      	ldr	r2, [pc, #100]	; (8001ce4 <HAL_ADC_ConfigChannel+0x238>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d123      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x21e>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b10      	cmp	r3, #16
 8001c88:	d003      	beq.n	8001c92 <HAL_ADC_ConfigChannel+0x1e6>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b11      	cmp	r3, #17
 8001c90:	d11b      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b10      	cmp	r3, #16
 8001ca4:	d111      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <HAL_ADC_ConfigChannel+0x23c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a10      	ldr	r2, [pc, #64]	; (8001cec <HAL_ADC_ConfigChannel+0x240>)
 8001cac:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb0:	0c9a      	lsrs	r2, r3, #18
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cbc:	e002      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f9      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	40012300 	.word	0x40012300
 8001ce4:	40012000 	.word	0x40012000
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	431bde83 	.word	0x431bde83

08001cf0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cf8:	4b79      	ldr	r3, [pc, #484]	; (8001ee0 <ADC_Init+0x1f0>)
 8001cfa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	431a      	orrs	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6859      	ldr	r1, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	021a      	lsls	r2, r3, #8
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6859      	ldr	r1, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6899      	ldr	r1, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	4a58      	ldr	r2, [pc, #352]	; (8001ee4 <ADC_Init+0x1f4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d022      	beq.n	8001dce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6899      	ldr	r1, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001db8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6899      	ldr	r1, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	e00f      	b.n	8001dee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ddc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0202 	bic.w	r2, r2, #2
 8001dfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6899      	ldr	r1, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	7e1b      	ldrb	r3, [r3, #24]
 8001e08:	005a      	lsls	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d01b      	beq.n	8001e54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6859      	ldr	r1, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	3b01      	subs	r3, #1
 8001e48:	035a      	lsls	r2, r3, #13
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	e007      	b.n	8001e64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	051a      	lsls	r2, r3, #20
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6899      	ldr	r1, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ea6:	025a      	lsls	r2, r3, #9
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ebe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6899      	ldr	r1, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	029a      	lsls	r2, r3, #10
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	609a      	str	r2, [r3, #8]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	40012300 	.word	0x40012300
 8001ee4:	0f000001 	.word	0x0f000001

08001ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f04:	4013      	ands	r3, r2
 8001f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1a:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	60d3      	str	r3, [r2, #12]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <__NVIC_GetPriorityGrouping+0x18>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	f003 0307 	and.w	r3, r3, #7
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	db0b      	blt.n	8001f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	f003 021f 	and.w	r2, r3, #31
 8001f64:	4907      	ldr	r1, [pc, #28]	; (8001f84 <__NVIC_EnableIRQ+0x38>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000e100 	.word	0xe000e100

08001f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	db0a      	blt.n	8001fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	490c      	ldr	r1, [pc, #48]	; (8001fd4 <__NVIC_SetPriority+0x4c>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	0112      	lsls	r2, r2, #4
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	440b      	add	r3, r1
 8001fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb0:	e00a      	b.n	8001fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4908      	ldr	r1, [pc, #32]	; (8001fd8 <__NVIC_SetPriority+0x50>)
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	3b04      	subs	r3, #4
 8001fc0:	0112      	lsls	r2, r2, #4
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	761a      	strb	r2, [r3, #24]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000e100 	.word	0xe000e100
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	; 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f1c3 0307 	rsb	r3, r3, #7
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	bf28      	it	cs
 8001ffa:	2304      	movcs	r3, #4
 8001ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3304      	adds	r3, #4
 8002002:	2b06      	cmp	r3, #6
 8002004:	d902      	bls.n	800200c <NVIC_EncodePriority+0x30>
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3b03      	subs	r3, #3
 800200a:	e000      	b.n	800200e <NVIC_EncodePriority+0x32>
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43da      	mvns	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	401a      	ands	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002024:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	43d9      	mvns	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	4313      	orrs	r3, r2
         );
}
 8002036:	4618      	mov	r0, r3
 8002038:	3724      	adds	r7, #36	; 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002054:	d301      	bcc.n	800205a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002056:	2301      	movs	r3, #1
 8002058:	e00f      	b.n	800207a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205a:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <SysTick_Config+0x40>)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002062:	210f      	movs	r1, #15
 8002064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002068:	f7ff ff8e 	bl	8001f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <SysTick_Config+0x40>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <SysTick_Config+0x40>)
 8002074:	2207      	movs	r2, #7
 8002076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	e000e010 	.word	0xe000e010

08002088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ff29 	bl	8001ee8 <__NVIC_SetPriorityGrouping>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800209e:	b580      	push	{r7, lr}
 80020a0:	b086      	sub	sp, #24
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b0:	f7ff ff3e 	bl	8001f30 <__NVIC_GetPriorityGrouping>
 80020b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	6978      	ldr	r0, [r7, #20]
 80020bc:	f7ff ff8e 	bl	8001fdc <NVIC_EncodePriority>
 80020c0:	4602      	mov	r2, r0
 80020c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff5d 	bl	8001f88 <__NVIC_SetPriority>
}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff31 	bl	8001f4c <__NVIC_EnableIRQ>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff ffa2 	bl	8002044 <SysTick_Config>
 8002100:	4603      	mov	r3, r0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	; 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	e16b      	b.n	8002400 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002128:	2201      	movs	r2, #1
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	429a      	cmp	r2, r3
 8002142:	f040 815a 	bne.w	80023fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	2b01      	cmp	r3, #1
 8002150:	d005      	beq.n	800215e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800215a:	2b02      	cmp	r3, #2
 800215c:	d130      	bne.n	80021c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	2203      	movs	r2, #3
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002194:	2201      	movs	r2, #1
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 0201 	and.w	r2, r3, #1
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d017      	beq.n	80021fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d123      	bne.n	8002250 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	08da      	lsrs	r2, r3, #3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3208      	adds	r2, #8
 8002210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	220f      	movs	r2, #15
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	08da      	lsrs	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3208      	adds	r2, #8
 800224a:	69b9      	ldr	r1, [r7, #24]
 800224c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0203 	and.w	r2, r3, #3
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 80b4 	beq.w	80023fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b60      	ldr	r3, [pc, #384]	; (8002418 <HAL_GPIO_Init+0x30c>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	4a5f      	ldr	r2, [pc, #380]	; (8002418 <HAL_GPIO_Init+0x30c>)
 800229c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a0:	6453      	str	r3, [r2, #68]	; 0x44
 80022a2:	4b5d      	ldr	r3, [pc, #372]	; (8002418 <HAL_GPIO_Init+0x30c>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ae:	4a5b      	ldr	r2, [pc, #364]	; (800241c <HAL_GPIO_Init+0x310>)
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	089b      	lsrs	r3, r3, #2
 80022b4:	3302      	adds	r3, #2
 80022b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	220f      	movs	r2, #15
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a52      	ldr	r2, [pc, #328]	; (8002420 <HAL_GPIO_Init+0x314>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d02b      	beq.n	8002332 <HAL_GPIO_Init+0x226>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a51      	ldr	r2, [pc, #324]	; (8002424 <HAL_GPIO_Init+0x318>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d025      	beq.n	800232e <HAL_GPIO_Init+0x222>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a50      	ldr	r2, [pc, #320]	; (8002428 <HAL_GPIO_Init+0x31c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01f      	beq.n	800232a <HAL_GPIO_Init+0x21e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a4f      	ldr	r2, [pc, #316]	; (800242c <HAL_GPIO_Init+0x320>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d019      	beq.n	8002326 <HAL_GPIO_Init+0x21a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4e      	ldr	r2, [pc, #312]	; (8002430 <HAL_GPIO_Init+0x324>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d013      	beq.n	8002322 <HAL_GPIO_Init+0x216>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4d      	ldr	r2, [pc, #308]	; (8002434 <HAL_GPIO_Init+0x328>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00d      	beq.n	800231e <HAL_GPIO_Init+0x212>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4c      	ldr	r2, [pc, #304]	; (8002438 <HAL_GPIO_Init+0x32c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d007      	beq.n	800231a <HAL_GPIO_Init+0x20e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4b      	ldr	r2, [pc, #300]	; (800243c <HAL_GPIO_Init+0x330>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <HAL_GPIO_Init+0x20a>
 8002312:	2307      	movs	r3, #7
 8002314:	e00e      	b.n	8002334 <HAL_GPIO_Init+0x228>
 8002316:	2308      	movs	r3, #8
 8002318:	e00c      	b.n	8002334 <HAL_GPIO_Init+0x228>
 800231a:	2306      	movs	r3, #6
 800231c:	e00a      	b.n	8002334 <HAL_GPIO_Init+0x228>
 800231e:	2305      	movs	r3, #5
 8002320:	e008      	b.n	8002334 <HAL_GPIO_Init+0x228>
 8002322:	2304      	movs	r3, #4
 8002324:	e006      	b.n	8002334 <HAL_GPIO_Init+0x228>
 8002326:	2303      	movs	r3, #3
 8002328:	e004      	b.n	8002334 <HAL_GPIO_Init+0x228>
 800232a:	2302      	movs	r3, #2
 800232c:	e002      	b.n	8002334 <HAL_GPIO_Init+0x228>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <HAL_GPIO_Init+0x228>
 8002332:	2300      	movs	r3, #0
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	f002 0203 	and.w	r2, r2, #3
 800233a:	0092      	lsls	r2, r2, #2
 800233c:	4093      	lsls	r3, r2
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002344:	4935      	ldr	r1, [pc, #212]	; (800241c <HAL_GPIO_Init+0x310>)
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	3302      	adds	r3, #2
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002352:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <HAL_GPIO_Init+0x334>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002376:	4a32      	ldr	r2, [pc, #200]	; (8002440 <HAL_GPIO_Init+0x334>)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800237c:	4b30      	ldr	r3, [pc, #192]	; (8002440 <HAL_GPIO_Init+0x334>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023a0:	4a27      	ldr	r2, [pc, #156]	; (8002440 <HAL_GPIO_Init+0x334>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <HAL_GPIO_Init+0x334>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ca:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <HAL_GPIO_Init+0x334>)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <HAL_GPIO_Init+0x334>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023f4:	4a12      	ldr	r2, [pc, #72]	; (8002440 <HAL_GPIO_Init+0x334>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3301      	adds	r3, #1
 80023fe:	61fb      	str	r3, [r7, #28]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	2b0f      	cmp	r3, #15
 8002404:	f67f ae90 	bls.w	8002128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3724      	adds	r7, #36	; 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800
 800241c:	40013800 	.word	0x40013800
 8002420:	40020000 	.word	0x40020000
 8002424:	40020400 	.word	0x40020400
 8002428:	40020800 	.word	0x40020800
 800242c:	40020c00 	.word	0x40020c00
 8002430:	40021000 	.word	0x40021000
 8002434:	40021400 	.word	0x40021400
 8002438:	40021800 	.word	0x40021800
 800243c:	40021c00 	.word	0x40021c00
 8002440:	40013c00 	.word	0x40013c00

08002444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
 8002450:	4613      	mov	r3, r2
 8002452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002454:	787b      	ldrb	r3, [r7, #1]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002460:	e003      	b.n	800246a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002462:	887b      	ldrh	r3, [r7, #2]
 8002464:	041a      	lsls	r2, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	619a      	str	r2, [r3, #24]
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e12b      	b.n	80026e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fe feee 	bl	8001280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2224      	movs	r2, #36	; 0x24
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0201 	bic.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024dc:	f002 fb80 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 80024e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4a81      	ldr	r2, [pc, #516]	; (80026ec <HAL_I2C_Init+0x274>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d807      	bhi.n	80024fc <HAL_I2C_Init+0x84>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4a80      	ldr	r2, [pc, #512]	; (80026f0 <HAL_I2C_Init+0x278>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	bf94      	ite	ls
 80024f4:	2301      	movls	r3, #1
 80024f6:	2300      	movhi	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	e006      	b.n	800250a <HAL_I2C_Init+0x92>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4a7d      	ldr	r2, [pc, #500]	; (80026f4 <HAL_I2C_Init+0x27c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	bf94      	ite	ls
 8002504:	2301      	movls	r3, #1
 8002506:	2300      	movhi	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e0e7      	b.n	80026e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4a78      	ldr	r2, [pc, #480]	; (80026f8 <HAL_I2C_Init+0x280>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	0c9b      	lsrs	r3, r3, #18
 800251c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	430a      	orrs	r2, r1
 8002530:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4a6a      	ldr	r2, [pc, #424]	; (80026ec <HAL_I2C_Init+0x274>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d802      	bhi.n	800254c <HAL_I2C_Init+0xd4>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	3301      	adds	r3, #1
 800254a:	e009      	b.n	8002560 <HAL_I2C_Init+0xe8>
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	4a69      	ldr	r2, [pc, #420]	; (80026fc <HAL_I2C_Init+0x284>)
 8002558:	fba2 2303 	umull	r2, r3, r2, r3
 800255c:	099b      	lsrs	r3, r3, #6
 800255e:	3301      	adds	r3, #1
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	430b      	orrs	r3, r1
 8002566:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002572:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	495c      	ldr	r1, [pc, #368]	; (80026ec <HAL_I2C_Init+0x274>)
 800257c:	428b      	cmp	r3, r1
 800257e:	d819      	bhi.n	80025b4 <HAL_I2C_Init+0x13c>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1e59      	subs	r1, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fbb1 f3f3 	udiv	r3, r1, r3
 800258e:	1c59      	adds	r1, r3, #1
 8002590:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002594:	400b      	ands	r3, r1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00a      	beq.n	80025b0 <HAL_I2C_Init+0x138>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1e59      	subs	r1, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025a8:	3301      	adds	r3, #1
 80025aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ae:	e051      	b.n	8002654 <HAL_I2C_Init+0x1dc>
 80025b0:	2304      	movs	r3, #4
 80025b2:	e04f      	b.n	8002654 <HAL_I2C_Init+0x1dc>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d111      	bne.n	80025e0 <HAL_I2C_Init+0x168>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1e58      	subs	r0, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	440b      	add	r3, r1
 80025ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf0c      	ite	eq
 80025d8:	2301      	moveq	r3, #1
 80025da:	2300      	movne	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	e012      	b.n	8002606 <HAL_I2C_Init+0x18e>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1e58      	subs	r0, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6859      	ldr	r1, [r3, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	0099      	lsls	r1, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f6:	3301      	adds	r3, #1
 80025f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf0c      	ite	eq
 8002600:	2301      	moveq	r3, #1
 8002602:	2300      	movne	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_I2C_Init+0x196>
 800260a:	2301      	movs	r3, #1
 800260c:	e022      	b.n	8002654 <HAL_I2C_Init+0x1dc>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10e      	bne.n	8002634 <HAL_I2C_Init+0x1bc>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1e58      	subs	r0, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6859      	ldr	r1, [r3, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	440b      	add	r3, r1
 8002624:	fbb0 f3f3 	udiv	r3, r0, r3
 8002628:	3301      	adds	r3, #1
 800262a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002632:	e00f      	b.n	8002654 <HAL_I2C_Init+0x1dc>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1e58      	subs	r0, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6859      	ldr	r1, [r3, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	0099      	lsls	r1, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	fbb0 f3f3 	udiv	r3, r0, r3
 800264a:	3301      	adds	r3, #1
 800264c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	6809      	ldr	r1, [r1, #0]
 8002658:	4313      	orrs	r3, r2
 800265a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69da      	ldr	r2, [r3, #28]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002682:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6911      	ldr	r1, [r2, #16]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68d2      	ldr	r2, [r2, #12]
 800268e:	4311      	orrs	r1, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	430b      	orrs	r3, r1
 8002696:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	000186a0 	.word	0x000186a0
 80026f0:	001e847f 	.word	0x001e847f
 80026f4:	003d08ff 	.word	0x003d08ff
 80026f8:	431bde83 	.word	0x431bde83
 80026fc:	10624dd3 	.word	0x10624dd3

08002700 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e128      	b.n	8002964 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a90      	ldr	r2, [pc, #576]	; (800296c <HAL_I2S_Init+0x26c>)
 800272a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7fe fdef 	bl	8001310 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002748:	f023 030f 	bic.w	r3, r3, #15
 800274c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2202      	movs	r2, #2
 8002754:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d060      	beq.n	8002820 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d102      	bne.n	800276c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002766:	2310      	movs	r3, #16
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	e001      	b.n	8002770 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800276c:	2320      	movs	r3, #32
 800276e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b20      	cmp	r3, #32
 8002776:	d802      	bhi.n	800277e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800277e:	2001      	movs	r0, #1
 8002780:	f002 fb24 	bl	8004dcc <HAL_RCCEx_GetPeriphCLKFreq>
 8002784:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800278e:	d125      	bne.n	80027dc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d010      	beq.n	80027ba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	fbb2 f2f3 	udiv	r2, r2, r3
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	461a      	mov	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b4:	3305      	adds	r3, #5
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	e01f      	b.n	80027fa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	461a      	mov	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	3305      	adds	r3, #5
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	e00e      	b.n	80027fa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	461a      	mov	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f6:	3305      	adds	r3, #5
 80027f8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4a5c      	ldr	r2, [pc, #368]	; (8002970 <HAL_I2S_Init+0x270>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	08db      	lsrs	r3, r3, #3
 8002804:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	085b      	lsrs	r3, r3, #1
 8002816:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	e003      	b.n	8002828 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002820:	2302      	movs	r3, #2
 8002822:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d902      	bls.n	8002834 <HAL_I2S_Init+0x134>
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	2bff      	cmp	r3, #255	; 0xff
 8002832:	d907      	bls.n	8002844 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	f043 0210 	orr.w	r2, r3, #16
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e08f      	b.n	8002964 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	ea42 0103 	orr.w	r1, r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	430a      	orrs	r2, r1
 8002856:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002862:	f023 030f 	bic.w	r3, r3, #15
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6851      	ldr	r1, [r2, #4]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6892      	ldr	r2, [r2, #8]
 800286e:	4311      	orrs	r1, r2
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	68d2      	ldr	r2, [r2, #12]
 8002874:	4311      	orrs	r1, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6992      	ldr	r2, [r2, #24]
 800287a:	430a      	orrs	r2, r1
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002886:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d161      	bne.n	8002954 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a38      	ldr	r2, [pc, #224]	; (8002974 <HAL_I2S_Init+0x274>)
 8002894:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a37      	ldr	r2, [pc, #220]	; (8002978 <HAL_I2S_Init+0x278>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_I2S_Init+0x1a4>
 80028a0:	4b36      	ldr	r3, [pc, #216]	; (800297c <HAL_I2S_Init+0x27c>)
 80028a2:	e001      	b.n	80028a8 <HAL_I2S_Init+0x1a8>
 80028a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	4932      	ldr	r1, [pc, #200]	; (8002978 <HAL_I2S_Init+0x278>)
 80028b0:	428a      	cmp	r2, r1
 80028b2:	d101      	bne.n	80028b8 <HAL_I2S_Init+0x1b8>
 80028b4:	4a31      	ldr	r2, [pc, #196]	; (800297c <HAL_I2S_Init+0x27c>)
 80028b6:	e001      	b.n	80028bc <HAL_I2S_Init+0x1bc>
 80028b8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80028bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028c0:	f023 030f 	bic.w	r3, r3, #15
 80028c4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a2b      	ldr	r2, [pc, #172]	; (8002978 <HAL_I2S_Init+0x278>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d101      	bne.n	80028d4 <HAL_I2S_Init+0x1d4>
 80028d0:	4b2a      	ldr	r3, [pc, #168]	; (800297c <HAL_I2S_Init+0x27c>)
 80028d2:	e001      	b.n	80028d8 <HAL_I2S_Init+0x1d8>
 80028d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028d8:	2202      	movs	r2, #2
 80028da:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a25      	ldr	r2, [pc, #148]	; (8002978 <HAL_I2S_Init+0x278>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d101      	bne.n	80028ea <HAL_I2S_Init+0x1ea>
 80028e6:	4b25      	ldr	r3, [pc, #148]	; (800297c <HAL_I2S_Init+0x27c>)
 80028e8:	e001      	b.n	80028ee <HAL_I2S_Init+0x1ee>
 80028ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028fa:	d003      	beq.n	8002904 <HAL_I2S_Init+0x204>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d103      	bne.n	800290c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	e001      	b.n	8002910 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800290c:	2300      	movs	r3, #0
 800290e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800291a:	4313      	orrs	r3, r2
 800291c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002924:	4313      	orrs	r3, r2
 8002926:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800292e:	4313      	orrs	r3, r2
 8002930:	b29a      	uxth	r2, r3
 8002932:	897b      	ldrh	r3, [r7, #10]
 8002934:	4313      	orrs	r3, r2
 8002936:	b29b      	uxth	r3, r3
 8002938:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800293c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a0d      	ldr	r2, [pc, #52]	; (8002978 <HAL_I2S_Init+0x278>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d101      	bne.n	800294c <HAL_I2S_Init+0x24c>
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <HAL_I2S_Init+0x27c>)
 800294a:	e001      	b.n	8002950 <HAL_I2S_Init+0x250>
 800294c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002950:	897a      	ldrh	r2, [r7, #10]
 8002952:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3720      	adds	r7, #32
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	08002a77 	.word	0x08002a77
 8002970:	cccccccd 	.word	0xcccccccd
 8002974:	08002b8d 	.word	0x08002b8d
 8002978:	40003800 	.word	0x40003800
 800297c:	40003400 	.word	0x40003400

08002980 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	881a      	ldrh	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	1c9a      	adds	r2, r3, #2
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10e      	bne.n	8002a10 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a00:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ffb8 	bl	8002980 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	b292      	uxth	r2, r2
 8002a2c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	1c9a      	adds	r2, r3, #2
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10e      	bne.n	8002a6e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a5e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff93 	bl	8002994 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d13a      	bne.n	8002b08 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d109      	bne.n	8002ab0 <I2S_IRQHandler+0x3a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa6:	2b40      	cmp	r3, #64	; 0x40
 8002aa8:	d102      	bne.n	8002ab0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ffb4 	bl	8002a18 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab6:	2b40      	cmp	r3, #64	; 0x40
 8002ab8:	d126      	bne.n	8002b08 <I2S_IRQHandler+0x92>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b20      	cmp	r3, #32
 8002ac6:	d11f      	bne.n	8002b08 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ad6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ad8:	2300      	movs	r3, #0
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f043 0202 	orr.w	r2, r3, #2
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff ff50 	bl	80029a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d136      	bne.n	8002b82 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d109      	bne.n	8002b32 <I2S_IRQHandler+0xbc>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b80      	cmp	r3, #128	; 0x80
 8002b2a:	d102      	bne.n	8002b32 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ff45 	bl	80029bc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d122      	bne.n	8002b82 <I2S_IRQHandler+0x10c>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d11b      	bne.n	8002b82 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b58:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	f043 0204 	orr.w	r2, r3, #4
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7ff ff13 	bl	80029a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b82:	bf00      	nop
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4aa2      	ldr	r2, [pc, #648]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d101      	bne.n	8002baa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002ba6:	4ba2      	ldr	r3, [pc, #648]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ba8:	e001      	b.n	8002bae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002baa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a9b      	ldr	r2, [pc, #620]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d101      	bne.n	8002bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002bc4:	4b9a      	ldr	r3, [pc, #616]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bc6:	e001      	b.n	8002bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002bc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd8:	d004      	beq.n	8002be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f040 8099 	bne.w	8002d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d107      	bne.n	8002bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f925 	bl	8002e48 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d107      	bne.n	8002c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f9c8 	bl	8002fa8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d13a      	bne.n	8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d035      	beq.n	8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a7e      	ldr	r2, [pc, #504]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c36:	4b7e      	ldr	r3, [pc, #504]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c38:	e001      	b.n	8002c3e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4979      	ldr	r1, [pc, #484]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c46:	428b      	cmp	r3, r1
 8002c48:	d101      	bne.n	8002c4e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c4a:	4b79      	ldr	r3, [pc, #484]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c4c:	e001      	b.n	8002c52 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c56:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c66:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	f043 0202 	orr.w	r2, r3, #2
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff fe88 	bl	80029a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	f040 80be 	bne.w	8002e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 80b8 	beq.w	8002e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cbe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a59      	ldr	r2, [pc, #356]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002cca:	4b59      	ldr	r3, [pc, #356]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ccc:	e001      	b.n	8002cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002cce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4954      	ldr	r1, [pc, #336]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cda:	428b      	cmp	r3, r1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002cde:	4b54      	ldr	r3, [pc, #336]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ce0:	e001      	b.n	8002ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002ce2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ce6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002cec:	2300      	movs	r3, #0
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	f043 0204 	orr.w	r2, r3, #4
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff fe4a 	bl	80029a8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d14:	e084      	b.n	8002e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d107      	bne.n	8002d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f8be 	bl	8002eac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d107      	bne.n	8002d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f8fd 	bl	8002f44 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d50:	2b40      	cmp	r3, #64	; 0x40
 8002d52:	d12f      	bne.n	8002db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d02a      	beq.n	8002db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d6c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a2e      	ldr	r2, [pc, #184]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d101      	bne.n	8002d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d78:	4b2d      	ldr	r3, [pc, #180]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d7a:	e001      	b.n	8002d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4929      	ldr	r1, [pc, #164]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d88:	428b      	cmp	r3, r1
 8002d8a:	d101      	bne.n	8002d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d8c:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d8e:	e001      	b.n	8002d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d98:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f043 0202 	orr.w	r2, r3, #2
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff fdfa 	bl	80029a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d131      	bne.n	8002e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d02c      	beq.n	8002e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a17      	ldr	r2, [pc, #92]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d101      	bne.n	8002dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002dd2:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dd4:	e001      	b.n	8002dda <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002dd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4912      	ldr	r1, [pc, #72]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002de2:	428b      	cmp	r3, r1
 8002de4:	d101      	bne.n	8002dea <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002de8:	e001      	b.n	8002dee <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002dea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002df2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e02:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	f043 0204 	orr.w	r2, r3, #4
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff fdc5 	bl	80029a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e1e:	e000      	b.n	8002e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e20:	bf00      	nop
}
 8002e22:	bf00      	nop
 8002e24:	3720      	adds	r7, #32
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40003800 	.word	0x40003800
 8002e30:	40003400 	.word	0x40003400

08002e34 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	1c99      	adds	r1, r3, #2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6251      	str	r1, [r2, #36]	; 0x24
 8002e5a:	881a      	ldrh	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d113      	bne.n	8002ea2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d106      	bne.n	8002ea2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff ffc9 	bl	8002e34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	1c99      	adds	r1, r3, #2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6251      	str	r1, [r2, #36]	; 0x24
 8002ebe:	8819      	ldrh	r1, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a1d      	ldr	r2, [pc, #116]	; (8002f3c <I2SEx_TxISR_I2SExt+0x90>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d101      	bne.n	8002ece <I2SEx_TxISR_I2SExt+0x22>
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <I2SEx_TxISR_I2SExt+0x94>)
 8002ecc:	e001      	b.n	8002ed2 <I2SEx_TxISR_I2SExt+0x26>
 8002ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ed2:	460a      	mov	r2, r1
 8002ed4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d121      	bne.n	8002f32 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <I2SEx_TxISR_I2SExt+0x90>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d101      	bne.n	8002efc <I2SEx_TxISR_I2SExt+0x50>
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <I2SEx_TxISR_I2SExt+0x94>)
 8002efa:	e001      	b.n	8002f00 <I2SEx_TxISR_I2SExt+0x54>
 8002efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	490d      	ldr	r1, [pc, #52]	; (8002f3c <I2SEx_TxISR_I2SExt+0x90>)
 8002f08:	428b      	cmp	r3, r1
 8002f0a:	d101      	bne.n	8002f10 <I2SEx_TxISR_I2SExt+0x64>
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <I2SEx_TxISR_I2SExt+0x94>)
 8002f0e:	e001      	b.n	8002f14 <I2SEx_TxISR_I2SExt+0x68>
 8002f10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d106      	bne.n	8002f32 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ff81 	bl	8002e34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40003800 	.word	0x40003800
 8002f40:	40003400 	.word	0x40003400

08002f44 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68d8      	ldr	r0, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	1c99      	adds	r1, r3, #2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f5c:	b282      	uxth	r2, r0
 8002f5e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d113      	bne.n	8002fa0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f86:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff ff4a 	bl	8002e34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a20      	ldr	r2, [pc, #128]	; (8003038 <I2SEx_RxISR_I2SExt+0x90>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d101      	bne.n	8002fbe <I2SEx_RxISR_I2SExt+0x16>
 8002fba:	4b20      	ldr	r3, [pc, #128]	; (800303c <I2SEx_RxISR_I2SExt+0x94>)
 8002fbc:	e001      	b.n	8002fc2 <I2SEx_RxISR_I2SExt+0x1a>
 8002fbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fc2:	68d8      	ldr	r0, [r3, #12]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	1c99      	adds	r1, r3, #2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fce:	b282      	uxth	r2, r0
 8002fd0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d121      	bne.n	800302e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a12      	ldr	r2, [pc, #72]	; (8003038 <I2SEx_RxISR_I2SExt+0x90>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d101      	bne.n	8002ff8 <I2SEx_RxISR_I2SExt+0x50>
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <I2SEx_RxISR_I2SExt+0x94>)
 8002ff6:	e001      	b.n	8002ffc <I2SEx_RxISR_I2SExt+0x54>
 8002ff8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	490d      	ldr	r1, [pc, #52]	; (8003038 <I2SEx_RxISR_I2SExt+0x90>)
 8003004:	428b      	cmp	r3, r1
 8003006:	d101      	bne.n	800300c <I2SEx_RxISR_I2SExt+0x64>
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <I2SEx_RxISR_I2SExt+0x94>)
 800300a:	e001      	b.n	8003010 <I2SEx_RxISR_I2SExt+0x68>
 800300c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003010:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003014:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d106      	bne.n	800302e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff ff03 	bl	8002e34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40003800 	.word	0x40003800
 800303c:	40003400 	.word	0x40003400

08003040 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003042:	b08f      	sub	sp, #60	; 0x3c
 8003044:	af0a      	add	r7, sp, #40	; 0x28
 8003046:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e10f      	b.n	8003272 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d106      	bne.n	8003072 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f005 f9a3 	bl	80083b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2203      	movs	r2, #3
 8003076:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003082:	2b00      	cmp	r3, #0
 8003084:	d102      	bne.n	800308c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f002 f896 	bl	80051c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	687e      	ldr	r6, [r7, #4]
 800309e:	466d      	mov	r5, sp
 80030a0:	f106 0410 	add.w	r4, r6, #16
 80030a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80030b4:	1d33      	adds	r3, r6, #4
 80030b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030b8:	6838      	ldr	r0, [r7, #0]
 80030ba:	f001 ff6e 	bl	8004f9a <USB_CoreInit>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0d0      	b.n	8003272 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2100      	movs	r1, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f002 f884 	bl	80051e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030dc:	2300      	movs	r3, #0
 80030de:	73fb      	strb	r3, [r7, #15]
 80030e0:	e04a      	b.n	8003178 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030e2:	7bfa      	ldrb	r2, [r7, #15]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	333d      	adds	r3, #61	; 0x3d
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030f6:	7bfa      	ldrb	r2, [r7, #15]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	333c      	adds	r3, #60	; 0x3c
 8003106:	7bfa      	ldrb	r2, [r7, #15]
 8003108:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800310a:	7bfa      	ldrb	r2, [r7, #15]
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	b298      	uxth	r0, r3
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	3342      	adds	r3, #66	; 0x42
 800311e:	4602      	mov	r2, r0
 8003120:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	333f      	adds	r3, #63	; 0x3f
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	1a9b      	subs	r3, r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	3344      	adds	r3, #68	; 0x44
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	3348      	adds	r3, #72	; 0x48
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800315e:	7bfa      	ldrb	r2, [r7, #15]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	3350      	adds	r3, #80	; 0x50
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	3301      	adds	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	429a      	cmp	r2, r3
 8003180:	d3af      	bcc.n	80030e2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
 8003186:	e044      	b.n	8003212 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003188:	7bfa      	ldrb	r2, [r7, #15]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800319e:	7bfa      	ldrb	r2, [r7, #15]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80031c6:	2200      	movs	r2, #0
 80031c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031ca:	7bfa      	ldrb	r2, [r7, #15]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031f6:	7bfa      	ldrb	r2, [r7, #15]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800320c:	7bfb      	ldrb	r3, [r7, #15]
 800320e:	3301      	adds	r3, #1
 8003210:	73fb      	strb	r3, [r7, #15]
 8003212:	7bfa      	ldrb	r2, [r7, #15]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	429a      	cmp	r2, r3
 800321a:	d3b5      	bcc.n	8003188 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	603b      	str	r3, [r7, #0]
 8003222:	687e      	ldr	r6, [r7, #4]
 8003224:	466d      	mov	r5, sp
 8003226:	f106 0410 	add.w	r4, r6, #16
 800322a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800322c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800322e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003232:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003236:	e885 0003 	stmia.w	r5, {r0, r1}
 800323a:	1d33      	adds	r3, r6, #4
 800323c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800323e:	6838      	ldr	r0, [r7, #0]
 8003240:	f002 f81c 	bl	800527c <USB_DevInit>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2202      	movs	r2, #2
 800324e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e00d      	b.n	8003272 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f003 f898 	bl	80063a0 <USB_DevDisconnect>

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800327a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_PCD_Start+0x1c>
 8003292:	2302      	movs	r3, #2
 8003294:	e020      	b.n	80032d8 <HAL_PCD_Start+0x5e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d109      	bne.n	80032ba <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d005      	beq.n	80032ba <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f001 ff6e 	bl	80051a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f003 f848 	bl	800635e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b08d      	sub	sp, #52	; 0x34
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f003 f906 	bl	8006508 <USB_GetMode>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f040 839d 	bne.w	8003a3e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f003 f86a 	bl	80063e2 <USB_ReadInterrupts>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 8393 	beq.w	8003a3c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f003 f861 	bl	80063e2 <USB_ReadInterrupts>
 8003320:	4603      	mov	r3, r0
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b02      	cmp	r3, #2
 8003328:	d107      	bne.n	800333a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f002 0202 	and.w	r2, r2, #2
 8003338:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f003 f84f 	bl	80063e2 <USB_ReadInterrupts>
 8003344:	4603      	mov	r3, r0
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b10      	cmp	r3, #16
 800334c:	d161      	bne.n	8003412 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699a      	ldr	r2, [r3, #24]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0210 	bic.w	r2, r2, #16
 800335c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	f003 020f 	and.w	r2, r3, #15
 800336a:	4613      	mov	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	4413      	add	r3, r2
 800337a:	3304      	adds	r3, #4
 800337c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	0c5b      	lsrs	r3, r3, #17
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	2b02      	cmp	r3, #2
 8003388:	d124      	bne.n	80033d4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d035      	beq.n	8003402 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	6a38      	ldr	r0, [r7, #32]
 80033aa:	f002 fe86 	bl	80060ba <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ba:	441a      	add	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	699a      	ldr	r2, [r3, #24]
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	091b      	lsrs	r3, r3, #4
 80033c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033cc:	441a      	add	r2, r3
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	619a      	str	r2, [r3, #24]
 80033d2:	e016      	b.n	8003402 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	0c5b      	lsrs	r3, r3, #17
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	2b06      	cmp	r3, #6
 80033de:	d110      	bne.n	8003402 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033e6:	2208      	movs	r2, #8
 80033e8:	4619      	mov	r1, r3
 80033ea:	6a38      	ldr	r0, [r7, #32]
 80033ec:	f002 fe65 	bl	80060ba <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	699a      	ldr	r2, [r3, #24]
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	091b      	lsrs	r3, r3, #4
 80033f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033fc:	441a      	add	r2, r3
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699a      	ldr	r2, [r3, #24]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0210 	orr.w	r2, r2, #16
 8003410:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f002 ffe3 	bl	80063e2 <USB_ReadInterrupts>
 800341c:	4603      	mov	r3, r0
 800341e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003422:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003426:	d16e      	bne.n	8003506 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f002 ffe9 	bl	8006408 <USB_ReadDevAllOutEpInterrupt>
 8003436:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003438:	e062      	b.n	8003500 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d057      	beq.n	80034f4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	4611      	mov	r1, r2
 800344e:	4618      	mov	r0, r3
 8003450:	f003 f80e 	bl	8006470 <USB_ReadDevOutEPInterrupt>
 8003454:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00c      	beq.n	800347a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346c:	461a      	mov	r2, r3
 800346e:	2301      	movs	r3, #1
 8003470:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003472:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fdb1 	bl	8003fdc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00c      	beq.n	800349e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	4413      	add	r3, r2
 800348c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003490:	461a      	mov	r2, r3
 8003492:	2308      	movs	r3, #8
 8003494:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003496:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 feab 	bl	80041f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b4:	461a      	mov	r2, r3
 80034b6:	2310      	movs	r3, #16
 80034b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d0:	461a      	mov	r2, r3
 80034d2:	2320      	movs	r3, #32
 80034d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d009      	beq.n	80034f4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ec:	461a      	mov	r2, r3
 80034ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034f2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	3301      	adds	r3, #1
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	085b      	lsrs	r3, r3, #1
 80034fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	2b00      	cmp	r3, #0
 8003504:	d199      	bne.n	800343a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f002 ff69 	bl	80063e2 <USB_ReadInterrupts>
 8003510:	4603      	mov	r3, r0
 8003512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003516:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800351a:	f040 80c0 	bne.w	800369e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f002 ff8a 	bl	800643c <USB_ReadDevAllInEpInterrupt>
 8003528:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800352e:	e0b2      	b.n	8003696 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80a7 	beq.w	800368a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	4611      	mov	r1, r2
 8003546:	4618      	mov	r0, r3
 8003548:	f002 ffb0 	bl	80064ac <USB_ReadDevInEPInterrupt>
 800354c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d057      	beq.n	8003608 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	2201      	movs	r2, #1
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800356c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	43db      	mvns	r3, r3
 8003572:	69f9      	ldr	r1, [r7, #28]
 8003574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003578:	4013      	ands	r3, r2
 800357a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003588:	461a      	mov	r2, r3
 800358a:	2301      	movs	r3, #1
 800358c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d132      	bne.n	80035fc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	3348      	adds	r3, #72	; 0x48
 80035a6:	6819      	ldr	r1, [r3, #0]
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4403      	add	r3, r0
 80035b6:	3344      	adds	r3, #68	; 0x44
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4419      	add	r1, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4403      	add	r3, r0
 80035ca:	3348      	adds	r3, #72	; 0x48
 80035cc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d113      	bne.n	80035fc <HAL_PCD_IRQHandler+0x31c>
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	3350      	adds	r3, #80	; 0x50
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d108      	bne.n	80035fc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035f4:	461a      	mov	r2, r3
 80035f6:	2101      	movs	r1, #1
 80035f8:	f002 ffb8 	bl	800656c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f004 ff67 	bl	80084d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d008      	beq.n	8003624 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	4413      	add	r3, r2
 800361a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361e:	461a      	mov	r2, r3
 8003620:	2308      	movs	r3, #8
 8003622:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	2b00      	cmp	r3, #0
 800362c:	d008      	beq.n	8003640 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363a:	461a      	mov	r2, r3
 800363c:	2310      	movs	r3, #16
 800363e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003656:	461a      	mov	r2, r3
 8003658:	2340      	movs	r3, #64	; 0x40
 800365a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003672:	461a      	mov	r2, r3
 8003674:	2302      	movs	r3, #2
 8003676:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fc1b 	bl	8003ec0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	3301      	adds	r3, #1
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003692:	085b      	lsrs	r3, r3, #1
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003698:	2b00      	cmp	r3, #0
 800369a:	f47f af49 	bne.w	8003530 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f002 fe9d 	bl	80063e2 <USB_ReadInterrupts>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036b2:	d122      	bne.n	80036fa <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c2:	f023 0301 	bic.w	r3, r3, #1
 80036c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d108      	bne.n	80036e4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036da:	2100      	movs	r1, #0
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fe27 	bl	8004330 <HAL_PCDEx_LPM_Callback>
 80036e2:	e002      	b.n	80036ea <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f004 ff6d 	bl	80085c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80036f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f002 fe6f 	bl	80063e2 <USB_ReadInterrupts>
 8003704:	4603      	mov	r3, r0
 8003706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800370a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800370e:	d112      	bne.n	8003736 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b01      	cmp	r3, #1
 800371e:	d102      	bne.n	8003726 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f004 ff29 	bl	8008578 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003734:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f002 fe51 	bl	80063e2 <USB_ReadInterrupts>
 8003740:	4603      	mov	r3, r0
 8003742:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374a:	f040 80c7 	bne.w	80038dc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2110      	movs	r1, #16
 8003768:	4618      	mov	r0, r3
 800376a:	f001 feeb 	bl	8005544 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800376e:	2300      	movs	r3, #0
 8003770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003772:	e056      	b.n	8003822 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003780:	461a      	mov	r2, r3
 8003782:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003786:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003798:	0151      	lsls	r1, r2, #5
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	440a      	add	r2, r1
 800379e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037a6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80037a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037b8:	0151      	lsls	r1, r2, #5
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	440a      	add	r2, r1
 80037be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d4:	461a      	mov	r2, r3
 80037d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ec:	0151      	lsls	r1, r2, #5
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	440a      	add	r2, r1
 80037f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800380c:	0151      	lsls	r1, r2, #5
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	440a      	add	r2, r1
 8003812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003816:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800381a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381e:	3301      	adds	r3, #1
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003828:	429a      	cmp	r2, r3
 800382a:	d3a3      	bcc.n	8003774 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800383a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800383e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	2b00      	cmp	r3, #0
 8003846:	d016      	beq.n	8003876 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003858:	f043 030b 	orr.w	r3, r3, #11
 800385c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800386e:	f043 030b 	orr.w	r3, r3, #11
 8003872:	6453      	str	r3, [r2, #68]	; 0x44
 8003874:	e015      	b.n	80038a2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003884:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003888:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800388c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800389c:	f043 030b 	orr.w	r3, r3, #11
 80038a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80038b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038c6:	461a      	mov	r2, r3
 80038c8:	f002 fe50 	bl	800656c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80038da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f002 fd7e 	bl	80063e2 <USB_ReadInterrupts>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f0:	d124      	bne.n	800393c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f002 fe14 	bl	8006524 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f001 fe7c 	bl	80055fe <USB_GetDevSpeed>
 8003906:	4603      	mov	r3, r0
 8003908:	461a      	mov	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681c      	ldr	r4, [r3, #0]
 8003912:	f001 f959 	bl	8004bc8 <HAL_RCC_GetHCLKFreq>
 8003916:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800391c:	b2db      	uxtb	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	4620      	mov	r0, r4
 8003922:	f001 fb9b 	bl	800505c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f004 fdfd 	bl	8008526 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800393a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f002 fd4e 	bl	80063e2 <USB_ReadInterrupts>
 8003946:	4603      	mov	r3, r0
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b08      	cmp	r3, #8
 800394e:	d10a      	bne.n	8003966 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f004 fdda 	bl	800850a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f002 0208 	and.w	r2, r2, #8
 8003964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f002 fd39 	bl	80063e2 <USB_ReadInterrupts>
 8003970:	4603      	mov	r3, r0
 8003972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800397a:	d10f      	bne.n	800399c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	b2db      	uxtb	r3, r3
 8003984:	4619      	mov	r1, r3
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f004 fe3c 	bl	8008604 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800399a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f002 fd1e 	bl	80063e2 <USB_ReadInterrupts>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039b0:	d10f      	bne.n	80039d2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	4619      	mov	r1, r3
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f004 fe0f 	bl	80085e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695a      	ldr	r2, [r3, #20]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80039d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f002 fd03 	bl	80063e2 <USB_ReadInterrupts>
 80039dc:	4603      	mov	r3, r0
 80039de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e6:	d10a      	bne.n	80039fe <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f004 fe1d 	bl	8008628 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695a      	ldr	r2, [r3, #20]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80039fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f002 fced 	bl	80063e2 <USB_ReadInterrupts>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d115      	bne.n	8003a3e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f004 fe0d 	bl	8008644 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	e000      	b.n	8003a3e <HAL_PCD_IRQHandler+0x75e>
      return;
 8003a3c:	bf00      	nop
    }
  }
}
 8003a3e:	3734      	adds	r7, #52	; 0x34
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd90      	pop	{r4, r7, pc}

08003a44 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <HAL_PCD_SetAddress+0x1a>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e013      	b.n	8003a86 <HAL_PCD_SetAddress+0x42>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f002 fc4b 	bl	8006312 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	4608      	mov	r0, r1
 8003a98:	4611      	mov	r1, r2
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	70fb      	strb	r3, [r7, #3]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	803b      	strh	r3, [r7, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	da0f      	bge.n	8003ad4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	f003 020f 	and.w	r2, r3, #15
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	3338      	adds	r3, #56	; 0x38
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3304      	adds	r3, #4
 8003aca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	705a      	strb	r2, [r3, #1]
 8003ad2:	e00f      	b.n	8003af4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	f003 020f 	and.w	r2, r3, #15
 8003ada:	4613      	mov	r3, r2
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	4413      	add	r3, r2
 8003aea:	3304      	adds	r3, #4
 8003aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b00:	883a      	ldrh	r2, [r7, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	78ba      	ldrb	r2, [r7, #2]
 8003b0a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	785b      	ldrb	r3, [r3, #1]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d004      	beq.n	8003b1e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b1e:	78bb      	ldrb	r3, [r7, #2]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d102      	bne.n	8003b2a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_PCD_EP_Open+0xaa>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e00e      	b.n	8003b56 <HAL_PCD_EP_Open+0xc8>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68f9      	ldr	r1, [r7, #12]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f001 fd7e 	bl	8005648 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003b54:	7afb      	ldrb	r3, [r7, #11]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	460b      	mov	r3, r1
 8003b68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	da0f      	bge.n	8003b92 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	f003 020f 	and.w	r2, r3, #15
 8003b78:	4613      	mov	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	3338      	adds	r3, #56	; 0x38
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	4413      	add	r3, r2
 8003b86:	3304      	adds	r3, #4
 8003b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	705a      	strb	r2, [r3, #1]
 8003b90:	e00f      	b.n	8003bb2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b92:	78fb      	ldrb	r3, [r7, #3]
 8003b94:	f003 020f 	and.w	r2, r3, #15
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3304      	adds	r3, #4
 8003baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_PCD_EP_Close+0x6e>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e00e      	b.n	8003bea <HAL_PCD_EP_Close+0x8c>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68f9      	ldr	r1, [r7, #12]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 fdbc 	bl	8005758 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b086      	sub	sp, #24
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c02:	7afb      	ldrb	r3, [r7, #11]
 8003c04:	f003 020f 	and.w	r2, r3, #15
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4413      	add	r3, r2
 8003c18:	3304      	adds	r3, #4
 8003c1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2200      	movs	r2, #0
 8003c32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c34:	7afb      	ldrb	r3, [r7, #11]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d102      	bne.n	8003c4e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c4e:	7afb      	ldrb	r3, [r7, #11]
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d109      	bne.n	8003c6c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	6979      	ldr	r1, [r7, #20]
 8003c66:	f002 f897 	bl	8005d98 <USB_EP0StartXfer>
 8003c6a:	e008      	b.n	8003c7e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6818      	ldr	r0, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	6979      	ldr	r1, [r7, #20]
 8003c7a:	f001 fe49 	bl	8005910 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	f003 020f 	and.w	r2, r3, #15
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003caa:	681b      	ldr	r3, [r3, #0]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	607a      	str	r2, [r7, #4]
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cc8:	7afb      	ldrb	r3, [r7, #11]
 8003cca:	f003 020f 	and.w	r2, r3, #15
 8003cce:	4613      	mov	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	3338      	adds	r3, #56	; 0x38
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4413      	add	r3, r2
 8003cdc:	3304      	adds	r3, #4
 8003cde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cf8:	7afb      	ldrb	r3, [r7, #11]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d102      	bne.n	8003d12 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d12:	7afb      	ldrb	r3, [r7, #11]
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d109      	bne.n	8003d30 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	461a      	mov	r2, r3
 8003d28:	6979      	ldr	r1, [r7, #20]
 8003d2a:	f002 f835 	bl	8005d98 <USB_EP0StartXfer>
 8003d2e:	e008      	b.n	8003d42 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6979      	ldr	r1, [r7, #20]
 8003d3e:	f001 fde7 	bl	8005910 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	f003 020f 	and.w	r2, r3, #15
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d901      	bls.n	8003d6a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e050      	b.n	8003e0c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	da0f      	bge.n	8003d92 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	f003 020f 	and.w	r2, r3, #15
 8003d78:	4613      	mov	r3, r2
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	3338      	adds	r3, #56	; 0x38
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	4413      	add	r3, r2
 8003d86:	3304      	adds	r3, #4
 8003d88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	705a      	strb	r2, [r3, #1]
 8003d90:	e00d      	b.n	8003dae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	4413      	add	r3, r2
 8003da4:	3304      	adds	r3, #4
 8003da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_PCD_EP_SetStall+0x82>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e01e      	b.n	8003e0c <HAL_PCD_EP_SetStall+0xc0>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68f9      	ldr	r1, [r7, #12]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f002 f9c4 	bl	800616a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003de2:	78fb      	ldrb	r3, [r7, #3]
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	b2d9      	uxtb	r1, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f002 fbb5 	bl	800656c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	f003 020f 	and.w	r2, r3, #15
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d901      	bls.n	8003e32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e042      	b.n	8003eb8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	da0f      	bge.n	8003e5a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e3a:	78fb      	ldrb	r3, [r7, #3]
 8003e3c:	f003 020f 	and.w	r2, r3, #15
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	3338      	adds	r3, #56	; 0x38
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3304      	adds	r3, #4
 8003e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	705a      	strb	r2, [r3, #1]
 8003e58:	e00f      	b.n	8003e7a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	f003 020f 	and.w	r2, r3, #15
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	4413      	add	r3, r2
 8003e70:	3304      	adds	r3, #4
 8003e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_PCD_EP_ClrStall+0x86>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e00e      	b.n	8003eb8 <HAL_PCD_EP_ClrStall+0xa4>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68f9      	ldr	r1, [r7, #12]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f002 f9cc 	bl	8006246 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08a      	sub	sp, #40	; 0x28
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	3338      	adds	r3, #56	; 0x38
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	699a      	ldr	r2, [r3, #24]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d901      	bls.n	8003ef8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e06c      	b.n	8003fd2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	695a      	ldr	r2, [r3, #20]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d902      	bls.n	8003f14 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	3303      	adds	r3, #3
 8003f18:	089b      	lsrs	r3, r3, #2
 8003f1a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f1c:	e02b      	b.n	8003f76 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	695a      	ldr	r2, [r3, #20]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d902      	bls.n	8003f3a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	3303      	adds	r3, #3
 8003f3e:	089b      	lsrs	r3, r3, #2
 8003f40:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	68d9      	ldr	r1, [r3, #12]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	4603      	mov	r3, r0
 8003f58:	6978      	ldr	r0, [r7, #20]
 8003f5a:	f002 f870 	bl	800603e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	441a      	add	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	699a      	ldr	r2, [r3, #24]
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	441a      	add	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d809      	bhi.n	8003fa0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	699a      	ldr	r2, [r3, #24]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d203      	bcs.n	8003fa0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1be      	bne.n	8003f1e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d811      	bhi.n	8003fd0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	6939      	ldr	r1, [r7, #16]
 8003fc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fcc:	4013      	ands	r3, r2
 8003fce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3720      	adds	r7, #32
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	333c      	adds	r3, #60	; 0x3c
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b01      	cmp	r3, #1
 8004010:	f040 80a0 	bne.w	8004154 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d015      	beq.n	800404a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4a72      	ldr	r2, [pc, #456]	; (80041ec <PCD_EP_OutXfrComplete_int+0x210>)
 8004022:	4293      	cmp	r3, r2
 8004024:	f240 80dd 	bls.w	80041e2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 80d7 	beq.w	80041e2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004040:	461a      	mov	r2, r3
 8004042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004046:	6093      	str	r3, [r2, #8]
 8004048:	e0cb      	b.n	80041e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b00      	cmp	r3, #0
 8004052:	d009      	beq.n	8004068 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004060:	461a      	mov	r2, r3
 8004062:	2320      	movs	r3, #32
 8004064:	6093      	str	r3, [r2, #8]
 8004066:	e0bc      	b.n	80041e2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800406e:	2b00      	cmp	r3, #0
 8004070:	f040 80b7 	bne.w	80041e2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4a5d      	ldr	r2, [pc, #372]	; (80041ec <PCD_EP_OutXfrComplete_int+0x210>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d90f      	bls.n	800409c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004092:	461a      	mov	r2, r3
 8004094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004098:	6093      	str	r3, [r2, #8]
 800409a:	e0a2      	b.n	80041e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	4613      	mov	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040ae:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	0159      	lsls	r1, r3, #5
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	440b      	add	r3, r1
 80040b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80040c2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4403      	add	r3, r0
 80040d2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80040d6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040ea:	6819      	ldr	r1, [r3, #0]
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4403      	add	r3, r0
 80040fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4419      	add	r1, r3
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	4613      	mov	r3, r2
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4403      	add	r3, r0
 8004110:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004114:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d114      	bne.n	8004146 <PCD_EP_OutXfrComplete_int+0x16a>
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d108      	bne.n	8004146 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800413e:	461a      	mov	r2, r3
 8004140:	2101      	movs	r1, #1
 8004142:	f002 fa13 	bl	800656c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	4619      	mov	r1, r3
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f004 f9a7 	bl	80084a0 <HAL_PCD_DataOutStageCallback>
 8004152:	e046      	b.n	80041e2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4a26      	ldr	r2, [pc, #152]	; (80041f0 <PCD_EP_OutXfrComplete_int+0x214>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d124      	bne.n	80041a6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004172:	461a      	mov	r2, r3
 8004174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004178:	6093      	str	r3, [r2, #8]
 800417a:	e032      	b.n	80041e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004192:	461a      	mov	r2, r3
 8004194:	2320      	movs	r3, #32
 8004196:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	4619      	mov	r1, r3
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f004 f97e 	bl	80084a0 <HAL_PCD_DataOutStageCallback>
 80041a4:	e01d      	b.n	80041e2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d114      	bne.n	80041d6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	4613      	mov	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	1a9b      	subs	r3, r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	440b      	add	r3, r1
 80041ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d108      	bne.n	80041d6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041ce:	461a      	mov	r2, r3
 80041d0:	2100      	movs	r1, #0
 80041d2:	f002 f9cb 	bl	800656c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	4619      	mov	r1, r3
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f004 f95f 	bl	80084a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	4f54300a 	.word	0x4f54300a
 80041f0:	4f54310a 	.word	0x4f54310a

080041f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	333c      	adds	r3, #60	; 0x3c
 800420c:	3304      	adds	r3, #4
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4a15      	ldr	r2, [pc, #84]	; (800427c <PCD_EP_OutSetupPacket_int+0x88>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d90e      	bls.n	8004248 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004230:	2b00      	cmp	r3, #0
 8004232:	d009      	beq.n	8004248 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004240:	461a      	mov	r2, r3
 8004242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004246:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f004 f917 	bl	800847c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4a0a      	ldr	r2, [pc, #40]	; (800427c <PCD_EP_OutSetupPacket_int+0x88>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d90c      	bls.n	8004270 <PCD_EP_OutSetupPacket_int+0x7c>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d108      	bne.n	8004270 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004268:	461a      	mov	r2, r3
 800426a:	2101      	movs	r1, #1
 800426c:	f002 f97e 	bl	800656c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	4f54300a 	.word	0x4f54300a

08004280 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	70fb      	strb	r3, [r7, #3]
 800428c:	4613      	mov	r3, r2
 800428e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d107      	bne.n	80042ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800429e:	883b      	ldrh	r3, [r7, #0]
 80042a0:	0419      	lsls	r1, r3, #16
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28
 80042ac:	e028      	b.n	8004300 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	4413      	add	r3, r2
 80042ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042bc:	2300      	movs	r3, #0
 80042be:	73fb      	strb	r3, [r7, #15]
 80042c0:	e00d      	b.n	80042de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	3340      	adds	r3, #64	; 0x40
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	0c1b      	lsrs	r3, r3, #16
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	4413      	add	r3, r2
 80042d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	3301      	adds	r3, #1
 80042dc:	73fb      	strb	r3, [r7, #15]
 80042de:	7bfa      	ldrb	r2, [r7, #15]
 80042e0:	78fb      	ldrb	r3, [r7, #3]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d3ec      	bcc.n	80042c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80042e8:	883b      	ldrh	r3, [r7, #0]
 80042ea:	0418      	lsls	r0, r3, #16
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6819      	ldr	r1, [r3, #0]
 80042f0:	78fb      	ldrb	r3, [r7, #3]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	4302      	orrs	r2, r0
 80042f8:	3340      	adds	r3, #64	; 0x40
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	460b      	mov	r3, r1
 8004318:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	887a      	ldrh	r2, [r7, #2]
 8004320:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e264      	b.n	8004824 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d075      	beq.n	8004452 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004366:	4ba3      	ldr	r3, [pc, #652]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b04      	cmp	r3, #4
 8004370:	d00c      	beq.n	800438c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004372:	4ba0      	ldr	r3, [pc, #640]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800437a:	2b08      	cmp	r3, #8
 800437c:	d112      	bne.n	80043a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800437e:	4b9d      	ldr	r3, [pc, #628]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800438a:	d10b      	bne.n	80043a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438c:	4b99      	ldr	r3, [pc, #612]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d05b      	beq.n	8004450 <HAL_RCC_OscConfig+0x108>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d157      	bne.n	8004450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e23f      	b.n	8004824 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ac:	d106      	bne.n	80043bc <HAL_RCC_OscConfig+0x74>
 80043ae:	4b91      	ldr	r3, [pc, #580]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a90      	ldr	r2, [pc, #576]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e01d      	b.n	80043f8 <HAL_RCC_OscConfig+0xb0>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043c4:	d10c      	bne.n	80043e0 <HAL_RCC_OscConfig+0x98>
 80043c6:	4b8b      	ldr	r3, [pc, #556]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a8a      	ldr	r2, [pc, #552]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	4b88      	ldr	r3, [pc, #544]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a87      	ldr	r2, [pc, #540]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	e00b      	b.n	80043f8 <HAL_RCC_OscConfig+0xb0>
 80043e0:	4b84      	ldr	r3, [pc, #528]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a83      	ldr	r2, [pc, #524]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	4b81      	ldr	r3, [pc, #516]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a80      	ldr	r2, [pc, #512]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d013      	beq.n	8004428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004400:	f7fd f942 	bl	8001688 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004408:	f7fd f93e 	bl	8001688 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	; 0x64
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e204      	b.n	8004824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441a:	4b76      	ldr	r3, [pc, #472]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0xc0>
 8004426:	e014      	b.n	8004452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fd f92e 	bl	8001688 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004430:	f7fd f92a 	bl	8001688 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	; 0x64
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e1f0      	b.n	8004824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004442:	4b6c      	ldr	r3, [pc, #432]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0xe8>
 800444e:	e000      	b.n	8004452 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d063      	beq.n	8004526 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800445e:	4b65      	ldr	r3, [pc, #404]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00b      	beq.n	8004482 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800446a:	4b62      	ldr	r3, [pc, #392]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004472:	2b08      	cmp	r3, #8
 8004474:	d11c      	bne.n	80044b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004476:	4b5f      	ldr	r3, [pc, #380]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d116      	bne.n	80044b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004482:	4b5c      	ldr	r3, [pc, #368]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d005      	beq.n	800449a <HAL_RCC_OscConfig+0x152>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d001      	beq.n	800449a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e1c4      	b.n	8004824 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449a:	4b56      	ldr	r3, [pc, #344]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4952      	ldr	r1, [pc, #328]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ae:	e03a      	b.n	8004526 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d020      	beq.n	80044fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044b8:	4b4f      	ldr	r3, [pc, #316]	; (80045f8 <HAL_RCC_OscConfig+0x2b0>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7fd f8e3 	bl	8001688 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044c6:	f7fd f8df 	bl	8001688 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e1a5      	b.n	8004824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d8:	4b46      	ldr	r3, [pc, #280]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f0      	beq.n	80044c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e4:	4b43      	ldr	r3, [pc, #268]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	4940      	ldr	r1, [pc, #256]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	600b      	str	r3, [r1, #0]
 80044f8:	e015      	b.n	8004526 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044fa:	4b3f      	ldr	r3, [pc, #252]	; (80045f8 <HAL_RCC_OscConfig+0x2b0>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fd f8c2 	bl	8001688 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004508:	f7fd f8be 	bl	8001688 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e184      	b.n	8004824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451a:	4b36      	ldr	r3, [pc, #216]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d030      	beq.n	8004594 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d016      	beq.n	8004568 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800453a:	4b30      	ldr	r3, [pc, #192]	; (80045fc <HAL_RCC_OscConfig+0x2b4>)
 800453c:	2201      	movs	r2, #1
 800453e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004540:	f7fd f8a2 	bl	8001688 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004548:	f7fd f89e 	bl	8001688 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e164      	b.n	8004824 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800455a:	4b26      	ldr	r3, [pc, #152]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 800455c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0x200>
 8004566:	e015      	b.n	8004594 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004568:	4b24      	ldr	r3, [pc, #144]	; (80045fc <HAL_RCC_OscConfig+0x2b4>)
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800456e:	f7fd f88b 	bl	8001688 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004576:	f7fd f887 	bl	8001688 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e14d      	b.n	8004824 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004588:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 800458a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1f0      	bne.n	8004576 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80a0 	beq.w	80046e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a6:	4b13      	ldr	r3, [pc, #76]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10f      	bne.n	80045d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	4a0e      	ldr	r2, [pc, #56]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80045bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c0:	6413      	str	r3, [r2, #64]	; 0x40
 80045c2:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ce:	2301      	movs	r3, #1
 80045d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d2:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_OscConfig+0x2b8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d121      	bne.n	8004622 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045de:	4b08      	ldr	r3, [pc, #32]	; (8004600 <HAL_RCC_OscConfig+0x2b8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a07      	ldr	r2, [pc, #28]	; (8004600 <HAL_RCC_OscConfig+0x2b8>)
 80045e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ea:	f7fd f84d 	bl	8001688 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f0:	e011      	b.n	8004616 <HAL_RCC_OscConfig+0x2ce>
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800
 80045f8:	42470000 	.word	0x42470000
 80045fc:	42470e80 	.word	0x42470e80
 8004600:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004604:	f7fd f840 	bl	8001688 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e106      	b.n	8004824 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004616:	4b85      	ldr	r3, [pc, #532]	; (800482c <HAL_RCC_OscConfig+0x4e4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d106      	bne.n	8004638 <HAL_RCC_OscConfig+0x2f0>
 800462a:	4b81      	ldr	r3, [pc, #516]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	4a80      	ldr	r2, [pc, #512]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	6713      	str	r3, [r2, #112]	; 0x70
 8004636:	e01c      	b.n	8004672 <HAL_RCC_OscConfig+0x32a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b05      	cmp	r3, #5
 800463e:	d10c      	bne.n	800465a <HAL_RCC_OscConfig+0x312>
 8004640:	4b7b      	ldr	r3, [pc, #492]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	4a7a      	ldr	r2, [pc, #488]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 8004646:	f043 0304 	orr.w	r3, r3, #4
 800464a:	6713      	str	r3, [r2, #112]	; 0x70
 800464c:	4b78      	ldr	r3, [pc, #480]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	4a77      	ldr	r2, [pc, #476]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	6713      	str	r3, [r2, #112]	; 0x70
 8004658:	e00b      	b.n	8004672 <HAL_RCC_OscConfig+0x32a>
 800465a:	4b75      	ldr	r3, [pc, #468]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465e:	4a74      	ldr	r2, [pc, #464]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 8004660:	f023 0301 	bic.w	r3, r3, #1
 8004664:	6713      	str	r3, [r2, #112]	; 0x70
 8004666:	4b72      	ldr	r3, [pc, #456]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466a:	4a71      	ldr	r2, [pc, #452]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 800466c:	f023 0304 	bic.w	r3, r3, #4
 8004670:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d015      	beq.n	80046a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467a:	f7fd f805 	bl	8001688 <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004680:	e00a      	b.n	8004698 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004682:	f7fd f801 	bl	8001688 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004690:	4293      	cmp	r3, r2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e0c5      	b.n	8004824 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004698:	4b65      	ldr	r3, [pc, #404]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0ee      	beq.n	8004682 <HAL_RCC_OscConfig+0x33a>
 80046a4:	e014      	b.n	80046d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a6:	f7fc ffef 	bl	8001688 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ac:	e00a      	b.n	80046c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ae:	f7fc ffeb 	bl	8001688 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046bc:	4293      	cmp	r3, r2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e0af      	b.n	8004824 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c4:	4b5a      	ldr	r3, [pc, #360]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1ee      	bne.n	80046ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d105      	bne.n	80046e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d6:	4b56      	ldr	r3, [pc, #344]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	4a55      	ldr	r2, [pc, #340]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 80046dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 809b 	beq.w	8004822 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046ec:	4b50      	ldr	r3, [pc, #320]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 030c 	and.w	r3, r3, #12
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d05c      	beq.n	80047b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d141      	bne.n	8004784 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004700:	4b4c      	ldr	r3, [pc, #304]	; (8004834 <HAL_RCC_OscConfig+0x4ec>)
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004706:	f7fc ffbf 	bl	8001688 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800470e:	f7fc ffbb 	bl	8001688 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e081      	b.n	8004824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004720:	4b43      	ldr	r3, [pc, #268]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f0      	bne.n	800470e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	019b      	lsls	r3, r3, #6
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004742:	085b      	lsrs	r3, r3, #1
 8004744:	3b01      	subs	r3, #1
 8004746:	041b      	lsls	r3, r3, #16
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	061b      	lsls	r3, r3, #24
 8004750:	4937      	ldr	r1, [pc, #220]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 8004752:	4313      	orrs	r3, r2
 8004754:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004756:	4b37      	ldr	r3, [pc, #220]	; (8004834 <HAL_RCC_OscConfig+0x4ec>)
 8004758:	2201      	movs	r2, #1
 800475a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fc ff94 	bl	8001688 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004764:	f7fc ff90 	bl	8001688 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e056      	b.n	8004824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004776:	4b2e      	ldr	r3, [pc, #184]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x41c>
 8004782:	e04e      	b.n	8004822 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004784:	4b2b      	ldr	r3, [pc, #172]	; (8004834 <HAL_RCC_OscConfig+0x4ec>)
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478a:	f7fc ff7d 	bl	8001688 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004792:	f7fc ff79 	bl	8001688 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e03f      	b.n	8004824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a4:	4b22      	ldr	r3, [pc, #136]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1f0      	bne.n	8004792 <HAL_RCC_OscConfig+0x44a>
 80047b0:	e037      	b.n	8004822 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e032      	b.n	8004824 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047be:	4b1c      	ldr	r3, [pc, #112]	; (8004830 <HAL_RCC_OscConfig+0x4e8>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d028      	beq.n	800481e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d121      	bne.n	800481e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d11a      	bne.n	800481e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047ee:	4013      	ands	r3, r2
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d111      	bne.n	800481e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	085b      	lsrs	r3, r3, #1
 8004806:	3b01      	subs	r3, #1
 8004808:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800480a:	429a      	cmp	r2, r3
 800480c:	d107      	bne.n	800481e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800481a:	429a      	cmp	r2, r3
 800481c:	d001      	beq.n	8004822 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e000      	b.n	8004824 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40007000 	.word	0x40007000
 8004830:	40023800 	.word	0x40023800
 8004834:	42470060 	.word	0x42470060

08004838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0cc      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800484c:	4b68      	ldr	r3, [pc, #416]	; (80049f0 <HAL_RCC_ClockConfig+0x1b8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d90c      	bls.n	8004874 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485a:	4b65      	ldr	r3, [pc, #404]	; (80049f0 <HAL_RCC_ClockConfig+0x1b8>)
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004862:	4b63      	ldr	r3, [pc, #396]	; (80049f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d001      	beq.n	8004874 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e0b8      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d020      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800488c:	4b59      	ldr	r3, [pc, #356]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	4a58      	ldr	r2, [pc, #352]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004896:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048a4:	4b53      	ldr	r3, [pc, #332]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	4a52      	ldr	r2, [pc, #328]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b0:	4b50      	ldr	r3, [pc, #320]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	494d      	ldr	r1, [pc, #308]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d044      	beq.n	8004958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d107      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d6:	4b47      	ldr	r3, [pc, #284]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d119      	bne.n	8004916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e07f      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d003      	beq.n	80048f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d107      	bne.n	8004906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f6:	4b3f      	ldr	r3, [pc, #252]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e06f      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004906:	4b3b      	ldr	r3, [pc, #236]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e067      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004916:	4b37      	ldr	r3, [pc, #220]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f023 0203 	bic.w	r2, r3, #3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	4934      	ldr	r1, [pc, #208]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	4313      	orrs	r3, r2
 8004926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004928:	f7fc feae 	bl	8001688 <HAL_GetTick>
 800492c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492e:	e00a      	b.n	8004946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004930:	f7fc feaa 	bl	8001688 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	f241 3288 	movw	r2, #5000	; 0x1388
 800493e:	4293      	cmp	r3, r2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e04f      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004946:	4b2b      	ldr	r3, [pc, #172]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 020c 	and.w	r2, r3, #12
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	429a      	cmp	r2, r3
 8004956:	d1eb      	bne.n	8004930 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004958:	4b25      	ldr	r3, [pc, #148]	; (80049f0 <HAL_RCC_ClockConfig+0x1b8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d20c      	bcs.n	8004980 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004966:	4b22      	ldr	r3, [pc, #136]	; (80049f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800496e:	4b20      	ldr	r3, [pc, #128]	; (80049f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d001      	beq.n	8004980 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e032      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	d008      	beq.n	800499e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800498c:	4b19      	ldr	r3, [pc, #100]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	4916      	ldr	r1, [pc, #88]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	4313      	orrs	r3, r2
 800499c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d009      	beq.n	80049be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049aa:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	490e      	ldr	r1, [pc, #56]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049be:	f000 f821 	bl	8004a04 <HAL_RCC_GetSysClockFreq>
 80049c2:	4602      	mov	r2, r0
 80049c4:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	091b      	lsrs	r3, r3, #4
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	490a      	ldr	r1, [pc, #40]	; (80049f8 <HAL_RCC_ClockConfig+0x1c0>)
 80049d0:	5ccb      	ldrb	r3, [r1, r3]
 80049d2:	fa22 f303 	lsr.w	r3, r2, r3
 80049d6:	4a09      	ldr	r2, [pc, #36]	; (80049fc <HAL_RCC_ClockConfig+0x1c4>)
 80049d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049da:	4b09      	ldr	r3, [pc, #36]	; (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fc fe0e 	bl	8001600 <HAL_InitTick>

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40023c00 	.word	0x40023c00
 80049f4:	40023800 	.word	0x40023800
 80049f8:	0800935c 	.word	0x0800935c
 80049fc:	20000000 	.word	0x20000000
 8004a00:	20000004 	.word	0x20000004

08004a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a08:	b084      	sub	sp, #16
 8004a0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	607b      	str	r3, [r7, #4]
 8004a10:	2300      	movs	r3, #0
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	2300      	movs	r3, #0
 8004a16:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a1c:	4b67      	ldr	r3, [pc, #412]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f003 030c 	and.w	r3, r3, #12
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d00d      	beq.n	8004a44 <HAL_RCC_GetSysClockFreq+0x40>
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	f200 80bd 	bhi.w	8004ba8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <HAL_RCC_GetSysClockFreq+0x34>
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d003      	beq.n	8004a3e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a36:	e0b7      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a38:	4b61      	ldr	r3, [pc, #388]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a3a:	60bb      	str	r3, [r7, #8]
       break;
 8004a3c:	e0b7      	b.n	8004bae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a3e:	4b61      	ldr	r3, [pc, #388]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004a40:	60bb      	str	r3, [r7, #8]
      break;
 8004a42:	e0b4      	b.n	8004bae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a44:	4b5d      	ldr	r3, [pc, #372]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a4e:	4b5b      	ldr	r3, [pc, #364]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d04d      	beq.n	8004af6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a5a:	4b58      	ldr	r3, [pc, #352]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	099b      	lsrs	r3, r3, #6
 8004a60:	461a      	mov	r2, r3
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a6a:	f04f 0100 	mov.w	r1, #0
 8004a6e:	ea02 0800 	and.w	r8, r2, r0
 8004a72:	ea03 0901 	and.w	r9, r3, r1
 8004a76:	4640      	mov	r0, r8
 8004a78:	4649      	mov	r1, r9
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	014b      	lsls	r3, r1, #5
 8004a84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a88:	0142      	lsls	r2, r0, #5
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	ebb0 0008 	subs.w	r0, r0, r8
 8004a92:	eb61 0109 	sbc.w	r1, r1, r9
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	018b      	lsls	r3, r1, #6
 8004aa0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004aa4:	0182      	lsls	r2, r0, #6
 8004aa6:	1a12      	subs	r2, r2, r0
 8004aa8:	eb63 0301 	sbc.w	r3, r3, r1
 8004aac:	f04f 0000 	mov.w	r0, #0
 8004ab0:	f04f 0100 	mov.w	r1, #0
 8004ab4:	00d9      	lsls	r1, r3, #3
 8004ab6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004aba:	00d0      	lsls	r0, r2, #3
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	eb12 0208 	adds.w	r2, r2, r8
 8004ac4:	eb43 0309 	adc.w	r3, r3, r9
 8004ac8:	f04f 0000 	mov.w	r0, #0
 8004acc:	f04f 0100 	mov.w	r1, #0
 8004ad0:	0259      	lsls	r1, r3, #9
 8004ad2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004ad6:	0250      	lsls	r0, r2, #9
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4610      	mov	r0, r2
 8004ade:	4619      	mov	r1, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	f7fb ff00 	bl	80008ec <__aeabi_uldivmod>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4613      	mov	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	e04a      	b.n	8004b8c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004af6:	4b31      	ldr	r3, [pc, #196]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	099b      	lsrs	r3, r3, #6
 8004afc:	461a      	mov	r2, r3
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b06:	f04f 0100 	mov.w	r1, #0
 8004b0a:	ea02 0400 	and.w	r4, r2, r0
 8004b0e:	ea03 0501 	and.w	r5, r3, r1
 8004b12:	4620      	mov	r0, r4
 8004b14:	4629      	mov	r1, r5
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	014b      	lsls	r3, r1, #5
 8004b20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b24:	0142      	lsls	r2, r0, #5
 8004b26:	4610      	mov	r0, r2
 8004b28:	4619      	mov	r1, r3
 8004b2a:	1b00      	subs	r0, r0, r4
 8004b2c:	eb61 0105 	sbc.w	r1, r1, r5
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	f04f 0300 	mov.w	r3, #0
 8004b38:	018b      	lsls	r3, r1, #6
 8004b3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b3e:	0182      	lsls	r2, r0, #6
 8004b40:	1a12      	subs	r2, r2, r0
 8004b42:	eb63 0301 	sbc.w	r3, r3, r1
 8004b46:	f04f 0000 	mov.w	r0, #0
 8004b4a:	f04f 0100 	mov.w	r1, #0
 8004b4e:	00d9      	lsls	r1, r3, #3
 8004b50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b54:	00d0      	lsls	r0, r2, #3
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	1912      	adds	r2, r2, r4
 8004b5c:	eb45 0303 	adc.w	r3, r5, r3
 8004b60:	f04f 0000 	mov.w	r0, #0
 8004b64:	f04f 0100 	mov.w	r1, #0
 8004b68:	0299      	lsls	r1, r3, #10
 8004b6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004b6e:	0290      	lsls	r0, r2, #10
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4610      	mov	r0, r2
 8004b76:	4619      	mov	r1, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	f7fb feb4 	bl	80008ec <__aeabi_uldivmod>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4613      	mov	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b8c:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	0c1b      	lsrs	r3, r3, #16
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	3301      	adds	r3, #1
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba4:	60bb      	str	r3, [r7, #8]
      break;
 8004ba6:	e002      	b.n	8004bae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ba8:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004baa:	60bb      	str	r3, [r7, #8]
      break;
 8004bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bae:	68bb      	ldr	r3, [r7, #8]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004bba:	bf00      	nop
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	00f42400 	.word	0x00f42400
 8004bc4:	007a1200 	.word	0x007a1200

08004bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bcc:	4b03      	ldr	r3, [pc, #12]	; (8004bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8004bce:	681b      	ldr	r3, [r3, #0]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	20000000 	.word	0x20000000

08004be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004be4:	f7ff fff0 	bl	8004bc8 <HAL_RCC_GetHCLKFreq>
 8004be8:	4602      	mov	r2, r0
 8004bea:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	0a9b      	lsrs	r3, r3, #10
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	4903      	ldr	r1, [pc, #12]	; (8004c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bf6:	5ccb      	ldrb	r3, [r1, r3]
 8004bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40023800 	.word	0x40023800
 8004c04:	0800936c 	.word	0x0800936c

08004c08 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d105      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d035      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c30:	4b62      	ldr	r3, [pc, #392]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c36:	f7fc fd27 	bl	8001688 <HAL_GetTick>
 8004c3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c3e:	f7fc fd23 	bl	8001688 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e0b0      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c50:	4b5b      	ldr	r3, [pc, #364]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1f0      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	019a      	lsls	r2, r3, #6
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	071b      	lsls	r3, r3, #28
 8004c68:	4955      	ldr	r1, [pc, #340]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c70:	4b52      	ldr	r3, [pc, #328]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c76:	f7fc fd07 	bl	8001688 <HAL_GetTick>
 8004c7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c7e:	f7fc fd03 	bl	8001688 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e090      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c90:	4b4b      	ldr	r3, [pc, #300]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 8083 	beq.w	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	4b44      	ldr	r3, [pc, #272]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	4a43      	ldr	r2, [pc, #268]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cba:	4b41      	ldr	r3, [pc, #260]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cc6:	4b3f      	ldr	r3, [pc, #252]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a3e      	ldr	r2, [pc, #248]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cd2:	f7fc fcd9 	bl	8001688 <HAL_GetTick>
 8004cd6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cd8:	e008      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cda:	f7fc fcd5 	bl	8001688 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e062      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cec:	4b35      	ldr	r3, [pc, #212]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cf8:	4b31      	ldr	r3, [pc, #196]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d00:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d02f      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d028      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d16:	4b2a      	ldr	r3, [pc, #168]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d20:	4b29      	ldr	r3, [pc, #164]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d26:	4b28      	ldr	r3, [pc, #160]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d2c:	4a24      	ldr	r2, [pc, #144]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d32:	4b23      	ldr	r3, [pc, #140]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d114      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d3e:	f7fc fca3 	bl	8001688 <HAL_GetTick>
 8004d42:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d44:	e00a      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d46:	f7fc fc9f 	bl	8001688 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e02a      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5c:	4b18      	ldr	r3, [pc, #96]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0ee      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d74:	d10d      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d76:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8a:	490d      	ldr	r1, [pc, #52]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	608b      	str	r3, [r1, #8]
 8004d90:	e005      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d92:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	4a0a      	ldr	r2, [pc, #40]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d98:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d9c:	6093      	str	r3, [r2, #8]
 8004d9e:	4b08      	ldr	r3, [pc, #32]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004da0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004daa:	4905      	ldr	r1, [pc, #20]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	42470068 	.word	0x42470068
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	40007000 	.word	0x40007000
 8004dc8:	42470e40 	.word	0x42470e40

08004dcc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d13e      	bne.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004dea:	4b23      	ldr	r3, [pc, #140]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d12f      	bne.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e00:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e02:	617b      	str	r3, [r7, #20]
          break;
 8004e04:	e02f      	b.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e06:	4b1c      	ldr	r3, [pc, #112]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e12:	d108      	bne.n	8004e26 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e14:	4b18      	ldr	r3, [pc, #96]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e1c:	4a18      	ldr	r2, [pc, #96]	; (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e22:	613b      	str	r3, [r7, #16]
 8004e24:	e007      	b.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e26:	4b14      	ldr	r3, [pc, #80]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e2e:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e34:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e36:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e3c:	099b      	lsrs	r3, r3, #6
 8004e3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	fb02 f303 	mul.w	r3, r2, r3
 8004e48:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e50:	0f1b      	lsrs	r3, r3, #28
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5c:	617b      	str	r3, [r7, #20]
          break;
 8004e5e:	e002      	b.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]
          break;
 8004e64:	bf00      	nop
        }
      }
      break;
 8004e66:	bf00      	nop
    }
  }
  return frequency;
 8004e68:	697b      	ldr	r3, [r7, #20]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	00bb8000 	.word	0x00bb8000
 8004e80:	007a1200 	.word	0x007a1200
 8004e84:	00f42400 	.word	0x00f42400

08004e88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e07b      	b.n	8004f92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d108      	bne.n	8004eb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eaa:	d009      	beq.n	8004ec0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	61da      	str	r2, [r3, #28]
 8004eb2:	e005      	b.n	8004ec0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d106      	bne.n	8004ee0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fc fa80 	bl	80013e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f30:	431a      	orrs	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f44:	ea42 0103 	orr.w	r1, r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	0c1b      	lsrs	r3, r3, #16
 8004f5e:	f003 0104 	and.w	r1, r3, #4
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	f003 0210 	and.w	r2, r3, #16
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69da      	ldr	r2, [r3, #28]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	f107 001c 	add.w	r0, r7, #28
 8004fa8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d122      	bne.n	8004ff8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d105      	bne.n	8004fec <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f001 fb1b 	bl	8006628 <USB_CoreReset>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	73fb      	strb	r3, [r7, #15]
 8004ff6:	e01a      	b.n	800502e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f001 fb0f 	bl	8006628 <USB_CoreReset>
 800500a:	4603      	mov	r3, r0
 800500c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800500e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	639a      	str	r2, [r3, #56]	; 0x38
 8005020:	e005      	b.n	800502e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005030:	2b01      	cmp	r3, #1
 8005032:	d10b      	bne.n	800504c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f043 0206 	orr.w	r2, r3, #6
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f043 0220 	orr.w	r2, r3, #32
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800504c:	7bfb      	ldrb	r3, [r7, #15]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005058:	b004      	add	sp, #16
 800505a:	4770      	bx	lr

0800505c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	4613      	mov	r3, r2
 8005068:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d165      	bne.n	800513c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4a41      	ldr	r2, [pc, #260]	; (8005178 <USB_SetTurnaroundTime+0x11c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d906      	bls.n	8005086 <USB_SetTurnaroundTime+0x2a>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	4a40      	ldr	r2, [pc, #256]	; (800517c <USB_SetTurnaroundTime+0x120>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d202      	bcs.n	8005086 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005080:	230f      	movs	r3, #15
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e062      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4a3c      	ldr	r2, [pc, #240]	; (800517c <USB_SetTurnaroundTime+0x120>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d306      	bcc.n	800509c <USB_SetTurnaroundTime+0x40>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	4a3b      	ldr	r2, [pc, #236]	; (8005180 <USB_SetTurnaroundTime+0x124>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d202      	bcs.n	800509c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005096:	230e      	movs	r3, #14
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	e057      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4a38      	ldr	r2, [pc, #224]	; (8005180 <USB_SetTurnaroundTime+0x124>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d306      	bcc.n	80050b2 <USB_SetTurnaroundTime+0x56>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4a37      	ldr	r2, [pc, #220]	; (8005184 <USB_SetTurnaroundTime+0x128>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d202      	bcs.n	80050b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80050ac:	230d      	movs	r3, #13
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	e04c      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4a33      	ldr	r2, [pc, #204]	; (8005184 <USB_SetTurnaroundTime+0x128>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d306      	bcc.n	80050c8 <USB_SetTurnaroundTime+0x6c>
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4a32      	ldr	r2, [pc, #200]	; (8005188 <USB_SetTurnaroundTime+0x12c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d802      	bhi.n	80050c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80050c2:	230c      	movs	r3, #12
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	e041      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4a2f      	ldr	r2, [pc, #188]	; (8005188 <USB_SetTurnaroundTime+0x12c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d906      	bls.n	80050de <USB_SetTurnaroundTime+0x82>
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4a2e      	ldr	r2, [pc, #184]	; (800518c <USB_SetTurnaroundTime+0x130>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d802      	bhi.n	80050de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80050d8:	230b      	movs	r3, #11
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e036      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4a2a      	ldr	r2, [pc, #168]	; (800518c <USB_SetTurnaroundTime+0x130>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d906      	bls.n	80050f4 <USB_SetTurnaroundTime+0x98>
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	4a29      	ldr	r2, [pc, #164]	; (8005190 <USB_SetTurnaroundTime+0x134>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d802      	bhi.n	80050f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80050ee:	230a      	movs	r3, #10
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	e02b      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4a26      	ldr	r2, [pc, #152]	; (8005190 <USB_SetTurnaroundTime+0x134>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d906      	bls.n	800510a <USB_SetTurnaroundTime+0xae>
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4a25      	ldr	r2, [pc, #148]	; (8005194 <USB_SetTurnaroundTime+0x138>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d202      	bcs.n	800510a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005104:	2309      	movs	r3, #9
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	e020      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	4a21      	ldr	r2, [pc, #132]	; (8005194 <USB_SetTurnaroundTime+0x138>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d306      	bcc.n	8005120 <USB_SetTurnaroundTime+0xc4>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4a20      	ldr	r2, [pc, #128]	; (8005198 <USB_SetTurnaroundTime+0x13c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d802      	bhi.n	8005120 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800511a:	2308      	movs	r3, #8
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	e015      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4a1d      	ldr	r2, [pc, #116]	; (8005198 <USB_SetTurnaroundTime+0x13c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d906      	bls.n	8005136 <USB_SetTurnaroundTime+0xda>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4a1c      	ldr	r2, [pc, #112]	; (800519c <USB_SetTurnaroundTime+0x140>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d202      	bcs.n	8005136 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005130:	2307      	movs	r3, #7
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	e00a      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005136:	2306      	movs	r3, #6
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	e007      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005142:	2309      	movs	r3, #9
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	e001      	b.n	800514c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005148:	2309      	movs	r3, #9
 800514a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	029b      	lsls	r3, r3, #10
 8005160:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005164:	431a      	orrs	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	371c      	adds	r7, #28
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	00d8acbf 	.word	0x00d8acbf
 800517c:	00e4e1c0 	.word	0x00e4e1c0
 8005180:	00f42400 	.word	0x00f42400
 8005184:	01067380 	.word	0x01067380
 8005188:	011a499f 	.word	0x011a499f
 800518c:	01312cff 	.word	0x01312cff
 8005190:	014ca43f 	.word	0x014ca43f
 8005194:	016e3600 	.word	0x016e3600
 8005198:	01a6ab1f 	.word	0x01a6ab1f
 800519c:	01e84800 	.word	0x01e84800

080051a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f043 0201 	orr.w	r2, r3, #1
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f023 0201 	bic.w	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d115      	bne.n	8005232 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005212:	2001      	movs	r0, #1
 8005214:	f7fc fa44 	bl	80016a0 <HAL_Delay>
      ms++;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3301      	adds	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f001 f972 	bl	8006508 <USB_GetMode>
 8005224:	4603      	mov	r3, r0
 8005226:	2b01      	cmp	r3, #1
 8005228:	d01e      	beq.n	8005268 <USB_SetCurrentMode+0x84>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b31      	cmp	r3, #49	; 0x31
 800522e:	d9f0      	bls.n	8005212 <USB_SetCurrentMode+0x2e>
 8005230:	e01a      	b.n	8005268 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005232:	78fb      	ldrb	r3, [r7, #3]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d115      	bne.n	8005264 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005244:	2001      	movs	r0, #1
 8005246:	f7fc fa2b 	bl	80016a0 <HAL_Delay>
      ms++;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3301      	adds	r3, #1
 800524e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f001 f959 	bl	8006508 <USB_GetMode>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <USB_SetCurrentMode+0x84>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b31      	cmp	r3, #49	; 0x31
 8005260:	d9f0      	bls.n	8005244 <USB_SetCurrentMode+0x60>
 8005262:	e001      	b.n	8005268 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e005      	b.n	8005274 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b32      	cmp	r3, #50	; 0x32
 800526c:	d101      	bne.n	8005272 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800527c:	b084      	sub	sp, #16
 800527e:	b580      	push	{r7, lr}
 8005280:	b086      	sub	sp, #24
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800528a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005296:	2300      	movs	r3, #0
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	e009      	b.n	80052b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	3340      	adds	r3, #64	; 0x40
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	2200      	movs	r2, #0
 80052a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	3301      	adds	r3, #1
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	2b0e      	cmp	r3, #14
 80052b4:	d9f2      	bls.n	800529c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d11c      	bne.n	80052f6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ca:	f043 0302 	orr.w	r3, r3, #2
 80052ce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38
 80052f4:	e00b      	b.n	800530e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005306:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005314:	461a      	mov	r2, r3
 8005316:	2300      	movs	r3, #0
 8005318:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005320:	4619      	mov	r1, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005328:	461a      	mov	r2, r3
 800532a:	680b      	ldr	r3, [r1, #0]
 800532c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005330:	2b01      	cmp	r3, #1
 8005332:	d10c      	bne.n	800534e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005336:	2b00      	cmp	r3, #0
 8005338:	d104      	bne.n	8005344 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800533a:	2100      	movs	r1, #0
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f945 	bl	80055cc <USB_SetDevSpeed>
 8005342:	e008      	b.n	8005356 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005344:	2101      	movs	r1, #1
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f940 	bl	80055cc <USB_SetDevSpeed>
 800534c:	e003      	b.n	8005356 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800534e:	2103      	movs	r1, #3
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f93b 	bl	80055cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005356:	2110      	movs	r1, #16
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f8f3 	bl	8005544 <USB_FlushTxFifo>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f90f 	bl	800558c <USB_FlushRxFifo>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537e:	461a      	mov	r2, r3
 8005380:	2300      	movs	r3, #0
 8005382:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538a:	461a      	mov	r2, r3
 800538c:	2300      	movs	r3, #0
 800538e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005396:	461a      	mov	r2, r3
 8005398:	2300      	movs	r3, #0
 800539a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800539c:	2300      	movs	r3, #0
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	e043      	b.n	800542a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053b8:	d118      	bne.n	80053ec <USB_DevInit+0x170>
    {
      if (i == 0U)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10a      	bne.n	80053d6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053cc:	461a      	mov	r2, r3
 80053ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	e013      	b.n	80053fe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e2:	461a      	mov	r2, r3
 80053e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	e008      	b.n	80053fe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f8:	461a      	mov	r2, r3
 80053fa:	2300      	movs	r3, #0
 80053fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540a:	461a      	mov	r2, r3
 800540c:	2300      	movs	r3, #0
 800540e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541c:	461a      	mov	r2, r3
 800541e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005422:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	3301      	adds	r3, #1
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	429a      	cmp	r2, r3
 8005430:	d3b7      	bcc.n	80053a2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005432:	2300      	movs	r3, #0
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	e043      	b.n	80054c0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800544a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800544e:	d118      	bne.n	8005482 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10a      	bne.n	800546c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005462:	461a      	mov	r2, r3
 8005464:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	e013      	b.n	8005494 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005478:	461a      	mov	r2, r3
 800547a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	e008      	b.n	8005494 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548e:	461a      	mov	r2, r3
 8005490:	2300      	movs	r3, #0
 8005492:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a0:	461a      	mov	r2, r3
 80054a2:	2300      	movs	r3, #0
 80054a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b2:	461a      	mov	r2, r3
 80054b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	3301      	adds	r3, #1
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d3b7      	bcc.n	8005438 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d105      	bne.n	80054fc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	f043 0210 	orr.w	r2, r3, #16
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699a      	ldr	r2, [r3, #24]
 8005500:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <USB_DevInit+0x2c4>)
 8005502:	4313      	orrs	r3, r2
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	f043 0208 	orr.w	r2, r3, #8
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800551a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551c:	2b01      	cmp	r3, #1
 800551e:	d107      	bne.n	8005530 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005528:	f043 0304 	orr.w	r3, r3, #4
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005530:	7dfb      	ldrb	r3, [r7, #23]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800553c:	b004      	add	sp, #16
 800553e:	4770      	bx	lr
 8005540:	803c3800 	.word	0x803c3800

08005544 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	019b      	lsls	r3, r3, #6
 8005556:	f043 0220 	orr.w	r2, r3, #32
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3301      	adds	r3, #1
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	4a08      	ldr	r2, [pc, #32]	; (8005588 <USB_FlushTxFifo+0x44>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d901      	bls.n	800556e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e006      	b.n	800557c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f003 0320 	and.w	r3, r3, #32
 8005576:	2b20      	cmp	r3, #32
 8005578:	d0f1      	beq.n	800555e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	00030d40 	.word	0x00030d40

0800558c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2210      	movs	r2, #16
 800559c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3301      	adds	r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	4a08      	ldr	r2, [pc, #32]	; (80055c8 <USB_FlushRxFifo+0x3c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d901      	bls.n	80055ae <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e006      	b.n	80055bc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0310 	and.w	r3, r3, #16
 80055b6:	2b10      	cmp	r3, #16
 80055b8:	d0f1      	beq.n	800559e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	00030d40 	.word	0x00030d40

080055cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	68f9      	ldr	r1, [r7, #12]
 80055e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055ec:	4313      	orrs	r3, r2
 80055ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80055fe:	b480      	push	{r7}
 8005600:	b087      	sub	sp, #28
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0306 	and.w	r3, r3, #6
 8005616:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d102      	bne.n	8005624 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800561e:	2300      	movs	r3, #0
 8005620:	75fb      	strb	r3, [r7, #23]
 8005622:	e00a      	b.n	800563a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d002      	beq.n	8005630 <USB_GetDevSpeed+0x32>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b06      	cmp	r3, #6
 800562e:	d102      	bne.n	8005636 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005630:	2302      	movs	r3, #2
 8005632:	75fb      	strb	r3, [r7, #23]
 8005634:	e001      	b.n	800563a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005636:	230f      	movs	r3, #15
 8005638:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800563a:	7dfb      	ldrb	r3, [r7, #23]
}
 800563c:	4618      	mov	r0, r3
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	785b      	ldrb	r3, [r3, #1]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d13a      	bne.n	80056da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	2101      	movs	r1, #1
 8005676:	fa01 f303 	lsl.w	r3, r1, r3
 800567a:	b29b      	uxth	r3, r3
 800567c:	68f9      	ldr	r1, [r7, #12]
 800567e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005682:	4313      	orrs	r3, r2
 8005684:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d155      	bne.n	8005748 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	78db      	ldrb	r3, [r3, #3]
 80056b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	059b      	lsls	r3, r3, #22
 80056be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056c0:	4313      	orrs	r3, r2
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	0151      	lsls	r1, r2, #5
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	440a      	add	r2, r1
 80056ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	e036      	b.n	8005748 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	2101      	movs	r1, #1
 80056ec:	fa01 f303 	lsl.w	r3, r1, r3
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	68f9      	ldr	r1, [r7, #12]
 80056f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056f8:	4313      	orrs	r3, r2
 80056fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d11a      	bne.n	8005748 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	78db      	ldrb	r3, [r3, #3]
 800572c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800572e:	430b      	orrs	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	440a      	add	r2, r1
 800573a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005746:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	785b      	ldrb	r3, [r3, #1]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d161      	bne.n	8005838 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800578a:	d11f      	bne.n	80057cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	0151      	lsls	r1, r2, #5
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	440a      	add	r2, r1
 80057a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	2101      	movs	r1, #1
 80057de:	fa01 f303 	lsl.w	r3, r1, r3
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	43db      	mvns	r3, r3
 80057e6:	68f9      	ldr	r1, [r7, #12]
 80057e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057ec:	4013      	ands	r3, r2
 80057ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	f003 030f 	and.w	r3, r3, #15
 8005800:	2101      	movs	r1, #1
 8005802:	fa01 f303 	lsl.w	r3, r1, r3
 8005806:	b29b      	uxth	r3, r3
 8005808:	43db      	mvns	r3, r3
 800580a:	68f9      	ldr	r1, [r7, #12]
 800580c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005810:	4013      	ands	r3, r2
 8005812:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	0159      	lsls	r1, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	440b      	add	r3, r1
 800582a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582e:	4619      	mov	r1, r3
 8005830:	4b35      	ldr	r3, [pc, #212]	; (8005908 <USB_DeactivateEndpoint+0x1b0>)
 8005832:	4013      	ands	r3, r2
 8005834:	600b      	str	r3, [r1, #0]
 8005836:	e060      	b.n	80058fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800584a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800584e:	d11f      	bne.n	8005890 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	0151      	lsls	r1, r2, #5
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	440a      	add	r2, r1
 8005866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800586a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800586e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	440a      	add	r2, r1
 8005886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800588a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800588e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	f003 030f 	and.w	r3, r3, #15
 80058a0:	2101      	movs	r1, #1
 80058a2:	fa01 f303 	lsl.w	r3, r1, r3
 80058a6:	041b      	lsls	r3, r3, #16
 80058a8:	43db      	mvns	r3, r3
 80058aa:	68f9      	ldr	r1, [r7, #12]
 80058ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b0:	4013      	ands	r3, r2
 80058b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	f003 030f 	and.w	r3, r3, #15
 80058c4:	2101      	movs	r1, #1
 80058c6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ca:	041b      	lsls	r3, r3, #16
 80058cc:	43db      	mvns	r3, r3
 80058ce:	68f9      	ldr	r1, [r7, #12]
 80058d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058d4:	4013      	ands	r3, r2
 80058d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	0159      	lsls	r1, r3, #5
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	440b      	add	r3, r1
 80058ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f2:	4619      	mov	r1, r3
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <USB_DeactivateEndpoint+0x1b4>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	ec337800 	.word	0xec337800
 800590c:	eff37800 	.word	0xeff37800

08005910 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	; 0x28
 8005914:	af02      	add	r7, sp, #8
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	4613      	mov	r3, r2
 800591c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	785b      	ldrb	r3, [r3, #1]
 800592c:	2b01      	cmp	r3, #1
 800592e:	f040 815c 	bne.w	8005bea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d132      	bne.n	80059a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005954:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005958:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800595c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	0151      	lsls	r1, r2, #5
 8005970:	69fa      	ldr	r2, [r7, #28]
 8005972:	440a      	add	r2, r1
 8005974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005978:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800597c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	0151      	lsls	r1, r2, #5
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	440a      	add	r2, r1
 8005994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005998:	0cdb      	lsrs	r3, r3, #19
 800599a:	04db      	lsls	r3, r3, #19
 800599c:	6113      	str	r3, [r2, #16]
 800599e:	e074      	b.n	8005a8a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ba:	0cdb      	lsrs	r3, r3, #19
 80059bc:	04db      	lsls	r3, r3, #19
 80059be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	0151      	lsls	r1, r2, #5
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	440a      	add	r2, r1
 80059d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	6959      	ldr	r1, [r3, #20]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	440b      	add	r3, r1
 80059fc:	1e59      	subs	r1, r3, #1
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a06:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a08:	4b9d      	ldr	r3, [pc, #628]	; (8005c80 <USB_EPStartXfer+0x370>)
 8005a0a:	400b      	ands	r3, r1
 8005a0c:	69b9      	ldr	r1, [r7, #24]
 8005a0e:	0148      	lsls	r0, r1, #5
 8005a10:	69f9      	ldr	r1, [r7, #28]
 8005a12:	4401      	add	r1, r0
 8005a14:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a32:	69b9      	ldr	r1, [r7, #24]
 8005a34:	0148      	lsls	r0, r1, #5
 8005a36:	69f9      	ldr	r1, [r7, #28]
 8005a38:	4401      	add	r1, r0
 8005a3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	78db      	ldrb	r3, [r3, #3]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d11f      	bne.n	8005a8a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	0151      	lsls	r1, r2, #5
 8005a5c:	69fa      	ldr	r2, [r7, #28]
 8005a5e:	440a      	add	r2, r1
 8005a60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a64:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005a68:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	0151      	lsls	r1, r2, #5
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	440a      	add	r2, r1
 8005a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a88:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d14b      	bne.n	8005b28 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d009      	beq.n	8005aac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	78db      	ldrb	r3, [r3, #3]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d128      	bne.n	8005b06 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d110      	bne.n	8005ae6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	0151      	lsls	r1, r2, #5
 8005ad6:	69fa      	ldr	r2, [r7, #28]
 8005ad8:	440a      	add	r2, r1
 8005ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ade:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ae2:	6013      	str	r3, [r2, #0]
 8005ae4:	e00f      	b.n	8005b06 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	0151      	lsls	r1, r2, #5
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	440a      	add	r2, r1
 8005afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b04:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	0151      	lsls	r1, r2, #5
 8005b18:	69fa      	ldr	r2, [r7, #28]
 8005b1a:	440a      	add	r2, r1
 8005b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	e12f      	b.n	8005d88 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	69fa      	ldr	r2, [r7, #28]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b46:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	78db      	ldrb	r3, [r3, #3]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d015      	beq.n	8005b7c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 8117 	beq.w	8005d88 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b70:	69f9      	ldr	r1, [r7, #28]
 8005b72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b76:	4313      	orrs	r3, r2
 8005b78:	634b      	str	r3, [r1, #52]	; 0x34
 8005b7a:	e105      	b.n	8005d88 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d110      	bne.n	8005bae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	0151      	lsls	r1, r2, #5
 8005b9e:	69fa      	ldr	r2, [r7, #28]
 8005ba0:	440a      	add	r2, r1
 8005ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	e00f      	b.n	8005bce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	0151      	lsls	r1, r2, #5
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	440a      	add	r2, r1
 8005bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bcc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	68d9      	ldr	r1, [r3, #12]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	781a      	ldrb	r2, [r3, #0]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	b298      	uxth	r0, r3
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	4603      	mov	r3, r0
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 fa2b 	bl	800603e <USB_WritePacket>
 8005be8:	e0ce      	b.n	8005d88 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	0151      	lsls	r1, r2, #5
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	440a      	add	r2, r1
 8005c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c04:	0cdb      	lsrs	r3, r3, #19
 8005c06:	04db      	lsls	r3, r3, #19
 8005c08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	0151      	lsls	r1, r2, #5
 8005c1c:	69fa      	ldr	r2, [r7, #28]
 8005c1e:	440a      	add	r2, r1
 8005c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d126      	bne.n	8005c84 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c4c:	69b9      	ldr	r1, [r7, #24]
 8005c4e:	0148      	lsls	r0, r1, #5
 8005c50:	69f9      	ldr	r1, [r7, #28]
 8005c52:	4401      	add	r1, r0
 8005c54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	0151      	lsls	r1, r2, #5
 8005c6e:	69fa      	ldr	r2, [r7, #28]
 8005c70:	440a      	add	r2, r1
 8005c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c7a:	6113      	str	r3, [r2, #16]
 8005c7c:	e036      	b.n	8005cec <USB_EPStartXfer+0x3dc>
 8005c7e:	bf00      	nop
 8005c80:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	695a      	ldr	r2, [r3, #20]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	1e5a      	subs	r2, r3, #1
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c98:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	8afb      	ldrh	r3, [r7, #22]
 8005caa:	04d9      	lsls	r1, r3, #19
 8005cac:	4b39      	ldr	r3, [pc, #228]	; (8005d94 <USB_EPStartXfer+0x484>)
 8005cae:	400b      	ands	r3, r1
 8005cb0:	69b9      	ldr	r1, [r7, #24]
 8005cb2:	0148      	lsls	r0, r1, #5
 8005cb4:	69f9      	ldr	r1, [r7, #28]
 8005cb6:	4401      	add	r1, r0
 8005cb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ccc:	691a      	ldr	r2, [r3, #16]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	8af9      	ldrh	r1, [r7, #22]
 8005cd4:	fb01 f303 	mul.w	r3, r1, r3
 8005cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cdc:	69b9      	ldr	r1, [r7, #24]
 8005cde:	0148      	lsls	r0, r1, #5
 8005ce0:	69f9      	ldr	r1, [r7, #28]
 8005ce2:	4401      	add	r1, r0
 8005ce4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cec:	79fb      	ldrb	r3, [r7, #7]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d10d      	bne.n	8005d0e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d009      	beq.n	8005d0e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	68d9      	ldr	r1, [r3, #12]
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0a:	460a      	mov	r2, r1
 8005d0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	78db      	ldrb	r3, [r3, #3]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d128      	bne.n	8005d68 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d110      	bne.n	8005d48 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	0151      	lsls	r1, r2, #5
 8005d38:	69fa      	ldr	r2, [r7, #28]
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	e00f      	b.n	8005d68 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	0151      	lsls	r1, r2, #5
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	440a      	add	r2, r1
 8005d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	0151      	lsls	r1, r2, #5
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3720      	adds	r7, #32
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	1ff80000 	.word	0x1ff80000

08005d98 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	4613      	mov	r3, r2
 8005da4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	785b      	ldrb	r3, [r3, #1]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	f040 80cd 	bne.w	8005f54 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d132      	bne.n	8005e28 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	0151      	lsls	r1, r2, #5
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ddc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005de0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005de4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	0151      	lsls	r1, r2, #5
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	440a      	add	r2, r1
 8005dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	0151      	lsls	r1, r2, #5
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	440a      	add	r2, r1
 8005e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e20:	0cdb      	lsrs	r3, r3, #19
 8005e22:	04db      	lsls	r3, r3, #19
 8005e24:	6113      	str	r3, [r2, #16]
 8005e26:	e04e      	b.n	8005ec6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	0151      	lsls	r1, r2, #5
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	440a      	add	r2, r1
 8005e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e42:	0cdb      	lsrs	r3, r3, #19
 8005e44:	04db      	lsls	r3, r3, #19
 8005e46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	0151      	lsls	r1, r2, #5
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	440a      	add	r2, r1
 8005e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e6a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	695a      	ldr	r2, [r3, #20]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d903      	bls.n	8005e80 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	0151      	lsls	r1, r2, #5
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	440a      	add	r2, r1
 8005e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eb6:	6939      	ldr	r1, [r7, #16]
 8005eb8:	0148      	lsls	r0, r1, #5
 8005eba:	6979      	ldr	r1, [r7, #20]
 8005ebc:	4401      	add	r1, r0
 8005ebe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d11e      	bne.n	8005f0a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d009      	beq.n	8005ee8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	e092      	b.n	8006030 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	0151      	lsls	r1, r2, #5
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	440a      	add	r2, r1
 8005f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f28:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d07e      	beq.n	8006030 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	f003 030f 	and.w	r3, r3, #15
 8005f42:	2101      	movs	r1, #1
 8005f44:	fa01 f303 	lsl.w	r3, r1, r3
 8005f48:	6979      	ldr	r1, [r7, #20]
 8005f4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	634b      	str	r3, [r1, #52]	; 0x34
 8005f52:	e06d      	b.n	8006030 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f6e:	0cdb      	lsrs	r3, r3, #19
 8005f70:	04db      	lsls	r3, r3, #19
 8005f72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	0151      	lsls	r1, r2, #5
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	440a      	add	r2, r1
 8005f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f96:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fc6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd4:	691a      	ldr	r2, [r3, #16]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fde:	6939      	ldr	r1, [r7, #16]
 8005fe0:	0148      	lsls	r0, r1, #5
 8005fe2:	6979      	ldr	r1, [r7, #20]
 8005fe4:	4401      	add	r1, r0
 8005fe6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fea:	4313      	orrs	r3, r2
 8005fec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005fee:	79fb      	ldrb	r3, [r7, #7]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d10d      	bne.n	8006010 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d009      	beq.n	8006010 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	68d9      	ldr	r1, [r3, #12]
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600c:	460a      	mov	r2, r1
 800600e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	0151      	lsls	r1, r2, #5
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	440a      	add	r2, r1
 8006026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800602a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800602e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800603e:	b480      	push	{r7}
 8006040:	b089      	sub	sp, #36	; 0x24
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	4611      	mov	r1, r2
 800604a:	461a      	mov	r2, r3
 800604c:	460b      	mov	r3, r1
 800604e:	71fb      	strb	r3, [r7, #7]
 8006050:	4613      	mov	r3, r2
 8006052:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800605c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006060:	2b00      	cmp	r3, #0
 8006062:	d123      	bne.n	80060ac <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006064:	88bb      	ldrh	r3, [r7, #4]
 8006066:	3303      	adds	r3, #3
 8006068:	089b      	lsrs	r3, r3, #2
 800606a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800606c:	2300      	movs	r3, #0
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	e018      	b.n	80060a4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	031a      	lsls	r2, r3, #12
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	4413      	add	r3, r2
 800607a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800607e:	461a      	mov	r2, r3
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	3301      	adds	r3, #1
 800608a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	3301      	adds	r3, #1
 8006090:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	3301      	adds	r3, #1
 8006096:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	3301      	adds	r3, #1
 800609c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	3301      	adds	r3, #1
 80060a2:	61bb      	str	r3, [r7, #24]
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d3e2      	bcc.n	8006072 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3724      	adds	r7, #36	; 0x24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b08b      	sub	sp, #44	; 0x2c
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	60b9      	str	r1, [r7, #8]
 80060c4:	4613      	mov	r3, r2
 80060c6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80060d0:	88fb      	ldrh	r3, [r7, #6]
 80060d2:	089b      	lsrs	r3, r3, #2
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80060d8:	88fb      	ldrh	r3, [r7, #6]
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80060e0:	2300      	movs	r3, #0
 80060e2:	623b      	str	r3, [r7, #32]
 80060e4:	e014      	b.n	8006110 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	601a      	str	r2, [r3, #0]
    pDest++;
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	3301      	adds	r3, #1
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	3301      	adds	r3, #1
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	3301      	adds	r3, #1
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	3301      	adds	r3, #1
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	3301      	adds	r3, #1
 800610e:	623b      	str	r3, [r7, #32]
 8006110:	6a3a      	ldr	r2, [r7, #32]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	429a      	cmp	r2, r3
 8006116:	d3e6      	bcc.n	80060e6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006118:	8bfb      	ldrh	r3, [r7, #30]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d01e      	beq.n	800615c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006128:	461a      	mov	r2, r3
 800612a:	f107 0310 	add.w	r3, r7, #16
 800612e:	6812      	ldr	r2, [r2, #0]
 8006130:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	fa22 f303 	lsr.w	r3, r2, r3
 800613e:	b2da      	uxtb	r2, r3
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	701a      	strb	r2, [r3, #0]
      i++;
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	3301      	adds	r3, #1
 8006148:	623b      	str	r3, [r7, #32]
      pDest++;
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	3301      	adds	r3, #1
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006150:	8bfb      	ldrh	r3, [r7, #30]
 8006152:	3b01      	subs	r3, #1
 8006154:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006156:	8bfb      	ldrh	r3, [r7, #30]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1ea      	bne.n	8006132 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800615e:	4618      	mov	r0, r3
 8006160:	372c      	adds	r7, #44	; 0x2c
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	785b      	ldrb	r3, [r3, #1]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d12c      	bne.n	80061e0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	db12      	blt.n	80061be <USB_EPSetStall+0x54>
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00f      	beq.n	80061be <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061bc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	0151      	lsls	r1, r2, #5
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	440a      	add	r2, r1
 80061d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	e02b      	b.n	8006238 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	db12      	blt.n	8006218 <USB_EPSetStall+0xae>
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00f      	beq.n	8006218 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	0151      	lsls	r1, r2, #5
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	440a      	add	r2, r1
 800620e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006212:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006216:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	440a      	add	r2, r1
 800622e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006232:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006236:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006246:	b480      	push	{r7}
 8006248:	b085      	sub	sp, #20
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	785b      	ldrb	r3, [r3, #1]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d128      	bne.n	80062b4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	0151      	lsls	r1, r2, #5
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	440a      	add	r2, r1
 8006278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800627c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006280:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	78db      	ldrb	r3, [r3, #3]
 8006286:	2b03      	cmp	r3, #3
 8006288:	d003      	beq.n	8006292 <USB_EPClearStall+0x4c>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	78db      	ldrb	r3, [r3, #3]
 800628e:	2b02      	cmp	r3, #2
 8006290:	d138      	bne.n	8006304 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	4413      	add	r3, r2
 800629a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	0151      	lsls	r1, r2, #5
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	440a      	add	r2, r1
 80062a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	e027      	b.n	8006304 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	0151      	lsls	r1, r2, #5
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	440a      	add	r2, r1
 80062ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	78db      	ldrb	r3, [r3, #3]
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d003      	beq.n	80062e4 <USB_EPClearStall+0x9e>
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	78db      	ldrb	r3, [r3, #3]
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d10f      	bne.n	8006304 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	0151      	lsls	r1, r2, #5
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	440a      	add	r2, r1
 80062fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006302:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006312:	b480      	push	{r7}
 8006314:	b085      	sub	sp, #20
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	460b      	mov	r3, r1
 800631c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006330:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006334:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	78fb      	ldrb	r3, [r7, #3]
 8006340:	011b      	lsls	r3, r3, #4
 8006342:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006346:	68f9      	ldr	r1, [r7, #12]
 8006348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800634c:	4313      	orrs	r3, r2
 800634e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800635e:	b480      	push	{r7}
 8006360:	b085      	sub	sp, #20
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006378:	f023 0303 	bic.w	r3, r3, #3
 800637c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800638c:	f023 0302 	bic.w	r3, r3, #2
 8006390:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063ba:	f023 0303 	bic.w	r3, r3, #3
 80063be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063ce:	f043 0302 	orr.w	r3, r3, #2
 80063d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b085      	sub	sp, #20
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	4013      	ands	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063fa:	68fb      	ldr	r3, [r7, #12]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	4013      	ands	r3, r2
 800642a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	0c1b      	lsrs	r3, r3, #16
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	4013      	ands	r3, r2
 800645e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	b29b      	uxth	r3, r3
}
 8006464:	4618      	mov	r0, r3
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	4013      	ands	r3, r2
 800649c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800649e:	68bb      	ldr	r3, [r7, #8]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	460b      	mov	r3, r1
 80064b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ce:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	fa22 f303 	lsr.w	r3, r2, r3
 80064dc:	01db      	lsls	r3, r3, #7
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80064e6:	78fb      	ldrb	r3, [r7, #3]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4013      	ands	r3, r2
 80064f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064fa:	68bb      	ldr	r3, [r7, #8]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	f003 0301 	and.w	r3, r3, #1
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800653e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006542:	f023 0307 	bic.w	r3, r3, #7
 8006546:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800655a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
	...

0800656c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	460b      	mov	r3, r1
 8006576:	607a      	str	r2, [r7, #4]
 8006578:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	333c      	adds	r3, #60	; 0x3c
 8006582:	3304      	adds	r3, #4
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	4a26      	ldr	r2, [pc, #152]	; (8006624 <USB_EP0_OutStart+0xb8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d90a      	bls.n	80065a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800659c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065a0:	d101      	bne.n	80065a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	e037      	b.n	8006616 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ac:	461a      	mov	r2, r3
 80065ae:	2300      	movs	r3, #0
 80065b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065d4:	f043 0318 	orr.w	r3, r3, #24
 80065d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80065ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80065ee:	7afb      	ldrb	r3, [r7, #11]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d10f      	bne.n	8006614 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fa:	461a      	mov	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800660e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006612:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	4f54300a 	.word	0x4f54300a

08006628 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3301      	adds	r3, #1
 8006638:	60fb      	str	r3, [r7, #12]
 800663a:	4a13      	ldr	r2, [pc, #76]	; (8006688 <USB_CoreReset+0x60>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d901      	bls.n	8006644 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e01a      	b.n	800667a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	daf3      	bge.n	8006634 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	f043 0201 	orr.w	r2, r3, #1
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3301      	adds	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	4a09      	ldr	r2, [pc, #36]	; (8006688 <USB_CoreReset+0x60>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d901      	bls.n	800666c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e006      	b.n	800667a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b01      	cmp	r3, #1
 8006676:	d0f1      	beq.n	800665c <USB_CoreReset+0x34>

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	00030d40 	.word	0x00030d40

0800668c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006698:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800669c:	f002 f96a 	bl	8008974 <USBD_static_malloc>
 80066a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d105      	bne.n	80066b4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80066b0:	2302      	movs	r3, #2
 80066b2:	e066      	b.n	8006782 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	7c1b      	ldrb	r3, [r3, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d119      	bne.n	80066f8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066c8:	2202      	movs	r2, #2
 80066ca:	2181      	movs	r1, #129	; 0x81
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f002 f82e 	bl	800872e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80066d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066dc:	2202      	movs	r2, #2
 80066de:	2101      	movs	r1, #1
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f002 f824 	bl	800872e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2210      	movs	r2, #16
 80066f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80066f6:	e016      	b.n	8006726 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066f8:	2340      	movs	r3, #64	; 0x40
 80066fa:	2202      	movs	r2, #2
 80066fc:	2181      	movs	r1, #129	; 0x81
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f002 f815 	bl	800872e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800670a:	2340      	movs	r3, #64	; 0x40
 800670c:	2202      	movs	r2, #2
 800670e:	2101      	movs	r1, #1
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f002 f80c 	bl	800872e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2210      	movs	r2, #16
 8006722:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006726:	2308      	movs	r3, #8
 8006728:	2203      	movs	r2, #3
 800672a:	2182      	movs	r1, #130	; 0x82
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 fffe 	bl	800872e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	7c1b      	ldrb	r3, [r3, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d109      	bne.n	8006770 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006762:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006766:	2101      	movs	r1, #1
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f002 f8cf 	bl	800890c <USBD_LL_PrepareReceive>
 800676e:	e007      	b.n	8006780 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006776:	2340      	movs	r3, #64	; 0x40
 8006778:	2101      	movs	r1, #1
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f002 f8c6 	bl	800890c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b082      	sub	sp, #8
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	460b      	mov	r3, r1
 8006794:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006796:	2181      	movs	r1, #129	; 0x81
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f001 ffee 	bl	800877a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80067a4:	2101      	movs	r1, #1
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f001 ffe7 	bl	800877a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80067b4:	2182      	movs	r1, #130	; 0x82
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f001 ffdf 	bl	800877a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00e      	beq.n	80067f4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067e6:	4618      	mov	r0, r3
 80067e8:	f002 f8d2 	bl	8008990 <USBD_static_free>
    pdev->pClassData = NULL;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006810:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006824:	2303      	movs	r3, #3
 8006826:	e0af      	b.n	8006988 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006830:	2b00      	cmp	r3, #0
 8006832:	d03f      	beq.n	80068b4 <USBD_CDC_Setup+0xb4>
 8006834:	2b20      	cmp	r3, #32
 8006836:	f040 809f 	bne.w	8006978 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	88db      	ldrh	r3, [r3, #6]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d02e      	beq.n	80068a0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	b25b      	sxtb	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	da16      	bge.n	800687a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006858:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	88d2      	ldrh	r2, [r2, #6]
 800685e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	88db      	ldrh	r3, [r3, #6]
 8006864:	2b07      	cmp	r3, #7
 8006866:	bf28      	it	cs
 8006868:	2307      	movcs	r3, #7
 800686a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	89fa      	ldrh	r2, [r7, #14]
 8006870:	4619      	mov	r1, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 fb19 	bl	8007eaa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006878:	e085      	b.n	8006986 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	785a      	ldrb	r2, [r3, #1]
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	88db      	ldrh	r3, [r3, #6]
 8006888:	b2da      	uxtb	r2, r3
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006890:	6939      	ldr	r1, [r7, #16]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	88db      	ldrh	r3, [r3, #6]
 8006896:	461a      	mov	r2, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 fb32 	bl	8007f02 <USBD_CtlPrepareRx>
      break;
 800689e:	e072      	b.n	8006986 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	7850      	ldrb	r0, [r2, #1]
 80068ac:	2200      	movs	r2, #0
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	4798      	blx	r3
      break;
 80068b2:	e068      	b.n	8006986 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	785b      	ldrb	r3, [r3, #1]
 80068b8:	2b0b      	cmp	r3, #11
 80068ba:	d852      	bhi.n	8006962 <USBD_CDC_Setup+0x162>
 80068bc:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <USBD_CDC_Setup+0xc4>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	080068f5 	.word	0x080068f5
 80068c8:	08006971 	.word	0x08006971
 80068cc:	08006963 	.word	0x08006963
 80068d0:	08006963 	.word	0x08006963
 80068d4:	08006963 	.word	0x08006963
 80068d8:	08006963 	.word	0x08006963
 80068dc:	08006963 	.word	0x08006963
 80068e0:	08006963 	.word	0x08006963
 80068e4:	08006963 	.word	0x08006963
 80068e8:	08006963 	.word	0x08006963
 80068ec:	0800691f 	.word	0x0800691f
 80068f0:	08006949 	.word	0x08006949
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d107      	bne.n	8006910 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006900:	f107 030a 	add.w	r3, r7, #10
 8006904:	2202      	movs	r2, #2
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f001 face 	bl	8007eaa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800690e:	e032      	b.n	8006976 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f001 fa58 	bl	8007dc8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006918:	2303      	movs	r3, #3
 800691a:	75fb      	strb	r3, [r7, #23]
          break;
 800691c:	e02b      	b.n	8006976 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b03      	cmp	r3, #3
 8006928:	d107      	bne.n	800693a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800692a:	f107 030d 	add.w	r3, r7, #13
 800692e:	2201      	movs	r2, #1
 8006930:	4619      	mov	r1, r3
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f001 fab9 	bl	8007eaa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006938:	e01d      	b.n	8006976 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f001 fa43 	bl	8007dc8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006942:	2303      	movs	r3, #3
 8006944:	75fb      	strb	r3, [r7, #23]
          break;
 8006946:	e016      	b.n	8006976 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b03      	cmp	r3, #3
 8006952:	d00f      	beq.n	8006974 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f001 fa36 	bl	8007dc8 <USBD_CtlError>
            ret = USBD_FAIL;
 800695c:	2303      	movs	r3, #3
 800695e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006960:	e008      	b.n	8006974 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f001 fa2f 	bl	8007dc8 <USBD_CtlError>
          ret = USBD_FAIL;
 800696a:	2303      	movs	r3, #3
 800696c:	75fb      	strb	r3, [r7, #23]
          break;
 800696e:	e002      	b.n	8006976 <USBD_CDC_Setup+0x176>
          break;
 8006970:	bf00      	nop
 8006972:	e008      	b.n	8006986 <USBD_CDC_Setup+0x186>
          break;
 8006974:	bf00      	nop
      }
      break;
 8006976:	e006      	b.n	8006986 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f001 fa24 	bl	8007dc8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006980:	2303      	movs	r3, #3
 8006982:	75fb      	strb	r3, [r7, #23]
      break;
 8006984:	bf00      	nop
  }

  return (uint8_t)ret;
 8006986:	7dfb      	ldrb	r3, [r7, #23]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80069a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e04f      	b.n	8006a52 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80069ba:	78fa      	ldrb	r2, [r7, #3]
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	440b      	add	r3, r1
 80069c8:	3318      	adds	r3, #24
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d029      	beq.n	8006a24 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80069d0:	78fa      	ldrb	r2, [r7, #3]
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	4613      	mov	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	440b      	add	r3, r1
 80069de:	3318      	adds	r3, #24
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	78f9      	ldrb	r1, [r7, #3]
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	460b      	mov	r3, r1
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	1a5b      	subs	r3, r3, r1
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4403      	add	r3, r0
 80069f0:	3344      	adds	r3, #68	; 0x44
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80069f8:	fb03 f301 	mul.w	r3, r3, r1
 80069fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d110      	bne.n	8006a24 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006a02:	78fa      	ldrb	r2, [r7, #3]
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	440b      	add	r3, r1
 8006a10:	3318      	adds	r3, #24
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a16:	78f9      	ldrb	r1, [r7, #3]
 8006a18:	2300      	movs	r3, #0
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 ff54 	bl	80088ca <USBD_LL_Transmit>
 8006a22:	e015      	b.n	8006a50 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006a4c:	78fa      	ldrb	r2, [r7, #3]
 8006a4e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	460b      	mov	r3, r1
 8006a64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e015      	b.n	8006aa8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a7c:	78fb      	ldrb	r3, [r7, #3]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 ff64 	bl	800894e <USBD_LL_GetRxDataSize>
 8006a86:	4602      	mov	r2, r0
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006abe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e01b      	b.n	8006b02 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d015      	beq.n	8006b00 <USBD_CDC_EP0_RxReady+0x50>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ada:	2bff      	cmp	r3, #255	; 0xff
 8006adc:	d010      	beq.n	8006b00 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006aec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006af4:	b292      	uxth	r2, r2
 8006af6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	22ff      	movs	r2, #255	; 0xff
 8006afc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2243      	movs	r2, #67	; 0x43
 8006b18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006b1a:	4b03      	ldr	r3, [pc, #12]	; (8006b28 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	20000094 	.word	0x20000094

08006b2c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2243      	movs	r2, #67	; 0x43
 8006b38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006b3a:	4b03      	ldr	r3, [pc, #12]	; (8006b48 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	20000050 	.word	0x20000050

08006b4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2243      	movs	r2, #67	; 0x43
 8006b58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006b5a:	4b03      	ldr	r3, [pc, #12]	; (8006b68 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	200000d8 	.word	0x200000d8

08006b6c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	220a      	movs	r2, #10
 8006b78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006b7a:	4b03      	ldr	r3, [pc, #12]	; (8006b88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	2000000c 	.word	0x2000000c

08006b8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e004      	b.n	8006baa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b087      	sub	sp, #28
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bc8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e008      	b.n	8006be6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	371c      	adds	r7, #28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c02:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e004      	b.n	8006c18 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c32:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006c34:	2301      	movs	r3, #1
 8006c36:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e01a      	b.n	8006c7c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d114      	bne.n	8006c7a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006c6e:	2181      	movs	r1, #129	; 0x81
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 fe2a 	bl	80088ca <USBD_LL_Transmit>

    ret = USBD_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e016      	b.n	8006cd0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	7c1b      	ldrb	r3, [r3, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d109      	bne.n	8006cbe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 fe28 	bl	800890c <USBD_LL_PrepareReceive>
 8006cbc:	e007      	b.n	8006cce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cc4:	2340      	movs	r3, #64	; 0x40
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 fe1f 	bl	800890c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e01f      	b.n	8006d30 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	79fa      	ldrb	r2, [r7, #7]
 8006d22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f001 fc9b 	bl	8008660 <USBD_LL_Init>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e016      	b.n	8006d7e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00b      	beq.n	8006d7c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	f107 020e 	add.w	r2, r7, #14
 8006d70:	4610      	mov	r0, r2
 8006d72:	4798      	blx	r3
 8006d74:	4602      	mov	r2, r0
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f001 fcb2 	bl	80086f8 <USBD_LL_Start>
 8006d94:	4603      	mov	r3, r0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d009      	beq.n	8006de2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	78fa      	ldrb	r2, [r7, #3]
 8006dd8:	4611      	mov	r1, r2
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	4798      	blx	r3
 8006dde:	4603      	mov	r3, r0
 8006de0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	460b      	mov	r3, r1
 8006df6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d007      	beq.n	8006e12 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	78fa      	ldrb	r2, [r7, #3]
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	4798      	blx	r3
  }

  return USBD_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 ff90 	bl	8007d54 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006e42:	461a      	mov	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e50:	f003 031f 	and.w	r3, r3, #31
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d01a      	beq.n	8006e8e <USBD_LL_SetupStage+0x72>
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d822      	bhi.n	8006ea2 <USBD_LL_SetupStage+0x86>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d002      	beq.n	8006e66 <USBD_LL_SetupStage+0x4a>
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d00a      	beq.n	8006e7a <USBD_LL_SetupStage+0x5e>
 8006e64:	e01d      	b.n	8006ea2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fa62 	bl	8007338 <USBD_StdDevReq>
 8006e74:	4603      	mov	r3, r0
 8006e76:	73fb      	strb	r3, [r7, #15]
      break;
 8006e78:	e020      	b.n	8006ebc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fac6 	bl	8007414 <USBD_StdItfReq>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e8c:	e016      	b.n	8006ebc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fb05 	bl	80074a6 <USBD_StdEPReq>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea0:	e00c      	b.n	8006ebc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ea8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f001 fc81 	bl	80087b8 <USBD_LL_StallEP>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	73fb      	strb	r3, [r7, #15]
      break;
 8006eba:	bf00      	nop
  }

  return ret;
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b086      	sub	sp, #24
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	60f8      	str	r0, [r7, #12]
 8006ece:	460b      	mov	r3, r1
 8006ed0:	607a      	str	r2, [r7, #4]
 8006ed2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006ed4:	7afb      	ldrb	r3, [r7, #11]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d138      	bne.n	8006f4c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006ee0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d14a      	bne.n	8006f82 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d913      	bls.n	8006f20 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	1ad2      	subs	r2, r2, r3
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	68da      	ldr	r2, [r3, #12]
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	bf28      	it	cs
 8006f12:	4613      	movcs	r3, r2
 8006f14:	461a      	mov	r2, r3
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f001 f80f 	bl	8007f3c <USBD_CtlContinueRx>
 8006f1e:	e030      	b.n	8006f82 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b03      	cmp	r3, #3
 8006f2a:	d10b      	bne.n	8006f44 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d005      	beq.n	8006f44 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f001 f80a 	bl	8007f5e <USBD_CtlSendStatus>
 8006f4a:	e01a      	b.n	8006f82 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d114      	bne.n	8006f82 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00e      	beq.n	8006f82 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	7afa      	ldrb	r2, [r7, #11]
 8006f6e:	4611      	mov	r1, r2
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	4798      	blx	r3
 8006f74:	4603      	mov	r3, r0
 8006f76:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
 8006f80:	e000      	b.n	8006f84 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	460b      	mov	r3, r1
 8006f96:	607a      	str	r2, [r7, #4]
 8006f98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006f9a:	7afb      	ldrb	r3, [r7, #11]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d16b      	bne.n	8007078 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3314      	adds	r3, #20
 8006fa4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d156      	bne.n	800705e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d914      	bls.n	8006fe6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	1ad2      	subs	r2, r2, r3
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	6879      	ldr	r1, [r7, #4]
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 ff84 	bl	8007ee0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fd8:	2300      	movs	r3, #0
 8006fda:	2200      	movs	r2, #0
 8006fdc:	2100      	movs	r1, #0
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f001 fc94 	bl	800890c <USBD_LL_PrepareReceive>
 8006fe4:	e03b      	b.n	800705e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	68da      	ldr	r2, [r3, #12]
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d11c      	bne.n	800702c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d316      	bcc.n	800702c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007008:	429a      	cmp	r2, r3
 800700a:	d20f      	bcs.n	800702c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800700c:	2200      	movs	r2, #0
 800700e:	2100      	movs	r1, #0
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f000 ff65 	bl	8007ee0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800701e:	2300      	movs	r3, #0
 8007020:	2200      	movs	r2, #0
 8007022:	2100      	movs	r1, #0
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f001 fc71 	bl	800890c <USBD_LL_PrepareReceive>
 800702a:	e018      	b.n	800705e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b03      	cmp	r3, #3
 8007036:	d10b      	bne.n	8007050 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d005      	beq.n	8007050 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007050:	2180      	movs	r1, #128	; 0x80
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f001 fbb0 	bl	80087b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 ff93 	bl	8007f84 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007064:	2b01      	cmp	r3, #1
 8007066:	d122      	bne.n	80070ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f7ff fe98 	bl	8006d9e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007076:	e01a      	b.n	80070ae <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b03      	cmp	r3, #3
 8007082:	d114      	bne.n	80070ae <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00e      	beq.n	80070ae <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	7afa      	ldrb	r2, [r7, #11]
 800709a:	4611      	mov	r1, r2
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	4798      	blx	r3
 80070a0:	4603      	mov	r3, r0
 80070a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
 80070ac:	e000      	b.n	80070b0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e02f      	b.n	800714c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00f      	beq.n	8007116 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d009      	beq.n	8007116 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	6852      	ldr	r2, [r2, #4]
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	4611      	mov	r1, r2
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007116:	2340      	movs	r3, #64	; 0x40
 8007118:	2200      	movs	r2, #0
 800711a:	2100      	movs	r1, #0
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f001 fb06 	bl	800872e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2240      	movs	r2, #64	; 0x40
 800712e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007132:	2340      	movs	r3, #64	; 0x40
 8007134:	2200      	movs	r2, #0
 8007136:	2180      	movs	r1, #128	; 0x80
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 faf8 	bl	800872e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2240      	movs	r2, #64	; 0x40
 8007148:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	78fa      	ldrb	r2, [r7, #3]
 8007164:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007182:	b2da      	uxtb	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2204      	movs	r2, #4
 800718e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b04      	cmp	r3, #4
 80071b2:	d106      	bne.n	80071c2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e012      	b.n	800720c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d10b      	bne.n	800720a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d005      	beq.n	800720a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	460b      	mov	r3, r1
 800721e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800722a:	2303      	movs	r3, #3
 800722c:	e014      	b.n	8007258 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b03      	cmp	r3, #3
 8007238:	d10d      	bne.n	8007256 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d007      	beq.n	8007256 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	78fa      	ldrb	r2, [r7, #3]
 8007250:	4611      	mov	r1, r2
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007276:	2303      	movs	r3, #3
 8007278:	e014      	b.n	80072a4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b03      	cmp	r3, #3
 8007284:	d10d      	bne.n	80072a2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	2b00      	cmp	r3, #0
 8007290:	d007      	beq.n	80072a2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729a:	78fa      	ldrb	r2, [r7, #3]
 800729c:	4611      	mov	r1, r2
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b082      	sub	sp, #8
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d009      	beq.n	80072f0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	6852      	ldr	r2, [r2, #4]
 80072e8:	b2d2      	uxtb	r2, r2
 80072ea:	4611      	mov	r1, r2
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	4798      	blx	r3
  }

  return USBD_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b087      	sub	sp, #28
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	3301      	adds	r3, #1
 8007310:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007318:	8a3b      	ldrh	r3, [r7, #16]
 800731a:	021b      	lsls	r3, r3, #8
 800731c:	b21a      	sxth	r2, r3
 800731e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007322:	4313      	orrs	r3, r2
 8007324:	b21b      	sxth	r3, r3
 8007326:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007328:	89fb      	ldrh	r3, [r7, #14]
}
 800732a:	4618      	mov	r0, r3
 800732c:	371c      	adds	r7, #28
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
	...

08007338 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800734e:	2b40      	cmp	r3, #64	; 0x40
 8007350:	d005      	beq.n	800735e <USBD_StdDevReq+0x26>
 8007352:	2b40      	cmp	r3, #64	; 0x40
 8007354:	d853      	bhi.n	80073fe <USBD_StdDevReq+0xc6>
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00b      	beq.n	8007372 <USBD_StdDevReq+0x3a>
 800735a:	2b20      	cmp	r3, #32
 800735c:	d14f      	bne.n	80073fe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	4798      	blx	r3
 800736c:	4603      	mov	r3, r0
 800736e:	73fb      	strb	r3, [r7, #15]
      break;
 8007370:	e04a      	b.n	8007408 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	785b      	ldrb	r3, [r3, #1]
 8007376:	2b09      	cmp	r3, #9
 8007378:	d83b      	bhi.n	80073f2 <USBD_StdDevReq+0xba>
 800737a:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <USBD_StdDevReq+0x48>)
 800737c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007380:	080073d5 	.word	0x080073d5
 8007384:	080073e9 	.word	0x080073e9
 8007388:	080073f3 	.word	0x080073f3
 800738c:	080073df 	.word	0x080073df
 8007390:	080073f3 	.word	0x080073f3
 8007394:	080073b3 	.word	0x080073b3
 8007398:	080073a9 	.word	0x080073a9
 800739c:	080073f3 	.word	0x080073f3
 80073a0:	080073cb 	.word	0x080073cb
 80073a4:	080073bd 	.word	0x080073bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f9de 	bl	800776c <USBD_GetDescriptor>
          break;
 80073b0:	e024      	b.n	80073fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fb43 	bl	8007a40 <USBD_SetAddress>
          break;
 80073ba:	e01f      	b.n	80073fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fb82 	bl	8007ac8 <USBD_SetConfig>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73fb      	strb	r3, [r7, #15]
          break;
 80073c8:	e018      	b.n	80073fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fc21 	bl	8007c14 <USBD_GetConfig>
          break;
 80073d2:	e013      	b.n	80073fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fc52 	bl	8007c80 <USBD_GetStatus>
          break;
 80073dc:	e00e      	b.n	80073fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fc81 	bl	8007ce8 <USBD_SetFeature>
          break;
 80073e6:	e009      	b.n	80073fc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fc90 	bl	8007d10 <USBD_ClrFeature>
          break;
 80073f0:	e004      	b.n	80073fc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fce7 	bl	8007dc8 <USBD_CtlError>
          break;
 80073fa:	bf00      	nop
      }
      break;
 80073fc:	e004      	b.n	8007408 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fce1 	bl	8007dc8 <USBD_CtlError>
      break;
 8007406:	bf00      	nop
  }

  return ret;
 8007408:	7bfb      	ldrb	r3, [r7, #15]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop

08007414 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800742a:	2b40      	cmp	r3, #64	; 0x40
 800742c:	d005      	beq.n	800743a <USBD_StdItfReq+0x26>
 800742e:	2b40      	cmp	r3, #64	; 0x40
 8007430:	d82f      	bhi.n	8007492 <USBD_StdItfReq+0x7e>
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <USBD_StdItfReq+0x26>
 8007436:	2b20      	cmp	r3, #32
 8007438:	d12b      	bne.n	8007492 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007440:	b2db      	uxtb	r3, r3
 8007442:	3b01      	subs	r3, #1
 8007444:	2b02      	cmp	r3, #2
 8007446:	d81d      	bhi.n	8007484 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	889b      	ldrh	r3, [r3, #4]
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b01      	cmp	r3, #1
 8007450:	d813      	bhi.n	800747a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	4798      	blx	r3
 8007460:	4603      	mov	r3, r0
 8007462:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	88db      	ldrh	r3, [r3, #6]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d110      	bne.n	800748e <USBD_StdItfReq+0x7a>
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10d      	bne.n	800748e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fd73 	bl	8007f5e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007478:	e009      	b.n	800748e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fca3 	bl	8007dc8 <USBD_CtlError>
          break;
 8007482:	e004      	b.n	800748e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fc9e 	bl	8007dc8 <USBD_CtlError>
          break;
 800748c:	e000      	b.n	8007490 <USBD_StdItfReq+0x7c>
          break;
 800748e:	bf00      	nop
      }
      break;
 8007490:	e004      	b.n	800749c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fc97 	bl	8007dc8 <USBD_CtlError>
      break;
 800749a:	bf00      	nop
  }

  return ret;
 800749c:	7bfb      	ldrb	r3, [r7, #15]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b084      	sub	sp, #16
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	889b      	ldrh	r3, [r3, #4]
 80074b8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074c2:	2b40      	cmp	r3, #64	; 0x40
 80074c4:	d007      	beq.n	80074d6 <USBD_StdEPReq+0x30>
 80074c6:	2b40      	cmp	r3, #64	; 0x40
 80074c8:	f200 8145 	bhi.w	8007756 <USBD_StdEPReq+0x2b0>
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00c      	beq.n	80074ea <USBD_StdEPReq+0x44>
 80074d0:	2b20      	cmp	r3, #32
 80074d2:	f040 8140 	bne.w	8007756 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	4798      	blx	r3
 80074e4:	4603      	mov	r3, r0
 80074e6:	73fb      	strb	r3, [r7, #15]
      break;
 80074e8:	e13a      	b.n	8007760 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	785b      	ldrb	r3, [r3, #1]
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d007      	beq.n	8007502 <USBD_StdEPReq+0x5c>
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	f300 8129 	bgt.w	800774a <USBD_StdEPReq+0x2a4>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d07f      	beq.n	80075fc <USBD_StdEPReq+0x156>
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d03c      	beq.n	800757a <USBD_StdEPReq+0xd4>
 8007500:	e123      	b.n	800774a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b02      	cmp	r3, #2
 800750c:	d002      	beq.n	8007514 <USBD_StdEPReq+0x6e>
 800750e:	2b03      	cmp	r3, #3
 8007510:	d016      	beq.n	8007540 <USBD_StdEPReq+0x9a>
 8007512:	e02c      	b.n	800756e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007514:	7bbb      	ldrb	r3, [r7, #14]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00d      	beq.n	8007536 <USBD_StdEPReq+0x90>
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	2b80      	cmp	r3, #128	; 0x80
 800751e:	d00a      	beq.n	8007536 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007520:	7bbb      	ldrb	r3, [r7, #14]
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 f947 	bl	80087b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800752a:	2180      	movs	r1, #128	; 0x80
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 f943 	bl	80087b8 <USBD_LL_StallEP>
 8007532:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007534:	e020      	b.n	8007578 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fc45 	bl	8007dc8 <USBD_CtlError>
              break;
 800753e:	e01b      	b.n	8007578 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	885b      	ldrh	r3, [r3, #2]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10e      	bne.n	8007566 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00b      	beq.n	8007566 <USBD_StdEPReq+0xc0>
 800754e:	7bbb      	ldrb	r3, [r7, #14]
 8007550:	2b80      	cmp	r3, #128	; 0x80
 8007552:	d008      	beq.n	8007566 <USBD_StdEPReq+0xc0>
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	88db      	ldrh	r3, [r3, #6]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d104      	bne.n	8007566 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800755c:	7bbb      	ldrb	r3, [r7, #14]
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 f929 	bl	80087b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fcf9 	bl	8007f5e <USBD_CtlSendStatus>

              break;
 800756c:	e004      	b.n	8007578 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fc29 	bl	8007dc8 <USBD_CtlError>
              break;
 8007576:	bf00      	nop
          }
          break;
 8007578:	e0ec      	b.n	8007754 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b02      	cmp	r3, #2
 8007584:	d002      	beq.n	800758c <USBD_StdEPReq+0xe6>
 8007586:	2b03      	cmp	r3, #3
 8007588:	d016      	beq.n	80075b8 <USBD_StdEPReq+0x112>
 800758a:	e030      	b.n	80075ee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800758c:	7bbb      	ldrb	r3, [r7, #14]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00d      	beq.n	80075ae <USBD_StdEPReq+0x108>
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	2b80      	cmp	r3, #128	; 0x80
 8007596:	d00a      	beq.n	80075ae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007598:	7bbb      	ldrb	r3, [r7, #14]
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 f90b 	bl	80087b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075a2:	2180      	movs	r1, #128	; 0x80
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 f907 	bl	80087b8 <USBD_LL_StallEP>
 80075aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075ac:	e025      	b.n	80075fa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fc09 	bl	8007dc8 <USBD_CtlError>
              break;
 80075b6:	e020      	b.n	80075fa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	885b      	ldrh	r3, [r3, #2]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d11b      	bne.n	80075f8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80075c0:	7bbb      	ldrb	r3, [r7, #14]
 80075c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d004      	beq.n	80075d4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f001 f911 	bl	80087f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fcc2 	bl	8007f5e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	4798      	blx	r3
 80075e8:	4603      	mov	r3, r0
 80075ea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80075ec:	e004      	b.n	80075f8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fbe9 	bl	8007dc8 <USBD_CtlError>
              break;
 80075f6:	e000      	b.n	80075fa <USBD_StdEPReq+0x154>
              break;
 80075f8:	bf00      	nop
          }
          break;
 80075fa:	e0ab      	b.n	8007754 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b02      	cmp	r3, #2
 8007606:	d002      	beq.n	800760e <USBD_StdEPReq+0x168>
 8007608:	2b03      	cmp	r3, #3
 800760a:	d032      	beq.n	8007672 <USBD_StdEPReq+0x1cc>
 800760c:	e097      	b.n	800773e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d007      	beq.n	8007624 <USBD_StdEPReq+0x17e>
 8007614:	7bbb      	ldrb	r3, [r7, #14]
 8007616:	2b80      	cmp	r3, #128	; 0x80
 8007618:	d004      	beq.n	8007624 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800761a:	6839      	ldr	r1, [r7, #0]
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fbd3 	bl	8007dc8 <USBD_CtlError>
                break;
 8007622:	e091      	b.n	8007748 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007624:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007628:	2b00      	cmp	r3, #0
 800762a:	da0b      	bge.n	8007644 <USBD_StdEPReq+0x19e>
 800762c:	7bbb      	ldrb	r3, [r7, #14]
 800762e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007632:	4613      	mov	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	3310      	adds	r3, #16
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	4413      	add	r3, r2
 8007640:	3304      	adds	r3, #4
 8007642:	e00b      	b.n	800765c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007644:	7bbb      	ldrb	r3, [r7, #14]
 8007646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800764a:	4613      	mov	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	4413      	add	r3, r2
 800765a:	3304      	adds	r3, #4
 800765c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2200      	movs	r2, #0
 8007662:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2202      	movs	r2, #2
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fc1d 	bl	8007eaa <USBD_CtlSendData>
              break;
 8007670:	e06a      	b.n	8007748 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007672:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007676:	2b00      	cmp	r3, #0
 8007678:	da11      	bge.n	800769e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	f003 020f 	and.w	r2, r3, #15
 8007680:	6879      	ldr	r1, [r7, #4]
 8007682:	4613      	mov	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	440b      	add	r3, r1
 800768c:	3324      	adds	r3, #36	; 0x24
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d117      	bne.n	80076c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fb96 	bl	8007dc8 <USBD_CtlError>
                  break;
 800769c:	e054      	b.n	8007748 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	f003 020f 	and.w	r2, r3, #15
 80076a4:	6879      	ldr	r1, [r7, #4]
 80076a6:	4613      	mov	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4413      	add	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	440b      	add	r3, r1
 80076b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d104      	bne.n	80076c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fb83 	bl	8007dc8 <USBD_CtlError>
                  break;
 80076c2:	e041      	b.n	8007748 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	da0b      	bge.n	80076e4 <USBD_StdEPReq+0x23e>
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076d2:	4613      	mov	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	3310      	adds	r3, #16
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	4413      	add	r3, r2
 80076e0:	3304      	adds	r3, #4
 80076e2:	e00b      	b.n	80076fc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
 80076e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076ea:	4613      	mov	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4413      	add	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	4413      	add	r3, r2
 80076fa:	3304      	adds	r3, #4
 80076fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <USBD_StdEPReq+0x264>
 8007704:	7bbb      	ldrb	r3, [r7, #14]
 8007706:	2b80      	cmp	r3, #128	; 0x80
 8007708:	d103      	bne.n	8007712 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2200      	movs	r2, #0
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	e00e      	b.n	8007730 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007712:	7bbb      	ldrb	r3, [r7, #14]
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f001 f88c 	bl	8008834 <USBD_LL_IsStallEP>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2201      	movs	r2, #1
 8007726:	601a      	str	r2, [r3, #0]
 8007728:	e002      	b.n	8007730 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2200      	movs	r2, #0
 800772e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2202      	movs	r2, #2
 8007734:	4619      	mov	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fbb7 	bl	8007eaa <USBD_CtlSendData>
              break;
 800773c:	e004      	b.n	8007748 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fb41 	bl	8007dc8 <USBD_CtlError>
              break;
 8007746:	bf00      	nop
          }
          break;
 8007748:	e004      	b.n	8007754 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fb3b 	bl	8007dc8 <USBD_CtlError>
          break;
 8007752:	bf00      	nop
      }
      break;
 8007754:	e004      	b.n	8007760 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fb35 	bl	8007dc8 <USBD_CtlError>
      break;
 800775e:	bf00      	nop
  }

  return ret;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
	...

0800776c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800777a:	2300      	movs	r3, #0
 800777c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	885b      	ldrh	r3, [r3, #2]
 8007786:	0a1b      	lsrs	r3, r3, #8
 8007788:	b29b      	uxth	r3, r3
 800778a:	3b01      	subs	r3, #1
 800778c:	2b06      	cmp	r3, #6
 800778e:	f200 8128 	bhi.w	80079e2 <USBD_GetDescriptor+0x276>
 8007792:	a201      	add	r2, pc, #4	; (adr r2, 8007798 <USBD_GetDescriptor+0x2c>)
 8007794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007798:	080077b5 	.word	0x080077b5
 800779c:	080077cd 	.word	0x080077cd
 80077a0:	0800780d 	.word	0x0800780d
 80077a4:	080079e3 	.word	0x080079e3
 80077a8:	080079e3 	.word	0x080079e3
 80077ac:	08007983 	.word	0x08007983
 80077b0:	080079af 	.word	0x080079af
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	7c12      	ldrb	r2, [r2, #16]
 80077c0:	f107 0108 	add.w	r1, r7, #8
 80077c4:	4610      	mov	r0, r2
 80077c6:	4798      	blx	r3
 80077c8:	60f8      	str	r0, [r7, #12]
      break;
 80077ca:	e112      	b.n	80079f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	7c1b      	ldrb	r3, [r3, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10d      	bne.n	80077f0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077dc:	f107 0208 	add.w	r2, r7, #8
 80077e0:	4610      	mov	r0, r2
 80077e2:	4798      	blx	r3
 80077e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	3301      	adds	r3, #1
 80077ea:	2202      	movs	r2, #2
 80077ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077ee:	e100      	b.n	80079f2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	f107 0208 	add.w	r2, r7, #8
 80077fc:	4610      	mov	r0, r2
 80077fe:	4798      	blx	r3
 8007800:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3301      	adds	r3, #1
 8007806:	2202      	movs	r2, #2
 8007808:	701a      	strb	r2, [r3, #0]
      break;
 800780a:	e0f2      	b.n	80079f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	885b      	ldrh	r3, [r3, #2]
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2b05      	cmp	r3, #5
 8007814:	f200 80ac 	bhi.w	8007970 <USBD_GetDescriptor+0x204>
 8007818:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <USBD_GetDescriptor+0xb4>)
 800781a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781e:	bf00      	nop
 8007820:	08007839 	.word	0x08007839
 8007824:	0800786d 	.word	0x0800786d
 8007828:	080078a1 	.word	0x080078a1
 800782c:	080078d5 	.word	0x080078d5
 8007830:	08007909 	.word	0x08007909
 8007834:	0800793d 	.word	0x0800793d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00b      	beq.n	800785c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	7c12      	ldrb	r2, [r2, #16]
 8007850:	f107 0108 	add.w	r1, r7, #8
 8007854:	4610      	mov	r0, r2
 8007856:	4798      	blx	r3
 8007858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800785a:	e091      	b.n	8007980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fab2 	bl	8007dc8 <USBD_CtlError>
            err++;
 8007864:	7afb      	ldrb	r3, [r7, #11]
 8007866:	3301      	adds	r3, #1
 8007868:	72fb      	strb	r3, [r7, #11]
          break;
 800786a:	e089      	b.n	8007980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00b      	beq.n	8007890 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	7c12      	ldrb	r2, [r2, #16]
 8007884:	f107 0108 	add.w	r1, r7, #8
 8007888:	4610      	mov	r0, r2
 800788a:	4798      	blx	r3
 800788c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800788e:	e077      	b.n	8007980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fa98 	bl	8007dc8 <USBD_CtlError>
            err++;
 8007898:	7afb      	ldrb	r3, [r7, #11]
 800789a:	3301      	adds	r3, #1
 800789c:	72fb      	strb	r3, [r7, #11]
          break;
 800789e:	e06f      	b.n	8007980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00b      	beq.n	80078c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	7c12      	ldrb	r2, [r2, #16]
 80078b8:	f107 0108 	add.w	r1, r7, #8
 80078bc:	4610      	mov	r0, r2
 80078be:	4798      	blx	r3
 80078c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078c2:	e05d      	b.n	8007980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fa7e 	bl	8007dc8 <USBD_CtlError>
            err++;
 80078cc:	7afb      	ldrb	r3, [r7, #11]
 80078ce:	3301      	adds	r3, #1
 80078d0:	72fb      	strb	r3, [r7, #11]
          break;
 80078d2:	e055      	b.n	8007980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00b      	beq.n	80078f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	7c12      	ldrb	r2, [r2, #16]
 80078ec:	f107 0108 	add.w	r1, r7, #8
 80078f0:	4610      	mov	r0, r2
 80078f2:	4798      	blx	r3
 80078f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078f6:	e043      	b.n	8007980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fa64 	bl	8007dc8 <USBD_CtlError>
            err++;
 8007900:	7afb      	ldrb	r3, [r7, #11]
 8007902:	3301      	adds	r3, #1
 8007904:	72fb      	strb	r3, [r7, #11]
          break;
 8007906:	e03b      	b.n	8007980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	7c12      	ldrb	r2, [r2, #16]
 8007920:	f107 0108 	add.w	r1, r7, #8
 8007924:	4610      	mov	r0, r2
 8007926:	4798      	blx	r3
 8007928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800792a:	e029      	b.n	8007980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fa4a 	bl	8007dc8 <USBD_CtlError>
            err++;
 8007934:	7afb      	ldrb	r3, [r7, #11]
 8007936:	3301      	adds	r3, #1
 8007938:	72fb      	strb	r3, [r7, #11]
          break;
 800793a:	e021      	b.n	8007980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00b      	beq.n	8007960 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	7c12      	ldrb	r2, [r2, #16]
 8007954:	f107 0108 	add.w	r1, r7, #8
 8007958:	4610      	mov	r0, r2
 800795a:	4798      	blx	r3
 800795c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800795e:	e00f      	b.n	8007980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fa30 	bl	8007dc8 <USBD_CtlError>
            err++;
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	3301      	adds	r3, #1
 800796c:	72fb      	strb	r3, [r7, #11]
          break;
 800796e:	e007      	b.n	8007980 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fa28 	bl	8007dc8 <USBD_CtlError>
          err++;
 8007978:	7afb      	ldrb	r3, [r7, #11]
 800797a:	3301      	adds	r3, #1
 800797c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800797e:	bf00      	nop
      }
      break;
 8007980:	e037      	b.n	80079f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	7c1b      	ldrb	r3, [r3, #16]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d109      	bne.n	800799e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007992:	f107 0208 	add.w	r2, r7, #8
 8007996:	4610      	mov	r0, r2
 8007998:	4798      	blx	r3
 800799a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800799c:	e029      	b.n	80079f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fa11 	bl	8007dc8 <USBD_CtlError>
        err++;
 80079a6:	7afb      	ldrb	r3, [r7, #11]
 80079a8:	3301      	adds	r3, #1
 80079aa:	72fb      	strb	r3, [r7, #11]
      break;
 80079ac:	e021      	b.n	80079f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	7c1b      	ldrb	r3, [r3, #16]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10d      	bne.n	80079d2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079be:	f107 0208 	add.w	r2, r7, #8
 80079c2:	4610      	mov	r0, r2
 80079c4:	4798      	blx	r3
 80079c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3301      	adds	r3, #1
 80079cc:	2207      	movs	r2, #7
 80079ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079d0:	e00f      	b.n	80079f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f9f7 	bl	8007dc8 <USBD_CtlError>
        err++;
 80079da:	7afb      	ldrb	r3, [r7, #11]
 80079dc:	3301      	adds	r3, #1
 80079de:	72fb      	strb	r3, [r7, #11]
      break;
 80079e0:	e007      	b.n	80079f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f9ef 	bl	8007dc8 <USBD_CtlError>
      err++;
 80079ea:	7afb      	ldrb	r3, [r7, #11]
 80079ec:	3301      	adds	r3, #1
 80079ee:	72fb      	strb	r3, [r7, #11]
      break;
 80079f0:	bf00      	nop
  }

  if (err != 0U)
 80079f2:	7afb      	ldrb	r3, [r7, #11]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d11e      	bne.n	8007a36 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	88db      	ldrh	r3, [r3, #6]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d016      	beq.n	8007a2e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007a00:	893b      	ldrh	r3, [r7, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00e      	beq.n	8007a24 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	88da      	ldrh	r2, [r3, #6]
 8007a0a:	893b      	ldrh	r3, [r7, #8]
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	bf28      	it	cs
 8007a10:	4613      	movcs	r3, r2
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a16:	893b      	ldrh	r3, [r7, #8]
 8007a18:	461a      	mov	r2, r3
 8007a1a:	68f9      	ldr	r1, [r7, #12]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fa44 	bl	8007eaa <USBD_CtlSendData>
 8007a22:	e009      	b.n	8007a38 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f9ce 	bl	8007dc8 <USBD_CtlError>
 8007a2c:	e004      	b.n	8007a38 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa95 	bl	8007f5e <USBD_CtlSendStatus>
 8007a34:	e000      	b.n	8007a38 <USBD_GetDescriptor+0x2cc>
    return;
 8007a36:	bf00      	nop
  }
}
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop

08007a40 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	889b      	ldrh	r3, [r3, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d131      	bne.n	8007ab6 <USBD_SetAddress+0x76>
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	88db      	ldrh	r3, [r3, #6]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d12d      	bne.n	8007ab6 <USBD_SetAddress+0x76>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	885b      	ldrh	r3, [r3, #2]
 8007a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8007a60:	d829      	bhi.n	8007ab6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	885b      	ldrh	r3, [r3, #2]
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d104      	bne.n	8007a84 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f9a3 	bl	8007dc8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a82:	e01d      	b.n	8007ac0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	7bfa      	ldrb	r2, [r7, #15]
 8007a88:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fefb 	bl	800888c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fa61 	bl	8007f5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d004      	beq.n	8007aac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aaa:	e009      	b.n	8007ac0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab4:	e004      	b.n	8007ac0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f985 	bl	8007dc8 <USBD_CtlError>
  }
}
 8007abe:	bf00      	nop
 8007ac0:	bf00      	nop
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	885b      	ldrh	r3, [r3, #2]
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	4b4c      	ldr	r3, [pc, #304]	; (8007c10 <USBD_SetConfig+0x148>)
 8007ade:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ae0:	4b4b      	ldr	r3, [pc, #300]	; (8007c10 <USBD_SetConfig+0x148>)
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d905      	bls.n	8007af4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f96c 	bl	8007dc8 <USBD_CtlError>
    return USBD_FAIL;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e088      	b.n	8007c06 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d002      	beq.n	8007b06 <USBD_SetConfig+0x3e>
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d025      	beq.n	8007b50 <USBD_SetConfig+0x88>
 8007b04:	e071      	b.n	8007bea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007b06:	4b42      	ldr	r3, [pc, #264]	; (8007c10 <USBD_SetConfig+0x148>)
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d01c      	beq.n	8007b48 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007b0e:	4b40      	ldr	r3, [pc, #256]	; (8007c10 <USBD_SetConfig+0x148>)
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	461a      	mov	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b18:	4b3d      	ldr	r3, [pc, #244]	; (8007c10 <USBD_SetConfig+0x148>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7ff f948 	bl	8006db4 <USBD_SetClassConfig>
 8007b24:	4603      	mov	r3, r0
 8007b26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d004      	beq.n	8007b38 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f949 	bl	8007dc8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b36:	e065      	b.n	8007c04 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fa10 	bl	8007f5e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2203      	movs	r2, #3
 8007b42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b46:	e05d      	b.n	8007c04 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fa08 	bl	8007f5e <USBD_CtlSendStatus>
      break;
 8007b4e:	e059      	b.n	8007c04 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b50:	4b2f      	ldr	r3, [pc, #188]	; (8007c10 <USBD_SetConfig+0x148>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d112      	bne.n	8007b7e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007b60:	4b2b      	ldr	r3, [pc, #172]	; (8007c10 <USBD_SetConfig+0x148>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	461a      	mov	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b6a:	4b29      	ldr	r3, [pc, #164]	; (8007c10 <USBD_SetConfig+0x148>)
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f7ff f93b 	bl	8006dec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f9f1 	bl	8007f5e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b7c:	e042      	b.n	8007c04 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007b7e:	4b24      	ldr	r3, [pc, #144]	; (8007c10 <USBD_SetConfig+0x148>)
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d02a      	beq.n	8007be2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7ff f929 	bl	8006dec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b9a:	4b1d      	ldr	r3, [pc, #116]	; (8007c10 <USBD_SetConfig+0x148>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ba4:	4b1a      	ldr	r3, [pc, #104]	; (8007c10 <USBD_SetConfig+0x148>)
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7ff f902 	bl	8006db4 <USBD_SetClassConfig>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00f      	beq.n	8007bda <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f903 	bl	8007dc8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	4619      	mov	r1, r3
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7ff f90e 	bl	8006dec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007bd8:	e014      	b.n	8007c04 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f9bf 	bl	8007f5e <USBD_CtlSendStatus>
      break;
 8007be0:	e010      	b.n	8007c04 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f9bb 	bl	8007f5e <USBD_CtlSendStatus>
      break;
 8007be8:	e00c      	b.n	8007c04 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f8eb 	bl	8007dc8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007bf2:	4b07      	ldr	r3, [pc, #28]	; (8007c10 <USBD_SetConfig+0x148>)
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff f8f7 	bl	8006dec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	73fb      	strb	r3, [r7, #15]
      break;
 8007c02:	bf00      	nop
  }

  return ret;
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	20000204 	.word	0x20000204

08007c14 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	88db      	ldrh	r3, [r3, #6]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d004      	beq.n	8007c30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f8cd 	bl	8007dc8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c2e:	e023      	b.n	8007c78 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	dc02      	bgt.n	8007c42 <USBD_GetConfig+0x2e>
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	dc03      	bgt.n	8007c48 <USBD_GetConfig+0x34>
 8007c40:	e015      	b.n	8007c6e <USBD_GetConfig+0x5a>
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d00b      	beq.n	8007c5e <USBD_GetConfig+0x4a>
 8007c46:	e012      	b.n	8007c6e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3308      	adds	r3, #8
 8007c52:	2201      	movs	r2, #1
 8007c54:	4619      	mov	r1, r3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f927 	bl	8007eaa <USBD_CtlSendData>
        break;
 8007c5c:	e00c      	b.n	8007c78 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	3304      	adds	r3, #4
 8007c62:	2201      	movs	r2, #1
 8007c64:	4619      	mov	r1, r3
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f91f 	bl	8007eaa <USBD_CtlSendData>
        break;
 8007c6c:	e004      	b.n	8007c78 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f8a9 	bl	8007dc8 <USBD_CtlError>
        break;
 8007c76:	bf00      	nop
}
 8007c78:	bf00      	nop
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	3b01      	subs	r3, #1
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d81e      	bhi.n	8007cd6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	88db      	ldrh	r3, [r3, #6]
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d004      	beq.n	8007caa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f890 	bl	8007dc8 <USBD_CtlError>
        break;
 8007ca8:	e01a      	b.n	8007ce0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d005      	beq.n	8007cc6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	f043 0202 	orr.w	r2, r3, #2
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	330c      	adds	r3, #12
 8007cca:	2202      	movs	r2, #2
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f8eb 	bl	8007eaa <USBD_CtlSendData>
      break;
 8007cd4:	e004      	b.n	8007ce0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f875 	bl	8007dc8 <USBD_CtlError>
      break;
 8007cde:	bf00      	nop
  }
}
 8007ce0:	bf00      	nop
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	885b      	ldrh	r3, [r3, #2]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d106      	bne.n	8007d08 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f92b 	bl	8007f5e <USBD_CtlSendStatus>
  }
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	3b01      	subs	r3, #1
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d80b      	bhi.n	8007d40 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	885b      	ldrh	r3, [r3, #2]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d10c      	bne.n	8007d4a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f910 	bl	8007f5e <USBD_CtlSendStatus>
      }
      break;
 8007d3e:	e004      	b.n	8007d4a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f840 	bl	8007dc8 <USBD_CtlError>
      break;
 8007d48:	e000      	b.n	8007d4c <USBD_ClrFeature+0x3c>
      break;
 8007d4a:	bf00      	nop
  }
}
 8007d4c:	bf00      	nop
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	781a      	ldrb	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	781a      	ldrb	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f7ff fabb 	bl	80072fa <SWAPBYTE>
 8007d84:	4603      	mov	r3, r0
 8007d86:	461a      	mov	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	3301      	adds	r3, #1
 8007d96:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f7ff faae 	bl	80072fa <SWAPBYTE>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	461a      	mov	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3301      	adds	r3, #1
 8007daa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	3301      	adds	r3, #1
 8007db0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f7ff faa1 	bl	80072fa <SWAPBYTE>
 8007db8:	4603      	mov	r3, r0
 8007dba:	461a      	mov	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	80da      	strh	r2, [r3, #6]
}
 8007dc0:	bf00      	nop
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dd2:	2180      	movs	r1, #128	; 0x80
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fcef 	bl	80087b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007dda:	2100      	movs	r1, #0
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fceb 	bl	80087b8 <USBD_LL_StallEP>
}
 8007de2:	bf00      	nop
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b086      	sub	sp, #24
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	60f8      	str	r0, [r7, #12]
 8007df2:	60b9      	str	r1, [r7, #8]
 8007df4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007df6:	2300      	movs	r3, #0
 8007df8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d036      	beq.n	8007e6e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007e04:	6938      	ldr	r0, [r7, #16]
 8007e06:	f000 f836 	bl	8007e76 <USBD_GetLen>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007e18:	7dfb      	ldrb	r3, [r7, #23]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	7812      	ldrb	r2, [r2, #0]
 8007e22:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e24:	7dfb      	ldrb	r3, [r7, #23]
 8007e26:	3301      	adds	r3, #1
 8007e28:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	4413      	add	r3, r2
 8007e30:	2203      	movs	r2, #3
 8007e32:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e34:	7dfb      	ldrb	r3, [r7, #23]
 8007e36:	3301      	adds	r3, #1
 8007e38:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007e3a:	e013      	b.n	8007e64 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007e3c:	7dfb      	ldrb	r3, [r7, #23]
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	4413      	add	r3, r2
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	7812      	ldrb	r2, [r2, #0]
 8007e46:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	613b      	str	r3, [r7, #16]
    idx++;
 8007e4e:	7dfb      	ldrb	r3, [r7, #23]
 8007e50:	3301      	adds	r3, #1
 8007e52:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	4413      	add	r3, r2
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	701a      	strb	r2, [r3, #0]
    idx++;
 8007e5e:	7dfb      	ldrb	r3, [r7, #23]
 8007e60:	3301      	adds	r3, #1
 8007e62:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e7      	bne.n	8007e3c <USBD_GetString+0x52>
 8007e6c:	e000      	b.n	8007e70 <USBD_GetString+0x86>
    return;
 8007e6e:	bf00      	nop
  }
}
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b085      	sub	sp, #20
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e86:	e005      	b.n	8007e94 <USBD_GetLen+0x1e>
  {
    len++;
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	3301      	adds	r3, #1
 8007e92:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1f5      	bne.n	8007e88 <USBD_GetLen+0x12>
  }

  return len;
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	60b9      	str	r1, [r7, #8]
 8007eb4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2202      	movs	r2, #2
 8007eba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	2100      	movs	r1, #0
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f000 fcfa 	bl	80088ca <USBD_LL_Transmit>

  return USBD_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f000 fce9 	bl	80088ca <USBD_LL_Transmit>

  return USBD_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b084      	sub	sp, #16
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2203      	movs	r2, #3
 8007f12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 fced 	bl	800890c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f000 fcdc 	bl	800890c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b082      	sub	sp, #8
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2204      	movs	r2, #4
 8007f6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f6e:	2300      	movs	r3, #0
 8007f70:	2200      	movs	r2, #0
 8007f72:	2100      	movs	r1, #0
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fca8 	bl	80088ca <USBD_LL_Transmit>

  return USBD_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2205      	movs	r2, #5
 8007f90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f94:	2300      	movs	r3, #0
 8007f96:	2200      	movs	r2, #0
 8007f98:	2100      	movs	r1, #0
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fcb6 	bl	800890c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	4912      	ldr	r1, [pc, #72]	; (8007ffc <MX_USB_DEVICE_Init+0x50>)
 8007fb4:	4812      	ldr	r0, [pc, #72]	; (8008000 <MX_USB_DEVICE_Init+0x54>)
 8007fb6:	f7fe fe8f 	bl	8006cd8 <USBD_Init>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007fc0:	f7f9 f8ec 	bl	800119c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007fc4:	490f      	ldr	r1, [pc, #60]	; (8008004 <MX_USB_DEVICE_Init+0x58>)
 8007fc6:	480e      	ldr	r0, [pc, #56]	; (8008000 <MX_USB_DEVICE_Init+0x54>)
 8007fc8:	f7fe feb6 	bl	8006d38 <USBD_RegisterClass>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007fd2:	f7f9 f8e3 	bl	800119c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007fd6:	490c      	ldr	r1, [pc, #48]	; (8008008 <MX_USB_DEVICE_Init+0x5c>)
 8007fd8:	4809      	ldr	r0, [pc, #36]	; (8008000 <MX_USB_DEVICE_Init+0x54>)
 8007fda:	f7fe fdd7 	bl	8006b8c <USBD_CDC_RegisterInterface>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007fe4:	f7f9 f8da 	bl	800119c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007fe8:	4805      	ldr	r0, [pc, #20]	; (8008000 <MX_USB_DEVICE_Init+0x54>)
 8007fea:	f7fe fecc 	bl	8006d86 <USBD_Start>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d001      	beq.n	8007ff8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ff4:	f7f9 f8d2 	bl	800119c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ff8:	bf00      	nop
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	20000130 	.word	0x20000130
 8008000:	20000570 	.word	0x20000570
 8008004:	20000018 	.word	0x20000018
 8008008:	2000011c 	.word	0x2000011c

0800800c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008010:	2200      	movs	r2, #0
 8008012:	4905      	ldr	r1, [pc, #20]	; (8008028 <CDC_Init_FS+0x1c>)
 8008014:	4805      	ldr	r0, [pc, #20]	; (800802c <CDC_Init_FS+0x20>)
 8008016:	f7fe fdce 	bl	8006bb6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800801a:	4905      	ldr	r1, [pc, #20]	; (8008030 <CDC_Init_FS+0x24>)
 800801c:	4803      	ldr	r0, [pc, #12]	; (800802c <CDC_Init_FS+0x20>)
 800801e:	f7fe fde8 	bl	8006bf2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008022:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008024:	4618      	mov	r0, r3
 8008026:	bd80      	pop	{r7, pc}
 8008028:	20001040 	.word	0x20001040
 800802c:	20000570 	.word	0x20000570
 8008030:	20000840 	.word	0x20000840

08008034 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008034:	b480      	push	{r7}
 8008036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008038:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800803a:	4618      	mov	r0, r3
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	6039      	str	r1, [r7, #0]
 800804e:	71fb      	strb	r3, [r7, #7]
 8008050:	4613      	mov	r3, r2
 8008052:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008054:	79fb      	ldrb	r3, [r7, #7]
 8008056:	2b23      	cmp	r3, #35	; 0x23
 8008058:	d84a      	bhi.n	80080f0 <CDC_Control_FS+0xac>
 800805a:	a201      	add	r2, pc, #4	; (adr r2, 8008060 <CDC_Control_FS+0x1c>)
 800805c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008060:	080080f1 	.word	0x080080f1
 8008064:	080080f1 	.word	0x080080f1
 8008068:	080080f1 	.word	0x080080f1
 800806c:	080080f1 	.word	0x080080f1
 8008070:	080080f1 	.word	0x080080f1
 8008074:	080080f1 	.word	0x080080f1
 8008078:	080080f1 	.word	0x080080f1
 800807c:	080080f1 	.word	0x080080f1
 8008080:	080080f1 	.word	0x080080f1
 8008084:	080080f1 	.word	0x080080f1
 8008088:	080080f1 	.word	0x080080f1
 800808c:	080080f1 	.word	0x080080f1
 8008090:	080080f1 	.word	0x080080f1
 8008094:	080080f1 	.word	0x080080f1
 8008098:	080080f1 	.word	0x080080f1
 800809c:	080080f1 	.word	0x080080f1
 80080a0:	080080f1 	.word	0x080080f1
 80080a4:	080080f1 	.word	0x080080f1
 80080a8:	080080f1 	.word	0x080080f1
 80080ac:	080080f1 	.word	0x080080f1
 80080b0:	080080f1 	.word	0x080080f1
 80080b4:	080080f1 	.word	0x080080f1
 80080b8:	080080f1 	.word	0x080080f1
 80080bc:	080080f1 	.word	0x080080f1
 80080c0:	080080f1 	.word	0x080080f1
 80080c4:	080080f1 	.word	0x080080f1
 80080c8:	080080f1 	.word	0x080080f1
 80080cc:	080080f1 	.word	0x080080f1
 80080d0:	080080f1 	.word	0x080080f1
 80080d4:	080080f1 	.word	0x080080f1
 80080d8:	080080f1 	.word	0x080080f1
 80080dc:	080080f1 	.word	0x080080f1
 80080e0:	080080f1 	.word	0x080080f1
 80080e4:	080080f1 	.word	0x080080f1
 80080e8:	080080f1 	.word	0x080080f1
 80080ec:	080080f1 	.word	0x080080f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80080f0:	bf00      	nop
  }

  return (USBD_OK);
 80080f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800810a:	6879      	ldr	r1, [r7, #4]
 800810c:	4805      	ldr	r0, [pc, #20]	; (8008124 <CDC_Receive_FS+0x24>)
 800810e:	f7fe fd70 	bl	8006bf2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008112:	4804      	ldr	r0, [pc, #16]	; (8008124 <CDC_Receive_FS+0x24>)
 8008114:	f7fe fdb6 	bl	8006c84 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008118:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800811a:	4618      	mov	r0, r3
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	20000570 	.word	0x20000570

08008128 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008138:	4b0d      	ldr	r3, [pc, #52]	; (8008170 <CDC_Transmit_FS+0x48>)
 800813a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800813e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008146:	2b00      	cmp	r3, #0
 8008148:	d001      	beq.n	800814e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800814a:	2301      	movs	r3, #1
 800814c:	e00b      	b.n	8008166 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800814e:	887b      	ldrh	r3, [r7, #2]
 8008150:	461a      	mov	r2, r3
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	4806      	ldr	r0, [pc, #24]	; (8008170 <CDC_Transmit_FS+0x48>)
 8008156:	f7fe fd2e 	bl	8006bb6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800815a:	4805      	ldr	r0, [pc, #20]	; (8008170 <CDC_Transmit_FS+0x48>)
 800815c:	f7fe fd62 	bl	8006c24 <USBD_CDC_TransmitPacket>
 8008160:	4603      	mov	r3, r0
 8008162:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008164:	7bfb      	ldrb	r3, [r7, #15]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20000570 	.word	0x20000570

08008174 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008174:	b480      	push	{r7}
 8008176:	b087      	sub	sp, #28
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	4613      	mov	r3, r2
 8008180:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008186:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800818a:	4618      	mov	r0, r3
 800818c:	371c      	adds	r7, #28
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
	...

08008198 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	4603      	mov	r3, r0
 80081a0:	6039      	str	r1, [r7, #0]
 80081a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	2212      	movs	r2, #18
 80081a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081aa:	4b03      	ldr	r3, [pc, #12]	; (80081b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	2000014c 	.word	0x2000014c

080081bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	6039      	str	r1, [r7, #0]
 80081c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	2204      	movs	r2, #4
 80081cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80081ce:	4b03      	ldr	r3, [pc, #12]	; (80081dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	20000160 	.word	0x20000160

080081e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	4603      	mov	r3, r0
 80081e8:	6039      	str	r1, [r7, #0]
 80081ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081ec:	79fb      	ldrb	r3, [r7, #7]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d105      	bne.n	80081fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	4907      	ldr	r1, [pc, #28]	; (8008214 <USBD_FS_ProductStrDescriptor+0x34>)
 80081f6:	4808      	ldr	r0, [pc, #32]	; (8008218 <USBD_FS_ProductStrDescriptor+0x38>)
 80081f8:	f7ff fdf7 	bl	8007dea <USBD_GetString>
 80081fc:	e004      	b.n	8008208 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	4904      	ldr	r1, [pc, #16]	; (8008214 <USBD_FS_ProductStrDescriptor+0x34>)
 8008202:	4805      	ldr	r0, [pc, #20]	; (8008218 <USBD_FS_ProductStrDescriptor+0x38>)
 8008204:	f7ff fdf1 	bl	8007dea <USBD_GetString>
  }
  return USBD_StrDesc;
 8008208:	4b02      	ldr	r3, [pc, #8]	; (8008214 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	20001840 	.word	0x20001840
 8008218:	08009314 	.word	0x08009314

0800821c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	6039      	str	r1, [r7, #0]
 8008226:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	4904      	ldr	r1, [pc, #16]	; (800823c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800822c:	4804      	ldr	r0, [pc, #16]	; (8008240 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800822e:	f7ff fddc 	bl	8007dea <USBD_GetString>
  return USBD_StrDesc;
 8008232:	4b02      	ldr	r3, [pc, #8]	; (800823c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008234:	4618      	mov	r0, r3
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	20001840 	.word	0x20001840
 8008240:	0800932c 	.word	0x0800932c

08008244 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	4603      	mov	r3, r0
 800824c:	6039      	str	r1, [r7, #0]
 800824e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	221a      	movs	r2, #26
 8008254:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008256:	f000 f843 	bl	80082e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800825a:	4b02      	ldr	r3, [pc, #8]	; (8008264 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800825c:	4618      	mov	r0, r3
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	20000164 	.word	0x20000164

08008268 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	4603      	mov	r3, r0
 8008270:	6039      	str	r1, [r7, #0]
 8008272:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008274:	79fb      	ldrb	r3, [r7, #7]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d105      	bne.n	8008286 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	4907      	ldr	r1, [pc, #28]	; (800829c <USBD_FS_ConfigStrDescriptor+0x34>)
 800827e:	4808      	ldr	r0, [pc, #32]	; (80082a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008280:	f7ff fdb3 	bl	8007dea <USBD_GetString>
 8008284:	e004      	b.n	8008290 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	4904      	ldr	r1, [pc, #16]	; (800829c <USBD_FS_ConfigStrDescriptor+0x34>)
 800828a:	4805      	ldr	r0, [pc, #20]	; (80082a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800828c:	f7ff fdad 	bl	8007dea <USBD_GetString>
  }
  return USBD_StrDesc;
 8008290:	4b02      	ldr	r3, [pc, #8]	; (800829c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008292:	4618      	mov	r0, r3
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	20001840 	.word	0x20001840
 80082a0:	08009340 	.word	0x08009340

080082a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	4603      	mov	r3, r0
 80082ac:	6039      	str	r1, [r7, #0]
 80082ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082b0:	79fb      	ldrb	r3, [r7, #7]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d105      	bne.n	80082c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	4907      	ldr	r1, [pc, #28]	; (80082d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082ba:	4808      	ldr	r0, [pc, #32]	; (80082dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082bc:	f7ff fd95 	bl	8007dea <USBD_GetString>
 80082c0:	e004      	b.n	80082cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	4904      	ldr	r1, [pc, #16]	; (80082d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082c6:	4805      	ldr	r0, [pc, #20]	; (80082dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082c8:	f7ff fd8f 	bl	8007dea <USBD_GetString>
  }
  return USBD_StrDesc;
 80082cc:	4b02      	ldr	r3, [pc, #8]	; (80082d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20001840 	.word	0x20001840
 80082dc:	0800934c 	.word	0x0800934c

080082e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80082e6:	4b0f      	ldr	r3, [pc, #60]	; (8008324 <Get_SerialNum+0x44>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80082ec:	4b0e      	ldr	r3, [pc, #56]	; (8008328 <Get_SerialNum+0x48>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80082f2:	4b0e      	ldr	r3, [pc, #56]	; (800832c <Get_SerialNum+0x4c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4413      	add	r3, r2
 80082fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d009      	beq.n	800831a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008306:	2208      	movs	r2, #8
 8008308:	4909      	ldr	r1, [pc, #36]	; (8008330 <Get_SerialNum+0x50>)
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f000 f814 	bl	8008338 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008310:	2204      	movs	r2, #4
 8008312:	4908      	ldr	r1, [pc, #32]	; (8008334 <Get_SerialNum+0x54>)
 8008314:	68b8      	ldr	r0, [r7, #8]
 8008316:	f000 f80f 	bl	8008338 <IntToUnicode>
  }
}
 800831a:	bf00      	nop
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	1fff7a10 	.word	0x1fff7a10
 8008328:	1fff7a14 	.word	0x1fff7a14
 800832c:	1fff7a18 	.word	0x1fff7a18
 8008330:	20000166 	.word	0x20000166
 8008334:	20000176 	.word	0x20000176

08008338 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008338:	b480      	push	{r7}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	4613      	mov	r3, r2
 8008344:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008346:	2300      	movs	r3, #0
 8008348:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800834a:	2300      	movs	r3, #0
 800834c:	75fb      	strb	r3, [r7, #23]
 800834e:	e027      	b.n	80083a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	0f1b      	lsrs	r3, r3, #28
 8008354:	2b09      	cmp	r3, #9
 8008356:	d80b      	bhi.n	8008370 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	0f1b      	lsrs	r3, r3, #28
 800835c:	b2da      	uxtb	r2, r3
 800835e:	7dfb      	ldrb	r3, [r7, #23]
 8008360:	005b      	lsls	r3, r3, #1
 8008362:	4619      	mov	r1, r3
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	440b      	add	r3, r1
 8008368:	3230      	adds	r2, #48	; 0x30
 800836a:	b2d2      	uxtb	r2, r2
 800836c:	701a      	strb	r2, [r3, #0]
 800836e:	e00a      	b.n	8008386 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	0f1b      	lsrs	r3, r3, #28
 8008374:	b2da      	uxtb	r2, r3
 8008376:	7dfb      	ldrb	r3, [r7, #23]
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	4619      	mov	r1, r3
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	440b      	add	r3, r1
 8008380:	3237      	adds	r2, #55	; 0x37
 8008382:	b2d2      	uxtb	r2, r2
 8008384:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	011b      	lsls	r3, r3, #4
 800838a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800838c:	7dfb      	ldrb	r3, [r7, #23]
 800838e:	005b      	lsls	r3, r3, #1
 8008390:	3301      	adds	r3, #1
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	4413      	add	r3, r2
 8008396:	2200      	movs	r2, #0
 8008398:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	3301      	adds	r3, #1
 800839e:	75fb      	strb	r3, [r7, #23]
 80083a0:	7dfa      	ldrb	r2, [r7, #23]
 80083a2:	79fb      	ldrb	r3, [r7, #7]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d3d3      	bcc.n	8008350 <IntToUnicode+0x18>
  }
}
 80083a8:	bf00      	nop
 80083aa:	bf00      	nop
 80083ac:	371c      	adds	r7, #28
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
	...

080083b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08a      	sub	sp, #40	; 0x28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083c0:	f107 0314 	add.w	r3, r7, #20
 80083c4:	2200      	movs	r2, #0
 80083c6:	601a      	str	r2, [r3, #0]
 80083c8:	605a      	str	r2, [r3, #4]
 80083ca:	609a      	str	r2, [r3, #8]
 80083cc:	60da      	str	r2, [r3, #12]
 80083ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083d8:	d147      	bne.n	800846a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083da:	2300      	movs	r3, #0
 80083dc:	613b      	str	r3, [r7, #16]
 80083de:	4b25      	ldr	r3, [pc, #148]	; (8008474 <HAL_PCD_MspInit+0xbc>)
 80083e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e2:	4a24      	ldr	r2, [pc, #144]	; (8008474 <HAL_PCD_MspInit+0xbc>)
 80083e4:	f043 0301 	orr.w	r3, r3, #1
 80083e8:	6313      	str	r3, [r2, #48]	; 0x30
 80083ea:	4b22      	ldr	r3, [pc, #136]	; (8008474 <HAL_PCD_MspInit+0xbc>)
 80083ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	613b      	str	r3, [r7, #16]
 80083f4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80083f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083fc:	2300      	movs	r3, #0
 80083fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008400:	2300      	movs	r3, #0
 8008402:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008404:	f107 0314 	add.w	r3, r7, #20
 8008408:	4619      	mov	r1, r3
 800840a:	481b      	ldr	r0, [pc, #108]	; (8008478 <HAL_PCD_MspInit+0xc0>)
 800840c:	f7f9 fe7e 	bl	800210c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008410:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008416:	2302      	movs	r3, #2
 8008418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800841a:	2300      	movs	r3, #0
 800841c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800841e:	2300      	movs	r3, #0
 8008420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008422:	230a      	movs	r3, #10
 8008424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008426:	f107 0314 	add.w	r3, r7, #20
 800842a:	4619      	mov	r1, r3
 800842c:	4812      	ldr	r0, [pc, #72]	; (8008478 <HAL_PCD_MspInit+0xc0>)
 800842e:	f7f9 fe6d 	bl	800210c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008432:	4b10      	ldr	r3, [pc, #64]	; (8008474 <HAL_PCD_MspInit+0xbc>)
 8008434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008436:	4a0f      	ldr	r2, [pc, #60]	; (8008474 <HAL_PCD_MspInit+0xbc>)
 8008438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800843c:	6353      	str	r3, [r2, #52]	; 0x34
 800843e:	2300      	movs	r3, #0
 8008440:	60fb      	str	r3, [r7, #12]
 8008442:	4b0c      	ldr	r3, [pc, #48]	; (8008474 <HAL_PCD_MspInit+0xbc>)
 8008444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008446:	4a0b      	ldr	r2, [pc, #44]	; (8008474 <HAL_PCD_MspInit+0xbc>)
 8008448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800844c:	6453      	str	r3, [r2, #68]	; 0x44
 800844e:	4b09      	ldr	r3, [pc, #36]	; (8008474 <HAL_PCD_MspInit+0xbc>)
 8008450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008456:	60fb      	str	r3, [r7, #12]
 8008458:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800845a:	2200      	movs	r2, #0
 800845c:	2100      	movs	r1, #0
 800845e:	2043      	movs	r0, #67	; 0x43
 8008460:	f7f9 fe1d 	bl	800209e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008464:	2043      	movs	r0, #67	; 0x43
 8008466:	f7f9 fe36 	bl	80020d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800846a:	bf00      	nop
 800846c:	3728      	adds	r7, #40	; 0x28
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	40023800 	.word	0x40023800
 8008478:	40020000 	.word	0x40020000

0800847c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008490:	4619      	mov	r1, r3
 8008492:	4610      	mov	r0, r2
 8008494:	f7fe fcc2 	bl	8006e1c <USBD_LL_SetupStage>
}
 8008498:	bf00      	nop
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80084b2:	78fa      	ldrb	r2, [r7, #3]
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	4613      	mov	r3, r2
 80084b8:	00db      	lsls	r3, r3, #3
 80084ba:	1a9b      	subs	r3, r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	440b      	add	r3, r1
 80084c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	78fb      	ldrb	r3, [r7, #3]
 80084c8:	4619      	mov	r1, r3
 80084ca:	f7fe fcfc 	bl	8006ec6 <USBD_LL_DataOutStage>
}
 80084ce:	bf00      	nop
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b082      	sub	sp, #8
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80084e8:	78fa      	ldrb	r2, [r7, #3]
 80084ea:	6879      	ldr	r1, [r7, #4]
 80084ec:	4613      	mov	r3, r2
 80084ee:	00db      	lsls	r3, r3, #3
 80084f0:	1a9b      	subs	r3, r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	440b      	add	r3, r1
 80084f6:	3348      	adds	r3, #72	; 0x48
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	78fb      	ldrb	r3, [r7, #3]
 80084fc:	4619      	mov	r1, r3
 80084fe:	f7fe fd45 	bl	8006f8c <USBD_LL_DataInStage>
}
 8008502:	bf00      	nop
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b082      	sub	sp, #8
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008518:	4618      	mov	r0, r3
 800851a:	f7fe fe59 	bl	80071d0 <USBD_LL_SOF>
}
 800851e:	bf00      	nop
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b084      	sub	sp, #16
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800852e:	2301      	movs	r3, #1
 8008530:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d102      	bne.n	8008540 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800853a:	2300      	movs	r3, #0
 800853c:	73fb      	strb	r3, [r7, #15]
 800853e:	e008      	b.n	8008552 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	2b02      	cmp	r3, #2
 8008546:	d102      	bne.n	800854e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008548:	2301      	movs	r3, #1
 800854a:	73fb      	strb	r3, [r7, #15]
 800854c:	e001      	b.n	8008552 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800854e:	f7f8 fe25 	bl	800119c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008558:	7bfa      	ldrb	r2, [r7, #15]
 800855a:	4611      	mov	r1, r2
 800855c:	4618      	mov	r0, r3
 800855e:	f7fe fdf9 	bl	8007154 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008568:	4618      	mov	r0, r3
 800856a:	f7fe fda5 	bl	80070b8 <USBD_LL_Reset>
}
 800856e:	bf00      	nop
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008586:	4618      	mov	r0, r3
 8008588:	f7fe fdf4 	bl	8007174 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	6812      	ldr	r2, [r2, #0]
 800859a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800859e:	f043 0301 	orr.w	r3, r3, #1
 80085a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a1b      	ldr	r3, [r3, #32]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d005      	beq.n	80085b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085ac:	4b04      	ldr	r3, [pc, #16]	; (80085c0 <HAL_PCD_SuspendCallback+0x48>)
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	4a03      	ldr	r2, [pc, #12]	; (80085c0 <HAL_PCD_SuspendCallback+0x48>)
 80085b2:	f043 0306 	orr.w	r3, r3, #6
 80085b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80085b8:	bf00      	nop
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	e000ed00 	.word	0xe000ed00

080085c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe fde4 	bl	80071a0 <USBD_LL_Resume>
}
 80085d8:	bf00      	nop
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085f2:	78fa      	ldrb	r2, [r7, #3]
 80085f4:	4611      	mov	r1, r2
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fe fe32 	bl	8007260 <USBD_LL_IsoOUTIncomplete>
}
 80085fc:	bf00      	nop
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008616:	78fa      	ldrb	r2, [r7, #3]
 8008618:	4611      	mov	r1, r2
 800861a:	4618      	mov	r0, r3
 800861c:	f7fe fdfa 	bl	8007214 <USBD_LL_IsoINIncomplete>
}
 8008620:	bf00      	nop
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008636:	4618      	mov	r0, r3
 8008638:	f7fe fe38 	bl	80072ac <USBD_LL_DevConnected>
}
 800863c:	bf00      	nop
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe fe35 	bl	80072c2 <USBD_LL_DevDisconnected>
}
 8008658:	bf00      	nop
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d13c      	bne.n	80086ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008670:	4a20      	ldr	r2, [pc, #128]	; (80086f4 <USBD_LL_Init+0x94>)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a1e      	ldr	r2, [pc, #120]	; (80086f4 <USBD_LL_Init+0x94>)
 800867c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008680:	4b1c      	ldr	r3, [pc, #112]	; (80086f4 <USBD_LL_Init+0x94>)
 8008682:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008686:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008688:	4b1a      	ldr	r3, [pc, #104]	; (80086f4 <USBD_LL_Init+0x94>)
 800868a:	2204      	movs	r2, #4
 800868c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800868e:	4b19      	ldr	r3, [pc, #100]	; (80086f4 <USBD_LL_Init+0x94>)
 8008690:	2202      	movs	r2, #2
 8008692:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008694:	4b17      	ldr	r3, [pc, #92]	; (80086f4 <USBD_LL_Init+0x94>)
 8008696:	2200      	movs	r2, #0
 8008698:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800869a:	4b16      	ldr	r3, [pc, #88]	; (80086f4 <USBD_LL_Init+0x94>)
 800869c:	2202      	movs	r2, #2
 800869e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80086a0:	4b14      	ldr	r3, [pc, #80]	; (80086f4 <USBD_LL_Init+0x94>)
 80086a2:	2200      	movs	r2, #0
 80086a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80086a6:	4b13      	ldr	r3, [pc, #76]	; (80086f4 <USBD_LL_Init+0x94>)
 80086a8:	2200      	movs	r2, #0
 80086aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80086ac:	4b11      	ldr	r3, [pc, #68]	; (80086f4 <USBD_LL_Init+0x94>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80086b2:	4b10      	ldr	r3, [pc, #64]	; (80086f4 <USBD_LL_Init+0x94>)
 80086b4:	2201      	movs	r2, #1
 80086b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80086b8:	4b0e      	ldr	r3, [pc, #56]	; (80086f4 <USBD_LL_Init+0x94>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80086be:	480d      	ldr	r0, [pc, #52]	; (80086f4 <USBD_LL_Init+0x94>)
 80086c0:	f7fa fcbe 	bl	8003040 <HAL_PCD_Init>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80086ca:	f7f8 fd67 	bl	800119c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80086ce:	2180      	movs	r1, #128	; 0x80
 80086d0:	4808      	ldr	r0, [pc, #32]	; (80086f4 <USBD_LL_Init+0x94>)
 80086d2:	f7fb fe1c 	bl	800430e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80086d6:	2240      	movs	r2, #64	; 0x40
 80086d8:	2100      	movs	r1, #0
 80086da:	4806      	ldr	r0, [pc, #24]	; (80086f4 <USBD_LL_Init+0x94>)
 80086dc:	f7fb fdd0 	bl	8004280 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80086e0:	2280      	movs	r2, #128	; 0x80
 80086e2:	2101      	movs	r1, #1
 80086e4:	4803      	ldr	r0, [pc, #12]	; (80086f4 <USBD_LL_Init+0x94>)
 80086e6:	f7fb fdcb 	bl	8004280 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20001a40 	.word	0x20001a40

080086f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800870e:	4618      	mov	r0, r3
 8008710:	f7fa fdb3 	bl	800327a <HAL_PCD_Start>
 8008714:	4603      	mov	r3, r0
 8008716:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008718:	7bfb      	ldrb	r3, [r7, #15]
 800871a:	4618      	mov	r0, r3
 800871c:	f000 f942 	bl	80089a4 <USBD_Get_USB_Status>
 8008720:	4603      	mov	r3, r0
 8008722:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008724:	7bbb      	ldrb	r3, [r7, #14]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b084      	sub	sp, #16
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	4608      	mov	r0, r1
 8008738:	4611      	mov	r1, r2
 800873a:	461a      	mov	r2, r3
 800873c:	4603      	mov	r3, r0
 800873e:	70fb      	strb	r3, [r7, #3]
 8008740:	460b      	mov	r3, r1
 8008742:	70bb      	strb	r3, [r7, #2]
 8008744:	4613      	mov	r3, r2
 8008746:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008756:	78bb      	ldrb	r3, [r7, #2]
 8008758:	883a      	ldrh	r2, [r7, #0]
 800875a:	78f9      	ldrb	r1, [r7, #3]
 800875c:	f7fb f997 	bl	8003a8e <HAL_PCD_EP_Open>
 8008760:	4603      	mov	r3, r0
 8008762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	4618      	mov	r0, r3
 8008768:	f000 f91c 	bl	80089a4 <USBD_Get_USB_Status>
 800876c:	4603      	mov	r3, r0
 800876e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008770:	7bbb      	ldrb	r3, [r7, #14]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	460b      	mov	r3, r1
 8008784:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008794:	78fa      	ldrb	r2, [r7, #3]
 8008796:	4611      	mov	r1, r2
 8008798:	4618      	mov	r0, r3
 800879a:	f7fb f9e0 	bl	8003b5e <HAL_PCD_EP_Close>
 800879e:	4603      	mov	r3, r0
 80087a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f000 f8fd 	bl	80089a4 <USBD_Get_USB_Status>
 80087aa:	4603      	mov	r3, r0
 80087ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087d2:	78fa      	ldrb	r2, [r7, #3]
 80087d4:	4611      	mov	r1, r2
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fb fab8 	bl	8003d4c <HAL_PCD_EP_SetStall>
 80087dc:	4603      	mov	r3, r0
 80087de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 f8de 	bl	80089a4 <USBD_Get_USB_Status>
 80087e8:	4603      	mov	r3, r0
 80087ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	460b      	mov	r3, r1
 8008800:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008810:	78fa      	ldrb	r2, [r7, #3]
 8008812:	4611      	mov	r1, r2
 8008814:	4618      	mov	r0, r3
 8008816:	f7fb fafd 	bl	8003e14 <HAL_PCD_EP_ClrStall>
 800881a:	4603      	mov	r3, r0
 800881c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	4618      	mov	r0, r3
 8008822:	f000 f8bf 	bl	80089a4 <USBD_Get_USB_Status>
 8008826:	4603      	mov	r3, r0
 8008828:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800882a:	7bbb      	ldrb	r3, [r7, #14]
}
 800882c:	4618      	mov	r0, r3
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	460b      	mov	r3, r1
 800883e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008846:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800884c:	2b00      	cmp	r3, #0
 800884e:	da0b      	bge.n	8008868 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008850:	78fb      	ldrb	r3, [r7, #3]
 8008852:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008856:	68f9      	ldr	r1, [r7, #12]
 8008858:	4613      	mov	r3, r2
 800885a:	00db      	lsls	r3, r3, #3
 800885c:	1a9b      	subs	r3, r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	440b      	add	r3, r1
 8008862:	333e      	adds	r3, #62	; 0x3e
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	e00b      	b.n	8008880 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008868:	78fb      	ldrb	r3, [r7, #3]
 800886a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800886e:	68f9      	ldr	r1, [r7, #12]
 8008870:	4613      	mov	r3, r2
 8008872:	00db      	lsls	r3, r3, #3
 8008874:	1a9b      	subs	r3, r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	440b      	add	r3, r1
 800887a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800887e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008880:	4618      	mov	r0, r3
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	460b      	mov	r3, r1
 8008896:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088a6:	78fa      	ldrb	r2, [r7, #3]
 80088a8:	4611      	mov	r1, r2
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fb f8ca 	bl	8003a44 <HAL_PCD_SetAddress>
 80088b0:	4603      	mov	r3, r0
 80088b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 f874 	bl	80089a4 <USBD_Get_USB_Status>
 80088bc:	4603      	mov	r3, r0
 80088be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b086      	sub	sp, #24
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	607a      	str	r2, [r7, #4]
 80088d4:	603b      	str	r3, [r7, #0]
 80088d6:	460b      	mov	r3, r1
 80088d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80088e8:	7af9      	ldrb	r1, [r7, #11]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	f7fb f9e3 	bl	8003cb8 <HAL_PCD_EP_Transmit>
 80088f2:	4603      	mov	r3, r0
 80088f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 f853 	bl	80089a4 <USBD_Get_USB_Status>
 80088fe:	4603      	mov	r3, r0
 8008900:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008902:	7dbb      	ldrb	r3, [r7, #22]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3718      	adds	r7, #24
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	607a      	str	r2, [r7, #4]
 8008916:	603b      	str	r3, [r7, #0]
 8008918:	460b      	mov	r3, r1
 800891a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800891c:	2300      	movs	r3, #0
 800891e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008920:	2300      	movs	r3, #0
 8008922:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800892a:	7af9      	ldrb	r1, [r7, #11]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	f7fb f95f 	bl	8003bf2 <HAL_PCD_EP_Receive>
 8008934:	4603      	mov	r3, r0
 8008936:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008938:	7dfb      	ldrb	r3, [r7, #23]
 800893a:	4618      	mov	r0, r3
 800893c:	f000 f832 	bl	80089a4 <USBD_Get_USB_Status>
 8008940:	4603      	mov	r3, r0
 8008942:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008944:	7dbb      	ldrb	r3, [r7, #22]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b082      	sub	sp, #8
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	460b      	mov	r3, r1
 8008958:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008960:	78fa      	ldrb	r2, [r7, #3]
 8008962:	4611      	mov	r1, r2
 8008964:	4618      	mov	r0, r3
 8008966:	f7fb f98f 	bl	8003c88 <HAL_PCD_EP_GetRxCount>
 800896a:	4603      	mov	r3, r0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800897c:	4b03      	ldr	r3, [pc, #12]	; (800898c <USBD_static_malloc+0x18>)
}
 800897e:	4618      	mov	r0, r3
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	20000208 	.word	0x20000208

08008990 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]

}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	4603      	mov	r3, r0
 80089ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089b2:	79fb      	ldrb	r3, [r7, #7]
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	d817      	bhi.n	80089e8 <USBD_Get_USB_Status+0x44>
 80089b8:	a201      	add	r2, pc, #4	; (adr r2, 80089c0 <USBD_Get_USB_Status+0x1c>)
 80089ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089be:	bf00      	nop
 80089c0:	080089d1 	.word	0x080089d1
 80089c4:	080089d7 	.word	0x080089d7
 80089c8:	080089dd 	.word	0x080089dd
 80089cc:	080089e3 	.word	0x080089e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	73fb      	strb	r3, [r7, #15]
    break;
 80089d4:	e00b      	b.n	80089ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80089d6:	2303      	movs	r3, #3
 80089d8:	73fb      	strb	r3, [r7, #15]
    break;
 80089da:	e008      	b.n	80089ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80089dc:	2301      	movs	r3, #1
 80089de:	73fb      	strb	r3, [r7, #15]
    break;
 80089e0:	e005      	b.n	80089ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80089e2:	2303      	movs	r3, #3
 80089e4:	73fb      	strb	r3, [r7, #15]
    break;
 80089e6:	e002      	b.n	80089ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80089e8:	2303      	movs	r3, #3
 80089ea:	73fb      	strb	r3, [r7, #15]
    break;
 80089ec:	bf00      	nop
  }
  return usb_status;
 80089ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3714      	adds	r7, #20
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <__errno>:
 80089fc:	4b01      	ldr	r3, [pc, #4]	; (8008a04 <__errno+0x8>)
 80089fe:	6818      	ldr	r0, [r3, #0]
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	20000180 	.word	0x20000180

08008a08 <__libc_init_array>:
 8008a08:	b570      	push	{r4, r5, r6, lr}
 8008a0a:	4d0d      	ldr	r5, [pc, #52]	; (8008a40 <__libc_init_array+0x38>)
 8008a0c:	4c0d      	ldr	r4, [pc, #52]	; (8008a44 <__libc_init_array+0x3c>)
 8008a0e:	1b64      	subs	r4, r4, r5
 8008a10:	10a4      	asrs	r4, r4, #2
 8008a12:	2600      	movs	r6, #0
 8008a14:	42a6      	cmp	r6, r4
 8008a16:	d109      	bne.n	8008a2c <__libc_init_array+0x24>
 8008a18:	4d0b      	ldr	r5, [pc, #44]	; (8008a48 <__libc_init_array+0x40>)
 8008a1a:	4c0c      	ldr	r4, [pc, #48]	; (8008a4c <__libc_init_array+0x44>)
 8008a1c:	f000 fc62 	bl	80092e4 <_init>
 8008a20:	1b64      	subs	r4, r4, r5
 8008a22:	10a4      	asrs	r4, r4, #2
 8008a24:	2600      	movs	r6, #0
 8008a26:	42a6      	cmp	r6, r4
 8008a28:	d105      	bne.n	8008a36 <__libc_init_array+0x2e>
 8008a2a:	bd70      	pop	{r4, r5, r6, pc}
 8008a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a30:	4798      	blx	r3
 8008a32:	3601      	adds	r6, #1
 8008a34:	e7ee      	b.n	8008a14 <__libc_init_array+0xc>
 8008a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a3a:	4798      	blx	r3
 8008a3c:	3601      	adds	r6, #1
 8008a3e:	e7f2      	b.n	8008a26 <__libc_init_array+0x1e>
 8008a40:	080093b0 	.word	0x080093b0
 8008a44:	080093b0 	.word	0x080093b0
 8008a48:	080093b0 	.word	0x080093b0
 8008a4c:	080093b4 	.word	0x080093b4

08008a50 <memset>:
 8008a50:	4402      	add	r2, r0
 8008a52:	4603      	mov	r3, r0
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d100      	bne.n	8008a5a <memset+0xa>
 8008a58:	4770      	bx	lr
 8008a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a5e:	e7f9      	b.n	8008a54 <memset+0x4>

08008a60 <sniprintf>:
 8008a60:	b40c      	push	{r2, r3}
 8008a62:	b530      	push	{r4, r5, lr}
 8008a64:	4b17      	ldr	r3, [pc, #92]	; (8008ac4 <sniprintf+0x64>)
 8008a66:	1e0c      	subs	r4, r1, #0
 8008a68:	681d      	ldr	r5, [r3, #0]
 8008a6a:	b09d      	sub	sp, #116	; 0x74
 8008a6c:	da08      	bge.n	8008a80 <sniprintf+0x20>
 8008a6e:	238b      	movs	r3, #139	; 0x8b
 8008a70:	602b      	str	r3, [r5, #0]
 8008a72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a76:	b01d      	add	sp, #116	; 0x74
 8008a78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a7c:	b002      	add	sp, #8
 8008a7e:	4770      	bx	lr
 8008a80:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008a84:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008a88:	bf14      	ite	ne
 8008a8a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008a8e:	4623      	moveq	r3, r4
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	9307      	str	r3, [sp, #28]
 8008a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a98:	9002      	str	r0, [sp, #8]
 8008a9a:	9006      	str	r0, [sp, #24]
 8008a9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008aa0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008aa2:	ab21      	add	r3, sp, #132	; 0x84
 8008aa4:	a902      	add	r1, sp, #8
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	9301      	str	r3, [sp, #4]
 8008aaa:	f000 f869 	bl	8008b80 <_svfiprintf_r>
 8008aae:	1c43      	adds	r3, r0, #1
 8008ab0:	bfbc      	itt	lt
 8008ab2:	238b      	movlt	r3, #139	; 0x8b
 8008ab4:	602b      	strlt	r3, [r5, #0]
 8008ab6:	2c00      	cmp	r4, #0
 8008ab8:	d0dd      	beq.n	8008a76 <sniprintf+0x16>
 8008aba:	9b02      	ldr	r3, [sp, #8]
 8008abc:	2200      	movs	r2, #0
 8008abe:	701a      	strb	r2, [r3, #0]
 8008ac0:	e7d9      	b.n	8008a76 <sniprintf+0x16>
 8008ac2:	bf00      	nop
 8008ac4:	20000180 	.word	0x20000180

08008ac8 <__ssputs_r>:
 8008ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008acc:	688e      	ldr	r6, [r1, #8]
 8008ace:	429e      	cmp	r6, r3
 8008ad0:	4682      	mov	sl, r0
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	4690      	mov	r8, r2
 8008ad6:	461f      	mov	r7, r3
 8008ad8:	d838      	bhi.n	8008b4c <__ssputs_r+0x84>
 8008ada:	898a      	ldrh	r2, [r1, #12]
 8008adc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ae0:	d032      	beq.n	8008b48 <__ssputs_r+0x80>
 8008ae2:	6825      	ldr	r5, [r4, #0]
 8008ae4:	6909      	ldr	r1, [r1, #16]
 8008ae6:	eba5 0901 	sub.w	r9, r5, r1
 8008aea:	6965      	ldr	r5, [r4, #20]
 8008aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008af0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008af4:	3301      	adds	r3, #1
 8008af6:	444b      	add	r3, r9
 8008af8:	106d      	asrs	r5, r5, #1
 8008afa:	429d      	cmp	r5, r3
 8008afc:	bf38      	it	cc
 8008afe:	461d      	movcc	r5, r3
 8008b00:	0553      	lsls	r3, r2, #21
 8008b02:	d531      	bpl.n	8008b68 <__ssputs_r+0xa0>
 8008b04:	4629      	mov	r1, r5
 8008b06:	f000 fb47 	bl	8009198 <_malloc_r>
 8008b0a:	4606      	mov	r6, r0
 8008b0c:	b950      	cbnz	r0, 8008b24 <__ssputs_r+0x5c>
 8008b0e:	230c      	movs	r3, #12
 8008b10:	f8ca 3000 	str.w	r3, [sl]
 8008b14:	89a3      	ldrh	r3, [r4, #12]
 8008b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b1a:	81a3      	strh	r3, [r4, #12]
 8008b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b24:	6921      	ldr	r1, [r4, #16]
 8008b26:	464a      	mov	r2, r9
 8008b28:	f000 fabe 	bl	80090a8 <memcpy>
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b36:	81a3      	strh	r3, [r4, #12]
 8008b38:	6126      	str	r6, [r4, #16]
 8008b3a:	6165      	str	r5, [r4, #20]
 8008b3c:	444e      	add	r6, r9
 8008b3e:	eba5 0509 	sub.w	r5, r5, r9
 8008b42:	6026      	str	r6, [r4, #0]
 8008b44:	60a5      	str	r5, [r4, #8]
 8008b46:	463e      	mov	r6, r7
 8008b48:	42be      	cmp	r6, r7
 8008b4a:	d900      	bls.n	8008b4e <__ssputs_r+0x86>
 8008b4c:	463e      	mov	r6, r7
 8008b4e:	4632      	mov	r2, r6
 8008b50:	6820      	ldr	r0, [r4, #0]
 8008b52:	4641      	mov	r1, r8
 8008b54:	f000 fab6 	bl	80090c4 <memmove>
 8008b58:	68a3      	ldr	r3, [r4, #8]
 8008b5a:	6822      	ldr	r2, [r4, #0]
 8008b5c:	1b9b      	subs	r3, r3, r6
 8008b5e:	4432      	add	r2, r6
 8008b60:	60a3      	str	r3, [r4, #8]
 8008b62:	6022      	str	r2, [r4, #0]
 8008b64:	2000      	movs	r0, #0
 8008b66:	e7db      	b.n	8008b20 <__ssputs_r+0x58>
 8008b68:	462a      	mov	r2, r5
 8008b6a:	f000 fb6f 	bl	800924c <_realloc_r>
 8008b6e:	4606      	mov	r6, r0
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d1e1      	bne.n	8008b38 <__ssputs_r+0x70>
 8008b74:	6921      	ldr	r1, [r4, #16]
 8008b76:	4650      	mov	r0, sl
 8008b78:	f000 fabe 	bl	80090f8 <_free_r>
 8008b7c:	e7c7      	b.n	8008b0e <__ssputs_r+0x46>
	...

08008b80 <_svfiprintf_r>:
 8008b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b84:	4698      	mov	r8, r3
 8008b86:	898b      	ldrh	r3, [r1, #12]
 8008b88:	061b      	lsls	r3, r3, #24
 8008b8a:	b09d      	sub	sp, #116	; 0x74
 8008b8c:	4607      	mov	r7, r0
 8008b8e:	460d      	mov	r5, r1
 8008b90:	4614      	mov	r4, r2
 8008b92:	d50e      	bpl.n	8008bb2 <_svfiprintf_r+0x32>
 8008b94:	690b      	ldr	r3, [r1, #16]
 8008b96:	b963      	cbnz	r3, 8008bb2 <_svfiprintf_r+0x32>
 8008b98:	2140      	movs	r1, #64	; 0x40
 8008b9a:	f000 fafd 	bl	8009198 <_malloc_r>
 8008b9e:	6028      	str	r0, [r5, #0]
 8008ba0:	6128      	str	r0, [r5, #16]
 8008ba2:	b920      	cbnz	r0, 8008bae <_svfiprintf_r+0x2e>
 8008ba4:	230c      	movs	r3, #12
 8008ba6:	603b      	str	r3, [r7, #0]
 8008ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bac:	e0d1      	b.n	8008d52 <_svfiprintf_r+0x1d2>
 8008bae:	2340      	movs	r3, #64	; 0x40
 8008bb0:	616b      	str	r3, [r5, #20]
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb6:	2320      	movs	r3, #32
 8008bb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bc0:	2330      	movs	r3, #48	; 0x30
 8008bc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d6c <_svfiprintf_r+0x1ec>
 8008bc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bca:	f04f 0901 	mov.w	r9, #1
 8008bce:	4623      	mov	r3, r4
 8008bd0:	469a      	mov	sl, r3
 8008bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bd6:	b10a      	cbz	r2, 8008bdc <_svfiprintf_r+0x5c>
 8008bd8:	2a25      	cmp	r2, #37	; 0x25
 8008bda:	d1f9      	bne.n	8008bd0 <_svfiprintf_r+0x50>
 8008bdc:	ebba 0b04 	subs.w	fp, sl, r4
 8008be0:	d00b      	beq.n	8008bfa <_svfiprintf_r+0x7a>
 8008be2:	465b      	mov	r3, fp
 8008be4:	4622      	mov	r2, r4
 8008be6:	4629      	mov	r1, r5
 8008be8:	4638      	mov	r0, r7
 8008bea:	f7ff ff6d 	bl	8008ac8 <__ssputs_r>
 8008bee:	3001      	adds	r0, #1
 8008bf0:	f000 80aa 	beq.w	8008d48 <_svfiprintf_r+0x1c8>
 8008bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bf6:	445a      	add	r2, fp
 8008bf8:	9209      	str	r2, [sp, #36]	; 0x24
 8008bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 80a2 	beq.w	8008d48 <_svfiprintf_r+0x1c8>
 8008c04:	2300      	movs	r3, #0
 8008c06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c0e:	f10a 0a01 	add.w	sl, sl, #1
 8008c12:	9304      	str	r3, [sp, #16]
 8008c14:	9307      	str	r3, [sp, #28]
 8008c16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c1a:	931a      	str	r3, [sp, #104]	; 0x68
 8008c1c:	4654      	mov	r4, sl
 8008c1e:	2205      	movs	r2, #5
 8008c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c24:	4851      	ldr	r0, [pc, #324]	; (8008d6c <_svfiprintf_r+0x1ec>)
 8008c26:	f7f7 fadb 	bl	80001e0 <memchr>
 8008c2a:	9a04      	ldr	r2, [sp, #16]
 8008c2c:	b9d8      	cbnz	r0, 8008c66 <_svfiprintf_r+0xe6>
 8008c2e:	06d0      	lsls	r0, r2, #27
 8008c30:	bf44      	itt	mi
 8008c32:	2320      	movmi	r3, #32
 8008c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c38:	0711      	lsls	r1, r2, #28
 8008c3a:	bf44      	itt	mi
 8008c3c:	232b      	movmi	r3, #43	; 0x2b
 8008c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c42:	f89a 3000 	ldrb.w	r3, [sl]
 8008c46:	2b2a      	cmp	r3, #42	; 0x2a
 8008c48:	d015      	beq.n	8008c76 <_svfiprintf_r+0xf6>
 8008c4a:	9a07      	ldr	r2, [sp, #28]
 8008c4c:	4654      	mov	r4, sl
 8008c4e:	2000      	movs	r0, #0
 8008c50:	f04f 0c0a 	mov.w	ip, #10
 8008c54:	4621      	mov	r1, r4
 8008c56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c5a:	3b30      	subs	r3, #48	; 0x30
 8008c5c:	2b09      	cmp	r3, #9
 8008c5e:	d94e      	bls.n	8008cfe <_svfiprintf_r+0x17e>
 8008c60:	b1b0      	cbz	r0, 8008c90 <_svfiprintf_r+0x110>
 8008c62:	9207      	str	r2, [sp, #28]
 8008c64:	e014      	b.n	8008c90 <_svfiprintf_r+0x110>
 8008c66:	eba0 0308 	sub.w	r3, r0, r8
 8008c6a:	fa09 f303 	lsl.w	r3, r9, r3
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	9304      	str	r3, [sp, #16]
 8008c72:	46a2      	mov	sl, r4
 8008c74:	e7d2      	b.n	8008c1c <_svfiprintf_r+0x9c>
 8008c76:	9b03      	ldr	r3, [sp, #12]
 8008c78:	1d19      	adds	r1, r3, #4
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	9103      	str	r1, [sp, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	bfbb      	ittet	lt
 8008c82:	425b      	neglt	r3, r3
 8008c84:	f042 0202 	orrlt.w	r2, r2, #2
 8008c88:	9307      	strge	r3, [sp, #28]
 8008c8a:	9307      	strlt	r3, [sp, #28]
 8008c8c:	bfb8      	it	lt
 8008c8e:	9204      	strlt	r2, [sp, #16]
 8008c90:	7823      	ldrb	r3, [r4, #0]
 8008c92:	2b2e      	cmp	r3, #46	; 0x2e
 8008c94:	d10c      	bne.n	8008cb0 <_svfiprintf_r+0x130>
 8008c96:	7863      	ldrb	r3, [r4, #1]
 8008c98:	2b2a      	cmp	r3, #42	; 0x2a
 8008c9a:	d135      	bne.n	8008d08 <_svfiprintf_r+0x188>
 8008c9c:	9b03      	ldr	r3, [sp, #12]
 8008c9e:	1d1a      	adds	r2, r3, #4
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	9203      	str	r2, [sp, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	bfb8      	it	lt
 8008ca8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008cac:	3402      	adds	r4, #2
 8008cae:	9305      	str	r3, [sp, #20]
 8008cb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d7c <_svfiprintf_r+0x1fc>
 8008cb4:	7821      	ldrb	r1, [r4, #0]
 8008cb6:	2203      	movs	r2, #3
 8008cb8:	4650      	mov	r0, sl
 8008cba:	f7f7 fa91 	bl	80001e0 <memchr>
 8008cbe:	b140      	cbz	r0, 8008cd2 <_svfiprintf_r+0x152>
 8008cc0:	2340      	movs	r3, #64	; 0x40
 8008cc2:	eba0 000a 	sub.w	r0, r0, sl
 8008cc6:	fa03 f000 	lsl.w	r0, r3, r0
 8008cca:	9b04      	ldr	r3, [sp, #16]
 8008ccc:	4303      	orrs	r3, r0
 8008cce:	3401      	adds	r4, #1
 8008cd0:	9304      	str	r3, [sp, #16]
 8008cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd6:	4826      	ldr	r0, [pc, #152]	; (8008d70 <_svfiprintf_r+0x1f0>)
 8008cd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cdc:	2206      	movs	r2, #6
 8008cde:	f7f7 fa7f 	bl	80001e0 <memchr>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d038      	beq.n	8008d58 <_svfiprintf_r+0x1d8>
 8008ce6:	4b23      	ldr	r3, [pc, #140]	; (8008d74 <_svfiprintf_r+0x1f4>)
 8008ce8:	bb1b      	cbnz	r3, 8008d32 <_svfiprintf_r+0x1b2>
 8008cea:	9b03      	ldr	r3, [sp, #12]
 8008cec:	3307      	adds	r3, #7
 8008cee:	f023 0307 	bic.w	r3, r3, #7
 8008cf2:	3308      	adds	r3, #8
 8008cf4:	9303      	str	r3, [sp, #12]
 8008cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf8:	4433      	add	r3, r6
 8008cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8008cfc:	e767      	b.n	8008bce <_svfiprintf_r+0x4e>
 8008cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d02:	460c      	mov	r4, r1
 8008d04:	2001      	movs	r0, #1
 8008d06:	e7a5      	b.n	8008c54 <_svfiprintf_r+0xd4>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	3401      	adds	r4, #1
 8008d0c:	9305      	str	r3, [sp, #20]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	f04f 0c0a 	mov.w	ip, #10
 8008d14:	4620      	mov	r0, r4
 8008d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d1a:	3a30      	subs	r2, #48	; 0x30
 8008d1c:	2a09      	cmp	r2, #9
 8008d1e:	d903      	bls.n	8008d28 <_svfiprintf_r+0x1a8>
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d0c5      	beq.n	8008cb0 <_svfiprintf_r+0x130>
 8008d24:	9105      	str	r1, [sp, #20]
 8008d26:	e7c3      	b.n	8008cb0 <_svfiprintf_r+0x130>
 8008d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e7f0      	b.n	8008d14 <_svfiprintf_r+0x194>
 8008d32:	ab03      	add	r3, sp, #12
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	462a      	mov	r2, r5
 8008d38:	4b0f      	ldr	r3, [pc, #60]	; (8008d78 <_svfiprintf_r+0x1f8>)
 8008d3a:	a904      	add	r1, sp, #16
 8008d3c:	4638      	mov	r0, r7
 8008d3e:	f3af 8000 	nop.w
 8008d42:	1c42      	adds	r2, r0, #1
 8008d44:	4606      	mov	r6, r0
 8008d46:	d1d6      	bne.n	8008cf6 <_svfiprintf_r+0x176>
 8008d48:	89ab      	ldrh	r3, [r5, #12]
 8008d4a:	065b      	lsls	r3, r3, #25
 8008d4c:	f53f af2c 	bmi.w	8008ba8 <_svfiprintf_r+0x28>
 8008d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d52:	b01d      	add	sp, #116	; 0x74
 8008d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d58:	ab03      	add	r3, sp, #12
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	462a      	mov	r2, r5
 8008d5e:	4b06      	ldr	r3, [pc, #24]	; (8008d78 <_svfiprintf_r+0x1f8>)
 8008d60:	a904      	add	r1, sp, #16
 8008d62:	4638      	mov	r0, r7
 8008d64:	f000 f87a 	bl	8008e5c <_printf_i>
 8008d68:	e7eb      	b.n	8008d42 <_svfiprintf_r+0x1c2>
 8008d6a:	bf00      	nop
 8008d6c:	08009374 	.word	0x08009374
 8008d70:	0800937e 	.word	0x0800937e
 8008d74:	00000000 	.word	0x00000000
 8008d78:	08008ac9 	.word	0x08008ac9
 8008d7c:	0800937a 	.word	0x0800937a

08008d80 <_printf_common>:
 8008d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d84:	4616      	mov	r6, r2
 8008d86:	4699      	mov	r9, r3
 8008d88:	688a      	ldr	r2, [r1, #8]
 8008d8a:	690b      	ldr	r3, [r1, #16]
 8008d8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d90:	4293      	cmp	r3, r2
 8008d92:	bfb8      	it	lt
 8008d94:	4613      	movlt	r3, r2
 8008d96:	6033      	str	r3, [r6, #0]
 8008d98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d9c:	4607      	mov	r7, r0
 8008d9e:	460c      	mov	r4, r1
 8008da0:	b10a      	cbz	r2, 8008da6 <_printf_common+0x26>
 8008da2:	3301      	adds	r3, #1
 8008da4:	6033      	str	r3, [r6, #0]
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	0699      	lsls	r1, r3, #26
 8008daa:	bf42      	ittt	mi
 8008dac:	6833      	ldrmi	r3, [r6, #0]
 8008dae:	3302      	addmi	r3, #2
 8008db0:	6033      	strmi	r3, [r6, #0]
 8008db2:	6825      	ldr	r5, [r4, #0]
 8008db4:	f015 0506 	ands.w	r5, r5, #6
 8008db8:	d106      	bne.n	8008dc8 <_printf_common+0x48>
 8008dba:	f104 0a19 	add.w	sl, r4, #25
 8008dbe:	68e3      	ldr	r3, [r4, #12]
 8008dc0:	6832      	ldr	r2, [r6, #0]
 8008dc2:	1a9b      	subs	r3, r3, r2
 8008dc4:	42ab      	cmp	r3, r5
 8008dc6:	dc26      	bgt.n	8008e16 <_printf_common+0x96>
 8008dc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008dcc:	1e13      	subs	r3, r2, #0
 8008dce:	6822      	ldr	r2, [r4, #0]
 8008dd0:	bf18      	it	ne
 8008dd2:	2301      	movne	r3, #1
 8008dd4:	0692      	lsls	r2, r2, #26
 8008dd6:	d42b      	bmi.n	8008e30 <_printf_common+0xb0>
 8008dd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ddc:	4649      	mov	r1, r9
 8008dde:	4638      	mov	r0, r7
 8008de0:	47c0      	blx	r8
 8008de2:	3001      	adds	r0, #1
 8008de4:	d01e      	beq.n	8008e24 <_printf_common+0xa4>
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	68e5      	ldr	r5, [r4, #12]
 8008dea:	6832      	ldr	r2, [r6, #0]
 8008dec:	f003 0306 	and.w	r3, r3, #6
 8008df0:	2b04      	cmp	r3, #4
 8008df2:	bf08      	it	eq
 8008df4:	1aad      	subeq	r5, r5, r2
 8008df6:	68a3      	ldr	r3, [r4, #8]
 8008df8:	6922      	ldr	r2, [r4, #16]
 8008dfa:	bf0c      	ite	eq
 8008dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e00:	2500      	movne	r5, #0
 8008e02:	4293      	cmp	r3, r2
 8008e04:	bfc4      	itt	gt
 8008e06:	1a9b      	subgt	r3, r3, r2
 8008e08:	18ed      	addgt	r5, r5, r3
 8008e0a:	2600      	movs	r6, #0
 8008e0c:	341a      	adds	r4, #26
 8008e0e:	42b5      	cmp	r5, r6
 8008e10:	d11a      	bne.n	8008e48 <_printf_common+0xc8>
 8008e12:	2000      	movs	r0, #0
 8008e14:	e008      	b.n	8008e28 <_printf_common+0xa8>
 8008e16:	2301      	movs	r3, #1
 8008e18:	4652      	mov	r2, sl
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	4638      	mov	r0, r7
 8008e1e:	47c0      	blx	r8
 8008e20:	3001      	adds	r0, #1
 8008e22:	d103      	bne.n	8008e2c <_printf_common+0xac>
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e2c:	3501      	adds	r5, #1
 8008e2e:	e7c6      	b.n	8008dbe <_printf_common+0x3e>
 8008e30:	18e1      	adds	r1, r4, r3
 8008e32:	1c5a      	adds	r2, r3, #1
 8008e34:	2030      	movs	r0, #48	; 0x30
 8008e36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e3a:	4422      	add	r2, r4
 8008e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e44:	3302      	adds	r3, #2
 8008e46:	e7c7      	b.n	8008dd8 <_printf_common+0x58>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	4622      	mov	r2, r4
 8008e4c:	4649      	mov	r1, r9
 8008e4e:	4638      	mov	r0, r7
 8008e50:	47c0      	blx	r8
 8008e52:	3001      	adds	r0, #1
 8008e54:	d0e6      	beq.n	8008e24 <_printf_common+0xa4>
 8008e56:	3601      	adds	r6, #1
 8008e58:	e7d9      	b.n	8008e0e <_printf_common+0x8e>
	...

08008e5c <_printf_i>:
 8008e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e60:	460c      	mov	r4, r1
 8008e62:	4691      	mov	r9, r2
 8008e64:	7e27      	ldrb	r7, [r4, #24]
 8008e66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008e68:	2f78      	cmp	r7, #120	; 0x78
 8008e6a:	4680      	mov	r8, r0
 8008e6c:	469a      	mov	sl, r3
 8008e6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e72:	d807      	bhi.n	8008e84 <_printf_i+0x28>
 8008e74:	2f62      	cmp	r7, #98	; 0x62
 8008e76:	d80a      	bhi.n	8008e8e <_printf_i+0x32>
 8008e78:	2f00      	cmp	r7, #0
 8008e7a:	f000 80d8 	beq.w	800902e <_printf_i+0x1d2>
 8008e7e:	2f58      	cmp	r7, #88	; 0x58
 8008e80:	f000 80a3 	beq.w	8008fca <_printf_i+0x16e>
 8008e84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008e88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e8c:	e03a      	b.n	8008f04 <_printf_i+0xa8>
 8008e8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e92:	2b15      	cmp	r3, #21
 8008e94:	d8f6      	bhi.n	8008e84 <_printf_i+0x28>
 8008e96:	a001      	add	r0, pc, #4	; (adr r0, 8008e9c <_printf_i+0x40>)
 8008e98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008e9c:	08008ef5 	.word	0x08008ef5
 8008ea0:	08008f09 	.word	0x08008f09
 8008ea4:	08008e85 	.word	0x08008e85
 8008ea8:	08008e85 	.word	0x08008e85
 8008eac:	08008e85 	.word	0x08008e85
 8008eb0:	08008e85 	.word	0x08008e85
 8008eb4:	08008f09 	.word	0x08008f09
 8008eb8:	08008e85 	.word	0x08008e85
 8008ebc:	08008e85 	.word	0x08008e85
 8008ec0:	08008e85 	.word	0x08008e85
 8008ec4:	08008e85 	.word	0x08008e85
 8008ec8:	08009015 	.word	0x08009015
 8008ecc:	08008f39 	.word	0x08008f39
 8008ed0:	08008ff7 	.word	0x08008ff7
 8008ed4:	08008e85 	.word	0x08008e85
 8008ed8:	08008e85 	.word	0x08008e85
 8008edc:	08009037 	.word	0x08009037
 8008ee0:	08008e85 	.word	0x08008e85
 8008ee4:	08008f39 	.word	0x08008f39
 8008ee8:	08008e85 	.word	0x08008e85
 8008eec:	08008e85 	.word	0x08008e85
 8008ef0:	08008fff 	.word	0x08008fff
 8008ef4:	680b      	ldr	r3, [r1, #0]
 8008ef6:	1d1a      	adds	r2, r3, #4
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	600a      	str	r2, [r1, #0]
 8008efc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f04:	2301      	movs	r3, #1
 8008f06:	e0a3      	b.n	8009050 <_printf_i+0x1f4>
 8008f08:	6825      	ldr	r5, [r4, #0]
 8008f0a:	6808      	ldr	r0, [r1, #0]
 8008f0c:	062e      	lsls	r6, r5, #24
 8008f0e:	f100 0304 	add.w	r3, r0, #4
 8008f12:	d50a      	bpl.n	8008f2a <_printf_i+0xce>
 8008f14:	6805      	ldr	r5, [r0, #0]
 8008f16:	600b      	str	r3, [r1, #0]
 8008f18:	2d00      	cmp	r5, #0
 8008f1a:	da03      	bge.n	8008f24 <_printf_i+0xc8>
 8008f1c:	232d      	movs	r3, #45	; 0x2d
 8008f1e:	426d      	negs	r5, r5
 8008f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f24:	485e      	ldr	r0, [pc, #376]	; (80090a0 <_printf_i+0x244>)
 8008f26:	230a      	movs	r3, #10
 8008f28:	e019      	b.n	8008f5e <_printf_i+0x102>
 8008f2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008f2e:	6805      	ldr	r5, [r0, #0]
 8008f30:	600b      	str	r3, [r1, #0]
 8008f32:	bf18      	it	ne
 8008f34:	b22d      	sxthne	r5, r5
 8008f36:	e7ef      	b.n	8008f18 <_printf_i+0xbc>
 8008f38:	680b      	ldr	r3, [r1, #0]
 8008f3a:	6825      	ldr	r5, [r4, #0]
 8008f3c:	1d18      	adds	r0, r3, #4
 8008f3e:	6008      	str	r0, [r1, #0]
 8008f40:	0628      	lsls	r0, r5, #24
 8008f42:	d501      	bpl.n	8008f48 <_printf_i+0xec>
 8008f44:	681d      	ldr	r5, [r3, #0]
 8008f46:	e002      	b.n	8008f4e <_printf_i+0xf2>
 8008f48:	0669      	lsls	r1, r5, #25
 8008f4a:	d5fb      	bpl.n	8008f44 <_printf_i+0xe8>
 8008f4c:	881d      	ldrh	r5, [r3, #0]
 8008f4e:	4854      	ldr	r0, [pc, #336]	; (80090a0 <_printf_i+0x244>)
 8008f50:	2f6f      	cmp	r7, #111	; 0x6f
 8008f52:	bf0c      	ite	eq
 8008f54:	2308      	moveq	r3, #8
 8008f56:	230a      	movne	r3, #10
 8008f58:	2100      	movs	r1, #0
 8008f5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f5e:	6866      	ldr	r6, [r4, #4]
 8008f60:	60a6      	str	r6, [r4, #8]
 8008f62:	2e00      	cmp	r6, #0
 8008f64:	bfa2      	ittt	ge
 8008f66:	6821      	ldrge	r1, [r4, #0]
 8008f68:	f021 0104 	bicge.w	r1, r1, #4
 8008f6c:	6021      	strge	r1, [r4, #0]
 8008f6e:	b90d      	cbnz	r5, 8008f74 <_printf_i+0x118>
 8008f70:	2e00      	cmp	r6, #0
 8008f72:	d04d      	beq.n	8009010 <_printf_i+0x1b4>
 8008f74:	4616      	mov	r6, r2
 8008f76:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f7a:	fb03 5711 	mls	r7, r3, r1, r5
 8008f7e:	5dc7      	ldrb	r7, [r0, r7]
 8008f80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f84:	462f      	mov	r7, r5
 8008f86:	42bb      	cmp	r3, r7
 8008f88:	460d      	mov	r5, r1
 8008f8a:	d9f4      	bls.n	8008f76 <_printf_i+0x11a>
 8008f8c:	2b08      	cmp	r3, #8
 8008f8e:	d10b      	bne.n	8008fa8 <_printf_i+0x14c>
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	07df      	lsls	r7, r3, #31
 8008f94:	d508      	bpl.n	8008fa8 <_printf_i+0x14c>
 8008f96:	6923      	ldr	r3, [r4, #16]
 8008f98:	6861      	ldr	r1, [r4, #4]
 8008f9a:	4299      	cmp	r1, r3
 8008f9c:	bfde      	ittt	le
 8008f9e:	2330      	movle	r3, #48	; 0x30
 8008fa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fa4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008fa8:	1b92      	subs	r2, r2, r6
 8008faa:	6122      	str	r2, [r4, #16]
 8008fac:	f8cd a000 	str.w	sl, [sp]
 8008fb0:	464b      	mov	r3, r9
 8008fb2:	aa03      	add	r2, sp, #12
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	4640      	mov	r0, r8
 8008fb8:	f7ff fee2 	bl	8008d80 <_printf_common>
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	d14c      	bne.n	800905a <_printf_i+0x1fe>
 8008fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fc4:	b004      	add	sp, #16
 8008fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fca:	4835      	ldr	r0, [pc, #212]	; (80090a0 <_printf_i+0x244>)
 8008fcc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	680e      	ldr	r6, [r1, #0]
 8008fd4:	061f      	lsls	r7, r3, #24
 8008fd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8008fda:	600e      	str	r6, [r1, #0]
 8008fdc:	d514      	bpl.n	8009008 <_printf_i+0x1ac>
 8008fde:	07d9      	lsls	r1, r3, #31
 8008fe0:	bf44      	itt	mi
 8008fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8008fe6:	6023      	strmi	r3, [r4, #0]
 8008fe8:	b91d      	cbnz	r5, 8008ff2 <_printf_i+0x196>
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	f023 0320 	bic.w	r3, r3, #32
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	2310      	movs	r3, #16
 8008ff4:	e7b0      	b.n	8008f58 <_printf_i+0xfc>
 8008ff6:	6823      	ldr	r3, [r4, #0]
 8008ff8:	f043 0320 	orr.w	r3, r3, #32
 8008ffc:	6023      	str	r3, [r4, #0]
 8008ffe:	2378      	movs	r3, #120	; 0x78
 8009000:	4828      	ldr	r0, [pc, #160]	; (80090a4 <_printf_i+0x248>)
 8009002:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009006:	e7e3      	b.n	8008fd0 <_printf_i+0x174>
 8009008:	065e      	lsls	r6, r3, #25
 800900a:	bf48      	it	mi
 800900c:	b2ad      	uxthmi	r5, r5
 800900e:	e7e6      	b.n	8008fde <_printf_i+0x182>
 8009010:	4616      	mov	r6, r2
 8009012:	e7bb      	b.n	8008f8c <_printf_i+0x130>
 8009014:	680b      	ldr	r3, [r1, #0]
 8009016:	6826      	ldr	r6, [r4, #0]
 8009018:	6960      	ldr	r0, [r4, #20]
 800901a:	1d1d      	adds	r5, r3, #4
 800901c:	600d      	str	r5, [r1, #0]
 800901e:	0635      	lsls	r5, r6, #24
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	d501      	bpl.n	8009028 <_printf_i+0x1cc>
 8009024:	6018      	str	r0, [r3, #0]
 8009026:	e002      	b.n	800902e <_printf_i+0x1d2>
 8009028:	0671      	lsls	r1, r6, #25
 800902a:	d5fb      	bpl.n	8009024 <_printf_i+0x1c8>
 800902c:	8018      	strh	r0, [r3, #0]
 800902e:	2300      	movs	r3, #0
 8009030:	6123      	str	r3, [r4, #16]
 8009032:	4616      	mov	r6, r2
 8009034:	e7ba      	b.n	8008fac <_printf_i+0x150>
 8009036:	680b      	ldr	r3, [r1, #0]
 8009038:	1d1a      	adds	r2, r3, #4
 800903a:	600a      	str	r2, [r1, #0]
 800903c:	681e      	ldr	r6, [r3, #0]
 800903e:	6862      	ldr	r2, [r4, #4]
 8009040:	2100      	movs	r1, #0
 8009042:	4630      	mov	r0, r6
 8009044:	f7f7 f8cc 	bl	80001e0 <memchr>
 8009048:	b108      	cbz	r0, 800904e <_printf_i+0x1f2>
 800904a:	1b80      	subs	r0, r0, r6
 800904c:	6060      	str	r0, [r4, #4]
 800904e:	6863      	ldr	r3, [r4, #4]
 8009050:	6123      	str	r3, [r4, #16]
 8009052:	2300      	movs	r3, #0
 8009054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009058:	e7a8      	b.n	8008fac <_printf_i+0x150>
 800905a:	6923      	ldr	r3, [r4, #16]
 800905c:	4632      	mov	r2, r6
 800905e:	4649      	mov	r1, r9
 8009060:	4640      	mov	r0, r8
 8009062:	47d0      	blx	sl
 8009064:	3001      	adds	r0, #1
 8009066:	d0ab      	beq.n	8008fc0 <_printf_i+0x164>
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	079b      	lsls	r3, r3, #30
 800906c:	d413      	bmi.n	8009096 <_printf_i+0x23a>
 800906e:	68e0      	ldr	r0, [r4, #12]
 8009070:	9b03      	ldr	r3, [sp, #12]
 8009072:	4298      	cmp	r0, r3
 8009074:	bfb8      	it	lt
 8009076:	4618      	movlt	r0, r3
 8009078:	e7a4      	b.n	8008fc4 <_printf_i+0x168>
 800907a:	2301      	movs	r3, #1
 800907c:	4632      	mov	r2, r6
 800907e:	4649      	mov	r1, r9
 8009080:	4640      	mov	r0, r8
 8009082:	47d0      	blx	sl
 8009084:	3001      	adds	r0, #1
 8009086:	d09b      	beq.n	8008fc0 <_printf_i+0x164>
 8009088:	3501      	adds	r5, #1
 800908a:	68e3      	ldr	r3, [r4, #12]
 800908c:	9903      	ldr	r1, [sp, #12]
 800908e:	1a5b      	subs	r3, r3, r1
 8009090:	42ab      	cmp	r3, r5
 8009092:	dcf2      	bgt.n	800907a <_printf_i+0x21e>
 8009094:	e7eb      	b.n	800906e <_printf_i+0x212>
 8009096:	2500      	movs	r5, #0
 8009098:	f104 0619 	add.w	r6, r4, #25
 800909c:	e7f5      	b.n	800908a <_printf_i+0x22e>
 800909e:	bf00      	nop
 80090a0:	08009385 	.word	0x08009385
 80090a4:	08009396 	.word	0x08009396

080090a8 <memcpy>:
 80090a8:	440a      	add	r2, r1
 80090aa:	4291      	cmp	r1, r2
 80090ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80090b0:	d100      	bne.n	80090b4 <memcpy+0xc>
 80090b2:	4770      	bx	lr
 80090b4:	b510      	push	{r4, lr}
 80090b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090be:	4291      	cmp	r1, r2
 80090c0:	d1f9      	bne.n	80090b6 <memcpy+0xe>
 80090c2:	bd10      	pop	{r4, pc}

080090c4 <memmove>:
 80090c4:	4288      	cmp	r0, r1
 80090c6:	b510      	push	{r4, lr}
 80090c8:	eb01 0402 	add.w	r4, r1, r2
 80090cc:	d902      	bls.n	80090d4 <memmove+0x10>
 80090ce:	4284      	cmp	r4, r0
 80090d0:	4623      	mov	r3, r4
 80090d2:	d807      	bhi.n	80090e4 <memmove+0x20>
 80090d4:	1e43      	subs	r3, r0, #1
 80090d6:	42a1      	cmp	r1, r4
 80090d8:	d008      	beq.n	80090ec <memmove+0x28>
 80090da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090e2:	e7f8      	b.n	80090d6 <memmove+0x12>
 80090e4:	4402      	add	r2, r0
 80090e6:	4601      	mov	r1, r0
 80090e8:	428a      	cmp	r2, r1
 80090ea:	d100      	bne.n	80090ee <memmove+0x2a>
 80090ec:	bd10      	pop	{r4, pc}
 80090ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090f6:	e7f7      	b.n	80090e8 <memmove+0x24>

080090f8 <_free_r>:
 80090f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090fa:	2900      	cmp	r1, #0
 80090fc:	d048      	beq.n	8009190 <_free_r+0x98>
 80090fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009102:	9001      	str	r0, [sp, #4]
 8009104:	2b00      	cmp	r3, #0
 8009106:	f1a1 0404 	sub.w	r4, r1, #4
 800910a:	bfb8      	it	lt
 800910c:	18e4      	addlt	r4, r4, r3
 800910e:	f000 f8d3 	bl	80092b8 <__malloc_lock>
 8009112:	4a20      	ldr	r2, [pc, #128]	; (8009194 <_free_r+0x9c>)
 8009114:	9801      	ldr	r0, [sp, #4]
 8009116:	6813      	ldr	r3, [r2, #0]
 8009118:	4615      	mov	r5, r2
 800911a:	b933      	cbnz	r3, 800912a <_free_r+0x32>
 800911c:	6063      	str	r3, [r4, #4]
 800911e:	6014      	str	r4, [r2, #0]
 8009120:	b003      	add	sp, #12
 8009122:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009126:	f000 b8cd 	b.w	80092c4 <__malloc_unlock>
 800912a:	42a3      	cmp	r3, r4
 800912c:	d90b      	bls.n	8009146 <_free_r+0x4e>
 800912e:	6821      	ldr	r1, [r4, #0]
 8009130:	1862      	adds	r2, r4, r1
 8009132:	4293      	cmp	r3, r2
 8009134:	bf04      	itt	eq
 8009136:	681a      	ldreq	r2, [r3, #0]
 8009138:	685b      	ldreq	r3, [r3, #4]
 800913a:	6063      	str	r3, [r4, #4]
 800913c:	bf04      	itt	eq
 800913e:	1852      	addeq	r2, r2, r1
 8009140:	6022      	streq	r2, [r4, #0]
 8009142:	602c      	str	r4, [r5, #0]
 8009144:	e7ec      	b.n	8009120 <_free_r+0x28>
 8009146:	461a      	mov	r2, r3
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	b10b      	cbz	r3, 8009150 <_free_r+0x58>
 800914c:	42a3      	cmp	r3, r4
 800914e:	d9fa      	bls.n	8009146 <_free_r+0x4e>
 8009150:	6811      	ldr	r1, [r2, #0]
 8009152:	1855      	adds	r5, r2, r1
 8009154:	42a5      	cmp	r5, r4
 8009156:	d10b      	bne.n	8009170 <_free_r+0x78>
 8009158:	6824      	ldr	r4, [r4, #0]
 800915a:	4421      	add	r1, r4
 800915c:	1854      	adds	r4, r2, r1
 800915e:	42a3      	cmp	r3, r4
 8009160:	6011      	str	r1, [r2, #0]
 8009162:	d1dd      	bne.n	8009120 <_free_r+0x28>
 8009164:	681c      	ldr	r4, [r3, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	6053      	str	r3, [r2, #4]
 800916a:	4421      	add	r1, r4
 800916c:	6011      	str	r1, [r2, #0]
 800916e:	e7d7      	b.n	8009120 <_free_r+0x28>
 8009170:	d902      	bls.n	8009178 <_free_r+0x80>
 8009172:	230c      	movs	r3, #12
 8009174:	6003      	str	r3, [r0, #0]
 8009176:	e7d3      	b.n	8009120 <_free_r+0x28>
 8009178:	6825      	ldr	r5, [r4, #0]
 800917a:	1961      	adds	r1, r4, r5
 800917c:	428b      	cmp	r3, r1
 800917e:	bf04      	itt	eq
 8009180:	6819      	ldreq	r1, [r3, #0]
 8009182:	685b      	ldreq	r3, [r3, #4]
 8009184:	6063      	str	r3, [r4, #4]
 8009186:	bf04      	itt	eq
 8009188:	1949      	addeq	r1, r1, r5
 800918a:	6021      	streq	r1, [r4, #0]
 800918c:	6054      	str	r4, [r2, #4]
 800918e:	e7c7      	b.n	8009120 <_free_r+0x28>
 8009190:	b003      	add	sp, #12
 8009192:	bd30      	pop	{r4, r5, pc}
 8009194:	20000428 	.word	0x20000428

08009198 <_malloc_r>:
 8009198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919a:	1ccd      	adds	r5, r1, #3
 800919c:	f025 0503 	bic.w	r5, r5, #3
 80091a0:	3508      	adds	r5, #8
 80091a2:	2d0c      	cmp	r5, #12
 80091a4:	bf38      	it	cc
 80091a6:	250c      	movcc	r5, #12
 80091a8:	2d00      	cmp	r5, #0
 80091aa:	4606      	mov	r6, r0
 80091ac:	db01      	blt.n	80091b2 <_malloc_r+0x1a>
 80091ae:	42a9      	cmp	r1, r5
 80091b0:	d903      	bls.n	80091ba <_malloc_r+0x22>
 80091b2:	230c      	movs	r3, #12
 80091b4:	6033      	str	r3, [r6, #0]
 80091b6:	2000      	movs	r0, #0
 80091b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091ba:	f000 f87d 	bl	80092b8 <__malloc_lock>
 80091be:	4921      	ldr	r1, [pc, #132]	; (8009244 <_malloc_r+0xac>)
 80091c0:	680a      	ldr	r2, [r1, #0]
 80091c2:	4614      	mov	r4, r2
 80091c4:	b99c      	cbnz	r4, 80091ee <_malloc_r+0x56>
 80091c6:	4f20      	ldr	r7, [pc, #128]	; (8009248 <_malloc_r+0xb0>)
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	b923      	cbnz	r3, 80091d6 <_malloc_r+0x3e>
 80091cc:	4621      	mov	r1, r4
 80091ce:	4630      	mov	r0, r6
 80091d0:	f000 f862 	bl	8009298 <_sbrk_r>
 80091d4:	6038      	str	r0, [r7, #0]
 80091d6:	4629      	mov	r1, r5
 80091d8:	4630      	mov	r0, r6
 80091da:	f000 f85d 	bl	8009298 <_sbrk_r>
 80091de:	1c43      	adds	r3, r0, #1
 80091e0:	d123      	bne.n	800922a <_malloc_r+0x92>
 80091e2:	230c      	movs	r3, #12
 80091e4:	6033      	str	r3, [r6, #0]
 80091e6:	4630      	mov	r0, r6
 80091e8:	f000 f86c 	bl	80092c4 <__malloc_unlock>
 80091ec:	e7e3      	b.n	80091b6 <_malloc_r+0x1e>
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	1b5b      	subs	r3, r3, r5
 80091f2:	d417      	bmi.n	8009224 <_malloc_r+0x8c>
 80091f4:	2b0b      	cmp	r3, #11
 80091f6:	d903      	bls.n	8009200 <_malloc_r+0x68>
 80091f8:	6023      	str	r3, [r4, #0]
 80091fa:	441c      	add	r4, r3
 80091fc:	6025      	str	r5, [r4, #0]
 80091fe:	e004      	b.n	800920a <_malloc_r+0x72>
 8009200:	6863      	ldr	r3, [r4, #4]
 8009202:	42a2      	cmp	r2, r4
 8009204:	bf0c      	ite	eq
 8009206:	600b      	streq	r3, [r1, #0]
 8009208:	6053      	strne	r3, [r2, #4]
 800920a:	4630      	mov	r0, r6
 800920c:	f000 f85a 	bl	80092c4 <__malloc_unlock>
 8009210:	f104 000b 	add.w	r0, r4, #11
 8009214:	1d23      	adds	r3, r4, #4
 8009216:	f020 0007 	bic.w	r0, r0, #7
 800921a:	1ac2      	subs	r2, r0, r3
 800921c:	d0cc      	beq.n	80091b8 <_malloc_r+0x20>
 800921e:	1a1b      	subs	r3, r3, r0
 8009220:	50a3      	str	r3, [r4, r2]
 8009222:	e7c9      	b.n	80091b8 <_malloc_r+0x20>
 8009224:	4622      	mov	r2, r4
 8009226:	6864      	ldr	r4, [r4, #4]
 8009228:	e7cc      	b.n	80091c4 <_malloc_r+0x2c>
 800922a:	1cc4      	adds	r4, r0, #3
 800922c:	f024 0403 	bic.w	r4, r4, #3
 8009230:	42a0      	cmp	r0, r4
 8009232:	d0e3      	beq.n	80091fc <_malloc_r+0x64>
 8009234:	1a21      	subs	r1, r4, r0
 8009236:	4630      	mov	r0, r6
 8009238:	f000 f82e 	bl	8009298 <_sbrk_r>
 800923c:	3001      	adds	r0, #1
 800923e:	d1dd      	bne.n	80091fc <_malloc_r+0x64>
 8009240:	e7cf      	b.n	80091e2 <_malloc_r+0x4a>
 8009242:	bf00      	nop
 8009244:	20000428 	.word	0x20000428
 8009248:	2000042c 	.word	0x2000042c

0800924c <_realloc_r>:
 800924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924e:	4607      	mov	r7, r0
 8009250:	4614      	mov	r4, r2
 8009252:	460e      	mov	r6, r1
 8009254:	b921      	cbnz	r1, 8009260 <_realloc_r+0x14>
 8009256:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800925a:	4611      	mov	r1, r2
 800925c:	f7ff bf9c 	b.w	8009198 <_malloc_r>
 8009260:	b922      	cbnz	r2, 800926c <_realloc_r+0x20>
 8009262:	f7ff ff49 	bl	80090f8 <_free_r>
 8009266:	4625      	mov	r5, r4
 8009268:	4628      	mov	r0, r5
 800926a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800926c:	f000 f830 	bl	80092d0 <_malloc_usable_size_r>
 8009270:	42a0      	cmp	r0, r4
 8009272:	d20f      	bcs.n	8009294 <_realloc_r+0x48>
 8009274:	4621      	mov	r1, r4
 8009276:	4638      	mov	r0, r7
 8009278:	f7ff ff8e 	bl	8009198 <_malloc_r>
 800927c:	4605      	mov	r5, r0
 800927e:	2800      	cmp	r0, #0
 8009280:	d0f2      	beq.n	8009268 <_realloc_r+0x1c>
 8009282:	4631      	mov	r1, r6
 8009284:	4622      	mov	r2, r4
 8009286:	f7ff ff0f 	bl	80090a8 <memcpy>
 800928a:	4631      	mov	r1, r6
 800928c:	4638      	mov	r0, r7
 800928e:	f7ff ff33 	bl	80090f8 <_free_r>
 8009292:	e7e9      	b.n	8009268 <_realloc_r+0x1c>
 8009294:	4635      	mov	r5, r6
 8009296:	e7e7      	b.n	8009268 <_realloc_r+0x1c>

08009298 <_sbrk_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4d06      	ldr	r5, [pc, #24]	; (80092b4 <_sbrk_r+0x1c>)
 800929c:	2300      	movs	r3, #0
 800929e:	4604      	mov	r4, r0
 80092a0:	4608      	mov	r0, r1
 80092a2:	602b      	str	r3, [r5, #0]
 80092a4:	f7f8 f918 	bl	80014d8 <_sbrk>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	d102      	bne.n	80092b2 <_sbrk_r+0x1a>
 80092ac:	682b      	ldr	r3, [r5, #0]
 80092ae:	b103      	cbz	r3, 80092b2 <_sbrk_r+0x1a>
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
 80092b4:	20001e48 	.word	0x20001e48

080092b8 <__malloc_lock>:
 80092b8:	4801      	ldr	r0, [pc, #4]	; (80092c0 <__malloc_lock+0x8>)
 80092ba:	f000 b811 	b.w	80092e0 <__retarget_lock_acquire_recursive>
 80092be:	bf00      	nop
 80092c0:	20001e50 	.word	0x20001e50

080092c4 <__malloc_unlock>:
 80092c4:	4801      	ldr	r0, [pc, #4]	; (80092cc <__malloc_unlock+0x8>)
 80092c6:	f000 b80c 	b.w	80092e2 <__retarget_lock_release_recursive>
 80092ca:	bf00      	nop
 80092cc:	20001e50 	.word	0x20001e50

080092d0 <_malloc_usable_size_r>:
 80092d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092d4:	1f18      	subs	r0, r3, #4
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	bfbc      	itt	lt
 80092da:	580b      	ldrlt	r3, [r1, r0]
 80092dc:	18c0      	addlt	r0, r0, r3
 80092de:	4770      	bx	lr

080092e0 <__retarget_lock_acquire_recursive>:
 80092e0:	4770      	bx	lr

080092e2 <__retarget_lock_release_recursive>:
 80092e2:	4770      	bx	lr

080092e4 <_init>:
 80092e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e6:	bf00      	nop
 80092e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ea:	bc08      	pop	{r3}
 80092ec:	469e      	mov	lr, r3
 80092ee:	4770      	bx	lr

080092f0 <_fini>:
 80092f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f2:	bf00      	nop
 80092f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092f6:	bc08      	pop	{r3}
 80092f8:	469e      	mov	lr, r3
 80092fa:	4770      	bx	lr
