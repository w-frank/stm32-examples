
wm8731_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046ec  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08004874  08004874  00014874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004898  08004898  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004898  08004898  00014898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048a0  080048a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048a0  080048a0  000148a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048a4  080048a4  000148a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080048a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  2000000c  080048b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  080048b4  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c10e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e21  00000000  00000000  0002c14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002df70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  0002e908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a03  00000000  00000000  0002f1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d207  00000000  00000000  0004fbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3b83  00000000  00000000  0005cdea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012096d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000282c  00000000  00000000  001209c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800485c 	.word	0x0800485c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800485c 	.word	0x0800485c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80007e8:	f000 b96e 	b.w	8000ac8 <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9d08      	ldr	r5, [sp, #32]
 800080a:	4604      	mov	r4, r0
 800080c:	468c      	mov	ip, r1
 800080e:	2b00      	cmp	r3, #0
 8000810:	f040 8083 	bne.w	800091a <__udivmoddi4+0x116>
 8000814:	428a      	cmp	r2, r1
 8000816:	4617      	mov	r7, r2
 8000818:	d947      	bls.n	80008aa <__udivmoddi4+0xa6>
 800081a:	fab2 f282 	clz	r2, r2
 800081e:	b142      	cbz	r2, 8000832 <__udivmoddi4+0x2e>
 8000820:	f1c2 0020 	rsb	r0, r2, #32
 8000824:	fa24 f000 	lsr.w	r0, r4, r0
 8000828:	4091      	lsls	r1, r2
 800082a:	4097      	lsls	r7, r2
 800082c:	ea40 0c01 	orr.w	ip, r0, r1
 8000830:	4094      	lsls	r4, r2
 8000832:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000836:	0c23      	lsrs	r3, r4, #16
 8000838:	fbbc f6f8 	udiv	r6, ip, r8
 800083c:	fa1f fe87 	uxth.w	lr, r7
 8000840:	fb08 c116 	mls	r1, r8, r6, ip
 8000844:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000848:	fb06 f10e 	mul.w	r1, r6, lr
 800084c:	4299      	cmp	r1, r3
 800084e:	d909      	bls.n	8000864 <__udivmoddi4+0x60>
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000856:	f080 8119 	bcs.w	8000a8c <__udivmoddi4+0x288>
 800085a:	4299      	cmp	r1, r3
 800085c:	f240 8116 	bls.w	8000a8c <__udivmoddi4+0x288>
 8000860:	3e02      	subs	r6, #2
 8000862:	443b      	add	r3, r7
 8000864:	1a5b      	subs	r3, r3, r1
 8000866:	b2a4      	uxth	r4, r4
 8000868:	fbb3 f0f8 	udiv	r0, r3, r8
 800086c:	fb08 3310 	mls	r3, r8, r0, r3
 8000870:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000874:	fb00 fe0e 	mul.w	lr, r0, lr
 8000878:	45a6      	cmp	lr, r4
 800087a:	d909      	bls.n	8000890 <__udivmoddi4+0x8c>
 800087c:	193c      	adds	r4, r7, r4
 800087e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000882:	f080 8105 	bcs.w	8000a90 <__udivmoddi4+0x28c>
 8000886:	45a6      	cmp	lr, r4
 8000888:	f240 8102 	bls.w	8000a90 <__udivmoddi4+0x28c>
 800088c:	3802      	subs	r0, #2
 800088e:	443c      	add	r4, r7
 8000890:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000894:	eba4 040e 	sub.w	r4, r4, lr
 8000898:	2600      	movs	r6, #0
 800089a:	b11d      	cbz	r5, 80008a4 <__udivmoddi4+0xa0>
 800089c:	40d4      	lsrs	r4, r2
 800089e:	2300      	movs	r3, #0
 80008a0:	e9c5 4300 	strd	r4, r3, [r5]
 80008a4:	4631      	mov	r1, r6
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	b902      	cbnz	r2, 80008ae <__udivmoddi4+0xaa>
 80008ac:	deff      	udf	#255	; 0xff
 80008ae:	fab2 f282 	clz	r2, r2
 80008b2:	2a00      	cmp	r2, #0
 80008b4:	d150      	bne.n	8000958 <__udivmoddi4+0x154>
 80008b6:	1bcb      	subs	r3, r1, r7
 80008b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008bc:	fa1f f887 	uxth.w	r8, r7
 80008c0:	2601      	movs	r6, #1
 80008c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80008c6:	0c21      	lsrs	r1, r4, #16
 80008c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80008cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d0:	fb08 f30c 	mul.w	r3, r8, ip
 80008d4:	428b      	cmp	r3, r1
 80008d6:	d907      	bls.n	80008e8 <__udivmoddi4+0xe4>
 80008d8:	1879      	adds	r1, r7, r1
 80008da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80008de:	d202      	bcs.n	80008e6 <__udivmoddi4+0xe2>
 80008e0:	428b      	cmp	r3, r1
 80008e2:	f200 80e9 	bhi.w	8000ab8 <__udivmoddi4+0x2b4>
 80008e6:	4684      	mov	ip, r0
 80008e8:	1ac9      	subs	r1, r1, r3
 80008ea:	b2a3      	uxth	r3, r4
 80008ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80008f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80008f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008f8:	fb08 f800 	mul.w	r8, r8, r0
 80008fc:	45a0      	cmp	r8, r4
 80008fe:	d907      	bls.n	8000910 <__udivmoddi4+0x10c>
 8000900:	193c      	adds	r4, r7, r4
 8000902:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000906:	d202      	bcs.n	800090e <__udivmoddi4+0x10a>
 8000908:	45a0      	cmp	r8, r4
 800090a:	f200 80d9 	bhi.w	8000ac0 <__udivmoddi4+0x2bc>
 800090e:	4618      	mov	r0, r3
 8000910:	eba4 0408 	sub.w	r4, r4, r8
 8000914:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000918:	e7bf      	b.n	800089a <__udivmoddi4+0x96>
 800091a:	428b      	cmp	r3, r1
 800091c:	d909      	bls.n	8000932 <__udivmoddi4+0x12e>
 800091e:	2d00      	cmp	r5, #0
 8000920:	f000 80b1 	beq.w	8000a86 <__udivmoddi4+0x282>
 8000924:	2600      	movs	r6, #0
 8000926:	e9c5 0100 	strd	r0, r1, [r5]
 800092a:	4630      	mov	r0, r6
 800092c:	4631      	mov	r1, r6
 800092e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000932:	fab3 f683 	clz	r6, r3
 8000936:	2e00      	cmp	r6, #0
 8000938:	d14a      	bne.n	80009d0 <__udivmoddi4+0x1cc>
 800093a:	428b      	cmp	r3, r1
 800093c:	d302      	bcc.n	8000944 <__udivmoddi4+0x140>
 800093e:	4282      	cmp	r2, r0
 8000940:	f200 80b8 	bhi.w	8000ab4 <__udivmoddi4+0x2b0>
 8000944:	1a84      	subs	r4, r0, r2
 8000946:	eb61 0103 	sbc.w	r1, r1, r3
 800094a:	2001      	movs	r0, #1
 800094c:	468c      	mov	ip, r1
 800094e:	2d00      	cmp	r5, #0
 8000950:	d0a8      	beq.n	80008a4 <__udivmoddi4+0xa0>
 8000952:	e9c5 4c00 	strd	r4, ip, [r5]
 8000956:	e7a5      	b.n	80008a4 <__udivmoddi4+0xa0>
 8000958:	f1c2 0320 	rsb	r3, r2, #32
 800095c:	fa20 f603 	lsr.w	r6, r0, r3
 8000960:	4097      	lsls	r7, r2
 8000962:	fa01 f002 	lsl.w	r0, r1, r2
 8000966:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800096a:	40d9      	lsrs	r1, r3
 800096c:	4330      	orrs	r0, r6
 800096e:	0c03      	lsrs	r3, r0, #16
 8000970:	fbb1 f6fe 	udiv	r6, r1, lr
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	fb0e 1116 	mls	r1, lr, r6, r1
 800097c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000980:	fb06 f108 	mul.w	r1, r6, r8
 8000984:	4299      	cmp	r1, r3
 8000986:	fa04 f402 	lsl.w	r4, r4, r2
 800098a:	d909      	bls.n	80009a0 <__udivmoddi4+0x19c>
 800098c:	18fb      	adds	r3, r7, r3
 800098e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000992:	f080 808d 	bcs.w	8000ab0 <__udivmoddi4+0x2ac>
 8000996:	4299      	cmp	r1, r3
 8000998:	f240 808a 	bls.w	8000ab0 <__udivmoddi4+0x2ac>
 800099c:	3e02      	subs	r6, #2
 800099e:	443b      	add	r3, r7
 80009a0:	1a5b      	subs	r3, r3, r1
 80009a2:	b281      	uxth	r1, r0
 80009a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80009a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80009ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009b0:	fb00 f308 	mul.w	r3, r0, r8
 80009b4:	428b      	cmp	r3, r1
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x1c4>
 80009b8:	1879      	adds	r1, r7, r1
 80009ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80009be:	d273      	bcs.n	8000aa8 <__udivmoddi4+0x2a4>
 80009c0:	428b      	cmp	r3, r1
 80009c2:	d971      	bls.n	8000aa8 <__udivmoddi4+0x2a4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	4439      	add	r1, r7
 80009c8:	1acb      	subs	r3, r1, r3
 80009ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80009ce:	e778      	b.n	80008c2 <__udivmoddi4+0xbe>
 80009d0:	f1c6 0c20 	rsb	ip, r6, #32
 80009d4:	fa03 f406 	lsl.w	r4, r3, r6
 80009d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80009dc:	431c      	orrs	r4, r3
 80009de:	fa20 f70c 	lsr.w	r7, r0, ip
 80009e2:	fa01 f306 	lsl.w	r3, r1, r6
 80009e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80009ee:	431f      	orrs	r7, r3
 80009f0:	0c3b      	lsrs	r3, r7, #16
 80009f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009f6:	fa1f f884 	uxth.w	r8, r4
 80009fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80009fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a02:	fb09 fa08 	mul.w	sl, r9, r8
 8000a06:	458a      	cmp	sl, r1
 8000a08:	fa02 f206 	lsl.w	r2, r2, r6
 8000a0c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x220>
 8000a12:	1861      	adds	r1, r4, r1
 8000a14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000a18:	d248      	bcs.n	8000aac <__udivmoddi4+0x2a8>
 8000a1a:	458a      	cmp	sl, r1
 8000a1c:	d946      	bls.n	8000aac <__udivmoddi4+0x2a8>
 8000a1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a22:	4421      	add	r1, r4
 8000a24:	eba1 010a 	sub.w	r1, r1, sl
 8000a28:	b2bf      	uxth	r7, r7
 8000a2a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a2e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a32:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a36:	fb00 f808 	mul.w	r8, r0, r8
 8000a3a:	45b8      	cmp	r8, r7
 8000a3c:	d907      	bls.n	8000a4e <__udivmoddi4+0x24a>
 8000a3e:	19e7      	adds	r7, r4, r7
 8000a40:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a44:	d22e      	bcs.n	8000aa4 <__udivmoddi4+0x2a0>
 8000a46:	45b8      	cmp	r8, r7
 8000a48:	d92c      	bls.n	8000aa4 <__udivmoddi4+0x2a0>
 8000a4a:	3802      	subs	r0, #2
 8000a4c:	4427      	add	r7, r4
 8000a4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a52:	eba7 0708 	sub.w	r7, r7, r8
 8000a56:	fba0 8902 	umull	r8, r9, r0, r2
 8000a5a:	454f      	cmp	r7, r9
 8000a5c:	46c6      	mov	lr, r8
 8000a5e:	4649      	mov	r1, r9
 8000a60:	d31a      	bcc.n	8000a98 <__udivmoddi4+0x294>
 8000a62:	d017      	beq.n	8000a94 <__udivmoddi4+0x290>
 8000a64:	b15d      	cbz	r5, 8000a7e <__udivmoddi4+0x27a>
 8000a66:	ebb3 020e 	subs.w	r2, r3, lr
 8000a6a:	eb67 0701 	sbc.w	r7, r7, r1
 8000a6e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a72:	40f2      	lsrs	r2, r6
 8000a74:	ea4c 0202 	orr.w	r2, ip, r2
 8000a78:	40f7      	lsrs	r7, r6
 8000a7a:	e9c5 2700 	strd	r2, r7, [r5]
 8000a7e:	2600      	movs	r6, #0
 8000a80:	4631      	mov	r1, r6
 8000a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a86:	462e      	mov	r6, r5
 8000a88:	4628      	mov	r0, r5
 8000a8a:	e70b      	b.n	80008a4 <__udivmoddi4+0xa0>
 8000a8c:	4606      	mov	r6, r0
 8000a8e:	e6e9      	b.n	8000864 <__udivmoddi4+0x60>
 8000a90:	4618      	mov	r0, r3
 8000a92:	e6fd      	b.n	8000890 <__udivmoddi4+0x8c>
 8000a94:	4543      	cmp	r3, r8
 8000a96:	d2e5      	bcs.n	8000a64 <__udivmoddi4+0x260>
 8000a98:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a9c:	eb69 0104 	sbc.w	r1, r9, r4
 8000aa0:	3801      	subs	r0, #1
 8000aa2:	e7df      	b.n	8000a64 <__udivmoddi4+0x260>
 8000aa4:	4608      	mov	r0, r1
 8000aa6:	e7d2      	b.n	8000a4e <__udivmoddi4+0x24a>
 8000aa8:	4660      	mov	r0, ip
 8000aaa:	e78d      	b.n	80009c8 <__udivmoddi4+0x1c4>
 8000aac:	4681      	mov	r9, r0
 8000aae:	e7b9      	b.n	8000a24 <__udivmoddi4+0x220>
 8000ab0:	4666      	mov	r6, ip
 8000ab2:	e775      	b.n	80009a0 <__udivmoddi4+0x19c>
 8000ab4:	4630      	mov	r0, r6
 8000ab6:	e74a      	b.n	800094e <__udivmoddi4+0x14a>
 8000ab8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000abc:	4439      	add	r1, r7
 8000abe:	e713      	b.n	80008e8 <__udivmoddi4+0xe4>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	443c      	add	r4, r7
 8000ac4:	e724      	b.n	8000910 <__udivmoddi4+0x10c>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_idiv0>:
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <HAL_Init+0x40>)
 8000ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <HAL_Init+0x40>)
 8000ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <HAL_Init+0x40>)
 8000aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 f94f 	bl	8000d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afa:	2000      	movs	r0, #0
 8000afc:	f000 f808 	bl	8000b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b00:	f003 fa8c 	bl	800401c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023c00 	.word	0x40023c00

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_InitTick+0x54>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_InitTick+0x58>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f967 	bl	8000e02 <HAL_SYSTICK_Config>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00e      	b.n	8000b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	d80a      	bhi.n	8000b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b4c:	f000 f92f 	bl	8000dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b50:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <HAL_InitTick+0x5c>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000004 	.word	0x20000004
 8000b6c:	20000000 	.word	0x20000000

08000b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x20>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x24>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_IncTick+0x24>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000004 	.word	0x20000004
 8000b94:	20000028 	.word	0x20000028

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <HAL_GetTick+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000028 	.word	0x20000028

08000bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb8:	f7ff ffee 	bl	8000b98 <HAL_GetTick>
 8000bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bc8:	d005      	beq.n	8000bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <HAL_Delay+0x44>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bd6:	bf00      	nop
 8000bd8:	f7ff ffde 	bl	8000b98 <HAL_GetTick>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d8f7      	bhi.n	8000bd8 <HAL_Delay+0x28>
  {
  }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	60d3      	str	r3, [r2, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_GetPriorityGrouping+0x18>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	f003 0307 	and.w	r3, r3, #7
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	db0b      	blt.n	8000c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f003 021f 	and.w	r2, r3, #31
 8000c74:	4907      	ldr	r1, [pc, #28]	; (8000c94 <__NVIC_EnableIRQ+0x38>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	095b      	lsrs	r3, r3, #5
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000e100 	.word	0xe000e100

08000c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	db0a      	blt.n	8000cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	490c      	ldr	r1, [pc, #48]	; (8000ce4 <__NVIC_SetPriority+0x4c>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc0:	e00a      	b.n	8000cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4908      	ldr	r1, [pc, #32]	; (8000ce8 <__NVIC_SetPriority+0x50>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	3b04      	subs	r3, #4
 8000cd0:	0112      	lsls	r2, r2, #4
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	761a      	strb	r2, [r3, #24]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	; 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f1c3 0307 	rsb	r3, r3, #7
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	bf28      	it	cs
 8000d0a:	2304      	movcs	r3, #4
 8000d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3304      	adds	r3, #4
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d902      	bls.n	8000d1c <NVIC_EncodePriority+0x30>
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3b03      	subs	r3, #3
 8000d1a:	e000      	b.n	8000d1e <NVIC_EncodePriority+0x32>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	401a      	ands	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	43d9      	mvns	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	4313      	orrs	r3, r2
         );
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3724      	adds	r7, #36	; 0x24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d64:	d301      	bcc.n	8000d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00f      	b.n	8000d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <SysTick_Config+0x40>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d72:	210f      	movs	r1, #15
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d78:	f7ff ff8e 	bl	8000c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <SysTick_Config+0x40>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SysTick_Config+0x40>)
 8000d84:	2207      	movs	r2, #7
 8000d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	e000e010 	.word	0xe000e010

08000d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff29 	bl	8000bf8 <__NVIC_SetPriorityGrouping>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc0:	f7ff ff3e 	bl	8000c40 <__NVIC_GetPriorityGrouping>
 8000dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	6978      	ldr	r0, [r7, #20]
 8000dcc:	f7ff ff8e 	bl	8000cec <NVIC_EncodePriority>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff5d 	bl	8000c98 <__NVIC_SetPriority>
}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff31 	bl	8000c5c <__NVIC_EnableIRQ>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ffa2 	bl	8000d54 <SysTick_Config>
 8000e10:	4603      	mov	r3, r0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff feb6 	bl	8000b98 <HAL_GetTick>
 8000e2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d101      	bne.n	8000e38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e099      	b.n	8000f6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 0201 	bic.w	r2, r2, #1
 8000e56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e58:	e00f      	b.n	8000e7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e5a:	f7ff fe9d 	bl	8000b98 <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b05      	cmp	r3, #5
 8000e66:	d908      	bls.n	8000e7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2220      	movs	r2, #32
 8000e6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2203      	movs	r2, #3
 8000e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e078      	b.n	8000f6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1e8      	bne.n	8000e5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	4b38      	ldr	r3, [pc, #224]	; (8000f74 <HAL_DMA_Init+0x158>)
 8000e94:	4013      	ands	r3, r2
 8000e96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ebe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	d107      	bne.n	8000ee4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	4313      	orrs	r3, r2
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	697a      	ldr	r2, [r7, #20]
 8000eea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	f023 0307 	bic.w	r3, r3, #7
 8000efa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d117      	bne.n	8000f3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d00e      	beq.n	8000f3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 fa6f 	bl	8001404 <DMA_CheckFifoParam>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d008      	beq.n	8000f3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2240      	movs	r2, #64	; 0x40
 8000f30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2201      	movs	r2, #1
 8000f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e016      	b.n	8000f6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 fa26 	bl	8001398 <DMA_CalcBaseAndBitshift>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f54:	223f      	movs	r2, #63	; 0x3f
 8000f56:	409a      	lsls	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	f010803f 	.word	0xf010803f

08000f78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d101      	bne.n	8000f9e <HAL_DMA_Start_IT+0x26>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e040      	b.n	8001020 <HAL_DMA_Start_IT+0xa8>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d12f      	bne.n	8001012 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f000 f9b8 	bl	800133c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd0:	223f      	movs	r2, #63	; 0x3f
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 0216 	orr.w	r2, r2, #22
 8000fe6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d007      	beq.n	8001000 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0208 	orr.w	r2, r2, #8
 8000ffe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	e005      	b.n	800101e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800101a:	2302      	movs	r3, #2
 800101c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800101e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001034:	4b92      	ldr	r3, [pc, #584]	; (8001280 <HAL_DMA_IRQHandler+0x258>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a92      	ldr	r2, [pc, #584]	; (8001284 <HAL_DMA_IRQHandler+0x25c>)
 800103a:	fba2 2303 	umull	r2, r3, r2, r3
 800103e:	0a9b      	lsrs	r3, r3, #10
 8001040:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001046:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001052:	2208      	movs	r2, #8
 8001054:	409a      	lsls	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4013      	ands	r3, r2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d01a      	beq.n	8001094 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d013      	beq.n	8001094 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0204 	bic.w	r2, r2, #4
 800107a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001080:	2208      	movs	r2, #8
 8001082:	409a      	lsls	r2, r3
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800108c:	f043 0201 	orr.w	r2, r3, #1
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001098:	2201      	movs	r2, #1
 800109a:	409a      	lsls	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4013      	ands	r3, r2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d012      	beq.n	80010ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00b      	beq.n	80010ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b6:	2201      	movs	r2, #1
 80010b8:	409a      	lsls	r2, r3
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c2:	f043 0202 	orr.w	r2, r3, #2
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ce:	2204      	movs	r2, #4
 80010d0:	409a      	lsls	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4013      	ands	r3, r2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d012      	beq.n	8001100 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00b      	beq.n	8001100 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ec:	2204      	movs	r2, #4
 80010ee:	409a      	lsls	r2, r3
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f8:	f043 0204 	orr.w	r2, r3, #4
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001104:	2210      	movs	r2, #16
 8001106:	409a      	lsls	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4013      	ands	r3, r2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d043      	beq.n	8001198 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	2b00      	cmp	r3, #0
 800111c:	d03c      	beq.n	8001198 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001122:	2210      	movs	r2, #16
 8001124:	409a      	lsls	r2, r3
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d018      	beq.n	800116a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d108      	bne.n	8001158 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	2b00      	cmp	r3, #0
 800114c:	d024      	beq.n	8001198 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	4798      	blx	r3
 8001156:	e01f      	b.n	8001198 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115c:	2b00      	cmp	r3, #0
 800115e:	d01b      	beq.n	8001198 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	4798      	blx	r3
 8001168:	e016      	b.n	8001198 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001174:	2b00      	cmp	r3, #0
 8001176:	d107      	bne.n	8001188 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0208 	bic.w	r2, r2, #8
 8001186:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119c:	2220      	movs	r2, #32
 800119e:	409a      	lsls	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 808e 	beq.w	80012c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0310 	and.w	r3, r3, #16
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 8086 	beq.w	80012c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011be:	2220      	movs	r2, #32
 80011c0:	409a      	lsls	r2, r3
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b05      	cmp	r3, #5
 80011d0:	d136      	bne.n	8001240 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0216 	bic.w	r2, r2, #22
 80011e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	695a      	ldr	r2, [r3, #20]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d103      	bne.n	8001202 <HAL_DMA_IRQHandler+0x1da>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d007      	beq.n	8001212 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0208 	bic.w	r2, r2, #8
 8001210:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001216:	223f      	movs	r2, #63	; 0x3f
 8001218:	409a      	lsls	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001232:	2b00      	cmp	r3, #0
 8001234:	d07d      	beq.n	8001332 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	4798      	blx	r3
        }
        return;
 800123e:	e078      	b.n	8001332 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d01c      	beq.n	8001288 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d108      	bne.n	800126e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001260:	2b00      	cmp	r3, #0
 8001262:	d030      	beq.n	80012c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	4798      	blx	r3
 800126c:	e02b      	b.n	80012c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001272:	2b00      	cmp	r3, #0
 8001274:	d027      	beq.n	80012c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	4798      	blx	r3
 800127e:	e022      	b.n	80012c6 <HAL_DMA_IRQHandler+0x29e>
 8001280:	20000008 	.word	0x20000008
 8001284:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10f      	bne.n	80012b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 0210 	bic.w	r2, r2, #16
 80012a4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d032      	beq.n	8001334 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d022      	beq.n	8001320 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2205      	movs	r2, #5
 80012de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0201 	bic.w	r2, r2, #1
 80012f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	3301      	adds	r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d307      	bcc.n	800130e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1f2      	bne.n	80012f2 <HAL_DMA_IRQHandler+0x2ca>
 800130c:	e000      	b.n	8001310 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800130e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	4798      	blx	r3
 8001330:	e000      	b.n	8001334 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001332:	bf00      	nop
    }
  }
}
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop

0800133c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001358:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2b40      	cmp	r3, #64	; 0x40
 8001368:	d108      	bne.n	800137c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800137a:	e007      	b.n	800138c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	60da      	str	r2, [r3, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	3b10      	subs	r3, #16
 80013a8:	4a14      	ldr	r2, [pc, #80]	; (80013fc <DMA_CalcBaseAndBitshift+0x64>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	091b      	lsrs	r3, r3, #4
 80013b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013b2:	4a13      	ldr	r2, [pc, #76]	; (8001400 <DMA_CalcBaseAndBitshift+0x68>)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d909      	bls.n	80013da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013ce:	f023 0303 	bic.w	r3, r3, #3
 80013d2:	1d1a      	adds	r2, r3, #4
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	659a      	str	r2, [r3, #88]	; 0x58
 80013d8:	e007      	b.n	80013ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013e2:	f023 0303 	bic.w	r3, r3, #3
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	aaaaaaab 	.word	0xaaaaaaab
 8001400:	08004874 	.word	0x08004874

08001404 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d11f      	bne.n	800145e <DMA_CheckFifoParam+0x5a>
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	2b03      	cmp	r3, #3
 8001422:	d856      	bhi.n	80014d2 <DMA_CheckFifoParam+0xce>
 8001424:	a201      	add	r2, pc, #4	; (adr r2, 800142c <DMA_CheckFifoParam+0x28>)
 8001426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	0800143d 	.word	0x0800143d
 8001430:	0800144f 	.word	0x0800144f
 8001434:	0800143d 	.word	0x0800143d
 8001438:	080014d3 	.word	0x080014d3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d046      	beq.n	80014d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800144c:	e043      	b.n	80014d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001452:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001456:	d140      	bne.n	80014da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800145c:	e03d      	b.n	80014da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001466:	d121      	bne.n	80014ac <DMA_CheckFifoParam+0xa8>
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d837      	bhi.n	80014de <DMA_CheckFifoParam+0xda>
 800146e:	a201      	add	r2, pc, #4	; (adr r2, 8001474 <DMA_CheckFifoParam+0x70>)
 8001470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001474:	08001485 	.word	0x08001485
 8001478:	0800148b 	.word	0x0800148b
 800147c:	08001485 	.word	0x08001485
 8001480:	0800149d 	.word	0x0800149d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
      break;
 8001488:	e030      	b.n	80014ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d025      	beq.n	80014e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800149a:	e022      	b.n	80014e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014a4:	d11f      	bne.n	80014e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80014aa:	e01c      	b.n	80014e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d903      	bls.n	80014ba <DMA_CheckFifoParam+0xb6>
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d003      	beq.n	80014c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80014b8:	e018      	b.n	80014ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	73fb      	strb	r3, [r7, #15]
      break;
 80014be:	e015      	b.n	80014ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00e      	beq.n	80014ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
      break;
 80014d0:	e00b      	b.n	80014ea <DMA_CheckFifoParam+0xe6>
      break;
 80014d2:	bf00      	nop
 80014d4:	e00a      	b.n	80014ec <DMA_CheckFifoParam+0xe8>
      break;
 80014d6:	bf00      	nop
 80014d8:	e008      	b.n	80014ec <DMA_CheckFifoParam+0xe8>
      break;
 80014da:	bf00      	nop
 80014dc:	e006      	b.n	80014ec <DMA_CheckFifoParam+0xe8>
      break;
 80014de:	bf00      	nop
 80014e0:	e004      	b.n	80014ec <DMA_CheckFifoParam+0xe8>
      break;
 80014e2:	bf00      	nop
 80014e4:	e002      	b.n	80014ec <DMA_CheckFifoParam+0xe8>
      break;   
 80014e6:	bf00      	nop
 80014e8:	e000      	b.n	80014ec <DMA_CheckFifoParam+0xe8>
      break;
 80014ea:	bf00      	nop
    }
  } 
  
  return status; 
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	e16b      	b.n	80017f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001518:	2201      	movs	r2, #1
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	429a      	cmp	r2, r3
 8001532:	f040 815a 	bne.w	80017ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	2b01      	cmp	r3, #1
 8001540:	d005      	beq.n	800154e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154a:	2b02      	cmp	r3, #2
 800154c:	d130      	bne.n	80015b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001584:	2201      	movs	r2, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	f003 0201 	and.w	r2, r3, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d017      	beq.n	80015ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	2203      	movs	r2, #3
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d123      	bne.n	8001640 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	08da      	lsrs	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3208      	adds	r2, #8
 8001600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	220f      	movs	r2, #15
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	08da      	lsrs	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3208      	adds	r2, #8
 800163a:	69b9      	ldr	r1, [r7, #24]
 800163c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0203 	and.w	r2, r3, #3
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80b4 	beq.w	80017ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b60      	ldr	r3, [pc, #384]	; (8001808 <HAL_GPIO_Init+0x30c>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a5f      	ldr	r2, [pc, #380]	; (8001808 <HAL_GPIO_Init+0x30c>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b5d      	ldr	r3, [pc, #372]	; (8001808 <HAL_GPIO_Init+0x30c>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169e:	4a5b      	ldr	r2, [pc, #364]	; (800180c <HAL_GPIO_Init+0x310>)
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a52      	ldr	r2, [pc, #328]	; (8001810 <HAL_GPIO_Init+0x314>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d02b      	beq.n	8001722 <HAL_GPIO_Init+0x226>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a51      	ldr	r2, [pc, #324]	; (8001814 <HAL_GPIO_Init+0x318>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d025      	beq.n	800171e <HAL_GPIO_Init+0x222>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a50      	ldr	r2, [pc, #320]	; (8001818 <HAL_GPIO_Init+0x31c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d01f      	beq.n	800171a <HAL_GPIO_Init+0x21e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4f      	ldr	r2, [pc, #316]	; (800181c <HAL_GPIO_Init+0x320>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d019      	beq.n	8001716 <HAL_GPIO_Init+0x21a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4e      	ldr	r2, [pc, #312]	; (8001820 <HAL_GPIO_Init+0x324>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_GPIO_Init+0x216>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4d      	ldr	r2, [pc, #308]	; (8001824 <HAL_GPIO_Init+0x328>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00d      	beq.n	800170e <HAL_GPIO_Init+0x212>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4c      	ldr	r2, [pc, #304]	; (8001828 <HAL_GPIO_Init+0x32c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <HAL_GPIO_Init+0x20e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4b      	ldr	r2, [pc, #300]	; (800182c <HAL_GPIO_Init+0x330>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_GPIO_Init+0x20a>
 8001702:	2307      	movs	r3, #7
 8001704:	e00e      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001706:	2308      	movs	r3, #8
 8001708:	e00c      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800170a:	2306      	movs	r3, #6
 800170c:	e00a      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800170e:	2305      	movs	r3, #5
 8001710:	e008      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001712:	2304      	movs	r3, #4
 8001714:	e006      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001716:	2303      	movs	r3, #3
 8001718:	e004      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800171a:	2302      	movs	r3, #2
 800171c:	e002      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001722:	2300      	movs	r3, #0
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	f002 0203 	and.w	r2, r2, #3
 800172a:	0092      	lsls	r2, r2, #2
 800172c:	4093      	lsls	r3, r2
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001734:	4935      	ldr	r1, [pc, #212]	; (800180c <HAL_GPIO_Init+0x310>)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	3302      	adds	r3, #2
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001742:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <HAL_GPIO_Init+0x334>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001766:	4a32      	ldr	r2, [pc, #200]	; (8001830 <HAL_GPIO_Init+0x334>)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800176c:	4b30      	ldr	r3, [pc, #192]	; (8001830 <HAL_GPIO_Init+0x334>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001790:	4a27      	ldr	r2, [pc, #156]	; (8001830 <HAL_GPIO_Init+0x334>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001796:	4b26      	ldr	r3, [pc, #152]	; (8001830 <HAL_GPIO_Init+0x334>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ba:	4a1d      	ldr	r2, [pc, #116]	; (8001830 <HAL_GPIO_Init+0x334>)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <HAL_GPIO_Init+0x334>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017e4:	4a12      	ldr	r2, [pc, #72]	; (8001830 <HAL_GPIO_Init+0x334>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3301      	adds	r3, #1
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	2b0f      	cmp	r3, #15
 80017f4:	f67f ae90 	bls.w	8001518 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40013800 	.word	0x40013800
 8001810:	40020000 	.word	0x40020000
 8001814:	40020400 	.word	0x40020400
 8001818:	40020800 	.word	0x40020800
 800181c:	40020c00 	.word	0x40020c00
 8001820:	40021000 	.word	0x40021000
 8001824:	40021400 	.word	0x40021400
 8001828:	40021800 	.word	0x40021800
 800182c:	40021c00 	.word	0x40021c00
 8001830:	40013c00 	.word	0x40013c00

08001834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	807b      	strh	r3, [r7, #2]
 8001840:	4613      	mov	r3, r2
 8001842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001844:	787b      	ldrb	r3, [r7, #1]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001850:	e003      	b.n	800185a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001852:	887b      	ldrh	r3, [r7, #2]
 8001854:	041a      	lsls	r2, r3, #16
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	619a      	str	r2, [r3, #24]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001866:	b480      	push	{r7}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	460b      	mov	r3, r1
 8001870:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001878:	887a      	ldrh	r2, [r7, #2]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4013      	ands	r3, r2
 800187e:	041a      	lsls	r2, r3, #16
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	43d9      	mvns	r1, r3
 8001884:	887b      	ldrh	r3, [r7, #2]
 8001886:	400b      	ands	r3, r1
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	619a      	str	r2, [r3, #24]
}
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e12b      	b.n	8001b06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d106      	bne.n	80018c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f002 fbd2 	bl	800406c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2224      	movs	r2, #36	; 0x24
 80018cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0201 	bic.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001900:	f001 ff3e 	bl	8003780 <HAL_RCC_GetPCLK1Freq>
 8001904:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	4a81      	ldr	r2, [pc, #516]	; (8001b10 <HAL_I2C_Init+0x274>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d807      	bhi.n	8001920 <HAL_I2C_Init+0x84>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4a80      	ldr	r2, [pc, #512]	; (8001b14 <HAL_I2C_Init+0x278>)
 8001914:	4293      	cmp	r3, r2
 8001916:	bf94      	ite	ls
 8001918:	2301      	movls	r3, #1
 800191a:	2300      	movhi	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	e006      	b.n	800192e <HAL_I2C_Init+0x92>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4a7d      	ldr	r2, [pc, #500]	; (8001b18 <HAL_I2C_Init+0x27c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	bf94      	ite	ls
 8001928:	2301      	movls	r3, #1
 800192a:	2300      	movhi	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e0e7      	b.n	8001b06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4a78      	ldr	r2, [pc, #480]	; (8001b1c <HAL_I2C_Init+0x280>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	0c9b      	lsrs	r3, r3, #18
 8001940:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	430a      	orrs	r2, r1
 8001954:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4a6a      	ldr	r2, [pc, #424]	; (8001b10 <HAL_I2C_Init+0x274>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d802      	bhi.n	8001970 <HAL_I2C_Init+0xd4>
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	3301      	adds	r3, #1
 800196e:	e009      	b.n	8001984 <HAL_I2C_Init+0xe8>
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001976:	fb02 f303 	mul.w	r3, r2, r3
 800197a:	4a69      	ldr	r2, [pc, #420]	; (8001b20 <HAL_I2C_Init+0x284>)
 800197c:	fba2 2303 	umull	r2, r3, r2, r3
 8001980:	099b      	lsrs	r3, r3, #6
 8001982:	3301      	adds	r3, #1
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	430b      	orrs	r3, r1
 800198a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001996:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	495c      	ldr	r1, [pc, #368]	; (8001b10 <HAL_I2C_Init+0x274>)
 80019a0:	428b      	cmp	r3, r1
 80019a2:	d819      	bhi.n	80019d8 <HAL_I2C_Init+0x13c>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	1e59      	subs	r1, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80019b2:	1c59      	adds	r1, r3, #1
 80019b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019b8:	400b      	ands	r3, r1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00a      	beq.n	80019d4 <HAL_I2C_Init+0x138>
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1e59      	subs	r1, r3, #1
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80019cc:	3301      	adds	r3, #1
 80019ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d2:	e051      	b.n	8001a78 <HAL_I2C_Init+0x1dc>
 80019d4:	2304      	movs	r3, #4
 80019d6:	e04f      	b.n	8001a78 <HAL_I2C_Init+0x1dc>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d111      	bne.n	8001a04 <HAL_I2C_Init+0x168>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1e58      	subs	r0, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6859      	ldr	r1, [r3, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	440b      	add	r3, r1
 80019ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80019f2:	3301      	adds	r3, #1
 80019f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bf0c      	ite	eq
 80019fc:	2301      	moveq	r3, #1
 80019fe:	2300      	movne	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	e012      	b.n	8001a2a <HAL_I2C_Init+0x18e>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1e58      	subs	r0, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6859      	ldr	r1, [r3, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	0099      	lsls	r1, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf0c      	ite	eq
 8001a24:	2301      	moveq	r3, #1
 8001a26:	2300      	movne	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_I2C_Init+0x196>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e022      	b.n	8001a78 <HAL_I2C_Init+0x1dc>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10e      	bne.n	8001a58 <HAL_I2C_Init+0x1bc>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1e58      	subs	r0, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6859      	ldr	r1, [r3, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	440b      	add	r3, r1
 8001a48:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a56:	e00f      	b.n	8001a78 <HAL_I2C_Init+0x1dc>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1e58      	subs	r0, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6859      	ldr	r1, [r3, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	0099      	lsls	r1, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6e:	3301      	adds	r3, #1
 8001a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	6809      	ldr	r1, [r1, #0]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69da      	ldr	r2, [r3, #28]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001aa6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6911      	ldr	r1, [r2, #16]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68d2      	ldr	r2, [r2, #12]
 8001ab2:	4311      	orrs	r1, r2
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695a      	ldr	r2, [r3, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0201 	orr.w	r2, r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2220      	movs	r2, #32
 8001af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	000186a0 	.word	0x000186a0
 8001b14:	001e847f 	.word	0x001e847f
 8001b18:	003d08ff 	.word	0x003d08ff
 8001b1c:	431bde83 	.word	0x431bde83
 8001b20:	10624dd3 	.word	0x10624dd3

08001b24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	460b      	mov	r3, r1
 8001b32:	817b      	strh	r3, [r7, #10]
 8001b34:	4613      	mov	r3, r2
 8001b36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b38:	f7ff f82e 	bl	8000b98 <HAL_GetTick>
 8001b3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b20      	cmp	r3, #32
 8001b48:	f040 80e0 	bne.w	8001d0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2319      	movs	r3, #25
 8001b52:	2201      	movs	r2, #1
 8001b54:	4970      	ldr	r1, [pc, #448]	; (8001d18 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f964 	bl	8001e24 <I2C_WaitOnFlagUntilTimeout>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b62:	2302      	movs	r3, #2
 8001b64:	e0d3      	b.n	8001d0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_I2C_Master_Transmit+0x50>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e0cc      	b.n	8001d0e <HAL_I2C_Master_Transmit+0x1ea>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d007      	beq.n	8001b9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 0201 	orr.w	r2, r2, #1
 8001b98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ba8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2221      	movs	r2, #33	; 0x21
 8001bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2210      	movs	r2, #16
 8001bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	893a      	ldrh	r2, [r7, #8]
 8001bca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4a50      	ldr	r2, [pc, #320]	; (8001d1c <HAL_I2C_Master_Transmit+0x1f8>)
 8001bda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bdc:	8979      	ldrh	r1, [r7, #10]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	6a3a      	ldr	r2, [r7, #32]
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 f89c 	bl	8001d20 <I2C_MasterRequestWrite>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e08d      	b.n	8001d0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c08:	e066      	b.n	8001cd8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	6a39      	ldr	r1, [r7, #32]
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f9de 	bl	8001fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00d      	beq.n	8001c36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d107      	bne.n	8001c32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e06b      	b.n	8001d0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	781a      	ldrb	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d11b      	bne.n	8001cac <HAL_I2C_Master_Transmit+0x188>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d017      	beq.n	8001cac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	6a39      	ldr	r1, [r7, #32]
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f9ce 	bl	8002052 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00d      	beq.n	8001cd8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d107      	bne.n	8001cd4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e01a      	b.n	8001d0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d194      	bne.n	8001c0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e000      	b.n	8001d0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d0c:	2302      	movs	r3, #2
  }
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	00100002 	.word	0x00100002
 8001d1c:	ffff0000 	.word	0xffff0000

08001d20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	607a      	str	r2, [r7, #4]
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d006      	beq.n	8001d4a <I2C_MasterRequestWrite+0x2a>
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d003      	beq.n	8001d4a <I2C_MasterRequestWrite+0x2a>
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d48:	d108      	bne.n	8001d5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	e00b      	b.n	8001d74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d60:	2b12      	cmp	r3, #18
 8001d62:	d107      	bne.n	8001d74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 f84f 	bl	8001e24 <I2C_WaitOnFlagUntilTimeout>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00d      	beq.n	8001da8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d9a:	d103      	bne.n	8001da4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e035      	b.n	8001e14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001db0:	d108      	bne.n	8001dc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001db2:	897b      	ldrh	r3, [r7, #10]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dc0:	611a      	str	r2, [r3, #16]
 8001dc2:	e01b      	b.n	8001dfc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001dc4:	897b      	ldrh	r3, [r7, #10]
 8001dc6:	11db      	asrs	r3, r3, #7
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	f003 0306 	and.w	r3, r3, #6
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f063 030f 	orn	r3, r3, #15
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	490e      	ldr	r1, [pc, #56]	; (8001e1c <I2C_MasterRequestWrite+0xfc>)
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f875 	bl	8001ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e010      	b.n	8001e14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001df2:	897b      	ldrh	r3, [r7, #10]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4907      	ldr	r1, [pc, #28]	; (8001e20 <I2C_MasterRequestWrite+0x100>)
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 f865 	bl	8001ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	00010008 	.word	0x00010008
 8001e20:	00010002 	.word	0x00010002

08001e24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	4613      	mov	r3, r2
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e34:	e025      	b.n	8001e82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e3c:	d021      	beq.n	8001e82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e3e:	f7fe feab 	bl	8000b98 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d302      	bcc.n	8001e54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d116      	bne.n	8001e82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f043 0220 	orr.w	r2, r3, #32
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e023      	b.n	8001eca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	0c1b      	lsrs	r3, r3, #16
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d10d      	bne.n	8001ea8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	43da      	mvns	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	4013      	ands	r3, r2
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	bf0c      	ite	eq
 8001e9e:	2301      	moveq	r3, #1
 8001ea0:	2300      	movne	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	e00c      	b.n	8001ec2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf0c      	ite	eq
 8001eba:	2301      	moveq	r3, #1
 8001ebc:	2300      	movne	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d0b6      	beq.n	8001e36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ee0:	e051      	b.n	8001f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef0:	d123      	bne.n	8001f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2220      	movs	r2, #32
 8001f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f043 0204 	orr.w	r2, r3, #4
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e046      	b.n	8001fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f40:	d021      	beq.n	8001f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f42:	f7fe fe29 	bl	8000b98 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d302      	bcc.n	8001f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d116      	bne.n	8001f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2220      	movs	r2, #32
 8001f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f043 0220 	orr.w	r2, r3, #32
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e020      	b.n	8001fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	0c1b      	lsrs	r3, r3, #16
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d10c      	bne.n	8001faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	43da      	mvns	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	bf14      	ite	ne
 8001fa2:	2301      	movne	r3, #1
 8001fa4:	2300      	moveq	r3, #0
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	e00b      	b.n	8001fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	43da      	mvns	r2, r3
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	bf14      	ite	ne
 8001fbc:	2301      	movne	r3, #1
 8001fbe:	2300      	moveq	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d18d      	bne.n	8001ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fdc:	e02d      	b.n	800203a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f878 	bl	80020d4 <I2C_IsAcknowledgeFailed>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e02d      	b.n	800204a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ff4:	d021      	beq.n	800203a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff6:	f7fe fdcf 	bl	8000b98 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	429a      	cmp	r2, r3
 8002004:	d302      	bcc.n	800200c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d116      	bne.n	800203a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2220      	movs	r2, #32
 8002016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f043 0220 	orr.w	r2, r3, #32
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e007      	b.n	800204a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002044:	2b80      	cmp	r3, #128	; 0x80
 8002046:	d1ca      	bne.n	8001fde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800205e:	e02d      	b.n	80020bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 f837 	bl	80020d4 <I2C_IsAcknowledgeFailed>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e02d      	b.n	80020cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002076:	d021      	beq.n	80020bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002078:	f7fe fd8e 	bl	8000b98 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	429a      	cmp	r2, r3
 8002086:	d302      	bcc.n	800208e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d116      	bne.n	80020bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2220      	movs	r2, #32
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	f043 0220 	orr.w	r2, r3, #32
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e007      	b.n	80020cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d1ca      	bne.n	8002060 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ea:	d11b      	bne.n	8002124 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f043 0204 	orr.w	r2, r3, #4
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e128      	b.n	8002398 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a90      	ldr	r2, [pc, #576]	; (80023a0 <HAL_I2S_Init+0x26c>)
 800215e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f001 ffcb 	bl	80040fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2202      	movs	r2, #2
 800216a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800217c:	f023 030f 	bic.w	r3, r3, #15
 8002180:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2202      	movs	r2, #2
 8002188:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d060      	beq.n	8002254 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800219a:	2310      	movs	r3, #16
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e001      	b.n	80021a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80021a0:	2320      	movs	r3, #32
 80021a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	d802      	bhi.n	80021b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80021b2:	2001      	movs	r0, #1
 80021b4:	f001 fbda 	bl	800396c <HAL_RCCEx_GetPeriphCLKFreq>
 80021b8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c2:	d125      	bne.n	8002210 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d010      	beq.n	80021ee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	461a      	mov	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e8:	3305      	adds	r3, #5
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	e01f      	b.n	800222e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	461a      	mov	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	fbb2 f3f3 	udiv	r3, r2, r3
 800220a:	3305      	adds	r3, #5
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	e00e      	b.n	800222e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	fbb2 f2f3 	udiv	r2, r2, r3
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	461a      	mov	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	3305      	adds	r3, #5
 800222c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4a5c      	ldr	r2, [pc, #368]	; (80023a4 <HAL_I2S_Init+0x270>)
 8002232:	fba2 2303 	umull	r2, r3, r2, r3
 8002236:	08db      	lsrs	r3, r3, #3
 8002238:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	085b      	lsrs	r3, r3, #1
 800224a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	e003      	b.n	800225c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002254:	2302      	movs	r3, #2
 8002256:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d902      	bls.n	8002268 <HAL_I2S_Init+0x134>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	2bff      	cmp	r3, #255	; 0xff
 8002266:	d907      	bls.n	8002278 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226c:	f043 0210 	orr.w	r2, r3, #16
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e08f      	b.n	8002398 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	ea42 0103 	orr.w	r1, r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	430a      	orrs	r2, r1
 800228a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002296:	f023 030f 	bic.w	r3, r3, #15
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6851      	ldr	r1, [r2, #4]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6892      	ldr	r2, [r2, #8]
 80022a2:	4311      	orrs	r1, r2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	68d2      	ldr	r2, [r2, #12]
 80022a8:	4311      	orrs	r1, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6992      	ldr	r2, [r2, #24]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d161      	bne.n	8002388 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a38      	ldr	r2, [pc, #224]	; (80023a8 <HAL_I2S_Init+0x274>)
 80022c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a37      	ldr	r2, [pc, #220]	; (80023ac <HAL_I2S_Init+0x278>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d101      	bne.n	80022d8 <HAL_I2S_Init+0x1a4>
 80022d4:	4b36      	ldr	r3, [pc, #216]	; (80023b0 <HAL_I2S_Init+0x27c>)
 80022d6:	e001      	b.n	80022dc <HAL_I2S_Init+0x1a8>
 80022d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	4932      	ldr	r1, [pc, #200]	; (80023ac <HAL_I2S_Init+0x278>)
 80022e4:	428a      	cmp	r2, r1
 80022e6:	d101      	bne.n	80022ec <HAL_I2S_Init+0x1b8>
 80022e8:	4a31      	ldr	r2, [pc, #196]	; (80023b0 <HAL_I2S_Init+0x27c>)
 80022ea:	e001      	b.n	80022f0 <HAL_I2S_Init+0x1bc>
 80022ec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80022f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80022f4:	f023 030f 	bic.w	r3, r3, #15
 80022f8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a2b      	ldr	r2, [pc, #172]	; (80023ac <HAL_I2S_Init+0x278>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d101      	bne.n	8002308 <HAL_I2S_Init+0x1d4>
 8002304:	4b2a      	ldr	r3, [pc, #168]	; (80023b0 <HAL_I2S_Init+0x27c>)
 8002306:	e001      	b.n	800230c <HAL_I2S_Init+0x1d8>
 8002308:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800230c:	2202      	movs	r2, #2
 800230e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a25      	ldr	r2, [pc, #148]	; (80023ac <HAL_I2S_Init+0x278>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d101      	bne.n	800231e <HAL_I2S_Init+0x1ea>
 800231a:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <HAL_I2S_Init+0x27c>)
 800231c:	e001      	b.n	8002322 <HAL_I2S_Init+0x1ee>
 800231e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800232e:	d003      	beq.n	8002338 <HAL_I2S_Init+0x204>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d103      	bne.n	8002340 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	e001      	b.n	8002344 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002340:	2300      	movs	r3, #0
 8002342:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800234e:	4313      	orrs	r3, r2
 8002350:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002358:	4313      	orrs	r3, r2
 800235a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002362:	4313      	orrs	r3, r2
 8002364:	b29a      	uxth	r2, r3
 8002366:	897b      	ldrh	r3, [r7, #10]
 8002368:	4313      	orrs	r3, r2
 800236a:	b29b      	uxth	r3, r3
 800236c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002370:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a0d      	ldr	r2, [pc, #52]	; (80023ac <HAL_I2S_Init+0x278>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d101      	bne.n	8002380 <HAL_I2S_Init+0x24c>
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <HAL_I2S_Init+0x27c>)
 800237e:	e001      	b.n	8002384 <HAL_I2S_Init+0x250>
 8002380:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002384:	897a      	ldrh	r2, [r7, #10]
 8002386:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3720      	adds	r7, #32
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	080024ab 	.word	0x080024ab
 80023a4:	cccccccd 	.word	0xcccccccd
 80023a8:	080028d5 	.word	0x080028d5
 80023ac:	40003800 	.word	0x40003800
 80023b0:	40003400 	.word	0x40003400

080023b4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	881a      	ldrh	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	1c9a      	adds	r2, r3, #2
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10e      	bne.n	8002444 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002434:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ffb8 	bl	80023b4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	b292      	uxth	r2, r2
 8002460:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	1c9a      	adds	r2, r3, #2
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800247e:	b29b      	uxth	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10e      	bne.n	80024a2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002492:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ff93 	bl	80023c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d13a      	bne.n	800253c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d109      	bne.n	80024e4 <I2S_IRQHandler+0x3a>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024da:	2b40      	cmp	r3, #64	; 0x40
 80024dc:	d102      	bne.n	80024e4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ffb4 	bl	800244c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ea:	2b40      	cmp	r3, #64	; 0x40
 80024ec:	d126      	bne.n	800253c <I2S_IRQHandler+0x92>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0320 	and.w	r3, r3, #32
 80024f8:	2b20      	cmp	r3, #32
 80024fa:	d11f      	bne.n	800253c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800250a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800250c:	2300      	movs	r3, #0
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	f043 0202 	orr.w	r2, r3, #2
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ff50 	bl	80023dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b03      	cmp	r3, #3
 8002546:	d136      	bne.n	80025b6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b02      	cmp	r3, #2
 8002550:	d109      	bne.n	8002566 <I2S_IRQHandler+0xbc>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255c:	2b80      	cmp	r3, #128	; 0x80
 800255e:	d102      	bne.n	8002566 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff45 	bl	80023f0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b08      	cmp	r3, #8
 800256e:	d122      	bne.n	80025b6 <I2S_IRQHandler+0x10c>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b20      	cmp	r3, #32
 800257c:	d11b      	bne.n	80025b6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800258c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	f043 0204 	orr.w	r2, r3, #4
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff ff13 	bl	80023dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025b6:	bf00      	nop
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d002      	beq.n	80025ec <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 80025e6:	2302      	movs	r3, #2
 80025e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025ea:	e160      	b.n	80028ae <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80025f8:	887b      	ldrh	r3, [r7, #2]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e15a      	b.n	80028b8 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800260e:	2302      	movs	r3, #2
 8002610:	e152      	b.n	80028b8 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d002      	beq.n	800263e <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2b05      	cmp	r3, #5
 800263c:	d114      	bne.n	8002668 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002648:	887b      	ldrh	r3, [r7, #2]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 800265c:	887b      	ldrh	r3, [r7, #2]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	865a      	strh	r2, [r3, #50]	; 0x32
 8002666:	e00b      	b.n	8002680 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	887a      	ldrh	r2, [r7, #2]
 800266c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	887a      	ldrh	r2, [r7, #2]
 8002672:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	887a      	ldrh	r2, [r7, #2]
 8002678:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	887a      	ldrh	r2, [r7, #2]
 800267e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2205      	movs	r2, #5
 800268a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002692:	4a8b      	ldr	r2, [pc, #556]	; (80028c0 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002694:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269a:	4a8a      	ldr	r2, [pc, #552]	; (80028c4 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 800269c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a2:	4a89      	ldr	r2, [pc, #548]	; (80028c8 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80026a4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026aa:	2200      	movs	r2, #0
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b2:	2200      	movs	r2, #0
 80026b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	4a83      	ldr	r2, [pc, #524]	; (80028c8 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80026bc:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c8:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026d0:	d002      	beq.n	80026d8 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d16b      	bne.n	80027b0 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80026d8:	1d3b      	adds	r3, r7, #4
 80026da:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a79      	ldr	r2, [pc, #484]	; (80028cc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d101      	bne.n	80026ee <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 80026ea:	4b79      	ldr	r3, [pc, #484]	; (80028d0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80026ec:	e001      	b.n	80026f2 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 80026ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026f2:	330c      	adds	r3, #12
 80026f4:	4619      	mov	r1, r3
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80026fe:	b29b      	uxth	r3, r3
 8002700:	f7fe fc3a 	bl	8000f78 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a70      	ldr	r2, [pc, #448]	; (80028cc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d101      	bne.n	8002712 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 800270e:	4b70      	ldr	r3, [pc, #448]	; (80028d0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002710:	e001      	b.n	8002716 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002712:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	496b      	ldr	r1, [pc, #428]	; (80028cc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800271e:	428b      	cmp	r3, r1
 8002720:	d101      	bne.n	8002726 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002722:	4b6b      	ldr	r3, [pc, #428]	; (80028d0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002724:	e001      	b.n	800272a <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002726:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002730:	f107 0308 	add.w	r3, r7, #8
 8002734:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	6819      	ldr	r1, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	330c      	adds	r3, #12
 8002744:	461a      	mov	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274a:	b29b      	uxth	r3, r3
 800274c:	f7fe fc14 	bl	8000f78 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0202 	orr.w	r2, r2, #2
 800275e:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276e:	f000 809e 	beq.w	80028ae <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a55      	ldr	r2, [pc, #340]	; (80028cc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d101      	bne.n	8002780 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 800277c:	4b54      	ldr	r3, [pc, #336]	; (80028d0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800277e:	e001      	b.n	8002784 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8002780:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002784:	69da      	ldr	r2, [r3, #28]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4950      	ldr	r1, [pc, #320]	; (80028cc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800278c:	428b      	cmp	r3, r1
 800278e:	d101      	bne.n	8002794 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8002790:	4b4f      	ldr	r3, [pc, #316]	; (80028d0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002792:	e001      	b.n	8002798 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002794:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002798:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800279c:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69da      	ldr	r2, [r3, #28]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027ac:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80027ae:	e07e      	b.n	80028ae <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027be:	d10a      	bne.n	80027d6 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80027c0:	2300      	movs	r3, #0
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80027d6:	f107 0308 	add.w	r3, r7, #8
 80027da:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6819      	ldr	r1, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a38      	ldr	r2, [pc, #224]	; (80028cc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d101      	bne.n	80027f2 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 80027ee:	4b38      	ldr	r3, [pc, #224]	; (80028d0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80027f0:	e001      	b.n	80027f6 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 80027f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027f6:	330c      	adds	r3, #12
 80027f8:	461a      	mov	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f7fe fbba 	bl	8000f78 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a30      	ldr	r2, [pc, #192]	; (80028cc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d101      	bne.n	8002812 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 800280e:	4b30      	ldr	r3, [pc, #192]	; (80028d0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002810:	e001      	b.n	8002816 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002812:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	492b      	ldr	r1, [pc, #172]	; (80028cc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800281e:	428b      	cmp	r3, r1
 8002820:	d101      	bne.n	8002826 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002822:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002824:	e001      	b.n	800282a <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002826:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800282a:	f042 0202 	orr.w	r2, r2, #2
 800282e:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002830:	1d3b      	adds	r3, r7, #4
 8002832:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	330c      	adds	r3, #12
 800283e:	4619      	mov	r1, r3
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002848:	b29b      	uxth	r3, r3
 800284a:	f7fe fb95 	bl	8000f78 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0201 	orr.w	r2, r2, #1
 800285c:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286c:	d01e      	beq.n	80028ac <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a16      	ldr	r2, [pc, #88]	; (80028cc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d101      	bne.n	800287c <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002878:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800287a:	e001      	b.n	8002880 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 800287c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002880:	69da      	ldr	r2, [r3, #28]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4911      	ldr	r1, [pc, #68]	; (80028cc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002888:	428b      	cmp	r3, r1
 800288a:	d101      	bne.n	8002890 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800288e:	e001      	b.n	8002894 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002890:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002894:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002898:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69da      	ldr	r2, [r3, #28]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028a8:	61da      	str	r2, [r3, #28]
 80028aa:	e000      	b.n	80028ae <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 80028ac:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 80028b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3720      	adds	r7, #32
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	08002b7d 	.word	0x08002b7d
 80028c4:	08002b99 	.word	0x08002b99
 80028c8:	08002c71 	.word	0x08002c71
 80028cc:	40003800 	.word	0x40003800
 80028d0:	40003400 	.word	0x40003400

080028d4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4aa2      	ldr	r2, [pc, #648]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80028ee:	4ba2      	ldr	r3, [pc, #648]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80028f0:	e001      	b.n	80028f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80028f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a9b      	ldr	r2, [pc, #620]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d101      	bne.n	8002910 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800290c:	4b9a      	ldr	r3, [pc, #616]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800290e:	e001      	b.n	8002914 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002910:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002920:	d004      	beq.n	800292c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 8099 	bne.w	8002a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b02      	cmp	r3, #2
 8002934:	d107      	bne.n	8002946 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f9d5 	bl	8002cf0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b01      	cmp	r3, #1
 800294e:	d107      	bne.n	8002960 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fa78 	bl	8002e50 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	2b40      	cmp	r3, #64	; 0x40
 8002968:	d13a      	bne.n	80029e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d035      	beq.n	80029e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a7e      	ldr	r2, [pc, #504]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d101      	bne.n	8002982 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800297e:	4b7e      	ldr	r3, [pc, #504]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002980:	e001      	b.n	8002986 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002982:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4979      	ldr	r1, [pc, #484]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800298e:	428b      	cmp	r3, r1
 8002990:	d101      	bne.n	8002996 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002992:	4b79      	ldr	r3, [pc, #484]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002994:	e001      	b.n	800299a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002996:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800299a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800299e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	f043 0202 	orr.w	r2, r3, #2
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff fcfe 	bl	80023dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	f040 80be 	bne.w	8002b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f003 0320 	and.w	r3, r3, #32
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 80b8 	beq.w	8002b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a06:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a59      	ldr	r2, [pc, #356]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002a12:	4b59      	ldr	r3, [pc, #356]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a14:	e001      	b.n	8002a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002a16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4954      	ldr	r1, [pc, #336]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a22:	428b      	cmp	r3, r1
 8002a24:	d101      	bne.n	8002a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002a26:	4b54      	ldr	r3, [pc, #336]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a28:	e001      	b.n	8002a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002a2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a32:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f043 0204 	orr.w	r2, r3, #4
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff fcc0 	bl	80023dc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a5c:	e084      	b.n	8002b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d107      	bne.n	8002a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f96e 	bl	8002d54 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d107      	bne.n	8002a92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f9ad 	bl	8002dec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b40      	cmp	r3, #64	; 0x40
 8002a9a:	d12f      	bne.n	8002afc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d02a      	beq.n	8002afc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ab4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a2e      	ldr	r2, [pc, #184]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d101      	bne.n	8002ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002ac0:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ac2:	e001      	b.n	8002ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002ac4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4929      	ldr	r1, [pc, #164]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ad0:	428b      	cmp	r3, r1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002ad4:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ad6:	e001      	b.n	8002adc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002ad8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002adc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ae0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	f043 0202 	orr.w	r2, r3, #2
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff fc70 	bl	80023dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d131      	bne.n	8002b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d02c      	beq.n	8002b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d101      	bne.n	8002b1e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002b1a:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b1c:	e001      	b.n	8002b22 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002b1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4912      	ldr	r1, [pc, #72]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b2a:	428b      	cmp	r3, r1
 8002b2c:	d101      	bne.n	8002b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b30:	e001      	b.n	8002b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002b32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b3a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b4a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b58:	f043 0204 	orr.w	r2, r3, #4
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff fc3b 	bl	80023dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b66:	e000      	b.n	8002b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b68:	bf00      	nop
}
 8002b6a:	bf00      	nop
 8002b6c:	3720      	adds	r7, #32
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40003800 	.word	0x40003800
 8002b78:	40003400 	.word	0x40003400

08002b7c <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f001 f9d0 	bl	8003f30 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d155      	bne.n	8002c5a <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bbc:	d006      	beq.n	8002bcc <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d11e      	bne.n	8002c0a <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a25      	ldr	r2, [pc, #148]	; (8002c68 <I2SEx_TxRxDMACplt+0xd0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <I2SEx_TxRxDMACplt+0x42>
 8002bd6:	4b25      	ldr	r3, [pc, #148]	; (8002c6c <I2SEx_TxRxDMACplt+0xd4>)
 8002bd8:	e001      	b.n	8002bde <I2SEx_TxRxDMACplt+0x46>
 8002bda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4920      	ldr	r1, [pc, #128]	; (8002c68 <I2SEx_TxRxDMACplt+0xd0>)
 8002be6:	428b      	cmp	r3, r1
 8002be8:	d101      	bne.n	8002bee <I2SEx_TxRxDMACplt+0x56>
 8002bea:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <I2SEx_TxRxDMACplt+0xd4>)
 8002bec:	e001      	b.n	8002bf2 <I2SEx_TxRxDMACplt+0x5a>
 8002bee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bf2:	f022 0201 	bic.w	r2, r2, #1
 8002bf6:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0202 	bic.w	r2, r2, #2
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	e01d      	b.n	8002c46 <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <I2SEx_TxRxDMACplt+0xd0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d101      	bne.n	8002c28 <I2SEx_TxRxDMACplt+0x90>
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <I2SEx_TxRxDMACplt+0xd4>)
 8002c26:	e001      	b.n	8002c2c <I2SEx_TxRxDMACplt+0x94>
 8002c28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	490d      	ldr	r1, [pc, #52]	; (8002c68 <I2SEx_TxRxDMACplt+0xd0>)
 8002c34:	428b      	cmp	r3, r1
 8002c36:	d101      	bne.n	8002c3c <I2SEx_TxRxDMACplt+0xa4>
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <I2SEx_TxRxDMACplt+0xd4>)
 8002c3a:	e001      	b.n	8002c40 <I2SEx_TxRxDMACplt+0xa8>
 8002c3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c40:	f022 0202 	bic.w	r2, r2, #2
 8002c44:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f001 f99c 	bl	8003f98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40003800 	.word	0x40003800
 8002c6c:	40003400 	.word	0x40003400

08002c70 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0203 	bic.w	r2, r2, #3
 8002c8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a15      	ldr	r2, [pc, #84]	; (8002ce8 <I2SEx_TxRxDMAError+0x78>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d101      	bne.n	8002c9c <I2SEx_TxRxDMAError+0x2c>
 8002c98:	4b14      	ldr	r3, [pc, #80]	; (8002cec <I2SEx_TxRxDMAError+0x7c>)
 8002c9a:	e001      	b.n	8002ca0 <I2SEx_TxRxDMAError+0x30>
 8002c9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4910      	ldr	r1, [pc, #64]	; (8002ce8 <I2SEx_TxRxDMAError+0x78>)
 8002ca8:	428b      	cmp	r3, r1
 8002caa:	d101      	bne.n	8002cb0 <I2SEx_TxRxDMAError+0x40>
 8002cac:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <I2SEx_TxRxDMAError+0x7c>)
 8002cae:	e001      	b.n	8002cb4 <I2SEx_TxRxDMAError+0x44>
 8002cb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cb4:	f022 0203 	bic.w	r2, r2, #3
 8002cb8:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f043 0208 	orr.w	r2, r3, #8
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f7ff fb7e 	bl	80023dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40003800 	.word	0x40003800
 8002cec:	40003400 	.word	0x40003400

08002cf0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	1c99      	adds	r1, r3, #2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6251      	str	r1, [r2, #36]	; 0x24
 8002d02:	881a      	ldrh	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d113      	bne.n	8002d4a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d30:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d106      	bne.n	8002d4a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f001 f927 	bl	8003f98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	1c99      	adds	r1, r3, #2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6251      	str	r1, [r2, #36]	; 0x24
 8002d66:	8819      	ldrh	r1, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a1d      	ldr	r2, [pc, #116]	; (8002de4 <I2SEx_TxISR_I2SExt+0x90>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d101      	bne.n	8002d76 <I2SEx_TxISR_I2SExt+0x22>
 8002d72:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <I2SEx_TxISR_I2SExt+0x94>)
 8002d74:	e001      	b.n	8002d7a <I2SEx_TxISR_I2SExt+0x26>
 8002d76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d7a:	460a      	mov	r2, r1
 8002d7c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d121      	bne.n	8002dda <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <I2SEx_TxISR_I2SExt+0x90>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d101      	bne.n	8002da4 <I2SEx_TxISR_I2SExt+0x50>
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <I2SEx_TxISR_I2SExt+0x94>)
 8002da2:	e001      	b.n	8002da8 <I2SEx_TxISR_I2SExt+0x54>
 8002da4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	490d      	ldr	r1, [pc, #52]	; (8002de4 <I2SEx_TxISR_I2SExt+0x90>)
 8002db0:	428b      	cmp	r3, r1
 8002db2:	d101      	bne.n	8002db8 <I2SEx_TxISR_I2SExt+0x64>
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <I2SEx_TxISR_I2SExt+0x94>)
 8002db6:	e001      	b.n	8002dbc <I2SEx_TxISR_I2SExt+0x68>
 8002db8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dc0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d106      	bne.n	8002dda <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f001 f8df 	bl	8003f98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40003800 	.word	0x40003800
 8002de8:	40003400 	.word	0x40003400

08002dec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68d8      	ldr	r0, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	1c99      	adds	r1, r3, #2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002e04:	b282      	uxth	r2, r0
 8002e06:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d113      	bne.n	8002e48 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e2e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f001 f8a8 	bl	8003f98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e48:	bf00      	nop
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a20      	ldr	r2, [pc, #128]	; (8002ee0 <I2SEx_RxISR_I2SExt+0x90>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d101      	bne.n	8002e66 <I2SEx_RxISR_I2SExt+0x16>
 8002e62:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <I2SEx_RxISR_I2SExt+0x94>)
 8002e64:	e001      	b.n	8002e6a <I2SEx_RxISR_I2SExt+0x1a>
 8002e66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e6a:	68d8      	ldr	r0, [r3, #12]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	1c99      	adds	r1, r3, #2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002e76:	b282      	uxth	r2, r0
 8002e78:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d121      	bne.n	8002ed6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <I2SEx_RxISR_I2SExt+0x90>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d101      	bne.n	8002ea0 <I2SEx_RxISR_I2SExt+0x50>
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <I2SEx_RxISR_I2SExt+0x94>)
 8002e9e:	e001      	b.n	8002ea4 <I2SEx_RxISR_I2SExt+0x54>
 8002ea0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	490d      	ldr	r1, [pc, #52]	; (8002ee0 <I2SEx_RxISR_I2SExt+0x90>)
 8002eac:	428b      	cmp	r3, r1
 8002eae:	d101      	bne.n	8002eb4 <I2SEx_RxISR_I2SExt+0x64>
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <I2SEx_RxISR_I2SExt+0x94>)
 8002eb2:	e001      	b.n	8002eb8 <I2SEx_RxISR_I2SExt+0x68>
 8002eb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eb8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ebc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d106      	bne.n	8002ed6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f001 f861 	bl	8003f98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40003800 	.word	0x40003800
 8002ee4:	40003400 	.word	0x40003400

08002ee8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e264      	b.n	80033c4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d075      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f06:	4ba3      	ldr	r3, [pc, #652]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d00c      	beq.n	8002f2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f12:	4ba0      	ldr	r3, [pc, #640]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d112      	bne.n	8002f44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f1e:	4b9d      	ldr	r3, [pc, #628]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f2a:	d10b      	bne.n	8002f44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2c:	4b99      	ldr	r3, [pc, #612]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d05b      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x108>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d157      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e23f      	b.n	80033c4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4c:	d106      	bne.n	8002f5c <HAL_RCC_OscConfig+0x74>
 8002f4e:	4b91      	ldr	r3, [pc, #580]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a90      	ldr	r2, [pc, #576]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e01d      	b.n	8002f98 <HAL_RCC_OscConfig+0xb0>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f64:	d10c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x98>
 8002f66:	4b8b      	ldr	r3, [pc, #556]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a8a      	ldr	r2, [pc, #552]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	4b88      	ldr	r3, [pc, #544]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a87      	ldr	r2, [pc, #540]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	e00b      	b.n	8002f98 <HAL_RCC_OscConfig+0xb0>
 8002f80:	4b84      	ldr	r3, [pc, #528]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a83      	ldr	r2, [pc, #524]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	4b81      	ldr	r3, [pc, #516]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a80      	ldr	r2, [pc, #512]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d013      	beq.n	8002fc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fd fdfa 	bl	8000b98 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7fd fdf6 	bl	8000b98 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	; 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e204      	b.n	80033c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4b76      	ldr	r3, [pc, #472]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0xc0>
 8002fc6:	e014      	b.n	8002ff2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7fd fde6 	bl	8000b98 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd0:	f7fd fde2 	bl	8000b98 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	; 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e1f0      	b.n	80033c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe2:	4b6c      	ldr	r3, [pc, #432]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0xe8>
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d063      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ffe:	4b65      	ldr	r3, [pc, #404]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300a:	4b62      	ldr	r3, [pc, #392]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003012:	2b08      	cmp	r3, #8
 8003014:	d11c      	bne.n	8003050 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003016:	4b5f      	ldr	r3, [pc, #380]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d116      	bne.n	8003050 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003022:	4b5c      	ldr	r3, [pc, #368]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <HAL_RCC_OscConfig+0x152>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d001      	beq.n	800303a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e1c4      	b.n	80033c4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303a:	4b56      	ldr	r3, [pc, #344]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4952      	ldr	r1, [pc, #328]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304e:	e03a      	b.n	80030c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d020      	beq.n	800309a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003058:	4b4f      	ldr	r3, [pc, #316]	; (8003198 <HAL_RCC_OscConfig+0x2b0>)
 800305a:	2201      	movs	r2, #1
 800305c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305e:	f7fd fd9b 	bl	8000b98 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003066:	f7fd fd97 	bl	8000b98 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e1a5      	b.n	80033c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003078:	4b46      	ldr	r3, [pc, #280]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003084:	4b43      	ldr	r3, [pc, #268]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4940      	ldr	r1, [pc, #256]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8003094:	4313      	orrs	r3, r2
 8003096:	600b      	str	r3, [r1, #0]
 8003098:	e015      	b.n	80030c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800309a:	4b3f      	ldr	r3, [pc, #252]	; (8003198 <HAL_RCC_OscConfig+0x2b0>)
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a0:	f7fd fd7a 	bl	8000b98 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a8:	f7fd fd76 	bl	8000b98 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e184      	b.n	80033c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ba:	4b36      	ldr	r3, [pc, #216]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d030      	beq.n	8003134 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d016      	beq.n	8003108 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030da:	4b30      	ldr	r3, [pc, #192]	; (800319c <HAL_RCC_OscConfig+0x2b4>)
 80030dc:	2201      	movs	r2, #1
 80030de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e0:	f7fd fd5a 	bl	8000b98 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e8:	f7fd fd56 	bl	8000b98 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e164      	b.n	80033c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030fa:	4b26      	ldr	r3, [pc, #152]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0x200>
 8003106:	e015      	b.n	8003134 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003108:	4b24      	ldr	r3, [pc, #144]	; (800319c <HAL_RCC_OscConfig+0x2b4>)
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310e:	f7fd fd43 	bl	8000b98 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003116:	f7fd fd3f 	bl	8000b98 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e14d      	b.n	80033c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003128:	4b1a      	ldr	r3, [pc, #104]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 800312a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f0      	bne.n	8003116 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 80a0 	beq.w	8003282 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003142:	2300      	movs	r3, #0
 8003144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003146:	4b13      	ldr	r3, [pc, #76]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10f      	bne.n	8003172 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 800315c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003160:	6413      	str	r3, [r2, #64]	; 0x40
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316e:	2301      	movs	r3, #1
 8003170:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003172:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_RCC_OscConfig+0x2b8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317a:	2b00      	cmp	r3, #0
 800317c:	d121      	bne.n	80031c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800317e:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <HAL_RCC_OscConfig+0x2b8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a07      	ldr	r2, [pc, #28]	; (80031a0 <HAL_RCC_OscConfig+0x2b8>)
 8003184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800318a:	f7fd fd05 	bl	8000b98 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003190:	e011      	b.n	80031b6 <HAL_RCC_OscConfig+0x2ce>
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800
 8003198:	42470000 	.word	0x42470000
 800319c:	42470e80 	.word	0x42470e80
 80031a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a4:	f7fd fcf8 	bl	8000b98 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e106      	b.n	80033c4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b6:	4b85      	ldr	r3, [pc, #532]	; (80033cc <HAL_RCC_OscConfig+0x4e4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d106      	bne.n	80031d8 <HAL_RCC_OscConfig+0x2f0>
 80031ca:	4b81      	ldr	r3, [pc, #516]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	4a80      	ldr	r2, [pc, #512]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	6713      	str	r3, [r2, #112]	; 0x70
 80031d6:	e01c      	b.n	8003212 <HAL_RCC_OscConfig+0x32a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b05      	cmp	r3, #5
 80031de:	d10c      	bne.n	80031fa <HAL_RCC_OscConfig+0x312>
 80031e0:	4b7b      	ldr	r3, [pc, #492]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 80031e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e4:	4a7a      	ldr	r2, [pc, #488]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 80031e6:	f043 0304 	orr.w	r3, r3, #4
 80031ea:	6713      	str	r3, [r2, #112]	; 0x70
 80031ec:	4b78      	ldr	r3, [pc, #480]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 80031ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f0:	4a77      	ldr	r2, [pc, #476]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	6713      	str	r3, [r2, #112]	; 0x70
 80031f8:	e00b      	b.n	8003212 <HAL_RCC_OscConfig+0x32a>
 80031fa:	4b75      	ldr	r3, [pc, #468]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	4a74      	ldr	r2, [pc, #464]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	6713      	str	r3, [r2, #112]	; 0x70
 8003206:	4b72      	ldr	r3, [pc, #456]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320a:	4a71      	ldr	r2, [pc, #452]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 800320c:	f023 0304 	bic.w	r3, r3, #4
 8003210:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d015      	beq.n	8003246 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321a:	f7fd fcbd 	bl	8000b98 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003220:	e00a      	b.n	8003238 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003222:	f7fd fcb9 	bl	8000b98 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e0c5      	b.n	80033c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003238:	4b65      	ldr	r3, [pc, #404]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 800323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0ee      	beq.n	8003222 <HAL_RCC_OscConfig+0x33a>
 8003244:	e014      	b.n	8003270 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003246:	f7fd fca7 	bl	8000b98 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324c:	e00a      	b.n	8003264 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800324e:	f7fd fca3 	bl	8000b98 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f241 3288 	movw	r2, #5000	; 0x1388
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e0af      	b.n	80033c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003264:	4b5a      	ldr	r3, [pc, #360]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1ee      	bne.n	800324e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003270:	7dfb      	ldrb	r3, [r7, #23]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d105      	bne.n	8003282 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003276:	4b56      	ldr	r3, [pc, #344]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	4a55      	ldr	r2, [pc, #340]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 800327c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003280:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 809b 	beq.w	80033c2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800328c:	4b50      	ldr	r3, [pc, #320]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 030c 	and.w	r3, r3, #12
 8003294:	2b08      	cmp	r3, #8
 8003296:	d05c      	beq.n	8003352 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d141      	bne.n	8003324 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a0:	4b4c      	ldr	r3, [pc, #304]	; (80033d4 <HAL_RCC_OscConfig+0x4ec>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a6:	f7fd fc77 	bl	8000b98 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ae:	f7fd fc73 	bl	8000b98 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e081      	b.n	80033c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c0:	4b43      	ldr	r3, [pc, #268]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f0      	bne.n	80032ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69da      	ldr	r2, [r3, #28]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	019b      	lsls	r3, r3, #6
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	085b      	lsrs	r3, r3, #1
 80032e4:	3b01      	subs	r3, #1
 80032e6:	041b      	lsls	r3, r3, #16
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ee:	061b      	lsls	r3, r3, #24
 80032f0:	4937      	ldr	r1, [pc, #220]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f6:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <HAL_RCC_OscConfig+0x4ec>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7fd fc4c 	bl	8000b98 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003304:	f7fd fc48 	bl	8000b98 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e056      	b.n	80033c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003316:	4b2e      	ldr	r3, [pc, #184]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x41c>
 8003322:	e04e      	b.n	80033c2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003324:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <HAL_RCC_OscConfig+0x4ec>)
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332a:	f7fd fc35 	bl	8000b98 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003332:	f7fd fc31 	bl	8000b98 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e03f      	b.n	80033c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003344:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f0      	bne.n	8003332 <HAL_RCC_OscConfig+0x44a>
 8003350:	e037      	b.n	80033c2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e032      	b.n	80033c4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800335e:	4b1c      	ldr	r3, [pc, #112]	; (80033d0 <HAL_RCC_OscConfig+0x4e8>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d028      	beq.n	80033be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d121      	bne.n	80033be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d11a      	bne.n	80033be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800338e:	4013      	ands	r3, r2
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003394:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003396:	4293      	cmp	r3, r2
 8003398:	d111      	bne.n	80033be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	3b01      	subs	r3, #1
 80033a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d107      	bne.n	80033be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d001      	beq.n	80033c2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40007000 	.word	0x40007000
 80033d0:	40023800 	.word	0x40023800
 80033d4:	42470060 	.word	0x42470060

080033d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0cc      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033ec:	4b68      	ldr	r3, [pc, #416]	; (8003590 <HAL_RCC_ClockConfig+0x1b8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d90c      	bls.n	8003414 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fa:	4b65      	ldr	r3, [pc, #404]	; (8003590 <HAL_RCC_ClockConfig+0x1b8>)
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003402:	4b63      	ldr	r3, [pc, #396]	; (8003590 <HAL_RCC_ClockConfig+0x1b8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d001      	beq.n	8003414 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0b8      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d020      	beq.n	8003462 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800342c:	4b59      	ldr	r3, [pc, #356]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	4a58      	ldr	r2, [pc, #352]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003436:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003444:	4b53      	ldr	r3, [pc, #332]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4a52      	ldr	r2, [pc, #328]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800344e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003450:	4b50      	ldr	r3, [pc, #320]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	494d      	ldr	r1, [pc, #308]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	4313      	orrs	r3, r2
 8003460:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d044      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d107      	bne.n	8003486 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003476:	4b47      	ldr	r3, [pc, #284]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d119      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e07f      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d003      	beq.n	8003496 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003492:	2b03      	cmp	r3, #3
 8003494:	d107      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003496:	4b3f      	ldr	r3, [pc, #252]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e06f      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a6:	4b3b      	ldr	r3, [pc, #236]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e067      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034b6:	4b37      	ldr	r3, [pc, #220]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f023 0203 	bic.w	r2, r3, #3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	4934      	ldr	r1, [pc, #208]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c8:	f7fd fb66 	bl	8000b98 <HAL_GetTick>
 80034cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ce:	e00a      	b.n	80034e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d0:	f7fd fb62 	bl	8000b98 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f241 3288 	movw	r2, #5000	; 0x1388
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e04f      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e6:	4b2b      	ldr	r3, [pc, #172]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 020c 	and.w	r2, r3, #12
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d1eb      	bne.n	80034d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034f8:	4b25      	ldr	r3, [pc, #148]	; (8003590 <HAL_RCC_ClockConfig+0x1b8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d20c      	bcs.n	8003520 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4b22      	ldr	r3, [pc, #136]	; (8003590 <HAL_RCC_ClockConfig+0x1b8>)
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800350e:	4b20      	ldr	r3, [pc, #128]	; (8003590 <HAL_RCC_ClockConfig+0x1b8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e032      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800352c:	4b19      	ldr	r3, [pc, #100]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4916      	ldr	r1, [pc, #88]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	4313      	orrs	r3, r2
 800353c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d009      	beq.n	800355e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800354a:	4b12      	ldr	r3, [pc, #72]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	490e      	ldr	r1, [pc, #56]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800355e:	f000 f821 	bl	80035a4 <HAL_RCC_GetSysClockFreq>
 8003562:	4602      	mov	r2, r0
 8003564:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	091b      	lsrs	r3, r3, #4
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	490a      	ldr	r1, [pc, #40]	; (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 8003570:	5ccb      	ldrb	r3, [r1, r3]
 8003572:	fa22 f303 	lsr.w	r3, r2, r3
 8003576:	4a09      	ldr	r2, [pc, #36]	; (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800357a:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <HAL_RCC_ClockConfig+0x1c8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f7fd fac6 	bl	8000b10 <HAL_InitTick>

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40023c00 	.word	0x40023c00
 8003594:	40023800 	.word	0x40023800
 8003598:	0800487c 	.word	0x0800487c
 800359c:	20000008 	.word	0x20000008
 80035a0:	20000000 	.word	0x20000000

080035a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	2300      	movs	r3, #0
 80035b6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035bc:	4b67      	ldr	r3, [pc, #412]	; (800375c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 030c 	and.w	r3, r3, #12
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d00d      	beq.n	80035e4 <HAL_RCC_GetSysClockFreq+0x40>
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	f200 80bd 	bhi.w	8003748 <HAL_RCC_GetSysClockFreq+0x1a4>
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x34>
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d003      	beq.n	80035de <HAL_RCC_GetSysClockFreq+0x3a>
 80035d6:	e0b7      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035d8:	4b61      	ldr	r3, [pc, #388]	; (8003760 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035da:	60bb      	str	r3, [r7, #8]
       break;
 80035dc:	e0b7      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035de:	4b61      	ldr	r3, [pc, #388]	; (8003764 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80035e0:	60bb      	str	r3, [r7, #8]
      break;
 80035e2:	e0b4      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035e4:	4b5d      	ldr	r3, [pc, #372]	; (800375c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ee:	4b5b      	ldr	r3, [pc, #364]	; (800375c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d04d      	beq.n	8003696 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fa:	4b58      	ldr	r3, [pc, #352]	; (800375c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	099b      	lsrs	r3, r3, #6
 8003600:	461a      	mov	r2, r3
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	f240 10ff 	movw	r0, #511	; 0x1ff
 800360a:	f04f 0100 	mov.w	r1, #0
 800360e:	ea02 0800 	and.w	r8, r2, r0
 8003612:	ea03 0901 	and.w	r9, r3, r1
 8003616:	4640      	mov	r0, r8
 8003618:	4649      	mov	r1, r9
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	014b      	lsls	r3, r1, #5
 8003624:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003628:	0142      	lsls	r2, r0, #5
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	ebb0 0008 	subs.w	r0, r0, r8
 8003632:	eb61 0109 	sbc.w	r1, r1, r9
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	018b      	lsls	r3, r1, #6
 8003640:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003644:	0182      	lsls	r2, r0, #6
 8003646:	1a12      	subs	r2, r2, r0
 8003648:	eb63 0301 	sbc.w	r3, r3, r1
 800364c:	f04f 0000 	mov.w	r0, #0
 8003650:	f04f 0100 	mov.w	r1, #0
 8003654:	00d9      	lsls	r1, r3, #3
 8003656:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800365a:	00d0      	lsls	r0, r2, #3
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	eb12 0208 	adds.w	r2, r2, r8
 8003664:	eb43 0309 	adc.w	r3, r3, r9
 8003668:	f04f 0000 	mov.w	r0, #0
 800366c:	f04f 0100 	mov.w	r1, #0
 8003670:	0259      	lsls	r1, r3, #9
 8003672:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003676:	0250      	lsls	r0, r2, #9
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	461a      	mov	r2, r3
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	f7fd f8a4 	bl	80007d4 <__aeabi_uldivmod>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4613      	mov	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	e04a      	b.n	800372c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003696:	4b31      	ldr	r3, [pc, #196]	; (800375c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	099b      	lsrs	r3, r3, #6
 800369c:	461a      	mov	r2, r3
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036a6:	f04f 0100 	mov.w	r1, #0
 80036aa:	ea02 0400 	and.w	r4, r2, r0
 80036ae:	ea03 0501 	and.w	r5, r3, r1
 80036b2:	4620      	mov	r0, r4
 80036b4:	4629      	mov	r1, r5
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	014b      	lsls	r3, r1, #5
 80036c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036c4:	0142      	lsls	r2, r0, #5
 80036c6:	4610      	mov	r0, r2
 80036c8:	4619      	mov	r1, r3
 80036ca:	1b00      	subs	r0, r0, r4
 80036cc:	eb61 0105 	sbc.w	r1, r1, r5
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	018b      	lsls	r3, r1, #6
 80036da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036de:	0182      	lsls	r2, r0, #6
 80036e0:	1a12      	subs	r2, r2, r0
 80036e2:	eb63 0301 	sbc.w	r3, r3, r1
 80036e6:	f04f 0000 	mov.w	r0, #0
 80036ea:	f04f 0100 	mov.w	r1, #0
 80036ee:	00d9      	lsls	r1, r3, #3
 80036f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036f4:	00d0      	lsls	r0, r2, #3
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	1912      	adds	r2, r2, r4
 80036fc:	eb45 0303 	adc.w	r3, r5, r3
 8003700:	f04f 0000 	mov.w	r0, #0
 8003704:	f04f 0100 	mov.w	r1, #0
 8003708:	0299      	lsls	r1, r3, #10
 800370a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800370e:	0290      	lsls	r0, r2, #10
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4610      	mov	r0, r2
 8003716:	4619      	mov	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	461a      	mov	r2, r3
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	f7fd f858 	bl	80007d4 <__aeabi_uldivmod>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4613      	mov	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	0c1b      	lsrs	r3, r3, #16
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	3301      	adds	r3, #1
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	60bb      	str	r3, [r7, #8]
      break;
 8003746:	e002      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800374a:	60bb      	str	r3, [r7, #8]
      break;
 800374c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800374e:	68bb      	ldr	r3, [r7, #8]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800375a:	bf00      	nop
 800375c:	40023800 	.word	0x40023800
 8003760:	00f42400 	.word	0x00f42400
 8003764:	007a1200 	.word	0x007a1200

08003768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800376c:	4b03      	ldr	r3, [pc, #12]	; (800377c <HAL_RCC_GetHCLKFreq+0x14>)
 800376e:	681b      	ldr	r3, [r3, #0]
}
 8003770:	4618      	mov	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	20000008 	.word	0x20000008

08003780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003784:	f7ff fff0 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 8003788:	4602      	mov	r2, r0
 800378a:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	0a9b      	lsrs	r3, r3, #10
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	4903      	ldr	r1, [pc, #12]	; (80037a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003796:	5ccb      	ldrb	r3, [r1, r3]
 8003798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800379c:	4618      	mov	r0, r3
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40023800 	.word	0x40023800
 80037a4:	0800488c 	.word	0x0800488c

080037a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d035      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037d0:	4b62      	ldr	r3, [pc, #392]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037d6:	f7fd f9df 	bl	8000b98 <HAL_GetTick>
 80037da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037dc:	e008      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80037de:	f7fd f9db 	bl	8000b98 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e0b0      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037f0:	4b5b      	ldr	r3, [pc, #364]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f0      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	019a      	lsls	r2, r3, #6
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	071b      	lsls	r3, r3, #28
 8003808:	4955      	ldr	r1, [pc, #340]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003810:	4b52      	ldr	r3, [pc, #328]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003812:	2201      	movs	r2, #1
 8003814:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003816:	f7fd f9bf 	bl	8000b98 <HAL_GetTick>
 800381a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800381c:	e008      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800381e:	f7fd f9bb 	bl	8000b98 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e090      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003830:	4b4b      	ldr	r3, [pc, #300]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0f0      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8083 	beq.w	8003950 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	4b44      	ldr	r3, [pc, #272]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	4a43      	ldr	r2, [pc, #268]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003858:	6413      	str	r3, [r2, #64]	; 0x40
 800385a:	4b41      	ldr	r3, [pc, #260]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003866:	4b3f      	ldr	r3, [pc, #252]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a3e      	ldr	r2, [pc, #248]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800386c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003870:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003872:	f7fd f991 	bl	8000b98 <HAL_GetTick>
 8003876:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003878:	e008      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800387a:	f7fd f98d 	bl	8000b98 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e062      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800388c:	4b35      	ldr	r3, [pc, #212]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f0      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003898:	4b31      	ldr	r3, [pc, #196]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d02f      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d028      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038b6:	4b2a      	ldr	r3, [pc, #168]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038c0:	4b29      	ldr	r3, [pc, #164]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038c6:	4b28      	ldr	r3, [pc, #160]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80038cc:	4a24      	ldr	r2, [pc, #144]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80038d2:	4b23      	ldr	r3, [pc, #140]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d114      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80038de:	f7fd f95b 	bl	8000b98 <HAL_GetTick>
 80038e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e4:	e00a      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e6:	f7fd f957 	bl	8000b98 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d901      	bls.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e02a      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038fc:	4b18      	ldr	r3, [pc, #96]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0ee      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003910:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003914:	d10d      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003916:	4b12      	ldr	r3, [pc, #72]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392a:	490d      	ldr	r1, [pc, #52]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800392c:	4313      	orrs	r3, r2
 800392e:	608b      	str	r3, [r1, #8]
 8003930:	e005      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003932:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003938:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800393c:	6093      	str	r3, [r2, #8]
 800393e:	4b08      	ldr	r3, [pc, #32]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003940:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394a:	4905      	ldr	r1, [pc, #20]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800394c:	4313      	orrs	r3, r2
 800394e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	42470068 	.word	0x42470068
 8003960:	40023800 	.word	0x40023800
 8003964:	40007000 	.word	0x40007000
 8003968:	42470e40 	.word	0x42470e40

0800396c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d13e      	bne.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800398a:	4b23      	ldr	r3, [pc, #140]	; (8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d12f      	bne.n	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80039a0:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80039a2:	617b      	str	r3, [r7, #20]
          break;
 80039a4:	e02f      	b.n	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80039a6:	4b1c      	ldr	r3, [pc, #112]	; (8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b2:	d108      	bne.n	80039c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80039b4:	4b18      	ldr	r3, [pc, #96]	; (8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039bc:	4a18      	ldr	r2, [pc, #96]	; (8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80039be:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	e007      	b.n	80039d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80039c6:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039ce:	4a15      	ldr	r2, [pc, #84]	; (8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80039d6:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80039d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039dc:	099b      	lsrs	r3, r3, #6
 80039de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	fb02 f303 	mul.w	r3, r2, r3
 80039e8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80039ea:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80039ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f0:	0f1b      	lsrs	r3, r3, #28
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	617b      	str	r3, [r7, #20]
          break;
 80039fe:	e002      	b.n	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
          break;
 8003a04:	bf00      	nop
        }
      }
      break;
 8003a06:	bf00      	nop
    }
  }
  return frequency;
 8003a08:	697b      	ldr	r3, [r7, #20]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	00bb8000 	.word	0x00bb8000
 8003a20:	007a1200 	.word	0x007a1200
 8003a24:	00f42400 	.word	0x00f42400

08003a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a28:	b590      	push	{r4, r7, lr}
 8003a2a:	b093      	sub	sp, #76	; 0x4c
 8003a2c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a2e:	f7fd f84d 	bl	8000acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a32:	f000 f849 	bl	8003ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a36:	f000 f94f 	bl	8003cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003a3a:	f000 f925 	bl	8003c88 <MX_DMA_Init>
  MX_I2S2_Init();
 8003a3e:	f000 f8f3 	bl	8003c28 <MX_I2S2_Init>
  MX_I2C1_Init();
 8003a42:	f000 f8c3 	bl	8003bcc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  WM8731_init(hi2c1);
 8003a46:	4c1c      	ldr	r4, [pc, #112]	; (8003ab8 <main+0x90>)
 8003a48:	4668      	mov	r0, sp
 8003a4a:	f104 0310 	add.w	r3, r4, #16
 8003a4e:	2244      	movs	r2, #68	; 0x44
 8003a50:	4619      	mov	r1, r3
 8003a52:	f000 feed 	bl	8004830 <memcpy>
 8003a56:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003a5a:	f000 fcab 	bl	80043b4 <WM8731_init>
  WM8731_inputSelect(hi2c1, AUDIO_INPUT_MIC);
 8003a5e:	4c16      	ldr	r4, [pc, #88]	; (8003ab8 <main+0x90>)
 8003a60:	2301      	movs	r3, #1
 8003a62:	9311      	str	r3, [sp, #68]	; 0x44
 8003a64:	4668      	mov	r0, sp
 8003a66:	f104 0310 	add.w	r3, r4, #16
 8003a6a:	2244      	movs	r2, #68	; 0x44
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	f000 fedf 	bl	8004830 <memcpy>
 8003a72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003a76:	f000 fe15 	bl	80046a4 <WM8731_inputSelect>
  WM8731_volumeInteger(hi2c1, 110);
 8003a7a:	4c0f      	ldr	r4, [pc, #60]	; (8003ab8 <main+0x90>)
 8003a7c:	236e      	movs	r3, #110	; 0x6e
 8003a7e:	9311      	str	r3, [sp, #68]	; 0x44
 8003a80:	4668      	mov	r0, sp
 8003a82:	f104 0310 	add.w	r3, r4, #16
 8003a86:	2244      	movs	r2, #68	; 0x44
 8003a88:	4619      	mov	r1, r3
 8003a8a:	f000 fed1 	bl	8004830 <memcpy>
 8003a8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003a92:	f000 fdcb 	bl	800462c <WM8731_volumeInteger>

  /* Clear audio buffers */
  memset(tx_buffer, 0, sizeof(tx_buffer));
 8003a96:	2210      	movs	r2, #16
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4808      	ldr	r0, [pc, #32]	; (8003abc <main+0x94>)
 8003a9c:	f000 fed6 	bl	800484c <memset>
  memset(rx_buffer, 0, sizeof(rx_buffer));
 8003aa0:	2210      	movs	r2, #16
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4806      	ldr	r0, [pc, #24]	; (8003ac0 <main+0x98>)
 8003aa6:	f000 fed1 	bl	800484c <memset>

  HAL_I2SEx_TransmitReceive_DMA(&hi2s2, tx_buffer, rx_buffer, I2S_BUFFER_SIZE/2);
 8003aaa:	2304      	movs	r3, #4
 8003aac:	4a04      	ldr	r2, [pc, #16]	; (8003ac0 <main+0x98>)
 8003aae:	4903      	ldr	r1, [pc, #12]	; (8003abc <main+0x94>)
 8003ab0:	4804      	ldr	r0, [pc, #16]	; (8003ac4 <main+0x9c>)
 8003ab2:	f7fe fd85 	bl	80025c0 <HAL_I2SEx_TransmitReceive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003ab6:	e7fe      	b.n	8003ab6 <main+0x8e>
 8003ab8:	2000002c 	.word	0x2000002c
 8003abc:	20000090 	.word	0x20000090
 8003ac0:	20000080 	.word	0x20000080
 8003ac4:	20000160 	.word	0x20000160

08003ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b098      	sub	sp, #96	; 0x60
 8003acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ace:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ad2:	2230      	movs	r2, #48	; 0x30
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 feb8 	bl	800484c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003adc:	f107 031c 	add.w	r3, r7, #28
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003aec:	f107 030c 	add.w	r3, r7, #12
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	609a      	str	r2, [r3, #8]
 8003af8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	60bb      	str	r3, [r7, #8]
 8003afe:	4b31      	ldr	r3, [pc, #196]	; (8003bc4 <SystemClock_Config+0xfc>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	4a30      	ldr	r2, [pc, #192]	; (8003bc4 <SystemClock_Config+0xfc>)
 8003b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b08:	6413      	str	r3, [r2, #64]	; 0x40
 8003b0a:	4b2e      	ldr	r3, [pc, #184]	; (8003bc4 <SystemClock_Config+0xfc>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b12:	60bb      	str	r3, [r7, #8]
 8003b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b16:	2300      	movs	r3, #0
 8003b18:	607b      	str	r3, [r7, #4]
 8003b1a:	4b2b      	ldr	r3, [pc, #172]	; (8003bc8 <SystemClock_Config+0x100>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a2a      	ldr	r2, [pc, #168]	; (8003bc8 <SystemClock_Config+0x100>)
 8003b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	4b28      	ldr	r3, [pc, #160]	; (8003bc8 <SystemClock_Config+0x100>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b32:	2301      	movs	r3, #1
 8003b34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b44:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003b46:	2308      	movs	r3, #8
 8003b48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003b4a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003b4e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b50:	2302      	movs	r3, #2
 8003b52:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003b54:	2307      	movs	r3, #7
 8003b56:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff f9c3 	bl	8002ee8 <HAL_RCC_OscConfig>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003b68:	f000 fa50 	bl	800400c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b6c:	230f      	movs	r3, #15
 8003b6e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b70:	2302      	movs	r3, #2
 8003b72:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b74:	2300      	movs	r3, #0
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003b84:	f107 031c 	add.w	r3, r7, #28
 8003b88:	2105      	movs	r1, #5
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff fc24 	bl	80033d8 <HAL_RCC_ClockConfig>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8003b96:	f000 fa39 	bl	800400c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8003b9e:	23c0      	movs	r3, #192	; 0xc0
 8003ba0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ba6:	f107 030c 	add.w	r3, r7, #12
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff fdfc 	bl	80037a8 <HAL_RCCEx_PeriphCLKConfig>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8003bb6:	f000 fa29 	bl	800400c <Error_Handler>
  }
}
 8003bba:	bf00      	nop
 8003bbc:	3760      	adds	r7, #96	; 0x60
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40007000 	.word	0x40007000

08003bcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003bd0:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <MX_I2C1_Init+0x50>)
 8003bd2:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <MX_I2C1_Init+0x54>)
 8003bd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003bd6:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <MX_I2C1_Init+0x50>)
 8003bd8:	4a12      	ldr	r2, [pc, #72]	; (8003c24 <MX_I2C1_Init+0x58>)
 8003bda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003bdc:	4b0f      	ldr	r3, [pc, #60]	; (8003c1c <MX_I2C1_Init+0x50>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003be2:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <MX_I2C1_Init+0x50>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003be8:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <MX_I2C1_Init+0x50>)
 8003bea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <MX_I2C1_Init+0x50>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003bf6:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <MX_I2C1_Init+0x50>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bfc:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <MX_I2C1_Init+0x50>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <MX_I2C1_Init+0x50>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c08:	4804      	ldr	r0, [pc, #16]	; (8003c1c <MX_I2C1_Init+0x50>)
 8003c0a:	f7fd fe47 	bl	800189c <HAL_I2C_Init>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003c14:	f000 f9fa 	bl	800400c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c18:	bf00      	nop
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	2000002c 	.word	0x2000002c
 8003c20:	40005400 	.word	0x40005400
 8003c24:	000186a0 	.word	0x000186a0

08003c28 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8003c2c:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <MX_I2S2_Init+0x54>)
 8003c2e:	4a14      	ldr	r2, [pc, #80]	; (8003c80 <MX_I2S2_Init+0x58>)
 8003c30:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <MX_I2S2_Init+0x54>)
 8003c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c38:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8003c3a:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <MX_I2S2_Init+0x54>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8003c40:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <MX_I2S2_Init+0x54>)
 8003c42:	2203      	movs	r2, #3
 8003c44:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <MX_I2S2_Init+0x54>)
 8003c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c4c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <MX_I2S2_Init+0x54>)
 8003c50:	4a0c      	ldr	r2, [pc, #48]	; (8003c84 <MX_I2S2_Init+0x5c>)
 8003c52:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8003c54:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <MX_I2S2_Init+0x54>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8003c5a:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <MX_I2S2_Init+0x54>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	61da      	str	r2, [r3, #28]

  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8003c60:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <MX_I2S2_Init+0x54>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	621a      	str	r2, [r3, #32]

  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8003c66:	4805      	ldr	r0, [pc, #20]	; (8003c7c <MX_I2S2_Init+0x54>)
 8003c68:	f7fe fa64 	bl	8002134 <HAL_I2S_Init>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8003c72:	f000 f9cb 	bl	800400c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000160 	.word	0x20000160
 8003c80:	40003800 	.word	0x40003800
 8003c84:	00017700 	.word	0x00017700

08003c88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c8e:	2300      	movs	r3, #0
 8003c90:	607b      	str	r3, [r7, #4]
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <MX_DMA_Init+0x4c>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	4a0f      	ldr	r2, [pc, #60]	; (8003cd4 <MX_DMA_Init+0x4c>)
 8003c98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <MX_DMA_Init+0x4c>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca6:	607b      	str	r3, [r7, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003caa:	2200      	movs	r2, #0
 8003cac:	2100      	movs	r1, #0
 8003cae:	200e      	movs	r0, #14
 8003cb0:	f7fd f87d 	bl	8000dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003cb4:	200e      	movs	r0, #14
 8003cb6:	f7fd f896 	bl	8000de6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	200f      	movs	r0, #15
 8003cc0:	f7fd f875 	bl	8000dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003cc4:	200f      	movs	r0, #15
 8003cc6:	f7fd f88e 	bl	8000de6 <HAL_NVIC_EnableIRQ>

}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40023800 	.word	0x40023800

08003cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08c      	sub	sp, #48	; 0x30
 8003cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cde:	f107 031c 	add.w	r3, r7, #28
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	605a      	str	r2, [r3, #4]
 8003ce8:	609a      	str	r2, [r3, #8]
 8003cea:	60da      	str	r2, [r3, #12]
 8003cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	4b89      	ldr	r3, [pc, #548]	; (8003f18 <MX_GPIO_Init+0x240>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	4a88      	ldr	r2, [pc, #544]	; (8003f18 <MX_GPIO_Init+0x240>)
 8003cf8:	f043 0310 	orr.w	r3, r3, #16
 8003cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfe:	4b86      	ldr	r3, [pc, #536]	; (8003f18 <MX_GPIO_Init+0x240>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	f003 0310 	and.w	r3, r3, #16
 8003d06:	61bb      	str	r3, [r7, #24]
 8003d08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	4b82      	ldr	r3, [pc, #520]	; (8003f18 <MX_GPIO_Init+0x240>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	4a81      	ldr	r2, [pc, #516]	; (8003f18 <MX_GPIO_Init+0x240>)
 8003d14:	f043 0304 	orr.w	r3, r3, #4
 8003d18:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1a:	4b7f      	ldr	r3, [pc, #508]	; (8003f18 <MX_GPIO_Init+0x240>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	4b7b      	ldr	r3, [pc, #492]	; (8003f18 <MX_GPIO_Init+0x240>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	4a7a      	ldr	r2, [pc, #488]	; (8003f18 <MX_GPIO_Init+0x240>)
 8003d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d34:	6313      	str	r3, [r2, #48]	; 0x30
 8003d36:	4b78      	ldr	r3, [pc, #480]	; (8003f18 <MX_GPIO_Init+0x240>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	613b      	str	r3, [r7, #16]
 8003d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	4b74      	ldr	r3, [pc, #464]	; (8003f18 <MX_GPIO_Init+0x240>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	4a73      	ldr	r2, [pc, #460]	; (8003f18 <MX_GPIO_Init+0x240>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6313      	str	r3, [r2, #48]	; 0x30
 8003d52:	4b71      	ldr	r3, [pc, #452]	; (8003f18 <MX_GPIO_Init+0x240>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	4b6d      	ldr	r3, [pc, #436]	; (8003f18 <MX_GPIO_Init+0x240>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	4a6c      	ldr	r2, [pc, #432]	; (8003f18 <MX_GPIO_Init+0x240>)
 8003d68:	f043 0302 	orr.w	r3, r3, #2
 8003d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d6e:	4b6a      	ldr	r3, [pc, #424]	; (8003f18 <MX_GPIO_Init+0x240>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	60bb      	str	r3, [r7, #8]
 8003d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	4b66      	ldr	r3, [pc, #408]	; (8003f18 <MX_GPIO_Init+0x240>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	4a65      	ldr	r2, [pc, #404]	; (8003f18 <MX_GPIO_Init+0x240>)
 8003d84:	f043 0308 	orr.w	r3, r3, #8
 8003d88:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8a:	4b63      	ldr	r3, [pc, #396]	; (8003f18 <MX_GPIO_Init+0x240>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	607b      	str	r3, [r7, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8003d96:	2200      	movs	r2, #0
 8003d98:	2108      	movs	r1, #8
 8003d9a:	4860      	ldr	r0, [pc, #384]	; (8003f1c <MX_GPIO_Init+0x244>)
 8003d9c:	f7fd fd4a 	bl	8001834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8003da0:	2200      	movs	r2, #0
 8003da2:	2101      	movs	r1, #1
 8003da4:	485e      	ldr	r0, [pc, #376]	; (8003f20 <MX_GPIO_Init+0x248>)
 8003da6:	f7fd fd45 	bl	8001834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8003daa:	2200      	movs	r2, #0
 8003dac:	f24f 0110 	movw	r1, #61456	; 0xf010
 8003db0:	485c      	ldr	r0, [pc, #368]	; (8003f24 <MX_GPIO_Init+0x24c>)
 8003db2:	f7fd fd3f 	bl	8001834 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003db6:	2308      	movs	r3, #8
 8003db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003dc6:	f107 031c 	add.w	r3, r7, #28
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4853      	ldr	r0, [pc, #332]	; (8003f1c <MX_GPIO_Init+0x244>)
 8003dce:	f7fd fb95 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dde:	2300      	movs	r3, #0
 8003de0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003de2:	f107 031c 	add.w	r3, r7, #28
 8003de6:	4619      	mov	r1, r3
 8003de8:	484d      	ldr	r0, [pc, #308]	; (8003f20 <MX_GPIO_Init+0x248>)
 8003dea:	f7fd fb87 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003dee:	2301      	movs	r3, #1
 8003df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003df2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003df6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dfc:	f107 031c 	add.w	r3, r7, #28
 8003e00:	4619      	mov	r1, r3
 8003e02:	4849      	ldr	r0, [pc, #292]	; (8003f28 <MX_GPIO_Init+0x250>)
 8003e04:	f7fd fb7a 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e08:	2310      	movs	r3, #16
 8003e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e14:	2300      	movs	r3, #0
 8003e16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003e18:	2306      	movs	r3, #6
 8003e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e1c:	f107 031c 	add.w	r3, r7, #28
 8003e20:	4619      	mov	r1, r3
 8003e22:	4841      	ldr	r0, [pc, #260]	; (8003f28 <MX_GPIO_Init+0x250>)
 8003e24:	f7fd fb6a 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003e28:	23e0      	movs	r3, #224	; 0xe0
 8003e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e34:	2303      	movs	r3, #3
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e38:	2305      	movs	r3, #5
 8003e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e3c:	f107 031c 	add.w	r3, r7, #28
 8003e40:	4619      	mov	r1, r3
 8003e42:	4839      	ldr	r0, [pc, #228]	; (8003f28 <MX_GPIO_Init+0x250>)
 8003e44:	f7fd fb5a 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e48:	2304      	movs	r3, #4
 8003e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e54:	f107 031c 	add.w	r3, r7, #28
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4834      	ldr	r0, [pc, #208]	; (8003f2c <MX_GPIO_Init+0x254>)
 8003e5c:	f7fd fb4e 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8003e60:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003e64:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e66:	2301      	movs	r3, #1
 8003e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e72:	f107 031c 	add.w	r3, r7, #28
 8003e76:	4619      	mov	r1, r3
 8003e78:	482a      	ldr	r0, [pc, #168]	; (8003f24 <MX_GPIO_Init+0x24c>)
 8003e7a:	f7fd fb3f 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8003e7e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e84:	2302      	movs	r3, #2
 8003e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003e90:	2306      	movs	r3, #6
 8003e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e94:	f107 031c 	add.w	r3, r7, #28
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4821      	ldr	r0, [pc, #132]	; (8003f20 <MX_GPIO_Init+0x248>)
 8003e9c:	f7fd fb2e 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eae:	f107 031c 	add.w	r3, r7, #28
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	481c      	ldr	r0, [pc, #112]	; (8003f28 <MX_GPIO_Init+0x250>)
 8003eb6:	f7fd fb21 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003eba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003ecc:	230a      	movs	r3, #10
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed0:	f107 031c 	add.w	r3, r7, #28
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4814      	ldr	r0, [pc, #80]	; (8003f28 <MX_GPIO_Init+0x250>)
 8003ed8:	f7fd fb10 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003edc:	2320      	movs	r3, #32
 8003ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ee8:	f107 031c 	add.w	r3, r7, #28
 8003eec:	4619      	mov	r1, r3
 8003eee:	480d      	ldr	r0, [pc, #52]	; (8003f24 <MX_GPIO_Init+0x24c>)
 8003ef0:	f7fd fb04 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ef8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f02:	f107 031c 	add.w	r3, r7, #28
 8003f06:	4619      	mov	r1, r3
 8003f08:	4804      	ldr	r0, [pc, #16]	; (8003f1c <MX_GPIO_Init+0x244>)
 8003f0a:	f7fd faf7 	bl	80014fc <HAL_GPIO_Init>

}
 8003f0e:	bf00      	nop
 8003f10:	3730      	adds	r7, #48	; 0x30
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40020800 	.word	0x40020800
 8003f24:	40020c00 	.word	0x40020c00
 8003f28:	40020000 	.word	0x40020000
 8003f2c:	40020400 	.word	0x40020400

08003f30 <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]

	// Restore signed 24 bit sample from 16-bit buffers
	int left_sample = (int) (rx_buffer[0] << 16) | rx_buffer[1];
 8003f38:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <HAL_I2SEx_TxRxHalfCpltCallback+0x60>)
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	041b      	lsls	r3, r3, #16
 8003f3e:	4a14      	ldr	r2, [pc, #80]	; (8003f90 <HAL_I2SEx_TxRxHalfCpltCallback+0x60>)
 8003f40:	8852      	ldrh	r2, [r2, #2]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]
	int right_sample = (int) (rx_buffer[2] << 16) | rx_buffer[3];
 8003f46:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <HAL_I2SEx_TxRxHalfCpltCallback+0x60>)
 8003f48:	889b      	ldrh	r3, [r3, #4]
 8003f4a:	041b      	lsls	r3, r3, #16
 8003f4c:	4a10      	ldr	r2, [pc, #64]	; (8003f90 <HAL_I2SEx_TxRxHalfCpltCallback+0x60>)
 8003f4e:	88d2      	ldrh	r2, [r2, #6]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60bb      	str	r3, [r7, #8]

	// Sum to mono
	left_sample = right_sample + left_sample;
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4413      	add	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
	right_sample = left_sample;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	60bb      	str	r3, [r7, #8]

	// Restore to buffer
	tx_buffer[0] = (left_sample >> 16) & 0xFFFF;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	0c1b      	lsrs	r3, r3, #16
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_I2SEx_TxRxHalfCpltCallback+0x64>)
 8003f68:	801a      	strh	r2, [r3, #0]
	tx_buffer[1] = left_sample & 0xFFFF;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <HAL_I2SEx_TxRxHalfCpltCallback+0x64>)
 8003f70:	805a      	strh	r2, [r3, #2]
	tx_buffer[2] = (right_sample >> 16) & 0xFFFF;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	0c1b      	lsrs	r3, r3, #16
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <HAL_I2SEx_TxRxHalfCpltCallback+0x64>)
 8003f7a:	809a      	strh	r2, [r3, #4]
	tx_buffer[3] = right_sample & 0xFFFF;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <HAL_I2SEx_TxRxHalfCpltCallback+0x64>)
 8003f82:	80da      	strh	r2, [r3, #6]
}
 8003f84:	bf00      	nop
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	20000080 	.word	0x20000080
 8003f94:	20000090 	.word	0x20000090

08003f98 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

	// Restore signed 24 bit sample from 16-bit buffers
	int left_sample = (int) (rx_buffer[4] << 16) | rx_buffer[5];
 8003fa0:	4b17      	ldr	r3, [pc, #92]	; (8004000 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 8003fa2:	891b      	ldrh	r3, [r3, #8]
 8003fa4:	041b      	lsls	r3, r3, #16
 8003fa6:	4a16      	ldr	r2, [pc, #88]	; (8004000 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 8003fa8:	8952      	ldrh	r2, [r2, #10]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]
	int right_sample = (int) (rx_buffer[6] << 16) | rx_buffer[7];
 8003fae:	4b14      	ldr	r3, [pc, #80]	; (8004000 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 8003fb0:	899b      	ldrh	r3, [r3, #12]
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	4a12      	ldr	r2, [pc, #72]	; (8004000 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 8003fb6:	89d2      	ldrh	r2, [r2, #14]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]

	// Sum to mono
	left_sample = right_sample + left_sample;
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
	right_sample = left_sample;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	60bb      	str	r3, [r7, #8]

	// Restore to buffer
	tx_buffer[4] = (left_sample >> 16) & 0xFFFF;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	0c1b      	lsrs	r3, r3, #16
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8003fd0:	811a      	strh	r2, [r3, #8]
	tx_buffer[5] = left_sample & 0xFFFF;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8003fd8:	815a      	strh	r2, [r3, #10]
	tx_buffer[6] = (right_sample >> 16) & 0xFFFF;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	0c1b      	lsrs	r3, r3, #16
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	4b08      	ldr	r3, [pc, #32]	; (8004004 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8003fe2:	819a      	strh	r2, [r3, #12]
	tx_buffer[7] = right_sample & 0xFFFF;
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	4b06      	ldr	r3, [pc, #24]	; (8004004 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8003fea:	81da      	strh	r2, [r3, #14]

	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_GPIO_Pin);
 8003fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ff0:	4805      	ldr	r0, [pc, #20]	; (8004008 <HAL_I2SEx_TxRxCpltCallback+0x70>)
 8003ff2:	f7fd fc38 	bl	8001866 <HAL_GPIO_TogglePin>
}
 8003ff6:	bf00      	nop
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000080 	.word	0x20000080
 8004004:	20000090 	.word	0x20000090
 8004008:	40020c00 	.word	0x40020c00

0800400c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
	...

0800401c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	607b      	str	r3, [r7, #4]
 8004026:	4b10      	ldr	r3, [pc, #64]	; (8004068 <HAL_MspInit+0x4c>)
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	4a0f      	ldr	r2, [pc, #60]	; (8004068 <HAL_MspInit+0x4c>)
 800402c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004030:	6453      	str	r3, [r2, #68]	; 0x44
 8004032:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <HAL_MspInit+0x4c>)
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800403a:	607b      	str	r3, [r7, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800403e:	2300      	movs	r3, #0
 8004040:	603b      	str	r3, [r7, #0]
 8004042:	4b09      	ldr	r3, [pc, #36]	; (8004068 <HAL_MspInit+0x4c>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	4a08      	ldr	r2, [pc, #32]	; (8004068 <HAL_MspInit+0x4c>)
 8004048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800404c:	6413      	str	r3, [r2, #64]	; 0x40
 800404e:	4b06      	ldr	r3, [pc, #24]	; (8004068 <HAL_MspInit+0x4c>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800405a:	2007      	movs	r0, #7
 800405c:	f7fc fe9c 	bl	8000d98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004060:	bf00      	nop
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40023800 	.word	0x40023800

0800406c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08a      	sub	sp, #40	; 0x28
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004074:	f107 0314 	add.w	r3, r7, #20
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	605a      	str	r2, [r3, #4]
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a19      	ldr	r2, [pc, #100]	; (80040f0 <HAL_I2C_MspInit+0x84>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d12c      	bne.n	80040e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	4b18      	ldr	r3, [pc, #96]	; (80040f4 <HAL_I2C_MspInit+0x88>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	4a17      	ldr	r2, [pc, #92]	; (80040f4 <HAL_I2C_MspInit+0x88>)
 8004098:	f043 0302 	orr.w	r3, r3, #2
 800409c:	6313      	str	r3, [r2, #48]	; 0x30
 800409e:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <HAL_I2C_MspInit+0x88>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80040aa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80040ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040b0:	2312      	movs	r3, #18
 80040b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040b4:	2301      	movs	r3, #1
 80040b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b8:	2303      	movs	r3, #3
 80040ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040bc:	2304      	movs	r3, #4
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040c0:	f107 0314 	add.w	r3, r7, #20
 80040c4:	4619      	mov	r1, r3
 80040c6:	480c      	ldr	r0, [pc, #48]	; (80040f8 <HAL_I2C_MspInit+0x8c>)
 80040c8:	f7fd fa18 	bl	80014fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	4b08      	ldr	r3, [pc, #32]	; (80040f4 <HAL_I2C_MspInit+0x88>)
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	4a07      	ldr	r2, [pc, #28]	; (80040f4 <HAL_I2C_MspInit+0x88>)
 80040d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040da:	6413      	str	r3, [r2, #64]	; 0x40
 80040dc:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <HAL_I2C_MspInit+0x88>)
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80040e8:	bf00      	nop
 80040ea:	3728      	adds	r7, #40	; 0x28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40005400 	.word	0x40005400
 80040f4:	40023800 	.word	0x40023800
 80040f8:	40020400 	.word	0x40020400

080040fc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08a      	sub	sp, #40	; 0x28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004104:	f107 0314 	add.w	r3, r7, #20
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	609a      	str	r2, [r3, #8]
 8004110:	60da      	str	r2, [r3, #12]
 8004112:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a62      	ldr	r2, [pc, #392]	; (80042a4 <HAL_I2S_MspInit+0x1a8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	f040 80be 	bne.w	800429c <HAL_I2S_MspInit+0x1a0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004120:	2300      	movs	r3, #0
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	4b60      	ldr	r3, [pc, #384]	; (80042a8 <HAL_I2S_MspInit+0x1ac>)
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	4a5f      	ldr	r2, [pc, #380]	; (80042a8 <HAL_I2S_MspInit+0x1ac>)
 800412a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800412e:	6413      	str	r3, [r2, #64]	; 0x40
 8004130:	4b5d      	ldr	r3, [pc, #372]	; (80042a8 <HAL_I2S_MspInit+0x1ac>)
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	4b59      	ldr	r3, [pc, #356]	; (80042a8 <HAL_I2S_MspInit+0x1ac>)
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	4a58      	ldr	r2, [pc, #352]	; (80042a8 <HAL_I2S_MspInit+0x1ac>)
 8004146:	f043 0304 	orr.w	r3, r3, #4
 800414a:	6313      	str	r3, [r2, #48]	; 0x30
 800414c:	4b56      	ldr	r3, [pc, #344]	; (80042a8 <HAL_I2S_MspInit+0x1ac>)
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004158:	2300      	movs	r3, #0
 800415a:	60bb      	str	r3, [r7, #8]
 800415c:	4b52      	ldr	r3, [pc, #328]	; (80042a8 <HAL_I2S_MspInit+0x1ac>)
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	4a51      	ldr	r2, [pc, #324]	; (80042a8 <HAL_I2S_MspInit+0x1ac>)
 8004162:	f043 0302 	orr.w	r3, r3, #2
 8004166:	6313      	str	r3, [r2, #48]	; 0x30
 8004168:	4b4f      	ldr	r3, [pc, #316]	; (80042a8 <HAL_I2S_MspInit+0x1ac>)
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	60bb      	str	r3, [r7, #8]
 8004172:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004174:	2304      	movs	r3, #4
 8004176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004178:	2302      	movs	r3, #2
 800417a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417c:	2300      	movs	r3, #0
 800417e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004180:	2300      	movs	r3, #0
 8004182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8004184:	2306      	movs	r3, #6
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004188:	f107 0314 	add.w	r3, r7, #20
 800418c:	4619      	mov	r1, r3
 800418e:	4847      	ldr	r0, [pc, #284]	; (80042ac <HAL_I2S_MspInit+0x1b0>)
 8004190:	f7fd f9b4 	bl	80014fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8004194:	2348      	movs	r3, #72	; 0x48
 8004196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004198:	2302      	movs	r3, #2
 800419a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419c:	2300      	movs	r3, #0
 800419e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041a0:	2300      	movs	r3, #0
 80041a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80041a4:	2305      	movs	r3, #5
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a8:	f107 0314 	add.w	r3, r7, #20
 80041ac:	4619      	mov	r1, r3
 80041ae:	483f      	ldr	r0, [pc, #252]	; (80042ac <HAL_I2S_MspInit+0x1b0>)
 80041b0:	f7fd f9a4 	bl	80014fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80041b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80041b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ba:	2302      	movs	r3, #2
 80041bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c2:	2300      	movs	r3, #0
 80041c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80041c6:	2305      	movs	r3, #5
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ca:	f107 0314 	add.w	r3, r7, #20
 80041ce:	4619      	mov	r1, r3
 80041d0:	4837      	ldr	r0, [pc, #220]	; (80042b0 <HAL_I2S_MspInit+0x1b4>)
 80041d2:	f7fd f993 	bl	80014fc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 80041d6:	4b37      	ldr	r3, [pc, #220]	; (80042b4 <HAL_I2S_MspInit+0x1b8>)
 80041d8:	4a37      	ldr	r2, [pc, #220]	; (80042b8 <HAL_I2S_MspInit+0x1bc>)
 80041da:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 80041dc:	4b35      	ldr	r3, [pc, #212]	; (80042b4 <HAL_I2S_MspInit+0x1b8>)
 80041de:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80041e2:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041e4:	4b33      	ldr	r3, [pc, #204]	; (80042b4 <HAL_I2S_MspInit+0x1b8>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041ea:	4b32      	ldr	r3, [pc, #200]	; (80042b4 <HAL_I2S_MspInit+0x1b8>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041f0:	4b30      	ldr	r3, [pc, #192]	; (80042b4 <HAL_I2S_MspInit+0x1b8>)
 80041f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041f6:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041f8:	4b2e      	ldr	r3, [pc, #184]	; (80042b4 <HAL_I2S_MspInit+0x1b8>)
 80041fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041fe:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004200:	4b2c      	ldr	r3, [pc, #176]	; (80042b4 <HAL_I2S_MspInit+0x1b8>)
 8004202:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004206:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8004208:	4b2a      	ldr	r3, [pc, #168]	; (80042b4 <HAL_I2S_MspInit+0x1b8>)
 800420a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800420e:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004210:	4b28      	ldr	r3, [pc, #160]	; (80042b4 <HAL_I2S_MspInit+0x1b8>)
 8004212:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004216:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004218:	4b26      	ldr	r3, [pc, #152]	; (80042b4 <HAL_I2S_MspInit+0x1b8>)
 800421a:	2200      	movs	r2, #0
 800421c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 800421e:	4825      	ldr	r0, [pc, #148]	; (80042b4 <HAL_I2S_MspInit+0x1b8>)
 8004220:	f7fc fdfc 	bl	8000e1c <HAL_DMA_Init>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 800422a:	f7ff feef 	bl	800400c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a20      	ldr	r2, [pc, #128]	; (80042b4 <HAL_I2S_MspInit+0x1b8>)
 8004232:	63da      	str	r2, [r3, #60]	; 0x3c
 8004234:	4a1f      	ldr	r2, [pc, #124]	; (80042b4 <HAL_I2S_MspInit+0x1b8>)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800423a:	4b20      	ldr	r3, [pc, #128]	; (80042bc <HAL_I2S_MspInit+0x1c0>)
 800423c:	4a20      	ldr	r2, [pc, #128]	; (80042c0 <HAL_I2S_MspInit+0x1c4>)
 800423e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8004240:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <HAL_I2S_MspInit+0x1c0>)
 8004242:	2200      	movs	r2, #0
 8004244:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004246:	4b1d      	ldr	r3, [pc, #116]	; (80042bc <HAL_I2S_MspInit+0x1c0>)
 8004248:	2240      	movs	r2, #64	; 0x40
 800424a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800424c:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <HAL_I2S_MspInit+0x1c0>)
 800424e:	2200      	movs	r2, #0
 8004250:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004252:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <HAL_I2S_MspInit+0x1c0>)
 8004254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004258:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800425a:	4b18      	ldr	r3, [pc, #96]	; (80042bc <HAL_I2S_MspInit+0x1c0>)
 800425c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004260:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004262:	4b16      	ldr	r3, [pc, #88]	; (80042bc <HAL_I2S_MspInit+0x1c0>)
 8004264:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004268:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800426a:	4b14      	ldr	r3, [pc, #80]	; (80042bc <HAL_I2S_MspInit+0x1c0>)
 800426c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004270:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004272:	4b12      	ldr	r3, [pc, #72]	; (80042bc <HAL_I2S_MspInit+0x1c0>)
 8004274:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004278:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800427a:	4b10      	ldr	r3, [pc, #64]	; (80042bc <HAL_I2S_MspInit+0x1c0>)
 800427c:	2200      	movs	r2, #0
 800427e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004280:	480e      	ldr	r0, [pc, #56]	; (80042bc <HAL_I2S_MspInit+0x1c0>)
 8004282:	f7fc fdcb 	bl	8000e1c <HAL_DMA_Init>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <HAL_I2S_MspInit+0x194>
    {
      Error_Handler();
 800428c:	f7ff febe 	bl	800400c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a0a      	ldr	r2, [pc, #40]	; (80042bc <HAL_I2S_MspInit+0x1c0>)
 8004294:	639a      	str	r2, [r3, #56]	; 0x38
 8004296:	4a09      	ldr	r2, [pc, #36]	; (80042bc <HAL_I2S_MspInit+0x1c0>)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800429c:	bf00      	nop
 800429e:	3728      	adds	r7, #40	; 0x28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40003800 	.word	0x40003800
 80042a8:	40023800 	.word	0x40023800
 80042ac:	40020800 	.word	0x40020800
 80042b0:	40020400 	.word	0x40020400
 80042b4:	200000a0 	.word	0x200000a0
 80042b8:	40026058 	.word	0x40026058
 80042bc:	20000100 	.word	0x20000100
 80042c0:	40026070 	.word	0x40026070

080042c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042c8:	bf00      	nop
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042d2:	b480      	push	{r7}
 80042d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042d6:	e7fe      	b.n	80042d6 <HardFault_Handler+0x4>

080042d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042dc:	e7fe      	b.n	80042dc <MemManage_Handler+0x4>

080042de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042de:	b480      	push	{r7}
 80042e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042e2:	e7fe      	b.n	80042e2 <BusFault_Handler+0x4>

080042e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042e8:	e7fe      	b.n	80042e8 <UsageFault_Handler+0x4>

080042ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042ea:	b480      	push	{r7}
 80042ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042ee:	bf00      	nop
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042fc:	bf00      	nop
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004306:	b480      	push	{r7}
 8004308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800430a:	bf00      	nop
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004318:	f7fc fc2a 	bl	8000b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800431c:	bf00      	nop
 800431e:	bd80      	pop	{r7, pc}

08004320 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8004324:	4802      	ldr	r0, [pc, #8]	; (8004330 <DMA1_Stream3_IRQHandler+0x10>)
 8004326:	f7fc fe7f 	bl	8001028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800432a:	bf00      	nop
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	200000a0 	.word	0x200000a0

08004334 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004338:	4802      	ldr	r0, [pc, #8]	; (8004344 <DMA1_Stream4_IRQHandler+0x10>)
 800433a:	f7fc fe75 	bl	8001028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20000100 	.word	0x20000100

08004348 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800434c:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <SystemInit+0x60>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004352:	4a15      	ldr	r2, [pc, #84]	; (80043a8 <SystemInit+0x60>)
 8004354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800435c:	4b13      	ldr	r3, [pc, #76]	; (80043ac <SystemInit+0x64>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a12      	ldr	r2, [pc, #72]	; (80043ac <SystemInit+0x64>)
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004368:	4b10      	ldr	r3, [pc, #64]	; (80043ac <SystemInit+0x64>)
 800436a:	2200      	movs	r2, #0
 800436c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800436e:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <SystemInit+0x64>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a0e      	ldr	r2, [pc, #56]	; (80043ac <SystemInit+0x64>)
 8004374:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800437e:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <SystemInit+0x64>)
 8004380:	4a0b      	ldr	r2, [pc, #44]	; (80043b0 <SystemInit+0x68>)
 8004382:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004384:	4b09      	ldr	r3, [pc, #36]	; (80043ac <SystemInit+0x64>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a08      	ldr	r2, [pc, #32]	; (80043ac <SystemInit+0x64>)
 800438a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800438e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004390:	4b06      	ldr	r3, [pc, #24]	; (80043ac <SystemInit+0x64>)
 8004392:	2200      	movs	r2, #0
 8004394:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004396:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <SystemInit+0x60>)
 8004398:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800439c:	609a      	str	r2, [r3, #8]
#endif
}
 800439e:	bf00      	nop
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	e000ed00 	.word	0xe000ed00
 80043ac:	40023800 	.word	0x40023800
 80043b0:	24003010 	.word	0x24003010

080043b4 <WM8731_init>:
#include "wm8731.h"

bool WM8731_init(I2C_HandleTypeDef I2C_Handle)
{
 80043b4:	b084      	sub	sp, #16
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b094      	sub	sp, #80	; 0x50
 80043ba:	af14      	add	r7, sp, #80	; 0x50
 80043bc:	f107 0c08 	add.w	ip, r7, #8
 80043c0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/* I2S configuration */
	HAL_Delay(5);
 80043c4:	2005      	movs	r0, #5
 80043c6:	f7fc fbf3 	bl	8000bb0 <HAL_Delay>
	WM8731_write(I2C_Handle, WM8731_REG_RESET, 0);
 80043ca:	2300      	movs	r3, #0
 80043cc:	9312      	str	r3, [sp, #72]	; 0x48
 80043ce:	230f      	movs	r3, #15
 80043d0:	9311      	str	r3, [sp, #68]	; 0x44
 80043d2:	4668      	mov	r0, sp
 80043d4:	f107 0318 	add.w	r3, r7, #24
 80043d8:	2244      	movs	r2, #68	; 0x44
 80043da:	4619      	mov	r1, r3
 80043dc:	f000 fa28 	bl	8004830 <memcpy>
 80043e0:	f107 0308 	add.w	r3, r7, #8
 80043e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043e6:	f000 f8bb 	bl	8004560 <WM8731_write>

	WM8731_write(I2C_Handle, WM8731_REG_INTERFACE, 0b00000010); // 0x02=0b00000010 // I2S, 16 bit, MCLK slave
 80043ea:	2302      	movs	r3, #2
 80043ec:	9312      	str	r3, [sp, #72]	; 0x48
 80043ee:	2307      	movs	r3, #7
 80043f0:	9311      	str	r3, [sp, #68]	; 0x44
 80043f2:	4668      	mov	r0, sp
 80043f4:	f107 0318 	add.w	r3, r7, #24
 80043f8:	2244      	movs	r2, #68	; 0x44
 80043fa:	4619      	mov	r1, r3
 80043fc:	f000 fa18 	bl	8004830 <memcpy>
 8004400:	f107 0308 	add.w	r3, r7, #8
 8004404:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004406:	f000 f8ab 	bl	8004560 <WM8731_write>
	WM8731_write(I2C_Handle, WM8731_REG_SAMPLING,  0b00100000); // 0x20=0b00100000  // 256*Fs, 44.1 kHz, MCLK/1
 800440a:	2320      	movs	r3, #32
 800440c:	9312      	str	r3, [sp, #72]	; 0x48
 800440e:	2308      	movs	r3, #8
 8004410:	9311      	str	r3, [sp, #68]	; 0x44
 8004412:	4668      	mov	r0, sp
 8004414:	f107 0318 	add.w	r3, r7, #24
 8004418:	2244      	movs	r2, #68	; 0x44
 800441a:	4619      	mov	r1, r3
 800441c:	f000 fa08 	bl	8004830 <memcpy>
 8004420:	f107 0308 	add.w	r3, r7, #8
 8004424:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004426:	f000 f89b 	bl	8004560 <WM8731_write>

	WM8731_write(I2C_Handle, WM8731_REG_DIGITAL, 0x08); // DAC soft mute
 800442a:	2308      	movs	r3, #8
 800442c:	9312      	str	r3, [sp, #72]	; 0x48
 800442e:	2305      	movs	r3, #5
 8004430:	9311      	str	r3, [sp, #68]	; 0x44
 8004432:	4668      	mov	r0, sp
 8004434:	f107 0318 	add.w	r3, r7, #24
 8004438:	2244      	movs	r2, #68	; 0x44
 800443a:	4619      	mov	r1, r3
 800443c:	f000 f9f8 	bl	8004830 <memcpy>
 8004440:	f107 0308 	add.w	r3, r7, #8
 8004444:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004446:	f000 f88b 	bl	8004560 <WM8731_write>
	WM8731_write(I2C_Handle, WM8731_REG_ANALOG, 0x00);  // disable all
 800444a:	2300      	movs	r3, #0
 800444c:	9312      	str	r3, [sp, #72]	; 0x48
 800444e:	2304      	movs	r3, #4
 8004450:	9311      	str	r3, [sp, #68]	; 0x44
 8004452:	4668      	mov	r0, sp
 8004454:	f107 0318 	add.w	r3, r7, #24
 8004458:	2244      	movs	r2, #68	; 0x44
 800445a:	4619      	mov	r1, r3
 800445c:	f000 f9e8 	bl	8004830 <memcpy>
 8004460:	f107 0308 	add.w	r3, r7, #8
 8004464:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004466:	f000 f87b 	bl	8004560 <WM8731_write>

	WM8731_write(I2C_Handle, WM8731_REG_POWERDOWN, 0x00);
 800446a:	2300      	movs	r3, #0
 800446c:	9312      	str	r3, [sp, #72]	; 0x48
 800446e:	2306      	movs	r3, #6
 8004470:	9311      	str	r3, [sp, #68]	; 0x44
 8004472:	4668      	mov	r0, sp
 8004474:	f107 0318 	add.w	r3, r7, #24
 8004478:	2244      	movs	r2, #68	; 0x44
 800447a:	4619      	mov	r1, r3
 800447c:	f000 f9d8 	bl	8004830 <memcpy>
 8004480:	f107 0308 	add.w	r3, r7, #8
 8004484:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004486:	f000 f86b 	bl	8004560 <WM8731_write>

	WM8731_write(I2C_Handle, WM8731_REG_LHEADOUT, 0x80);
 800448a:	2380      	movs	r3, #128	; 0x80
 800448c:	9312      	str	r3, [sp, #72]	; 0x48
 800448e:	2302      	movs	r3, #2
 8004490:	9311      	str	r3, [sp, #68]	; 0x44
 8004492:	4668      	mov	r0, sp
 8004494:	f107 0318 	add.w	r3, r7, #24
 8004498:	2244      	movs	r2, #68	; 0x44
 800449a:	4619      	mov	r1, r3
 800449c:	f000 f9c8 	bl	8004830 <memcpy>
 80044a0:	f107 0308 	add.w	r3, r7, #8
 80044a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044a6:	f000 f85b 	bl	8004560 <WM8731_write>
	WM8731_write(I2C_Handle, WM8731_REG_RHEADOUT, 0x80);
 80044aa:	2380      	movs	r3, #128	; 0x80
 80044ac:	9312      	str	r3, [sp, #72]	; 0x48
 80044ae:	2303      	movs	r3, #3
 80044b0:	9311      	str	r3, [sp, #68]	; 0x44
 80044b2:	4668      	mov	r0, sp
 80044b4:	f107 0318 	add.w	r3, r7, #24
 80044b8:	2244      	movs	r2, #68	; 0x44
 80044ba:	4619      	mov	r1, r3
 80044bc:	f000 f9b8 	bl	8004830 <memcpy>
 80044c0:	f107 0308 	add.w	r3, r7, #8
 80044c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044c6:	f000 f84b 	bl	8004560 <WM8731_write>

	HAL_Delay(5);
 80044ca:	2005      	movs	r0, #5
 80044cc:	f7fc fb70 	bl	8000bb0 <HAL_Delay>
	WM8731_write(I2C_Handle, WM8731_REG_ACTIVE, 1);
 80044d0:	2301      	movs	r3, #1
 80044d2:	9312      	str	r3, [sp, #72]	; 0x48
 80044d4:	2309      	movs	r3, #9
 80044d6:	9311      	str	r3, [sp, #68]	; 0x44
 80044d8:	4668      	mov	r0, sp
 80044da:	f107 0318 	add.w	r3, r7, #24
 80044de:	2244      	movs	r2, #68	; 0x44
 80044e0:	4619      	mov	r1, r3
 80044e2:	f000 f9a5 	bl	8004830 <memcpy>
 80044e6:	f107 0308 	add.w	r3, r7, #8
 80044ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044ec:	f000 f838 	bl	8004560 <WM8731_write>
	HAL_Delay(5);
 80044f0:	2005      	movs	r0, #5
 80044f2:	f7fc fb5d 	bl	8000bb0 <HAL_Delay>

	WM8731_write(I2C_Handle, WM8731_REG_DIGITAL, 0b00100);   // DAC unmuted
 80044f6:	2304      	movs	r3, #4
 80044f8:	9312      	str	r3, [sp, #72]	; 0x48
 80044fa:	2305      	movs	r3, #5
 80044fc:	9311      	str	r3, [sp, #68]	; 0x44
 80044fe:	4668      	mov	r0, sp
 8004500:	f107 0318 	add.w	r3, r7, #24
 8004504:	2244      	movs	r2, #68	; 0x44
 8004506:	4619      	mov	r1, r3
 8004508:	f000 f992 	bl	8004830 <memcpy>
 800450c:	f107 0308 	add.w	r3, r7, #8
 8004510:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004512:	f000 f825 	bl	8004560 <WM8731_write>
	WM8731_write(I2C_Handle, WM8731_REG_ANALOG, 0b00010000); // DAC selected
 8004516:	2310      	movs	r3, #16
 8004518:	9312      	str	r3, [sp, #72]	; 0x48
 800451a:	2304      	movs	r3, #4
 800451c:	9311      	str	r3, [sp, #68]	; 0x44
 800451e:	4668      	mov	r0, sp
 8004520:	f107 0318 	add.w	r3, r7, #24
 8004524:	2244      	movs	r2, #68	; 0x44
 8004526:	4619      	mov	r1, r3
 8004528:	f000 f982 	bl	8004830 <memcpy>
 800452c:	f107 0308 	add.w	r3, r7, #8
 8004530:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004532:	f000 f815 	bl	8004560 <WM8731_write>

	WM8731_volume(I2C_Handle, 0.5);
 8004536:	4668      	mov	r0, sp
 8004538:	f107 0318 	add.w	r3, r7, #24
 800453c:	2244      	movs	r2, #68	; 0x44
 800453e:	4619      	mov	r1, r3
 8004540:	f000 f976 	bl	8004830 <memcpy>
 8004544:	f107 0308 	add.w	r3, r7, #8
 8004548:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800454a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800454e:	f000 f8e3 	bl	8004718 <WM8731_volume>
	return true;
 8004552:	2301      	movs	r3, #1
}
 8004554:	4618      	mov	r0, r3
 8004556:	46bd      	mov	sp, r7
 8004558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800455c:	b004      	add	sp, #16
 800455e:	4770      	bx	lr

08004560 <WM8731_write>:

bool WM8731_write(I2C_HandleTypeDef I2C_Handle, uint8_t reg, uint16_t val)
{
 8004560:	b084      	sub	sp, #16
 8004562:	b590      	push	{r4, r7, lr}
 8004564:	b087      	sub	sp, #28
 8004566:	af02      	add	r7, sp, #8
 8004568:	f107 0420 	add.w	r4, r7, #32
 800456c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004570:	466b      	mov	r3, sp
 8004572:	461c      	mov	r4, r3

	const static uint8_t TRANSMIT_LENGTH = 2;
	uint8_t data[TRANSMIT_LENGTH];
 8004574:	4b2c      	ldr	r3, [pc, #176]	; (8004628 <WM8731_write+0xc8>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	3b01      	subs	r3, #1
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	4b2a      	ldr	r3, [pc, #168]	; (8004628 <WM8731_write+0xc8>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	b2d8      	uxtb	r0, r3
 8004582:	f04f 0100 	mov.w	r1, #0
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	00cb      	lsls	r3, r1, #3
 8004590:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004594:	00c2      	lsls	r2, r0, #3
 8004596:	4b24      	ldr	r3, [pc, #144]	; (8004628 <WM8731_write+0xc8>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	b2d8      	uxtb	r0, r3
 800459c:	f04f 0100 	mov.w	r1, #0
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	00cb      	lsls	r3, r1, #3
 80045aa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80045ae:	00c2      	lsls	r2, r0, #3
 80045b0:	4b1d      	ldr	r3, [pc, #116]	; (8004628 <WM8731_write+0xc8>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	3307      	adds	r3, #7
 80045b6:	08db      	lsrs	r3, r3, #3
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	ebad 0d03 	sub.w	sp, sp, r3
 80045be:	ab02      	add	r3, sp, #8
 80045c0:	3300      	adds	r3, #0
 80045c2:	60bb      	str	r3, [r7, #8]

	data[0] = (reg << 1) | ((val >> 8) & 1);
 80045c4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	b25a      	sxtb	r2, r3
 80045cc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80045d0:	0a1b      	lsrs	r3, r3, #8
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	b25b      	sxtb	r3, r3
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	b25b      	sxtb	r3, r3
 80045dc:	4313      	orrs	r3, r2
 80045de:	b25b      	sxtb	r3, r3
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	701a      	strb	r2, [r3, #0]
	data[1] = val & 0xFF;
 80045e6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	705a      	strb	r2, [r3, #1]

	//bool result = I2C_TX_write(WM8731_I2C_ADDR, data, TRANSMIT_LENGTH);
	bool result = HAL_I2C_Master_Transmit(&I2C_Handle, WM8731_I2C_ADDR, data, TRANSMIT_LENGTH, HAL_MAX_DELAY);
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <WM8731_write+0xc8>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045fc:	9100      	str	r1, [sp, #0]
 80045fe:	2134      	movs	r1, #52	; 0x34
 8004600:	f107 0020 	add.w	r0, r7, #32
 8004604:	f7fd fa8e 	bl	8001b24 <HAL_I2C_Master_Transmit>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	bf14      	ite	ne
 800460e:	2301      	movne	r3, #1
 8004610:	2300      	moveq	r3, #0
 8004612:	71fb      	strb	r3, [r7, #7]
	return result;
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	46a5      	mov	sp, r4
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004622:	b004      	add	sp, #16
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	08004894 	.word	0x08004894

0800462c <WM8731_volumeInteger>:

bool WM8731_volumeInteger(I2C_HandleTypeDef I2C_Handle, unsigned int n)
{
 800462c:	b084      	sub	sp, #16
 800462e:	b580      	push	{r7, lr}
 8004630:	b094      	sub	sp, #80	; 0x50
 8004632:	af14      	add	r7, sp, #80	; 0x50
 8004634:	f107 0c08 	add.w	ip, r7, #8
 8004638:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// n = 127 for max volume (+6 dB)
	// n = 48 for min volume (-73 dB)
	// n = 0 to 47 for mute
	if (n > 127)
 800463c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800463e:	2b7f      	cmp	r3, #127	; 0x7f
 8004640:	d901      	bls.n	8004646 <WM8731_volumeInteger+0x1a>
		n = 127;
 8004642:	237f      	movs	r3, #127	; 0x7f
 8004644:	65fb      	str	r3, [r7, #92]	; 0x5c

	WM8731_write(I2C_Handle, WM8731_REG_LHEADOUT, n | 0x180);
 8004646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004648:	b29b      	uxth	r3, r3
 800464a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800464e:	b29b      	uxth	r3, r3
 8004650:	9312      	str	r3, [sp, #72]	; 0x48
 8004652:	2302      	movs	r3, #2
 8004654:	9311      	str	r3, [sp, #68]	; 0x44
 8004656:	4668      	mov	r0, sp
 8004658:	f107 0318 	add.w	r3, r7, #24
 800465c:	2244      	movs	r2, #68	; 0x44
 800465e:	4619      	mov	r1, r3
 8004660:	f000 f8e6 	bl	8004830 <memcpy>
 8004664:	f107 0308 	add.w	r3, r7, #8
 8004668:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800466a:	f7ff ff79 	bl	8004560 <WM8731_write>
	WM8731_write(I2C_Handle, WM8731_REG_RHEADOUT, n | 0x80);
 800466e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004670:	b29b      	uxth	r3, r3
 8004672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004676:	b29b      	uxth	r3, r3
 8004678:	9312      	str	r3, [sp, #72]	; 0x48
 800467a:	2303      	movs	r3, #3
 800467c:	9311      	str	r3, [sp, #68]	; 0x44
 800467e:	4668      	mov	r0, sp
 8004680:	f107 0318 	add.w	r3, r7, #24
 8004684:	2244      	movs	r2, #68	; 0x44
 8004686:	4619      	mov	r1, r3
 8004688:	f000 f8d2 	bl	8004830 <memcpy>
 800468c:	f107 0308 	add.w	r3, r7, #8
 8004690:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004692:	f7ff ff65 	bl	8004560 <WM8731_write>
	return true;
 8004696:	2301      	movs	r3, #1
}
 8004698:	4618      	mov	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046a0:	b004      	add	sp, #16
 80046a2:	4770      	bx	lr

080046a4 <WM8731_inputSelect>:
	WM8731_write(I2C_Handle, WM8731_REG_RLINEIN, _level);
	return true;
}

bool WM8731_inputSelect(I2C_HandleTypeDef I2C_Handle, int n)
{
 80046a4:	b084      	sub	sp, #16
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b094      	sub	sp, #80	; 0x50
 80046aa:	af14      	add	r7, sp, #80	; 0x50
 80046ac:	f107 0c08 	add.w	ip, r7, #8
 80046b0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (n == AUDIO_INPUT_LINEIN)
 80046b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d110      	bne.n	80046dc <WM8731_inputSelect+0x38>
	{
		WM8731_write(I2C_Handle, WM8731_REG_ANALOG, 0x12);
 80046ba:	2312      	movs	r3, #18
 80046bc:	9312      	str	r3, [sp, #72]	; 0x48
 80046be:	2304      	movs	r3, #4
 80046c0:	9311      	str	r3, [sp, #68]	; 0x44
 80046c2:	4668      	mov	r0, sp
 80046c4:	f107 0318 	add.w	r3, r7, #24
 80046c8:	2244      	movs	r2, #68	; 0x44
 80046ca:	4619      	mov	r1, r3
 80046cc:	f000 f8b0 	bl	8004830 <memcpy>
 80046d0:	f107 0308 	add.w	r3, r7, #8
 80046d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046d6:	f7ff ff43 	bl	8004560 <WM8731_write>
 80046da:	e015      	b.n	8004708 <WM8731_inputSelect+0x64>
	}
	else if (n == AUDIO_INPUT_MIC)
 80046dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d110      	bne.n	8004704 <WM8731_inputSelect+0x60>
	{
		WM8731_write(I2C_Handle, WM8731_REG_ANALOG, 0x15);
 80046e2:	2315      	movs	r3, #21
 80046e4:	9312      	str	r3, [sp, #72]	; 0x48
 80046e6:	2304      	movs	r3, #4
 80046e8:	9311      	str	r3, [sp, #68]	; 0x44
 80046ea:	4668      	mov	r0, sp
 80046ec:	f107 0318 	add.w	r3, r7, #24
 80046f0:	2244      	movs	r2, #68	; 0x44
 80046f2:	4619      	mov	r1, r3
 80046f4:	f000 f89c 	bl	8004830 <memcpy>
 80046f8:	f107 0308 	add.w	r3, r7, #8
 80046fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046fe:	f7ff ff2f 	bl	8004560 <WM8731_write>
 8004702:	e001      	b.n	8004708 <WM8731_inputSelect+0x64>
	}
	else
	{
		return false;
 8004704:	2300      	movs	r3, #0
 8004706:	e000      	b.n	800470a <WM8731_inputSelect+0x66>
	}
	return true;
 8004708:	2301      	movs	r3, #1
}
 800470a:	4618      	mov	r0, r3
 800470c:	46bd      	mov	sp, r7
 800470e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004712:	b004      	add	sp, #16
 8004714:	4770      	bx	lr
	...

08004718 <WM8731_volume>:

bool WM8731_volume(I2C_HandleTypeDef I2C_Handle, float n)
{
 8004718:	b084      	sub	sp, #16
 800471a:	b580      	push	{r7, lr}
 800471c:	b094      	sub	sp, #80	; 0x50
 800471e:	af12      	add	r7, sp, #72	; 0x48
 8004720:	f107 0c10 	add.w	ip, r7, #16
 8004724:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8004728:	ed87 0a01 	vstr	s0, [r7, #4]
	return WM8731_volumeInteger(I2C_Handle, n * 80.0 + 47.499);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7fb ffd9 	bl	80006e4 <__aeabi_f2d>
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	4b16      	ldr	r3, [pc, #88]	; (8004790 <WM8731_volume+0x78>)
 8004738:	f7fb fd46 	bl	80001c8 <__aeabi_dmul>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4610      	mov	r0, r2
 8004742:	4619      	mov	r1, r3
 8004744:	a310      	add	r3, pc, #64	; (adr r3, 8004788 <WM8731_volume+0x70>)
 8004746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474a:	f7fb fe6d 	bl	8000428 <__adddf3>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	4610      	mov	r0, r2
 8004754:	4619      	mov	r1, r3
 8004756:	f7fc f81d 	bl	8000794 <__aeabi_d2uiz>
 800475a:	4603      	mov	r3, r0
 800475c:	9311      	str	r3, [sp, #68]	; 0x44
 800475e:	4668      	mov	r0, sp
 8004760:	f107 0320 	add.w	r3, r7, #32
 8004764:	2244      	movs	r2, #68	; 0x44
 8004766:	4619      	mov	r1, r3
 8004768:	f000 f862 	bl	8004830 <memcpy>
 800476c:	f107 0310 	add.w	r3, r7, #16
 8004770:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004772:	f7ff ff5b 	bl	800462c <WM8731_volumeInteger>
 8004776:	4603      	mov	r3, r0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004782:	b004      	add	sp, #16
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	3b645a1d 	.word	0x3b645a1d
 800478c:	4047bfdf 	.word	0x4047bfdf
 8004790:	40540000 	.word	0x40540000

08004794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004794:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004798:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800479a:	e003      	b.n	80047a4 <LoopCopyDataInit>

0800479c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800479c:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800479e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80047a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80047a2:	3104      	adds	r1, #4

080047a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80047a4:	480b      	ldr	r0, [pc, #44]	; (80047d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80047a6:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80047a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80047aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80047ac:	d3f6      	bcc.n	800479c <CopyDataInit>
  ldr  r2, =_sbss
 80047ae:	4a0b      	ldr	r2, [pc, #44]	; (80047dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80047b0:	e002      	b.n	80047b8 <LoopFillZerobss>

080047b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80047b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80047b4:	f842 3b04 	str.w	r3, [r2], #4

080047b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80047b8:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80047ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80047bc:	d3f9      	bcc.n	80047b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80047be:	f7ff fdc3 	bl	8004348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047c2:	f000 f811 	bl	80047e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047c6:	f7ff f92f 	bl	8003a28 <main>
  bx  lr    
 80047ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80047cc:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 80047d0:	080048a8 	.word	0x080048a8
  ldr  r0, =_sdata
 80047d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80047d8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80047dc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80047e0:	200001a8 	.word	0x200001a8

080047e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047e4:	e7fe      	b.n	80047e4 <ADC_IRQHandler>
	...

080047e8 <__libc_init_array>:
 80047e8:	b570      	push	{r4, r5, r6, lr}
 80047ea:	4d0d      	ldr	r5, [pc, #52]	; (8004820 <__libc_init_array+0x38>)
 80047ec:	4c0d      	ldr	r4, [pc, #52]	; (8004824 <__libc_init_array+0x3c>)
 80047ee:	1b64      	subs	r4, r4, r5
 80047f0:	10a4      	asrs	r4, r4, #2
 80047f2:	2600      	movs	r6, #0
 80047f4:	42a6      	cmp	r6, r4
 80047f6:	d109      	bne.n	800480c <__libc_init_array+0x24>
 80047f8:	4d0b      	ldr	r5, [pc, #44]	; (8004828 <__libc_init_array+0x40>)
 80047fa:	4c0c      	ldr	r4, [pc, #48]	; (800482c <__libc_init_array+0x44>)
 80047fc:	f000 f82e 	bl	800485c <_init>
 8004800:	1b64      	subs	r4, r4, r5
 8004802:	10a4      	asrs	r4, r4, #2
 8004804:	2600      	movs	r6, #0
 8004806:	42a6      	cmp	r6, r4
 8004808:	d105      	bne.n	8004816 <__libc_init_array+0x2e>
 800480a:	bd70      	pop	{r4, r5, r6, pc}
 800480c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004810:	4798      	blx	r3
 8004812:	3601      	adds	r6, #1
 8004814:	e7ee      	b.n	80047f4 <__libc_init_array+0xc>
 8004816:	f855 3b04 	ldr.w	r3, [r5], #4
 800481a:	4798      	blx	r3
 800481c:	3601      	adds	r6, #1
 800481e:	e7f2      	b.n	8004806 <__libc_init_array+0x1e>
 8004820:	080048a0 	.word	0x080048a0
 8004824:	080048a0 	.word	0x080048a0
 8004828:	080048a0 	.word	0x080048a0
 800482c:	080048a4 	.word	0x080048a4

08004830 <memcpy>:
 8004830:	440a      	add	r2, r1
 8004832:	4291      	cmp	r1, r2
 8004834:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004838:	d100      	bne.n	800483c <memcpy+0xc>
 800483a:	4770      	bx	lr
 800483c:	b510      	push	{r4, lr}
 800483e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004846:	4291      	cmp	r1, r2
 8004848:	d1f9      	bne.n	800483e <memcpy+0xe>
 800484a:	bd10      	pop	{r4, pc}

0800484c <memset>:
 800484c:	4402      	add	r2, r0
 800484e:	4603      	mov	r3, r0
 8004850:	4293      	cmp	r3, r2
 8004852:	d100      	bne.n	8004856 <memset+0xa>
 8004854:	4770      	bx	lr
 8004856:	f803 1b01 	strb.w	r1, [r3], #1
 800485a:	e7f9      	b.n	8004850 <memset+0x4>

0800485c <_init>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	bf00      	nop
 8004860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004862:	bc08      	pop	{r3}
 8004864:	469e      	mov	lr, r3
 8004866:	4770      	bx	lr

08004868 <_fini>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	bf00      	nop
 800486c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486e:	bc08      	pop	{r3}
 8004870:	469e      	mov	lr, r3
 8004872:	4770      	bx	lr
