
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005db4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030b0  08005f68  08005f68  00015f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009018  08009018  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08009018  08009018  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009018  08009018  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009018  08009018  00019018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800901c  0800901c  0001901c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000090  080090b0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  080090b0  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa3b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f8  00000000  00000000  0002fafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00031df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  00032980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291cf  00000000  00000000  000333e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc66  00000000  00000000  0005c5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faa2a  00000000  00000000  0006a21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00164c47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003538  00000000  00000000  00164c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005f4c 	.word	0x08005f4c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	08005f4c 	.word	0x08005f4c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <main>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);


int main(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000c30:	f001 f9e0 	bl	8001ff4 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 8000c34:	f000 f826 	bl	8000c84 <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000c38:	f000 f902 	bl	8000e40 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000c3c:	f000 f8c0 	bl	8000dc0 <MX_I2C1_Init>

    while (1)
    {
        // User button pressed - repeat the test
        if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000c40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <main+0x50>)
 8000c46:	f001 fce5 	bl	8002614 <HAL_GPIO_ReadPin>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d10b      	bne.n	8000c68 <main+0x3c>
        {
            // Indicate that test is running
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2180      	movs	r1, #128	; 0x80
 8000c54:	480a      	ldr	r0, [pc, #40]	; (8000c80 <main+0x54>)
 8000c56:	f001 fcf5 	bl	8002644 <HAL_GPIO_WritePin>

            ssd1306_TestAll();
 8000c5a:	f001 f991 	bl	8001f80 <ssd1306_TestAll>

            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2180      	movs	r1, #128	; 0x80
 8000c62:	4807      	ldr	r0, [pc, #28]	; (8000c80 <main+0x54>)
 8000c64:	f001 fcee 	bl	8002644 <HAL_GPIO_WritePin>
        }

        // Blink an LED
        HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000c68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <main+0x54>)
 8000c6e:	f001 fd01 	bl	8002674 <HAL_GPIO_TogglePin>
        HAL_Delay(150);
 8000c72:	2096      	movs	r0, #150	; 0x96
 8000c74:	f001 fa32 	bl	80020dc <HAL_Delay>
        if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000c78:	e7e2      	b.n	8000c40 <main+0x14>
 8000c7a:	bf00      	nop
 8000c7c:	48000800 	.word	0x48000800
 8000c80:	48000400 	.word	0x48000400

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0ba      	sub	sp, #232	; 0xe8
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c8e:	2244      	movs	r2, #68	; 0x44
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f003 fcb0 	bl	80045f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	228c      	movs	r2, #140	; 0x8c
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f003 fca2 	bl	80045f8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cb4:	f002 f8fc 	bl	8002eb0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000cb8:	4b40      	ldr	r3, [pc, #256]	; (8000dbc <SystemClock_Config+0x138>)
 8000cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cbe:	4a3f      	ldr	r2, [pc, #252]	; (8000dbc <SystemClock_Config+0x138>)
 8000cc0:	f023 0318 	bic.w	r3, r3, #24
 8000cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000cc8:	2314      	movs	r3, #20
 8000cca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ce0:	2360      	movs	r3, #96	; 0x60
 8000ce2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000cec:	2301      	movs	r3, #1
 8000cee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000cf8:	2328      	movs	r3, #40	; 0x28
 8000cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d14:	4618      	mov	r0, r3
 8000d16:	f002 f94f 	bl	8002fb8 <HAL_RCC_OscConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000d20:	f000 f926 	bl	8000f70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d24:	230f      	movs	r3, #15
 8000d26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d44:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000d48:	2104      	movs	r1, #4
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f002 fd5a 	bl	8003804 <HAL_RCC_ClockConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000d56:	f000 f90b 	bl	8000f70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
 8000d5a:	f242 0360 	movw	r3, #8288	; 0x2060
 8000d5e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000d68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d6c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000d76:	2318      	movs	r3, #24
 8000d78:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000d86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d8a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f002 ff06 	bl	8003ba0 <HAL_RCCEx_PeriphCLKConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8000d9a:	f000 f8e9 	bl	8000f70 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000da2:	f002 f8a3 	bl	8002eec <HAL_PWREx_ControlVoltageScaling>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000dac:	f000 f8e0 	bl	8000f70 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000db0:	f003 f9f2 	bl	8004198 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000db4:	bf00      	nop
 8000db6:	37e8      	adds	r7, #232	; 0xe8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <MX_I2C1_Init+0x78>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301347;
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dcc:	4a1b      	ldr	r2, [pc, #108]	; (8000e3c <MX_I2C1_Init+0x7c>)
 8000dce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dd0:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dfa:	480e      	ldr	r0, [pc, #56]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dfc:	f001 fc54 	bl	80026a8 <HAL_I2C_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e06:	f000 f8b3 	bl	8000f70 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000e0e:	f001 ffb7 	bl	8002d80 <HAL_I2CEx_ConfigAnalogFilter>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e18:	f000 f8aa 	bl	8000f70 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000e20:	f001 fff9 	bl	8002e16 <HAL_I2CEx_ConfigDigitalFilter>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e2a:	f000 f8a1 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200004c0 	.word	0x200004c0
 8000e38:	40005400 	.word	0x40005400
 8000e3c:	00301347 	.word	0x00301347

08000e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	4b41      	ldr	r3, [pc, #260]	; (8000f5c <MX_GPIO_Init+0x11c>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	4a40      	ldr	r2, [pc, #256]	; (8000f5c <MX_GPIO_Init+0x11c>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e62:	4b3e      	ldr	r3, [pc, #248]	; (8000f5c <MX_GPIO_Init+0x11c>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6e:	4b3b      	ldr	r3, [pc, #236]	; (8000f5c <MX_GPIO_Init+0x11c>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a3a      	ldr	r2, [pc, #232]	; (8000f5c <MX_GPIO_Init+0x11c>)
 8000e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b38      	ldr	r3, [pc, #224]	; (8000f5c <MX_GPIO_Init+0x11c>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <MX_GPIO_Init+0x11c>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	4a34      	ldr	r2, [pc, #208]	; (8000f5c <MX_GPIO_Init+0x11c>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e92:	4b32      	ldr	r3, [pc, #200]	; (8000f5c <MX_GPIO_Init+0x11c>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e9e:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <MX_GPIO_Init+0x11c>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	4a2e      	ldr	r2, [pc, #184]	; (8000f5c <MX_GPIO_Init+0x11c>)
 8000ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eaa:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <MX_GPIO_Init+0x11c>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000eb6:	f002 f86f 	bl	8002f98 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <MX_GPIO_Init+0x11c>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4a27      	ldr	r2, [pc, #156]	; (8000f5c <MX_GPIO_Init+0x11c>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <MX_GPIO_Init+0x11c>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000ed8:	4821      	ldr	r0, [pc, #132]	; (8000f60 <MX_GPIO_Init+0x120>)
 8000eda:	f001 fbb3 	bl	8002644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2140      	movs	r1, #64	; 0x40
 8000ee2:	4820      	ldr	r0, [pc, #128]	; (8000f64 <MX_GPIO_Init+0x124>)
 8000ee4:	f001 fbae 	bl	8002644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <MX_GPIO_Init+0x128>)
 8000ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	481b      	ldr	r0, [pc, #108]	; (8000f6c <MX_GPIO_Init+0x12c>)
 8000efe:	f001 f9f7 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000f02:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4811      	ldr	r0, [pc, #68]	; (8000f60 <MX_GPIO_Init+0x120>)
 8000f1c:	f001 f9e8 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f20:	2320      	movs	r3, #32
 8000f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	480c      	ldr	r0, [pc, #48]	; (8000f64 <MX_GPIO_Init+0x124>)
 8000f34:	f001 f9dc 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f38:	2340      	movs	r3, #64	; 0x40
 8000f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_GPIO_Init+0x124>)
 8000f50:	f001 f9ce 	bl	80022f0 <HAL_GPIO_Init>

}
 8000f54:	bf00      	nop
 8000f56:	3728      	adds	r7, #40	; 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	48000400 	.word	0x48000400
 8000f64:	48001800 	.word	0x48001800
 8000f68:	10110000 	.word	0x10110000
 8000f6c:	48000800 	.word	0x48000800

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <Error_Handler+0x8>
	...

08000f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_MspInit+0x44>)
 8000f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f86:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <HAL_MspInit+0x44>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <HAL_MspInit+0x44>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_MspInit+0x44>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_MspInit+0x44>)
 8000fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_MspInit+0x44>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a17      	ldr	r2, [pc, #92]	; (8001040 <HAL_I2C_MspInit+0x7c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d128      	bne.n	8001038 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <HAL_I2C_MspInit+0x80>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	4a16      	ldr	r2, [pc, #88]	; (8001044 <HAL_I2C_MspInit+0x80>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_I2C_MspInit+0x80>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ffe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001004:	2312      	movs	r3, #18
 8001006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001010:	2304      	movs	r3, #4
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	480b      	ldr	r0, [pc, #44]	; (8001048 <HAL_I2C_MspInit+0x84>)
 800101c:	f001 f968 	bl	80022f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HAL_I2C_MspInit+0x80>)
 8001022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_I2C_MspInit+0x80>)
 8001026:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800102a:	6593      	str	r3, [r2, #88]	; 0x58
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_I2C_MspInit+0x80>)
 800102e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	; 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40005400 	.word	0x40005400
 8001044:	40021000 	.word	0x40021000
 8001048:	48000400 	.word	0x48000400

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <NMI_Handler+0x4>

08001052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <HardFault_Handler+0x4>

08001058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <MemManage_Handler+0x4>

0800105e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <BusFault_Handler+0x4>

08001064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <UsageFault_Handler+0x4>

0800106a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001098:	f001 f800 	bl	800209c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a8:	4a14      	ldr	r2, [pc, #80]	; (80010fc <_sbrk+0x5c>)
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <_sbrk+0x60>)
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <_sbrk+0x64>)
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <_sbrk+0x68>)
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d207      	bcs.n	80010e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d0:	f003 fa40 	bl	8004554 <__errno>
 80010d4:	4603      	mov	r3, r0
 80010d6:	220c      	movs	r2, #12
 80010d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010de:	e009      	b.n	80010f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <_sbrk+0x64>)
 80010f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20050000 	.word	0x20050000
 8001100:	00000400 	.word	0x00000400
 8001104:	200000ac 	.word	0x200000ac
 8001108:	20000520 	.word	0x20000520

0800110c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <SystemInit+0x5c>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001116:	4a14      	ldr	r2, [pc, #80]	; (8001168 <SystemInit+0x5c>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <SystemInit+0x60>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a11      	ldr	r2, [pc, #68]	; (800116c <SystemInit+0x60>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <SystemInit+0x60>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <SystemInit+0x60>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a0d      	ldr	r2, [pc, #52]	; (800116c <SystemInit+0x60>)
 8001138:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800113c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001140:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <SystemInit+0x60>)
 8001144:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001148:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <SystemInit+0x60>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a07      	ldr	r2, [pc, #28]	; (800116c <SystemInit+0x60>)
 8001150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001154:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <SystemInit+0x60>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00
 800116c:	40021000 	.word	0x40021000

08001170 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001174:	f7ff ffca 	bl	800110c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001178:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800117a:	e003      	b.n	8001184 <LoopCopyDataInit>

0800117c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800117e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001180:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001182:	3104      	adds	r1, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001184:	480a      	ldr	r0, [pc, #40]	; (80011b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001188:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800118a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800118c:	d3f6      	bcc.n	800117c <CopyDataInit>
	ldr	r2, =_sbss
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001190:	e002      	b.n	8001198 <LoopFillZerobss>

08001192 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001192:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001194:	f842 3b04 	str.w	r3, [r2], #4

08001198 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <LoopForever+0x16>)
	cmp	r2, r3
 800119a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800119c:	d3f9      	bcc.n	8001192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119e:	f003 f9df 	bl	8004560 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011a2:	f7ff fd43 	bl	8000c2c <main>

080011a6 <LoopForever>:

LoopForever:
    b LoopForever
 80011a6:	e7fe      	b.n	80011a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011a8:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 80011ac:	08009020 	.word	0x08009020
	ldr	r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011b4:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 80011b8:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 80011bc:	20000520 	.word	0x20000520

080011c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC1_2_IRQHandler>

080011c2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af04      	add	r7, sp, #16
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80011da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	2301      	movs	r3, #1
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	1dfb      	adds	r3, r7, #7
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2301      	movs	r3, #1
 80011ea:	2200      	movs	r2, #0
 80011ec:	2178      	movs	r1, #120	; 0x78
 80011ee:	4803      	ldr	r0, [pc, #12]	; (80011fc <ssd1306_WriteCommand+0x2c>)
 80011f0:	f001 faea 	bl	80027c8 <HAL_I2C_Mem_Write>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200004c0 	.word	0x200004c0

08001200 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af04      	add	r7, sp, #16
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b29b      	uxth	r3, r3
 800120e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001212:	9202      	str	r2, [sp, #8]
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	2240      	movs	r2, #64	; 0x40
 800121e:	2178      	movs	r1, #120	; 0x78
 8001220:	4803      	ldr	r0, [pc, #12]	; (8001230 <ssd1306_WriteData+0x30>)
 8001222:	f001 fad1 	bl	80027c8 <HAL_I2C_Mem_Write>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200004c0 	.word	0x200004c0

08001234 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001238:	f7ff ffc3 	bl	80011c2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800123c:	2064      	movs	r0, #100	; 0x64
 800123e:	f000 ff4d 	bl	80020dc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001242:	2000      	movs	r0, #0
 8001244:	f000 fcaa 	bl	8001b9c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001248:	2020      	movs	r0, #32
 800124a:	f7ff ffc1 	bl	80011d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800124e:	2000      	movs	r0, #0
 8001250:	f7ff ffbe 	bl	80011d0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001254:	20b0      	movs	r0, #176	; 0xb0
 8001256:	f7ff ffbb 	bl	80011d0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800125a:	20c8      	movs	r0, #200	; 0xc8
 800125c:	f7ff ffb8 	bl	80011d0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff ffb5 	bl	80011d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001266:	2010      	movs	r0, #16
 8001268:	f7ff ffb2 	bl	80011d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800126c:	2040      	movs	r0, #64	; 0x40
 800126e:	f7ff ffaf 	bl	80011d0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001272:	20ff      	movs	r0, #255	; 0xff
 8001274:	f000 fc7e 	bl	8001b74 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001278:	20a1      	movs	r0, #161	; 0xa1
 800127a:	f7ff ffa9 	bl	80011d0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800127e:	20a6      	movs	r0, #166	; 0xa6
 8001280:	f7ff ffa6 	bl	80011d0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001284:	20a8      	movs	r0, #168	; 0xa8
 8001286:	f7ff ffa3 	bl	80011d0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800128a:	203f      	movs	r0, #63	; 0x3f
 800128c:	f7ff ffa0 	bl	80011d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001290:	20a4      	movs	r0, #164	; 0xa4
 8001292:	f7ff ff9d 	bl	80011d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001296:	20d3      	movs	r0, #211	; 0xd3
 8001298:	f7ff ff9a 	bl	80011d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff ff97 	bl	80011d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80012a2:	20d5      	movs	r0, #213	; 0xd5
 80012a4:	f7ff ff94 	bl	80011d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80012a8:	20f0      	movs	r0, #240	; 0xf0
 80012aa:	f7ff ff91 	bl	80011d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80012ae:	20d9      	movs	r0, #217	; 0xd9
 80012b0:	f7ff ff8e 	bl	80011d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80012b4:	2022      	movs	r0, #34	; 0x22
 80012b6:	f7ff ff8b 	bl	80011d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80012ba:	20da      	movs	r0, #218	; 0xda
 80012bc:	f7ff ff88 	bl	80011d0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80012c0:	2012      	movs	r0, #18
 80012c2:	f7ff ff85 	bl	80011d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80012c6:	20db      	movs	r0, #219	; 0xdb
 80012c8:	f7ff ff82 	bl	80011d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80012cc:	2020      	movs	r0, #32
 80012ce:	f7ff ff7f 	bl	80011d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80012d2:	208d      	movs	r0, #141	; 0x8d
 80012d4:	f7ff ff7c 	bl	80011d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80012d8:	2014      	movs	r0, #20
 80012da:	f7ff ff79 	bl	80011d0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80012de:	2001      	movs	r0, #1
 80012e0:	f000 fc5c 	bl	8001b9c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80012e4:	2000      	movs	r0, #0
 80012e6:	f000 f80f 	bl	8001308 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80012ea:	f000 f831 	bl	8001350 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <ssd1306_Init+0xd0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <ssd1306_Init+0xd0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80012fa:	4b02      	ldr	r3, [pc, #8]	; (8001304 <ssd1306_Init+0xd0>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	715a      	strb	r2, [r3, #5]
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200004b0 	.word	0x200004b0

08001308 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	e00d      	b.n	8001334 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <ssd1306_Fill+0x1a>
 800131e:	2100      	movs	r1, #0
 8001320:	e000      	b.n	8001324 <ssd1306_Fill+0x1c>
 8001322:	21ff      	movs	r1, #255	; 0xff
 8001324:	4a09      	ldr	r2, [pc, #36]	; (800134c <ssd1306_Fill+0x44>)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4413      	add	r3, r2
 800132a:	460a      	mov	r2, r1
 800132c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	3301      	adds	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800133a:	d3ed      	bcc.n	8001318 <ssd1306_Fill+0x10>
    }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	200000b0 	.word	0x200000b0

08001350 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001356:	2300      	movs	r3, #0
 8001358:	71fb      	strb	r3, [r7, #7]
 800135a:	e016      	b.n	800138a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	3b50      	subs	r3, #80	; 0x50
 8001360:	b2db      	uxtb	r3, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff34 	bl	80011d0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001368:	2000      	movs	r0, #0
 800136a:	f7ff ff31 	bl	80011d0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800136e:	2010      	movs	r0, #16
 8001370:	f7ff ff2e 	bl	80011d0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	01db      	lsls	r3, r3, #7
 8001378:	4a08      	ldr	r2, [pc, #32]	; (800139c <ssd1306_UpdateScreen+0x4c>)
 800137a:	4413      	add	r3, r2
 800137c:	2180      	movs	r1, #128	; 0x80
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff3e 	bl	8001200 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	3301      	adds	r3, #1
 8001388:	71fb      	strb	r3, [r7, #7]
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b07      	cmp	r3, #7
 800138e:	d9e5      	bls.n	800135c <ssd1306_UpdateScreen+0xc>
    }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200000b0 	.word	0x200000b0

080013a0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
 80013aa:	460b      	mov	r3, r1
 80013ac:	71bb      	strb	r3, [r7, #6]
 80013ae:	4613      	mov	r3, r2
 80013b0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db48      	blt.n	800144c <ssd1306_DrawPixel+0xac>
 80013ba:	79bb      	ldrb	r3, [r7, #6]
 80013bc:	2b3f      	cmp	r3, #63	; 0x3f
 80013be:	d845      	bhi.n	800144c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80013c0:	4b25      	ldr	r3, [pc, #148]	; (8001458 <ssd1306_DrawPixel+0xb8>)
 80013c2:	791b      	ldrb	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80013c8:	797b      	ldrb	r3, [r7, #5]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	bf0c      	ite	eq
 80013ce:	2301      	moveq	r3, #1
 80013d0:	2300      	movne	r3, #0
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80013d6:	797b      	ldrb	r3, [r7, #5]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d11a      	bne.n	8001412 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013dc:	79fa      	ldrb	r2, [r7, #7]
 80013de:	79bb      	ldrb	r3, [r7, #6]
 80013e0:	08db      	lsrs	r3, r3, #3
 80013e2:	b2d8      	uxtb	r0, r3
 80013e4:	4603      	mov	r3, r0
 80013e6:	01db      	lsls	r3, r3, #7
 80013e8:	4413      	add	r3, r2
 80013ea:	4a1c      	ldr	r2, [pc, #112]	; (800145c <ssd1306_DrawPixel+0xbc>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	b25a      	sxtb	r2, r3
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	2101      	movs	r1, #1
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b259      	sxtb	r1, r3
 8001402:	79fa      	ldrb	r2, [r7, #7]
 8001404:	4603      	mov	r3, r0
 8001406:	01db      	lsls	r3, r3, #7
 8001408:	4413      	add	r3, r2
 800140a:	b2c9      	uxtb	r1, r1
 800140c:	4a13      	ldr	r2, [pc, #76]	; (800145c <ssd1306_DrawPixel+0xbc>)
 800140e:	54d1      	strb	r1, [r2, r3]
 8001410:	e01d      	b.n	800144e <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001412:	79fa      	ldrb	r2, [r7, #7]
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	b2d8      	uxtb	r0, r3
 800141a:	4603      	mov	r3, r0
 800141c:	01db      	lsls	r3, r3, #7
 800141e:	4413      	add	r3, r2
 8001420:	4a0e      	ldr	r2, [pc, #56]	; (800145c <ssd1306_DrawPixel+0xbc>)
 8001422:	5cd3      	ldrb	r3, [r2, r3]
 8001424:	b25a      	sxtb	r2, r3
 8001426:	79bb      	ldrb	r3, [r7, #6]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	2101      	movs	r1, #1
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	b25b      	sxtb	r3, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	b25b      	sxtb	r3, r3
 8001438:	4013      	ands	r3, r2
 800143a:	b259      	sxtb	r1, r3
 800143c:	79fa      	ldrb	r2, [r7, #7]
 800143e:	4603      	mov	r3, r0
 8001440:	01db      	lsls	r3, r3, #7
 8001442:	4413      	add	r3, r2
 8001444:	b2c9      	uxtb	r1, r1
 8001446:	4a05      	ldr	r2, [pc, #20]	; (800145c <ssd1306_DrawPixel+0xbc>)
 8001448:	54d1      	strb	r1, [r2, r3]
 800144a:	e000      	b.n	800144e <ssd1306_DrawPixel+0xae>
        return;
 800144c:	bf00      	nop
    }
}
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	200004b0 	.word	0x200004b0
 800145c:	200000b0 	.word	0x200000b0

08001460 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	4604      	mov	r4, r0
 8001468:	1d38      	adds	r0, r7, #4
 800146a:	e880 0006 	stmia.w	r0, {r1, r2}
 800146e:	461a      	mov	r2, r3
 8001470:	4623      	mov	r3, r4
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	4613      	mov	r3, r2
 8001476:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	2b1f      	cmp	r3, #31
 800147c:	d902      	bls.n	8001484 <ssd1306_WriteChar+0x24>
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2b7e      	cmp	r3, #126	; 0x7e
 8001482:	d901      	bls.n	8001488 <ssd1306_WriteChar+0x28>
        return 0;
 8001484:	2300      	movs	r3, #0
 8001486:	e06d      	b.n	8001564 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001488:	4b38      	ldr	r3, [pc, #224]	; (800156c <ssd1306_WriteChar+0x10c>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	793b      	ldrb	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	2b80      	cmp	r3, #128	; 0x80
 8001494:	dc06      	bgt.n	80014a4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001496:	4b35      	ldr	r3, [pc, #212]	; (800156c <ssd1306_WriteChar+0x10c>)
 8001498:	885b      	ldrh	r3, [r3, #2]
 800149a:	461a      	mov	r2, r3
 800149c:	797b      	ldrb	r3, [r7, #5]
 800149e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80014a0:	2b40      	cmp	r3, #64	; 0x40
 80014a2:	dd01      	ble.n	80014a8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e05d      	b.n	8001564 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	e04c      	b.n	8001548 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	3b20      	subs	r3, #32
 80014b4:	7979      	ldrb	r1, [r7, #5]
 80014b6:	fb01 f303 	mul.w	r3, r1, r3
 80014ba:	4619      	mov	r1, r3
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	440b      	add	r3, r1
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
 80014cc:	e034      	b.n	8001538 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d012      	beq.n	8001504 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80014de:	4b23      	ldr	r3, [pc, #140]	; (800156c <ssd1306_WriteChar+0x10c>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	4413      	add	r3, r2
 80014ea:	b2d8      	uxtb	r0, r3
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <ssd1306_WriteChar+0x10c>)
 80014ee:	885b      	ldrh	r3, [r3, #2]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4413      	add	r3, r2
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	7bba      	ldrb	r2, [r7, #14]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff ff4f 	bl	80013a0 <ssd1306_DrawPixel>
 8001502:	e016      	b.n	8001532 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <ssd1306_WriteChar+0x10c>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	4413      	add	r3, r2
 8001510:	b2d8      	uxtb	r0, r3
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <ssd1306_WriteChar+0x10c>)
 8001514:	885b      	ldrh	r3, [r3, #2]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	4413      	add	r3, r2
 800151e:	b2d9      	uxtb	r1, r3
 8001520:	7bbb      	ldrb	r3, [r7, #14]
 8001522:	2b00      	cmp	r3, #0
 8001524:	bf0c      	ite	eq
 8001526:	2301      	moveq	r3, #1
 8001528:	2300      	movne	r3, #0
 800152a:	b2db      	uxtb	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	f7ff ff37 	bl	80013a0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	3301      	adds	r3, #1
 8001536:	61bb      	str	r3, [r7, #24]
 8001538:	793b      	ldrb	r3, [r7, #4]
 800153a:	461a      	mov	r2, r3
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	4293      	cmp	r3, r2
 8001540:	d3c5      	bcc.n	80014ce <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3301      	adds	r3, #1
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	797b      	ldrb	r3, [r7, #5]
 800154a:	461a      	mov	r2, r3
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	4293      	cmp	r3, r2
 8001550:	d3ad      	bcc.n	80014ae <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <ssd1306_WriteChar+0x10c>)
 8001554:	881a      	ldrh	r2, [r3, #0]
 8001556:	793b      	ldrb	r3, [r7, #4]
 8001558:	b29b      	uxth	r3, r3
 800155a:	4413      	add	r3, r2
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b03      	ldr	r3, [pc, #12]	; (800156c <ssd1306_WriteChar+0x10c>)
 8001560:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3724      	adds	r7, #36	; 0x24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd90      	pop	{r4, r7, pc}
 800156c:	200004b0 	.word	0x200004b0

08001570 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	1d38      	adds	r0, r7, #4
 800157a:	e880 0006 	stmia.w	r0, {r1, r2}
 800157e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001580:	e012      	b.n	80015a8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	7818      	ldrb	r0, [r3, #0]
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	1d3a      	adds	r2, r7, #4
 800158a:	ca06      	ldmia	r2, {r1, r2}
 800158c:	f7ff ff68 	bl	8001460 <ssd1306_WriteChar>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d002      	beq.n	80015a2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	e008      	b.n	80015b4 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3301      	adds	r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1e8      	bne.n	8001582 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	781b      	ldrb	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	460a      	mov	r2, r1
 80015c6:	71fb      	strb	r3, [r7, #7]
 80015c8:	4613      	mov	r3, r2
 80015ca:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <ssd1306_SetCursor+0x2c>)
 80015d2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <ssd1306_SetCursor+0x2c>)
 80015da:	805a      	strh	r2, [r3, #2]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	200004b0 	.word	0x200004b0

080015ec <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4604      	mov	r4, r0
 80015f4:	4608      	mov	r0, r1
 80015f6:	4611      	mov	r1, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	4623      	mov	r3, r4
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	4603      	mov	r3, r0
 8001600:	71bb      	strb	r3, [r7, #6]
 8001602:	460b      	mov	r3, r1
 8001604:	717b      	strb	r3, [r7, #5]
 8001606:	4613      	mov	r3, r2
 8001608:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 800160a:	797a      	ldrb	r2, [r7, #5]
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	bfb8      	it	lt
 8001614:	425b      	neglt	r3, r3
 8001616:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8001618:	793a      	ldrb	r2, [r7, #4]
 800161a:	79bb      	ldrb	r3, [r7, #6]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	bfb8      	it	lt
 8001622:	425b      	neglt	r3, r3
 8001624:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8001626:	79fa      	ldrb	r2, [r7, #7]
 8001628:	797b      	ldrb	r3, [r7, #5]
 800162a:	429a      	cmp	r2, r3
 800162c:	d201      	bcs.n	8001632 <ssd1306_Line+0x46>
 800162e:	2301      	movs	r3, #1
 8001630:	e001      	b.n	8001636 <ssd1306_Line+0x4a>
 8001632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001636:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8001638:	79ba      	ldrb	r2, [r7, #6]
 800163a:	793b      	ldrb	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	d201      	bcs.n	8001644 <ssd1306_Line+0x58>
 8001640:	2301      	movs	r3, #1
 8001642:	e001      	b.n	8001648 <ssd1306_Line+0x5c>
 8001644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001648:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8001652:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001656:	7939      	ldrb	r1, [r7, #4]
 8001658:	797b      	ldrb	r3, [r7, #5]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fea0 	bl	80013a0 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8001660:	e024      	b.n	80016ac <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8001662:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001666:	79b9      	ldrb	r1, [r7, #6]
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fe98 	bl	80013a0 <ssd1306_DrawPixel>
    error2 = error * 2;
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	425b      	negs	r3, r3
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	429a      	cmp	r2, r3
 800167e:	dd08      	ble.n	8001692 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	b2da      	uxtb	r2, r3
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	4413      	add	r3, r2
 8001690:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	429a      	cmp	r2, r3
 8001698:	da08      	bge.n	80016ac <ssd1306_Line+0xc0>
    {
      error += deltaX;
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	4413      	add	r3, r2
 80016a0:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	79bb      	ldrb	r3, [r7, #6]
 80016a8:	4413      	add	r3, r2
 80016aa:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 80016ac:	79fa      	ldrb	r2, [r7, #7]
 80016ae:	797b      	ldrb	r3, [r7, #5]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d1d6      	bne.n	8001662 <ssd1306_Line+0x76>
 80016b4:	79ba      	ldrb	r2, [r7, #6]
 80016b6:	793b      	ldrb	r3, [r7, #4]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d1d2      	bne.n	8001662 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 80016bc:	bf00      	nop
}
 80016be:	3724      	adds	r7, #36	; 0x24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd90      	pop	{r4, r7, pc}

080016c4 <ssd1306_Polyline>:
//Draw polyline
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]
 80016d0:	4613      	mov	r3, r2
 80016d2:	707b      	strb	r3, [r7, #1]
  uint16_t i;
  if(par_vertex != 0){
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d02a      	beq.n	8001730 <ssd1306_Polyline+0x6c>
    for(i = 1; i < par_size; i++){
 80016da:	2301      	movs	r3, #1
 80016dc:	81fb      	strh	r3, [r7, #14]
 80016de:	e022      	b.n	8001726 <ssd1306_Polyline+0x62>
      ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 80016e0:	89fb      	ldrh	r3, [r7, #14]
 80016e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80016e6:	3b01      	subs	r3, #1
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	7818      	ldrb	r0, [r3, #0]
 80016f0:	89fb      	ldrh	r3, [r7, #14]
 80016f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80016f6:	3b01      	subs	r3, #1
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	7859      	ldrb	r1, [r3, #1]
 8001700:	89fb      	ldrh	r3, [r7, #14]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	781c      	ldrb	r4, [r3, #0]
 800170a:	89fb      	ldrh	r3, [r7, #14]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	785a      	ldrb	r2, [r3, #1]
 8001714:	787b      	ldrb	r3, [r7, #1]
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	4613      	mov	r3, r2
 800171a:	4622      	mov	r2, r4
 800171c:	f7ff ff66 	bl	80015ec <ssd1306_Line>
    for(i = 1; i < par_size; i++){
 8001720:	89fb      	ldrh	r3, [r7, #14]
 8001722:	3301      	adds	r3, #1
 8001724:	81fb      	strh	r3, [r7, #14]
 8001726:	89fa      	ldrh	r2, [r7, #14]
 8001728:	887b      	ldrh	r3, [r7, #2]
 800172a:	429a      	cmp	r2, r3
 800172c:	d3d8      	bcc.n	80016e0 <ssd1306_Polyline+0x1c>
  }
  else
  {
    /*nothing to do*/
  }
  return;
 800172e:	bf00      	nop
 8001730:	bf00      	nop
}
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bd90      	pop	{r4, r7, pc}

08001738 <ssd1306_DegToRad>:
/*Convert Degrees to Radians*/
static float ssd1306_DegToRad(float par_deg) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * 3.14 / 180.0;
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7fe ff08 	bl	8000558 <__aeabi_f2d>
 8001748:	a30e      	add	r3, pc, #56	; (adr r3, 8001784 <ssd1306_DegToRad+0x4c>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	f7fe ff5b 	bl	8000608 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <ssd1306_DegToRad+0x48>)
 8001760:	f7ff f87c 	bl	800085c <__aeabi_ddiv>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff fa0e 	bl	8000b8c <__aeabi_d2f>
 8001770:	4603      	mov	r3, r0
 8001772:	ee07 3a90 	vmov	s15, r3
}
 8001776:	eeb0 0a67 	vmov.f32	s0, s15
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40668000 	.word	0x40668000
 8001784:	51eb851f 	.word	0x51eb851f
 8001788:	40091eb8 	.word	0x40091eb8

0800178c <ssd1306_NormalizeTo0_360>:
/*Normalize degree to [0;360]*/
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	80fb      	strh	r3, [r7, #6]
  uint16_t loc_angle;
  if(par_deg <= 360)
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800179c:	d802      	bhi.n	80017a4 <ssd1306_NormalizeTo0_360+0x18>
  {
    loc_angle = par_deg;
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	81fb      	strh	r3, [r7, #14]
 80017a2:	e013      	b.n	80017cc <ssd1306_NormalizeTo0_360+0x40>
  }
  else
  {
    loc_angle = par_deg % 360;
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	08da      	lsrs	r2, r3, #3
 80017a8:	490c      	ldr	r1, [pc, #48]	; (80017dc <ssd1306_NormalizeTo0_360+0x50>)
 80017aa:	fba1 1202 	umull	r1, r2, r1, r2
 80017ae:	0892      	lsrs	r2, r2, #2
 80017b0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80017b4:	fb01 f202 	mul.w	r2, r1, r2
 80017b8:	1a9b      	subs	r3, r3, r2
 80017ba:	81fb      	strh	r3, [r7, #14]
    loc_angle = ((par_deg != 0)?par_deg:360);
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <ssd1306_NormalizeTo0_360+0x3a>
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	e001      	b.n	80017ca <ssd1306_NormalizeTo0_360+0x3e>
 80017c6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80017ca:	81fb      	strh	r3, [r7, #14]
  }
  return loc_angle;
 80017cc:	89fb      	ldrh	r3, [r7, #14]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	16c16c17 	.word	0x16c16c17

080017e0 <ssd1306_DrawArc>:
/*DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af02      	add	r7, sp, #8
 80017e6:	4604      	mov	r4, r0
 80017e8:	4608      	mov	r0, r1
 80017ea:	4611      	mov	r1, r2
 80017ec:	461a      	mov	r2, r3
 80017ee:	4623      	mov	r3, r4
 80017f0:	71fb      	strb	r3, [r7, #7]
 80017f2:	4603      	mov	r3, r0
 80017f4:	71bb      	strb	r3, [r7, #6]
 80017f6:	460b      	mov	r3, r1
 80017f8:	717b      	strb	r3, [r7, #5]
 80017fa:	4613      	mov	r3, r2
 80017fc:	807b      	strh	r3, [r7, #2]
    #define CIRCLE_APPROXIMATION_SEGMENTS 36
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1,xp2;
    uint8_t yp1,yp2;
    uint32_t count = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
    uint32_t loc_sweep = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 8001806:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ffbf 	bl	800178c <ssd1306_NormalizeTo0_360>
 800180e:	4603      	mov	r3, r0
 8001810:	617b      	str	r3, [r7, #20]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ffb9 	bl	800178c <ssd1306_NormalizeTo0_360>
 800181a:	4603      	mov	r3, r0
 800181c:	4a74      	ldr	r2, [pc, #464]	; (80019f0 <ssd1306_DrawArc+0x210>)
 800181e:	fb82 1203 	smull	r1, r2, r2, r3
 8001822:	1092      	asrs	r2, r2, #2
 8001824:	17db      	asrs	r3, r3, #31
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	61fb      	str	r3, [r7, #28]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4613      	mov	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	08db      	lsrs	r3, r3, #3
 8001836:	4a6f      	ldr	r2, [pc, #444]	; (80019f4 <ssd1306_DrawArc+0x214>)
 8001838:	fba2 2303 	umull	r2, r3, r2, r3
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001858:	edc7 7a03 	vstr	s15, [r7, #12]
    while(count < approx_segments)
 800185c:	e0be      	b.n	80019dc <ssd1306_DrawArc+0x1fc>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001868:	edd7 7a03 	vldr	s15, [r7, #12]
 800186c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001870:	eeb0 0a67 	vmov.f32	s0, s15
 8001874:	f7ff ff60 	bl	8001738 <ssd1306_DegToRad>
 8001878:	ed87 0a06 	vstr	s0, [r7, #24]
        xp1 = x + (int8_t)(sin(rad)*radius);
 800187c:	69b8      	ldr	r0, [r7, #24]
 800187e:	f7fe fe6b 	bl	8000558 <__aeabi_f2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	ec43 2b10 	vmov	d0, r2, r3
 800188a:	f003 fb29 	bl	8004ee0 <sin>
 800188e:	ec55 4b10 	vmov	r4, r5, d0
 8001892:	797b      	ldrb	r3, [r7, #5]
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe4d 	bl	8000534 <__aeabi_i2d>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4620      	mov	r0, r4
 80018a0:	4629      	mov	r1, r5
 80018a2:	f7fe feb1 	bl	8000608 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	f7ff f945 	bl	8000b3c <__aeabi_d2iz>
 80018b2:	4603      	mov	r3, r0
 80018b4:	b25b      	sxtb	r3, r3
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	4413      	add	r3, r2
 80018bc:	72fb      	strb	r3, [r7, #11]
        yp1 = y + (int8_t)(cos(rad)*radius);    
 80018be:	69b8      	ldr	r0, [r7, #24]
 80018c0:	f7fe fe4a 	bl	8000558 <__aeabi_f2d>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	ec43 2b10 	vmov	d0, r2, r3
 80018cc:	f003 fab8 	bl	8004e40 <cos>
 80018d0:	ec55 4b10 	vmov	r4, r5, d0
 80018d4:	797b      	ldrb	r3, [r7, #5]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fe2c 	bl	8000534 <__aeabi_i2d>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4620      	mov	r0, r4
 80018e2:	4629      	mov	r1, r5
 80018e4:	f7fe fe90 	bl	8000608 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f924 	bl	8000b3c <__aeabi_d2iz>
 80018f4:	4603      	mov	r3, r0
 80018f6:	b25b      	sxtb	r3, r3
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	79bb      	ldrb	r3, [r7, #6]
 80018fc:	4413      	add	r3, r2
 80018fe:	72bb      	strb	r3, [r7, #10]
        count++;
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	3301      	adds	r3, #1
 8001904:	61fb      	str	r3, [r7, #28]
        if(count != approx_segments)
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	429a      	cmp	r2, r3
 800190c:	d00f      	beq.n	800192e <ssd1306_DrawArc+0x14e>
        {
            rad = ssd1306_DegToRad(count*approx_degree);
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	ee07 3a90 	vmov	s15, r3
 8001914:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001918:	edd7 7a03 	vldr	s15, [r7, #12]
 800191c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001920:	eeb0 0a67 	vmov.f32	s0, s15
 8001924:	f7ff ff08 	bl	8001738 <ssd1306_DegToRad>
 8001928:	ed87 0a06 	vstr	s0, [r7, #24]
 800192c:	e00a      	b.n	8001944 <ssd1306_DrawArc+0x164>
        }
        else
        {            
            rad = ssd1306_DegToRad(loc_sweep);
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	ee07 3a90 	vmov	s15, r3
 8001934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001938:	eeb0 0a67 	vmov.f32	s0, s15
 800193c:	f7ff fefc 	bl	8001738 <ssd1306_DegToRad>
 8001940:	ed87 0a06 	vstr	s0, [r7, #24]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 8001944:	69b8      	ldr	r0, [r7, #24]
 8001946:	f7fe fe07 	bl	8000558 <__aeabi_f2d>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	ec43 2b10 	vmov	d0, r2, r3
 8001952:	f003 fac5 	bl	8004ee0 <sin>
 8001956:	ec55 4b10 	vmov	r4, r5, d0
 800195a:	797b      	ldrb	r3, [r7, #5]
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fde9 	bl	8000534 <__aeabi_i2d>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4620      	mov	r0, r4
 8001968:	4629      	mov	r1, r5
 800196a:	f7fe fe4d 	bl	8000608 <__aeabi_dmul>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff f8e1 	bl	8000b3c <__aeabi_d2iz>
 800197a:	4603      	mov	r3, r0
 800197c:	b25b      	sxtb	r3, r3
 800197e:	b2da      	uxtb	r2, r3
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	4413      	add	r3, r2
 8001984:	727b      	strb	r3, [r7, #9]
        yp2 = y + (int8_t)(cos(rad)*radius);    
 8001986:	69b8      	ldr	r0, [r7, #24]
 8001988:	f7fe fde6 	bl	8000558 <__aeabi_f2d>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	ec43 2b10 	vmov	d0, r2, r3
 8001994:	f003 fa54 	bl	8004e40 <cos>
 8001998:	ec55 4b10 	vmov	r4, r5, d0
 800199c:	797b      	ldrb	r3, [r7, #5]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fdc8 	bl	8000534 <__aeabi_i2d>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4620      	mov	r0, r4
 80019aa:	4629      	mov	r1, r5
 80019ac:	f7fe fe2c 	bl	8000608 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	f7ff f8c0 	bl	8000b3c <__aeabi_d2iz>
 80019bc:	4603      	mov	r3, r0
 80019be:	b25b      	sxtb	r3, r3
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	79bb      	ldrb	r3, [r7, #6]
 80019c4:	4413      	add	r3, r2
 80019c6:	723b      	strb	r3, [r7, #8]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 80019c8:	7a3c      	ldrb	r4, [r7, #8]
 80019ca:	7a7a      	ldrb	r2, [r7, #9]
 80019cc:	7ab9      	ldrb	r1, [r7, #10]
 80019ce:	7af8      	ldrb	r0, [r7, #11]
 80019d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	4623      	mov	r3, r4
 80019d8:	f7ff fe08 	bl	80015ec <ssd1306_Line>
    while(count < approx_segments)
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	f4ff af3c 	bcc.w	800185e <ssd1306_DrawArc+0x7e>
    }
    
    return;
 80019e6:	bf00      	nop
}
 80019e8:	3720      	adds	r7, #32
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bdb0      	pop	{r4, r5, r7, pc}
 80019ee:	bf00      	nop
 80019f0:	66666667 	.word	0x66666667
 80019f4:	16c16c17 	.word	0x16c16c17

080019f8 <ssd1306_DrawCircle>:
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4604      	mov	r4, r0
 8001a00:	4608      	mov	r0, r1
 8001a02:	4611      	mov	r1, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4623      	mov	r3, r4
 8001a08:	71fb      	strb	r3, [r7, #7]
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71bb      	strb	r3, [r7, #6]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	717b      	strb	r3, [r7, #5]
 8001a12:	4613      	mov	r3, r2
 8001a14:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 8001a16:	797b      	ldrb	r3, [r7, #5]
 8001a18:	425b      	negs	r3, r3
 8001a1a:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8001a20:	797b      	ldrb	r3, [r7, #5]
 8001a22:	f1c3 0301 	rsb	r3, r3, #1
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	db65      	blt.n	8001afe <ssd1306_DrawCircle+0x106>
 8001a32:	79bb      	ldrb	r3, [r7, #6]
 8001a34:	2b3f      	cmp	r3, #63	; 0x3f
 8001a36:	d862      	bhi.n	8001afe <ssd1306_DrawCircle+0x106>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	79fa      	ldrb	r2, [r7, #7]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	b2d8      	uxtb	r0, r3
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	79bb      	ldrb	r3, [r7, #6]
 8001a48:	4413      	add	r3, r2
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	793a      	ldrb	r2, [r7, #4]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f7ff fca6 	bl	80013a0 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	b2d8      	uxtb	r0, r3
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	79bb      	ldrb	r3, [r7, #6]
 8001a64:	4413      	add	r3, r2
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	793a      	ldrb	r2, [r7, #4]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f7ff fc98 	bl	80013a0 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	4413      	add	r3, r2
 8001a78:	b2d8      	uxtb	r0, r3
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	79ba      	ldrb	r2, [r7, #6]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	793a      	ldrb	r2, [r7, #4]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f7ff fc8a 	bl	80013a0 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	79fa      	ldrb	r2, [r7, #7]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	b2d8      	uxtb	r0, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	79ba      	ldrb	r2, [r7, #6]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	793a      	ldrb	r2, [r7, #4]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7ff fc7c 	bl	80013a0 <ssd1306_DrawPixel>
        e2 = err;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dc13      	bgt.n	8001adc <ssd1306_DrawCircle+0xe4>
            y++;
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	3301      	adds	r3, #1
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	425b      	negs	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d105      	bne.n	8001adc <ssd1306_DrawCircle+0xe4>
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	dc01      	bgt.n	8001adc <ssd1306_DrawCircle+0xe4>
              e2 = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	dd08      	ble.n	8001af6 <ssd1306_DrawCircle+0xfe>
          x++;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	3301      	adds	r3, #1
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	dd9d      	ble.n	8001a38 <ssd1306_DrawCircle+0x40>

    return;
 8001afc:	e000      	b.n	8001b00 <ssd1306_DrawCircle+0x108>
    return;
 8001afe:	bf00      	nop
}
 8001b00:	371c      	adds	r7, #28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd90      	pop	{r4, r7, pc}

08001b06 <ssd1306_DrawRectangle>:

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001b06:	b590      	push	{r4, r7, lr}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af02      	add	r7, sp, #8
 8001b0c:	4604      	mov	r4, r0
 8001b0e:	4608      	mov	r0, r1
 8001b10:	4611      	mov	r1, r2
 8001b12:	461a      	mov	r2, r3
 8001b14:	4623      	mov	r3, r4
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	4603      	mov	r3, r0
 8001b1a:	71bb      	strb	r3, [r7, #6]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	717b      	strb	r3, [r7, #5]
 8001b20:	4613      	mov	r3, r2
 8001b22:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8001b24:	79bc      	ldrb	r4, [r7, #6]
 8001b26:	797a      	ldrb	r2, [r7, #5]
 8001b28:	79b9      	ldrb	r1, [r7, #6]
 8001b2a:	79f8      	ldrb	r0, [r7, #7]
 8001b2c:	7e3b      	ldrb	r3, [r7, #24]
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	4623      	mov	r3, r4
 8001b32:	f7ff fd5b 	bl	80015ec <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8001b36:	793c      	ldrb	r4, [r7, #4]
 8001b38:	797a      	ldrb	r2, [r7, #5]
 8001b3a:	79b9      	ldrb	r1, [r7, #6]
 8001b3c:	7978      	ldrb	r0, [r7, #5]
 8001b3e:	7e3b      	ldrb	r3, [r7, #24]
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	4623      	mov	r3, r4
 8001b44:	f7ff fd52 	bl	80015ec <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8001b48:	793c      	ldrb	r4, [r7, #4]
 8001b4a:	79fa      	ldrb	r2, [r7, #7]
 8001b4c:	7939      	ldrb	r1, [r7, #4]
 8001b4e:	7978      	ldrb	r0, [r7, #5]
 8001b50:	7e3b      	ldrb	r3, [r7, #24]
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	4623      	mov	r3, r4
 8001b56:	f7ff fd49 	bl	80015ec <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8001b5a:	79bc      	ldrb	r4, [r7, #6]
 8001b5c:	79fa      	ldrb	r2, [r7, #7]
 8001b5e:	7939      	ldrb	r1, [r7, #4]
 8001b60:	79f8      	ldrb	r0, [r7, #7]
 8001b62:	7e3b      	ldrb	r3, [r7, #24]
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	4623      	mov	r3, r4
 8001b68:	f7ff fd40 	bl	80015ec <ssd1306_Line>

  return;
 8001b6c:	bf00      	nop
}
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd90      	pop	{r4, r7, pc}

08001b74 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001b7e:	2381      	movs	r3, #129	; 0x81
 8001b80:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fb23 	bl	80011d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fb1f 	bl	80011d0 <ssd1306_WriteCommand>
}
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001bac:	23af      	movs	r3, #175	; 0xaf
 8001bae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <ssd1306_SetDisplayOn+0x38>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	719a      	strb	r2, [r3, #6]
 8001bb6:	e004      	b.n	8001bc2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001bb8:	23ae      	movs	r3, #174	; 0xae
 8001bba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <ssd1306_SetDisplayOn+0x38>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fb03 	bl	80011d0 <ssd1306_WriteCommand>
}
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200004b0 	.word	0x200004b0

08001bd8 <ssd1306_TestBorder>:
#include <string.h>
#include <stdio.h>
#include "ssd1306.h"
#include "ssd1306_tests.h"

void ssd1306_TestBorder() {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8001bde:	2000      	movs	r0, #0
 8001be0:	f7ff fb92 	bl	8001308 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8001be4:	f000 fa6e 	bl	80020c4 <HAL_GetTick>
 8001be8:	60b8      	str	r0, [r7, #8]
    uint32_t end = start;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	607b      	str	r3, [r7, #4]
    uint8_t x = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	73bb      	strb	r3, [r7, #14]
    do {
        ssd1306_DrawPixel(x, y, Black);
 8001bf6:	7bb9      	ldrb	r1, [r7, #14]
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fbcf 	bl	80013a0 <ssd1306_DrawPixel>

        if((y == 0) && (x < 127))
 8001c02:	7bbb      	ldrb	r3, [r7, #14]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d106      	bne.n	8001c16 <ssd1306_TestBorder+0x3e>
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b7e      	cmp	r3, #126	; 0x7e
 8001c0c:	d803      	bhi.n	8001c16 <ssd1306_TestBorder+0x3e>
            x++;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	3301      	adds	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	e016      	b.n	8001c44 <ssd1306_TestBorder+0x6c>
        else if((x == 127) && (y < (SSD1306_HEIGHT-1)))
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	2b7f      	cmp	r3, #127	; 0x7f
 8001c1a:	d106      	bne.n	8001c2a <ssd1306_TestBorder+0x52>
 8001c1c:	7bbb      	ldrb	r3, [r7, #14]
 8001c1e:	2b3e      	cmp	r3, #62	; 0x3e
 8001c20:	d803      	bhi.n	8001c2a <ssd1306_TestBorder+0x52>
            y++;
 8001c22:	7bbb      	ldrb	r3, [r7, #14]
 8001c24:	3301      	adds	r3, #1
 8001c26:	73bb      	strb	r3, [r7, #14]
 8001c28:	e00c      	b.n	8001c44 <ssd1306_TestBorder+0x6c>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 8001c2a:	7bbb      	ldrb	r3, [r7, #14]
 8001c2c:	2b3f      	cmp	r3, #63	; 0x3f
 8001c2e:	d106      	bne.n	8001c3e <ssd1306_TestBorder+0x66>
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <ssd1306_TestBorder+0x66>
            x--;
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
 8001c3c:	e002      	b.n	8001c44 <ssd1306_TestBorder+0x6c>
        else
            y--;
 8001c3e:	7bbb      	ldrb	r3, [r7, #14]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	73bb      	strb	r3, [r7, #14]

        ssd1306_DrawPixel(x, y, White);
 8001c44:	7bb9      	ldrb	r1, [r7, #14]
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fba8 	bl	80013a0 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 8001c50:	f7ff fb7e 	bl	8001350 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8001c54:	2005      	movs	r0, #5
 8001c56:	f000 fa41 	bl	80020dc <HAL_Delay>
        end = HAL_GetTick();
 8001c5a:	f000 fa33 	bl	80020c4 <HAL_GetTick>
 8001c5e:	6078      	str	r0, [r7, #4]
    } while((end - start) < 8000);
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001c6a:	d3c4      	bcc.n	8001bf6 <ssd1306_TestBorder+0x1e>
   
    HAL_Delay(1000);
 8001c6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c70:	f000 fa34 	bl	80020dc <HAL_Delay>
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <ssd1306_TestFonts>:

void ssd1306_TestFonts() {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	71fb      	strb	r3, [r7, #7]
	ssd1306_Fill(Black);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f7ff fb3e 	bl	8001308 <ssd1306_Fill>

	#ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_SetCursor(2, y);
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	2002      	movs	r0, #2
 8001c92:	f7ff fc93 	bl	80015bc <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 8001c96:	4a1b      	ldr	r2, [pc, #108]	; (8001d04 <ssd1306_TestFonts+0x88>)
 8001c98:	2301      	movs	r3, #1
 8001c9a:	ca06      	ldmia	r2, {r1, r2}
 8001c9c:	481a      	ldr	r0, [pc, #104]	; (8001d08 <ssd1306_TestFonts+0x8c>)
 8001c9e:	f7ff fc67 	bl	8001570 <ssd1306_WriteString>
    y += 26;
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	331a      	adds	r3, #26
 8001ca6:	71fb      	strb	r3, [r7, #7]
	#endif

	#ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	4619      	mov	r1, r3
 8001cac:	2002      	movs	r0, #2
 8001cae:	f7ff fc85 	bl	80015bc <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 8001cb2:	4a16      	ldr	r2, [pc, #88]	; (8001d0c <ssd1306_TestFonts+0x90>)
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	ca06      	ldmia	r2, {r1, r2}
 8001cb8:	4815      	ldr	r0, [pc, #84]	; (8001d10 <ssd1306_TestFonts+0x94>)
 8001cba:	f7ff fc59 	bl	8001570 <ssd1306_WriteString>
    y += 18;
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	3312      	adds	r3, #18
 8001cc2:	71fb      	strb	r3, [r7, #7]
	#endif

	#ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	2002      	movs	r0, #2
 8001cca:	f7ff fc77 	bl	80015bc <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 8001cce:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <ssd1306_TestFonts+0x98>)
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	ca06      	ldmia	r2, {r1, r2}
 8001cd4:	4810      	ldr	r0, [pc, #64]	; (8001d18 <ssd1306_TestFonts+0x9c>)
 8001cd6:	f7ff fc4b 	bl	8001570 <ssd1306_WriteString>
    y += 10;
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	330a      	adds	r3, #10
 8001cde:	71fb      	strb	r3, [r7, #7]
	#endif

	#ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	2002      	movs	r0, #2
 8001ce6:	f7ff fc69 	bl	80015bc <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 8001cea:	4a0c      	ldr	r2, [pc, #48]	; (8001d1c <ssd1306_TestFonts+0xa0>)
 8001cec:	2301      	movs	r3, #1
 8001cee:	ca06      	ldmia	r2, {r1, r2}
 8001cf0:	480b      	ldr	r0, [pc, #44]	; (8001d20 <ssd1306_TestFonts+0xa4>)
 8001cf2:	f7ff fc3d 	bl	8001570 <ssd1306_WriteString>
	#endif

    ssd1306_UpdateScreen();
 8001cf6:	f7ff fb2b 	bl	8001350 <ssd1306_UpdateScreen>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2000001c 	.word	0x2000001c
 8001d08:	08005f68 	.word	0x08005f68
 8001d0c:	20000014 	.word	0x20000014
 8001d10:	08005f74 	.word	0x08005f74
 8001d14:	2000000c 	.word	0x2000000c
 8001d18:	08005f80 	.word	0x08005f80
 8001d1c:	20000004 	.word	0x20000004
 8001d20:	08005f8c 	.word	0x08005f8c

08001d24 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 8001d24:	b5b0      	push	{r4, r5, r7, lr}
 8001d26:	b098      	sub	sp, #96	; 0x60
 8001d28:	af00      	add	r7, sp, #0
    ssd1306_Fill(White);
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f7ff faec 	bl	8001308 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8001d30:	f000 f9c8 	bl	80020c4 <HAL_GetTick>
 8001d34:	65b8      	str	r0, [r7, #88]	; 0x58
    uint32_t end = start;
 8001d36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d38:	657b      	str	r3, [r7, #84]	; 0x54
    int fps = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
    char message[] = "ABCDEFGHIJK";
 8001d3e:	4a3e      	ldr	r2, [pc, #248]	; (8001e38 <ssd1306_TestFPS+0x114>)
 8001d40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d44:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1306_SetCursor(2,0);
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2002      	movs	r0, #2
 8001d4e:	f7ff fc35 	bl	80015bc <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 8001d52:	4a3a      	ldr	r2, [pc, #232]	; (8001e3c <ssd1306_TestFPS+0x118>)
 8001d54:	2300      	movs	r3, #0
 8001d56:	ca06      	ldmia	r2, {r1, r2}
 8001d58:	4839      	ldr	r0, [pc, #228]	; (8001e40 <ssd1306_TestFPS+0x11c>)
 8001d5a:	f7ff fc09 	bl	8001570 <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 8001d5e:	2112      	movs	r1, #18
 8001d60:	2002      	movs	r0, #2
 8001d62:	f7ff fc2b 	bl	80015bc <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 8001d66:	4a35      	ldr	r2, [pc, #212]	; (8001e3c <ssd1306_TestFPS+0x118>)
 8001d68:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	ca06      	ldmia	r2, {r1, r2}
 8001d70:	f7ff fbfe 	bl	8001570 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8001d74:	f7ff faec 	bl	8001350 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 8001d78:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001d7c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        memmove(message, message+1, sizeof(message)-2);
 8001d80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d84:	3301      	adds	r3, #1
 8001d86:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001d8a:	220a      	movs	r2, #10
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f002 fc19 	bl	80045c4 <memmove>
        message[sizeof(message)-2] = ch;
 8001d92:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001d96:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

        fps++;
 8001d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
        end = HAL_GetTick();
 8001da0:	f000 f990 	bl	80020c4 <HAL_GetTick>
 8001da4:	6578      	str	r0, [r7, #84]	; 0x54
    } while((end - start) < 5000);
 8001da6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001da8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f241 3287 	movw	r2, #4999	; 0x1387
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d9d4      	bls.n	8001d5e <ssd1306_TestFPS+0x3a>
   
    HAL_Delay(1000);
 8001db4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001db8:	f000 f990 	bl	80020dc <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 8001dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc6:	ee17 0a90 	vmov	r0, s15
 8001dca:	f7fe fbc5 	bl	8000558 <__aeabi_f2d>
 8001dce:	4604      	mov	r4, r0
 8001dd0:	460d      	mov	r5, r1
 8001dd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fb9b 	bl	8000514 <__aeabi_ui2d>
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <ssd1306_TestFPS+0x120>)
 8001de4:	f7fe fd3a 	bl	800085c <__aeabi_ddiv>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4620      	mov	r0, r4
 8001dee:	4629      	mov	r1, r5
 8001df0:	f7fe fd34 	bl	800085c <__aeabi_ddiv>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f7fe fe9e 	bl	8000b3c <__aeabi_d2iz>
 8001e00:	4603      	mov	r3, r0
 8001e02:	65fb      	str	r3, [r7, #92]	; 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 8001e04:	1d38      	adds	r0, r7, #4
 8001e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e08:	4a0f      	ldr	r2, [pc, #60]	; (8001e48 <ssd1306_TestFPS+0x124>)
 8001e0a:	2140      	movs	r1, #64	; 0x40
 8001e0c:	f002 fbfc 	bl	8004608 <sniprintf>
   
    ssd1306_Fill(White);
 8001e10:	2001      	movs	r0, #1
 8001e12:	f7ff fa79 	bl	8001308 <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 8001e16:	2102      	movs	r1, #2
 8001e18:	2002      	movs	r0, #2
 8001e1a:	f7ff fbcf 	bl	80015bc <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 8001e1e:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <ssd1306_TestFPS+0x118>)
 8001e20:	1d38      	adds	r0, r7, #4
 8001e22:	2300      	movs	r3, #0
 8001e24:	ca06      	ldmia	r2, {r1, r2}
 8001e26:	f7ff fba3 	bl	8001570 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001e2a:	f7ff fa91 	bl	8001350 <ssd1306_UpdateScreen>
}
 8001e2e:	bf00      	nop
 8001e30:	3760      	adds	r7, #96	; 0x60
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bdb0      	pop	{r4, r5, r7, pc}
 8001e36:	bf00      	nop
 8001e38:	08005fac 	.word	0x08005fac
 8001e3c:	20000014 	.word	0x20000014
 8001e40:	08005f98 	.word	0x08005f98
 8001e44:	408f4000 	.word	0x408f4000
 8001e48:	08005fa4 	.word	0x08005fa4

08001e4c <ssd1306_TestLine>:

void ssd1306_TestLine() {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 8001e52:	2301      	movs	r3, #1
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	233f      	movs	r3, #63	; 0x3f
 8001e58:	227f      	movs	r2, #127	; 0x7f
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f7ff fbc5 	bl	80015ec <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 8001e62:	2301      	movs	r3, #1
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	233f      	movs	r3, #63	; 0x3f
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	207f      	movs	r0, #127	; 0x7f
 8001e6e:	f7ff fbbd 	bl	80015ec <ssd1306_Line>
  ssd1306_UpdateScreen();
 8001e72:	f7ff fa6d 	bl	8001350 <ssd1306_UpdateScreen>
  return;
 8001e76:	bf00      	nop
}
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	e028      	b.n	8001eda <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	0092      	lsls	r2, r2, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	3301      	adds	r3, #1
 8001e96:	b2d8      	uxtb	r0, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	0092      	lsls	r2, r2, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	b2d9      	uxtb	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	0092      	lsls	r2, r2, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461c      	mov	r4, r3
 8001ec0:	00a4      	lsls	r4, r4, #2
 8001ec2:	4423      	add	r3, r4
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2401      	movs	r4, #1
 8001ece:	9400      	str	r4, [sp, #0]
 8001ed0:	f7ff fe19 	bl	8001b06 <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d9d3      	bls.n	8001e88 <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 8001ee0:	f7ff fa36 	bl	8001350 <ssd1306_UpdateScreen>
  return;
 8001ee4:	bf00      	nop
}
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd90      	pop	{r4, r7, pc}

08001eec <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	e010      	b.n	8001f1a <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20* delta+30, 15, 10, White);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	0092      	lsls	r2, r2, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	331e      	adds	r3, #30
 8001f08:	b2d8      	uxtb	r0, r3
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	220a      	movs	r2, #10
 8001f0e:	210f      	movs	r1, #15
 8001f10:	f7ff fd72 	bl	80019f8 <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3301      	adds	r3, #1
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d9eb      	bls.n	8001ef8 <ssd1306_TestCircle+0xc>
  }
  ssd1306_UpdateScreen();
 8001f20:	f7ff fa16 	bl	8001350 <ssd1306_UpdateScreen>
  return;
 8001f24:	bf00      	nop
}
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <ssd1306_TestArc>:

void ssd1306_TestArc() {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 8001f32:	2301      	movs	r3, #1
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2314      	movs	r3, #20
 8001f3e:	221e      	movs	r2, #30
 8001f40:	211e      	movs	r1, #30
 8001f42:	201e      	movs	r0, #30
 8001f44:	f7ff fc4c 	bl	80017e0 <ssd1306_DrawArc>
  ssd1306_UpdateScreen();
 8001f48:	f7ff fa02 	bl	8001350 <ssd1306_UpdateScreen>
  return;
 8001f4c:	bf00      	nop
}
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <ssd1306_TestPolyline+0x28>)
 8001f5c:	463c      	mov	r4, r7
 8001f5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f60:	c407      	stmia	r4!, {r0, r1, r2}
 8001f62:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 8001f64:	463b      	mov	r3, r7
 8001f66:	2201      	movs	r2, #1
 8001f68:	2107      	movs	r1, #7
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fbaa 	bl	80016c4 <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 8001f70:	f7ff f9ee 	bl	8001350 <ssd1306_UpdateScreen>
  return;
 8001f74:	bf00      	nop
}
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd90      	pop	{r4, r7, pc}
 8001f7c:	08005fb8 	.word	0x08005fb8

08001f80 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8001f84:	f7ff f956 	bl	8001234 <ssd1306_Init>
    ssd1306_TestFPS();
 8001f88:	f7ff fecc 	bl	8001d24 <ssd1306_TestFPS>
    HAL_Delay(3000);
 8001f8c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f90:	f000 f8a4 	bl	80020dc <HAL_Delay>
    ssd1306_TestBorder();
 8001f94:	f7ff fe20 	bl	8001bd8 <ssd1306_TestBorder>
    ssd1306_TestFonts();
 8001f98:	f7ff fe70 	bl	8001c7c <ssd1306_TestFonts>
    HAL_Delay(3000);
 8001f9c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001fa0:	f000 f89c 	bl	80020dc <HAL_Delay>
    ssd1306_Fill(Black);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff f9af 	bl	8001308 <ssd1306_Fill>
    ssd1306_TestRectangle();
 8001faa:	f7ff ff67 	bl	8001e7c <ssd1306_TestRectangle>
    ssd1306_TestLine();
 8001fae:	f7ff ff4d 	bl	8001e4c <ssd1306_TestLine>
    HAL_Delay(3000);
 8001fb2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001fb6:	f000 f891 	bl	80020dc <HAL_Delay>
    ssd1306_Fill(Black);
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7ff f9a4 	bl	8001308 <ssd1306_Fill>
    ssd1306_TestPolyline();
 8001fc0:	f7ff ffc8 	bl	8001f54 <ssd1306_TestPolyline>
    HAL_Delay(3000);
 8001fc4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001fc8:	f000 f888 	bl	80020dc <HAL_Delay>
    ssd1306_Fill(Black);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7ff f99b 	bl	8001308 <ssd1306_Fill>
    ssd1306_TestArc();
 8001fd2:	f7ff ffab 	bl	8001f2c <ssd1306_TestArc>
    HAL_Delay(3000);
 8001fd6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001fda:	f000 f87f 	bl	80020dc <HAL_Delay>
    ssd1306_Fill(Black);
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f7ff f992 	bl	8001308 <ssd1306_Fill>
    ssd1306_TestCircle();
 8001fe4:	f7ff ff82 	bl	8001eec <ssd1306_TestCircle>
    HAL_Delay(3000);
 8001fe8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001fec:	f000 f876 	bl	80020dc <HAL_Delay>
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ffe:	2003      	movs	r0, #3
 8002000:	f000 f942 	bl	8002288 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002004:	2000      	movs	r0, #0
 8002006:	f000 f80d 	bl	8002024 <HAL_InitTick>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	71fb      	strb	r3, [r7, #7]
 8002014:	e001      	b.n	800201a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002016:	f7fe ffb1 	bl	8000f7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800201a:	79fb      	ldrb	r3, [r7, #7]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002030:	4b17      	ldr	r3, [pc, #92]	; (8002090 <HAL_InitTick+0x6c>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d023      	beq.n	8002080 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <HAL_InitTick+0x70>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <HAL_InitTick+0x6c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002046:	fbb3 f3f1 	udiv	r3, r3, r1
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f941 	bl	80022d6 <HAL_SYSTICK_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10f      	bne.n	800207a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b0f      	cmp	r3, #15
 800205e:	d809      	bhi.n	8002074 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002060:	2200      	movs	r2, #0
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002068:	f000 f919 	bl	800229e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800206c:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <HAL_InitTick+0x74>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e007      	b.n	8002084 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e004      	b.n	8002084 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
 800207e:	e001      	b.n	8002084 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002084:	7bfb      	ldrb	r3, [r7, #15]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000028 	.word	0x20000028
 8002094:	20000000 	.word	0x20000000
 8002098:	20000024 	.word	0x20000024

0800209c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_IncTick+0x20>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_IncTick+0x24>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <HAL_IncTick+0x24>)
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000028 	.word	0x20000028
 80020c0:	2000050c 	.word	0x2000050c

080020c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return uwTick;
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <HAL_GetTick+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	2000050c 	.word	0x2000050c

080020dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e4:	f7ff ffee 	bl	80020c4 <HAL_GetTick>
 80020e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020f4:	d005      	beq.n	8002102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <HAL_Delay+0x44>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002102:	bf00      	nop
 8002104:	f7ff ffde 	bl	80020c4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	429a      	cmp	r2, r3
 8002112:	d8f7      	bhi.n	8002104 <HAL_Delay+0x28>
  {
  }
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000028 	.word	0x20000028

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800214c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002156:	4a04      	ldr	r2, [pc, #16]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60d3      	str	r3, [r2, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	6039      	str	r1, [r7, #0]
 8002192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	2b00      	cmp	r3, #0
 800219a:	db0a      	blt.n	80021b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	490c      	ldr	r1, [pc, #48]	; (80021d4 <__NVIC_SetPriority+0x4c>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	0112      	lsls	r2, r2, #4
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	440b      	add	r3, r1
 80021ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b0:	e00a      	b.n	80021c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4908      	ldr	r1, [pc, #32]	; (80021d8 <__NVIC_SetPriority+0x50>)
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3b04      	subs	r3, #4
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	440b      	add	r3, r1
 80021c6:	761a      	strb	r2, [r3, #24]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000e100 	.word	0xe000e100
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f1c3 0307 	rsb	r3, r3, #7
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	bf28      	it	cs
 80021fa:	2304      	movcs	r3, #4
 80021fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3304      	adds	r3, #4
 8002202:	2b06      	cmp	r3, #6
 8002204:	d902      	bls.n	800220c <NVIC_EncodePriority+0x30>
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3b03      	subs	r3, #3
 800220a:	e000      	b.n	800220e <NVIC_EncodePriority+0x32>
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43da      	mvns	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	401a      	ands	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002224:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	43d9      	mvns	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	4313      	orrs	r3, r2
         );
}
 8002236:	4618      	mov	r0, r3
 8002238:	3724      	adds	r7, #36	; 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002254:	d301      	bcc.n	800225a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002256:	2301      	movs	r3, #1
 8002258:	e00f      	b.n	800227a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <SysTick_Config+0x40>)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3b01      	subs	r3, #1
 8002260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002262:	210f      	movs	r1, #15
 8002264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002268:	f7ff ff8e 	bl	8002188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <SysTick_Config+0x40>)
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002272:	4b04      	ldr	r3, [pc, #16]	; (8002284 <SysTick_Config+0x40>)
 8002274:	2207      	movs	r2, #7
 8002276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	e000e010 	.word	0xe000e010

08002288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ff47 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	4603      	mov	r3, r0
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
 80022aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022b0:	f7ff ff5c 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	6978      	ldr	r0, [r7, #20]
 80022bc:	f7ff ff8e 	bl	80021dc <NVIC_EncodePriority>
 80022c0:	4602      	mov	r2, r0
 80022c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff5d 	bl	8002188 <__NVIC_SetPriority>
}
 80022ce:	bf00      	nop
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ffb0 	bl	8002244 <SysTick_Config>
 80022e4:	4603      	mov	r3, r0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fe:	e166      	b.n	80025ce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	2101      	movs	r1, #1
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	4013      	ands	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 8158 	beq.w	80025c8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d00b      	beq.n	8002338 <HAL_GPIO_Init+0x48>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d007      	beq.n	8002338 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800232c:	2b11      	cmp	r3, #17
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b12      	cmp	r3, #18
 8002336:	d130      	bne.n	800239a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2203      	movs	r2, #3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800236e:	2201      	movs	r2, #1
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	f003 0201 	and.w	r2, r3, #1
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	2203      	movs	r2, #3
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0xea>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b12      	cmp	r3, #18
 80023d8:	d123      	bne.n	8002422 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	08da      	lsrs	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3208      	adds	r2, #8
 80023e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	220f      	movs	r2, #15
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	08da      	lsrs	r2, r3, #3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3208      	adds	r2, #8
 800241c:	6939      	ldr	r1, [r7, #16]
 800241e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	2203      	movs	r2, #3
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4013      	ands	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 0203 	and.w	r2, r3, #3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80b2 	beq.w	80025c8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002464:	4b61      	ldr	r3, [pc, #388]	; (80025ec <HAL_GPIO_Init+0x2fc>)
 8002466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002468:	4a60      	ldr	r2, [pc, #384]	; (80025ec <HAL_GPIO_Init+0x2fc>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6613      	str	r3, [r2, #96]	; 0x60
 8002470:	4b5e      	ldr	r3, [pc, #376]	; (80025ec <HAL_GPIO_Init+0x2fc>)
 8002472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800247c:	4a5c      	ldr	r2, [pc, #368]	; (80025f0 <HAL_GPIO_Init+0x300>)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	3302      	adds	r3, #2
 8002484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002488:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	220f      	movs	r2, #15
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024a6:	d02b      	beq.n	8002500 <HAL_GPIO_Init+0x210>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a52      	ldr	r2, [pc, #328]	; (80025f4 <HAL_GPIO_Init+0x304>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d025      	beq.n	80024fc <HAL_GPIO_Init+0x20c>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a51      	ldr	r2, [pc, #324]	; (80025f8 <HAL_GPIO_Init+0x308>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d01f      	beq.n	80024f8 <HAL_GPIO_Init+0x208>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a50      	ldr	r2, [pc, #320]	; (80025fc <HAL_GPIO_Init+0x30c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d019      	beq.n	80024f4 <HAL_GPIO_Init+0x204>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a4f      	ldr	r2, [pc, #316]	; (8002600 <HAL_GPIO_Init+0x310>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d013      	beq.n	80024f0 <HAL_GPIO_Init+0x200>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a4e      	ldr	r2, [pc, #312]	; (8002604 <HAL_GPIO_Init+0x314>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00d      	beq.n	80024ec <HAL_GPIO_Init+0x1fc>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a4d      	ldr	r2, [pc, #308]	; (8002608 <HAL_GPIO_Init+0x318>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d007      	beq.n	80024e8 <HAL_GPIO_Init+0x1f8>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a4c      	ldr	r2, [pc, #304]	; (800260c <HAL_GPIO_Init+0x31c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d101      	bne.n	80024e4 <HAL_GPIO_Init+0x1f4>
 80024e0:	2307      	movs	r3, #7
 80024e2:	e00e      	b.n	8002502 <HAL_GPIO_Init+0x212>
 80024e4:	2308      	movs	r3, #8
 80024e6:	e00c      	b.n	8002502 <HAL_GPIO_Init+0x212>
 80024e8:	2306      	movs	r3, #6
 80024ea:	e00a      	b.n	8002502 <HAL_GPIO_Init+0x212>
 80024ec:	2305      	movs	r3, #5
 80024ee:	e008      	b.n	8002502 <HAL_GPIO_Init+0x212>
 80024f0:	2304      	movs	r3, #4
 80024f2:	e006      	b.n	8002502 <HAL_GPIO_Init+0x212>
 80024f4:	2303      	movs	r3, #3
 80024f6:	e004      	b.n	8002502 <HAL_GPIO_Init+0x212>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e002      	b.n	8002502 <HAL_GPIO_Init+0x212>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <HAL_GPIO_Init+0x212>
 8002500:	2300      	movs	r3, #0
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	f002 0203 	and.w	r2, r2, #3
 8002508:	0092      	lsls	r2, r2, #2
 800250a:	4093      	lsls	r3, r2
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002512:	4937      	ldr	r1, [pc, #220]	; (80025f0 <HAL_GPIO_Init+0x300>)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	089b      	lsrs	r3, r3, #2
 8002518:	3302      	adds	r3, #2
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002520:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <HAL_GPIO_Init+0x320>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	43db      	mvns	r3, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002544:	4a32      	ldr	r2, [pc, #200]	; (8002610 <HAL_GPIO_Init+0x320>)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800254a:	4b31      	ldr	r3, [pc, #196]	; (8002610 <HAL_GPIO_Init+0x320>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800256e:	4a28      	ldr	r2, [pc, #160]	; (8002610 <HAL_GPIO_Init+0x320>)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002574:	4b26      	ldr	r3, [pc, #152]	; (8002610 <HAL_GPIO_Init+0x320>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	43db      	mvns	r3, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002598:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <HAL_GPIO_Init+0x320>)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800259e:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <HAL_GPIO_Init+0x320>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025c2:	4a13      	ldr	r2, [pc, #76]	; (8002610 <HAL_GPIO_Init+0x320>)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	3301      	adds	r3, #1
 80025cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f47f ae91 	bne.w	8002300 <HAL_GPIO_Init+0x10>
  }
}
 80025de:	bf00      	nop
 80025e0:	bf00      	nop
 80025e2:	371c      	adds	r7, #28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40010000 	.word	0x40010000
 80025f4:	48000400 	.word	0x48000400
 80025f8:	48000800 	.word	0x48000800
 80025fc:	48000c00 	.word	0x48000c00
 8002600:	48001000 	.word	0x48001000
 8002604:	48001400 	.word	0x48001400
 8002608:	48001800 	.word	0x48001800
 800260c:	48001c00 	.word	0x48001c00
 8002610:	40010400 	.word	0x40010400

08002614 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	887b      	ldrh	r3, [r7, #2]
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
 8002630:	e001      	b.n	8002636 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002636:	7bfb      	ldrb	r3, [r7, #15]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
 8002650:	4613      	mov	r3, r2
 8002652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002654:	787b      	ldrb	r3, [r7, #1]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002660:	e002      	b.n	8002668 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4013      	ands	r3, r2
 800268c:	041a      	lsls	r2, r3, #16
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	43d9      	mvns	r1, r3
 8002692:	887b      	ldrh	r3, [r7, #2]
 8002694:	400b      	ands	r3, r1
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	619a      	str	r2, [r3, #24]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e081      	b.n	80027be <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe fc78 	bl	8000fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2224      	movs	r2, #36	; 0x24
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002708:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d107      	bne.n	8002722 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	e006      	b.n	8002730 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800272e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d104      	bne.n	8002742 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002740:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002754:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002764:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	ea42 0103 	orr.w	r1, r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	021a      	lsls	r2, r3, #8
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69d9      	ldr	r1, [r3, #28]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1a      	ldr	r2, [r3, #32]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0201 	orr.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2220      	movs	r2, #32
 80027aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	4608      	mov	r0, r1
 80027d2:	4611      	mov	r1, r2
 80027d4:	461a      	mov	r2, r3
 80027d6:	4603      	mov	r3, r0
 80027d8:	817b      	strh	r3, [r7, #10]
 80027da:	460b      	mov	r3, r1
 80027dc:	813b      	strh	r3, [r7, #8]
 80027de:	4613      	mov	r3, r2
 80027e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b20      	cmp	r3, #32
 80027ec:	f040 80f9 	bne.w	80029e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <HAL_I2C_Mem_Write+0x34>
 80027f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d105      	bne.n	8002808 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002802:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0ed      	b.n	80029e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_I2C_Mem_Write+0x4e>
 8002812:	2302      	movs	r3, #2
 8002814:	e0e6      	b.n	80029e4 <HAL_I2C_Mem_Write+0x21c>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800281e:	f7ff fc51 	bl	80020c4 <HAL_GetTick>
 8002822:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2319      	movs	r3, #25
 800282a:	2201      	movs	r2, #1
 800282c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 f955 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0d1      	b.n	80029e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2221      	movs	r2, #33	; 0x21
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2240      	movs	r2, #64	; 0x40
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a3a      	ldr	r2, [r7, #32]
 800285a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002860:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002868:	88f8      	ldrh	r0, [r7, #6]
 800286a:	893a      	ldrh	r2, [r7, #8]
 800286c:	8979      	ldrh	r1, [r7, #10]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	9301      	str	r3, [sp, #4]
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	4603      	mov	r3, r0
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f8b9 	bl	80029f0 <I2C_RequestMemoryWrite>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0a9      	b.n	80029e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	2bff      	cmp	r3, #255	; 0xff
 8002898:	d90e      	bls.n	80028b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	22ff      	movs	r2, #255	; 0xff
 800289e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	8979      	ldrh	r1, [r7, #10]
 80028a8:	2300      	movs	r3, #0
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fa37 	bl	8002d24 <I2C_TransferConfig>
 80028b6:	e00f      	b.n	80028d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	8979      	ldrh	r1, [r7, #10]
 80028ca:	2300      	movs	r3, #0
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fa26 	bl	8002d24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f93f 	bl	8002b60 <I2C_WaitOnTXISFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e07b      	b.n	80029e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	781a      	ldrb	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d034      	beq.n	8002990 <HAL_I2C_Mem_Write+0x1c8>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292a:	2b00      	cmp	r3, #0
 800292c:	d130      	bne.n	8002990 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002934:	2200      	movs	r2, #0
 8002936:	2180      	movs	r1, #128	; 0x80
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 f8d1 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e04d      	b.n	80029e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	2bff      	cmp	r3, #255	; 0xff
 8002950:	d90e      	bls.n	8002970 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	22ff      	movs	r2, #255	; 0xff
 8002956:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295c:	b2da      	uxtb	r2, r3
 800295e:	8979      	ldrh	r1, [r7, #10]
 8002960:	2300      	movs	r3, #0
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 f9db 	bl	8002d24 <I2C_TransferConfig>
 800296e:	e00f      	b.n	8002990 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297e:	b2da      	uxtb	r2, r3
 8002980:	8979      	ldrh	r1, [r7, #10]
 8002982:	2300      	movs	r3, #0
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f9ca 	bl	8002d24 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d19e      	bne.n	80028d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f91e 	bl	8002be0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e01a      	b.n	80029e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2220      	movs	r2, #32
 80029b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6859      	ldr	r1, [r3, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <HAL_I2C_Mem_Write+0x224>)
 80029c2:	400b      	ands	r3, r1
 80029c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	fe00e800 	.word	0xfe00e800

080029f0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	4608      	mov	r0, r1
 80029fa:	4611      	mov	r1, r2
 80029fc:	461a      	mov	r2, r3
 80029fe:	4603      	mov	r3, r0
 8002a00:	817b      	strh	r3, [r7, #10]
 8002a02:	460b      	mov	r3, r1
 8002a04:	813b      	strh	r3, [r7, #8]
 8002a06:	4613      	mov	r3, r2
 8002a08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	8979      	ldrh	r1, [r7, #10]
 8002a10:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <I2C_RequestMemoryWrite+0xa4>)
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f983 	bl	8002d24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1e:	69fa      	ldr	r2, [r7, #28]
 8002a20:	69b9      	ldr	r1, [r7, #24]
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f89c 	bl	8002b60 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e02c      	b.n	8002a8c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d105      	bne.n	8002a44 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a38:	893b      	ldrh	r3, [r7, #8]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	629a      	str	r2, [r3, #40]	; 0x28
 8002a42:	e015      	b.n	8002a70 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a44:	893b      	ldrh	r3, [r7, #8]
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	69b9      	ldr	r1, [r7, #24]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f882 	bl	8002b60 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e012      	b.n	8002a8c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a66:	893b      	ldrh	r3, [r7, #8]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	2200      	movs	r2, #0
 8002a78:	2180      	movs	r1, #128	; 0x80
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f830 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	80002000 	.word	0x80002000

08002a98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d103      	bne.n	8002ab6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d007      	beq.n	8002ad4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699a      	ldr	r2, [r3, #24]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	619a      	str	r2, [r3, #24]
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	4613      	mov	r3, r2
 8002aee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af0:	e022      	b.n	8002b38 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af8:	d01e      	beq.n	8002b38 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afa:	f7ff fae3 	bl	80020c4 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d302      	bcc.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d113      	bne.n	8002b38 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b14:	f043 0220 	orr.w	r2, r3, #32
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e00f      	b.n	8002b58 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	4013      	ands	r3, r2
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d0cd      	beq.n	8002af2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b6c:	e02c      	b.n	8002bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f870 	bl	8002c58 <I2C_IsAcknowledgeFailed>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e02a      	b.n	8002bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b88:	d01e      	beq.n	8002bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8a:	f7ff fa9b 	bl	80020c4 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d302      	bcc.n	8002ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d113      	bne.n	8002bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba4:	f043 0220 	orr.w	r2, r3, #32
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e007      	b.n	8002bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d1cb      	bne.n	8002b6e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bec:	e028      	b.n	8002c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f830 	bl	8002c58 <I2C_IsAcknowledgeFailed>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e026      	b.n	8002c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c02:	f7ff fa5f 	bl	80020c4 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d302      	bcc.n	8002c18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d113      	bne.n	8002c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e007      	b.n	8002c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d1cf      	bne.n	8002bee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	2b10      	cmp	r3, #16
 8002c70:	d151      	bne.n	8002d16 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c72:	e022      	b.n	8002cba <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c7a:	d01e      	beq.n	8002cba <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7c:	f7ff fa22 	bl	80020c4 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d302      	bcc.n	8002c92 <I2C_IsAcknowledgeFailed+0x3a>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d113      	bne.n	8002cba <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	f043 0220 	orr.w	r2, r3, #32
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e02e      	b.n	8002d18 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d1d5      	bne.n	8002c74 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2210      	movs	r2, #16
 8002cce:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f7ff fedd 	bl	8002a98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <I2C_IsAcknowledgeFailed+0xc8>)
 8002cea:	400b      	ands	r3, r1
 8002cec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	f043 0204 	orr.w	r2, r3, #4
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	fe00e800 	.word	0xfe00e800

08002d24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	607b      	str	r3, [r7, #4]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	817b      	strh	r3, [r7, #10]
 8002d32:	4613      	mov	r3, r2
 8002d34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	0d5b      	lsrs	r3, r3, #21
 8002d40:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d44:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <I2C_TransferConfig+0x58>)
 8002d46:	430b      	orrs	r3, r1
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	ea02 0103 	and.w	r1, r2, r3
 8002d4e:	897b      	ldrh	r3, [r7, #10]
 8002d50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d54:	7a7b      	ldrb	r3, [r7, #9]
 8002d56:	041b      	lsls	r3, r3, #16
 8002d58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	431a      	orrs	r2, r3
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002d6e:	bf00      	nop
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	03ff63ff 	.word	0x03ff63ff

08002d80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d138      	bne.n	8002e08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e032      	b.n	8002e0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2224      	movs	r2, #36	; 0x24
 8002db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6819      	ldr	r1, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	e000      	b.n	8002e0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e08:	2302      	movs	r3, #2
  }
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d139      	bne.n	8002ea0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e033      	b.n	8002ea2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2224      	movs	r2, #36	; 0x24
 8002e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	021b      	lsls	r3, r3, #8
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e000      	b.n	8002ea2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ea0:	2302      	movs	r3, #2
  }
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ebe:	6013      	str	r3, [r2, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40007000 	.word	0x40007000

08002ed0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40007000 	.word	0x40007000

08002eec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002efa:	d130      	bne.n	8002f5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002efc:	4b23      	ldr	r3, [pc, #140]	; (8002f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f08:	d038      	beq.n	8002f7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f0a:	4b20      	ldr	r3, [pc, #128]	; (8002f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f12:	4a1e      	ldr	r2, [pc, #120]	; (8002f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f1a:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2232      	movs	r2, #50	; 0x32
 8002f20:	fb02 f303 	mul.w	r3, r2, r3
 8002f24:	4a1b      	ldr	r2, [pc, #108]	; (8002f94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0c9b      	lsrs	r3, r3, #18
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f30:	e002      	b.n	8002f38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f38:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f44:	d102      	bne.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f2      	bne.n	8002f32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f58:	d110      	bne.n	8002f7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e00f      	b.n	8002f7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6a:	d007      	beq.n	8002f7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f6c:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f74:	4a05      	ldr	r2, [pc, #20]	; (8002f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40007000 	.word	0x40007000
 8002f90:	20000000 	.word	0x20000000
 8002f94:	431bde83 	.word	0x431bde83

08002f98 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a04      	ldr	r2, [pc, #16]	; (8002fb4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa6:	6053      	str	r3, [r2, #4]
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40007000 	.word	0x40007000

08002fb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	f000 bc16 	b.w	80037f8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fcc:	4ba0      	ldr	r3, [pc, #640]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fd6:	4b9e      	ldr	r3, [pc, #632]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 80e4 	beq.w	80031b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d007      	beq.n	8003004 <HAL_RCC_OscConfig+0x4c>
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2b0c      	cmp	r3, #12
 8002ff8:	f040 808b 	bne.w	8003112 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	f040 8087 	bne.w	8003112 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003004:	4b92      	ldr	r3, [pc, #584]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_RCC_OscConfig+0x64>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e3ed      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1a      	ldr	r2, [r3, #32]
 8003020:	4b8b      	ldr	r3, [pc, #556]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d004      	beq.n	8003036 <HAL_RCC_OscConfig+0x7e>
 800302c:	4b88      	ldr	r3, [pc, #544]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003034:	e005      	b.n	8003042 <HAL_RCC_OscConfig+0x8a>
 8003036:	4b86      	ldr	r3, [pc, #536]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8003038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003042:	4293      	cmp	r3, r2
 8003044:	d223      	bcs.n	800308e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fd48 	bl	8003ae0 <RCC_SetFlashLatencyFromMSIRange>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e3ce      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800305a:	4b7d      	ldr	r3, [pc, #500]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a7c      	ldr	r2, [pc, #496]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8003060:	f043 0308 	orr.w	r3, r3, #8
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b7a      	ldr	r3, [pc, #488]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	4977      	ldr	r1, [pc, #476]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8003074:	4313      	orrs	r3, r2
 8003076:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003078:	4b75      	ldr	r3, [pc, #468]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	021b      	lsls	r3, r3, #8
 8003086:	4972      	ldr	r1, [pc, #456]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8003088:	4313      	orrs	r3, r2
 800308a:	604b      	str	r3, [r1, #4]
 800308c:	e025      	b.n	80030da <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800308e:	4b70      	ldr	r3, [pc, #448]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a6f      	ldr	r2, [pc, #444]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8003094:	f043 0308 	orr.w	r3, r3, #8
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	4b6d      	ldr	r3, [pc, #436]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	496a      	ldr	r1, [pc, #424]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030ac:	4b68      	ldr	r3, [pc, #416]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	4965      	ldr	r1, [pc, #404]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fd08 	bl	8003ae0 <RCC_SetFlashLatencyFromMSIRange>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e38e      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030da:	f000 fc75 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 80030de:	4602      	mov	r2, r0
 80030e0:	4b5b      	ldr	r3, [pc, #364]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	495a      	ldr	r1, [pc, #360]	; (8003254 <HAL_RCC_OscConfig+0x29c>)
 80030ec:	5ccb      	ldrb	r3, [r1, r3]
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	fa22 f303 	lsr.w	r3, r2, r3
 80030f6:	4a58      	ldr	r2, [pc, #352]	; (8003258 <HAL_RCC_OscConfig+0x2a0>)
 80030f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030fa:	4b58      	ldr	r3, [pc, #352]	; (800325c <HAL_RCC_OscConfig+0x2a4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe ff90 	bl	8002024 <HAL_InitTick>
 8003104:	4603      	mov	r3, r0
 8003106:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d052      	beq.n	80031b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	e372      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d032      	beq.n	8003180 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800311a:	4b4d      	ldr	r3, [pc, #308]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a4c      	ldr	r2, [pc, #304]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003126:	f7fe ffcd 	bl	80020c4 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800312e:	f7fe ffc9 	bl	80020c4 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e35b      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003140:	4b43      	ldr	r3, [pc, #268]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800314c:	4b40      	ldr	r3, [pc, #256]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a3f      	ldr	r2, [pc, #252]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8003152:	f043 0308 	orr.w	r3, r3, #8
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	4b3d      	ldr	r3, [pc, #244]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	493a      	ldr	r1, [pc, #232]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8003166:	4313      	orrs	r3, r2
 8003168:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800316a:	4b39      	ldr	r3, [pc, #228]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	4935      	ldr	r1, [pc, #212]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 800317a:	4313      	orrs	r3, r2
 800317c:	604b      	str	r3, [r1, #4]
 800317e:	e01a      	b.n	80031b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003180:	4b33      	ldr	r3, [pc, #204]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a32      	ldr	r2, [pc, #200]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8003186:	f023 0301 	bic.w	r3, r3, #1
 800318a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800318c:	f7fe ff9a 	bl	80020c4 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003194:	f7fe ff96 	bl	80020c4 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e328      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031a6:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x1dc>
 80031b2:	e000      	b.n	80031b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d073      	beq.n	80032aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_OscConfig+0x21c>
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2b0c      	cmp	r3, #12
 80031cc:	d10e      	bne.n	80031ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d10b      	bne.n	80031ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d4:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d063      	beq.n	80032a8 <HAL_RCC_OscConfig+0x2f0>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d15f      	bne.n	80032a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e305      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f4:	d106      	bne.n	8003204 <HAL_RCC_OscConfig+0x24c>
 80031f6:	4b16      	ldr	r3, [pc, #88]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a15      	ldr	r2, [pc, #84]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 80031fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	e01d      	b.n	8003240 <HAL_RCC_OscConfig+0x288>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800320c:	d10c      	bne.n	8003228 <HAL_RCC_OscConfig+0x270>
 800320e:	4b10      	ldr	r3, [pc, #64]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a0f      	ldr	r2, [pc, #60]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8003214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a0c      	ldr	r2, [pc, #48]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8003220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e00b      	b.n	8003240 <HAL_RCC_OscConfig+0x288>
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a08      	ldr	r2, [pc, #32]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 800322e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a05      	ldr	r2, [pc, #20]	; (8003250 <HAL_RCC_OscConfig+0x298>)
 800323a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01b      	beq.n	8003280 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003248:	f7fe ff3c 	bl	80020c4 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800324e:	e010      	b.n	8003272 <HAL_RCC_OscConfig+0x2ba>
 8003250:	40021000 	.word	0x40021000
 8003254:	08005fc8 	.word	0x08005fc8
 8003258:	20000000 	.word	0x20000000
 800325c:	20000024 	.word	0x20000024
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003260:	f7fe ff30 	bl	80020c4 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	; 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e2c2      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003272:	4baf      	ldr	r3, [pc, #700]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x2a8>
 800327e:	e014      	b.n	80032aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fe ff20 	bl	80020c4 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003288:	f7fe ff1c 	bl	80020c4 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e2ae      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800329a:	4ba5      	ldr	r3, [pc, #660]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x2d0>
 80032a6:	e000      	b.n	80032aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d060      	beq.n	8003378 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_OscConfig+0x310>
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2b0c      	cmp	r3, #12
 80032c0:	d119      	bne.n	80032f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d116      	bne.n	80032f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032c8:	4b99      	ldr	r3, [pc, #612]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_OscConfig+0x328>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e28b      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e0:	4b93      	ldr	r3, [pc, #588]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	061b      	lsls	r3, r3, #24
 80032ee:	4990      	ldr	r1, [pc, #576]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f4:	e040      	b.n	8003378 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d023      	beq.n	8003346 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032fe:	4b8c      	ldr	r3, [pc, #560]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a8b      	ldr	r2, [pc, #556]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 8003304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330a:	f7fe fedb 	bl	80020c4 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003312:	f7fe fed7 	bl	80020c4 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e269      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003324:	4b82      	ldr	r3, [pc, #520]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003330:	4b7f      	ldr	r3, [pc, #508]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	061b      	lsls	r3, r3, #24
 800333e:	497c      	ldr	r1, [pc, #496]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
 8003344:	e018      	b.n	8003378 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003346:	4b7a      	ldr	r3, [pc, #488]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a79      	ldr	r2, [pc, #484]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 800334c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003352:	f7fe feb7 	bl	80020c4 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800335a:	f7fe feb3 	bl	80020c4 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e245      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800336c:	4b70      	ldr	r3, [pc, #448]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1f0      	bne.n	800335a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b00      	cmp	r3, #0
 8003382:	d03c      	beq.n	80033fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01c      	beq.n	80033c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800338c:	4b68      	ldr	r3, [pc, #416]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 800338e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003392:	4a67      	ldr	r2, [pc, #412]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339c:	f7fe fe92 	bl	80020c4 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a4:	f7fe fe8e 	bl	80020c4 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e220      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033b6:	4b5e      	ldr	r3, [pc, #376]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 80033b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0ef      	beq.n	80033a4 <HAL_RCC_OscConfig+0x3ec>
 80033c4:	e01b      	b.n	80033fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c6:	4b5a      	ldr	r3, [pc, #360]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 80033c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033cc:	4a58      	ldr	r2, [pc, #352]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 80033ce:	f023 0301 	bic.w	r3, r3, #1
 80033d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d6:	f7fe fe75 	bl	80020c4 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033de:	f7fe fe71 	bl	80020c4 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e203      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033f0:	4b4f      	ldr	r3, [pc, #316]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 80033f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1ef      	bne.n	80033de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 80a6 	beq.w	8003558 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340c:	2300      	movs	r3, #0
 800340e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003410:	4b47      	ldr	r3, [pc, #284]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 8003412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10d      	bne.n	8003438 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341c:	4b44      	ldr	r3, [pc, #272]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 800341e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003420:	4a43      	ldr	r2, [pc, #268]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 8003422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003426:	6593      	str	r3, [r2, #88]	; 0x58
 8003428:	4b41      	ldr	r3, [pc, #260]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003434:	2301      	movs	r3, #1
 8003436:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003438:	4b3e      	ldr	r3, [pc, #248]	; (8003534 <HAL_RCC_OscConfig+0x57c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003440:	2b00      	cmp	r3, #0
 8003442:	d118      	bne.n	8003476 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003444:	4b3b      	ldr	r3, [pc, #236]	; (8003534 <HAL_RCC_OscConfig+0x57c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a3a      	ldr	r2, [pc, #232]	; (8003534 <HAL_RCC_OscConfig+0x57c>)
 800344a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003450:	f7fe fe38 	bl	80020c4 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003458:	f7fe fe34 	bl	80020c4 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e1c6      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800346a:	4b32      	ldr	r3, [pc, #200]	; (8003534 <HAL_RCC_OscConfig+0x57c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d108      	bne.n	8003490 <HAL_RCC_OscConfig+0x4d8>
 800347e:	4b2c      	ldr	r3, [pc, #176]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003484:	4a2a      	ldr	r2, [pc, #168]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800348e:	e024      	b.n	80034da <HAL_RCC_OscConfig+0x522>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b05      	cmp	r3, #5
 8003496:	d110      	bne.n	80034ba <HAL_RCC_OscConfig+0x502>
 8003498:	4b25      	ldr	r3, [pc, #148]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	4a24      	ldr	r2, [pc, #144]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 80034a0:	f043 0304 	orr.w	r3, r3, #4
 80034a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034a8:	4b21      	ldr	r3, [pc, #132]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ae:	4a20      	ldr	r2, [pc, #128]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034b8:	e00f      	b.n	80034da <HAL_RCC_OscConfig+0x522>
 80034ba:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c0:	4a1b      	ldr	r2, [pc, #108]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034ca:	4b19      	ldr	r3, [pc, #100]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 80034cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d0:	4a17      	ldr	r2, [pc, #92]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 80034d2:	f023 0304 	bic.w	r3, r3, #4
 80034d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d016      	beq.n	8003510 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e2:	f7fe fdef 	bl	80020c4 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e8:	e00a      	b.n	8003500 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ea:	f7fe fdeb 	bl	80020c4 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e17b      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_RCC_OscConfig+0x578>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0ed      	beq.n	80034ea <HAL_RCC_OscConfig+0x532>
 800350e:	e01a      	b.n	8003546 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003510:	f7fe fdd8 	bl	80020c4 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003516:	e00f      	b.n	8003538 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003518:	f7fe fdd4 	bl	80020c4 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	; 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d906      	bls.n	8003538 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e164      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003538:	4ba8      	ldr	r3, [pc, #672]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1e8      	bne.n	8003518 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003546:	7ffb      	ldrb	r3, [r7, #31]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d105      	bne.n	8003558 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354c:	4ba3      	ldr	r3, [pc, #652]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	4aa2      	ldr	r2, [pc, #648]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 8003552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003556:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0320 	and.w	r3, r3, #32
 8003560:	2b00      	cmp	r3, #0
 8003562:	d03c      	beq.n	80035de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01c      	beq.n	80035a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800356c:	4b9b      	ldr	r3, [pc, #620]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 800356e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003572:	4a9a      	ldr	r2, [pc, #616]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7fe fda2 	bl	80020c4 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003584:	f7fe fd9e 	bl	80020c4 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e130      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003596:	4b91      	ldr	r3, [pc, #580]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 8003598:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ef      	beq.n	8003584 <HAL_RCC_OscConfig+0x5cc>
 80035a4:	e01b      	b.n	80035de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035a6:	4b8d      	ldr	r3, [pc, #564]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 80035a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035ac:	4a8b      	ldr	r2, [pc, #556]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b6:	f7fe fd85 	bl	80020c4 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035be:	f7fe fd81 	bl	80020c4 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e113      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035d0:	4b82      	ldr	r3, [pc, #520]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 80035d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1ef      	bne.n	80035be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8107 	beq.w	80037f6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	f040 80cb 	bne.w	8003788 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035f2:	4b7a      	ldr	r3, [pc, #488]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f003 0203 	and.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	429a      	cmp	r2, r3
 8003604:	d12c      	bne.n	8003660 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	3b01      	subs	r3, #1
 8003612:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d123      	bne.n	8003660 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003622:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d11b      	bne.n	8003660 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003632:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003634:	429a      	cmp	r2, r3
 8003636:	d113      	bne.n	8003660 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003642:	085b      	lsrs	r3, r3, #1
 8003644:	3b01      	subs	r3, #1
 8003646:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d109      	bne.n	8003660 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	085b      	lsrs	r3, r3, #1
 8003658:	3b01      	subs	r3, #1
 800365a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d06d      	beq.n	800373c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d068      	beq.n	8003738 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003666:	4b5d      	ldr	r3, [pc, #372]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d105      	bne.n	800367e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003672:	4b5a      	ldr	r3, [pc, #360]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e0ba      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003682:	4b56      	ldr	r3, [pc, #344]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a55      	ldr	r2, [pc, #340]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 8003688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800368c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800368e:	f7fe fd19 	bl	80020c4 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003696:	f7fe fd15 	bl	80020c4 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e0a7      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a8:	4b4c      	ldr	r3, [pc, #304]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f0      	bne.n	8003696 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b4:	4b49      	ldr	r3, [pc, #292]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	4b49      	ldr	r3, [pc, #292]	; (80037e0 <HAL_RCC_OscConfig+0x828>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036c4:	3a01      	subs	r2, #1
 80036c6:	0112      	lsls	r2, r2, #4
 80036c8:	4311      	orrs	r1, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036ce:	0212      	lsls	r2, r2, #8
 80036d0:	4311      	orrs	r1, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036d6:	0852      	lsrs	r2, r2, #1
 80036d8:	3a01      	subs	r2, #1
 80036da:	0552      	lsls	r2, r2, #21
 80036dc:	4311      	orrs	r1, r2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036e2:	0852      	lsrs	r2, r2, #1
 80036e4:	3a01      	subs	r2, #1
 80036e6:	0652      	lsls	r2, r2, #25
 80036e8:	4311      	orrs	r1, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036ee:	06d2      	lsls	r2, r2, #27
 80036f0:	430a      	orrs	r2, r1
 80036f2:	493a      	ldr	r1, [pc, #232]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036f8:	4b38      	ldr	r3, [pc, #224]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a37      	ldr	r2, [pc, #220]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 80036fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003702:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003704:	4b35      	ldr	r3, [pc, #212]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a34      	ldr	r2, [pc, #208]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 800370a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800370e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003710:	f7fe fcd8 	bl	80020c4 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003718:	f7fe fcd4 	bl	80020c4 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e066      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372a:	4b2c      	ldr	r3, [pc, #176]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003736:	e05e      	b.n	80037f6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e05d      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373c:	4b27      	ldr	r3, [pc, #156]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d156      	bne.n	80037f6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003748:	4b24      	ldr	r3, [pc, #144]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a23      	ldr	r2, [pc, #140]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 800374e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003752:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003754:	4b21      	ldr	r3, [pc, #132]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4a20      	ldr	r2, [pc, #128]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 800375a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003760:	f7fe fcb0 	bl	80020c4 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003768:	f7fe fcac 	bl	80020c4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e03e      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377a:	4b18      	ldr	r3, [pc, #96]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0x7b0>
 8003786:	e036      	b.n	80037f6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2b0c      	cmp	r3, #12
 800378c:	d031      	beq.n	80037f2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378e:	4b13      	ldr	r3, [pc, #76]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a12      	ldr	r2, [pc, #72]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 8003794:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003798:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800379a:	4b10      	ldr	r3, [pc, #64]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d105      	bne.n	80037b2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037a6:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	4a0c      	ldr	r2, [pc, #48]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 80037ac:	f023 0303 	bic.w	r3, r3, #3
 80037b0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037b2:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	4a09      	ldr	r2, [pc, #36]	; (80037dc <HAL_RCC_OscConfig+0x824>)
 80037b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7fe fc7f 	bl	80020c4 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c8:	e00c      	b.n	80037e4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ca:	f7fe fc7b 	bl	80020c4 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d905      	bls.n	80037e4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e00d      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
 80037dc:	40021000 	.word	0x40021000
 80037e0:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_RCC_OscConfig+0x848>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1ec      	bne.n	80037ca <HAL_RCC_OscConfig+0x812>
 80037f0:	e001      	b.n	80037f6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3720      	adds	r7, #32
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40021000 	.word	0x40021000

08003804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0c8      	b.n	80039aa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003818:	4b66      	ldr	r3, [pc, #408]	; (80039b4 <HAL_RCC_ClockConfig+0x1b0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d910      	bls.n	8003848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003826:	4b63      	ldr	r3, [pc, #396]	; (80039b4 <HAL_RCC_ClockConfig+0x1b0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 0207 	bic.w	r2, r3, #7
 800382e:	4961      	ldr	r1, [pc, #388]	; (80039b4 <HAL_RCC_ClockConfig+0x1b0>)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	4b5f      	ldr	r3, [pc, #380]	; (80039b4 <HAL_RCC_ClockConfig+0x1b0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0b0      	b.n	80039aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d04c      	beq.n	80038ee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b03      	cmp	r3, #3
 800385a:	d107      	bne.n	800386c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385c:	4b56      	ldr	r3, [pc, #344]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d121      	bne.n	80038ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e09e      	b.n	80039aa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d107      	bne.n	8003884 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003874:	4b50      	ldr	r3, [pc, #320]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d115      	bne.n	80038ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e092      	b.n	80039aa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d107      	bne.n	800389c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800388c:	4b4a      	ldr	r3, [pc, #296]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d109      	bne.n	80038ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e086      	b.n	80039aa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800389c:	4b46      	ldr	r3, [pc, #280]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e07e      	b.n	80039aa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038ac:	4b42      	ldr	r3, [pc, #264]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f023 0203 	bic.w	r2, r3, #3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	493f      	ldr	r1, [pc, #252]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038be:	f7fe fc01 	bl	80020c4 <HAL_GetTick>
 80038c2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c6:	f7fe fbfd 	bl	80020c4 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e066      	b.n	80039aa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038dc:	4b36      	ldr	r3, [pc, #216]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 020c 	and.w	r2, r3, #12
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d1eb      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038fa:	4b2f      	ldr	r3, [pc, #188]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	492c      	ldr	r1, [pc, #176]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003908:	4313      	orrs	r3, r2
 800390a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800390c:	4b29      	ldr	r3, [pc, #164]	; (80039b4 <HAL_RCC_ClockConfig+0x1b0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d210      	bcs.n	800393c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391a:	4b26      	ldr	r3, [pc, #152]	; (80039b4 <HAL_RCC_ClockConfig+0x1b0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 0207 	bic.w	r2, r3, #7
 8003922:	4924      	ldr	r1, [pc, #144]	; (80039b4 <HAL_RCC_ClockConfig+0x1b0>)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	4313      	orrs	r3, r2
 8003928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392a:	4b22      	ldr	r3, [pc, #136]	; (80039b4 <HAL_RCC_ClockConfig+0x1b0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d001      	beq.n	800393c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e036      	b.n	80039aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003948:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4918      	ldr	r1, [pc, #96]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003966:	4b14      	ldr	r3, [pc, #80]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4910      	ldr	r1, [pc, #64]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800397a:	f000 f825 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 800397e:	4602      	mov	r2, r0
 8003980:	4b0d      	ldr	r3, [pc, #52]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	490c      	ldr	r1, [pc, #48]	; (80039bc <HAL_RCC_ClockConfig+0x1b8>)
 800398c:	5ccb      	ldrb	r3, [r1, r3]
 800398e:	f003 031f 	and.w	r3, r3, #31
 8003992:	fa22 f303 	lsr.w	r3, r2, r3
 8003996:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800399a:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <HAL_RCC_ClockConfig+0x1c0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe fb40 	bl	8002024 <HAL_InitTick>
 80039a4:	4603      	mov	r3, r0
 80039a6:	72fb      	strb	r3, [r7, #11]

  return status;
 80039a8:	7afb      	ldrb	r3, [r7, #11]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40022000 	.word	0x40022000
 80039b8:	40021000 	.word	0x40021000
 80039bc:	08005fc8 	.word	0x08005fc8
 80039c0:	20000000 	.word	0x20000000
 80039c4:	20000024 	.word	0x20000024

080039c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b089      	sub	sp, #36	; 0x24
 80039cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	2300      	movs	r3, #0
 80039d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039d6:	4b3e      	ldr	r3, [pc, #248]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039e0:	4b3b      	ldr	r3, [pc, #236]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_GetSysClockFreq+0x34>
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	2b0c      	cmp	r3, #12
 80039f4:	d121      	bne.n	8003a3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d11e      	bne.n	8003a3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039fc:	4b34      	ldr	r3, [pc, #208]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d107      	bne.n	8003a18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a08:	4b31      	ldr	r3, [pc, #196]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a0e:	0a1b      	lsrs	r3, r3, #8
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	e005      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a18:	4b2d      	ldr	r3, [pc, #180]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a24:	4a2b      	ldr	r2, [pc, #172]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10d      	bne.n	8003a50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a38:	e00a      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d102      	bne.n	8003a46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a40:	4b25      	ldr	r3, [pc, #148]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a42:	61bb      	str	r3, [r7, #24]
 8003a44:	e004      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a4c:	4b23      	ldr	r3, [pc, #140]	; (8003adc <HAL_RCC_GetSysClockFreq+0x114>)
 8003a4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b0c      	cmp	r3, #12
 8003a54:	d134      	bne.n	8003ac0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a56:	4b1e      	ldr	r3, [pc, #120]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0xa6>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d003      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0xac>
 8003a6c:	e005      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a6e:	4b1a      	ldr	r3, [pc, #104]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a70:	617b      	str	r3, [r7, #20]
      break;
 8003a72:	e005      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a74:	4b19      	ldr	r3, [pc, #100]	; (8003adc <HAL_RCC_GetSysClockFreq+0x114>)
 8003a76:	617b      	str	r3, [r7, #20]
      break;
 8003a78:	e002      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	617b      	str	r3, [r7, #20]
      break;
 8003a7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a80:	4b13      	ldr	r3, [pc, #76]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a8e:	4b10      	ldr	r3, [pc, #64]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	fb02 f203 	mul.w	r2, r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aa6:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	0e5b      	lsrs	r3, r3, #25
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ac0:	69bb      	ldr	r3, [r7, #24]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3724      	adds	r7, #36	; 0x24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	08005fd8 	.word	0x08005fd8
 8003ad8:	00f42400 	.word	0x00f42400
 8003adc:	007a1200 	.word	0x007a1200

08003ae0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ae8:	2300      	movs	r3, #0
 8003aea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003aec:	4b2a      	ldr	r3, [pc, #168]	; (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003af8:	f7ff f9ea 	bl	8002ed0 <HAL_PWREx_GetVoltageRange>
 8003afc:	6178      	str	r0, [r7, #20]
 8003afe:	e014      	b.n	8003b2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b00:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b04:	4a24      	ldr	r2, [pc, #144]	; (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b0c:	4b22      	ldr	r3, [pc, #136]	; (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b18:	f7ff f9da 	bl	8002ed0 <HAL_PWREx_GetVoltageRange>
 8003b1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b1e:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b22:	4a1d      	ldr	r2, [pc, #116]	; (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b30:	d10b      	bne.n	8003b4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b80      	cmp	r3, #128	; 0x80
 8003b36:	d919      	bls.n	8003b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2ba0      	cmp	r3, #160	; 0xa0
 8003b3c:	d902      	bls.n	8003b44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b3e:	2302      	movs	r3, #2
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	e013      	b.n	8003b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b44:	2301      	movs	r3, #1
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	e010      	b.n	8003b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b80      	cmp	r3, #128	; 0x80
 8003b4e:	d902      	bls.n	8003b56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b50:	2303      	movs	r3, #3
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	e00a      	b.n	8003b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b80      	cmp	r3, #128	; 0x80
 8003b5a:	d102      	bne.n	8003b62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	e004      	b.n	8003b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b70      	cmp	r3, #112	; 0x70
 8003b66:	d101      	bne.n	8003b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b68:	2301      	movs	r3, #1
 8003b6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f023 0207 	bic.w	r2, r3, #7
 8003b74:	4909      	ldr	r1, [pc, #36]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b7c:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d001      	beq.n	8003b8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40022000 	.word	0x40022000

08003ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ba8:	2300      	movs	r3, #0
 8003baa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bac:	2300      	movs	r3, #0
 8003bae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d041      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bc4:	d02a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bc6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bca:	d824      	bhi.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bd0:	d008      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bd6:	d81e      	bhi.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be0:	d010      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003be2:	e018      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003be4:	4b86      	ldr	r3, [pc, #536]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	4a85      	ldr	r2, [pc, #532]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bf0:	e015      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 fadd 	bl	80041b8 <RCCEx_PLLSAI1_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c02:	e00c      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3320      	adds	r3, #32
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fbc6 	bl	800439c <RCCEx_PLLSAI2_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c14:	e003      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	74fb      	strb	r3, [r7, #19]
      break;
 8003c1a:	e000      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c1e:	7cfb      	ldrb	r3, [r7, #19]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10b      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c24:	4b76      	ldr	r3, [pc, #472]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c32:	4973      	ldr	r1, [pc, #460]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c3a:	e001      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d041      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c54:	d02a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c5a:	d824      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c60:	d008      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c66:	d81e      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c70:	d010      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c72:	e018      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c74:	4b62      	ldr	r3, [pc, #392]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4a61      	ldr	r2, [pc, #388]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c80:	e015      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3304      	adds	r3, #4
 8003c86:	2100      	movs	r1, #0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fa95 	bl	80041b8 <RCCEx_PLLSAI1_Config>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c92:	e00c      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3320      	adds	r3, #32
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fb7e 	bl	800439c <RCCEx_PLLSAI2_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ca4:	e003      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	74fb      	strb	r3, [r7, #19]
      break;
 8003caa:	e000      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cae:	7cfb      	ldrb	r3, [r7, #19]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cb4:	4b52      	ldr	r3, [pc, #328]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cc2:	494f      	ldr	r1, [pc, #316]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cca:	e001      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ccc:	7cfb      	ldrb	r3, [r7, #19]
 8003cce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 80a0 	beq.w	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ce2:	4b47      	ldr	r3, [pc, #284]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00d      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf8:	4b41      	ldr	r3, [pc, #260]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfc:	4a40      	ldr	r2, [pc, #256]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d02:	6593      	str	r3, [r2, #88]	; 0x58
 8003d04:	4b3e      	ldr	r3, [pc, #248]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d10:	2301      	movs	r3, #1
 8003d12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d14:	4b3b      	ldr	r3, [pc, #236]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a3a      	ldr	r2, [pc, #232]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d20:	f7fe f9d0 	bl	80020c4 <HAL_GetTick>
 8003d24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d26:	e009      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d28:	f7fe f9cc 	bl	80020c4 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d902      	bls.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	74fb      	strb	r3, [r7, #19]
        break;
 8003d3a:	e005      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d3c:	4b31      	ldr	r3, [pc, #196]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0ef      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d48:	7cfb      	ldrb	r3, [r7, #19]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d15c      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d4e:	4b2c      	ldr	r3, [pc, #176]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01f      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d019      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d6c:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d78:	4b21      	ldr	r3, [pc, #132]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	4a20      	ldr	r2, [pc, #128]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d88:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8e:	4a1c      	ldr	r2, [pc, #112]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d98:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d016      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003daa:	f7fe f98b 	bl	80020c4 <HAL_GetTick>
 8003dae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003db0:	e00b      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db2:	f7fe f987 	bl	80020c4 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d902      	bls.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	74fb      	strb	r3, [r7, #19]
            break;
 8003dc8:	e006      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dca:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0ec      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003dd8:	7cfb      	ldrb	r3, [r7, #19]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10c      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	4904      	ldr	r1, [pc, #16]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003df6:	e009      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003df8:	7cfb      	ldrb	r3, [r7, #19]
 8003dfa:	74bb      	strb	r3, [r7, #18]
 8003dfc:	e006      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003dfe:	bf00      	nop
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e08:	7cfb      	ldrb	r3, [r7, #19]
 8003e0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e0c:	7c7b      	ldrb	r3, [r7, #17]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d105      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e12:	4ba6      	ldr	r3, [pc, #664]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e16:	4aa5      	ldr	r2, [pc, #660]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e2a:	4ba0      	ldr	r3, [pc, #640]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e30:	f023 0203 	bic.w	r2, r3, #3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	499c      	ldr	r1, [pc, #624]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e4c:	4b97      	ldr	r3, [pc, #604]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e52:	f023 020c 	bic.w	r2, r3, #12
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5a:	4994      	ldr	r1, [pc, #592]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e6e:	4b8f      	ldr	r3, [pc, #572]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	498b      	ldr	r1, [pc, #556]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e90:	4b86      	ldr	r3, [pc, #536]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9e:	4983      	ldr	r1, [pc, #524]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0310 	and.w	r3, r3, #16
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003eb2:	4b7e      	ldr	r3, [pc, #504]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec0:	497a      	ldr	r1, [pc, #488]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ed4:	4b75      	ldr	r3, [pc, #468]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee2:	4972      	ldr	r1, [pc, #456]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ef6:	4b6d      	ldr	r3, [pc, #436]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f04:	4969      	ldr	r1, [pc, #420]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f18:	4b64      	ldr	r3, [pc, #400]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f26:	4961      	ldr	r1, [pc, #388]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f3a:	4b5c      	ldr	r3, [pc, #368]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f48:	4958      	ldr	r1, [pc, #352]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f5c:	4b53      	ldr	r3, [pc, #332]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6a:	4950      	ldr	r1, [pc, #320]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f7e:	4b4b      	ldr	r3, [pc, #300]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8c:	4947      	ldr	r1, [pc, #284]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fa0:	4b42      	ldr	r3, [pc, #264]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fa6:	f023 0203 	bic.w	r2, r3, #3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fae:	493f      	ldr	r1, [pc, #252]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d028      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fc2:	4b3a      	ldr	r3, [pc, #232]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	4936      	ldr	r1, [pc, #216]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fe0:	d106      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe2:	4b32      	ldr	r3, [pc, #200]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	4a31      	ldr	r2, [pc, #196]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fe8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fec:	60d3      	str	r3, [r2, #12]
 8003fee:	e011      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ff8:	d10c      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	2101      	movs	r1, #1
 8004000:	4618      	mov	r0, r3
 8004002:	f000 f8d9 	bl	80041b8 <RCCEx_PLLSAI1_Config>
 8004006:	4603      	mov	r3, r0
 8004008:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800400a:	7cfb      	ldrb	r3, [r7, #19]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004010:	7cfb      	ldrb	r3, [r7, #19]
 8004012:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d028      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004020:	4b22      	ldr	r3, [pc, #136]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800402e:	491f      	ldr	r1, [pc, #124]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800403a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800403e:	d106      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004040:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4a19      	ldr	r2, [pc, #100]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800404a:	60d3      	str	r3, [r2, #12]
 800404c:	e011      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004052:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004056:	d10c      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	2101      	movs	r1, #1
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f8aa 	bl	80041b8 <RCCEx_PLLSAI1_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004068:	7cfb      	ldrb	r3, [r7, #19]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800406e:	7cfb      	ldrb	r3, [r7, #19]
 8004070:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d02a      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800407e:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004084:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800408c:	4907      	ldr	r1, [pc, #28]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004098:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800409c:	d108      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800409e:	4b03      	ldr	r3, [pc, #12]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	4a02      	ldr	r2, [pc, #8]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a8:	60d3      	str	r3, [r2, #12]
 80040aa:	e013      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80040ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040b8:	d10c      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3304      	adds	r3, #4
 80040be:	2101      	movs	r1, #1
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 f879 	bl	80041b8 <RCCEx_PLLSAI1_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ca:	7cfb      	ldrb	r3, [r7, #19]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80040d0:	7cfb      	ldrb	r3, [r7, #19]
 80040d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d02f      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040e0:	4b2c      	ldr	r3, [pc, #176]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ee:	4929      	ldr	r1, [pc, #164]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040fe:	d10d      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	2102      	movs	r1, #2
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f856 	bl	80041b8 <RCCEx_PLLSAI1_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004110:	7cfb      	ldrb	r3, [r7, #19]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d014      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004116:	7cfb      	ldrb	r3, [r7, #19]
 8004118:	74bb      	strb	r3, [r7, #18]
 800411a:	e011      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004124:	d10c      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3320      	adds	r3, #32
 800412a:	2102      	movs	r1, #2
 800412c:	4618      	mov	r0, r3
 800412e:	f000 f935 	bl	800439c <RCCEx_PLLSAI2_Config>
 8004132:	4603      	mov	r3, r0
 8004134:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004136:	7cfb      	ldrb	r3, [r7, #19]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00b      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800414c:	4b11      	ldr	r3, [pc, #68]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800415c:	490d      	ldr	r1, [pc, #52]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00b      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004170:	4b08      	ldr	r3, [pc, #32]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004180:	4904      	ldr	r1, [pc, #16]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004188:	7cbb      	ldrb	r3, [r7, #18]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000

08004198 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80041a2:	f043 0304 	orr.w	r3, r3, #4
 80041a6:	6013      	str	r3, [r2, #0]
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40021000 	.word	0x40021000

080041b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041c6:	4b74      	ldr	r3, [pc, #464]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d018      	beq.n	8004204 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041d2:	4b71      	ldr	r3, [pc, #452]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f003 0203 	and.w	r2, r3, #3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d10d      	bne.n	80041fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
       ||
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041ea:	4b6b      	ldr	r3, [pc, #428]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	091b      	lsrs	r3, r3, #4
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
       ||
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d047      	beq.n	800428e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	73fb      	strb	r3, [r7, #15]
 8004202:	e044      	b.n	800428e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b03      	cmp	r3, #3
 800420a:	d018      	beq.n	800423e <RCCEx_PLLSAI1_Config+0x86>
 800420c:	2b03      	cmp	r3, #3
 800420e:	d825      	bhi.n	800425c <RCCEx_PLLSAI1_Config+0xa4>
 8004210:	2b01      	cmp	r3, #1
 8004212:	d002      	beq.n	800421a <RCCEx_PLLSAI1_Config+0x62>
 8004214:	2b02      	cmp	r3, #2
 8004216:	d009      	beq.n	800422c <RCCEx_PLLSAI1_Config+0x74>
 8004218:	e020      	b.n	800425c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800421a:	4b5f      	ldr	r3, [pc, #380]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d11d      	bne.n	8004262 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800422a:	e01a      	b.n	8004262 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800422c:	4b5a      	ldr	r3, [pc, #360]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004234:	2b00      	cmp	r3, #0
 8004236:	d116      	bne.n	8004266 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800423c:	e013      	b.n	8004266 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800423e:	4b56      	ldr	r3, [pc, #344]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10f      	bne.n	800426a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800424a:	4b53      	ldr	r3, [pc, #332]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d109      	bne.n	800426a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800425a:	e006      	b.n	800426a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
      break;
 8004260:	e004      	b.n	800426c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004262:	bf00      	nop
 8004264:	e002      	b.n	800426c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004266:	bf00      	nop
 8004268:	e000      	b.n	800426c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800426a:	bf00      	nop
    }

    if(status == HAL_OK)
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10d      	bne.n	800428e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004272:	4b49      	ldr	r3, [pc, #292]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6819      	ldr	r1, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	3b01      	subs	r3, #1
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	430b      	orrs	r3, r1
 8004288:	4943      	ldr	r1, [pc, #268]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 800428a:	4313      	orrs	r3, r2
 800428c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d17c      	bne.n	800438e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004294:	4b40      	ldr	r3, [pc, #256]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a3f      	ldr	r2, [pc, #252]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 800429a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800429e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a0:	f7fd ff10 	bl	80020c4 <HAL_GetTick>
 80042a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042a6:	e009      	b.n	80042bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042a8:	f7fd ff0c 	bl	80020c4 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d902      	bls.n	80042bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	73fb      	strb	r3, [r7, #15]
        break;
 80042ba:	e005      	b.n	80042c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042bc:	4b36      	ldr	r3, [pc, #216]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1ef      	bne.n	80042a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d15f      	bne.n	800438e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d110      	bne.n	80042f6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042d4:	4b30      	ldr	r3, [pc, #192]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80042dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6892      	ldr	r2, [r2, #8]
 80042e4:	0211      	lsls	r1, r2, #8
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68d2      	ldr	r2, [r2, #12]
 80042ea:	06d2      	lsls	r2, r2, #27
 80042ec:	430a      	orrs	r2, r1
 80042ee:	492a      	ldr	r1, [pc, #168]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	610b      	str	r3, [r1, #16]
 80042f4:	e027      	b.n	8004346 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d112      	bne.n	8004322 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042fc:	4b26      	ldr	r3, [pc, #152]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004304:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6892      	ldr	r2, [r2, #8]
 800430c:	0211      	lsls	r1, r2, #8
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6912      	ldr	r2, [r2, #16]
 8004312:	0852      	lsrs	r2, r2, #1
 8004314:	3a01      	subs	r2, #1
 8004316:	0552      	lsls	r2, r2, #21
 8004318:	430a      	orrs	r2, r1
 800431a:	491f      	ldr	r1, [pc, #124]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 800431c:	4313      	orrs	r3, r2
 800431e:	610b      	str	r3, [r1, #16]
 8004320:	e011      	b.n	8004346 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004322:	4b1d      	ldr	r3, [pc, #116]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800432a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6892      	ldr	r2, [r2, #8]
 8004332:	0211      	lsls	r1, r2, #8
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6952      	ldr	r2, [r2, #20]
 8004338:	0852      	lsrs	r2, r2, #1
 800433a:	3a01      	subs	r2, #1
 800433c:	0652      	lsls	r2, r2, #25
 800433e:	430a      	orrs	r2, r1
 8004340:	4915      	ldr	r1, [pc, #84]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004342:	4313      	orrs	r3, r2
 8004344:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004346:	4b14      	ldr	r3, [pc, #80]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a13      	ldr	r2, [pc, #76]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 800434c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004350:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004352:	f7fd feb7 	bl	80020c4 <HAL_GetTick>
 8004356:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004358:	e009      	b.n	800436e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800435a:	f7fd feb3 	bl	80020c4 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d902      	bls.n	800436e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	73fb      	strb	r3, [r7, #15]
          break;
 800436c:	e005      	b.n	800437a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800436e:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0ef      	beq.n	800435a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d106      	bne.n	800438e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	4903      	ldr	r1, [pc, #12]	; (8004398 <RCCEx_PLLSAI1_Config+0x1e0>)
 800438a:	4313      	orrs	r3, r2
 800438c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800438e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40021000 	.word	0x40021000

0800439c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043aa:	4b69      	ldr	r3, [pc, #420]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d018      	beq.n	80043e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80043b6:	4b66      	ldr	r3, [pc, #408]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f003 0203 	and.w	r2, r3, #3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d10d      	bne.n	80043e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
       ||
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80043ce:	4b60      	ldr	r3, [pc, #384]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	091b      	lsrs	r3, r3, #4
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
       ||
 80043de:	429a      	cmp	r2, r3
 80043e0:	d047      	beq.n	8004472 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
 80043e6:	e044      	b.n	8004472 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d018      	beq.n	8004422 <RCCEx_PLLSAI2_Config+0x86>
 80043f0:	2b03      	cmp	r3, #3
 80043f2:	d825      	bhi.n	8004440 <RCCEx_PLLSAI2_Config+0xa4>
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d002      	beq.n	80043fe <RCCEx_PLLSAI2_Config+0x62>
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d009      	beq.n	8004410 <RCCEx_PLLSAI2_Config+0x74>
 80043fc:	e020      	b.n	8004440 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043fe:	4b54      	ldr	r3, [pc, #336]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d11d      	bne.n	8004446 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800440e:	e01a      	b.n	8004446 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004410:	4b4f      	ldr	r3, [pc, #316]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004418:	2b00      	cmp	r3, #0
 800441a:	d116      	bne.n	800444a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004420:	e013      	b.n	800444a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004422:	4b4b      	ldr	r3, [pc, #300]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10f      	bne.n	800444e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800442e:	4b48      	ldr	r3, [pc, #288]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d109      	bne.n	800444e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800443e:	e006      	b.n	800444e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
      break;
 8004444:	e004      	b.n	8004450 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004446:	bf00      	nop
 8004448:	e002      	b.n	8004450 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800444a:	bf00      	nop
 800444c:	e000      	b.n	8004450 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800444e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10d      	bne.n	8004472 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004456:	4b3e      	ldr	r3, [pc, #248]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6819      	ldr	r1, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	3b01      	subs	r3, #1
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	430b      	orrs	r3, r1
 800446c:	4938      	ldr	r1, [pc, #224]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 800446e:	4313      	orrs	r3, r2
 8004470:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004472:	7bfb      	ldrb	r3, [r7, #15]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d166      	bne.n	8004546 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004478:	4b35      	ldr	r3, [pc, #212]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a34      	ldr	r2, [pc, #208]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 800447e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004484:	f7fd fe1e 	bl	80020c4 <HAL_GetTick>
 8004488:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800448a:	e009      	b.n	80044a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800448c:	f7fd fe1a 	bl	80020c4 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d902      	bls.n	80044a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	73fb      	strb	r3, [r7, #15]
        break;
 800449e:	e005      	b.n	80044ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044a0:	4b2b      	ldr	r3, [pc, #172]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1ef      	bne.n	800448c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d149      	bne.n	8004546 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d110      	bne.n	80044da <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044b8:	4b25      	ldr	r3, [pc, #148]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80044c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6892      	ldr	r2, [r2, #8]
 80044c8:	0211      	lsls	r1, r2, #8
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	68d2      	ldr	r2, [r2, #12]
 80044ce:	06d2      	lsls	r2, r2, #27
 80044d0:	430a      	orrs	r2, r1
 80044d2:	491f      	ldr	r1, [pc, #124]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	614b      	str	r3, [r1, #20]
 80044d8:	e011      	b.n	80044fe <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044da:	4b1d      	ldr	r3, [pc, #116]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6892      	ldr	r2, [r2, #8]
 80044ea:	0211      	lsls	r1, r2, #8
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6912      	ldr	r2, [r2, #16]
 80044f0:	0852      	lsrs	r2, r2, #1
 80044f2:	3a01      	subs	r2, #1
 80044f4:	0652      	lsls	r2, r2, #25
 80044f6:	430a      	orrs	r2, r1
 80044f8:	4915      	ldr	r1, [pc, #84]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044fe:	4b14      	ldr	r3, [pc, #80]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a13      	ldr	r2, [pc, #76]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004508:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7fd fddb 	bl	80020c4 <HAL_GetTick>
 800450e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004510:	e009      	b.n	8004526 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004512:	f7fd fdd7 	bl	80020c4 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d902      	bls.n	8004526 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	73fb      	strb	r3, [r7, #15]
          break;
 8004524:	e005      	b.n	8004532 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0ef      	beq.n	8004512 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d106      	bne.n	8004546 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 800453a:	695a      	ldr	r2, [r3, #20]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	4903      	ldr	r1, [pc, #12]	; (8004550 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004542:	4313      	orrs	r3, r2
 8004544:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004546:	7bfb      	ldrb	r3, [r7, #15]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40021000 	.word	0x40021000

08004554 <__errno>:
 8004554:	4b01      	ldr	r3, [pc, #4]	; (800455c <__errno+0x8>)
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	2000002c 	.word	0x2000002c

08004560 <__libc_init_array>:
 8004560:	b570      	push	{r4, r5, r6, lr}
 8004562:	4d0d      	ldr	r5, [pc, #52]	; (8004598 <__libc_init_array+0x38>)
 8004564:	4c0d      	ldr	r4, [pc, #52]	; (800459c <__libc_init_array+0x3c>)
 8004566:	1b64      	subs	r4, r4, r5
 8004568:	10a4      	asrs	r4, r4, #2
 800456a:	2600      	movs	r6, #0
 800456c:	42a6      	cmp	r6, r4
 800456e:	d109      	bne.n	8004584 <__libc_init_array+0x24>
 8004570:	4d0b      	ldr	r5, [pc, #44]	; (80045a0 <__libc_init_array+0x40>)
 8004572:	4c0c      	ldr	r4, [pc, #48]	; (80045a4 <__libc_init_array+0x44>)
 8004574:	f001 fcea 	bl	8005f4c <_init>
 8004578:	1b64      	subs	r4, r4, r5
 800457a:	10a4      	asrs	r4, r4, #2
 800457c:	2600      	movs	r6, #0
 800457e:	42a6      	cmp	r6, r4
 8004580:	d105      	bne.n	800458e <__libc_init_array+0x2e>
 8004582:	bd70      	pop	{r4, r5, r6, pc}
 8004584:	f855 3b04 	ldr.w	r3, [r5], #4
 8004588:	4798      	blx	r3
 800458a:	3601      	adds	r6, #1
 800458c:	e7ee      	b.n	800456c <__libc_init_array+0xc>
 800458e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004592:	4798      	blx	r3
 8004594:	3601      	adds	r6, #1
 8004596:	e7f2      	b.n	800457e <__libc_init_array+0x1e>
 8004598:	08009018 	.word	0x08009018
 800459c:	08009018 	.word	0x08009018
 80045a0:	08009018 	.word	0x08009018
 80045a4:	0800901c 	.word	0x0800901c

080045a8 <memcpy>:
 80045a8:	440a      	add	r2, r1
 80045aa:	4291      	cmp	r1, r2
 80045ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80045b0:	d100      	bne.n	80045b4 <memcpy+0xc>
 80045b2:	4770      	bx	lr
 80045b4:	b510      	push	{r4, lr}
 80045b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045be:	4291      	cmp	r1, r2
 80045c0:	d1f9      	bne.n	80045b6 <memcpy+0xe>
 80045c2:	bd10      	pop	{r4, pc}

080045c4 <memmove>:
 80045c4:	4288      	cmp	r0, r1
 80045c6:	b510      	push	{r4, lr}
 80045c8:	eb01 0402 	add.w	r4, r1, r2
 80045cc:	d902      	bls.n	80045d4 <memmove+0x10>
 80045ce:	4284      	cmp	r4, r0
 80045d0:	4623      	mov	r3, r4
 80045d2:	d807      	bhi.n	80045e4 <memmove+0x20>
 80045d4:	1e43      	subs	r3, r0, #1
 80045d6:	42a1      	cmp	r1, r4
 80045d8:	d008      	beq.n	80045ec <memmove+0x28>
 80045da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045e2:	e7f8      	b.n	80045d6 <memmove+0x12>
 80045e4:	4402      	add	r2, r0
 80045e6:	4601      	mov	r1, r0
 80045e8:	428a      	cmp	r2, r1
 80045ea:	d100      	bne.n	80045ee <memmove+0x2a>
 80045ec:	bd10      	pop	{r4, pc}
 80045ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045f6:	e7f7      	b.n	80045e8 <memmove+0x24>

080045f8 <memset>:
 80045f8:	4402      	add	r2, r0
 80045fa:	4603      	mov	r3, r0
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d100      	bne.n	8004602 <memset+0xa>
 8004600:	4770      	bx	lr
 8004602:	f803 1b01 	strb.w	r1, [r3], #1
 8004606:	e7f9      	b.n	80045fc <memset+0x4>

08004608 <sniprintf>:
 8004608:	b40c      	push	{r2, r3}
 800460a:	b530      	push	{r4, r5, lr}
 800460c:	4b17      	ldr	r3, [pc, #92]	; (800466c <sniprintf+0x64>)
 800460e:	1e0c      	subs	r4, r1, #0
 8004610:	681d      	ldr	r5, [r3, #0]
 8004612:	b09d      	sub	sp, #116	; 0x74
 8004614:	da08      	bge.n	8004628 <sniprintf+0x20>
 8004616:	238b      	movs	r3, #139	; 0x8b
 8004618:	602b      	str	r3, [r5, #0]
 800461a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800461e:	b01d      	add	sp, #116	; 0x74
 8004620:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004624:	b002      	add	sp, #8
 8004626:	4770      	bx	lr
 8004628:	f44f 7302 	mov.w	r3, #520	; 0x208
 800462c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004630:	bf14      	ite	ne
 8004632:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004636:	4623      	moveq	r3, r4
 8004638:	9304      	str	r3, [sp, #16]
 800463a:	9307      	str	r3, [sp, #28]
 800463c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004640:	9002      	str	r0, [sp, #8]
 8004642:	9006      	str	r0, [sp, #24]
 8004644:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004648:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800464a:	ab21      	add	r3, sp, #132	; 0x84
 800464c:	a902      	add	r1, sp, #8
 800464e:	4628      	mov	r0, r5
 8004650:	9301      	str	r3, [sp, #4]
 8004652:	f000 f869 	bl	8004728 <_svfiprintf_r>
 8004656:	1c43      	adds	r3, r0, #1
 8004658:	bfbc      	itt	lt
 800465a:	238b      	movlt	r3, #139	; 0x8b
 800465c:	602b      	strlt	r3, [r5, #0]
 800465e:	2c00      	cmp	r4, #0
 8004660:	d0dd      	beq.n	800461e <sniprintf+0x16>
 8004662:	9b02      	ldr	r3, [sp, #8]
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
 8004668:	e7d9      	b.n	800461e <sniprintf+0x16>
 800466a:	bf00      	nop
 800466c:	2000002c 	.word	0x2000002c

08004670 <__ssputs_r>:
 8004670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004674:	688e      	ldr	r6, [r1, #8]
 8004676:	429e      	cmp	r6, r3
 8004678:	4682      	mov	sl, r0
 800467a:	460c      	mov	r4, r1
 800467c:	4690      	mov	r8, r2
 800467e:	461f      	mov	r7, r3
 8004680:	d838      	bhi.n	80046f4 <__ssputs_r+0x84>
 8004682:	898a      	ldrh	r2, [r1, #12]
 8004684:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004688:	d032      	beq.n	80046f0 <__ssputs_r+0x80>
 800468a:	6825      	ldr	r5, [r4, #0]
 800468c:	6909      	ldr	r1, [r1, #16]
 800468e:	eba5 0901 	sub.w	r9, r5, r1
 8004692:	6965      	ldr	r5, [r4, #20]
 8004694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004698:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800469c:	3301      	adds	r3, #1
 800469e:	444b      	add	r3, r9
 80046a0:	106d      	asrs	r5, r5, #1
 80046a2:	429d      	cmp	r5, r3
 80046a4:	bf38      	it	cc
 80046a6:	461d      	movcc	r5, r3
 80046a8:	0553      	lsls	r3, r2, #21
 80046aa:	d531      	bpl.n	8004710 <__ssputs_r+0xa0>
 80046ac:	4629      	mov	r1, r5
 80046ae:	f000 fb1f 	bl	8004cf0 <_malloc_r>
 80046b2:	4606      	mov	r6, r0
 80046b4:	b950      	cbnz	r0, 80046cc <__ssputs_r+0x5c>
 80046b6:	230c      	movs	r3, #12
 80046b8:	f8ca 3000 	str.w	r3, [sl]
 80046bc:	89a3      	ldrh	r3, [r4, #12]
 80046be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046c2:	81a3      	strh	r3, [r4, #12]
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046cc:	6921      	ldr	r1, [r4, #16]
 80046ce:	464a      	mov	r2, r9
 80046d0:	f7ff ff6a 	bl	80045a8 <memcpy>
 80046d4:	89a3      	ldrh	r3, [r4, #12]
 80046d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046de:	81a3      	strh	r3, [r4, #12]
 80046e0:	6126      	str	r6, [r4, #16]
 80046e2:	6165      	str	r5, [r4, #20]
 80046e4:	444e      	add	r6, r9
 80046e6:	eba5 0509 	sub.w	r5, r5, r9
 80046ea:	6026      	str	r6, [r4, #0]
 80046ec:	60a5      	str	r5, [r4, #8]
 80046ee:	463e      	mov	r6, r7
 80046f0:	42be      	cmp	r6, r7
 80046f2:	d900      	bls.n	80046f6 <__ssputs_r+0x86>
 80046f4:	463e      	mov	r6, r7
 80046f6:	4632      	mov	r2, r6
 80046f8:	6820      	ldr	r0, [r4, #0]
 80046fa:	4641      	mov	r1, r8
 80046fc:	f7ff ff62 	bl	80045c4 <memmove>
 8004700:	68a3      	ldr	r3, [r4, #8]
 8004702:	6822      	ldr	r2, [r4, #0]
 8004704:	1b9b      	subs	r3, r3, r6
 8004706:	4432      	add	r2, r6
 8004708:	60a3      	str	r3, [r4, #8]
 800470a:	6022      	str	r2, [r4, #0]
 800470c:	2000      	movs	r0, #0
 800470e:	e7db      	b.n	80046c8 <__ssputs_r+0x58>
 8004710:	462a      	mov	r2, r5
 8004712:	f000 fb47 	bl	8004da4 <_realloc_r>
 8004716:	4606      	mov	r6, r0
 8004718:	2800      	cmp	r0, #0
 800471a:	d1e1      	bne.n	80046e0 <__ssputs_r+0x70>
 800471c:	6921      	ldr	r1, [r4, #16]
 800471e:	4650      	mov	r0, sl
 8004720:	f000 fa96 	bl	8004c50 <_free_r>
 8004724:	e7c7      	b.n	80046b6 <__ssputs_r+0x46>
	...

08004728 <_svfiprintf_r>:
 8004728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472c:	4698      	mov	r8, r3
 800472e:	898b      	ldrh	r3, [r1, #12]
 8004730:	061b      	lsls	r3, r3, #24
 8004732:	b09d      	sub	sp, #116	; 0x74
 8004734:	4607      	mov	r7, r0
 8004736:	460d      	mov	r5, r1
 8004738:	4614      	mov	r4, r2
 800473a:	d50e      	bpl.n	800475a <_svfiprintf_r+0x32>
 800473c:	690b      	ldr	r3, [r1, #16]
 800473e:	b963      	cbnz	r3, 800475a <_svfiprintf_r+0x32>
 8004740:	2140      	movs	r1, #64	; 0x40
 8004742:	f000 fad5 	bl	8004cf0 <_malloc_r>
 8004746:	6028      	str	r0, [r5, #0]
 8004748:	6128      	str	r0, [r5, #16]
 800474a:	b920      	cbnz	r0, 8004756 <_svfiprintf_r+0x2e>
 800474c:	230c      	movs	r3, #12
 800474e:	603b      	str	r3, [r7, #0]
 8004750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004754:	e0d1      	b.n	80048fa <_svfiprintf_r+0x1d2>
 8004756:	2340      	movs	r3, #64	; 0x40
 8004758:	616b      	str	r3, [r5, #20]
 800475a:	2300      	movs	r3, #0
 800475c:	9309      	str	r3, [sp, #36]	; 0x24
 800475e:	2320      	movs	r3, #32
 8004760:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004764:	f8cd 800c 	str.w	r8, [sp, #12]
 8004768:	2330      	movs	r3, #48	; 0x30
 800476a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004914 <_svfiprintf_r+0x1ec>
 800476e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004772:	f04f 0901 	mov.w	r9, #1
 8004776:	4623      	mov	r3, r4
 8004778:	469a      	mov	sl, r3
 800477a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800477e:	b10a      	cbz	r2, 8004784 <_svfiprintf_r+0x5c>
 8004780:	2a25      	cmp	r2, #37	; 0x25
 8004782:	d1f9      	bne.n	8004778 <_svfiprintf_r+0x50>
 8004784:	ebba 0b04 	subs.w	fp, sl, r4
 8004788:	d00b      	beq.n	80047a2 <_svfiprintf_r+0x7a>
 800478a:	465b      	mov	r3, fp
 800478c:	4622      	mov	r2, r4
 800478e:	4629      	mov	r1, r5
 8004790:	4638      	mov	r0, r7
 8004792:	f7ff ff6d 	bl	8004670 <__ssputs_r>
 8004796:	3001      	adds	r0, #1
 8004798:	f000 80aa 	beq.w	80048f0 <_svfiprintf_r+0x1c8>
 800479c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800479e:	445a      	add	r2, fp
 80047a0:	9209      	str	r2, [sp, #36]	; 0x24
 80047a2:	f89a 3000 	ldrb.w	r3, [sl]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 80a2 	beq.w	80048f0 <_svfiprintf_r+0x1c8>
 80047ac:	2300      	movs	r3, #0
 80047ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047b6:	f10a 0a01 	add.w	sl, sl, #1
 80047ba:	9304      	str	r3, [sp, #16]
 80047bc:	9307      	str	r3, [sp, #28]
 80047be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047c2:	931a      	str	r3, [sp, #104]	; 0x68
 80047c4:	4654      	mov	r4, sl
 80047c6:	2205      	movs	r2, #5
 80047c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047cc:	4851      	ldr	r0, [pc, #324]	; (8004914 <_svfiprintf_r+0x1ec>)
 80047ce:	f7fb fd0f 	bl	80001f0 <memchr>
 80047d2:	9a04      	ldr	r2, [sp, #16]
 80047d4:	b9d8      	cbnz	r0, 800480e <_svfiprintf_r+0xe6>
 80047d6:	06d0      	lsls	r0, r2, #27
 80047d8:	bf44      	itt	mi
 80047da:	2320      	movmi	r3, #32
 80047dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047e0:	0711      	lsls	r1, r2, #28
 80047e2:	bf44      	itt	mi
 80047e4:	232b      	movmi	r3, #43	; 0x2b
 80047e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047ea:	f89a 3000 	ldrb.w	r3, [sl]
 80047ee:	2b2a      	cmp	r3, #42	; 0x2a
 80047f0:	d015      	beq.n	800481e <_svfiprintf_r+0xf6>
 80047f2:	9a07      	ldr	r2, [sp, #28]
 80047f4:	4654      	mov	r4, sl
 80047f6:	2000      	movs	r0, #0
 80047f8:	f04f 0c0a 	mov.w	ip, #10
 80047fc:	4621      	mov	r1, r4
 80047fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004802:	3b30      	subs	r3, #48	; 0x30
 8004804:	2b09      	cmp	r3, #9
 8004806:	d94e      	bls.n	80048a6 <_svfiprintf_r+0x17e>
 8004808:	b1b0      	cbz	r0, 8004838 <_svfiprintf_r+0x110>
 800480a:	9207      	str	r2, [sp, #28]
 800480c:	e014      	b.n	8004838 <_svfiprintf_r+0x110>
 800480e:	eba0 0308 	sub.w	r3, r0, r8
 8004812:	fa09 f303 	lsl.w	r3, r9, r3
 8004816:	4313      	orrs	r3, r2
 8004818:	9304      	str	r3, [sp, #16]
 800481a:	46a2      	mov	sl, r4
 800481c:	e7d2      	b.n	80047c4 <_svfiprintf_r+0x9c>
 800481e:	9b03      	ldr	r3, [sp, #12]
 8004820:	1d19      	adds	r1, r3, #4
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	9103      	str	r1, [sp, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	bfbb      	ittet	lt
 800482a:	425b      	neglt	r3, r3
 800482c:	f042 0202 	orrlt.w	r2, r2, #2
 8004830:	9307      	strge	r3, [sp, #28]
 8004832:	9307      	strlt	r3, [sp, #28]
 8004834:	bfb8      	it	lt
 8004836:	9204      	strlt	r2, [sp, #16]
 8004838:	7823      	ldrb	r3, [r4, #0]
 800483a:	2b2e      	cmp	r3, #46	; 0x2e
 800483c:	d10c      	bne.n	8004858 <_svfiprintf_r+0x130>
 800483e:	7863      	ldrb	r3, [r4, #1]
 8004840:	2b2a      	cmp	r3, #42	; 0x2a
 8004842:	d135      	bne.n	80048b0 <_svfiprintf_r+0x188>
 8004844:	9b03      	ldr	r3, [sp, #12]
 8004846:	1d1a      	adds	r2, r3, #4
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	9203      	str	r2, [sp, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	bfb8      	it	lt
 8004850:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004854:	3402      	adds	r4, #2
 8004856:	9305      	str	r3, [sp, #20]
 8004858:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004924 <_svfiprintf_r+0x1fc>
 800485c:	7821      	ldrb	r1, [r4, #0]
 800485e:	2203      	movs	r2, #3
 8004860:	4650      	mov	r0, sl
 8004862:	f7fb fcc5 	bl	80001f0 <memchr>
 8004866:	b140      	cbz	r0, 800487a <_svfiprintf_r+0x152>
 8004868:	2340      	movs	r3, #64	; 0x40
 800486a:	eba0 000a 	sub.w	r0, r0, sl
 800486e:	fa03 f000 	lsl.w	r0, r3, r0
 8004872:	9b04      	ldr	r3, [sp, #16]
 8004874:	4303      	orrs	r3, r0
 8004876:	3401      	adds	r4, #1
 8004878:	9304      	str	r3, [sp, #16]
 800487a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800487e:	4826      	ldr	r0, [pc, #152]	; (8004918 <_svfiprintf_r+0x1f0>)
 8004880:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004884:	2206      	movs	r2, #6
 8004886:	f7fb fcb3 	bl	80001f0 <memchr>
 800488a:	2800      	cmp	r0, #0
 800488c:	d038      	beq.n	8004900 <_svfiprintf_r+0x1d8>
 800488e:	4b23      	ldr	r3, [pc, #140]	; (800491c <_svfiprintf_r+0x1f4>)
 8004890:	bb1b      	cbnz	r3, 80048da <_svfiprintf_r+0x1b2>
 8004892:	9b03      	ldr	r3, [sp, #12]
 8004894:	3307      	adds	r3, #7
 8004896:	f023 0307 	bic.w	r3, r3, #7
 800489a:	3308      	adds	r3, #8
 800489c:	9303      	str	r3, [sp, #12]
 800489e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a0:	4433      	add	r3, r6
 80048a2:	9309      	str	r3, [sp, #36]	; 0x24
 80048a4:	e767      	b.n	8004776 <_svfiprintf_r+0x4e>
 80048a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80048aa:	460c      	mov	r4, r1
 80048ac:	2001      	movs	r0, #1
 80048ae:	e7a5      	b.n	80047fc <_svfiprintf_r+0xd4>
 80048b0:	2300      	movs	r3, #0
 80048b2:	3401      	adds	r4, #1
 80048b4:	9305      	str	r3, [sp, #20]
 80048b6:	4619      	mov	r1, r3
 80048b8:	f04f 0c0a 	mov.w	ip, #10
 80048bc:	4620      	mov	r0, r4
 80048be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048c2:	3a30      	subs	r2, #48	; 0x30
 80048c4:	2a09      	cmp	r2, #9
 80048c6:	d903      	bls.n	80048d0 <_svfiprintf_r+0x1a8>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0c5      	beq.n	8004858 <_svfiprintf_r+0x130>
 80048cc:	9105      	str	r1, [sp, #20]
 80048ce:	e7c3      	b.n	8004858 <_svfiprintf_r+0x130>
 80048d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80048d4:	4604      	mov	r4, r0
 80048d6:	2301      	movs	r3, #1
 80048d8:	e7f0      	b.n	80048bc <_svfiprintf_r+0x194>
 80048da:	ab03      	add	r3, sp, #12
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	462a      	mov	r2, r5
 80048e0:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <_svfiprintf_r+0x1f8>)
 80048e2:	a904      	add	r1, sp, #16
 80048e4:	4638      	mov	r0, r7
 80048e6:	f3af 8000 	nop.w
 80048ea:	1c42      	adds	r2, r0, #1
 80048ec:	4606      	mov	r6, r0
 80048ee:	d1d6      	bne.n	800489e <_svfiprintf_r+0x176>
 80048f0:	89ab      	ldrh	r3, [r5, #12]
 80048f2:	065b      	lsls	r3, r3, #25
 80048f4:	f53f af2c 	bmi.w	8004750 <_svfiprintf_r+0x28>
 80048f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048fa:	b01d      	add	sp, #116	; 0x74
 80048fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004900:	ab03      	add	r3, sp, #12
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	462a      	mov	r2, r5
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <_svfiprintf_r+0x1f8>)
 8004908:	a904      	add	r1, sp, #16
 800490a:	4638      	mov	r0, r7
 800490c:	f000 f87a 	bl	8004a04 <_printf_i>
 8004910:	e7eb      	b.n	80048ea <_svfiprintf_r+0x1c2>
 8004912:	bf00      	nop
 8004914:	08008e0c 	.word	0x08008e0c
 8004918:	08008e16 	.word	0x08008e16
 800491c:	00000000 	.word	0x00000000
 8004920:	08004671 	.word	0x08004671
 8004924:	08008e12 	.word	0x08008e12

08004928 <_printf_common>:
 8004928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800492c:	4616      	mov	r6, r2
 800492e:	4699      	mov	r9, r3
 8004930:	688a      	ldr	r2, [r1, #8]
 8004932:	690b      	ldr	r3, [r1, #16]
 8004934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004938:	4293      	cmp	r3, r2
 800493a:	bfb8      	it	lt
 800493c:	4613      	movlt	r3, r2
 800493e:	6033      	str	r3, [r6, #0]
 8004940:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004944:	4607      	mov	r7, r0
 8004946:	460c      	mov	r4, r1
 8004948:	b10a      	cbz	r2, 800494e <_printf_common+0x26>
 800494a:	3301      	adds	r3, #1
 800494c:	6033      	str	r3, [r6, #0]
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	0699      	lsls	r1, r3, #26
 8004952:	bf42      	ittt	mi
 8004954:	6833      	ldrmi	r3, [r6, #0]
 8004956:	3302      	addmi	r3, #2
 8004958:	6033      	strmi	r3, [r6, #0]
 800495a:	6825      	ldr	r5, [r4, #0]
 800495c:	f015 0506 	ands.w	r5, r5, #6
 8004960:	d106      	bne.n	8004970 <_printf_common+0x48>
 8004962:	f104 0a19 	add.w	sl, r4, #25
 8004966:	68e3      	ldr	r3, [r4, #12]
 8004968:	6832      	ldr	r2, [r6, #0]
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	42ab      	cmp	r3, r5
 800496e:	dc26      	bgt.n	80049be <_printf_common+0x96>
 8004970:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004974:	1e13      	subs	r3, r2, #0
 8004976:	6822      	ldr	r2, [r4, #0]
 8004978:	bf18      	it	ne
 800497a:	2301      	movne	r3, #1
 800497c:	0692      	lsls	r2, r2, #26
 800497e:	d42b      	bmi.n	80049d8 <_printf_common+0xb0>
 8004980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004984:	4649      	mov	r1, r9
 8004986:	4638      	mov	r0, r7
 8004988:	47c0      	blx	r8
 800498a:	3001      	adds	r0, #1
 800498c:	d01e      	beq.n	80049cc <_printf_common+0xa4>
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	68e5      	ldr	r5, [r4, #12]
 8004992:	6832      	ldr	r2, [r6, #0]
 8004994:	f003 0306 	and.w	r3, r3, #6
 8004998:	2b04      	cmp	r3, #4
 800499a:	bf08      	it	eq
 800499c:	1aad      	subeq	r5, r5, r2
 800499e:	68a3      	ldr	r3, [r4, #8]
 80049a0:	6922      	ldr	r2, [r4, #16]
 80049a2:	bf0c      	ite	eq
 80049a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049a8:	2500      	movne	r5, #0
 80049aa:	4293      	cmp	r3, r2
 80049ac:	bfc4      	itt	gt
 80049ae:	1a9b      	subgt	r3, r3, r2
 80049b0:	18ed      	addgt	r5, r5, r3
 80049b2:	2600      	movs	r6, #0
 80049b4:	341a      	adds	r4, #26
 80049b6:	42b5      	cmp	r5, r6
 80049b8:	d11a      	bne.n	80049f0 <_printf_common+0xc8>
 80049ba:	2000      	movs	r0, #0
 80049bc:	e008      	b.n	80049d0 <_printf_common+0xa8>
 80049be:	2301      	movs	r3, #1
 80049c0:	4652      	mov	r2, sl
 80049c2:	4649      	mov	r1, r9
 80049c4:	4638      	mov	r0, r7
 80049c6:	47c0      	blx	r8
 80049c8:	3001      	adds	r0, #1
 80049ca:	d103      	bne.n	80049d4 <_printf_common+0xac>
 80049cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d4:	3501      	adds	r5, #1
 80049d6:	e7c6      	b.n	8004966 <_printf_common+0x3e>
 80049d8:	18e1      	adds	r1, r4, r3
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	2030      	movs	r0, #48	; 0x30
 80049de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049e2:	4422      	add	r2, r4
 80049e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049ec:	3302      	adds	r3, #2
 80049ee:	e7c7      	b.n	8004980 <_printf_common+0x58>
 80049f0:	2301      	movs	r3, #1
 80049f2:	4622      	mov	r2, r4
 80049f4:	4649      	mov	r1, r9
 80049f6:	4638      	mov	r0, r7
 80049f8:	47c0      	blx	r8
 80049fa:	3001      	adds	r0, #1
 80049fc:	d0e6      	beq.n	80049cc <_printf_common+0xa4>
 80049fe:	3601      	adds	r6, #1
 8004a00:	e7d9      	b.n	80049b6 <_printf_common+0x8e>
	...

08004a04 <_printf_i>:
 8004a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a08:	460c      	mov	r4, r1
 8004a0a:	4691      	mov	r9, r2
 8004a0c:	7e27      	ldrb	r7, [r4, #24]
 8004a0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a10:	2f78      	cmp	r7, #120	; 0x78
 8004a12:	4680      	mov	r8, r0
 8004a14:	469a      	mov	sl, r3
 8004a16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a1a:	d807      	bhi.n	8004a2c <_printf_i+0x28>
 8004a1c:	2f62      	cmp	r7, #98	; 0x62
 8004a1e:	d80a      	bhi.n	8004a36 <_printf_i+0x32>
 8004a20:	2f00      	cmp	r7, #0
 8004a22:	f000 80d8 	beq.w	8004bd6 <_printf_i+0x1d2>
 8004a26:	2f58      	cmp	r7, #88	; 0x58
 8004a28:	f000 80a3 	beq.w	8004b72 <_printf_i+0x16e>
 8004a2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a34:	e03a      	b.n	8004aac <_printf_i+0xa8>
 8004a36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a3a:	2b15      	cmp	r3, #21
 8004a3c:	d8f6      	bhi.n	8004a2c <_printf_i+0x28>
 8004a3e:	a001      	add	r0, pc, #4	; (adr r0, 8004a44 <_printf_i+0x40>)
 8004a40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a44:	08004a9d 	.word	0x08004a9d
 8004a48:	08004ab1 	.word	0x08004ab1
 8004a4c:	08004a2d 	.word	0x08004a2d
 8004a50:	08004a2d 	.word	0x08004a2d
 8004a54:	08004a2d 	.word	0x08004a2d
 8004a58:	08004a2d 	.word	0x08004a2d
 8004a5c:	08004ab1 	.word	0x08004ab1
 8004a60:	08004a2d 	.word	0x08004a2d
 8004a64:	08004a2d 	.word	0x08004a2d
 8004a68:	08004a2d 	.word	0x08004a2d
 8004a6c:	08004a2d 	.word	0x08004a2d
 8004a70:	08004bbd 	.word	0x08004bbd
 8004a74:	08004ae1 	.word	0x08004ae1
 8004a78:	08004b9f 	.word	0x08004b9f
 8004a7c:	08004a2d 	.word	0x08004a2d
 8004a80:	08004a2d 	.word	0x08004a2d
 8004a84:	08004bdf 	.word	0x08004bdf
 8004a88:	08004a2d 	.word	0x08004a2d
 8004a8c:	08004ae1 	.word	0x08004ae1
 8004a90:	08004a2d 	.word	0x08004a2d
 8004a94:	08004a2d 	.word	0x08004a2d
 8004a98:	08004ba7 	.word	0x08004ba7
 8004a9c:	680b      	ldr	r3, [r1, #0]
 8004a9e:	1d1a      	adds	r2, r3, #4
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	600a      	str	r2, [r1, #0]
 8004aa4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0a3      	b.n	8004bf8 <_printf_i+0x1f4>
 8004ab0:	6825      	ldr	r5, [r4, #0]
 8004ab2:	6808      	ldr	r0, [r1, #0]
 8004ab4:	062e      	lsls	r6, r5, #24
 8004ab6:	f100 0304 	add.w	r3, r0, #4
 8004aba:	d50a      	bpl.n	8004ad2 <_printf_i+0xce>
 8004abc:	6805      	ldr	r5, [r0, #0]
 8004abe:	600b      	str	r3, [r1, #0]
 8004ac0:	2d00      	cmp	r5, #0
 8004ac2:	da03      	bge.n	8004acc <_printf_i+0xc8>
 8004ac4:	232d      	movs	r3, #45	; 0x2d
 8004ac6:	426d      	negs	r5, r5
 8004ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004acc:	485e      	ldr	r0, [pc, #376]	; (8004c48 <_printf_i+0x244>)
 8004ace:	230a      	movs	r3, #10
 8004ad0:	e019      	b.n	8004b06 <_printf_i+0x102>
 8004ad2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ad6:	6805      	ldr	r5, [r0, #0]
 8004ad8:	600b      	str	r3, [r1, #0]
 8004ada:	bf18      	it	ne
 8004adc:	b22d      	sxthne	r5, r5
 8004ade:	e7ef      	b.n	8004ac0 <_printf_i+0xbc>
 8004ae0:	680b      	ldr	r3, [r1, #0]
 8004ae2:	6825      	ldr	r5, [r4, #0]
 8004ae4:	1d18      	adds	r0, r3, #4
 8004ae6:	6008      	str	r0, [r1, #0]
 8004ae8:	0628      	lsls	r0, r5, #24
 8004aea:	d501      	bpl.n	8004af0 <_printf_i+0xec>
 8004aec:	681d      	ldr	r5, [r3, #0]
 8004aee:	e002      	b.n	8004af6 <_printf_i+0xf2>
 8004af0:	0669      	lsls	r1, r5, #25
 8004af2:	d5fb      	bpl.n	8004aec <_printf_i+0xe8>
 8004af4:	881d      	ldrh	r5, [r3, #0]
 8004af6:	4854      	ldr	r0, [pc, #336]	; (8004c48 <_printf_i+0x244>)
 8004af8:	2f6f      	cmp	r7, #111	; 0x6f
 8004afa:	bf0c      	ite	eq
 8004afc:	2308      	moveq	r3, #8
 8004afe:	230a      	movne	r3, #10
 8004b00:	2100      	movs	r1, #0
 8004b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b06:	6866      	ldr	r6, [r4, #4]
 8004b08:	60a6      	str	r6, [r4, #8]
 8004b0a:	2e00      	cmp	r6, #0
 8004b0c:	bfa2      	ittt	ge
 8004b0e:	6821      	ldrge	r1, [r4, #0]
 8004b10:	f021 0104 	bicge.w	r1, r1, #4
 8004b14:	6021      	strge	r1, [r4, #0]
 8004b16:	b90d      	cbnz	r5, 8004b1c <_printf_i+0x118>
 8004b18:	2e00      	cmp	r6, #0
 8004b1a:	d04d      	beq.n	8004bb8 <_printf_i+0x1b4>
 8004b1c:	4616      	mov	r6, r2
 8004b1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b22:	fb03 5711 	mls	r7, r3, r1, r5
 8004b26:	5dc7      	ldrb	r7, [r0, r7]
 8004b28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b2c:	462f      	mov	r7, r5
 8004b2e:	42bb      	cmp	r3, r7
 8004b30:	460d      	mov	r5, r1
 8004b32:	d9f4      	bls.n	8004b1e <_printf_i+0x11a>
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d10b      	bne.n	8004b50 <_printf_i+0x14c>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	07df      	lsls	r7, r3, #31
 8004b3c:	d508      	bpl.n	8004b50 <_printf_i+0x14c>
 8004b3e:	6923      	ldr	r3, [r4, #16]
 8004b40:	6861      	ldr	r1, [r4, #4]
 8004b42:	4299      	cmp	r1, r3
 8004b44:	bfde      	ittt	le
 8004b46:	2330      	movle	r3, #48	; 0x30
 8004b48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b4c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004b50:	1b92      	subs	r2, r2, r6
 8004b52:	6122      	str	r2, [r4, #16]
 8004b54:	f8cd a000 	str.w	sl, [sp]
 8004b58:	464b      	mov	r3, r9
 8004b5a:	aa03      	add	r2, sp, #12
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	4640      	mov	r0, r8
 8004b60:	f7ff fee2 	bl	8004928 <_printf_common>
 8004b64:	3001      	adds	r0, #1
 8004b66:	d14c      	bne.n	8004c02 <_printf_i+0x1fe>
 8004b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b6c:	b004      	add	sp, #16
 8004b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b72:	4835      	ldr	r0, [pc, #212]	; (8004c48 <_printf_i+0x244>)
 8004b74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	680e      	ldr	r6, [r1, #0]
 8004b7c:	061f      	lsls	r7, r3, #24
 8004b7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b82:	600e      	str	r6, [r1, #0]
 8004b84:	d514      	bpl.n	8004bb0 <_printf_i+0x1ac>
 8004b86:	07d9      	lsls	r1, r3, #31
 8004b88:	bf44      	itt	mi
 8004b8a:	f043 0320 	orrmi.w	r3, r3, #32
 8004b8e:	6023      	strmi	r3, [r4, #0]
 8004b90:	b91d      	cbnz	r5, 8004b9a <_printf_i+0x196>
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	f023 0320 	bic.w	r3, r3, #32
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	2310      	movs	r3, #16
 8004b9c:	e7b0      	b.n	8004b00 <_printf_i+0xfc>
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	f043 0320 	orr.w	r3, r3, #32
 8004ba4:	6023      	str	r3, [r4, #0]
 8004ba6:	2378      	movs	r3, #120	; 0x78
 8004ba8:	4828      	ldr	r0, [pc, #160]	; (8004c4c <_printf_i+0x248>)
 8004baa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bae:	e7e3      	b.n	8004b78 <_printf_i+0x174>
 8004bb0:	065e      	lsls	r6, r3, #25
 8004bb2:	bf48      	it	mi
 8004bb4:	b2ad      	uxthmi	r5, r5
 8004bb6:	e7e6      	b.n	8004b86 <_printf_i+0x182>
 8004bb8:	4616      	mov	r6, r2
 8004bba:	e7bb      	b.n	8004b34 <_printf_i+0x130>
 8004bbc:	680b      	ldr	r3, [r1, #0]
 8004bbe:	6826      	ldr	r6, [r4, #0]
 8004bc0:	6960      	ldr	r0, [r4, #20]
 8004bc2:	1d1d      	adds	r5, r3, #4
 8004bc4:	600d      	str	r5, [r1, #0]
 8004bc6:	0635      	lsls	r5, r6, #24
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	d501      	bpl.n	8004bd0 <_printf_i+0x1cc>
 8004bcc:	6018      	str	r0, [r3, #0]
 8004bce:	e002      	b.n	8004bd6 <_printf_i+0x1d2>
 8004bd0:	0671      	lsls	r1, r6, #25
 8004bd2:	d5fb      	bpl.n	8004bcc <_printf_i+0x1c8>
 8004bd4:	8018      	strh	r0, [r3, #0]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	6123      	str	r3, [r4, #16]
 8004bda:	4616      	mov	r6, r2
 8004bdc:	e7ba      	b.n	8004b54 <_printf_i+0x150>
 8004bde:	680b      	ldr	r3, [r1, #0]
 8004be0:	1d1a      	adds	r2, r3, #4
 8004be2:	600a      	str	r2, [r1, #0]
 8004be4:	681e      	ldr	r6, [r3, #0]
 8004be6:	6862      	ldr	r2, [r4, #4]
 8004be8:	2100      	movs	r1, #0
 8004bea:	4630      	mov	r0, r6
 8004bec:	f7fb fb00 	bl	80001f0 <memchr>
 8004bf0:	b108      	cbz	r0, 8004bf6 <_printf_i+0x1f2>
 8004bf2:	1b80      	subs	r0, r0, r6
 8004bf4:	6060      	str	r0, [r4, #4]
 8004bf6:	6863      	ldr	r3, [r4, #4]
 8004bf8:	6123      	str	r3, [r4, #16]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c00:	e7a8      	b.n	8004b54 <_printf_i+0x150>
 8004c02:	6923      	ldr	r3, [r4, #16]
 8004c04:	4632      	mov	r2, r6
 8004c06:	4649      	mov	r1, r9
 8004c08:	4640      	mov	r0, r8
 8004c0a:	47d0      	blx	sl
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d0ab      	beq.n	8004b68 <_printf_i+0x164>
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	079b      	lsls	r3, r3, #30
 8004c14:	d413      	bmi.n	8004c3e <_printf_i+0x23a>
 8004c16:	68e0      	ldr	r0, [r4, #12]
 8004c18:	9b03      	ldr	r3, [sp, #12]
 8004c1a:	4298      	cmp	r0, r3
 8004c1c:	bfb8      	it	lt
 8004c1e:	4618      	movlt	r0, r3
 8004c20:	e7a4      	b.n	8004b6c <_printf_i+0x168>
 8004c22:	2301      	movs	r3, #1
 8004c24:	4632      	mov	r2, r6
 8004c26:	4649      	mov	r1, r9
 8004c28:	4640      	mov	r0, r8
 8004c2a:	47d0      	blx	sl
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	d09b      	beq.n	8004b68 <_printf_i+0x164>
 8004c30:	3501      	adds	r5, #1
 8004c32:	68e3      	ldr	r3, [r4, #12]
 8004c34:	9903      	ldr	r1, [sp, #12]
 8004c36:	1a5b      	subs	r3, r3, r1
 8004c38:	42ab      	cmp	r3, r5
 8004c3a:	dcf2      	bgt.n	8004c22 <_printf_i+0x21e>
 8004c3c:	e7eb      	b.n	8004c16 <_printf_i+0x212>
 8004c3e:	2500      	movs	r5, #0
 8004c40:	f104 0619 	add.w	r6, r4, #25
 8004c44:	e7f5      	b.n	8004c32 <_printf_i+0x22e>
 8004c46:	bf00      	nop
 8004c48:	08008e1d 	.word	0x08008e1d
 8004c4c:	08008e2e 	.word	0x08008e2e

08004c50 <_free_r>:
 8004c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c52:	2900      	cmp	r1, #0
 8004c54:	d048      	beq.n	8004ce8 <_free_r+0x98>
 8004c56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c5a:	9001      	str	r0, [sp, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f1a1 0404 	sub.w	r4, r1, #4
 8004c62:	bfb8      	it	lt
 8004c64:	18e4      	addlt	r4, r4, r3
 8004c66:	f000 f8d3 	bl	8004e10 <__malloc_lock>
 8004c6a:	4a20      	ldr	r2, [pc, #128]	; (8004cec <_free_r+0x9c>)
 8004c6c:	9801      	ldr	r0, [sp, #4]
 8004c6e:	6813      	ldr	r3, [r2, #0]
 8004c70:	4615      	mov	r5, r2
 8004c72:	b933      	cbnz	r3, 8004c82 <_free_r+0x32>
 8004c74:	6063      	str	r3, [r4, #4]
 8004c76:	6014      	str	r4, [r2, #0]
 8004c78:	b003      	add	sp, #12
 8004c7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c7e:	f000 b8cd 	b.w	8004e1c <__malloc_unlock>
 8004c82:	42a3      	cmp	r3, r4
 8004c84:	d90b      	bls.n	8004c9e <_free_r+0x4e>
 8004c86:	6821      	ldr	r1, [r4, #0]
 8004c88:	1862      	adds	r2, r4, r1
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	bf04      	itt	eq
 8004c8e:	681a      	ldreq	r2, [r3, #0]
 8004c90:	685b      	ldreq	r3, [r3, #4]
 8004c92:	6063      	str	r3, [r4, #4]
 8004c94:	bf04      	itt	eq
 8004c96:	1852      	addeq	r2, r2, r1
 8004c98:	6022      	streq	r2, [r4, #0]
 8004c9a:	602c      	str	r4, [r5, #0]
 8004c9c:	e7ec      	b.n	8004c78 <_free_r+0x28>
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	b10b      	cbz	r3, 8004ca8 <_free_r+0x58>
 8004ca4:	42a3      	cmp	r3, r4
 8004ca6:	d9fa      	bls.n	8004c9e <_free_r+0x4e>
 8004ca8:	6811      	ldr	r1, [r2, #0]
 8004caa:	1855      	adds	r5, r2, r1
 8004cac:	42a5      	cmp	r5, r4
 8004cae:	d10b      	bne.n	8004cc8 <_free_r+0x78>
 8004cb0:	6824      	ldr	r4, [r4, #0]
 8004cb2:	4421      	add	r1, r4
 8004cb4:	1854      	adds	r4, r2, r1
 8004cb6:	42a3      	cmp	r3, r4
 8004cb8:	6011      	str	r1, [r2, #0]
 8004cba:	d1dd      	bne.n	8004c78 <_free_r+0x28>
 8004cbc:	681c      	ldr	r4, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	6053      	str	r3, [r2, #4]
 8004cc2:	4421      	add	r1, r4
 8004cc4:	6011      	str	r1, [r2, #0]
 8004cc6:	e7d7      	b.n	8004c78 <_free_r+0x28>
 8004cc8:	d902      	bls.n	8004cd0 <_free_r+0x80>
 8004cca:	230c      	movs	r3, #12
 8004ccc:	6003      	str	r3, [r0, #0]
 8004cce:	e7d3      	b.n	8004c78 <_free_r+0x28>
 8004cd0:	6825      	ldr	r5, [r4, #0]
 8004cd2:	1961      	adds	r1, r4, r5
 8004cd4:	428b      	cmp	r3, r1
 8004cd6:	bf04      	itt	eq
 8004cd8:	6819      	ldreq	r1, [r3, #0]
 8004cda:	685b      	ldreq	r3, [r3, #4]
 8004cdc:	6063      	str	r3, [r4, #4]
 8004cde:	bf04      	itt	eq
 8004ce0:	1949      	addeq	r1, r1, r5
 8004ce2:	6021      	streq	r1, [r4, #0]
 8004ce4:	6054      	str	r4, [r2, #4]
 8004ce6:	e7c7      	b.n	8004c78 <_free_r+0x28>
 8004ce8:	b003      	add	sp, #12
 8004cea:	bd30      	pop	{r4, r5, pc}
 8004cec:	200004b8 	.word	0x200004b8

08004cf0 <_malloc_r>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	1ccd      	adds	r5, r1, #3
 8004cf4:	f025 0503 	bic.w	r5, r5, #3
 8004cf8:	3508      	adds	r5, #8
 8004cfa:	2d0c      	cmp	r5, #12
 8004cfc:	bf38      	it	cc
 8004cfe:	250c      	movcc	r5, #12
 8004d00:	2d00      	cmp	r5, #0
 8004d02:	4606      	mov	r6, r0
 8004d04:	db01      	blt.n	8004d0a <_malloc_r+0x1a>
 8004d06:	42a9      	cmp	r1, r5
 8004d08:	d903      	bls.n	8004d12 <_malloc_r+0x22>
 8004d0a:	230c      	movs	r3, #12
 8004d0c:	6033      	str	r3, [r6, #0]
 8004d0e:	2000      	movs	r0, #0
 8004d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d12:	f000 f87d 	bl	8004e10 <__malloc_lock>
 8004d16:	4921      	ldr	r1, [pc, #132]	; (8004d9c <_malloc_r+0xac>)
 8004d18:	680a      	ldr	r2, [r1, #0]
 8004d1a:	4614      	mov	r4, r2
 8004d1c:	b99c      	cbnz	r4, 8004d46 <_malloc_r+0x56>
 8004d1e:	4f20      	ldr	r7, [pc, #128]	; (8004da0 <_malloc_r+0xb0>)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	b923      	cbnz	r3, 8004d2e <_malloc_r+0x3e>
 8004d24:	4621      	mov	r1, r4
 8004d26:	4630      	mov	r0, r6
 8004d28:	f000 f862 	bl	8004df0 <_sbrk_r>
 8004d2c:	6038      	str	r0, [r7, #0]
 8004d2e:	4629      	mov	r1, r5
 8004d30:	4630      	mov	r0, r6
 8004d32:	f000 f85d 	bl	8004df0 <_sbrk_r>
 8004d36:	1c43      	adds	r3, r0, #1
 8004d38:	d123      	bne.n	8004d82 <_malloc_r+0x92>
 8004d3a:	230c      	movs	r3, #12
 8004d3c:	6033      	str	r3, [r6, #0]
 8004d3e:	4630      	mov	r0, r6
 8004d40:	f000 f86c 	bl	8004e1c <__malloc_unlock>
 8004d44:	e7e3      	b.n	8004d0e <_malloc_r+0x1e>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	1b5b      	subs	r3, r3, r5
 8004d4a:	d417      	bmi.n	8004d7c <_malloc_r+0x8c>
 8004d4c:	2b0b      	cmp	r3, #11
 8004d4e:	d903      	bls.n	8004d58 <_malloc_r+0x68>
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	441c      	add	r4, r3
 8004d54:	6025      	str	r5, [r4, #0]
 8004d56:	e004      	b.n	8004d62 <_malloc_r+0x72>
 8004d58:	6863      	ldr	r3, [r4, #4]
 8004d5a:	42a2      	cmp	r2, r4
 8004d5c:	bf0c      	ite	eq
 8004d5e:	600b      	streq	r3, [r1, #0]
 8004d60:	6053      	strne	r3, [r2, #4]
 8004d62:	4630      	mov	r0, r6
 8004d64:	f000 f85a 	bl	8004e1c <__malloc_unlock>
 8004d68:	f104 000b 	add.w	r0, r4, #11
 8004d6c:	1d23      	adds	r3, r4, #4
 8004d6e:	f020 0007 	bic.w	r0, r0, #7
 8004d72:	1ac2      	subs	r2, r0, r3
 8004d74:	d0cc      	beq.n	8004d10 <_malloc_r+0x20>
 8004d76:	1a1b      	subs	r3, r3, r0
 8004d78:	50a3      	str	r3, [r4, r2]
 8004d7a:	e7c9      	b.n	8004d10 <_malloc_r+0x20>
 8004d7c:	4622      	mov	r2, r4
 8004d7e:	6864      	ldr	r4, [r4, #4]
 8004d80:	e7cc      	b.n	8004d1c <_malloc_r+0x2c>
 8004d82:	1cc4      	adds	r4, r0, #3
 8004d84:	f024 0403 	bic.w	r4, r4, #3
 8004d88:	42a0      	cmp	r0, r4
 8004d8a:	d0e3      	beq.n	8004d54 <_malloc_r+0x64>
 8004d8c:	1a21      	subs	r1, r4, r0
 8004d8e:	4630      	mov	r0, r6
 8004d90:	f000 f82e 	bl	8004df0 <_sbrk_r>
 8004d94:	3001      	adds	r0, #1
 8004d96:	d1dd      	bne.n	8004d54 <_malloc_r+0x64>
 8004d98:	e7cf      	b.n	8004d3a <_malloc_r+0x4a>
 8004d9a:	bf00      	nop
 8004d9c:	200004b8 	.word	0x200004b8
 8004da0:	200004bc 	.word	0x200004bc

08004da4 <_realloc_r>:
 8004da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da6:	4607      	mov	r7, r0
 8004da8:	4614      	mov	r4, r2
 8004daa:	460e      	mov	r6, r1
 8004dac:	b921      	cbnz	r1, 8004db8 <_realloc_r+0x14>
 8004dae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004db2:	4611      	mov	r1, r2
 8004db4:	f7ff bf9c 	b.w	8004cf0 <_malloc_r>
 8004db8:	b922      	cbnz	r2, 8004dc4 <_realloc_r+0x20>
 8004dba:	f7ff ff49 	bl	8004c50 <_free_r>
 8004dbe:	4625      	mov	r5, r4
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dc4:	f000 f830 	bl	8004e28 <_malloc_usable_size_r>
 8004dc8:	42a0      	cmp	r0, r4
 8004dca:	d20f      	bcs.n	8004dec <_realloc_r+0x48>
 8004dcc:	4621      	mov	r1, r4
 8004dce:	4638      	mov	r0, r7
 8004dd0:	f7ff ff8e 	bl	8004cf0 <_malloc_r>
 8004dd4:	4605      	mov	r5, r0
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	d0f2      	beq.n	8004dc0 <_realloc_r+0x1c>
 8004dda:	4631      	mov	r1, r6
 8004ddc:	4622      	mov	r2, r4
 8004dde:	f7ff fbe3 	bl	80045a8 <memcpy>
 8004de2:	4631      	mov	r1, r6
 8004de4:	4638      	mov	r0, r7
 8004de6:	f7ff ff33 	bl	8004c50 <_free_r>
 8004dea:	e7e9      	b.n	8004dc0 <_realloc_r+0x1c>
 8004dec:	4635      	mov	r5, r6
 8004dee:	e7e7      	b.n	8004dc0 <_realloc_r+0x1c>

08004df0 <_sbrk_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4d06      	ldr	r5, [pc, #24]	; (8004e0c <_sbrk_r+0x1c>)
 8004df4:	2300      	movs	r3, #0
 8004df6:	4604      	mov	r4, r0
 8004df8:	4608      	mov	r0, r1
 8004dfa:	602b      	str	r3, [r5, #0]
 8004dfc:	f7fc f950 	bl	80010a0 <_sbrk>
 8004e00:	1c43      	adds	r3, r0, #1
 8004e02:	d102      	bne.n	8004e0a <_sbrk_r+0x1a>
 8004e04:	682b      	ldr	r3, [r5, #0]
 8004e06:	b103      	cbz	r3, 8004e0a <_sbrk_r+0x1a>
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	bd38      	pop	{r3, r4, r5, pc}
 8004e0c:	20000510 	.word	0x20000510

08004e10 <__malloc_lock>:
 8004e10:	4801      	ldr	r0, [pc, #4]	; (8004e18 <__malloc_lock+0x8>)
 8004e12:	f000 b811 	b.w	8004e38 <__retarget_lock_acquire_recursive>
 8004e16:	bf00      	nop
 8004e18:	20000518 	.word	0x20000518

08004e1c <__malloc_unlock>:
 8004e1c:	4801      	ldr	r0, [pc, #4]	; (8004e24 <__malloc_unlock+0x8>)
 8004e1e:	f000 b80c 	b.w	8004e3a <__retarget_lock_release_recursive>
 8004e22:	bf00      	nop
 8004e24:	20000518 	.word	0x20000518

08004e28 <_malloc_usable_size_r>:
 8004e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e2c:	1f18      	subs	r0, r3, #4
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	bfbc      	itt	lt
 8004e32:	580b      	ldrlt	r3, [r1, r0]
 8004e34:	18c0      	addlt	r0, r0, r3
 8004e36:	4770      	bx	lr

08004e38 <__retarget_lock_acquire_recursive>:
 8004e38:	4770      	bx	lr

08004e3a <__retarget_lock_release_recursive>:
 8004e3a:	4770      	bx	lr
 8004e3c:	0000      	movs	r0, r0
	...

08004e40 <cos>:
 8004e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e42:	ec53 2b10 	vmov	r2, r3, d0
 8004e46:	4824      	ldr	r0, [pc, #144]	; (8004ed8 <cos+0x98>)
 8004e48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004e4c:	4281      	cmp	r1, r0
 8004e4e:	dc06      	bgt.n	8004e5e <cos+0x1e>
 8004e50:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8004ed0 <cos+0x90>
 8004e54:	f000 faa4 	bl	80053a0 <__kernel_cos>
 8004e58:	ec51 0b10 	vmov	r0, r1, d0
 8004e5c:	e007      	b.n	8004e6e <cos+0x2e>
 8004e5e:	481f      	ldr	r0, [pc, #124]	; (8004edc <cos+0x9c>)
 8004e60:	4281      	cmp	r1, r0
 8004e62:	dd09      	ble.n	8004e78 <cos+0x38>
 8004e64:	ee10 0a10 	vmov	r0, s0
 8004e68:	4619      	mov	r1, r3
 8004e6a:	f7fb fa15 	bl	8000298 <__aeabi_dsub>
 8004e6e:	ec41 0b10 	vmov	d0, r0, r1
 8004e72:	b005      	add	sp, #20
 8004e74:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e78:	4668      	mov	r0, sp
 8004e7a:	f000 f885 	bl	8004f88 <__ieee754_rem_pio2>
 8004e7e:	f000 0003 	and.w	r0, r0, #3
 8004e82:	2801      	cmp	r0, #1
 8004e84:	d007      	beq.n	8004e96 <cos+0x56>
 8004e86:	2802      	cmp	r0, #2
 8004e88:	d012      	beq.n	8004eb0 <cos+0x70>
 8004e8a:	b9c0      	cbnz	r0, 8004ebe <cos+0x7e>
 8004e8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004e90:	ed9d 0b00 	vldr	d0, [sp]
 8004e94:	e7de      	b.n	8004e54 <cos+0x14>
 8004e96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004e9a:	ed9d 0b00 	vldr	d0, [sp]
 8004e9e:	f000 fe87 	bl	8005bb0 <__kernel_sin>
 8004ea2:	ec53 2b10 	vmov	r2, r3, d0
 8004ea6:	ee10 0a10 	vmov	r0, s0
 8004eaa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004eae:	e7de      	b.n	8004e6e <cos+0x2e>
 8004eb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004eb4:	ed9d 0b00 	vldr	d0, [sp]
 8004eb8:	f000 fa72 	bl	80053a0 <__kernel_cos>
 8004ebc:	e7f1      	b.n	8004ea2 <cos+0x62>
 8004ebe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004ec2:	ed9d 0b00 	vldr	d0, [sp]
 8004ec6:	2001      	movs	r0, #1
 8004ec8:	f000 fe72 	bl	8005bb0 <__kernel_sin>
 8004ecc:	e7c4      	b.n	8004e58 <cos+0x18>
 8004ece:	bf00      	nop
	...
 8004ed8:	3fe921fb 	.word	0x3fe921fb
 8004edc:	7fefffff 	.word	0x7fefffff

08004ee0 <sin>:
 8004ee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ee2:	ec53 2b10 	vmov	r2, r3, d0
 8004ee6:	4826      	ldr	r0, [pc, #152]	; (8004f80 <sin+0xa0>)
 8004ee8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004eec:	4281      	cmp	r1, r0
 8004eee:	dc07      	bgt.n	8004f00 <sin+0x20>
 8004ef0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8004f78 <sin+0x98>
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	f000 fe5b 	bl	8005bb0 <__kernel_sin>
 8004efa:	ec51 0b10 	vmov	r0, r1, d0
 8004efe:	e007      	b.n	8004f10 <sin+0x30>
 8004f00:	4820      	ldr	r0, [pc, #128]	; (8004f84 <sin+0xa4>)
 8004f02:	4281      	cmp	r1, r0
 8004f04:	dd09      	ble.n	8004f1a <sin+0x3a>
 8004f06:	ee10 0a10 	vmov	r0, s0
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	f7fb f9c4 	bl	8000298 <__aeabi_dsub>
 8004f10:	ec41 0b10 	vmov	d0, r0, r1
 8004f14:	b005      	add	sp, #20
 8004f16:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f1a:	4668      	mov	r0, sp
 8004f1c:	f000 f834 	bl	8004f88 <__ieee754_rem_pio2>
 8004f20:	f000 0003 	and.w	r0, r0, #3
 8004f24:	2801      	cmp	r0, #1
 8004f26:	d008      	beq.n	8004f3a <sin+0x5a>
 8004f28:	2802      	cmp	r0, #2
 8004f2a:	d00d      	beq.n	8004f48 <sin+0x68>
 8004f2c:	b9d0      	cbnz	r0, 8004f64 <sin+0x84>
 8004f2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004f32:	ed9d 0b00 	vldr	d0, [sp]
 8004f36:	2001      	movs	r0, #1
 8004f38:	e7dd      	b.n	8004ef6 <sin+0x16>
 8004f3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004f3e:	ed9d 0b00 	vldr	d0, [sp]
 8004f42:	f000 fa2d 	bl	80053a0 <__kernel_cos>
 8004f46:	e7d8      	b.n	8004efa <sin+0x1a>
 8004f48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004f4c:	ed9d 0b00 	vldr	d0, [sp]
 8004f50:	2001      	movs	r0, #1
 8004f52:	f000 fe2d 	bl	8005bb0 <__kernel_sin>
 8004f56:	ec53 2b10 	vmov	r2, r3, d0
 8004f5a:	ee10 0a10 	vmov	r0, s0
 8004f5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004f62:	e7d5      	b.n	8004f10 <sin+0x30>
 8004f64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004f68:	ed9d 0b00 	vldr	d0, [sp]
 8004f6c:	f000 fa18 	bl	80053a0 <__kernel_cos>
 8004f70:	e7f1      	b.n	8004f56 <sin+0x76>
 8004f72:	bf00      	nop
 8004f74:	f3af 8000 	nop.w
	...
 8004f80:	3fe921fb 	.word	0x3fe921fb
 8004f84:	7fefffff 	.word	0x7fefffff

08004f88 <__ieee754_rem_pio2>:
 8004f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8c:	ed2d 8b02 	vpush	{d8}
 8004f90:	ec55 4b10 	vmov	r4, r5, d0
 8004f94:	4bca      	ldr	r3, [pc, #808]	; (80052c0 <__ieee754_rem_pio2+0x338>)
 8004f96:	b08b      	sub	sp, #44	; 0x2c
 8004f98:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004f9c:	4598      	cmp	r8, r3
 8004f9e:	4682      	mov	sl, r0
 8004fa0:	9502      	str	r5, [sp, #8]
 8004fa2:	dc08      	bgt.n	8004fb6 <__ieee754_rem_pio2+0x2e>
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	ed80 0b00 	vstr	d0, [r0]
 8004fac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004fb0:	f04f 0b00 	mov.w	fp, #0
 8004fb4:	e028      	b.n	8005008 <__ieee754_rem_pio2+0x80>
 8004fb6:	4bc3      	ldr	r3, [pc, #780]	; (80052c4 <__ieee754_rem_pio2+0x33c>)
 8004fb8:	4598      	cmp	r8, r3
 8004fba:	dc78      	bgt.n	80050ae <__ieee754_rem_pio2+0x126>
 8004fbc:	9b02      	ldr	r3, [sp, #8]
 8004fbe:	4ec2      	ldr	r6, [pc, #776]	; (80052c8 <__ieee754_rem_pio2+0x340>)
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	ee10 0a10 	vmov	r0, s0
 8004fc6:	a3b0      	add	r3, pc, #704	; (adr r3, 8005288 <__ieee754_rem_pio2+0x300>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	4629      	mov	r1, r5
 8004fce:	dd39      	ble.n	8005044 <__ieee754_rem_pio2+0xbc>
 8004fd0:	f7fb f962 	bl	8000298 <__aeabi_dsub>
 8004fd4:	45b0      	cmp	r8, r6
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	460d      	mov	r5, r1
 8004fda:	d01b      	beq.n	8005014 <__ieee754_rem_pio2+0x8c>
 8004fdc:	a3ac      	add	r3, pc, #688	; (adr r3, 8005290 <__ieee754_rem_pio2+0x308>)
 8004fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe2:	f7fb f959 	bl	8000298 <__aeabi_dsub>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	e9ca 2300 	strd	r2, r3, [sl]
 8004fee:	4620      	mov	r0, r4
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	f7fb f951 	bl	8000298 <__aeabi_dsub>
 8004ff6:	a3a6      	add	r3, pc, #664	; (adr r3, 8005290 <__ieee754_rem_pio2+0x308>)
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	f7fb f94c 	bl	8000298 <__aeabi_dsub>
 8005000:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005004:	f04f 0b01 	mov.w	fp, #1
 8005008:	4658      	mov	r0, fp
 800500a:	b00b      	add	sp, #44	; 0x2c
 800500c:	ecbd 8b02 	vpop	{d8}
 8005010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005014:	a3a0      	add	r3, pc, #640	; (adr r3, 8005298 <__ieee754_rem_pio2+0x310>)
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	f7fb f93d 	bl	8000298 <__aeabi_dsub>
 800501e:	a3a0      	add	r3, pc, #640	; (adr r3, 80052a0 <__ieee754_rem_pio2+0x318>)
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	4604      	mov	r4, r0
 8005026:	460d      	mov	r5, r1
 8005028:	f7fb f936 	bl	8000298 <__aeabi_dsub>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	e9ca 2300 	strd	r2, r3, [sl]
 8005034:	4620      	mov	r0, r4
 8005036:	4629      	mov	r1, r5
 8005038:	f7fb f92e 	bl	8000298 <__aeabi_dsub>
 800503c:	a398      	add	r3, pc, #608	; (adr r3, 80052a0 <__ieee754_rem_pio2+0x318>)
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	e7db      	b.n	8004ffc <__ieee754_rem_pio2+0x74>
 8005044:	f7fb f92a 	bl	800029c <__adddf3>
 8005048:	45b0      	cmp	r8, r6
 800504a:	4604      	mov	r4, r0
 800504c:	460d      	mov	r5, r1
 800504e:	d016      	beq.n	800507e <__ieee754_rem_pio2+0xf6>
 8005050:	a38f      	add	r3, pc, #572	; (adr r3, 8005290 <__ieee754_rem_pio2+0x308>)
 8005052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005056:	f7fb f921 	bl	800029c <__adddf3>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	e9ca 2300 	strd	r2, r3, [sl]
 8005062:	4620      	mov	r0, r4
 8005064:	4629      	mov	r1, r5
 8005066:	f7fb f917 	bl	8000298 <__aeabi_dsub>
 800506a:	a389      	add	r3, pc, #548	; (adr r3, 8005290 <__ieee754_rem_pio2+0x308>)
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	f7fb f914 	bl	800029c <__adddf3>
 8005074:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8005078:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800507c:	e7c4      	b.n	8005008 <__ieee754_rem_pio2+0x80>
 800507e:	a386      	add	r3, pc, #536	; (adr r3, 8005298 <__ieee754_rem_pio2+0x310>)
 8005080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005084:	f7fb f90a 	bl	800029c <__adddf3>
 8005088:	a385      	add	r3, pc, #532	; (adr r3, 80052a0 <__ieee754_rem_pio2+0x318>)
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	4604      	mov	r4, r0
 8005090:	460d      	mov	r5, r1
 8005092:	f7fb f903 	bl	800029c <__adddf3>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	e9ca 2300 	strd	r2, r3, [sl]
 800509e:	4620      	mov	r0, r4
 80050a0:	4629      	mov	r1, r5
 80050a2:	f7fb f8f9 	bl	8000298 <__aeabi_dsub>
 80050a6:	a37e      	add	r3, pc, #504	; (adr r3, 80052a0 <__ieee754_rem_pio2+0x318>)
 80050a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ac:	e7e0      	b.n	8005070 <__ieee754_rem_pio2+0xe8>
 80050ae:	4b87      	ldr	r3, [pc, #540]	; (80052cc <__ieee754_rem_pio2+0x344>)
 80050b0:	4598      	cmp	r8, r3
 80050b2:	f300 80d9 	bgt.w	8005268 <__ieee754_rem_pio2+0x2e0>
 80050b6:	f000 fe39 	bl	8005d2c <fabs>
 80050ba:	ec55 4b10 	vmov	r4, r5, d0
 80050be:	ee10 0a10 	vmov	r0, s0
 80050c2:	a379      	add	r3, pc, #484	; (adr r3, 80052a8 <__ieee754_rem_pio2+0x320>)
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	4629      	mov	r1, r5
 80050ca:	f7fb fa9d 	bl	8000608 <__aeabi_dmul>
 80050ce:	4b80      	ldr	r3, [pc, #512]	; (80052d0 <__ieee754_rem_pio2+0x348>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	f7fb f8e3 	bl	800029c <__adddf3>
 80050d6:	f7fb fd31 	bl	8000b3c <__aeabi_d2iz>
 80050da:	4683      	mov	fp, r0
 80050dc:	f7fb fa2a 	bl	8000534 <__aeabi_i2d>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	ec43 2b18 	vmov	d8, r2, r3
 80050e8:	a367      	add	r3, pc, #412	; (adr r3, 8005288 <__ieee754_rem_pio2+0x300>)
 80050ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ee:	f7fb fa8b 	bl	8000608 <__aeabi_dmul>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	4620      	mov	r0, r4
 80050f8:	4629      	mov	r1, r5
 80050fa:	f7fb f8cd 	bl	8000298 <__aeabi_dsub>
 80050fe:	a364      	add	r3, pc, #400	; (adr r3, 8005290 <__ieee754_rem_pio2+0x308>)
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	4606      	mov	r6, r0
 8005106:	460f      	mov	r7, r1
 8005108:	ec51 0b18 	vmov	r0, r1, d8
 800510c:	f7fb fa7c 	bl	8000608 <__aeabi_dmul>
 8005110:	f1bb 0f1f 	cmp.w	fp, #31
 8005114:	4604      	mov	r4, r0
 8005116:	460d      	mov	r5, r1
 8005118:	dc0d      	bgt.n	8005136 <__ieee754_rem_pio2+0x1ae>
 800511a:	4b6e      	ldr	r3, [pc, #440]	; (80052d4 <__ieee754_rem_pio2+0x34c>)
 800511c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8005120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005124:	4543      	cmp	r3, r8
 8005126:	d006      	beq.n	8005136 <__ieee754_rem_pio2+0x1ae>
 8005128:	4622      	mov	r2, r4
 800512a:	462b      	mov	r3, r5
 800512c:	4630      	mov	r0, r6
 800512e:	4639      	mov	r1, r7
 8005130:	f7fb f8b2 	bl	8000298 <__aeabi_dsub>
 8005134:	e00f      	b.n	8005156 <__ieee754_rem_pio2+0x1ce>
 8005136:	462b      	mov	r3, r5
 8005138:	4622      	mov	r2, r4
 800513a:	4630      	mov	r0, r6
 800513c:	4639      	mov	r1, r7
 800513e:	f7fb f8ab 	bl	8000298 <__aeabi_dsub>
 8005142:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005146:	9303      	str	r3, [sp, #12]
 8005148:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800514c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005150:	f1b8 0f10 	cmp.w	r8, #16
 8005154:	dc02      	bgt.n	800515c <__ieee754_rem_pio2+0x1d4>
 8005156:	e9ca 0100 	strd	r0, r1, [sl]
 800515a:	e039      	b.n	80051d0 <__ieee754_rem_pio2+0x248>
 800515c:	a34e      	add	r3, pc, #312	; (adr r3, 8005298 <__ieee754_rem_pio2+0x310>)
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	ec51 0b18 	vmov	r0, r1, d8
 8005166:	f7fb fa4f 	bl	8000608 <__aeabi_dmul>
 800516a:	4604      	mov	r4, r0
 800516c:	460d      	mov	r5, r1
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4630      	mov	r0, r6
 8005174:	4639      	mov	r1, r7
 8005176:	f7fb f88f 	bl	8000298 <__aeabi_dsub>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	4680      	mov	r8, r0
 8005180:	4689      	mov	r9, r1
 8005182:	4630      	mov	r0, r6
 8005184:	4639      	mov	r1, r7
 8005186:	f7fb f887 	bl	8000298 <__aeabi_dsub>
 800518a:	4622      	mov	r2, r4
 800518c:	462b      	mov	r3, r5
 800518e:	f7fb f883 	bl	8000298 <__aeabi_dsub>
 8005192:	a343      	add	r3, pc, #268	; (adr r3, 80052a0 <__ieee754_rem_pio2+0x318>)
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	4604      	mov	r4, r0
 800519a:	460d      	mov	r5, r1
 800519c:	ec51 0b18 	vmov	r0, r1, d8
 80051a0:	f7fb fa32 	bl	8000608 <__aeabi_dmul>
 80051a4:	4622      	mov	r2, r4
 80051a6:	462b      	mov	r3, r5
 80051a8:	f7fb f876 	bl	8000298 <__aeabi_dsub>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	4604      	mov	r4, r0
 80051b2:	460d      	mov	r5, r1
 80051b4:	4640      	mov	r0, r8
 80051b6:	4649      	mov	r1, r9
 80051b8:	f7fb f86e 	bl	8000298 <__aeabi_dsub>
 80051bc:	9a03      	ldr	r2, [sp, #12]
 80051be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b31      	cmp	r3, #49	; 0x31
 80051c6:	dc24      	bgt.n	8005212 <__ieee754_rem_pio2+0x28a>
 80051c8:	e9ca 0100 	strd	r0, r1, [sl]
 80051cc:	4646      	mov	r6, r8
 80051ce:	464f      	mov	r7, r9
 80051d0:	e9da 8900 	ldrd	r8, r9, [sl]
 80051d4:	4630      	mov	r0, r6
 80051d6:	4642      	mov	r2, r8
 80051d8:	464b      	mov	r3, r9
 80051da:	4639      	mov	r1, r7
 80051dc:	f7fb f85c 	bl	8000298 <__aeabi_dsub>
 80051e0:	462b      	mov	r3, r5
 80051e2:	4622      	mov	r2, r4
 80051e4:	f7fb f858 	bl	8000298 <__aeabi_dsub>
 80051e8:	9b02      	ldr	r3, [sp, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80051f0:	f6bf af0a 	bge.w	8005008 <__ieee754_rem_pio2+0x80>
 80051f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80051f8:	f8ca 3004 	str.w	r3, [sl, #4]
 80051fc:	f8ca 8000 	str.w	r8, [sl]
 8005200:	f8ca 0008 	str.w	r0, [sl, #8]
 8005204:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005208:	f8ca 300c 	str.w	r3, [sl, #12]
 800520c:	f1cb 0b00 	rsb	fp, fp, #0
 8005210:	e6fa      	b.n	8005008 <__ieee754_rem_pio2+0x80>
 8005212:	a327      	add	r3, pc, #156	; (adr r3, 80052b0 <__ieee754_rem_pio2+0x328>)
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	ec51 0b18 	vmov	r0, r1, d8
 800521c:	f7fb f9f4 	bl	8000608 <__aeabi_dmul>
 8005220:	4604      	mov	r4, r0
 8005222:	460d      	mov	r5, r1
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4640      	mov	r0, r8
 800522a:	4649      	mov	r1, r9
 800522c:	f7fb f834 	bl	8000298 <__aeabi_dsub>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4606      	mov	r6, r0
 8005236:	460f      	mov	r7, r1
 8005238:	4640      	mov	r0, r8
 800523a:	4649      	mov	r1, r9
 800523c:	f7fb f82c 	bl	8000298 <__aeabi_dsub>
 8005240:	4622      	mov	r2, r4
 8005242:	462b      	mov	r3, r5
 8005244:	f7fb f828 	bl	8000298 <__aeabi_dsub>
 8005248:	a31b      	add	r3, pc, #108	; (adr r3, 80052b8 <__ieee754_rem_pio2+0x330>)
 800524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524e:	4604      	mov	r4, r0
 8005250:	460d      	mov	r5, r1
 8005252:	ec51 0b18 	vmov	r0, r1, d8
 8005256:	f7fb f9d7 	bl	8000608 <__aeabi_dmul>
 800525a:	4622      	mov	r2, r4
 800525c:	462b      	mov	r3, r5
 800525e:	f7fb f81b 	bl	8000298 <__aeabi_dsub>
 8005262:	4604      	mov	r4, r0
 8005264:	460d      	mov	r5, r1
 8005266:	e75f      	b.n	8005128 <__ieee754_rem_pio2+0x1a0>
 8005268:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <__ieee754_rem_pio2+0x350>)
 800526a:	4598      	cmp	r8, r3
 800526c:	dd36      	ble.n	80052dc <__ieee754_rem_pio2+0x354>
 800526e:	ee10 2a10 	vmov	r2, s0
 8005272:	462b      	mov	r3, r5
 8005274:	4620      	mov	r0, r4
 8005276:	4629      	mov	r1, r5
 8005278:	f7fb f80e 	bl	8000298 <__aeabi_dsub>
 800527c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005280:	e9ca 0100 	strd	r0, r1, [sl]
 8005284:	e694      	b.n	8004fb0 <__ieee754_rem_pio2+0x28>
 8005286:	bf00      	nop
 8005288:	54400000 	.word	0x54400000
 800528c:	3ff921fb 	.word	0x3ff921fb
 8005290:	1a626331 	.word	0x1a626331
 8005294:	3dd0b461 	.word	0x3dd0b461
 8005298:	1a600000 	.word	0x1a600000
 800529c:	3dd0b461 	.word	0x3dd0b461
 80052a0:	2e037073 	.word	0x2e037073
 80052a4:	3ba3198a 	.word	0x3ba3198a
 80052a8:	6dc9c883 	.word	0x6dc9c883
 80052ac:	3fe45f30 	.word	0x3fe45f30
 80052b0:	2e000000 	.word	0x2e000000
 80052b4:	3ba3198a 	.word	0x3ba3198a
 80052b8:	252049c1 	.word	0x252049c1
 80052bc:	397b839a 	.word	0x397b839a
 80052c0:	3fe921fb 	.word	0x3fe921fb
 80052c4:	4002d97b 	.word	0x4002d97b
 80052c8:	3ff921fb 	.word	0x3ff921fb
 80052cc:	413921fb 	.word	0x413921fb
 80052d0:	3fe00000 	.word	0x3fe00000
 80052d4:	08008e40 	.word	0x08008e40
 80052d8:	7fefffff 	.word	0x7fefffff
 80052dc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80052e0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80052e4:	ee10 0a10 	vmov	r0, s0
 80052e8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80052ec:	ee10 6a10 	vmov	r6, s0
 80052f0:	460f      	mov	r7, r1
 80052f2:	f7fb fc23 	bl	8000b3c <__aeabi_d2iz>
 80052f6:	f7fb f91d 	bl	8000534 <__aeabi_i2d>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	4630      	mov	r0, r6
 8005300:	4639      	mov	r1, r7
 8005302:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005306:	f7fa ffc7 	bl	8000298 <__aeabi_dsub>
 800530a:	4b22      	ldr	r3, [pc, #136]	; (8005394 <__ieee754_rem_pio2+0x40c>)
 800530c:	2200      	movs	r2, #0
 800530e:	f7fb f97b 	bl	8000608 <__aeabi_dmul>
 8005312:	460f      	mov	r7, r1
 8005314:	4606      	mov	r6, r0
 8005316:	f7fb fc11 	bl	8000b3c <__aeabi_d2iz>
 800531a:	f7fb f90b 	bl	8000534 <__aeabi_i2d>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4630      	mov	r0, r6
 8005324:	4639      	mov	r1, r7
 8005326:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800532a:	f7fa ffb5 	bl	8000298 <__aeabi_dsub>
 800532e:	4b19      	ldr	r3, [pc, #100]	; (8005394 <__ieee754_rem_pio2+0x40c>)
 8005330:	2200      	movs	r2, #0
 8005332:	f7fb f969 	bl	8000608 <__aeabi_dmul>
 8005336:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800533a:	ad04      	add	r5, sp, #16
 800533c:	f04f 0803 	mov.w	r8, #3
 8005340:	46a9      	mov	r9, r5
 8005342:	2600      	movs	r6, #0
 8005344:	2700      	movs	r7, #0
 8005346:	4632      	mov	r2, r6
 8005348:	463b      	mov	r3, r7
 800534a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800534e:	46c3      	mov	fp, r8
 8005350:	3d08      	subs	r5, #8
 8005352:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005356:	f7fb fbbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800535a:	2800      	cmp	r0, #0
 800535c:	d1f3      	bne.n	8005346 <__ieee754_rem_pio2+0x3be>
 800535e:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <__ieee754_rem_pio2+0x410>)
 8005360:	9301      	str	r3, [sp, #4]
 8005362:	2302      	movs	r3, #2
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	4622      	mov	r2, r4
 8005368:	465b      	mov	r3, fp
 800536a:	4651      	mov	r1, sl
 800536c:	4648      	mov	r0, r9
 800536e:	f000 f8df 	bl	8005530 <__kernel_rem_pio2>
 8005372:	9b02      	ldr	r3, [sp, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	4683      	mov	fp, r0
 8005378:	f6bf ae46 	bge.w	8005008 <__ieee754_rem_pio2+0x80>
 800537c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005380:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005384:	f8ca 3004 	str.w	r3, [sl, #4]
 8005388:	f8da 300c 	ldr.w	r3, [sl, #12]
 800538c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005390:	e73a      	b.n	8005208 <__ieee754_rem_pio2+0x280>
 8005392:	bf00      	nop
 8005394:	41700000 	.word	0x41700000
 8005398:	08008ec0 	.word	0x08008ec0
 800539c:	00000000 	.word	0x00000000

080053a0 <__kernel_cos>:
 80053a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a4:	ec57 6b10 	vmov	r6, r7, d0
 80053a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80053ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80053b0:	ed8d 1b00 	vstr	d1, [sp]
 80053b4:	da07      	bge.n	80053c6 <__kernel_cos+0x26>
 80053b6:	ee10 0a10 	vmov	r0, s0
 80053ba:	4639      	mov	r1, r7
 80053bc:	f7fb fbbe 	bl	8000b3c <__aeabi_d2iz>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	f000 8088 	beq.w	80054d6 <__kernel_cos+0x136>
 80053c6:	4632      	mov	r2, r6
 80053c8:	463b      	mov	r3, r7
 80053ca:	4630      	mov	r0, r6
 80053cc:	4639      	mov	r1, r7
 80053ce:	f7fb f91b 	bl	8000608 <__aeabi_dmul>
 80053d2:	4b51      	ldr	r3, [pc, #324]	; (8005518 <__kernel_cos+0x178>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	4604      	mov	r4, r0
 80053d8:	460d      	mov	r5, r1
 80053da:	f7fb f915 	bl	8000608 <__aeabi_dmul>
 80053de:	a340      	add	r3, pc, #256	; (adr r3, 80054e0 <__kernel_cos+0x140>)
 80053e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e4:	4682      	mov	sl, r0
 80053e6:	468b      	mov	fp, r1
 80053e8:	4620      	mov	r0, r4
 80053ea:	4629      	mov	r1, r5
 80053ec:	f7fb f90c 	bl	8000608 <__aeabi_dmul>
 80053f0:	a33d      	add	r3, pc, #244	; (adr r3, 80054e8 <__kernel_cos+0x148>)
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f7fa ff51 	bl	800029c <__adddf3>
 80053fa:	4622      	mov	r2, r4
 80053fc:	462b      	mov	r3, r5
 80053fe:	f7fb f903 	bl	8000608 <__aeabi_dmul>
 8005402:	a33b      	add	r3, pc, #236	; (adr r3, 80054f0 <__kernel_cos+0x150>)
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	f7fa ff46 	bl	8000298 <__aeabi_dsub>
 800540c:	4622      	mov	r2, r4
 800540e:	462b      	mov	r3, r5
 8005410:	f7fb f8fa 	bl	8000608 <__aeabi_dmul>
 8005414:	a338      	add	r3, pc, #224	; (adr r3, 80054f8 <__kernel_cos+0x158>)
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	f7fa ff3f 	bl	800029c <__adddf3>
 800541e:	4622      	mov	r2, r4
 8005420:	462b      	mov	r3, r5
 8005422:	f7fb f8f1 	bl	8000608 <__aeabi_dmul>
 8005426:	a336      	add	r3, pc, #216	; (adr r3, 8005500 <__kernel_cos+0x160>)
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	f7fa ff34 	bl	8000298 <__aeabi_dsub>
 8005430:	4622      	mov	r2, r4
 8005432:	462b      	mov	r3, r5
 8005434:	f7fb f8e8 	bl	8000608 <__aeabi_dmul>
 8005438:	a333      	add	r3, pc, #204	; (adr r3, 8005508 <__kernel_cos+0x168>)
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	f7fa ff2d 	bl	800029c <__adddf3>
 8005442:	4622      	mov	r2, r4
 8005444:	462b      	mov	r3, r5
 8005446:	f7fb f8df 	bl	8000608 <__aeabi_dmul>
 800544a:	4622      	mov	r2, r4
 800544c:	462b      	mov	r3, r5
 800544e:	f7fb f8db 	bl	8000608 <__aeabi_dmul>
 8005452:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005456:	4604      	mov	r4, r0
 8005458:	460d      	mov	r5, r1
 800545a:	4630      	mov	r0, r6
 800545c:	4639      	mov	r1, r7
 800545e:	f7fb f8d3 	bl	8000608 <__aeabi_dmul>
 8005462:	460b      	mov	r3, r1
 8005464:	4602      	mov	r2, r0
 8005466:	4629      	mov	r1, r5
 8005468:	4620      	mov	r0, r4
 800546a:	f7fa ff15 	bl	8000298 <__aeabi_dsub>
 800546e:	4b2b      	ldr	r3, [pc, #172]	; (800551c <__kernel_cos+0x17c>)
 8005470:	4598      	cmp	r8, r3
 8005472:	4606      	mov	r6, r0
 8005474:	460f      	mov	r7, r1
 8005476:	dc10      	bgt.n	800549a <__kernel_cos+0xfa>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	4650      	mov	r0, sl
 800547e:	4659      	mov	r1, fp
 8005480:	f7fa ff0a 	bl	8000298 <__aeabi_dsub>
 8005484:	460b      	mov	r3, r1
 8005486:	4926      	ldr	r1, [pc, #152]	; (8005520 <__kernel_cos+0x180>)
 8005488:	4602      	mov	r2, r0
 800548a:	2000      	movs	r0, #0
 800548c:	f7fa ff04 	bl	8000298 <__aeabi_dsub>
 8005490:	ec41 0b10 	vmov	d0, r0, r1
 8005494:	b003      	add	sp, #12
 8005496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549a:	4b22      	ldr	r3, [pc, #136]	; (8005524 <__kernel_cos+0x184>)
 800549c:	4920      	ldr	r1, [pc, #128]	; (8005520 <__kernel_cos+0x180>)
 800549e:	4598      	cmp	r8, r3
 80054a0:	bfcc      	ite	gt
 80054a2:	4d21      	ldrgt	r5, [pc, #132]	; (8005528 <__kernel_cos+0x188>)
 80054a4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80054a8:	2400      	movs	r4, #0
 80054aa:	4622      	mov	r2, r4
 80054ac:	462b      	mov	r3, r5
 80054ae:	2000      	movs	r0, #0
 80054b0:	f7fa fef2 	bl	8000298 <__aeabi_dsub>
 80054b4:	4622      	mov	r2, r4
 80054b6:	4680      	mov	r8, r0
 80054b8:	4689      	mov	r9, r1
 80054ba:	462b      	mov	r3, r5
 80054bc:	4650      	mov	r0, sl
 80054be:	4659      	mov	r1, fp
 80054c0:	f7fa feea 	bl	8000298 <__aeabi_dsub>
 80054c4:	4632      	mov	r2, r6
 80054c6:	463b      	mov	r3, r7
 80054c8:	f7fa fee6 	bl	8000298 <__aeabi_dsub>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4640      	mov	r0, r8
 80054d2:	4649      	mov	r1, r9
 80054d4:	e7da      	b.n	800548c <__kernel_cos+0xec>
 80054d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005510 <__kernel_cos+0x170>
 80054da:	e7db      	b.n	8005494 <__kernel_cos+0xf4>
 80054dc:	f3af 8000 	nop.w
 80054e0:	be8838d4 	.word	0xbe8838d4
 80054e4:	bda8fae9 	.word	0xbda8fae9
 80054e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80054ec:	3e21ee9e 	.word	0x3e21ee9e
 80054f0:	809c52ad 	.word	0x809c52ad
 80054f4:	3e927e4f 	.word	0x3e927e4f
 80054f8:	19cb1590 	.word	0x19cb1590
 80054fc:	3efa01a0 	.word	0x3efa01a0
 8005500:	16c15177 	.word	0x16c15177
 8005504:	3f56c16c 	.word	0x3f56c16c
 8005508:	5555554c 	.word	0x5555554c
 800550c:	3fa55555 	.word	0x3fa55555
 8005510:	00000000 	.word	0x00000000
 8005514:	3ff00000 	.word	0x3ff00000
 8005518:	3fe00000 	.word	0x3fe00000
 800551c:	3fd33332 	.word	0x3fd33332
 8005520:	3ff00000 	.word	0x3ff00000
 8005524:	3fe90000 	.word	0x3fe90000
 8005528:	3fd20000 	.word	0x3fd20000
 800552c:	00000000 	.word	0x00000000

08005530 <__kernel_rem_pio2>:
 8005530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	ed2d 8b02 	vpush	{d8}
 8005538:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800553c:	f112 0f14 	cmn.w	r2, #20
 8005540:	9308      	str	r3, [sp, #32]
 8005542:	9101      	str	r1, [sp, #4]
 8005544:	4bc6      	ldr	r3, [pc, #792]	; (8005860 <__kernel_rem_pio2+0x330>)
 8005546:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005548:	9009      	str	r0, [sp, #36]	; 0x24
 800554a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800554e:	9304      	str	r3, [sp, #16]
 8005550:	9b08      	ldr	r3, [sp, #32]
 8005552:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005556:	bfa8      	it	ge
 8005558:	1ed4      	subge	r4, r2, #3
 800555a:	9306      	str	r3, [sp, #24]
 800555c:	bfb2      	itee	lt
 800555e:	2400      	movlt	r4, #0
 8005560:	2318      	movge	r3, #24
 8005562:	fb94 f4f3 	sdivge	r4, r4, r3
 8005566:	f06f 0317 	mvn.w	r3, #23
 800556a:	fb04 3303 	mla	r3, r4, r3, r3
 800556e:	eb03 0a02 	add.w	sl, r3, r2
 8005572:	9b04      	ldr	r3, [sp, #16]
 8005574:	9a06      	ldr	r2, [sp, #24]
 8005576:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005850 <__kernel_rem_pio2+0x320>
 800557a:	eb03 0802 	add.w	r8, r3, r2
 800557e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005580:	1aa7      	subs	r7, r4, r2
 8005582:	ae20      	add	r6, sp, #128	; 0x80
 8005584:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005588:	2500      	movs	r5, #0
 800558a:	4545      	cmp	r5, r8
 800558c:	dd18      	ble.n	80055c0 <__kernel_rem_pio2+0x90>
 800558e:	9b08      	ldr	r3, [sp, #32]
 8005590:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005594:	aa20      	add	r2, sp, #128	; 0x80
 8005596:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8005850 <__kernel_rem_pio2+0x320>
 800559a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800559e:	f1c3 0301 	rsb	r3, r3, #1
 80055a2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80055a6:	9307      	str	r3, [sp, #28]
 80055a8:	9b07      	ldr	r3, [sp, #28]
 80055aa:	9a04      	ldr	r2, [sp, #16]
 80055ac:	4443      	add	r3, r8
 80055ae:	429a      	cmp	r2, r3
 80055b0:	db2f      	blt.n	8005612 <__kernel_rem_pio2+0xe2>
 80055b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80055b6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80055ba:	462f      	mov	r7, r5
 80055bc:	2600      	movs	r6, #0
 80055be:	e01b      	b.n	80055f8 <__kernel_rem_pio2+0xc8>
 80055c0:	42ef      	cmn	r7, r5
 80055c2:	d407      	bmi.n	80055d4 <__kernel_rem_pio2+0xa4>
 80055c4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80055c8:	f7fa ffb4 	bl	8000534 <__aeabi_i2d>
 80055cc:	e8e6 0102 	strd	r0, r1, [r6], #8
 80055d0:	3501      	adds	r5, #1
 80055d2:	e7da      	b.n	800558a <__kernel_rem_pio2+0x5a>
 80055d4:	ec51 0b18 	vmov	r0, r1, d8
 80055d8:	e7f8      	b.n	80055cc <__kernel_rem_pio2+0x9c>
 80055da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055de:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80055e2:	f7fb f811 	bl	8000608 <__aeabi_dmul>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055ee:	f7fa fe55 	bl	800029c <__adddf3>
 80055f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055f6:	3601      	adds	r6, #1
 80055f8:	9b06      	ldr	r3, [sp, #24]
 80055fa:	429e      	cmp	r6, r3
 80055fc:	f1a7 0708 	sub.w	r7, r7, #8
 8005600:	ddeb      	ble.n	80055da <__kernel_rem_pio2+0xaa>
 8005602:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005606:	3508      	adds	r5, #8
 8005608:	ecab 7b02 	vstmia	fp!, {d7}
 800560c:	f108 0801 	add.w	r8, r8, #1
 8005610:	e7ca      	b.n	80055a8 <__kernel_rem_pio2+0x78>
 8005612:	9b04      	ldr	r3, [sp, #16]
 8005614:	aa0c      	add	r2, sp, #48	; 0x30
 8005616:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800561a:	930b      	str	r3, [sp, #44]	; 0x2c
 800561c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800561e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005622:	9c04      	ldr	r4, [sp, #16]
 8005624:	930a      	str	r3, [sp, #40]	; 0x28
 8005626:	ab98      	add	r3, sp, #608	; 0x260
 8005628:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800562c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005630:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8005634:	f8cd b008 	str.w	fp, [sp, #8]
 8005638:	4625      	mov	r5, r4
 800563a:	2d00      	cmp	r5, #0
 800563c:	dc78      	bgt.n	8005730 <__kernel_rem_pio2+0x200>
 800563e:	ec47 6b10 	vmov	d0, r6, r7
 8005642:	4650      	mov	r0, sl
 8005644:	f000 fbfc 	bl	8005e40 <scalbn>
 8005648:	ec57 6b10 	vmov	r6, r7, d0
 800564c:	2200      	movs	r2, #0
 800564e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005652:	ee10 0a10 	vmov	r0, s0
 8005656:	4639      	mov	r1, r7
 8005658:	f7fa ffd6 	bl	8000608 <__aeabi_dmul>
 800565c:	ec41 0b10 	vmov	d0, r0, r1
 8005660:	f000 fb6e 	bl	8005d40 <floor>
 8005664:	4b7f      	ldr	r3, [pc, #508]	; (8005864 <__kernel_rem_pio2+0x334>)
 8005666:	ec51 0b10 	vmov	r0, r1, d0
 800566a:	2200      	movs	r2, #0
 800566c:	f7fa ffcc 	bl	8000608 <__aeabi_dmul>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4630      	mov	r0, r6
 8005676:	4639      	mov	r1, r7
 8005678:	f7fa fe0e 	bl	8000298 <__aeabi_dsub>
 800567c:	460f      	mov	r7, r1
 800567e:	4606      	mov	r6, r0
 8005680:	f7fb fa5c 	bl	8000b3c <__aeabi_d2iz>
 8005684:	9007      	str	r0, [sp, #28]
 8005686:	f7fa ff55 	bl	8000534 <__aeabi_i2d>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	4630      	mov	r0, r6
 8005690:	4639      	mov	r1, r7
 8005692:	f7fa fe01 	bl	8000298 <__aeabi_dsub>
 8005696:	f1ba 0f00 	cmp.w	sl, #0
 800569a:	4606      	mov	r6, r0
 800569c:	460f      	mov	r7, r1
 800569e:	dd70      	ble.n	8005782 <__kernel_rem_pio2+0x252>
 80056a0:	1e62      	subs	r2, r4, #1
 80056a2:	ab0c      	add	r3, sp, #48	; 0x30
 80056a4:	9d07      	ldr	r5, [sp, #28]
 80056a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80056aa:	f1ca 0118 	rsb	r1, sl, #24
 80056ae:	fa40 f301 	asr.w	r3, r0, r1
 80056b2:	441d      	add	r5, r3
 80056b4:	408b      	lsls	r3, r1
 80056b6:	1ac0      	subs	r0, r0, r3
 80056b8:	ab0c      	add	r3, sp, #48	; 0x30
 80056ba:	9507      	str	r5, [sp, #28]
 80056bc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80056c0:	f1ca 0317 	rsb	r3, sl, #23
 80056c4:	fa40 f303 	asr.w	r3, r0, r3
 80056c8:	9302      	str	r3, [sp, #8]
 80056ca:	9b02      	ldr	r3, [sp, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	dd66      	ble.n	800579e <__kernel_rem_pio2+0x26e>
 80056d0:	9b07      	ldr	r3, [sp, #28]
 80056d2:	2200      	movs	r2, #0
 80056d4:	3301      	adds	r3, #1
 80056d6:	9307      	str	r3, [sp, #28]
 80056d8:	4615      	mov	r5, r2
 80056da:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80056de:	4294      	cmp	r4, r2
 80056e0:	f300 8099 	bgt.w	8005816 <__kernel_rem_pio2+0x2e6>
 80056e4:	f1ba 0f00 	cmp.w	sl, #0
 80056e8:	dd07      	ble.n	80056fa <__kernel_rem_pio2+0x1ca>
 80056ea:	f1ba 0f01 	cmp.w	sl, #1
 80056ee:	f000 80a5 	beq.w	800583c <__kernel_rem_pio2+0x30c>
 80056f2:	f1ba 0f02 	cmp.w	sl, #2
 80056f6:	f000 80c1 	beq.w	800587c <__kernel_rem_pio2+0x34c>
 80056fa:	9b02      	ldr	r3, [sp, #8]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d14e      	bne.n	800579e <__kernel_rem_pio2+0x26e>
 8005700:	4632      	mov	r2, r6
 8005702:	463b      	mov	r3, r7
 8005704:	4958      	ldr	r1, [pc, #352]	; (8005868 <__kernel_rem_pio2+0x338>)
 8005706:	2000      	movs	r0, #0
 8005708:	f7fa fdc6 	bl	8000298 <__aeabi_dsub>
 800570c:	4606      	mov	r6, r0
 800570e:	460f      	mov	r7, r1
 8005710:	2d00      	cmp	r5, #0
 8005712:	d044      	beq.n	800579e <__kernel_rem_pio2+0x26e>
 8005714:	4650      	mov	r0, sl
 8005716:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005858 <__kernel_rem_pio2+0x328>
 800571a:	f000 fb91 	bl	8005e40 <scalbn>
 800571e:	4630      	mov	r0, r6
 8005720:	4639      	mov	r1, r7
 8005722:	ec53 2b10 	vmov	r2, r3, d0
 8005726:	f7fa fdb7 	bl	8000298 <__aeabi_dsub>
 800572a:	4606      	mov	r6, r0
 800572c:	460f      	mov	r7, r1
 800572e:	e036      	b.n	800579e <__kernel_rem_pio2+0x26e>
 8005730:	4b4e      	ldr	r3, [pc, #312]	; (800586c <__kernel_rem_pio2+0x33c>)
 8005732:	2200      	movs	r2, #0
 8005734:	4630      	mov	r0, r6
 8005736:	4639      	mov	r1, r7
 8005738:	f7fa ff66 	bl	8000608 <__aeabi_dmul>
 800573c:	f7fb f9fe 	bl	8000b3c <__aeabi_d2iz>
 8005740:	f7fa fef8 	bl	8000534 <__aeabi_i2d>
 8005744:	4b4a      	ldr	r3, [pc, #296]	; (8005870 <__kernel_rem_pio2+0x340>)
 8005746:	2200      	movs	r2, #0
 8005748:	4680      	mov	r8, r0
 800574a:	4689      	mov	r9, r1
 800574c:	f7fa ff5c 	bl	8000608 <__aeabi_dmul>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4630      	mov	r0, r6
 8005756:	4639      	mov	r1, r7
 8005758:	f7fa fd9e 	bl	8000298 <__aeabi_dsub>
 800575c:	f7fb f9ee 	bl	8000b3c <__aeabi_d2iz>
 8005760:	9b02      	ldr	r3, [sp, #8]
 8005762:	f843 0b04 	str.w	r0, [r3], #4
 8005766:	3d01      	subs	r5, #1
 8005768:	9302      	str	r3, [sp, #8]
 800576a:	ab70      	add	r3, sp, #448	; 0x1c0
 800576c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005774:	4640      	mov	r0, r8
 8005776:	4649      	mov	r1, r9
 8005778:	f7fa fd90 	bl	800029c <__adddf3>
 800577c:	4606      	mov	r6, r0
 800577e:	460f      	mov	r7, r1
 8005780:	e75b      	b.n	800563a <__kernel_rem_pio2+0x10a>
 8005782:	d105      	bne.n	8005790 <__kernel_rem_pio2+0x260>
 8005784:	1e63      	subs	r3, r4, #1
 8005786:	aa0c      	add	r2, sp, #48	; 0x30
 8005788:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800578c:	15c3      	asrs	r3, r0, #23
 800578e:	e79b      	b.n	80056c8 <__kernel_rem_pio2+0x198>
 8005790:	4b38      	ldr	r3, [pc, #224]	; (8005874 <__kernel_rem_pio2+0x344>)
 8005792:	2200      	movs	r2, #0
 8005794:	f7fb f9be 	bl	8000b14 <__aeabi_dcmpge>
 8005798:	2800      	cmp	r0, #0
 800579a:	d139      	bne.n	8005810 <__kernel_rem_pio2+0x2e0>
 800579c:	9002      	str	r0, [sp, #8]
 800579e:	2200      	movs	r2, #0
 80057a0:	2300      	movs	r3, #0
 80057a2:	4630      	mov	r0, r6
 80057a4:	4639      	mov	r1, r7
 80057a6:	f7fb f997 	bl	8000ad8 <__aeabi_dcmpeq>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	f000 80b4 	beq.w	8005918 <__kernel_rem_pio2+0x3e8>
 80057b0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 80057b4:	465b      	mov	r3, fp
 80057b6:	2200      	movs	r2, #0
 80057b8:	9904      	ldr	r1, [sp, #16]
 80057ba:	428b      	cmp	r3, r1
 80057bc:	da65      	bge.n	800588a <__kernel_rem_pio2+0x35a>
 80057be:	2a00      	cmp	r2, #0
 80057c0:	d07b      	beq.n	80058ba <__kernel_rem_pio2+0x38a>
 80057c2:	ab0c      	add	r3, sp, #48	; 0x30
 80057c4:	f1aa 0a18 	sub.w	sl, sl, #24
 80057c8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 80a0 	beq.w	8005912 <__kernel_rem_pio2+0x3e2>
 80057d2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8005858 <__kernel_rem_pio2+0x328>
 80057d6:	4650      	mov	r0, sl
 80057d8:	f000 fb32 	bl	8005e40 <scalbn>
 80057dc:	4f23      	ldr	r7, [pc, #140]	; (800586c <__kernel_rem_pio2+0x33c>)
 80057de:	ec55 4b10 	vmov	r4, r5, d0
 80057e2:	46d8      	mov	r8, fp
 80057e4:	2600      	movs	r6, #0
 80057e6:	f1b8 0f00 	cmp.w	r8, #0
 80057ea:	f280 80cf 	bge.w	800598c <__kernel_rem_pio2+0x45c>
 80057ee:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8005850 <__kernel_rem_pio2+0x320>
 80057f2:	465f      	mov	r7, fp
 80057f4:	f04f 0800 	mov.w	r8, #0
 80057f8:	2f00      	cmp	r7, #0
 80057fa:	f2c0 80fd 	blt.w	80059f8 <__kernel_rem_pio2+0x4c8>
 80057fe:	ab70      	add	r3, sp, #448	; 0x1c0
 8005800:	f8df a074 	ldr.w	sl, [pc, #116]	; 8005878 <__kernel_rem_pio2+0x348>
 8005804:	ec55 4b18 	vmov	r4, r5, d8
 8005808:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800580c:	2600      	movs	r6, #0
 800580e:	e0e5      	b.n	80059dc <__kernel_rem_pio2+0x4ac>
 8005810:	2302      	movs	r3, #2
 8005812:	9302      	str	r3, [sp, #8]
 8005814:	e75c      	b.n	80056d0 <__kernel_rem_pio2+0x1a0>
 8005816:	f8db 3000 	ldr.w	r3, [fp]
 800581a:	b955      	cbnz	r5, 8005832 <__kernel_rem_pio2+0x302>
 800581c:	b123      	cbz	r3, 8005828 <__kernel_rem_pio2+0x2f8>
 800581e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005822:	f8cb 3000 	str.w	r3, [fp]
 8005826:	2301      	movs	r3, #1
 8005828:	3201      	adds	r2, #1
 800582a:	f10b 0b04 	add.w	fp, fp, #4
 800582e:	461d      	mov	r5, r3
 8005830:	e755      	b.n	80056de <__kernel_rem_pio2+0x1ae>
 8005832:	1acb      	subs	r3, r1, r3
 8005834:	f8cb 3000 	str.w	r3, [fp]
 8005838:	462b      	mov	r3, r5
 800583a:	e7f5      	b.n	8005828 <__kernel_rem_pio2+0x2f8>
 800583c:	1e62      	subs	r2, r4, #1
 800583e:	ab0c      	add	r3, sp, #48	; 0x30
 8005840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005844:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005848:	a90c      	add	r1, sp, #48	; 0x30
 800584a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800584e:	e754      	b.n	80056fa <__kernel_rem_pio2+0x1ca>
	...
 800585c:	3ff00000 	.word	0x3ff00000
 8005860:	08009008 	.word	0x08009008
 8005864:	40200000 	.word	0x40200000
 8005868:	3ff00000 	.word	0x3ff00000
 800586c:	3e700000 	.word	0x3e700000
 8005870:	41700000 	.word	0x41700000
 8005874:	3fe00000 	.word	0x3fe00000
 8005878:	08008fc8 	.word	0x08008fc8
 800587c:	1e62      	subs	r2, r4, #1
 800587e:	ab0c      	add	r3, sp, #48	; 0x30
 8005880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005884:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005888:	e7de      	b.n	8005848 <__kernel_rem_pio2+0x318>
 800588a:	a90c      	add	r1, sp, #48	; 0x30
 800588c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005890:	3b01      	subs	r3, #1
 8005892:	430a      	orrs	r2, r1
 8005894:	e790      	b.n	80057b8 <__kernel_rem_pio2+0x288>
 8005896:	3301      	adds	r3, #1
 8005898:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800589c:	2900      	cmp	r1, #0
 800589e:	d0fa      	beq.n	8005896 <__kernel_rem_pio2+0x366>
 80058a0:	9a08      	ldr	r2, [sp, #32]
 80058a2:	18e3      	adds	r3, r4, r3
 80058a4:	18a6      	adds	r6, r4, r2
 80058a6:	aa20      	add	r2, sp, #128	; 0x80
 80058a8:	1c65      	adds	r5, r4, #1
 80058aa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80058ae:	9302      	str	r3, [sp, #8]
 80058b0:	9b02      	ldr	r3, [sp, #8]
 80058b2:	42ab      	cmp	r3, r5
 80058b4:	da04      	bge.n	80058c0 <__kernel_rem_pio2+0x390>
 80058b6:	461c      	mov	r4, r3
 80058b8:	e6b5      	b.n	8005626 <__kernel_rem_pio2+0xf6>
 80058ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058bc:	2301      	movs	r3, #1
 80058be:	e7eb      	b.n	8005898 <__kernel_rem_pio2+0x368>
 80058c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058c6:	f7fa fe35 	bl	8000534 <__aeabi_i2d>
 80058ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80058ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d0:	46b3      	mov	fp, r6
 80058d2:	461c      	mov	r4, r3
 80058d4:	2700      	movs	r7, #0
 80058d6:	f04f 0800 	mov.w	r8, #0
 80058da:	f04f 0900 	mov.w	r9, #0
 80058de:	9b06      	ldr	r3, [sp, #24]
 80058e0:	429f      	cmp	r7, r3
 80058e2:	dd06      	ble.n	80058f2 <__kernel_rem_pio2+0x3c2>
 80058e4:	ab70      	add	r3, sp, #448	; 0x1c0
 80058e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80058ea:	e9c3 8900 	strd	r8, r9, [r3]
 80058ee:	3501      	adds	r5, #1
 80058f0:	e7de      	b.n	80058b0 <__kernel_rem_pio2+0x380>
 80058f2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80058f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80058fa:	f7fa fe85 	bl	8000608 <__aeabi_dmul>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4640      	mov	r0, r8
 8005904:	4649      	mov	r1, r9
 8005906:	f7fa fcc9 	bl	800029c <__adddf3>
 800590a:	3701      	adds	r7, #1
 800590c:	4680      	mov	r8, r0
 800590e:	4689      	mov	r9, r1
 8005910:	e7e5      	b.n	80058de <__kernel_rem_pio2+0x3ae>
 8005912:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005916:	e754      	b.n	80057c2 <__kernel_rem_pio2+0x292>
 8005918:	ec47 6b10 	vmov	d0, r6, r7
 800591c:	f1ca 0000 	rsb	r0, sl, #0
 8005920:	f000 fa8e 	bl	8005e40 <scalbn>
 8005924:	ec57 6b10 	vmov	r6, r7, d0
 8005928:	4b9f      	ldr	r3, [pc, #636]	; (8005ba8 <__kernel_rem_pio2+0x678>)
 800592a:	ee10 0a10 	vmov	r0, s0
 800592e:	2200      	movs	r2, #0
 8005930:	4639      	mov	r1, r7
 8005932:	f7fb f8ef 	bl	8000b14 <__aeabi_dcmpge>
 8005936:	b300      	cbz	r0, 800597a <__kernel_rem_pio2+0x44a>
 8005938:	4b9c      	ldr	r3, [pc, #624]	; (8005bac <__kernel_rem_pio2+0x67c>)
 800593a:	2200      	movs	r2, #0
 800593c:	4630      	mov	r0, r6
 800593e:	4639      	mov	r1, r7
 8005940:	f7fa fe62 	bl	8000608 <__aeabi_dmul>
 8005944:	f7fb f8fa 	bl	8000b3c <__aeabi_d2iz>
 8005948:	4605      	mov	r5, r0
 800594a:	f7fa fdf3 	bl	8000534 <__aeabi_i2d>
 800594e:	4b96      	ldr	r3, [pc, #600]	; (8005ba8 <__kernel_rem_pio2+0x678>)
 8005950:	2200      	movs	r2, #0
 8005952:	f7fa fe59 	bl	8000608 <__aeabi_dmul>
 8005956:	460b      	mov	r3, r1
 8005958:	4602      	mov	r2, r0
 800595a:	4639      	mov	r1, r7
 800595c:	4630      	mov	r0, r6
 800595e:	f7fa fc9b 	bl	8000298 <__aeabi_dsub>
 8005962:	f7fb f8eb 	bl	8000b3c <__aeabi_d2iz>
 8005966:	f104 0b01 	add.w	fp, r4, #1
 800596a:	ab0c      	add	r3, sp, #48	; 0x30
 800596c:	f10a 0a18 	add.w	sl, sl, #24
 8005970:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005974:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8005978:	e72b      	b.n	80057d2 <__kernel_rem_pio2+0x2a2>
 800597a:	4630      	mov	r0, r6
 800597c:	4639      	mov	r1, r7
 800597e:	f7fb f8dd 	bl	8000b3c <__aeabi_d2iz>
 8005982:	ab0c      	add	r3, sp, #48	; 0x30
 8005984:	46a3      	mov	fp, r4
 8005986:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800598a:	e722      	b.n	80057d2 <__kernel_rem_pio2+0x2a2>
 800598c:	ab70      	add	r3, sp, #448	; 0x1c0
 800598e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8005992:	ab0c      	add	r3, sp, #48	; 0x30
 8005994:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005998:	f7fa fdcc 	bl	8000534 <__aeabi_i2d>
 800599c:	4622      	mov	r2, r4
 800599e:	462b      	mov	r3, r5
 80059a0:	f7fa fe32 	bl	8000608 <__aeabi_dmul>
 80059a4:	4632      	mov	r2, r6
 80059a6:	e9c9 0100 	strd	r0, r1, [r9]
 80059aa:	463b      	mov	r3, r7
 80059ac:	4620      	mov	r0, r4
 80059ae:	4629      	mov	r1, r5
 80059b0:	f7fa fe2a 	bl	8000608 <__aeabi_dmul>
 80059b4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80059b8:	4604      	mov	r4, r0
 80059ba:	460d      	mov	r5, r1
 80059bc:	e713      	b.n	80057e6 <__kernel_rem_pio2+0x2b6>
 80059be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80059c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80059c6:	f7fa fe1f 	bl	8000608 <__aeabi_dmul>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4620      	mov	r0, r4
 80059d0:	4629      	mov	r1, r5
 80059d2:	f7fa fc63 	bl	800029c <__adddf3>
 80059d6:	3601      	adds	r6, #1
 80059d8:	4604      	mov	r4, r0
 80059da:	460d      	mov	r5, r1
 80059dc:	9b04      	ldr	r3, [sp, #16]
 80059de:	429e      	cmp	r6, r3
 80059e0:	dc01      	bgt.n	80059e6 <__kernel_rem_pio2+0x4b6>
 80059e2:	45b0      	cmp	r8, r6
 80059e4:	daeb      	bge.n	80059be <__kernel_rem_pio2+0x48e>
 80059e6:	ab48      	add	r3, sp, #288	; 0x120
 80059e8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80059ec:	e9c3 4500 	strd	r4, r5, [r3]
 80059f0:	3f01      	subs	r7, #1
 80059f2:	f108 0801 	add.w	r8, r8, #1
 80059f6:	e6ff      	b.n	80057f8 <__kernel_rem_pio2+0x2c8>
 80059f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	dc0b      	bgt.n	8005a16 <__kernel_rem_pio2+0x4e6>
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	dc6e      	bgt.n	8005ae0 <__kernel_rem_pio2+0x5b0>
 8005a02:	d045      	beq.n	8005a90 <__kernel_rem_pio2+0x560>
 8005a04:	9b07      	ldr	r3, [sp, #28]
 8005a06:	f003 0007 	and.w	r0, r3, #7
 8005a0a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005a0e:	ecbd 8b02 	vpop	{d8}
 8005a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a16:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d1f3      	bne.n	8005a04 <__kernel_rem_pio2+0x4d4>
 8005a1c:	ab48      	add	r3, sp, #288	; 0x120
 8005a1e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8005a22:	46d0      	mov	r8, sl
 8005a24:	46d9      	mov	r9, fp
 8005a26:	f1b9 0f00 	cmp.w	r9, #0
 8005a2a:	f1a8 0808 	sub.w	r8, r8, #8
 8005a2e:	dc64      	bgt.n	8005afa <__kernel_rem_pio2+0x5ca>
 8005a30:	465c      	mov	r4, fp
 8005a32:	2c01      	cmp	r4, #1
 8005a34:	f1aa 0a08 	sub.w	sl, sl, #8
 8005a38:	dc7e      	bgt.n	8005b38 <__kernel_rem_pio2+0x608>
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	f1bb 0f01 	cmp.w	fp, #1
 8005a42:	f300 8097 	bgt.w	8005b74 <__kernel_rem_pio2+0x644>
 8005a46:	9b02      	ldr	r3, [sp, #8]
 8005a48:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8005a4c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f040 8099 	bne.w	8005b88 <__kernel_rem_pio2+0x658>
 8005a56:	9b01      	ldr	r3, [sp, #4]
 8005a58:	e9c3 5600 	strd	r5, r6, [r3]
 8005a5c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005a60:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005a64:	e7ce      	b.n	8005a04 <__kernel_rem_pio2+0x4d4>
 8005a66:	ab48      	add	r3, sp, #288	; 0x120
 8005a68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a70:	f7fa fc14 	bl	800029c <__adddf3>
 8005a74:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005a78:	f1bb 0f00 	cmp.w	fp, #0
 8005a7c:	daf3      	bge.n	8005a66 <__kernel_rem_pio2+0x536>
 8005a7e:	9b02      	ldr	r3, [sp, #8]
 8005a80:	b113      	cbz	r3, 8005a88 <__kernel_rem_pio2+0x558>
 8005a82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a86:	4619      	mov	r1, r3
 8005a88:	9b01      	ldr	r3, [sp, #4]
 8005a8a:	e9c3 0100 	strd	r0, r1, [r3]
 8005a8e:	e7b9      	b.n	8005a04 <__kernel_rem_pio2+0x4d4>
 8005a90:	2000      	movs	r0, #0
 8005a92:	2100      	movs	r1, #0
 8005a94:	e7f0      	b.n	8005a78 <__kernel_rem_pio2+0x548>
 8005a96:	ab48      	add	r3, sp, #288	; 0x120
 8005a98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa0:	f7fa fbfc 	bl	800029c <__adddf3>
 8005aa4:	3c01      	subs	r4, #1
 8005aa6:	2c00      	cmp	r4, #0
 8005aa8:	daf5      	bge.n	8005a96 <__kernel_rem_pio2+0x566>
 8005aaa:	9b02      	ldr	r3, [sp, #8]
 8005aac:	b1e3      	cbz	r3, 8005ae8 <__kernel_rem_pio2+0x5b8>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ab4:	9c01      	ldr	r4, [sp, #4]
 8005ab6:	e9c4 2300 	strd	r2, r3, [r4]
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005ac2:	f7fa fbe9 	bl	8000298 <__aeabi_dsub>
 8005ac6:	ad4a      	add	r5, sp, #296	; 0x128
 8005ac8:	2401      	movs	r4, #1
 8005aca:	45a3      	cmp	fp, r4
 8005acc:	da0f      	bge.n	8005aee <__kernel_rem_pio2+0x5be>
 8005ace:	9b02      	ldr	r3, [sp, #8]
 8005ad0:	b113      	cbz	r3, 8005ad8 <__kernel_rem_pio2+0x5a8>
 8005ad2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	9b01      	ldr	r3, [sp, #4]
 8005ada:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005ade:	e791      	b.n	8005a04 <__kernel_rem_pio2+0x4d4>
 8005ae0:	465c      	mov	r4, fp
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	e7de      	b.n	8005aa6 <__kernel_rem_pio2+0x576>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	e7e2      	b.n	8005ab4 <__kernel_rem_pio2+0x584>
 8005aee:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005af2:	f7fa fbd3 	bl	800029c <__adddf3>
 8005af6:	3401      	adds	r4, #1
 8005af8:	e7e7      	b.n	8005aca <__kernel_rem_pio2+0x59a>
 8005afa:	e9d8 4500 	ldrd	r4, r5, [r8]
 8005afe:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8005b02:	4620      	mov	r0, r4
 8005b04:	4632      	mov	r2, r6
 8005b06:	463b      	mov	r3, r7
 8005b08:	4629      	mov	r1, r5
 8005b0a:	f7fa fbc7 	bl	800029c <__adddf3>
 8005b0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4620      	mov	r0, r4
 8005b18:	4629      	mov	r1, r5
 8005b1a:	f7fa fbbd 	bl	8000298 <__aeabi_dsub>
 8005b1e:	4632      	mov	r2, r6
 8005b20:	463b      	mov	r3, r7
 8005b22:	f7fa fbbb 	bl	800029c <__adddf3>
 8005b26:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005b2a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8005b2e:	ed88 7b00 	vstr	d7, [r8]
 8005b32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005b36:	e776      	b.n	8005a26 <__kernel_rem_pio2+0x4f6>
 8005b38:	e9da 8900 	ldrd	r8, r9, [sl]
 8005b3c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005b40:	4640      	mov	r0, r8
 8005b42:	4632      	mov	r2, r6
 8005b44:	463b      	mov	r3, r7
 8005b46:	4649      	mov	r1, r9
 8005b48:	f7fa fba8 	bl	800029c <__adddf3>
 8005b4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4640      	mov	r0, r8
 8005b56:	4649      	mov	r1, r9
 8005b58:	f7fa fb9e 	bl	8000298 <__aeabi_dsub>
 8005b5c:	4632      	mov	r2, r6
 8005b5e:	463b      	mov	r3, r7
 8005b60:	f7fa fb9c 	bl	800029c <__adddf3>
 8005b64:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005b68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005b6c:	ed8a 7b00 	vstr	d7, [sl]
 8005b70:	3c01      	subs	r4, #1
 8005b72:	e75e      	b.n	8005a32 <__kernel_rem_pio2+0x502>
 8005b74:	ab48      	add	r3, sp, #288	; 0x120
 8005b76:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	f7fa fb8d 	bl	800029c <__adddf3>
 8005b82:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005b86:	e75a      	b.n	8005a3e <__kernel_rem_pio2+0x50e>
 8005b88:	9b01      	ldr	r3, [sp, #4]
 8005b8a:	9a01      	ldr	r2, [sp, #4]
 8005b8c:	601d      	str	r5, [r3, #0]
 8005b8e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005b92:	605c      	str	r4, [r3, #4]
 8005b94:	609f      	str	r7, [r3, #8]
 8005b96:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005b9a:	60d3      	str	r3, [r2, #12]
 8005b9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ba0:	6110      	str	r0, [r2, #16]
 8005ba2:	6153      	str	r3, [r2, #20]
 8005ba4:	e72e      	b.n	8005a04 <__kernel_rem_pio2+0x4d4>
 8005ba6:	bf00      	nop
 8005ba8:	41700000 	.word	0x41700000
 8005bac:	3e700000 	.word	0x3e700000

08005bb0 <__kernel_sin>:
 8005bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb4:	ed2d 8b04 	vpush	{d8-d9}
 8005bb8:	eeb0 8a41 	vmov.f32	s16, s2
 8005bbc:	eef0 8a61 	vmov.f32	s17, s3
 8005bc0:	ec55 4b10 	vmov	r4, r5, d0
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005bca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005bce:	9001      	str	r0, [sp, #4]
 8005bd0:	da06      	bge.n	8005be0 <__kernel_sin+0x30>
 8005bd2:	ee10 0a10 	vmov	r0, s0
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	f7fa ffb0 	bl	8000b3c <__aeabi_d2iz>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	d051      	beq.n	8005c84 <__kernel_sin+0xd4>
 8005be0:	4622      	mov	r2, r4
 8005be2:	462b      	mov	r3, r5
 8005be4:	4620      	mov	r0, r4
 8005be6:	4629      	mov	r1, r5
 8005be8:	f7fa fd0e 	bl	8000608 <__aeabi_dmul>
 8005bec:	4682      	mov	sl, r0
 8005bee:	468b      	mov	fp, r1
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	4629      	mov	r1, r5
 8005bf8:	f7fa fd06 	bl	8000608 <__aeabi_dmul>
 8005bfc:	a341      	add	r3, pc, #260	; (adr r3, 8005d04 <__kernel_sin+0x154>)
 8005bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c02:	4680      	mov	r8, r0
 8005c04:	4689      	mov	r9, r1
 8005c06:	4650      	mov	r0, sl
 8005c08:	4659      	mov	r1, fp
 8005c0a:	f7fa fcfd 	bl	8000608 <__aeabi_dmul>
 8005c0e:	a33f      	add	r3, pc, #252	; (adr r3, 8005d0c <__kernel_sin+0x15c>)
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	f7fa fb40 	bl	8000298 <__aeabi_dsub>
 8005c18:	4652      	mov	r2, sl
 8005c1a:	465b      	mov	r3, fp
 8005c1c:	f7fa fcf4 	bl	8000608 <__aeabi_dmul>
 8005c20:	a33c      	add	r3, pc, #240	; (adr r3, 8005d14 <__kernel_sin+0x164>)
 8005c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c26:	f7fa fb39 	bl	800029c <__adddf3>
 8005c2a:	4652      	mov	r2, sl
 8005c2c:	465b      	mov	r3, fp
 8005c2e:	f7fa fceb 	bl	8000608 <__aeabi_dmul>
 8005c32:	a33a      	add	r3, pc, #232	; (adr r3, 8005d1c <__kernel_sin+0x16c>)
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f7fa fb2e 	bl	8000298 <__aeabi_dsub>
 8005c3c:	4652      	mov	r2, sl
 8005c3e:	465b      	mov	r3, fp
 8005c40:	f7fa fce2 	bl	8000608 <__aeabi_dmul>
 8005c44:	a337      	add	r3, pc, #220	; (adr r3, 8005d24 <__kernel_sin+0x174>)
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	f7fa fb27 	bl	800029c <__adddf3>
 8005c4e:	9b01      	ldr	r3, [sp, #4]
 8005c50:	4606      	mov	r6, r0
 8005c52:	460f      	mov	r7, r1
 8005c54:	b9eb      	cbnz	r3, 8005c92 <__kernel_sin+0xe2>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4650      	mov	r0, sl
 8005c5c:	4659      	mov	r1, fp
 8005c5e:	f7fa fcd3 	bl	8000608 <__aeabi_dmul>
 8005c62:	a325      	add	r3, pc, #148	; (adr r3, 8005cf8 <__kernel_sin+0x148>)
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f7fa fb16 	bl	8000298 <__aeabi_dsub>
 8005c6c:	4642      	mov	r2, r8
 8005c6e:	464b      	mov	r3, r9
 8005c70:	f7fa fcca 	bl	8000608 <__aeabi_dmul>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4620      	mov	r0, r4
 8005c7a:	4629      	mov	r1, r5
 8005c7c:	f7fa fb0e 	bl	800029c <__adddf3>
 8005c80:	4604      	mov	r4, r0
 8005c82:	460d      	mov	r5, r1
 8005c84:	ec45 4b10 	vmov	d0, r4, r5
 8005c88:	b003      	add	sp, #12
 8005c8a:	ecbd 8b04 	vpop	{d8-d9}
 8005c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c92:	4b1b      	ldr	r3, [pc, #108]	; (8005d00 <__kernel_sin+0x150>)
 8005c94:	ec51 0b18 	vmov	r0, r1, d8
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f7fa fcb5 	bl	8000608 <__aeabi_dmul>
 8005c9e:	4632      	mov	r2, r6
 8005ca0:	ec41 0b19 	vmov	d9, r0, r1
 8005ca4:	463b      	mov	r3, r7
 8005ca6:	4640      	mov	r0, r8
 8005ca8:	4649      	mov	r1, r9
 8005caa:	f7fa fcad 	bl	8000608 <__aeabi_dmul>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	ec51 0b19 	vmov	r0, r1, d9
 8005cb6:	f7fa faef 	bl	8000298 <__aeabi_dsub>
 8005cba:	4652      	mov	r2, sl
 8005cbc:	465b      	mov	r3, fp
 8005cbe:	f7fa fca3 	bl	8000608 <__aeabi_dmul>
 8005cc2:	ec53 2b18 	vmov	r2, r3, d8
 8005cc6:	f7fa fae7 	bl	8000298 <__aeabi_dsub>
 8005cca:	a30b      	add	r3, pc, #44	; (adr r3, 8005cf8 <__kernel_sin+0x148>)
 8005ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd0:	4606      	mov	r6, r0
 8005cd2:	460f      	mov	r7, r1
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	4649      	mov	r1, r9
 8005cd8:	f7fa fc96 	bl	8000608 <__aeabi_dmul>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	4639      	mov	r1, r7
 8005ce4:	f7fa fada 	bl	800029c <__adddf3>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4620      	mov	r0, r4
 8005cee:	4629      	mov	r1, r5
 8005cf0:	f7fa fad2 	bl	8000298 <__aeabi_dsub>
 8005cf4:	e7c4      	b.n	8005c80 <__kernel_sin+0xd0>
 8005cf6:	bf00      	nop
 8005cf8:	55555549 	.word	0x55555549
 8005cfc:	3fc55555 	.word	0x3fc55555
 8005d00:	3fe00000 	.word	0x3fe00000
 8005d04:	5acfd57c 	.word	0x5acfd57c
 8005d08:	3de5d93a 	.word	0x3de5d93a
 8005d0c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005d10:	3e5ae5e6 	.word	0x3e5ae5e6
 8005d14:	57b1fe7d 	.word	0x57b1fe7d
 8005d18:	3ec71de3 	.word	0x3ec71de3
 8005d1c:	19c161d5 	.word	0x19c161d5
 8005d20:	3f2a01a0 	.word	0x3f2a01a0
 8005d24:	1110f8a6 	.word	0x1110f8a6
 8005d28:	3f811111 	.word	0x3f811111

08005d2c <fabs>:
 8005d2c:	ec51 0b10 	vmov	r0, r1, d0
 8005d30:	ee10 2a10 	vmov	r2, s0
 8005d34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d38:	ec43 2b10 	vmov	d0, r2, r3
 8005d3c:	4770      	bx	lr
	...

08005d40 <floor>:
 8005d40:	ec51 0b10 	vmov	r0, r1, d0
 8005d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d48:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005d4c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005d50:	2e13      	cmp	r6, #19
 8005d52:	ee10 5a10 	vmov	r5, s0
 8005d56:	ee10 8a10 	vmov	r8, s0
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	dc32      	bgt.n	8005dc4 <floor+0x84>
 8005d5e:	2e00      	cmp	r6, #0
 8005d60:	da14      	bge.n	8005d8c <floor+0x4c>
 8005d62:	a333      	add	r3, pc, #204	; (adr r3, 8005e30 <floor+0xf0>)
 8005d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d68:	f7fa fa98 	bl	800029c <__adddf3>
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f7fa feda 	bl	8000b28 <__aeabi_dcmpgt>
 8005d74:	b138      	cbz	r0, 8005d86 <floor+0x46>
 8005d76:	2c00      	cmp	r4, #0
 8005d78:	da57      	bge.n	8005e2a <floor+0xea>
 8005d7a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005d7e:	431d      	orrs	r5, r3
 8005d80:	d001      	beq.n	8005d86 <floor+0x46>
 8005d82:	4c2d      	ldr	r4, [pc, #180]	; (8005e38 <floor+0xf8>)
 8005d84:	2500      	movs	r5, #0
 8005d86:	4621      	mov	r1, r4
 8005d88:	4628      	mov	r0, r5
 8005d8a:	e025      	b.n	8005dd8 <floor+0x98>
 8005d8c:	4f2b      	ldr	r7, [pc, #172]	; (8005e3c <floor+0xfc>)
 8005d8e:	4137      	asrs	r7, r6
 8005d90:	ea01 0307 	and.w	r3, r1, r7
 8005d94:	4303      	orrs	r3, r0
 8005d96:	d01f      	beq.n	8005dd8 <floor+0x98>
 8005d98:	a325      	add	r3, pc, #148	; (adr r3, 8005e30 <floor+0xf0>)
 8005d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9e:	f7fa fa7d 	bl	800029c <__adddf3>
 8005da2:	2200      	movs	r2, #0
 8005da4:	2300      	movs	r3, #0
 8005da6:	f7fa febf 	bl	8000b28 <__aeabi_dcmpgt>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	d0eb      	beq.n	8005d86 <floor+0x46>
 8005dae:	2c00      	cmp	r4, #0
 8005db0:	bfbe      	ittt	lt
 8005db2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005db6:	fa43 f606 	asrlt.w	r6, r3, r6
 8005dba:	19a4      	addlt	r4, r4, r6
 8005dbc:	ea24 0407 	bic.w	r4, r4, r7
 8005dc0:	2500      	movs	r5, #0
 8005dc2:	e7e0      	b.n	8005d86 <floor+0x46>
 8005dc4:	2e33      	cmp	r6, #51	; 0x33
 8005dc6:	dd0b      	ble.n	8005de0 <floor+0xa0>
 8005dc8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005dcc:	d104      	bne.n	8005dd8 <floor+0x98>
 8005dce:	ee10 2a10 	vmov	r2, s0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	f7fa fa62 	bl	800029c <__adddf3>
 8005dd8:	ec41 0b10 	vmov	d0, r0, r1
 8005ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005de0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005de4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005de8:	fa23 f707 	lsr.w	r7, r3, r7
 8005dec:	4207      	tst	r7, r0
 8005dee:	d0f3      	beq.n	8005dd8 <floor+0x98>
 8005df0:	a30f      	add	r3, pc, #60	; (adr r3, 8005e30 <floor+0xf0>)
 8005df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df6:	f7fa fa51 	bl	800029c <__adddf3>
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f7fa fe93 	bl	8000b28 <__aeabi_dcmpgt>
 8005e02:	2800      	cmp	r0, #0
 8005e04:	d0bf      	beq.n	8005d86 <floor+0x46>
 8005e06:	2c00      	cmp	r4, #0
 8005e08:	da02      	bge.n	8005e10 <floor+0xd0>
 8005e0a:	2e14      	cmp	r6, #20
 8005e0c:	d103      	bne.n	8005e16 <floor+0xd6>
 8005e0e:	3401      	adds	r4, #1
 8005e10:	ea25 0507 	bic.w	r5, r5, r7
 8005e14:	e7b7      	b.n	8005d86 <floor+0x46>
 8005e16:	2301      	movs	r3, #1
 8005e18:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005e1c:	fa03 f606 	lsl.w	r6, r3, r6
 8005e20:	4435      	add	r5, r6
 8005e22:	4545      	cmp	r5, r8
 8005e24:	bf38      	it	cc
 8005e26:	18e4      	addcc	r4, r4, r3
 8005e28:	e7f2      	b.n	8005e10 <floor+0xd0>
 8005e2a:	2500      	movs	r5, #0
 8005e2c:	462c      	mov	r4, r5
 8005e2e:	e7aa      	b.n	8005d86 <floor+0x46>
 8005e30:	8800759c 	.word	0x8800759c
 8005e34:	7e37e43c 	.word	0x7e37e43c
 8005e38:	bff00000 	.word	0xbff00000
 8005e3c:	000fffff 	.word	0x000fffff

08005e40 <scalbn>:
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	ec55 4b10 	vmov	r4, r5, d0
 8005e46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005e4a:	4606      	mov	r6, r0
 8005e4c:	462b      	mov	r3, r5
 8005e4e:	b99a      	cbnz	r2, 8005e78 <scalbn+0x38>
 8005e50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005e54:	4323      	orrs	r3, r4
 8005e56:	d036      	beq.n	8005ec6 <scalbn+0x86>
 8005e58:	4b39      	ldr	r3, [pc, #228]	; (8005f40 <scalbn+0x100>)
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	ee10 0a10 	vmov	r0, s0
 8005e60:	2200      	movs	r2, #0
 8005e62:	f7fa fbd1 	bl	8000608 <__aeabi_dmul>
 8005e66:	4b37      	ldr	r3, [pc, #220]	; (8005f44 <scalbn+0x104>)
 8005e68:	429e      	cmp	r6, r3
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	460d      	mov	r5, r1
 8005e6e:	da10      	bge.n	8005e92 <scalbn+0x52>
 8005e70:	a32b      	add	r3, pc, #172	; (adr r3, 8005f20 <scalbn+0xe0>)
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	e03a      	b.n	8005eee <scalbn+0xae>
 8005e78:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005e7c:	428a      	cmp	r2, r1
 8005e7e:	d10c      	bne.n	8005e9a <scalbn+0x5a>
 8005e80:	ee10 2a10 	vmov	r2, s0
 8005e84:	4620      	mov	r0, r4
 8005e86:	4629      	mov	r1, r5
 8005e88:	f7fa fa08 	bl	800029c <__adddf3>
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	460d      	mov	r5, r1
 8005e90:	e019      	b.n	8005ec6 <scalbn+0x86>
 8005e92:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005e96:	460b      	mov	r3, r1
 8005e98:	3a36      	subs	r2, #54	; 0x36
 8005e9a:	4432      	add	r2, r6
 8005e9c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005ea0:	428a      	cmp	r2, r1
 8005ea2:	dd08      	ble.n	8005eb6 <scalbn+0x76>
 8005ea4:	2d00      	cmp	r5, #0
 8005ea6:	a120      	add	r1, pc, #128	; (adr r1, 8005f28 <scalbn+0xe8>)
 8005ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eac:	da1c      	bge.n	8005ee8 <scalbn+0xa8>
 8005eae:	a120      	add	r1, pc, #128	; (adr r1, 8005f30 <scalbn+0xf0>)
 8005eb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eb4:	e018      	b.n	8005ee8 <scalbn+0xa8>
 8005eb6:	2a00      	cmp	r2, #0
 8005eb8:	dd08      	ble.n	8005ecc <scalbn+0x8c>
 8005eba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ebe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ec2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005ec6:	ec45 4b10 	vmov	d0, r4, r5
 8005eca:	bd70      	pop	{r4, r5, r6, pc}
 8005ecc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005ed0:	da19      	bge.n	8005f06 <scalbn+0xc6>
 8005ed2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005ed6:	429e      	cmp	r6, r3
 8005ed8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005edc:	dd0a      	ble.n	8005ef4 <scalbn+0xb4>
 8005ede:	a112      	add	r1, pc, #72	; (adr r1, 8005f28 <scalbn+0xe8>)
 8005ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e2      	bne.n	8005eae <scalbn+0x6e>
 8005ee8:	a30f      	add	r3, pc, #60	; (adr r3, 8005f28 <scalbn+0xe8>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f7fa fb8b 	bl	8000608 <__aeabi_dmul>
 8005ef2:	e7cb      	b.n	8005e8c <scalbn+0x4c>
 8005ef4:	a10a      	add	r1, pc, #40	; (adr r1, 8005f20 <scalbn+0xe0>)
 8005ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0b8      	beq.n	8005e70 <scalbn+0x30>
 8005efe:	a10e      	add	r1, pc, #56	; (adr r1, 8005f38 <scalbn+0xf8>)
 8005f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f04:	e7b4      	b.n	8005e70 <scalbn+0x30>
 8005f06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005f0a:	3236      	adds	r2, #54	; 0x36
 8005f0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005f14:	4620      	mov	r0, r4
 8005f16:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <scalbn+0x108>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	e7e8      	b.n	8005eee <scalbn+0xae>
 8005f1c:	f3af 8000 	nop.w
 8005f20:	c2f8f359 	.word	0xc2f8f359
 8005f24:	01a56e1f 	.word	0x01a56e1f
 8005f28:	8800759c 	.word	0x8800759c
 8005f2c:	7e37e43c 	.word	0x7e37e43c
 8005f30:	8800759c 	.word	0x8800759c
 8005f34:	fe37e43c 	.word	0xfe37e43c
 8005f38:	c2f8f359 	.word	0xc2f8f359
 8005f3c:	81a56e1f 	.word	0x81a56e1f
 8005f40:	43500000 	.word	0x43500000
 8005f44:	ffff3cb0 	.word	0xffff3cb0
 8005f48:	3c900000 	.word	0x3c900000

08005f4c <_init>:
 8005f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4e:	bf00      	nop
 8005f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f52:	bc08      	pop	{r3}
 8005f54:	469e      	mov	lr, r3
 8005f56:	4770      	bx	lr

08005f58 <_fini>:
 8005f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5a:	bf00      	nop
 8005f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5e:	bc08      	pop	{r3}
 8005f60:	469e      	mov	lr, r3
 8005f62:	4770      	bx	lr
