
rgb-led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a8c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002c38  08002c38  00012c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c78  08002c78  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c78  08002c78  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c78  08002c78  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c78  08002c78  00012c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c7c  08002c7c  00012c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002c8c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002c8c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af9f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001725  00000000  00000000  0002afdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  0002c700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  0002d208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c88  00000000  00000000  0002dc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b370  00000000  00000000  000558e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8acd  00000000  00000000  00060c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015971d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dac  00000000  00000000  00159770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002c20 	.word	0x08002c20

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002c20 	.word	0x08002c20

080001ec <set_rgb>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void set_rgb(uint8_t red, uint8_t green, uint8_t blue)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
 80001f6:	460b      	mov	r3, r1
 80001f8:	71bb      	strb	r3, [r7, #6]
 80001fa:	4613      	mov	r3, r2
 80001fc:	717b      	strb	r3, [r7, #5]
	htim2.Instance->CCR1 = red;
 80001fe:	4b09      	ldr	r3, [pc, #36]	; (8000224 <set_rgb+0x38>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	79fa      	ldrb	r2, [r7, #7]
 8000204:	635a      	str	r2, [r3, #52]	; 0x34
	htim2.Instance->CCR2 = green;
 8000206:	4b07      	ldr	r3, [pc, #28]	; (8000224 <set_rgb+0x38>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	79ba      	ldrb	r2, [r7, #6]
 800020c:	639a      	str	r2, [r3, #56]	; 0x38
	htim2.Instance->CCR3 = blue;
 800020e:	4b05      	ldr	r3, [pc, #20]	; (8000224 <set_rgb+0x38>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	797a      	ldrb	r2, [r7, #5]
 8000214:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	20000028 	.word	0x20000028

08000228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022c:	f000 faef 	bl	800080e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000230:	f000 f852 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000234:	f000 f92e 	bl	8000494 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000238:	f000 f8a0 	bl	800037c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800023c:	2100      	movs	r1, #0
 800023e:	4825      	ldr	r0, [pc, #148]	; (80002d4 <main+0xac>)
 8000240:	f001 fd2e 	bl	8001ca0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000244:	2104      	movs	r1, #4
 8000246:	4823      	ldr	r0, [pc, #140]	; (80002d4 <main+0xac>)
 8000248:	f001 fd2a 	bl	8001ca0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800024c:	2108      	movs	r1, #8
 800024e:	4821      	ldr	r0, [pc, #132]	; (80002d4 <main+0xac>)
 8000250:	f001 fd26 	bl	8001ca0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  set_rgb (255,0,0);   // red only
 8000254:	2200      	movs	r2, #0
 8000256:	2100      	movs	r1, #0
 8000258:	20ff      	movs	r0, #255	; 0xff
 800025a:	f7ff ffc7 	bl	80001ec <set_rgb>
	  HAL_Delay (1000);
 800025e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000262:	f000 fb49 	bl	80008f8 <HAL_Delay>

	  set_rgb (0,255,0);   // green only
 8000266:	2200      	movs	r2, #0
 8000268:	21ff      	movs	r1, #255	; 0xff
 800026a:	2000      	movs	r0, #0
 800026c:	f7ff ffbe 	bl	80001ec <set_rgb>
	  HAL_Delay (1000);
 8000270:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000274:	f000 fb40 	bl	80008f8 <HAL_Delay>

	  set_rgb (0,0,255);  // blue only
 8000278:	22ff      	movs	r2, #255	; 0xff
 800027a:	2100      	movs	r1, #0
 800027c:	2000      	movs	r0, #0
 800027e:	f7ff ffb5 	bl	80001ec <set_rgb>
	  HAL_Delay (1000);
 8000282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000286:	f000 fb37 	bl	80008f8 <HAL_Delay>

	  set_rgb (255,255,0);
 800028a:	2200      	movs	r2, #0
 800028c:	21ff      	movs	r1, #255	; 0xff
 800028e:	20ff      	movs	r0, #255	; 0xff
 8000290:	f7ff ffac 	bl	80001ec <set_rgb>
	  HAL_Delay(1000);
 8000294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000298:	f000 fb2e 	bl	80008f8 <HAL_Delay>

	  set_rgb (0,255,255);
 800029c:	22ff      	movs	r2, #255	; 0xff
 800029e:	21ff      	movs	r1, #255	; 0xff
 80002a0:	2000      	movs	r0, #0
 80002a2:	f7ff ffa3 	bl	80001ec <set_rgb>
	  HAL_Delay (1000);
 80002a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002aa:	f000 fb25 	bl	80008f8 <HAL_Delay>

	  set_rgb (255,0,255);
 80002ae:	22ff      	movs	r2, #255	; 0xff
 80002b0:	2100      	movs	r1, #0
 80002b2:	20ff      	movs	r0, #255	; 0xff
 80002b4:	f7ff ff9a 	bl	80001ec <set_rgb>
	  HAL_Delay (1000);
 80002b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002bc:	f000 fb1c 	bl	80008f8 <HAL_Delay>

	  set_rgb (192,192,192);
 80002c0:	22c0      	movs	r2, #192	; 0xc0
 80002c2:	21c0      	movs	r1, #192	; 0xc0
 80002c4:	20c0      	movs	r0, #192	; 0xc0
 80002c6:	f7ff ff91 	bl	80001ec <set_rgb>
	  HAL_Delay (1000);
 80002ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ce:	f000 fb13 	bl	80008f8 <HAL_Delay>
	  set_rgb (255,0,0);   // red only
 80002d2:	e7bf      	b.n	8000254 <main+0x2c>
 80002d4:	20000028 	.word	0x20000028

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b096      	sub	sp, #88	; 0x58
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0314 	add.w	r3, r7, #20
 80002e2:	2244      	movs	r2, #68	; 0x44
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 fc92 	bl	8002c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	463b      	mov	r3, r7
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002fa:	2302      	movs	r3, #2
 80002fc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000304:	2340      	movs	r3, #64	; 0x40
 8000306:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000308:	2302      	movs	r3, #2
 800030a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800030c:	2302      	movs	r3, #2
 800030e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000310:	2301      	movs	r3, #1
 8000312:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000314:	230a      	movs	r3, #10
 8000316:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000318:	2302      	movs	r3, #2
 800031a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800031c:	2302      	movs	r3, #2
 800031e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000320:	2302      	movs	r3, #2
 8000322:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000324:	f107 0314 	add.w	r3, r7, #20
 8000328:	4618      	mov	r0, r3
 800032a:	f000 fe0d 	bl	8000f48 <HAL_RCC_OscConfig>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000334:	f000 f96a 	bl	800060c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000338:	230f      	movs	r3, #15
 800033a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033c:	2303      	movs	r3, #3
 800033e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000348:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800034e:	463b      	mov	r3, r7
 8000350:	2104      	movs	r1, #4
 8000352:	4618      	mov	r0, r3
 8000354:	f001 fa1e 	bl	8001794 <HAL_RCC_ClockConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800035e:	f000 f955 	bl	800060c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000362:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000366:	f000 fd89 	bl	8000e7c <HAL_PWREx_ControlVoltageScaling>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000370:	f000 f94c 	bl	800060c <Error_Handler>
  }
}
 8000374:	bf00      	nop
 8000376:	3758      	adds	r7, #88	; 0x58
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08e      	sub	sp, #56	; 0x38
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000390:	f107 031c 	add.w	r3, r7, #28
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800039c:	463b      	mov	r3, r7
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	611a      	str	r2, [r3, #16]
 80003aa:	615a      	str	r2, [r3, #20]
 80003ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003ae:	4b38      	ldr	r3, [pc, #224]	; (8000490 <MX_TIM2_Init+0x114>)
 80003b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1230;
 80003b6:	4b36      	ldr	r3, [pc, #216]	; (8000490 <MX_TIM2_Init+0x114>)
 80003b8:	f240 42ce 	movw	r2, #1230	; 0x4ce
 80003bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003be:	4b34      	ldr	r3, [pc, #208]	; (8000490 <MX_TIM2_Init+0x114>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80003c4:	4b32      	ldr	r3, [pc, #200]	; (8000490 <MX_TIM2_Init+0x114>)
 80003c6:	22ff      	movs	r2, #255	; 0xff
 80003c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ca:	4b31      	ldr	r3, [pc, #196]	; (8000490 <MX_TIM2_Init+0x114>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d0:	4b2f      	ldr	r3, [pc, #188]	; (8000490 <MX_TIM2_Init+0x114>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003d6:	482e      	ldr	r0, [pc, #184]	; (8000490 <MX_TIM2_Init+0x114>)
 80003d8:	f001 fbaa 	bl	8001b30 <HAL_TIM_Base_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80003e2:	f000 f913 	bl	800060c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003f0:	4619      	mov	r1, r3
 80003f2:	4827      	ldr	r0, [pc, #156]	; (8000490 <MX_TIM2_Init+0x114>)
 80003f4:	f001 fe6a 	bl	80020cc <HAL_TIM_ConfigClockSource>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80003fe:	f000 f905 	bl	800060c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000402:	4823      	ldr	r0, [pc, #140]	; (8000490 <MX_TIM2_Init+0x114>)
 8000404:	f001 fbeb 	bl	8001bde <HAL_TIM_PWM_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800040e:	f000 f8fd 	bl	800060c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000412:	2300      	movs	r3, #0
 8000414:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000416:	2300      	movs	r3, #0
 8000418:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800041a:	f107 031c 	add.w	r3, r7, #28
 800041e:	4619      	mov	r1, r3
 8000420:	481b      	ldr	r0, [pc, #108]	; (8000490 <MX_TIM2_Init+0x114>)
 8000422:	f002 fb49 	bl	8002ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800042c:	f000 f8ee 	bl	800060c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000430:	2360      	movs	r3, #96	; 0x60
 8000432:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000438:	2300      	movs	r3, #0
 800043a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800043c:	2300      	movs	r3, #0
 800043e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000440:	463b      	mov	r3, r7
 8000442:	2200      	movs	r2, #0
 8000444:	4619      	mov	r1, r3
 8000446:	4812      	ldr	r0, [pc, #72]	; (8000490 <MX_TIM2_Init+0x114>)
 8000448:	f001 fd30 	bl	8001eac <HAL_TIM_PWM_ConfigChannel>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000452:	f000 f8db 	bl	800060c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000456:	463b      	mov	r3, r7
 8000458:	2204      	movs	r2, #4
 800045a:	4619      	mov	r1, r3
 800045c:	480c      	ldr	r0, [pc, #48]	; (8000490 <MX_TIM2_Init+0x114>)
 800045e:	f001 fd25 	bl	8001eac <HAL_TIM_PWM_ConfigChannel>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000468:	f000 f8d0 	bl	800060c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800046c:	463b      	mov	r3, r7
 800046e:	2208      	movs	r2, #8
 8000470:	4619      	mov	r1, r3
 8000472:	4807      	ldr	r0, [pc, #28]	; (8000490 <MX_TIM2_Init+0x114>)
 8000474:	f001 fd1a 	bl	8001eac <HAL_TIM_PWM_ConfigChannel>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800047e:	f000 f8c5 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000482:	4803      	ldr	r0, [pc, #12]	; (8000490 <MX_TIM2_Init+0x114>)
 8000484:	f000 f90a 	bl	800069c <HAL_TIM_MspPostInit>

}
 8000488:	bf00      	nop
 800048a:	3738      	adds	r7, #56	; 0x38
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000028 	.word	0x20000028

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08a      	sub	sp, #40	; 0x28
 8000498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
 80004a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004aa:	4b53      	ldr	r3, [pc, #332]	; (80005f8 <MX_GPIO_Init+0x164>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	4a52      	ldr	r2, [pc, #328]	; (80005f8 <MX_GPIO_Init+0x164>)
 80004b0:	f043 0304 	orr.w	r3, r3, #4
 80004b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b6:	4b50      	ldr	r3, [pc, #320]	; (80005f8 <MX_GPIO_Init+0x164>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	f003 0304 	and.w	r3, r3, #4
 80004be:	613b      	str	r3, [r7, #16]
 80004c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004c2:	4b4d      	ldr	r3, [pc, #308]	; (80005f8 <MX_GPIO_Init+0x164>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c6:	4a4c      	ldr	r2, [pc, #304]	; (80005f8 <MX_GPIO_Init+0x164>)
 80004c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ce:	4b4a      	ldr	r3, [pc, #296]	; (80005f8 <MX_GPIO_Init+0x164>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b47      	ldr	r3, [pc, #284]	; (80005f8 <MX_GPIO_Init+0x164>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a46      	ldr	r2, [pc, #280]	; (80005f8 <MX_GPIO_Init+0x164>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b44      	ldr	r3, [pc, #272]	; (80005f8 <MX_GPIO_Init+0x164>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f2:	4b41      	ldr	r3, [pc, #260]	; (80005f8 <MX_GPIO_Init+0x164>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a40      	ldr	r2, [pc, #256]	; (80005f8 <MX_GPIO_Init+0x164>)
 80004f8:	f043 0302 	orr.w	r3, r3, #2
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b3e      	ldr	r3, [pc, #248]	; (80005f8 <MX_GPIO_Init+0x164>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0302 	and.w	r3, r3, #2
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800050a:	4b3b      	ldr	r3, [pc, #236]	; (80005f8 <MX_GPIO_Init+0x164>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	4a3a      	ldr	r2, [pc, #232]	; (80005f8 <MX_GPIO_Init+0x164>)
 8000510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000516:	4b38      	ldr	r3, [pc, #224]	; (80005f8 <MX_GPIO_Init+0x164>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000522:	f000 fd01 	bl	8000f28 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800052c:	4833      	ldr	r0, [pc, #204]	; (80005fc <MX_GPIO_Init+0x168>)
 800052e:	f000 fc7f 	bl	8000e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2140      	movs	r1, #64	; 0x40
 8000536:	4832      	ldr	r0, [pc, #200]	; (8000600 <MX_GPIO_Init+0x16c>)
 8000538:	f000 fc7a 	bl	8000e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800053c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000542:	4b30      	ldr	r3, [pc, #192]	; (8000604 <MX_GPIO_Init+0x170>)
 8000544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4619      	mov	r1, r3
 8000550:	482d      	ldr	r0, [pc, #180]	; (8000608 <MX_GPIO_Init+0x174>)
 8000552:	f000 fadb 	bl	8000b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000556:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800055a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2300      	movs	r3, #0
 8000566:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	4619      	mov	r1, r3
 800056e:	4823      	ldr	r0, [pc, #140]	; (80005fc <MX_GPIO_Init+0x168>)
 8000570:	f000 facc 	bl	8000b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000574:	2320      	movs	r3, #32
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000578:	2300      	movs	r3, #0
 800057a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4619      	mov	r1, r3
 8000586:	481e      	ldr	r0, [pc, #120]	; (8000600 <MX_GPIO_Init+0x16c>)
 8000588:	f000 fac0 	bl	8000b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800058c:	2340      	movs	r3, #64	; 0x40
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000590:	2301      	movs	r3, #1
 8000592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	2300      	movs	r3, #0
 800059a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	4817      	ldr	r0, [pc, #92]	; (8000600 <MX_GPIO_Init+0x16c>)
 80005a4:	f000 fab2 	bl	8000b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80005a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80005ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ae:	2302      	movs	r3, #2
 80005b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b6:	2303      	movs	r3, #3
 80005b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80005ba:	2308      	movs	r3, #8
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4619      	mov	r1, r3
 80005c4:	480e      	ldr	r0, [pc, #56]	; (8000600 <MX_GPIO_Init+0x16c>)
 80005c6:	f000 faa1 	bl	8000b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80005ca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80005ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d0:	2302      	movs	r3, #2
 80005d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005d8:	2303      	movs	r3, #3
 80005da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80005dc:	230a      	movs	r3, #10
 80005de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4619      	mov	r1, r3
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ea:	f000 fa8f 	bl	8000b0c <HAL_GPIO_Init>

}
 80005ee:	bf00      	nop
 80005f0:	3728      	adds	r7, #40	; 0x28
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000
 80005fc:	48000400 	.word	0x48000400
 8000600:	48001800 	.word	0x48001800
 8000604:	10110000 	.word	0x10110000
 8000608:	48000800 	.word	0x48000800

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000610:	b672      	cpsid	i
}
 8000612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000614:	e7fe      	b.n	8000614 <Error_Handler+0x8>
	...

08000618 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <HAL_MspInit+0x44>)
 8000620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <HAL_MspInit+0x44>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6613      	str	r3, [r2, #96]	; 0x60
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <HAL_MspInit+0x44>)
 800062c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <HAL_MspInit+0x44>)
 8000638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <HAL_MspInit+0x44>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	6593      	str	r3, [r2, #88]	; 0x58
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_MspInit+0x44>)
 8000644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000670:	d10b      	bne.n	800068a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <HAL_TIM_Base_MspInit+0x38>)
 8000674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000676:	4a08      	ldr	r2, [pc, #32]	; (8000698 <HAL_TIM_Base_MspInit+0x38>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6593      	str	r3, [r2, #88]	; 0x58
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_TIM_Base_MspInit+0x38>)
 8000680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000

0800069c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006bc:	d11c      	bne.n	80006f8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <HAL_TIM_MspPostInit+0x64>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <HAL_TIM_MspPostInit+0x64>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <HAL_TIM_MspPostInit+0x64>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80006d6:	2307      	movs	r3, #7
 80006d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	2302      	movs	r3, #2
 80006dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	4619      	mov	r1, r3
 80006f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f4:	f000 fa0a 	bl	8000b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006f8:	bf00      	nop
 80006fa:	3720      	adds	r7, #32
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <NMI_Handler+0x4>

0800070a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <MemManage_Handler+0x4>

08000716 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <UsageFault_Handler+0x4>

08000722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000750:	f000 f8b2 	bl	80008b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <SystemInit+0x5c>)
 800075e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000762:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <SystemInit+0x5c>)
 8000764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <SystemInit+0x60>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a11      	ldr	r2, [pc, #68]	; (80007b8 <SystemInit+0x60>)
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x60>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <SystemInit+0x60>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <SystemInit+0x60>)
 8000784:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000788:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800078c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <SystemInit+0x60>)
 8000790:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000794:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <SystemInit+0x60>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <SystemInit+0x60>)
 800079c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <SystemInit+0x60>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00
 80007b8:	40021000 	.word	0x40021000

080007bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007c0:	f7ff ffca 	bl	8000758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007c6:	e003      	b.n	80007d0 <LoopCopyDataInit>

080007c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007c8:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007ce:	3104      	adds	r1, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007d0:	480a      	ldr	r0, [pc, #40]	; (80007fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <LoopForever+0xe>)
	adds	r2, r0, r1
 80007d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007d8:	d3f6      	bcc.n	80007c8 <CopyDataInit>
	ldr	r2, =_sbss
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007dc:	e002      	b.n	80007e4 <LoopFillZerobss>

080007de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007e0:	f842 3b04 	str.w	r3, [r2], #4

080007e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <LoopForever+0x16>)
	cmp	r2, r3
 80007e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007e8:	d3f9      	bcc.n	80007de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ea:	f002 f9ed 	bl	8002bc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ee:	f7ff fd1b 	bl	8000228 <main>

080007f2 <LoopForever>:

LoopForever:
    b LoopForever
 80007f2:	e7fe      	b.n	80007f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007f4:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 80007f8:	08002c80 	.word	0x08002c80
	ldr	r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000800:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000804:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000808:	20000078 	.word	0x20000078

0800080c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800080c:	e7fe      	b.n	800080c <ADC1_2_IRQHandler>

0800080e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000814:	2300      	movs	r3, #0
 8000816:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000818:	2003      	movs	r0, #3
 800081a:	f000 f943 	bl	8000aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800081e:	2000      	movs	r0, #0
 8000820:	f000 f80e 	bl	8000840 <HAL_InitTick>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	71fb      	strb	r3, [r7, #7]
 800082e:	e001      	b.n	8000834 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000830:	f7ff fef2 	bl	8000618 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000834:	79fb      	ldrb	r3, [r7, #7]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000848:	2300      	movs	r3, #0
 800084a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800084c:	4b17      	ldr	r3, [pc, #92]	; (80008ac <HAL_InitTick+0x6c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d023      	beq.n	800089c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <HAL_InitTick+0x70>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <HAL_InitTick+0x6c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	4619      	mov	r1, r3
 800085e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000862:	fbb3 f3f1 	udiv	r3, r3, r1
 8000866:	fbb2 f3f3 	udiv	r3, r2, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f941 	bl	8000af2 <HAL_SYSTICK_Config>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10f      	bne.n	8000896 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b0f      	cmp	r3, #15
 800087a:	d809      	bhi.n	8000890 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800087c:	2200      	movs	r2, #0
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	f000 f919 	bl	8000aba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000888:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <HAL_InitTick+0x74>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6013      	str	r3, [r2, #0]
 800088e:	e007      	b.n	80008a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000890:	2301      	movs	r3, #1
 8000892:	73fb      	strb	r3, [r7, #15]
 8000894:	e004      	b.n	80008a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000896:	2301      	movs	r3, #1
 8000898:	73fb      	strb	r3, [r7, #15]
 800089a:	e001      	b.n	80008a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800089c:	2301      	movs	r3, #1
 800089e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000008 	.word	0x20000008
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000004 	.word	0x20000004

080008b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_IncTick+0x20>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_IncTick+0x24>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4413      	add	r3, r2
 80008c8:	4a04      	ldr	r2, [pc, #16]	; (80008dc <HAL_IncTick+0x24>)
 80008ca:	6013      	str	r3, [r2, #0]
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	20000008 	.word	0x20000008
 80008dc:	20000074 	.word	0x20000074

080008e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return uwTick;
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <HAL_GetTick+0x14>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000074 	.word	0x20000074

080008f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000900:	f7ff ffee 	bl	80008e0 <HAL_GetTick>
 8000904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000910:	d005      	beq.n	800091e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <HAL_Delay+0x44>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	461a      	mov	r2, r3
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4413      	add	r3, r2
 800091c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800091e:	bf00      	nop
 8000920:	f7ff ffde 	bl	80008e0 <HAL_GetTick>
 8000924:	4602      	mov	r2, r0
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	429a      	cmp	r2, r3
 800092e:	d8f7      	bhi.n	8000920 <HAL_Delay+0x28>
  {
  }
}
 8000930:	bf00      	nop
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000008 	.word	0x20000008

08000940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <__NVIC_SetPriorityGrouping+0x44>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800095c:	4013      	ands	r3, r2
 800095e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800096c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000972:	4a04      	ldr	r2, [pc, #16]	; (8000984 <__NVIC_SetPriorityGrouping+0x44>)
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	60d3      	str	r3, [r2, #12]
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <__NVIC_GetPriorityGrouping+0x18>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	0a1b      	lsrs	r3, r3, #8
 8000992:	f003 0307 	and.w	r3, r3, #7
}
 8000996:	4618      	mov	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	db0a      	blt.n	80009ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	490c      	ldr	r1, [pc, #48]	; (80009f0 <__NVIC_SetPriority+0x4c>)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	0112      	lsls	r2, r2, #4
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	440b      	add	r3, r1
 80009c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009cc:	e00a      	b.n	80009e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4908      	ldr	r1, [pc, #32]	; (80009f4 <__NVIC_SetPriority+0x50>)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	3b04      	subs	r3, #4
 80009dc:	0112      	lsls	r2, r2, #4
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	440b      	add	r3, r1
 80009e2:	761a      	strb	r2, [r3, #24]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000e100 	.word	0xe000e100
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b089      	sub	sp, #36	; 0x24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	f1c3 0307 	rsb	r3, r3, #7
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	bf28      	it	cs
 8000a16:	2304      	movcs	r3, #4
 8000a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	2b06      	cmp	r3, #6
 8000a20:	d902      	bls.n	8000a28 <NVIC_EncodePriority+0x30>
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3b03      	subs	r3, #3
 8000a26:	e000      	b.n	8000a2a <NVIC_EncodePriority+0x32>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	43da      	mvns	r2, r3
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	43d9      	mvns	r1, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	4313      	orrs	r3, r2
         );
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3724      	adds	r7, #36	; 0x24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
	...

08000a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a70:	d301      	bcc.n	8000a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a72:	2301      	movs	r3, #1
 8000a74:	e00f      	b.n	8000a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <SysTick_Config+0x40>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7e:	210f      	movs	r1, #15
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a84:	f7ff ff8e 	bl	80009a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SysTick_Config+0x40>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <SysTick_Config+0x40>)
 8000a90:	2207      	movs	r2, #7
 8000a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	e000e010 	.word	0xe000e010

08000aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ff47 	bl	8000940 <__NVIC_SetPriorityGrouping>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000acc:	f7ff ff5c 	bl	8000988 <__NVIC_GetPriorityGrouping>
 8000ad0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	6978      	ldr	r0, [r7, #20]
 8000ad8:	f7ff ff8e 	bl	80009f8 <NVIC_EncodePriority>
 8000adc:	4602      	mov	r2, r0
 8000ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff5d 	bl	80009a4 <__NVIC_SetPriority>
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff ffb0 	bl	8000a60 <SysTick_Config>
 8000b00:	4603      	mov	r3, r0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b087      	sub	sp, #28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b1a:	e166      	b.n	8000dea <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	2101      	movs	r1, #1
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	fa01 f303 	lsl.w	r3, r1, r3
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f000 8158 	beq.w	8000de4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d00b      	beq.n	8000b54 <HAL_GPIO_Init+0x48>
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d007      	beq.n	8000b54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b48:	2b11      	cmp	r3, #17
 8000b4a:	d003      	beq.n	8000b54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	2b12      	cmp	r3, #18
 8000b52:	d130      	bne.n	8000bb6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	2203      	movs	r2, #3
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	43db      	mvns	r3, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	68da      	ldr	r2, [r3, #12]
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	091b      	lsrs	r3, r3, #4
 8000ba0:	f003 0201 	and.w	r2, r3, #1
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d003      	beq.n	8000bf6 <HAL_GPIO_Init+0xea>
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2b12      	cmp	r3, #18
 8000bf4:	d123      	bne.n	8000c3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	08da      	lsrs	r2, r3, #3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3208      	adds	r2, #8
 8000bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	220f      	movs	r2, #15
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	691a      	ldr	r2, [r3, #16]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	f003 0307 	and.w	r3, r3, #7
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	08da      	lsrs	r2, r3, #3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3208      	adds	r2, #8
 8000c38:	6939      	ldr	r1, [r7, #16]
 8000c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	2203      	movs	r2, #3
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f003 0203 	and.w	r2, r3, #3
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f000 80b2 	beq.w	8000de4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c80:	4b61      	ldr	r3, [pc, #388]	; (8000e08 <HAL_GPIO_Init+0x2fc>)
 8000c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c84:	4a60      	ldr	r2, [pc, #384]	; (8000e08 <HAL_GPIO_Init+0x2fc>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c8c:	4b5e      	ldr	r3, [pc, #376]	; (8000e08 <HAL_GPIO_Init+0x2fc>)
 8000c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c98:	4a5c      	ldr	r2, [pc, #368]	; (8000e0c <HAL_GPIO_Init+0x300>)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	089b      	lsrs	r3, r3, #2
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	f003 0303 	and.w	r3, r3, #3
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	220f      	movs	r2, #15
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cc2:	d02b      	beq.n	8000d1c <HAL_GPIO_Init+0x210>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a52      	ldr	r2, [pc, #328]	; (8000e10 <HAL_GPIO_Init+0x304>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d025      	beq.n	8000d18 <HAL_GPIO_Init+0x20c>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a51      	ldr	r2, [pc, #324]	; (8000e14 <HAL_GPIO_Init+0x308>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d01f      	beq.n	8000d14 <HAL_GPIO_Init+0x208>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a50      	ldr	r2, [pc, #320]	; (8000e18 <HAL_GPIO_Init+0x30c>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d019      	beq.n	8000d10 <HAL_GPIO_Init+0x204>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a4f      	ldr	r2, [pc, #316]	; (8000e1c <HAL_GPIO_Init+0x310>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d013      	beq.n	8000d0c <HAL_GPIO_Init+0x200>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a4e      	ldr	r2, [pc, #312]	; (8000e20 <HAL_GPIO_Init+0x314>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d00d      	beq.n	8000d08 <HAL_GPIO_Init+0x1fc>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a4d      	ldr	r2, [pc, #308]	; (8000e24 <HAL_GPIO_Init+0x318>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d007      	beq.n	8000d04 <HAL_GPIO_Init+0x1f8>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a4c      	ldr	r2, [pc, #304]	; (8000e28 <HAL_GPIO_Init+0x31c>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d101      	bne.n	8000d00 <HAL_GPIO_Init+0x1f4>
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	e00e      	b.n	8000d1e <HAL_GPIO_Init+0x212>
 8000d00:	2308      	movs	r3, #8
 8000d02:	e00c      	b.n	8000d1e <HAL_GPIO_Init+0x212>
 8000d04:	2306      	movs	r3, #6
 8000d06:	e00a      	b.n	8000d1e <HAL_GPIO_Init+0x212>
 8000d08:	2305      	movs	r3, #5
 8000d0a:	e008      	b.n	8000d1e <HAL_GPIO_Init+0x212>
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	e006      	b.n	8000d1e <HAL_GPIO_Init+0x212>
 8000d10:	2303      	movs	r3, #3
 8000d12:	e004      	b.n	8000d1e <HAL_GPIO_Init+0x212>
 8000d14:	2302      	movs	r3, #2
 8000d16:	e002      	b.n	8000d1e <HAL_GPIO_Init+0x212>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e000      	b.n	8000d1e <HAL_GPIO_Init+0x212>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	f002 0203 	and.w	r2, r2, #3
 8000d24:	0092      	lsls	r2, r2, #2
 8000d26:	4093      	lsls	r3, r2
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d2e:	4937      	ldr	r1, [pc, #220]	; (8000e0c <HAL_GPIO_Init+0x300>)
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	089b      	lsrs	r3, r3, #2
 8000d34:	3302      	adds	r3, #2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d3c:	4b3b      	ldr	r3, [pc, #236]	; (8000e2c <HAL_GPIO_Init+0x320>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d60:	4a32      	ldr	r2, [pc, #200]	; (8000e2c <HAL_GPIO_Init+0x320>)
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000d66:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <HAL_GPIO_Init+0x320>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d8a:	4a28      	ldr	r2, [pc, #160]	; (8000e2c <HAL_GPIO_Init+0x320>)
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d90:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <HAL_GPIO_Init+0x320>)
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000db4:	4a1d      	ldr	r2, [pc, #116]	; (8000e2c <HAL_GPIO_Init+0x320>)
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <HAL_GPIO_Init+0x320>)
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dde:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <HAL_GPIO_Init+0x320>)
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	3301      	adds	r3, #1
 8000de8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	fa22 f303 	lsr.w	r3, r2, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f47f ae91 	bne.w	8000b1c <HAL_GPIO_Init+0x10>
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	bf00      	nop
 8000dfe:	371c      	adds	r7, #28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010000 	.word	0x40010000
 8000e10:	48000400 	.word	0x48000400
 8000e14:	48000800 	.word	0x48000800
 8000e18:	48000c00 	.word	0x48000c00
 8000e1c:	48001000 	.word	0x48001000
 8000e20:	48001400 	.word	0x48001400
 8000e24:	48001800 	.word	0x48001800
 8000e28:	48001c00 	.word	0x48001c00
 8000e2c:	40010400 	.word	0x40010400

08000e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	807b      	strh	r3, [r7, #2]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e40:	787b      	ldrb	r3, [r7, #1]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e46:	887a      	ldrh	r2, [r7, #2]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e4c:	e002      	b.n	8000e54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e4e:	887a      	ldrh	r2, [r7, #2]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40007000 	.word	0x40007000

08000e7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e8a:	d130      	bne.n	8000eee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e8c:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e98:	d038      	beq.n	8000f0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ea2:	4a1e      	ldr	r2, [pc, #120]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ea4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2232      	movs	r2, #50	; 0x32
 8000eb0:	fb02 f303 	mul.w	r3, r2, r3
 8000eb4:	4a1b      	ldr	r2, [pc, #108]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eba:	0c9b      	lsrs	r3, r3, #18
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ec0:	e002      	b.n	8000ec8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ed4:	d102      	bne.n	8000edc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1f2      	bne.n	8000ec2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ee8:	d110      	bne.n	8000f0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e00f      	b.n	8000f0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000efa:	d007      	beq.n	8000f0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f04:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40007000 	.word	0x40007000
 8000f20:	20000000 	.word	0x20000000
 8000f24:	431bde83 	.word	0x431bde83

08000f28 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f36:	6053      	str	r3, [r2, #4]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40007000 	.word	0x40007000

08000f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d102      	bne.n	8000f5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	f000 bc16 	b.w	8001788 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f5c:	4ba0      	ldr	r3, [pc, #640]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 030c 	and.w	r3, r3, #12
 8000f64:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f66:	4b9e      	ldr	r3, [pc, #632]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0310 	and.w	r3, r3, #16
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f000 80e4 	beq.w	8001146 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d007      	beq.n	8000f94 <HAL_RCC_OscConfig+0x4c>
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	2b0c      	cmp	r3, #12
 8000f88:	f040 808b 	bne.w	80010a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	f040 8087 	bne.w	80010a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f94:	4b92      	ldr	r3, [pc, #584]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d005      	beq.n	8000fac <HAL_RCC_OscConfig+0x64>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e3ed      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a1a      	ldr	r2, [r3, #32]
 8000fb0:	4b8b      	ldr	r3, [pc, #556]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d004      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x7e>
 8000fbc:	4b88      	ldr	r3, [pc, #544]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fc4:	e005      	b.n	8000fd2 <HAL_RCC_OscConfig+0x8a>
 8000fc6:	4b86      	ldr	r3, [pc, #536]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8000fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d223      	bcs.n	800101e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fd48 	bl	8001a70 <RCC_SetFlashLatencyFromMSIRange>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e3ce      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fea:	4b7d      	ldr	r3, [pc, #500]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a7c      	ldr	r2, [pc, #496]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b7a      	ldr	r3, [pc, #488]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a1b      	ldr	r3, [r3, #32]
 8001002:	4977      	ldr	r1, [pc, #476]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001004:	4313      	orrs	r3, r2
 8001006:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001008:	4b75      	ldr	r3, [pc, #468]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	4972      	ldr	r1, [pc, #456]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
 800101c:	e025      	b.n	800106a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800101e:	4b70      	ldr	r3, [pc, #448]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a6f      	ldr	r2, [pc, #444]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	4b6d      	ldr	r3, [pc, #436]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	496a      	ldr	r1, [pc, #424]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001038:	4313      	orrs	r3, r2
 800103a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800103c:	4b68      	ldr	r3, [pc, #416]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	4965      	ldr	r1, [pc, #404]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 800104c:	4313      	orrs	r3, r2
 800104e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d109      	bne.n	800106a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fd08 	bl	8001a70 <RCC_SetFlashLatencyFromMSIRange>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e38e      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800106a:	f000 fc75 	bl	8001958 <HAL_RCC_GetSysClockFreq>
 800106e:	4602      	mov	r2, r0
 8001070:	4b5b      	ldr	r3, [pc, #364]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	495a      	ldr	r1, [pc, #360]	; (80011e4 <HAL_RCC_OscConfig+0x29c>)
 800107c:	5ccb      	ldrb	r3, [r1, r3]
 800107e:	f003 031f 	and.w	r3, r3, #31
 8001082:	fa22 f303 	lsr.w	r3, r2, r3
 8001086:	4a58      	ldr	r2, [pc, #352]	; (80011e8 <HAL_RCC_OscConfig+0x2a0>)
 8001088:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800108a:	4b58      	ldr	r3, [pc, #352]	; (80011ec <HAL_RCC_OscConfig+0x2a4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fbd6 	bl	8000840 <HAL_InitTick>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d052      	beq.n	8001144 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	e372      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d032      	beq.n	8001110 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010aa:	4b4d      	ldr	r3, [pc, #308]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a4c      	ldr	r2, [pc, #304]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010b6:	f7ff fc13 	bl	80008e0 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010be:	f7ff fc0f 	bl	80008e0 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e35b      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010d0:	4b43      	ldr	r3, [pc, #268]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f0      	beq.n	80010be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010dc:	4b40      	ldr	r3, [pc, #256]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a3f      	ldr	r2, [pc, #252]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80010e2:	f043 0308 	orr.w	r3, r3, #8
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	493a      	ldr	r1, [pc, #232]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010fa:	4b39      	ldr	r3, [pc, #228]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	4935      	ldr	r1, [pc, #212]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 800110a:	4313      	orrs	r3, r2
 800110c:	604b      	str	r3, [r1, #4]
 800110e:	e01a      	b.n	8001146 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001110:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a32      	ldr	r2, [pc, #200]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001116:	f023 0301 	bic.w	r3, r3, #1
 800111a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800111c:	f7ff fbe0 	bl	80008e0 <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001124:	f7ff fbdc 	bl	80008e0 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e328      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001136:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f0      	bne.n	8001124 <HAL_RCC_OscConfig+0x1dc>
 8001142:	e000      	b.n	8001146 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001144:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d073      	beq.n	800123a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	2b08      	cmp	r3, #8
 8001156:	d005      	beq.n	8001164 <HAL_RCC_OscConfig+0x21c>
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	2b0c      	cmp	r3, #12
 800115c:	d10e      	bne.n	800117c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	2b03      	cmp	r3, #3
 8001162:	d10b      	bne.n	800117c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001164:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d063      	beq.n	8001238 <HAL_RCC_OscConfig+0x2f0>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d15f      	bne.n	8001238 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e305      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001184:	d106      	bne.n	8001194 <HAL_RCC_OscConfig+0x24c>
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a15      	ldr	r2, [pc, #84]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 800118c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e01d      	b.n	80011d0 <HAL_RCC_OscConfig+0x288>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800119c:	d10c      	bne.n	80011b8 <HAL_RCC_OscConfig+0x270>
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80011a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80011b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e00b      	b.n	80011d0 <HAL_RCC_OscConfig+0x288>
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80011be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80011ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d01b      	beq.n	8001210 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d8:	f7ff fb82 	bl	80008e0 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011de:	e010      	b.n	8001202 <HAL_RCC_OscConfig+0x2ba>
 80011e0:	40021000 	.word	0x40021000
 80011e4:	08002c38 	.word	0x08002c38
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff fb76 	bl	80008e0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b64      	cmp	r3, #100	; 0x64
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e2c2      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001202:	4baf      	ldr	r3, [pc, #700]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0x2a8>
 800120e:	e014      	b.n	800123a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001210:	f7ff fb66 	bl	80008e0 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fb62 	bl	80008e0 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	; 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e2ae      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800122a:	4ba5      	ldr	r3, [pc, #660]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x2d0>
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d060      	beq.n	8001308 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	2b04      	cmp	r3, #4
 800124a:	d005      	beq.n	8001258 <HAL_RCC_OscConfig+0x310>
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	2b0c      	cmp	r3, #12
 8001250:	d119      	bne.n	8001286 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d116      	bne.n	8001286 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001258:	4b99      	ldr	r3, [pc, #612]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001260:	2b00      	cmp	r3, #0
 8001262:	d005      	beq.n	8001270 <HAL_RCC_OscConfig+0x328>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e28b      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001270:	4b93      	ldr	r3, [pc, #588]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	061b      	lsls	r3, r3, #24
 800127e:	4990      	ldr	r1, [pc, #576]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001280:	4313      	orrs	r3, r2
 8001282:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001284:	e040      	b.n	8001308 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d023      	beq.n	80012d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800128e:	4b8c      	ldr	r3, [pc, #560]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a8b      	ldr	r2, [pc, #556]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129a:	f7ff fb21 	bl	80008e0 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a2:	f7ff fb1d 	bl	80008e0 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e269      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012b4:	4b82      	ldr	r3, [pc, #520]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	4b7f      	ldr	r3, [pc, #508]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	061b      	lsls	r3, r3, #24
 80012ce:	497c      	ldr	r1, [pc, #496]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
 80012d4:	e018      	b.n	8001308 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d6:	4b7a      	ldr	r3, [pc, #488]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a79      	ldr	r2, [pc, #484]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80012dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e2:	f7ff fafd 	bl	80008e0 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ea:	f7ff faf9 	bl	80008e0 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e245      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012fc:	4b70      	ldr	r3, [pc, #448]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f0      	bne.n	80012ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0308 	and.w	r3, r3, #8
 8001310:	2b00      	cmp	r3, #0
 8001312:	d03c      	beq.n	800138e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d01c      	beq.n	8001356 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131c:	4b68      	ldr	r3, [pc, #416]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800131e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001322:	4a67      	ldr	r2, [pc, #412]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132c:	f7ff fad8 	bl	80008e0 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001334:	f7ff fad4 	bl	80008e0 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e220      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001346:	4b5e      	ldr	r3, [pc, #376]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0ef      	beq.n	8001334 <HAL_RCC_OscConfig+0x3ec>
 8001354:	e01b      	b.n	800138e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001356:	4b5a      	ldr	r3, [pc, #360]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800135c:	4a58      	ldr	r2, [pc, #352]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800135e:	f023 0301 	bic.w	r3, r3, #1
 8001362:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001366:	f7ff fabb 	bl	80008e0 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800136e:	f7ff fab7 	bl	80008e0 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e203      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001380:	4b4f      	ldr	r3, [pc, #316]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1ef      	bne.n	800136e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 80a6 	beq.w	80014e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013a0:	4b47      	ldr	r3, [pc, #284]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80013a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10d      	bne.n	80013c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ac:	4b44      	ldr	r3, [pc, #272]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80013ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b0:	4a43      	ldr	r2, [pc, #268]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80013b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b6:	6593      	str	r3, [r2, #88]	; 0x58
 80013b8:	4b41      	ldr	r3, [pc, #260]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80013ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013c4:	2301      	movs	r3, #1
 80013c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c8:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <HAL_RCC_OscConfig+0x57c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d118      	bne.n	8001406 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013d4:	4b3b      	ldr	r3, [pc, #236]	; (80014c4 <HAL_RCC_OscConfig+0x57c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a3a      	ldr	r2, [pc, #232]	; (80014c4 <HAL_RCC_OscConfig+0x57c>)
 80013da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e0:	f7ff fa7e 	bl	80008e0 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e8:	f7ff fa7a 	bl	80008e0 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e1c6      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013fa:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <HAL_RCC_OscConfig+0x57c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d108      	bne.n	8001420 <HAL_RCC_OscConfig+0x4d8>
 800140e:	4b2c      	ldr	r3, [pc, #176]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001414:	4a2a      	ldr	r2, [pc, #168]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800141e:	e024      	b.n	800146a <HAL_RCC_OscConfig+0x522>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b05      	cmp	r3, #5
 8001426:	d110      	bne.n	800144a <HAL_RCC_OscConfig+0x502>
 8001428:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800142a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800142e:	4a24      	ldr	r2, [pc, #144]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001438:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800143a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800143e:	4a20      	ldr	r2, [pc, #128]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001448:	e00f      	b.n	800146a <HAL_RCC_OscConfig+0x522>
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800144c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001450:	4a1b      	ldr	r2, [pc, #108]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001452:	f023 0301 	bic.w	r3, r3, #1
 8001456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800145c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001460:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001462:	f023 0304 	bic.w	r3, r3, #4
 8001466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d016      	beq.n	80014a0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001472:	f7ff fa35 	bl	80008e0 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff fa31 	bl	80008e0 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f241 3288 	movw	r2, #5000	; 0x1388
 8001488:	4293      	cmp	r3, r2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e17b      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0ed      	beq.n	800147a <HAL_RCC_OscConfig+0x532>
 800149e:	e01a      	b.n	80014d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a0:	f7ff fa1e 	bl	80008e0 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014a6:	e00f      	b.n	80014c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a8:	f7ff fa1a 	bl	80008e0 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d906      	bls.n	80014c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e164      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014c8:	4ba8      	ldr	r3, [pc, #672]	; (800176c <HAL_RCC_OscConfig+0x824>)
 80014ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1e8      	bne.n	80014a8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014d6:	7ffb      	ldrb	r3, [r7, #31]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d105      	bne.n	80014e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014dc:	4ba3      	ldr	r3, [pc, #652]	; (800176c <HAL_RCC_OscConfig+0x824>)
 80014de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e0:	4aa2      	ldr	r2, [pc, #648]	; (800176c <HAL_RCC_OscConfig+0x824>)
 80014e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0320 	and.w	r3, r3, #32
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d03c      	beq.n	800156e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d01c      	beq.n	8001536 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014fc:	4b9b      	ldr	r3, [pc, #620]	; (800176c <HAL_RCC_OscConfig+0x824>)
 80014fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001502:	4a9a      	ldr	r2, [pc, #616]	; (800176c <HAL_RCC_OscConfig+0x824>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150c:	f7ff f9e8 	bl	80008e0 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001514:	f7ff f9e4 	bl	80008e0 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e130      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001526:	4b91      	ldr	r3, [pc, #580]	; (800176c <HAL_RCC_OscConfig+0x824>)
 8001528:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0ef      	beq.n	8001514 <HAL_RCC_OscConfig+0x5cc>
 8001534:	e01b      	b.n	800156e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001536:	4b8d      	ldr	r3, [pc, #564]	; (800176c <HAL_RCC_OscConfig+0x824>)
 8001538:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800153c:	4a8b      	ldr	r2, [pc, #556]	; (800176c <HAL_RCC_OscConfig+0x824>)
 800153e:	f023 0301 	bic.w	r3, r3, #1
 8001542:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001546:	f7ff f9cb 	bl	80008e0 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800154e:	f7ff f9c7 	bl	80008e0 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e113      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001560:	4b82      	ldr	r3, [pc, #520]	; (800176c <HAL_RCC_OscConfig+0x824>)
 8001562:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1ef      	bne.n	800154e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 8107 	beq.w	8001786 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157c:	2b02      	cmp	r3, #2
 800157e:	f040 80cb 	bne.w	8001718 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001582:	4b7a      	ldr	r3, [pc, #488]	; (800176c <HAL_RCC_OscConfig+0x824>)
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f003 0203 	and.w	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	429a      	cmp	r2, r3
 8001594:	d12c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	3b01      	subs	r3, #1
 80015a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d123      	bne.n	80015f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d11b      	bne.n	80015f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d113      	bne.n	80015f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d2:	085b      	lsrs	r3, r3, #1
 80015d4:	3b01      	subs	r3, #1
 80015d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015d8:	429a      	cmp	r2, r3
 80015da:	d109      	bne.n	80015f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	085b      	lsrs	r3, r3, #1
 80015e8:	3b01      	subs	r3, #1
 80015ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d06d      	beq.n	80016cc <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2b0c      	cmp	r3, #12
 80015f4:	d068      	beq.n	80016c8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80015f6:	4b5d      	ldr	r3, [pc, #372]	; (800176c <HAL_RCC_OscConfig+0x824>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d105      	bne.n	800160e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001602:	4b5a      	ldr	r3, [pc, #360]	; (800176c <HAL_RCC_OscConfig+0x824>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0ba      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001612:	4b56      	ldr	r3, [pc, #344]	; (800176c <HAL_RCC_OscConfig+0x824>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a55      	ldr	r2, [pc, #340]	; (800176c <HAL_RCC_OscConfig+0x824>)
 8001618:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800161c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800161e:	f7ff f95f 	bl	80008e0 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001626:	f7ff f95b 	bl	80008e0 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e0a7      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001638:	4b4c      	ldr	r3, [pc, #304]	; (800176c <HAL_RCC_OscConfig+0x824>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f0      	bne.n	8001626 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001644:	4b49      	ldr	r3, [pc, #292]	; (800176c <HAL_RCC_OscConfig+0x824>)
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	4b49      	ldr	r3, [pc, #292]	; (8001770 <HAL_RCC_OscConfig+0x828>)
 800164a:	4013      	ands	r3, r2
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001654:	3a01      	subs	r2, #1
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	4311      	orrs	r1, r2
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800165e:	0212      	lsls	r2, r2, #8
 8001660:	4311      	orrs	r1, r2
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001666:	0852      	lsrs	r2, r2, #1
 8001668:	3a01      	subs	r2, #1
 800166a:	0552      	lsls	r2, r2, #21
 800166c:	4311      	orrs	r1, r2
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001672:	0852      	lsrs	r2, r2, #1
 8001674:	3a01      	subs	r2, #1
 8001676:	0652      	lsls	r2, r2, #25
 8001678:	4311      	orrs	r1, r2
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800167e:	06d2      	lsls	r2, r2, #27
 8001680:	430a      	orrs	r2, r1
 8001682:	493a      	ldr	r1, [pc, #232]	; (800176c <HAL_RCC_OscConfig+0x824>)
 8001684:	4313      	orrs	r3, r2
 8001686:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001688:	4b38      	ldr	r3, [pc, #224]	; (800176c <HAL_RCC_OscConfig+0x824>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a37      	ldr	r2, [pc, #220]	; (800176c <HAL_RCC_OscConfig+0x824>)
 800168e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001692:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001694:	4b35      	ldr	r3, [pc, #212]	; (800176c <HAL_RCC_OscConfig+0x824>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	4a34      	ldr	r2, [pc, #208]	; (800176c <HAL_RCC_OscConfig+0x824>)
 800169a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800169e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016a0:	f7ff f91e 	bl	80008e0 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff f91a 	bl	80008e0 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e066      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ba:	4b2c      	ldr	r3, [pc, #176]	; (800176c <HAL_RCC_OscConfig+0x824>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016c6:	e05e      	b.n	8001786 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e05d      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_RCC_OscConfig+0x824>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d156      	bne.n	8001786 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80016d8:	4b24      	ldr	r3, [pc, #144]	; (800176c <HAL_RCC_OscConfig+0x824>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a23      	ldr	r2, [pc, #140]	; (800176c <HAL_RCC_OscConfig+0x824>)
 80016de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_RCC_OscConfig+0x824>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4a20      	ldr	r2, [pc, #128]	; (800176c <HAL_RCC_OscConfig+0x824>)
 80016ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016f0:	f7ff f8f6 	bl	80008e0 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff f8f2 	bl	80008e0 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e03e      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_RCC_OscConfig+0x824>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x7b0>
 8001716:	e036      	b.n	8001786 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2b0c      	cmp	r3, #12
 800171c:	d031      	beq.n	8001782 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <HAL_RCC_OscConfig+0x824>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a12      	ldr	r2, [pc, #72]	; (800176c <HAL_RCC_OscConfig+0x824>)
 8001724:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001728:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <HAL_RCC_OscConfig+0x824>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d105      	bne.n	8001742 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <HAL_RCC_OscConfig+0x824>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	4a0c      	ldr	r2, [pc, #48]	; (800176c <HAL_RCC_OscConfig+0x824>)
 800173c:	f023 0303 	bic.w	r3, r3, #3
 8001740:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_RCC_OscConfig+0x824>)
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	4a09      	ldr	r2, [pc, #36]	; (800176c <HAL_RCC_OscConfig+0x824>)
 8001748:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800174c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001750:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001752:	f7ff f8c5 	bl	80008e0 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001758:	e00c      	b.n	8001774 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175a:	f7ff f8c1 	bl	80008e0 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d905      	bls.n	8001774 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e00d      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
 800176c:	40021000 	.word	0x40021000
 8001770:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_RCC_OscConfig+0x848>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1ec      	bne.n	800175a <HAL_RCC_OscConfig+0x812>
 8001780:	e001      	b.n	8001786 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000

08001794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0c8      	b.n	800193a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a8:	4b66      	ldr	r3, [pc, #408]	; (8001944 <HAL_RCC_ClockConfig+0x1b0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d910      	bls.n	80017d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b63      	ldr	r3, [pc, #396]	; (8001944 <HAL_RCC_ClockConfig+0x1b0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f023 0207 	bic.w	r2, r3, #7
 80017be:	4961      	ldr	r1, [pc, #388]	; (8001944 <HAL_RCC_ClockConfig+0x1b0>)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	4b5f      	ldr	r3, [pc, #380]	; (8001944 <HAL_RCC_ClockConfig+0x1b0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0b0      	b.n	800193a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d04c      	beq.n	800187e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d107      	bne.n	80017fc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ec:	4b56      	ldr	r3, [pc, #344]	; (8001948 <HAL_RCC_ClockConfig+0x1b4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d121      	bne.n	800183c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e09e      	b.n	800193a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d107      	bne.n	8001814 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001804:	4b50      	ldr	r3, [pc, #320]	; (8001948 <HAL_RCC_ClockConfig+0x1b4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d115      	bne.n	800183c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e092      	b.n	800193a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d107      	bne.n	800182c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800181c:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <HAL_RCC_ClockConfig+0x1b4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d109      	bne.n	800183c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e086      	b.n	800193a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800182c:	4b46      	ldr	r3, [pc, #280]	; (8001948 <HAL_RCC_ClockConfig+0x1b4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e07e      	b.n	800193a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800183c:	4b42      	ldr	r3, [pc, #264]	; (8001948 <HAL_RCC_ClockConfig+0x1b4>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f023 0203 	bic.w	r2, r3, #3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	493f      	ldr	r1, [pc, #252]	; (8001948 <HAL_RCC_ClockConfig+0x1b4>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800184e:	f7ff f847 	bl	80008e0 <HAL_GetTick>
 8001852:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001854:	e00a      	b.n	800186c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001856:	f7ff f843 	bl	80008e0 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	; 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e066      	b.n	800193a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186c:	4b36      	ldr	r3, [pc, #216]	; (8001948 <HAL_RCC_ClockConfig+0x1b4>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 020c 	and.w	r2, r3, #12
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	429a      	cmp	r2, r3
 800187c:	d1eb      	bne.n	8001856 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d008      	beq.n	800189c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188a:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <HAL_RCC_ClockConfig+0x1b4>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	492c      	ldr	r1, [pc, #176]	; (8001948 <HAL_RCC_ClockConfig+0x1b4>)
 8001898:	4313      	orrs	r3, r2
 800189a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800189c:	4b29      	ldr	r3, [pc, #164]	; (8001944 <HAL_RCC_ClockConfig+0x1b0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d210      	bcs.n	80018cc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b26      	ldr	r3, [pc, #152]	; (8001944 <HAL_RCC_ClockConfig+0x1b0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 0207 	bic.w	r2, r3, #7
 80018b2:	4924      	ldr	r1, [pc, #144]	; (8001944 <HAL_RCC_ClockConfig+0x1b0>)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ba:	4b22      	ldr	r3, [pc, #136]	; (8001944 <HAL_RCC_ClockConfig+0x1b0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d001      	beq.n	80018cc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e036      	b.n	800193a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d008      	beq.n	80018ea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_RCC_ClockConfig+0x1b4>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4918      	ldr	r1, [pc, #96]	; (8001948 <HAL_RCC_ClockConfig+0x1b4>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d009      	beq.n	800190a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_RCC_ClockConfig+0x1b4>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4910      	ldr	r1, [pc, #64]	; (8001948 <HAL_RCC_ClockConfig+0x1b4>)
 8001906:	4313      	orrs	r3, r2
 8001908:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800190a:	f000 f825 	bl	8001958 <HAL_RCC_GetSysClockFreq>
 800190e:	4602      	mov	r2, r0
 8001910:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_RCC_ClockConfig+0x1b4>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	490c      	ldr	r1, [pc, #48]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 800191c:	5ccb      	ldrb	r3, [r1, r3]
 800191e:	f003 031f 	and.w	r3, r3, #31
 8001922:	fa22 f303 	lsr.w	r3, r2, r3
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe ff86 	bl	8000840 <HAL_InitTick>
 8001934:	4603      	mov	r3, r0
 8001936:	72fb      	strb	r3, [r7, #11]

  return status;
 8001938:	7afb      	ldrb	r3, [r7, #11]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40022000 	.word	0x40022000
 8001948:	40021000 	.word	0x40021000
 800194c:	08002c38 	.word	0x08002c38
 8001950:	20000000 	.word	0x20000000
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001966:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001970:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x34>
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d121      	bne.n	80019ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d11e      	bne.n	80019ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800198c:	4b34      	ldr	r3, [pc, #208]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b00      	cmp	r3, #0
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001998:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	e005      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019a8:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019b4:	4a2b      	ldr	r2, [pc, #172]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10d      	bne.n	80019e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019c8:	e00a      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d102      	bne.n	80019d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019d0:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x110>)
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	e004      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019dc:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x114>)
 80019de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	2b0c      	cmp	r3, #12
 80019e4:	d134      	bne.n	8001a50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019e6:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d003      	beq.n	80019fe <HAL_RCC_GetSysClockFreq+0xa6>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d003      	beq.n	8001a04 <HAL_RCC_GetSysClockFreq+0xac>
 80019fc:	e005      	b.n	8001a0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a00:	617b      	str	r3, [r7, #20]
      break;
 8001a02:	e005      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x114>)
 8001a06:	617b      	str	r3, [r7, #20]
      break;
 8001a08:	e002      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	617b      	str	r3, [r7, #20]
      break;
 8001a0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	091b      	lsrs	r3, r3, #4
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	fb02 f203 	mul.w	r2, r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	0e5b      	lsrs	r3, r3, #25
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	3301      	adds	r3, #1
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a50:	69bb      	ldr	r3, [r7, #24]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	; 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000
 8001a64:	08002c48 	.word	0x08002c48
 8001a68:	00f42400 	.word	0x00f42400
 8001a6c:	007a1200 	.word	0x007a1200

08001a70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a7c:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a88:	f7ff f9ea 	bl	8000e60 <HAL_PWREx_GetVoltageRange>
 8001a8c:	6178      	str	r0, [r7, #20]
 8001a8e:	e014      	b.n	8001aba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a90:	4b25      	ldr	r3, [pc, #148]	; (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	4a24      	ldr	r2, [pc, #144]	; (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a9c:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001aa8:	f7ff f9da 	bl	8000e60 <HAL_PWREx_GetVoltageRange>
 8001aac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001aae:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	4a1d      	ldr	r2, [pc, #116]	; (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ac0:	d10b      	bne.n	8001ada <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b80      	cmp	r3, #128	; 0x80
 8001ac6:	d919      	bls.n	8001afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2ba0      	cmp	r3, #160	; 0xa0
 8001acc:	d902      	bls.n	8001ad4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ace:	2302      	movs	r3, #2
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	e013      	b.n	8001afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	e010      	b.n	8001afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b80      	cmp	r3, #128	; 0x80
 8001ade:	d902      	bls.n	8001ae6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	e00a      	b.n	8001afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b80      	cmp	r3, #128	; 0x80
 8001aea:	d102      	bne.n	8001af2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001aec:	2302      	movs	r3, #2
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	e004      	b.n	8001afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b70      	cmp	r3, #112	; 0x70
 8001af6:	d101      	bne.n	8001afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001af8:	2301      	movs	r3, #1
 8001afa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 0207 	bic.w	r2, r3, #7
 8001b04:	4909      	ldr	r1, [pc, #36]	; (8001b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d001      	beq.n	8001b1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40022000 	.word	0x40022000

08001b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e049      	b.n	8001bd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7fe fd82 	bl	8000660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f000 fb72 	bl	8002258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e049      	b.n	8001c84 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d106      	bne.n	8001c0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f841 	bl	8001c8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	f000 fb1b 	bl	8002258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d109      	bne.n	8001cc4 <HAL_TIM_PWM_Start+0x24>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	bf14      	ite	ne
 8001cbc:	2301      	movne	r3, #1
 8001cbe:	2300      	moveq	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	e03c      	b.n	8001d3e <HAL_TIM_PWM_Start+0x9e>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d109      	bne.n	8001cde <HAL_TIM_PWM_Start+0x3e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	bf14      	ite	ne
 8001cd6:	2301      	movne	r3, #1
 8001cd8:	2300      	moveq	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	e02f      	b.n	8001d3e <HAL_TIM_PWM_Start+0x9e>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d109      	bne.n	8001cf8 <HAL_TIM_PWM_Start+0x58>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	bf14      	ite	ne
 8001cf0:	2301      	movne	r3, #1
 8001cf2:	2300      	moveq	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	e022      	b.n	8001d3e <HAL_TIM_PWM_Start+0x9e>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d109      	bne.n	8001d12 <HAL_TIM_PWM_Start+0x72>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	bf14      	ite	ne
 8001d0a:	2301      	movne	r3, #1
 8001d0c:	2300      	moveq	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	e015      	b.n	8001d3e <HAL_TIM_PWM_Start+0x9e>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b10      	cmp	r3, #16
 8001d16:	d109      	bne.n	8001d2c <HAL_TIM_PWM_Start+0x8c>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	bf14      	ite	ne
 8001d24:	2301      	movne	r3, #1
 8001d26:	2300      	moveq	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	e008      	b.n	8001d3e <HAL_TIM_PWM_Start+0x9e>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	bf14      	ite	ne
 8001d38:	2301      	movne	r3, #1
 8001d3a:	2300      	moveq	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e09c      	b.n	8001e80 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d104      	bne.n	8001d56 <HAL_TIM_PWM_Start+0xb6>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d54:	e023      	b.n	8001d9e <HAL_TIM_PWM_Start+0xfe>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d104      	bne.n	8001d66 <HAL_TIM_PWM_Start+0xc6>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d64:	e01b      	b.n	8001d9e <HAL_TIM_PWM_Start+0xfe>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d104      	bne.n	8001d76 <HAL_TIM_PWM_Start+0xd6>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d74:	e013      	b.n	8001d9e <HAL_TIM_PWM_Start+0xfe>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b0c      	cmp	r3, #12
 8001d7a:	d104      	bne.n	8001d86 <HAL_TIM_PWM_Start+0xe6>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d84:	e00b      	b.n	8001d9e <HAL_TIM_PWM_Start+0xfe>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b10      	cmp	r3, #16
 8001d8a:	d104      	bne.n	8001d96 <HAL_TIM_PWM_Start+0xf6>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d94:	e003      	b.n	8001d9e <HAL_TIM_PWM_Start+0xfe>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2202      	movs	r2, #2
 8001d9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2201      	movs	r2, #1
 8001da4:	6839      	ldr	r1, [r7, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 fe60 	bl	8002a6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a35      	ldr	r2, [pc, #212]	; (8001e88 <HAL_TIM_PWM_Start+0x1e8>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d013      	beq.n	8001dde <HAL_TIM_PWM_Start+0x13e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a34      	ldr	r2, [pc, #208]	; (8001e8c <HAL_TIM_PWM_Start+0x1ec>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d00e      	beq.n	8001dde <HAL_TIM_PWM_Start+0x13e>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a32      	ldr	r2, [pc, #200]	; (8001e90 <HAL_TIM_PWM_Start+0x1f0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d009      	beq.n	8001dde <HAL_TIM_PWM_Start+0x13e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a31      	ldr	r2, [pc, #196]	; (8001e94 <HAL_TIM_PWM_Start+0x1f4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d004      	beq.n	8001dde <HAL_TIM_PWM_Start+0x13e>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a2f      	ldr	r2, [pc, #188]	; (8001e98 <HAL_TIM_PWM_Start+0x1f8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_TIM_PWM_Start+0x142>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_TIM_PWM_Start+0x144>
 8001de2:	2300      	movs	r3, #0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001df6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a22      	ldr	r2, [pc, #136]	; (8001e88 <HAL_TIM_PWM_Start+0x1e8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01d      	beq.n	8001e3e <HAL_TIM_PWM_Start+0x19e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0a:	d018      	beq.n	8001e3e <HAL_TIM_PWM_Start+0x19e>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a22      	ldr	r2, [pc, #136]	; (8001e9c <HAL_TIM_PWM_Start+0x1fc>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_TIM_PWM_Start+0x19e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a21      	ldr	r2, [pc, #132]	; (8001ea0 <HAL_TIM_PWM_Start+0x200>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d00e      	beq.n	8001e3e <HAL_TIM_PWM_Start+0x19e>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a1f      	ldr	r2, [pc, #124]	; (8001ea4 <HAL_TIM_PWM_Start+0x204>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d009      	beq.n	8001e3e <HAL_TIM_PWM_Start+0x19e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a17      	ldr	r2, [pc, #92]	; (8001e8c <HAL_TIM_PWM_Start+0x1ec>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d004      	beq.n	8001e3e <HAL_TIM_PWM_Start+0x19e>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a15      	ldr	r2, [pc, #84]	; (8001e90 <HAL_TIM_PWM_Start+0x1f0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d115      	bne.n	8001e6a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <HAL_TIM_PWM_Start+0x208>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b06      	cmp	r3, #6
 8001e4e:	d015      	beq.n	8001e7c <HAL_TIM_PWM_Start+0x1dc>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e56:	d011      	beq.n	8001e7c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e68:	e008      	b.n	8001e7c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	e000      	b.n	8001e7e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40012c00 	.word	0x40012c00
 8001e8c:	40013400 	.word	0x40013400
 8001e90:	40014000 	.word	0x40014000
 8001e94:	40014400 	.word	0x40014400
 8001e98:	40014800 	.word	0x40014800
 8001e9c:	40000400 	.word	0x40000400
 8001ea0:	40000800 	.word	0x40000800
 8001ea4:	40000c00 	.word	0x40000c00
 8001ea8:	00010007 	.word	0x00010007

08001eac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e0fd      	b.n	80020c2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b14      	cmp	r3, #20
 8001ed2:	f200 80f0 	bhi.w	80020b6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8001ed6:	a201      	add	r2, pc, #4	; (adr r2, 8001edc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001edc:	08001f31 	.word	0x08001f31
 8001ee0:	080020b7 	.word	0x080020b7
 8001ee4:	080020b7 	.word	0x080020b7
 8001ee8:	080020b7 	.word	0x080020b7
 8001eec:	08001f71 	.word	0x08001f71
 8001ef0:	080020b7 	.word	0x080020b7
 8001ef4:	080020b7 	.word	0x080020b7
 8001ef8:	080020b7 	.word	0x080020b7
 8001efc:	08001fb3 	.word	0x08001fb3
 8001f00:	080020b7 	.word	0x080020b7
 8001f04:	080020b7 	.word	0x080020b7
 8001f08:	080020b7 	.word	0x080020b7
 8001f0c:	08001ff3 	.word	0x08001ff3
 8001f10:	080020b7 	.word	0x080020b7
 8001f14:	080020b7 	.word	0x080020b7
 8001f18:	080020b7 	.word	0x080020b7
 8001f1c:	08002035 	.word	0x08002035
 8001f20:	080020b7 	.word	0x080020b7
 8001f24:	080020b7 	.word	0x080020b7
 8001f28:	080020b7 	.word	0x080020b7
 8001f2c:	08002075 	.word	0x08002075
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fa28 	bl	800238c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699a      	ldr	r2, [r3, #24]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0208 	orr.w	r2, r2, #8
 8001f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0204 	bic.w	r2, r2, #4
 8001f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6999      	ldr	r1, [r3, #24]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	619a      	str	r2, [r3, #24]
      break;
 8001f6e:	e0a3      	b.n	80020b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fa98 	bl	80024ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699a      	ldr	r2, [r3, #24]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699a      	ldr	r2, [r3, #24]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6999      	ldr	r1, [r3, #24]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	021a      	lsls	r2, r3, #8
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	619a      	str	r2, [r3, #24]
      break;
 8001fb0:	e082      	b.n	80020b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 fb01 	bl	80025c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	69da      	ldr	r2, [r3, #28]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0208 	orr.w	r2, r2, #8
 8001fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	69da      	ldr	r2, [r3, #28]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0204 	bic.w	r2, r2, #4
 8001fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	69d9      	ldr	r1, [r3, #28]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	61da      	str	r2, [r3, #28]
      break;
 8001ff0:	e062      	b.n	80020b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68b9      	ldr	r1, [r7, #8]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fb69 	bl	80026d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	69da      	ldr	r2, [r3, #28]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800200c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	69da      	ldr	r2, [r3, #28]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800201c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	69d9      	ldr	r1, [r3, #28]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	021a      	lsls	r2, r3, #8
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	61da      	str	r2, [r3, #28]
      break;
 8002032:	e041      	b.n	80020b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fbb2 	bl	80027a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0208 	orr.w	r2, r2, #8
 800204e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0204 	bic.w	r2, r2, #4
 800205e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002072:	e021      	b.n	80020b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fbf6 	bl	800286c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800208e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800209e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	021a      	lsls	r2, r3, #8
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80020b4:	e000      	b.n	80020b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80020b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop

080020cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_TIM_ConfigClockSource+0x18>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e0b5      	b.n	8002250 <HAL_TIM_ConfigClockSource+0x184>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002102:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002106:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800210e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002120:	d03e      	beq.n	80021a0 <HAL_TIM_ConfigClockSource+0xd4>
 8002122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002126:	f200 8087 	bhi.w	8002238 <HAL_TIM_ConfigClockSource+0x16c>
 800212a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800212e:	f000 8085 	beq.w	800223c <HAL_TIM_ConfigClockSource+0x170>
 8002132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002136:	d87f      	bhi.n	8002238 <HAL_TIM_ConfigClockSource+0x16c>
 8002138:	2b70      	cmp	r3, #112	; 0x70
 800213a:	d01a      	beq.n	8002172 <HAL_TIM_ConfigClockSource+0xa6>
 800213c:	2b70      	cmp	r3, #112	; 0x70
 800213e:	d87b      	bhi.n	8002238 <HAL_TIM_ConfigClockSource+0x16c>
 8002140:	2b60      	cmp	r3, #96	; 0x60
 8002142:	d050      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0x11a>
 8002144:	2b60      	cmp	r3, #96	; 0x60
 8002146:	d877      	bhi.n	8002238 <HAL_TIM_ConfigClockSource+0x16c>
 8002148:	2b50      	cmp	r3, #80	; 0x50
 800214a:	d03c      	beq.n	80021c6 <HAL_TIM_ConfigClockSource+0xfa>
 800214c:	2b50      	cmp	r3, #80	; 0x50
 800214e:	d873      	bhi.n	8002238 <HAL_TIM_ConfigClockSource+0x16c>
 8002150:	2b40      	cmp	r3, #64	; 0x40
 8002152:	d058      	beq.n	8002206 <HAL_TIM_ConfigClockSource+0x13a>
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d86f      	bhi.n	8002238 <HAL_TIM_ConfigClockSource+0x16c>
 8002158:	2b30      	cmp	r3, #48	; 0x30
 800215a:	d064      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0x15a>
 800215c:	2b30      	cmp	r3, #48	; 0x30
 800215e:	d86b      	bhi.n	8002238 <HAL_TIM_ConfigClockSource+0x16c>
 8002160:	2b20      	cmp	r3, #32
 8002162:	d060      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0x15a>
 8002164:	2b20      	cmp	r3, #32
 8002166:	d867      	bhi.n	8002238 <HAL_TIM_ConfigClockSource+0x16c>
 8002168:	2b00      	cmp	r3, #0
 800216a:	d05c      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0x15a>
 800216c:	2b10      	cmp	r3, #16
 800216e:	d05a      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002170:	e062      	b.n	8002238 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6899      	ldr	r1, [r3, #8]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f000 fc53 	bl	8002a2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002194:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	609a      	str	r2, [r3, #8]
      break;
 800219e:	e04e      	b.n	800223e <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6899      	ldr	r1, [r3, #8]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f000 fc3c 	bl	8002a2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021c2:	609a      	str	r2, [r3, #8]
      break;
 80021c4:	e03b      	b.n	800223e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6859      	ldr	r1, [r3, #4]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	461a      	mov	r2, r3
 80021d4:	f000 fbb0 	bl	8002938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2150      	movs	r1, #80	; 0x50
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fc09 	bl	80029f6 <TIM_ITRx_SetConfig>
      break;
 80021e4:	e02b      	b.n	800223e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6859      	ldr	r1, [r3, #4]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f000 fbcf 	bl	8002996 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2160      	movs	r1, #96	; 0x60
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fbf9 	bl	80029f6 <TIM_ITRx_SetConfig>
      break;
 8002204:	e01b      	b.n	800223e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	461a      	mov	r2, r3
 8002214:	f000 fb90 	bl	8002938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2140      	movs	r1, #64	; 0x40
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fbe9 	bl	80029f6 <TIM_ITRx_SetConfig>
      break;
 8002224:	e00b      	b.n	800223e <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4619      	mov	r1, r3
 8002230:	4610      	mov	r0, r2
 8002232:	f000 fbe0 	bl	80029f6 <TIM_ITRx_SetConfig>
        break;
 8002236:	e002      	b.n	800223e <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002238:	bf00      	nop
 800223a:	e000      	b.n	800223e <HAL_TIM_ConfigClockSource+0x172>
      break;
 800223c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a40      	ldr	r2, [pc, #256]	; (800236c <TIM_Base_SetConfig+0x114>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d013      	beq.n	8002298 <TIM_Base_SetConfig+0x40>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002276:	d00f      	beq.n	8002298 <TIM_Base_SetConfig+0x40>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a3d      	ldr	r2, [pc, #244]	; (8002370 <TIM_Base_SetConfig+0x118>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d00b      	beq.n	8002298 <TIM_Base_SetConfig+0x40>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a3c      	ldr	r2, [pc, #240]	; (8002374 <TIM_Base_SetConfig+0x11c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d007      	beq.n	8002298 <TIM_Base_SetConfig+0x40>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a3b      	ldr	r2, [pc, #236]	; (8002378 <TIM_Base_SetConfig+0x120>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d003      	beq.n	8002298 <TIM_Base_SetConfig+0x40>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a3a      	ldr	r2, [pc, #232]	; (800237c <TIM_Base_SetConfig+0x124>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d108      	bne.n	80022aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800229e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a2f      	ldr	r2, [pc, #188]	; (800236c <TIM_Base_SetConfig+0x114>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d01f      	beq.n	80022f2 <TIM_Base_SetConfig+0x9a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b8:	d01b      	beq.n	80022f2 <TIM_Base_SetConfig+0x9a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a2c      	ldr	r2, [pc, #176]	; (8002370 <TIM_Base_SetConfig+0x118>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d017      	beq.n	80022f2 <TIM_Base_SetConfig+0x9a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a2b      	ldr	r2, [pc, #172]	; (8002374 <TIM_Base_SetConfig+0x11c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <TIM_Base_SetConfig+0x9a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a2a      	ldr	r2, [pc, #168]	; (8002378 <TIM_Base_SetConfig+0x120>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00f      	beq.n	80022f2 <TIM_Base_SetConfig+0x9a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a29      	ldr	r2, [pc, #164]	; (800237c <TIM_Base_SetConfig+0x124>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00b      	beq.n	80022f2 <TIM_Base_SetConfig+0x9a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a28      	ldr	r2, [pc, #160]	; (8002380 <TIM_Base_SetConfig+0x128>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d007      	beq.n	80022f2 <TIM_Base_SetConfig+0x9a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a27      	ldr	r2, [pc, #156]	; (8002384 <TIM_Base_SetConfig+0x12c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d003      	beq.n	80022f2 <TIM_Base_SetConfig+0x9a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a26      	ldr	r2, [pc, #152]	; (8002388 <TIM_Base_SetConfig+0x130>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d108      	bne.n	8002304 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4313      	orrs	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a10      	ldr	r2, [pc, #64]	; (800236c <TIM_Base_SetConfig+0x114>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d00f      	beq.n	8002350 <TIM_Base_SetConfig+0xf8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a12      	ldr	r2, [pc, #72]	; (800237c <TIM_Base_SetConfig+0x124>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d00b      	beq.n	8002350 <TIM_Base_SetConfig+0xf8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a11      	ldr	r2, [pc, #68]	; (8002380 <TIM_Base_SetConfig+0x128>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d007      	beq.n	8002350 <TIM_Base_SetConfig+0xf8>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a10      	ldr	r2, [pc, #64]	; (8002384 <TIM_Base_SetConfig+0x12c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d003      	beq.n	8002350 <TIM_Base_SetConfig+0xf8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a0f      	ldr	r2, [pc, #60]	; (8002388 <TIM_Base_SetConfig+0x130>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d103      	bne.n	8002358 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	615a      	str	r2, [r3, #20]
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40012c00 	.word	0x40012c00
 8002370:	40000400 	.word	0x40000400
 8002374:	40000800 	.word	0x40000800
 8002378:	40000c00 	.word	0x40000c00
 800237c:	40013400 	.word	0x40013400
 8002380:	40014000 	.word	0x40014000
 8002384:	40014400 	.word	0x40014400
 8002388:	40014800 	.word	0x40014800

0800238c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	f023 0201 	bic.w	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f023 0303 	bic.w	r3, r3, #3
 80023c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f023 0302 	bic.w	r3, r3, #2
 80023d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a2c      	ldr	r2, [pc, #176]	; (8002498 <TIM_OC1_SetConfig+0x10c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d00f      	beq.n	800240c <TIM_OC1_SetConfig+0x80>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a2b      	ldr	r2, [pc, #172]	; (800249c <TIM_OC1_SetConfig+0x110>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d00b      	beq.n	800240c <TIM_OC1_SetConfig+0x80>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a2a      	ldr	r2, [pc, #168]	; (80024a0 <TIM_OC1_SetConfig+0x114>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d007      	beq.n	800240c <TIM_OC1_SetConfig+0x80>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a29      	ldr	r2, [pc, #164]	; (80024a4 <TIM_OC1_SetConfig+0x118>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d003      	beq.n	800240c <TIM_OC1_SetConfig+0x80>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a28      	ldr	r2, [pc, #160]	; (80024a8 <TIM_OC1_SetConfig+0x11c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d10c      	bne.n	8002426 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f023 0308 	bic.w	r3, r3, #8
 8002412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	4313      	orrs	r3, r2
 800241c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a1b      	ldr	r2, [pc, #108]	; (8002498 <TIM_OC1_SetConfig+0x10c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00f      	beq.n	800244e <TIM_OC1_SetConfig+0xc2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a1a      	ldr	r2, [pc, #104]	; (800249c <TIM_OC1_SetConfig+0x110>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00b      	beq.n	800244e <TIM_OC1_SetConfig+0xc2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a19      	ldr	r2, [pc, #100]	; (80024a0 <TIM_OC1_SetConfig+0x114>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d007      	beq.n	800244e <TIM_OC1_SetConfig+0xc2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a18      	ldr	r2, [pc, #96]	; (80024a4 <TIM_OC1_SetConfig+0x118>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d003      	beq.n	800244e <TIM_OC1_SetConfig+0xc2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a17      	ldr	r2, [pc, #92]	; (80024a8 <TIM_OC1_SetConfig+0x11c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d111      	bne.n	8002472 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800245c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	621a      	str	r2, [r3, #32]
}
 800248c:	bf00      	nop
 800248e:	371c      	adds	r7, #28
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40012c00 	.word	0x40012c00
 800249c:	40013400 	.word	0x40013400
 80024a0:	40014000 	.word	0x40014000
 80024a4:	40014400 	.word	0x40014400
 80024a8:	40014800 	.word	0x40014800

080024ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	f023 0210 	bic.w	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f023 0320 	bic.w	r3, r3, #32
 80024fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a28      	ldr	r2, [pc, #160]	; (80025ac <TIM_OC2_SetConfig+0x100>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d003      	beq.n	8002518 <TIM_OC2_SetConfig+0x6c>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a27      	ldr	r2, [pc, #156]	; (80025b0 <TIM_OC2_SetConfig+0x104>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d10d      	bne.n	8002534 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800251e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002532:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <TIM_OC2_SetConfig+0x100>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d00f      	beq.n	800255c <TIM_OC2_SetConfig+0xb0>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a1c      	ldr	r2, [pc, #112]	; (80025b0 <TIM_OC2_SetConfig+0x104>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d00b      	beq.n	800255c <TIM_OC2_SetConfig+0xb0>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a1b      	ldr	r2, [pc, #108]	; (80025b4 <TIM_OC2_SetConfig+0x108>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d007      	beq.n	800255c <TIM_OC2_SetConfig+0xb0>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a1a      	ldr	r2, [pc, #104]	; (80025b8 <TIM_OC2_SetConfig+0x10c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d003      	beq.n	800255c <TIM_OC2_SetConfig+0xb0>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a19      	ldr	r2, [pc, #100]	; (80025bc <TIM_OC2_SetConfig+0x110>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d113      	bne.n	8002584 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002562:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800256a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	621a      	str	r2, [r3, #32]
}
 800259e:	bf00      	nop
 80025a0:	371c      	adds	r7, #28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40012c00 	.word	0x40012c00
 80025b0:	40013400 	.word	0x40013400
 80025b4:	40014000 	.word	0x40014000
 80025b8:	40014400 	.word	0x40014400
 80025bc:	40014800 	.word	0x40014800

080025c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f023 0303 	bic.w	r3, r3, #3
 80025fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800260c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a27      	ldr	r2, [pc, #156]	; (80026bc <TIM_OC3_SetConfig+0xfc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d003      	beq.n	800262a <TIM_OC3_SetConfig+0x6a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a26      	ldr	r2, [pc, #152]	; (80026c0 <TIM_OC3_SetConfig+0x100>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d10d      	bne.n	8002646 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4313      	orrs	r3, r2
 800263c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <TIM_OC3_SetConfig+0xfc>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00f      	beq.n	800266e <TIM_OC3_SetConfig+0xae>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a1b      	ldr	r2, [pc, #108]	; (80026c0 <TIM_OC3_SetConfig+0x100>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00b      	beq.n	800266e <TIM_OC3_SetConfig+0xae>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a1a      	ldr	r2, [pc, #104]	; (80026c4 <TIM_OC3_SetConfig+0x104>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d007      	beq.n	800266e <TIM_OC3_SetConfig+0xae>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a19      	ldr	r2, [pc, #100]	; (80026c8 <TIM_OC3_SetConfig+0x108>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d003      	beq.n	800266e <TIM_OC3_SetConfig+0xae>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a18      	ldr	r2, [pc, #96]	; (80026cc <TIM_OC3_SetConfig+0x10c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d113      	bne.n	8002696 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800267c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	621a      	str	r2, [r3, #32]
}
 80026b0:	bf00      	nop
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40012c00 	.word	0x40012c00
 80026c0:	40013400 	.word	0x40013400
 80026c4:	40014000 	.word	0x40014000
 80026c8:	40014400 	.word	0x40014400
 80026cc:	40014800 	.word	0x40014800

080026d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800271e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	031b      	lsls	r3, r3, #12
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a18      	ldr	r2, [pc, #96]	; (8002790 <TIM_OC4_SetConfig+0xc0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00f      	beq.n	8002754 <TIM_OC4_SetConfig+0x84>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a17      	ldr	r2, [pc, #92]	; (8002794 <TIM_OC4_SetConfig+0xc4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d00b      	beq.n	8002754 <TIM_OC4_SetConfig+0x84>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a16      	ldr	r2, [pc, #88]	; (8002798 <TIM_OC4_SetConfig+0xc8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d007      	beq.n	8002754 <TIM_OC4_SetConfig+0x84>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a15      	ldr	r2, [pc, #84]	; (800279c <TIM_OC4_SetConfig+0xcc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d003      	beq.n	8002754 <TIM_OC4_SetConfig+0x84>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <TIM_OC4_SetConfig+0xd0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d109      	bne.n	8002768 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800275a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	019b      	lsls	r3, r3, #6
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	4313      	orrs	r3, r2
 8002766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	621a      	str	r2, [r3, #32]
}
 8002782:	bf00      	nop
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40012c00 	.word	0x40012c00
 8002794:	40013400 	.word	0x40013400
 8002798:	40014000 	.word	0x40014000
 800279c:	40014400 	.word	0x40014400
 80027a0:	40014800 	.word	0x40014800

080027a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80027e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	041b      	lsls	r3, r3, #16
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a17      	ldr	r2, [pc, #92]	; (8002858 <TIM_OC5_SetConfig+0xb4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00f      	beq.n	800281e <TIM_OC5_SetConfig+0x7a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a16      	ldr	r2, [pc, #88]	; (800285c <TIM_OC5_SetConfig+0xb8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00b      	beq.n	800281e <TIM_OC5_SetConfig+0x7a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a15      	ldr	r2, [pc, #84]	; (8002860 <TIM_OC5_SetConfig+0xbc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d007      	beq.n	800281e <TIM_OC5_SetConfig+0x7a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a14      	ldr	r2, [pc, #80]	; (8002864 <TIM_OC5_SetConfig+0xc0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d003      	beq.n	800281e <TIM_OC5_SetConfig+0x7a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a13      	ldr	r2, [pc, #76]	; (8002868 <TIM_OC5_SetConfig+0xc4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d109      	bne.n	8002832 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002824:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	021b      	lsls	r3, r3, #8
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	621a      	str	r2, [r3, #32]
}
 800284c:	bf00      	nop
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	40012c00 	.word	0x40012c00
 800285c:	40013400 	.word	0x40013400
 8002860:	40014000 	.word	0x40014000
 8002864:	40014400 	.word	0x40014400
 8002868:	40014800 	.word	0x40014800

0800286c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800289a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800289e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	051b      	lsls	r3, r3, #20
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a18      	ldr	r2, [pc, #96]	; (8002924 <TIM_OC6_SetConfig+0xb8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00f      	beq.n	80028e8 <TIM_OC6_SetConfig+0x7c>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a17      	ldr	r2, [pc, #92]	; (8002928 <TIM_OC6_SetConfig+0xbc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00b      	beq.n	80028e8 <TIM_OC6_SetConfig+0x7c>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a16      	ldr	r2, [pc, #88]	; (800292c <TIM_OC6_SetConfig+0xc0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d007      	beq.n	80028e8 <TIM_OC6_SetConfig+0x7c>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a15      	ldr	r2, [pc, #84]	; (8002930 <TIM_OC6_SetConfig+0xc4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d003      	beq.n	80028e8 <TIM_OC6_SetConfig+0x7c>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a14      	ldr	r2, [pc, #80]	; (8002934 <TIM_OC6_SetConfig+0xc8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d109      	bne.n	80028fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	029b      	lsls	r3, r3, #10
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	621a      	str	r2, [r3, #32]
}
 8002916:	bf00      	nop
 8002918:	371c      	adds	r7, #28
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40012c00 	.word	0x40012c00
 8002928:	40013400 	.word	0x40013400
 800292c:	40014000 	.word	0x40014000
 8002930:	40014400 	.word	0x40014400
 8002934:	40014800 	.word	0x40014800

08002938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	f023 0201 	bic.w	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f023 030a 	bic.w	r3, r3, #10
 8002974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4313      	orrs	r3, r2
 800297c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	621a      	str	r2, [r3, #32]
}
 800298a:	bf00      	nop
 800298c:	371c      	adds	r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002996:	b480      	push	{r7}
 8002998:	b087      	sub	sp, #28
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	f023 0210 	bic.w	r2, r3, #16
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	031b      	lsls	r3, r3, #12
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	621a      	str	r2, [r3, #32]
}
 80029ea:	bf00      	nop
 80029ec:	371c      	adds	r7, #28
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b085      	sub	sp, #20
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f043 0307 	orr.w	r3, r3, #7
 8002a18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	609a      	str	r2, [r3, #8]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	021a      	lsls	r2, r3, #8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	609a      	str	r2, [r3, #8]
}
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	2201      	movs	r2, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a1a      	ldr	r2, [r3, #32]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	401a      	ands	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a1a      	ldr	r2, [r3, #32]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f003 031f 	and.w	r3, r3, #31
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	621a      	str	r2, [r3, #32]
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e068      	b.n	8002ba2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a2e      	ldr	r2, [pc, #184]	; (8002bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d004      	beq.n	8002b04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2d      	ldr	r2, [pc, #180]	; (8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d108      	bne.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002b0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1e      	ldr	r2, [pc, #120]	; (8002bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d01d      	beq.n	8002b76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b42:	d018      	beq.n	8002b76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a1b      	ldr	r2, [pc, #108]	; (8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d013      	beq.n	8002b76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1a      	ldr	r2, [pc, #104]	; (8002bbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d00e      	beq.n	8002b76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a18      	ldr	r2, [pc, #96]	; (8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d009      	beq.n	8002b76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d004      	beq.n	8002b76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d10c      	bne.n	8002b90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40012c00 	.word	0x40012c00
 8002bb4:	40013400 	.word	0x40013400
 8002bb8:	40000400 	.word	0x40000400
 8002bbc:	40000800 	.word	0x40000800
 8002bc0:	40000c00 	.word	0x40000c00
 8002bc4:	40014000 	.word	0x40014000

08002bc8 <__libc_init_array>:
 8002bc8:	b570      	push	{r4, r5, r6, lr}
 8002bca:	4d0d      	ldr	r5, [pc, #52]	; (8002c00 <__libc_init_array+0x38>)
 8002bcc:	4c0d      	ldr	r4, [pc, #52]	; (8002c04 <__libc_init_array+0x3c>)
 8002bce:	1b64      	subs	r4, r4, r5
 8002bd0:	10a4      	asrs	r4, r4, #2
 8002bd2:	2600      	movs	r6, #0
 8002bd4:	42a6      	cmp	r6, r4
 8002bd6:	d109      	bne.n	8002bec <__libc_init_array+0x24>
 8002bd8:	4d0b      	ldr	r5, [pc, #44]	; (8002c08 <__libc_init_array+0x40>)
 8002bda:	4c0c      	ldr	r4, [pc, #48]	; (8002c0c <__libc_init_array+0x44>)
 8002bdc:	f000 f820 	bl	8002c20 <_init>
 8002be0:	1b64      	subs	r4, r4, r5
 8002be2:	10a4      	asrs	r4, r4, #2
 8002be4:	2600      	movs	r6, #0
 8002be6:	42a6      	cmp	r6, r4
 8002be8:	d105      	bne.n	8002bf6 <__libc_init_array+0x2e>
 8002bea:	bd70      	pop	{r4, r5, r6, pc}
 8002bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf0:	4798      	blx	r3
 8002bf2:	3601      	adds	r6, #1
 8002bf4:	e7ee      	b.n	8002bd4 <__libc_init_array+0xc>
 8002bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bfa:	4798      	blx	r3
 8002bfc:	3601      	adds	r6, #1
 8002bfe:	e7f2      	b.n	8002be6 <__libc_init_array+0x1e>
 8002c00:	08002c78 	.word	0x08002c78
 8002c04:	08002c78 	.word	0x08002c78
 8002c08:	08002c78 	.word	0x08002c78
 8002c0c:	08002c7c 	.word	0x08002c7c

08002c10 <memset>:
 8002c10:	4402      	add	r2, r0
 8002c12:	4603      	mov	r3, r0
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d100      	bne.n	8002c1a <memset+0xa>
 8002c18:	4770      	bx	lr
 8002c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c1e:	e7f9      	b.n	8002c14 <memset+0x4>

08002c20 <_init>:
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c22:	bf00      	nop
 8002c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c26:	bc08      	pop	{r3}
 8002c28:	469e      	mov	lr, r3
 8002c2a:	4770      	bx	lr

08002c2c <_fini>:
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2e:	bf00      	nop
 8002c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c32:	bc08      	pop	{r3}
 8002c34:	469e      	mov	lr, r3
 8002c36:	4770      	bx	lr
