
i2c-eeprom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fc8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003174  08003174  00013174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b4  080031b4  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  080031b4  080031b4  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031b4  080031b4  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031b8  080031b8  000131b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  080031bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000004c  08003208  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003208  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c909  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b4b  00000000  00000000  0002c985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002e4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  0002ee80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e43  00000000  00000000  0002f758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b553  00000000  00000000  0005759b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f329a  00000000  00000000  00062aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155d88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000265c  00000000  00000000  00155ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000004c 	.word	0x2000004c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800315c 	.word	0x0800315c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000050 	.word	0x20000050
 80001e8:	0800315c 	.word	0x0800315c

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <bytes_to_write>:

#define EEPROM_PAGE_SIZE 64 // page size in bytes
#define EEPROM_PAGE_NUM 512 // number of pages

uint16_t bytes_to_write(uint16_t size, uint16_t offset)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	460a      	mov	r2, r1
 8000206:	80fb      	strh	r3, [r7, #6]
 8000208:	4613      	mov	r3, r2
 800020a:	80bb      	strh	r3, [r7, #4]
    if (size + offset < EEPROM_PAGE_SIZE) return size;
 800020c:	88fa      	ldrh	r2, [r7, #6]
 800020e:	88bb      	ldrh	r3, [r7, #4]
 8000210:	4413      	add	r3, r2
 8000212:	2b3f      	cmp	r3, #63	; 0x3f
 8000214:	dc01      	bgt.n	800021a <bytes_to_write+0x1e>
 8000216:	88fb      	ldrh	r3, [r7, #6]
 8000218:	e003      	b.n	8000222 <bytes_to_write+0x26>
    else return EEPROM_PAGE_SIZE - offset;
 800021a:	88bb      	ldrh	r3, [r7, #4]
 800021c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000220:	b29b      	uxth	r3, r3
}
 8000222:	4618      	mov	r0, r3
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
	...

08000230 <EEPROM_Write>:

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b08e      	sub	sp, #56	; 0x38
 8000234:	af04      	add	r7, sp, #16
 8000236:	60ba      	str	r2, [r7, #8]
 8000238:	461a      	mov	r2, r3
 800023a:	4603      	mov	r3, r0
 800023c:	81fb      	strh	r3, [r7, #14]
 800023e:	460b      	mov	r3, r1
 8000240:	81bb      	strh	r3, [r7, #12]
 8000242:	4613      	mov	r3, r2
 8000244:	80fb      	strh	r3, [r7, #6]
    // Calculate page start address bit location
    int page_addr = log(EEPROM_PAGE_SIZE)/log(2);
 8000246:	2306      	movs	r3, #6
 8000248:	61fb      	str	r3, [r7, #28]

    // Calculate the start and end pages
    uint16_t start_page = page;
 800024a:	89fb      	ldrh	r3, [r7, #14]
 800024c:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint16_t end_page = page + ((size + offset)/EEPROM_PAGE_SIZE);
 800024e:	88fa      	ldrh	r2, [r7, #6]
 8000250:	89bb      	ldrh	r3, [r7, #12]
 8000252:	4413      	add	r3, r2
 8000254:	2b00      	cmp	r3, #0
 8000256:	da00      	bge.n	800025a <EEPROM_Write+0x2a>
 8000258:	333f      	adds	r3, #63	; 0x3f
 800025a:	119b      	asrs	r3, r3, #6
 800025c:	b29a      	uxth	r2, r3
 800025e:	89fb      	ldrh	r3, [r7, #14]
 8000260:	4413      	add	r3, r2
 8000262:	837b      	strh	r3, [r7, #26]

    // Calculate the number of pages to be written
    uint16_t num_pages = (end_page - start_page) + 1;
 8000264:	8b7a      	ldrh	r2, [r7, #26]
 8000266:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000268:	1ad3      	subs	r3, r2, r3
 800026a:	b29b      	uxth	r3, r3
 800026c:	3301      	adds	r3, #1
 800026e:	833b      	strh	r3, [r7, #24]
    uint16_t position = 0;
 8000270:	2300      	movs	r3, #0
 8000272:	84bb      	strh	r3, [r7, #36]	; 0x24

    // Write the data
    for(int i = 0; i < num_pages; i++)
 8000274:	2300      	movs	r3, #0
 8000276:	623b      	str	r3, [r7, #32]
 8000278:	e034      	b.n	80002e4 <EEPROM_Write+0xb4>
    {
        uint16_t mem_addr = start_page << page_addr | offset;
 800027a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800027c:	69fb      	ldr	r3, [r7, #28]
 800027e:	fa02 f303 	lsl.w	r3, r2, r3
 8000282:	b21a      	sxth	r2, r3
 8000284:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000288:	4313      	orrs	r3, r2
 800028a:	b21b      	sxth	r3, r3
 800028c:	82fb      	strh	r3, [r7, #22]
        uint16_t bytes_remaining = bytes_to_write(size, offset);
 800028e:	89ba      	ldrh	r2, [r7, #12]
 8000290:	88fb      	ldrh	r3, [r7, #6]
 8000292:	4611      	mov	r1, r2
 8000294:	4618      	mov	r0, r3
 8000296:	f7ff ffb1 	bl	80001fc <bytes_to_write>
 800029a:	4603      	mov	r3, r0
 800029c:	82bb      	strh	r3, [r7, #20]

        HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_I2C_ADDR, mem_addr, 2, 
 800029e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002a0:	68ba      	ldr	r2, [r7, #8]
 80002a2:	4413      	add	r3, r2
 80002a4:	8af9      	ldrh	r1, [r7, #22]
 80002a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002aa:	9202      	str	r2, [sp, #8]
 80002ac:	8aba      	ldrh	r2, [r7, #20]
 80002ae:	9201      	str	r2, [sp, #4]
 80002b0:	9300      	str	r3, [sp, #0]
 80002b2:	2302      	movs	r3, #2
 80002b4:	460a      	mov	r2, r1
 80002b6:	21a0      	movs	r1, #160	; 0xa0
 80002b8:	480f      	ldr	r0, [pc, #60]	; (80002f8 <EEPROM_Write+0xc8>)
 80002ba:	f000 ff0f 	bl	80010dc <HAL_I2C_Mem_Write>
                            &data[position], bytes_remaining, 1000);

        start_page += 1;
 80002be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80002c0:	3301      	adds	r3, #1
 80002c2:	84fb      	strh	r3, [r7, #38]	; 0x26
        offset = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	81bb      	strh	r3, [r7, #12]
        size = size - bytes_remaining;
 80002c8:	88fa      	ldrh	r2, [r7, #6]
 80002ca:	8abb      	ldrh	r3, [r7, #20]
 80002cc:	1ad3      	subs	r3, r2, r3
 80002ce:	80fb      	strh	r3, [r7, #6]
        position += bytes_remaining;
 80002d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80002d2:	8abb      	ldrh	r3, [r7, #20]
 80002d4:	4413      	add	r3, r2
 80002d6:	84bb      	strh	r3, [r7, #36]	; 0x24

        HAL_Delay(5); // Write cycle delay (5 ms)
 80002d8:	2005      	movs	r0, #5
 80002da:	f000 fbbb 	bl	8000a54 <HAL_Delay>
    for(int i = 0; i < num_pages; i++)
 80002de:	6a3b      	ldr	r3, [r7, #32]
 80002e0:	3301      	adds	r3, #1
 80002e2:	623b      	str	r3, [r7, #32]
 80002e4:	8b3b      	ldrh	r3, [r7, #24]
 80002e6:	6a3a      	ldr	r2, [r7, #32]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	dbc6      	blt.n	800027a <EEPROM_Write+0x4a>

    }
}
 80002ec:	bf00      	nop
 80002ee:	bf00      	nop
 80002f0:	3728      	adds	r7, #40	; 0x28
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	200000cc 	.word	0x200000cc

080002fc <EEPROM_Read>:

void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b08e      	sub	sp, #56	; 0x38
 8000300:	af04      	add	r7, sp, #16
 8000302:	60ba      	str	r2, [r7, #8]
 8000304:	461a      	mov	r2, r3
 8000306:	4603      	mov	r3, r0
 8000308:	81fb      	strh	r3, [r7, #14]
 800030a:	460b      	mov	r3, r1
 800030c:	81bb      	strh	r3, [r7, #12]
 800030e:	4613      	mov	r3, r2
 8000310:	80fb      	strh	r3, [r7, #6]
    // Calculate page start address bit location
    int page_addr = log(EEPROM_PAGE_SIZE)/log(2);
 8000312:	2306      	movs	r3, #6
 8000314:	61fb      	str	r3, [r7, #28]

    // Calculate the start and end pages
    uint16_t start_page = page;
 8000316:	89fb      	ldrh	r3, [r7, #14]
 8000318:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint16_t end_page = page + ((size + offset)/EEPROM_PAGE_SIZE);
 800031a:	88fa      	ldrh	r2, [r7, #6]
 800031c:	89bb      	ldrh	r3, [r7, #12]
 800031e:	4413      	add	r3, r2
 8000320:	2b00      	cmp	r3, #0
 8000322:	da00      	bge.n	8000326 <EEPROM_Read+0x2a>
 8000324:	333f      	adds	r3, #63	; 0x3f
 8000326:	119b      	asrs	r3, r3, #6
 8000328:	b29a      	uxth	r2, r3
 800032a:	89fb      	ldrh	r3, [r7, #14]
 800032c:	4413      	add	r3, r2
 800032e:	837b      	strh	r3, [r7, #26]

    // Calculate the number of pages to be written
    uint16_t num_pages = (end_page - start_page) + 1;
 8000330:	8b7a      	ldrh	r2, [r7, #26]
 8000332:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000334:	1ad3      	subs	r3, r2, r3
 8000336:	b29b      	uxth	r3, r3
 8000338:	3301      	adds	r3, #1
 800033a:	833b      	strh	r3, [r7, #24]
    uint16_t position = 0;
 800033c:	2300      	movs	r3, #0
 800033e:	84bb      	strh	r3, [r7, #36]	; 0x24

    // Read the data
    for(int i = 0; i < num_pages; i++)
 8000340:	2300      	movs	r3, #0
 8000342:	623b      	str	r3, [r7, #32]
 8000344:	e031      	b.n	80003aa <EEPROM_Read+0xae>
    {
        uint16_t mem_addr = start_page << page_addr | offset;
 8000346:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000348:	69fb      	ldr	r3, [r7, #28]
 800034a:	fa02 f303 	lsl.w	r3, r2, r3
 800034e:	b21a      	sxth	r2, r3
 8000350:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000354:	4313      	orrs	r3, r2
 8000356:	b21b      	sxth	r3, r3
 8000358:	82fb      	strh	r3, [r7, #22]
        uint16_t bytes_remaining = bytes_to_write(size, offset);
 800035a:	89ba      	ldrh	r2, [r7, #12]
 800035c:	88fb      	ldrh	r3, [r7, #6]
 800035e:	4611      	mov	r1, r2
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ff4b 	bl	80001fc <bytes_to_write>
 8000366:	4603      	mov	r3, r0
 8000368:	82bb      	strh	r3, [r7, #20]

        HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_I2C_ADDR, mem_addr, 2, 
 800036a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800036c:	68ba      	ldr	r2, [r7, #8]
 800036e:	4413      	add	r3, r2
 8000370:	8af9      	ldrh	r1, [r7, #22]
 8000372:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000376:	9202      	str	r2, [sp, #8]
 8000378:	8aba      	ldrh	r2, [r7, #20]
 800037a:	9201      	str	r2, [sp, #4]
 800037c:	9300      	str	r3, [sp, #0]
 800037e:	2302      	movs	r3, #2
 8000380:	460a      	mov	r2, r1
 8000382:	21a0      	movs	r1, #160	; 0xa0
 8000384:	480d      	ldr	r0, [pc, #52]	; (80003bc <EEPROM_Read+0xc0>)
 8000386:	f000 ffbd 	bl	8001304 <HAL_I2C_Mem_Read>
                            &data[position], bytes_remaining, 1000);

        start_page += 1;
 800038a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800038c:	3301      	adds	r3, #1
 800038e:	84fb      	strh	r3, [r7, #38]	; 0x26
        offset = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	81bb      	strh	r3, [r7, #12]
        size = size - bytes_remaining;
 8000394:	88fa      	ldrh	r2, [r7, #6]
 8000396:	8abb      	ldrh	r3, [r7, #20]
 8000398:	1ad3      	subs	r3, r2, r3
 800039a:	80fb      	strh	r3, [r7, #6]
        position += bytes_remaining;
 800039c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800039e:	8abb      	ldrh	r3, [r7, #20]
 80003a0:	4413      	add	r3, r2
 80003a2:	84bb      	strh	r3, [r7, #36]	; 0x24
    for(int i = 0; i < num_pages; i++)
 80003a4:	6a3b      	ldr	r3, [r7, #32]
 80003a6:	3301      	adds	r3, #1
 80003a8:	623b      	str	r3, [r7, #32]
 80003aa:	8b3b      	ldrh	r3, [r7, #24]
 80003ac:	6a3a      	ldr	r2, [r7, #32]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	dbc9      	blt.n	8000346 <EEPROM_Read+0x4a>

    }

}
 80003b2:	bf00      	nop
 80003b4:	bf00      	nop
 80003b6:	3728      	adds	r7, #40	; 0x28
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	200000cc 	.word	0x200000cc

080003c0 <EEPROM_PageErase>:

void EEPROM_PageErase(uint16_t page)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b098      	sub	sp, #96	; 0x60
 80003c4:	af04      	add	r7, sp, #16
 80003c6:	4603      	mov	r3, r0
 80003c8:	80fb      	strh	r3, [r7, #6]
    // Calculate the memory address based on the page number
    int page_addr = log(EEPROM_PAGE_SIZE)/log(2);
 80003ca:	2306      	movs	r3, #6
 80003cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint16_t mem_addr = page << page_addr;
 80003ce:	88fa      	ldrh	r2, [r7, #6]
 80003d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80003d2:	fa02 f303 	lsl.w	r3, r2, r3
 80003d6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

    // Create a buffer to store the reset values
    uint8_t data[EEPROM_PAGE_SIZE];
    memset(data, 0xFF, EEPROM_PAGE_SIZE);
 80003da:	f107 0308 	add.w	r3, r7, #8
 80003de:	2240      	movs	r2, #64	; 0x40
 80003e0:	21ff      	movs	r1, #255	; 0xff
 80003e2:	4618      	mov	r0, r3
 80003e4:	f002 feb2 	bl	800314c <memset>

    // Write the reset data to the EEPROM
    HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_I2C_ADDR, mem_addr, 2, data, 
 80003e8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80003ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003f0:	9302      	str	r3, [sp, #8]
 80003f2:	2340      	movs	r3, #64	; 0x40
 80003f4:	9301      	str	r3, [sp, #4]
 80003f6:	f107 0308 	add.w	r3, r7, #8
 80003fa:	9300      	str	r3, [sp, #0]
 80003fc:	2302      	movs	r3, #2
 80003fe:	21a0      	movs	r1, #160	; 0xa0
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <EEPROM_PageErase+0x54>)
 8000402:	f000 fe6b 	bl	80010dc <HAL_I2C_Mem_Write>
                        EEPROM_PAGE_SIZE, 1000);

    HAL_Delay(5); // Write cycle delay (5 ms)
 8000406:	2005      	movs	r0, #5
 8000408:	f000 fb24 	bl	8000a54 <HAL_Delay>
}
 800040c:	bf00      	nop
 800040e:	3750      	adds	r7, #80	; 0x50
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	200000cc 	.word	0x200000cc

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041e:	f000 faa4 	bl	800096a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000422:	f000 f83d 	bl	80004a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000426:	f000 f8f1 	bl	800060c <MX_GPIO_Init>
  MX_I2C1_Init();
 800042a:	f000 f8af 	bl	800058c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  for (int i=0; i<512; i++)
 800042e:	2300      	movs	r3, #0
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	e007      	b.n	8000444 <main+0x2c>
  {
	  EEPROM_PageErase(i);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	b29b      	uxth	r3, r3
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ffc1 	bl	80003c0 <EEPROM_PageErase>
  for (int i=0; i<512; i++)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	3301      	adds	r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800044a:	dbf3      	blt.n	8000434 <main+0x1c>
  }


  EEPROM_Write(3, 0, dataw1, strlen((char *)dataw1));
 800044c:	4810      	ldr	r0, [pc, #64]	; (8000490 <main+0x78>)
 800044e:	f7ff fecd 	bl	80001ec <strlen>
 8000452:	4603      	mov	r3, r0
 8000454:	b29b      	uxth	r3, r3
 8000456:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <main+0x78>)
 8000458:	2100      	movs	r1, #0
 800045a:	2003      	movs	r0, #3
 800045c:	f7ff fee8 	bl	8000230 <EEPROM_Write>

  EEPROM_Write(5, 20, dataw2, strlen((char *)dataw2));
 8000460:	480c      	ldr	r0, [pc, #48]	; (8000494 <main+0x7c>)
 8000462:	f7ff fec3 	bl	80001ec <strlen>
 8000466:	4603      	mov	r3, r0
 8000468:	b29b      	uxth	r3, r3
 800046a:	4a0a      	ldr	r2, [pc, #40]	; (8000494 <main+0x7c>)
 800046c:	2114      	movs	r1, #20
 800046e:	2005      	movs	r0, #5
 8000470:	f7ff fede 	bl	8000230 <EEPROM_Write>

  //EEPROM_Write_NUM (6, 0, dataw3);


  EEPROM_Read(3, 0, datar1, 50);
 8000474:	2332      	movs	r3, #50	; 0x32
 8000476:	4a08      	ldr	r2, [pc, #32]	; (8000498 <main+0x80>)
 8000478:	2100      	movs	r1, #0
 800047a:	2003      	movs	r0, #3
 800047c:	f7ff ff3e 	bl	80002fc <EEPROM_Read>

  EEPROM_Read(5, 20, datar2, 50);
 8000480:	2332      	movs	r3, #50	; 0x32
 8000482:	4a06      	ldr	r2, [pc, #24]	; (800049c <main+0x84>)
 8000484:	2114      	movs	r1, #20
 8000486:	2005      	movs	r0, #5
 8000488:	f7ff ff38 	bl	80002fc <EEPROM_Read>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800048c:	e7fe      	b.n	800048c <main+0x74>
 800048e:	bf00      	nop
 8000490:	20000000 	.word	0x20000000
 8000494:	20000018 	.word	0x20000018
 8000498:	20000068 	.word	0x20000068
 800049c:	2000011c 	.word	0x2000011c

080004a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b0ba      	sub	sp, #232	; 0xe8
 80004a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80004aa:	2244      	movs	r2, #68	; 0x44
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 fe4c 	bl	800314c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
 80004c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	228c      	movs	r2, #140	; 0x8c
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f002 fe3e 	bl	800314c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d0:	2302      	movs	r3, #2
 80004d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004de:	2340      	movs	r3, #64	; 0x40
 80004e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e4:	2302      	movs	r3, #2
 80004e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004ea:	2302      	movs	r3, #2
 80004ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004f0:	2301      	movs	r3, #1
 80004f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 10;
 80004f6:	230a      	movs	r3, #10
 80004f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004fc:	2302      	movs	r3, #2
 80004fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000502:	2302      	movs	r3, #2
 8000504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000508:	2302      	movs	r3, #2
 800050a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000512:	4618      	mov	r0, r3
 8000514:	f001 fb38 	bl	8001b88 <HAL_RCC_OscConfig>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800051e:	f000 f931 	bl	8000784 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000522:	230f      	movs	r3, #15
 8000524:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000528:	2303      	movs	r3, #3
 800052a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000542:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000546:	2104      	movs	r1, #4
 8000548:	4618      	mov	r0, r3
 800054a:	f001 ff43 	bl	80023d4 <HAL_RCC_ClockConfig>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000554:	f000 f916 	bl	8000784 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000558:	2340      	movs	r3, #64	; 0x40
 800055a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800055c:	2300      	movs	r3, #0
 800055e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	4618      	mov	r0, r3
 8000564:	f002 f904 	bl	8002770 <HAL_RCCEx_PeriphCLKConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800056e:	f000 f909 	bl	8000784 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000572:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000576:	f001 faa1 	bl	8001abc <HAL_PWREx_ControlVoltageScaling>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000580:	f000 f900 	bl	8000784 <Error_Handler>
  }
}
 8000584:	bf00      	nop
 8000586:	37e8      	adds	r7, #232	; 0xe8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <MX_I2C1_Init+0x74>)
 8000592:	4a1c      	ldr	r2, [pc, #112]	; (8000604 <MX_I2C1_Init+0x78>)
 8000594:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301347;
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <MX_I2C1_Init+0x74>)
 8000598:	4a1b      	ldr	r2, [pc, #108]	; (8000608 <MX_I2C1_Init+0x7c>)
 800059a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800059c:	4b18      	ldr	r3, [pc, #96]	; (8000600 <MX_I2C1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <MX_I2C1_Init+0x74>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_I2C1_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_I2C1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_I2C1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_I2C1_Init+0x74>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005c6:	480e      	ldr	r0, [pc, #56]	; (8000600 <MX_I2C1_Init+0x74>)
 80005c8:	f000 fcf8 	bl	8000fbc <HAL_I2C_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005d2:	f000 f8d7 	bl	8000784 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <MX_I2C1_Init+0x74>)
 80005da:	f001 f9c9 	bl	8001970 <HAL_I2CEx_ConfigAnalogFilter>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005e4:	f000 f8ce 	bl	8000784 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005e8:	2100      	movs	r1, #0
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_I2C1_Init+0x74>)
 80005ec:	f001 fa0b 	bl	8001a06 <HAL_I2CEx_ConfigDigitalFilter>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005f6:	f000 f8c5 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000cc 	.word	0x200000cc
 8000604:	40005400 	.word	0x40005400
 8000608:	00301347 	.word	0x00301347

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	; 0x28
 8000610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	4b53      	ldr	r3, [pc, #332]	; (8000770 <MX_GPIO_Init+0x164>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	4a52      	ldr	r2, [pc, #328]	; (8000770 <MX_GPIO_Init+0x164>)
 8000628:	f043 0304 	orr.w	r3, r3, #4
 800062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062e:	4b50      	ldr	r3, [pc, #320]	; (8000770 <MX_GPIO_Init+0x164>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0304 	and.w	r3, r3, #4
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	4b4d      	ldr	r3, [pc, #308]	; (8000770 <MX_GPIO_Init+0x164>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	4a4c      	ldr	r2, [pc, #304]	; (8000770 <MX_GPIO_Init+0x164>)
 8000640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000646:	4b4a      	ldr	r3, [pc, #296]	; (8000770 <MX_GPIO_Init+0x164>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b47      	ldr	r3, [pc, #284]	; (8000770 <MX_GPIO_Init+0x164>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	4a46      	ldr	r2, [pc, #280]	; (8000770 <MX_GPIO_Init+0x164>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065e:	4b44      	ldr	r3, [pc, #272]	; (8000770 <MX_GPIO_Init+0x164>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800066a:	4b41      	ldr	r3, [pc, #260]	; (8000770 <MX_GPIO_Init+0x164>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	4a40      	ldr	r2, [pc, #256]	; (8000770 <MX_GPIO_Init+0x164>)
 8000670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000676:	4b3e      	ldr	r3, [pc, #248]	; (8000770 <MX_GPIO_Init+0x164>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000682:	f001 fa71 	bl	8001b68 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b3a      	ldr	r3, [pc, #232]	; (8000770 <MX_GPIO_Init+0x164>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	4a39      	ldr	r2, [pc, #228]	; (8000770 <MX_GPIO_Init+0x164>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000692:	4b37      	ldr	r3, [pc, #220]	; (8000770 <MX_GPIO_Init+0x164>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80006a4:	4833      	ldr	r0, [pc, #204]	; (8000774 <MX_GPIO_Init+0x168>)
 80006a6:	f000 fc71 	bl	8000f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2140      	movs	r1, #64	; 0x40
 80006ae:	4832      	ldr	r0, [pc, #200]	; (8000778 <MX_GPIO_Init+0x16c>)
 80006b0:	f000 fc6c 	bl	8000f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ba:	4b30      	ldr	r3, [pc, #192]	; (800077c <MX_GPIO_Init+0x170>)
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	482d      	ldr	r0, [pc, #180]	; (8000780 <MX_GPIO_Init+0x174>)
 80006ca:	f000 facd 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80006ce:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	4823      	ldr	r0, [pc, #140]	; (8000774 <MX_GPIO_Init+0x168>)
 80006e8:	f000 fabe 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006ec:	2320      	movs	r3, #32
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	481e      	ldr	r0, [pc, #120]	; (8000778 <MX_GPIO_Init+0x16c>)
 8000700:	f000 fab2 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000704:	2340      	movs	r3, #64	; 0x40
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	4817      	ldr	r0, [pc, #92]	; (8000778 <MX_GPIO_Init+0x16c>)
 800071c:	f000 faa4 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000720:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000726:	2302      	movs	r3, #2
 8000728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072e:	2303      	movs	r3, #3
 8000730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000732:	2308      	movs	r3, #8
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	480e      	ldr	r0, [pc, #56]	; (8000778 <MX_GPIO_Init+0x16c>)
 800073e:	f000 fa93 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000742:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000754:	230a      	movs	r3, #10
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000762:	f000 fa81 	bl	8000c68 <HAL_GPIO_Init>

}
 8000766:	bf00      	nop
 8000768:	3728      	adds	r7, #40	; 0x28
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000
 8000774:	48000400 	.word	0x48000400
 8000778:	48001800 	.word	0x48001800
 800077c:	10110000 	.word	0x10110000
 8000780:	48000800 	.word	0x48000800

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <Error_Handler+0x8>
	...

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_MspInit+0x44>)
 8000798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <HAL_MspInit+0x44>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6613      	str	r3, [r2, #96]	; 0x60
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <HAL_MspInit+0x44>)
 80007a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <HAL_MspInit+0x44>)
 80007b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <HAL_MspInit+0x44>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	6593      	str	r3, [r2, #88]	; 0x58
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_MspInit+0x44>)
 80007bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000

080007d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a17      	ldr	r2, [pc, #92]	; (8000854 <HAL_I2C_MspInit+0x7c>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d128      	bne.n	800084c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <HAL_I2C_MspInit+0x80>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a16      	ldr	r2, [pc, #88]	; (8000858 <HAL_I2C_MspInit+0x80>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <HAL_I2C_MspInit+0x80>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000812:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000818:	2312      	movs	r3, #18
 800081a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800081c:	2301      	movs	r3, #1
 800081e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000824:	2304      	movs	r3, #4
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	480b      	ldr	r0, [pc, #44]	; (800085c <HAL_I2C_MspInit+0x84>)
 8000830:	f000 fa1a 	bl	8000c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_I2C_MspInit+0x80>)
 8000836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000838:	4a07      	ldr	r2, [pc, #28]	; (8000858 <HAL_I2C_MspInit+0x80>)
 800083a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800083e:	6593      	str	r3, [r2, #88]	; 0x58
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_I2C_MspInit+0x80>)
 8000842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800084c:	bf00      	nop
 800084e:	3728      	adds	r7, #40	; 0x28
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40005400 	.word	0x40005400
 8000858:	40021000 	.word	0x40021000
 800085c:	48000400 	.word	0x48000400

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <NMI_Handler+0x4>

08000866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <MemManage_Handler+0x4>

08000872 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <BusFault_Handler+0x4>

08000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <UsageFault_Handler+0x4>

0800087e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ac:	f000 f8b2 	bl	8000a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <SystemInit+0x5c>)
 80008ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008be:	4a14      	ldr	r2, [pc, #80]	; (8000910 <SystemInit+0x5c>)
 80008c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <SystemInit+0x60>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a11      	ldr	r2, [pc, #68]	; (8000914 <SystemInit+0x60>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <SystemInit+0x60>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <SystemInit+0x60>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <SystemInit+0x60>)
 80008e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80008e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80008e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <SystemInit+0x60>)
 80008ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <SystemInit+0x60>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a07      	ldr	r2, [pc, #28]	; (8000914 <SystemInit+0x60>)
 80008f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <SystemInit+0x60>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00
 8000914:	40021000 	.word	0x40021000

08000918 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000950 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800091c:	f7ff ffca 	bl	80008b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000920:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000922:	e003      	b.n	800092c <LoopCopyDataInit>

08000924 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000926:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000928:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800092a:	3104      	adds	r1, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800092c:	480a      	ldr	r0, [pc, #40]	; (8000958 <LoopForever+0xa>)
	ldr	r3, =_edata
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000930:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000932:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000934:	d3f6      	bcc.n	8000924 <CopyDataInit>
	ldr	r2, =_sbss
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000938:	e002      	b.n	8000940 <LoopFillZerobss>

0800093a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800093a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800093c:	f842 3b04 	str.w	r3, [r2], #4

08000940 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <LoopForever+0x16>)
	cmp	r2, r3
 8000942:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000944:	d3f9      	bcc.n	800093a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000946:	f002 fbdd 	bl	8003104 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800094a:	f7ff fd65 	bl	8000418 <main>

0800094e <LoopForever>:

LoopForever:
    b LoopForever
 800094e:	e7fe      	b.n	800094e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000950:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8000954:	080031bc 	.word	0x080031bc
	ldr	r0, =_sdata
 8000958:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800095c:	2000004c 	.word	0x2000004c
	ldr	r2, =_sbss
 8000960:	2000004c 	.word	0x2000004c
	ldr	r3, = _ebss
 8000964:	20000184 	.word	0x20000184

08000968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC1_2_IRQHandler>

0800096a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000970:	2300      	movs	r3, #0
 8000972:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f943 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800097a:	2000      	movs	r0, #0
 800097c:	f000 f80e 	bl	800099c <HAL_InitTick>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	71fb      	strb	r3, [r7, #7]
 800098a:	e001      	b.n	8000990 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800098c:	f7ff ff00 	bl	8000790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000990:	79fb      	ldrb	r3, [r7, #7]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <HAL_InitTick+0x6c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d023      	beq.n	80009f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <HAL_InitTick+0x70>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <HAL_InitTick+0x6c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f941 	bl	8000c4e <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d10f      	bne.n	80009f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d809      	bhi.n	80009ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009e0:	f000 f919 	bl	8000c16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_InitTick+0x74>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
 80009ea:	e007      	b.n	80009fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009ec:	2301      	movs	r3, #1
 80009ee:	73fb      	strb	r3, [r7, #15]
 80009f0:	e004      	b.n	80009fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	73fb      	strb	r3, [r7, #15]
 80009f6:	e001      	b.n	80009fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000048 	.word	0x20000048
 8000a0c:	20000040 	.word	0x20000040
 8000a10:	20000044 	.word	0x20000044

08000a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x20>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x24>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_IncTick+0x24>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000048 	.word	0x20000048
 8000a38:	20000180 	.word	0x20000180

08000a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_GetTick+0x14>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000180 	.word	0x20000180

08000a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a5c:	f7ff ffee 	bl	8000a3c <HAL_GetTick>
 8000a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a6c:	d005      	beq.n	8000a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_Delay+0x44>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4413      	add	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a7a:	bf00      	nop
 8000a7c:	f7ff ffde 	bl	8000a3c <HAL_GetTick>
 8000a80:	4602      	mov	r2, r0
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d8f7      	bhi.n	8000a7c <HAL_Delay+0x28>
  {
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000048 	.word	0x20000048

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db0a      	blt.n	8000b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	490c      	ldr	r1, [pc, #48]	; (8000b4c <__NVIC_SetPriority+0x4c>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b28:	e00a      	b.n	8000b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4908      	ldr	r1, [pc, #32]	; (8000b50 <__NVIC_SetPriority+0x50>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	3b04      	subs	r3, #4
 8000b38:	0112      	lsls	r2, r2, #4
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	761a      	strb	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000e100 	.word	0xe000e100
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	; 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f1c3 0307 	rsb	r3, r3, #7
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	bf28      	it	cs
 8000b72:	2304      	movcs	r3, #4
 8000b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d902      	bls.n	8000b84 <NVIC_EncodePriority+0x30>
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3b03      	subs	r3, #3
 8000b82:	e000      	b.n	8000b86 <NVIC_EncodePriority+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43da      	mvns	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43d9      	mvns	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	4313      	orrs	r3, r2
         );
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	; 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bcc:	d301      	bcc.n	8000bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00f      	b.n	8000bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <SysTick_Config+0x40>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bda:	210f      	movs	r1, #15
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	f7ff ff8e 	bl	8000b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <SysTick_Config+0x40>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bea:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <SysTick_Config+0x40>)
 8000bec:	2207      	movs	r2, #7
 8000bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	e000e010 	.word	0xe000e010

08000c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff47 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c28:	f7ff ff5c 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	6978      	ldr	r0, [r7, #20]
 8000c34:	f7ff ff8e 	bl	8000b54 <NVIC_EncodePriority>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff5d 	bl	8000b00 <__NVIC_SetPriority>
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffb0 	bl	8000bbc <SysTick_Config>
 8000c5c:	4603      	mov	r3, r0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b087      	sub	sp, #28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c76:	e166      	b.n	8000f46 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	4013      	ands	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 8158 	beq.w	8000f40 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d00b      	beq.n	8000cb0 <HAL_GPIO_Init+0x48>
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d007      	beq.n	8000cb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ca4:	2b11      	cmp	r3, #17
 8000ca6:	d003      	beq.n	8000cb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b12      	cmp	r3, #18
 8000cae:	d130      	bne.n	8000d12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	2203      	movs	r2, #3
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68da      	ldr	r2, [r3, #12]
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	091b      	lsrs	r3, r3, #4
 8000cfc:	f003 0201 	and.w	r2, r3, #1
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	689a      	ldr	r2, [r3, #8]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d003      	beq.n	8000d52 <HAL_GPIO_Init+0xea>
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b12      	cmp	r3, #18
 8000d50:	d123      	bne.n	8000d9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	08da      	lsrs	r2, r3, #3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3208      	adds	r2, #8
 8000d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	220f      	movs	r2, #15
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	691a      	ldr	r2, [r3, #16]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	08da      	lsrs	r2, r3, #3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3208      	adds	r2, #8
 8000d94:	6939      	ldr	r1, [r7, #16]
 8000d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0203 	and.w	r2, r3, #3
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 80b2 	beq.w	8000f40 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ddc:	4b61      	ldr	r3, [pc, #388]	; (8000f64 <HAL_GPIO_Init+0x2fc>)
 8000dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de0:	4a60      	ldr	r2, [pc, #384]	; (8000f64 <HAL_GPIO_Init+0x2fc>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	6613      	str	r3, [r2, #96]	; 0x60
 8000de8:	4b5e      	ldr	r3, [pc, #376]	; (8000f64 <HAL_GPIO_Init+0x2fc>)
 8000dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000df4:	4a5c      	ldr	r2, [pc, #368]	; (8000f68 <HAL_GPIO_Init+0x300>)
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	089b      	lsrs	r3, r3, #2
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	220f      	movs	r2, #15
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e1e:	d02b      	beq.n	8000e78 <HAL_GPIO_Init+0x210>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a52      	ldr	r2, [pc, #328]	; (8000f6c <HAL_GPIO_Init+0x304>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d025      	beq.n	8000e74 <HAL_GPIO_Init+0x20c>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a51      	ldr	r2, [pc, #324]	; (8000f70 <HAL_GPIO_Init+0x308>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d01f      	beq.n	8000e70 <HAL_GPIO_Init+0x208>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a50      	ldr	r2, [pc, #320]	; (8000f74 <HAL_GPIO_Init+0x30c>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d019      	beq.n	8000e6c <HAL_GPIO_Init+0x204>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a4f      	ldr	r2, [pc, #316]	; (8000f78 <HAL_GPIO_Init+0x310>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d013      	beq.n	8000e68 <HAL_GPIO_Init+0x200>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a4e      	ldr	r2, [pc, #312]	; (8000f7c <HAL_GPIO_Init+0x314>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d00d      	beq.n	8000e64 <HAL_GPIO_Init+0x1fc>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a4d      	ldr	r2, [pc, #308]	; (8000f80 <HAL_GPIO_Init+0x318>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d007      	beq.n	8000e60 <HAL_GPIO_Init+0x1f8>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a4c      	ldr	r2, [pc, #304]	; (8000f84 <HAL_GPIO_Init+0x31c>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d101      	bne.n	8000e5c <HAL_GPIO_Init+0x1f4>
 8000e58:	2307      	movs	r3, #7
 8000e5a:	e00e      	b.n	8000e7a <HAL_GPIO_Init+0x212>
 8000e5c:	2308      	movs	r3, #8
 8000e5e:	e00c      	b.n	8000e7a <HAL_GPIO_Init+0x212>
 8000e60:	2306      	movs	r3, #6
 8000e62:	e00a      	b.n	8000e7a <HAL_GPIO_Init+0x212>
 8000e64:	2305      	movs	r3, #5
 8000e66:	e008      	b.n	8000e7a <HAL_GPIO_Init+0x212>
 8000e68:	2304      	movs	r3, #4
 8000e6a:	e006      	b.n	8000e7a <HAL_GPIO_Init+0x212>
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e004      	b.n	8000e7a <HAL_GPIO_Init+0x212>
 8000e70:	2302      	movs	r3, #2
 8000e72:	e002      	b.n	8000e7a <HAL_GPIO_Init+0x212>
 8000e74:	2301      	movs	r3, #1
 8000e76:	e000      	b.n	8000e7a <HAL_GPIO_Init+0x212>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	f002 0203 	and.w	r2, r2, #3
 8000e80:	0092      	lsls	r2, r2, #2
 8000e82:	4093      	lsls	r3, r2
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e8a:	4937      	ldr	r1, [pc, #220]	; (8000f68 <HAL_GPIO_Init+0x300>)
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	3302      	adds	r3, #2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e98:	4b3b      	ldr	r3, [pc, #236]	; (8000f88 <HAL_GPIO_Init+0x320>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ebc:	4a32      	ldr	r2, [pc, #200]	; (8000f88 <HAL_GPIO_Init+0x320>)
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000ec2:	4b31      	ldr	r3, [pc, #196]	; (8000f88 <HAL_GPIO_Init+0x320>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ee6:	4a28      	ldr	r2, [pc, #160]	; (8000f88 <HAL_GPIO_Init+0x320>)
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eec:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <HAL_GPIO_Init+0x320>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f10:	4a1d      	ldr	r2, [pc, #116]	; (8000f88 <HAL_GPIO_Init+0x320>)
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <HAL_GPIO_Init+0x320>)
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f3a:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <HAL_GPIO_Init+0x320>)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3301      	adds	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f47f ae91 	bne.w	8000c78 <HAL_GPIO_Init+0x10>
  }
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	371c      	adds	r7, #28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010000 	.word	0x40010000
 8000f6c:	48000400 	.word	0x48000400
 8000f70:	48000800 	.word	0x48000800
 8000f74:	48000c00 	.word	0x48000c00
 8000f78:	48001000 	.word	0x48001000
 8000f7c:	48001400 	.word	0x48001400
 8000f80:	48001800 	.word	0x48001800
 8000f84:	48001c00 	.word	0x48001c00
 8000f88:	40010400 	.word	0x40010400

08000f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f9c:	787b      	ldrb	r3, [r7, #1]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fa2:	887a      	ldrh	r2, [r7, #2]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fa8:	e002      	b.n	8000fb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000faa:	887a      	ldrh	r2, [r7, #2]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e081      	b.n	80010d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d106      	bne.n	8000fe8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff fbf8 	bl	80007d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2224      	movs	r2, #36	; 0x24
 8000fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0201 	bic.w	r2, r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800100c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800101c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d107      	bne.n	8001036 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	e006      	b.n	8001044 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001042:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d104      	bne.n	8001056 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001054:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	6812      	ldr	r2, [r2, #0]
 8001060:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001068:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001078:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	691a      	ldr	r2, [r3, #16]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	ea42 0103 	orr.w	r1, r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	021a      	lsls	r2, r3, #8
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	430a      	orrs	r2, r1
 8001092:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69d9      	ldr	r1, [r3, #28]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a1a      	ldr	r2, [r3, #32]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 0201 	orr.w	r2, r2, #1
 80010b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2220      	movs	r2, #32
 80010be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af02      	add	r7, sp, #8
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	4608      	mov	r0, r1
 80010e6:	4611      	mov	r1, r2
 80010e8:	461a      	mov	r2, r3
 80010ea:	4603      	mov	r3, r0
 80010ec:	817b      	strh	r3, [r7, #10]
 80010ee:	460b      	mov	r3, r1
 80010f0:	813b      	strh	r3, [r7, #8]
 80010f2:	4613      	mov	r3, r2
 80010f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b20      	cmp	r3, #32
 8001100:	f040 80f9 	bne.w	80012f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d002      	beq.n	8001110 <HAL_I2C_Mem_Write+0x34>
 800110a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800110c:	2b00      	cmp	r3, #0
 800110e:	d105      	bne.n	800111c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001116:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e0ed      	b.n	80012f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001122:	2b01      	cmp	r3, #1
 8001124:	d101      	bne.n	800112a <HAL_I2C_Mem_Write+0x4e>
 8001126:	2302      	movs	r3, #2
 8001128:	e0e6      	b.n	80012f8 <HAL_I2C_Mem_Write+0x21c>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2201      	movs	r2, #1
 800112e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001132:	f7ff fc83 	bl	8000a3c <HAL_GetTick>
 8001136:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2319      	movs	r3, #25
 800113e:	2201      	movs	r2, #1
 8001140:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f000 fac3 	bl	80016d0 <I2C_WaitOnFlagUntilTimeout>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e0d1      	b.n	80012f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2221      	movs	r2, #33	; 0x21
 8001158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2240      	movs	r2, #64	; 0x40
 8001160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2200      	movs	r2, #0
 8001168:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6a3a      	ldr	r2, [r7, #32]
 800116e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001174:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2200      	movs	r2, #0
 800117a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800117c:	88f8      	ldrh	r0, [r7, #6]
 800117e:	893a      	ldrh	r2, [r7, #8]
 8001180:	8979      	ldrh	r1, [r7, #10]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	4603      	mov	r3, r0
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f000 f9d3 	bl	8001538 <I2C_RequestMemoryWrite>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d005      	beq.n	80011a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e0a9      	b.n	80012f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	2bff      	cmp	r3, #255	; 0xff
 80011ac:	d90e      	bls.n	80011cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	22ff      	movs	r2, #255	; 0xff
 80011b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	8979      	ldrh	r1, [r7, #10]
 80011bc:	2300      	movs	r3, #0
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f000 fba5 	bl	8001914 <I2C_TransferConfig>
 80011ca:	e00f      	b.n	80011ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	8979      	ldrh	r1, [r7, #10]
 80011de:	2300      	movs	r3, #0
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f000 fb94 	bl	8001914 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f000 faad 	bl	8001750 <I2C_WaitOnTXISFlagUntilTimeout>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e07b      	b.n	80012f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	1c5a      	adds	r2, r3, #1
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800121a:	b29b      	uxth	r3, r3
 800121c:	3b01      	subs	r3, #1
 800121e:	b29a      	uxth	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001228:	3b01      	subs	r3, #1
 800122a:	b29a      	uxth	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001234:	b29b      	uxth	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d034      	beq.n	80012a4 <HAL_I2C_Mem_Write+0x1c8>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800123e:	2b00      	cmp	r3, #0
 8001240:	d130      	bne.n	80012a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001248:	2200      	movs	r2, #0
 800124a:	2180      	movs	r1, #128	; 0x80
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f000 fa3f 	bl	80016d0 <I2C_WaitOnFlagUntilTimeout>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e04d      	b.n	80012f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001260:	b29b      	uxth	r3, r3
 8001262:	2bff      	cmp	r3, #255	; 0xff
 8001264:	d90e      	bls.n	8001284 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	22ff      	movs	r2, #255	; 0xff
 800126a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001270:	b2da      	uxtb	r2, r3
 8001272:	8979      	ldrh	r1, [r7, #10]
 8001274:	2300      	movs	r3, #0
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f000 fb49 	bl	8001914 <I2C_TransferConfig>
 8001282:	e00f      	b.n	80012a4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001288:	b29a      	uxth	r2, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001292:	b2da      	uxtb	r2, r3
 8001294:	8979      	ldrh	r1, [r7, #10]
 8001296:	2300      	movs	r3, #0
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f000 fb38 	bl	8001914 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d19e      	bne.n	80011ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f000 fa8c 	bl	80017d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e01a      	b.n	80012f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2220      	movs	r2, #32
 80012c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6859      	ldr	r1, [r3, #4]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_I2C_Mem_Write+0x224>)
 80012d6:	400b      	ands	r3, r1
 80012d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2220      	movs	r2, #32
 80012de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e000      	b.n	80012f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80012f6:	2302      	movs	r3, #2
  }
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	fe00e800 	.word	0xfe00e800

08001304 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af02      	add	r7, sp, #8
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	4608      	mov	r0, r1
 800130e:	4611      	mov	r1, r2
 8001310:	461a      	mov	r2, r3
 8001312:	4603      	mov	r3, r0
 8001314:	817b      	strh	r3, [r7, #10]
 8001316:	460b      	mov	r3, r1
 8001318:	813b      	strh	r3, [r7, #8]
 800131a:	4613      	mov	r3, r2
 800131c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b20      	cmp	r3, #32
 8001328:	f040 80fd 	bne.w	8001526 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <HAL_I2C_Mem_Read+0x34>
 8001332:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001334:	2b00      	cmp	r3, #0
 8001336:	d105      	bne.n	8001344 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800133e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e0f1      	b.n	8001528 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800134a:	2b01      	cmp	r3, #1
 800134c:	d101      	bne.n	8001352 <HAL_I2C_Mem_Read+0x4e>
 800134e:	2302      	movs	r3, #2
 8001350:	e0ea      	b.n	8001528 <HAL_I2C_Mem_Read+0x224>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800135a:	f7ff fb6f 	bl	8000a3c <HAL_GetTick>
 800135e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2319      	movs	r3, #25
 8001366:	2201      	movs	r2, #1
 8001368:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f000 f9af 	bl	80016d0 <I2C_WaitOnFlagUntilTimeout>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e0d5      	b.n	8001528 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2222      	movs	r2, #34	; 0x22
 8001380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2240      	movs	r2, #64	; 0x40
 8001388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2200      	movs	r2, #0
 8001390:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6a3a      	ldr	r2, [r7, #32]
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800139c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013a4:	88f8      	ldrh	r0, [r7, #6]
 80013a6:	893a      	ldrh	r2, [r7, #8]
 80013a8:	8979      	ldrh	r1, [r7, #10]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	4603      	mov	r3, r0
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f000 f913 	bl	80015e0 <I2C_RequestMemoryRead>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0ad      	b.n	8001528 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	2bff      	cmp	r3, #255	; 0xff
 80013d4:	d90e      	bls.n	80013f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	22ff      	movs	r2, #255	; 0xff
 80013da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	8979      	ldrh	r1, [r7, #10]
 80013e4:	4b52      	ldr	r3, [pc, #328]	; (8001530 <HAL_I2C_Mem_Read+0x22c>)
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f000 fa91 	bl	8001914 <I2C_TransferConfig>
 80013f2:	e00f      	b.n	8001414 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001402:	b2da      	uxtb	r2, r3
 8001404:	8979      	ldrh	r1, [r7, #10]
 8001406:	4b4a      	ldr	r3, [pc, #296]	; (8001530 <HAL_I2C_Mem_Read+0x22c>)
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 fa80 	bl	8001914 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141a:	2200      	movs	r2, #0
 800141c:	2104      	movs	r1, #4
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f000 f956 	bl	80016d0 <I2C_WaitOnFlagUntilTimeout>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e07c      	b.n	8001528 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800144a:	3b01      	subs	r3, #1
 800144c:	b29a      	uxth	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001456:	b29b      	uxth	r3, r3
 8001458:	3b01      	subs	r3, #1
 800145a:	b29a      	uxth	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001464:	b29b      	uxth	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d034      	beq.n	80014d4 <HAL_I2C_Mem_Read+0x1d0>
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800146e:	2b00      	cmp	r3, #0
 8001470:	d130      	bne.n	80014d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001478:	2200      	movs	r2, #0
 800147a:	2180      	movs	r1, #128	; 0x80
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 f927 	bl	80016d0 <I2C_WaitOnFlagUntilTimeout>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e04d      	b.n	8001528 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001490:	b29b      	uxth	r3, r3
 8001492:	2bff      	cmp	r3, #255	; 0xff
 8001494:	d90e      	bls.n	80014b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	22ff      	movs	r2, #255	; 0xff
 800149a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	8979      	ldrh	r1, [r7, #10]
 80014a4:	2300      	movs	r3, #0
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 fa31 	bl	8001914 <I2C_TransferConfig>
 80014b2:	e00f      	b.n	80014d4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	8979      	ldrh	r1, [r7, #10]
 80014c6:	2300      	movs	r3, #0
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f000 fa20 	bl	8001914 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014d8:	b29b      	uxth	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d19a      	bne.n	8001414 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 f974 	bl	80017d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e01a      	b.n	8001528 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2220      	movs	r2, #32
 80014f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6859      	ldr	r1, [r3, #4]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_I2C_Mem_Read+0x230>)
 8001506:	400b      	ands	r3, r1
 8001508:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2220      	movs	r2, #32
 800150e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001526:	2302      	movs	r3, #2
  }
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	80002400 	.word	0x80002400
 8001534:	fe00e800 	.word	0xfe00e800

08001538 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af02      	add	r7, sp, #8
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	4608      	mov	r0, r1
 8001542:	4611      	mov	r1, r2
 8001544:	461a      	mov	r2, r3
 8001546:	4603      	mov	r3, r0
 8001548:	817b      	strh	r3, [r7, #10]
 800154a:	460b      	mov	r3, r1
 800154c:	813b      	strh	r3, [r7, #8]
 800154e:	4613      	mov	r3, r2
 8001550:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	8979      	ldrh	r1, [r7, #10]
 8001558:	4b20      	ldr	r3, [pc, #128]	; (80015dc <I2C_RequestMemoryWrite+0xa4>)
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f000 f9d7 	bl	8001914 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	69b9      	ldr	r1, [r7, #24]
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f000 f8f0 	bl	8001750 <I2C_WaitOnTXISFlagUntilTimeout>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e02c      	b.n	80015d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d105      	bne.n	800158c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001580:	893b      	ldrh	r3, [r7, #8]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	629a      	str	r2, [r3, #40]	; 0x28
 800158a:	e015      	b.n	80015b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800158c:	893b      	ldrh	r3, [r7, #8]
 800158e:	0a1b      	lsrs	r3, r3, #8
 8001590:	b29b      	uxth	r3, r3
 8001592:	b2da      	uxtb	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	69b9      	ldr	r1, [r7, #24]
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f000 f8d6 	bl	8001750 <I2C_WaitOnTXISFlagUntilTimeout>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e012      	b.n	80015d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80015ae:	893b      	ldrh	r3, [r7, #8]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2200      	movs	r2, #0
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 f884 	bl	80016d0 <I2C_WaitOnFlagUntilTimeout>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	80002000 	.word	0x80002000

080015e0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	4608      	mov	r0, r1
 80015ea:	4611      	mov	r1, r2
 80015ec:	461a      	mov	r2, r3
 80015ee:	4603      	mov	r3, r0
 80015f0:	817b      	strh	r3, [r7, #10]
 80015f2:	460b      	mov	r3, r1
 80015f4:	813b      	strh	r3, [r7, #8]
 80015f6:	4613      	mov	r3, r2
 80015f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	8979      	ldrh	r1, [r7, #10]
 8001600:	4b20      	ldr	r3, [pc, #128]	; (8001684 <I2C_RequestMemoryRead+0xa4>)
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	2300      	movs	r3, #0
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f000 f984 	bl	8001914 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800160c:	69fa      	ldr	r2, [r7, #28]
 800160e:	69b9      	ldr	r1, [r7, #24]
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f000 f89d 	bl	8001750 <I2C_WaitOnTXISFlagUntilTimeout>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e02c      	b.n	800167a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d105      	bne.n	8001632 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001626:	893b      	ldrh	r3, [r7, #8]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
 8001630:	e015      	b.n	800165e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001632:	893b      	ldrh	r3, [r7, #8]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	b29b      	uxth	r3, r3
 8001638:	b2da      	uxtb	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	69b9      	ldr	r1, [r7, #24]
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 f883 	bl	8001750 <I2C_WaitOnTXISFlagUntilTimeout>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e012      	b.n	800167a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001654:	893b      	ldrh	r3, [r7, #8]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	2200      	movs	r2, #0
 8001666:	2140      	movs	r1, #64	; 0x40
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 f831 	bl	80016d0 <I2C_WaitOnFlagUntilTimeout>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	80002000 	.word	0x80002000

08001688 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b02      	cmp	r3, #2
 800169c:	d103      	bne.n	80016a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2200      	movs	r2, #0
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d007      	beq.n	80016c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	699a      	ldr	r2, [r3, #24]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	619a      	str	r2, [r3, #24]
  }
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016e0:	e022      	b.n	8001728 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016e8:	d01e      	beq.n	8001728 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ea:	f7ff f9a7 	bl	8000a3c <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d302      	bcc.n	8001700 <I2C_WaitOnFlagUntilTimeout+0x30>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d113      	bne.n	8001728 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001704:	f043 0220 	orr.w	r2, r3, #32
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2220      	movs	r2, #32
 8001710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e00f      	b.n	8001748 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699a      	ldr	r2, [r3, #24]
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	4013      	ands	r3, r2
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	429a      	cmp	r2, r3
 8001736:	bf0c      	ite	eq
 8001738:	2301      	moveq	r3, #1
 800173a:	2300      	movne	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	429a      	cmp	r2, r3
 8001744:	d0cd      	beq.n	80016e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800175c:	e02c      	b.n	80017b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 f870 	bl	8001848 <I2C_IsAcknowledgeFailed>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e02a      	b.n	80017c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001778:	d01e      	beq.n	80017b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800177a:	f7ff f95f 	bl	8000a3c <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	429a      	cmp	r2, r3
 8001788:	d302      	bcc.n	8001790 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d113      	bne.n	80017b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001794:	f043 0220 	orr.w	r2, r3, #32
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2220      	movs	r2, #32
 80017a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e007      	b.n	80017c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d1cb      	bne.n	800175e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017dc:	e028      	b.n	8001830 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 f830 	bl	8001848 <I2C_IsAcknowledgeFailed>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e026      	b.n	8001840 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017f2:	f7ff f923 	bl	8000a3c <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d302      	bcc.n	8001808 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d113      	bne.n	8001830 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180c:	f043 0220 	orr.w	r2, r3, #32
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2220      	movs	r2, #32
 8001818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e007      	b.n	8001840 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f003 0320 	and.w	r3, r3, #32
 800183a:	2b20      	cmp	r3, #32
 800183c:	d1cf      	bne.n	80017de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	2b10      	cmp	r3, #16
 8001860:	d151      	bne.n	8001906 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001862:	e022      	b.n	80018aa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800186a:	d01e      	beq.n	80018aa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800186c:	f7ff f8e6 	bl	8000a3c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	429a      	cmp	r2, r3
 800187a:	d302      	bcc.n	8001882 <I2C_IsAcknowledgeFailed+0x3a>
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d113      	bne.n	80018aa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f043 0220 	orr.w	r2, r3, #32
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2220      	movs	r2, #32
 8001892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e02e      	b.n	8001908 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0320 	and.w	r3, r3, #32
 80018b4:	2b20      	cmp	r3, #32
 80018b6:	d1d5      	bne.n	8001864 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2210      	movs	r2, #16
 80018be:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2220      	movs	r2, #32
 80018c6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f7ff fedd 	bl	8001688 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <I2C_IsAcknowledgeFailed+0xc8>)
 80018da:	400b      	ands	r3, r1
 80018dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f043 0204 	orr.w	r2, r3, #4
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2220      	movs	r2, #32
 80018ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	fe00e800 	.word	0xfe00e800

08001914 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	817b      	strh	r3, [r7, #10]
 8001922:	4613      	mov	r3, r2
 8001924:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	0d5b      	lsrs	r3, r3, #21
 8001930:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <I2C_TransferConfig+0x58>)
 8001936:	430b      	orrs	r3, r1
 8001938:	43db      	mvns	r3, r3
 800193a:	ea02 0103 	and.w	r1, r2, r3
 800193e:	897b      	ldrh	r3, [r7, #10]
 8001940:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001944:	7a7b      	ldrb	r3, [r7, #9]
 8001946:	041b      	lsls	r3, r3, #16
 8001948:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	431a      	orrs	r2, r3
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	431a      	orrs	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800195e:	bf00      	nop
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	03ff63ff 	.word	0x03ff63ff

08001970 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b20      	cmp	r3, #32
 8001984:	d138      	bne.n	80019f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001990:	2302      	movs	r3, #2
 8001992:	e032      	b.n	80019fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2224      	movs	r2, #36	; 0x24
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0201 	bic.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6819      	ldr	r1, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2220      	movs	r2, #32
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	e000      	b.n	80019fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019f8:	2302      	movs	r3, #2
  }
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	d139      	bne.n	8001a90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e033      	b.n	8001a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2224      	movs	r2, #36	; 0x24
 8001a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0201 	bic.w	r2, r2, #1
 8001a48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e000      	b.n	8001a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a90:	2302      	movs	r3, #2
  }
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40007000 	.word	0x40007000

08001abc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aca:	d130      	bne.n	8001b2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001acc:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad8:	d038      	beq.n	8001b4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ae2:	4a1e      	ldr	r2, [pc, #120]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2232      	movs	r2, #50	; 0x32
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	0c9b      	lsrs	r3, r3, #18
 8001afc:	3301      	adds	r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b00:	e002      	b.n	8001b08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b08:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b14:	d102      	bne.n	8001b1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f2      	bne.n	8001b02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b28:	d110      	bne.n	8001b4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e00f      	b.n	8001b4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b3a:	d007      	beq.n	8001b4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b44:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	20000040 	.word	0x20000040
 8001b64:	431bde83 	.word	0x431bde83

08001b68 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b76:	6053      	str	r3, [r2, #4]
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40007000 	.word	0x40007000

08001b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d102      	bne.n	8001b9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f000 bc16 	b.w	80023c8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9c:	4ba0      	ldr	r3, [pc, #640]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba6:	4b9e      	ldr	r3, [pc, #632]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 80e4 	beq.w	8001d86 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d007      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x4c>
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	2b0c      	cmp	r3, #12
 8001bc8:	f040 808b 	bne.w	8001ce2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	f040 8087 	bne.w	8001ce2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bd4:	4b92      	ldr	r3, [pc, #584]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_OscConfig+0x64>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e3ed      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a1a      	ldr	r2, [r3, #32]
 8001bf0:	4b8b      	ldr	r3, [pc, #556]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d004      	beq.n	8001c06 <HAL_RCC_OscConfig+0x7e>
 8001bfc:	4b88      	ldr	r3, [pc, #544]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c04:	e005      	b.n	8001c12 <HAL_RCC_OscConfig+0x8a>
 8001c06:	4b86      	ldr	r3, [pc, #536]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d223      	bcs.n	8001c5e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 fd48 	bl	80026b0 <RCC_SetFlashLatencyFromMSIRange>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e3ce      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c2a:	4b7d      	ldr	r3, [pc, #500]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a7c      	ldr	r2, [pc, #496]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	4b7a      	ldr	r3, [pc, #488]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	4977      	ldr	r1, [pc, #476]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c48:	4b75      	ldr	r3, [pc, #468]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	021b      	lsls	r3, r3, #8
 8001c56:	4972      	ldr	r1, [pc, #456]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
 8001c5c:	e025      	b.n	8001caa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c5e:	4b70      	ldr	r3, [pc, #448]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a6f      	ldr	r2, [pc, #444]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c64:	f043 0308 	orr.w	r3, r3, #8
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b6d      	ldr	r3, [pc, #436]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	496a      	ldr	r1, [pc, #424]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c7c:	4b68      	ldr	r3, [pc, #416]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	4965      	ldr	r1, [pc, #404]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d109      	bne.n	8001caa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fd08 	bl	80026b0 <RCC_SetFlashLatencyFromMSIRange>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e38e      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001caa:	f000 fc75 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	4b5b      	ldr	r3, [pc, #364]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	495a      	ldr	r1, [pc, #360]	; (8001e24 <HAL_RCC_OscConfig+0x29c>)
 8001cbc:	5ccb      	ldrb	r3, [r1, r3]
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc6:	4a58      	ldr	r2, [pc, #352]	; (8001e28 <HAL_RCC_OscConfig+0x2a0>)
 8001cc8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cca:	4b58      	ldr	r3, [pc, #352]	; (8001e2c <HAL_RCC_OscConfig+0x2a4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fe64 	bl	800099c <HAL_InitTick>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d052      	beq.n	8001d84 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	e372      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d032      	beq.n	8001d50 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cea:	4b4d      	ldr	r3, [pc, #308]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a4c      	ldr	r2, [pc, #304]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cf6:	f7fe fea1 	bl	8000a3c <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cfe:	f7fe fe9d 	bl	8000a3c <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e35b      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d10:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d1c:	4b40      	ldr	r3, [pc, #256]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a3f      	ldr	r2, [pc, #252]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d22:	f043 0308 	orr.w	r3, r3, #8
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	493a      	ldr	r1, [pc, #232]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d3a:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	021b      	lsls	r3, r3, #8
 8001d48:	4935      	ldr	r1, [pc, #212]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]
 8001d4e:	e01a      	b.n	8001d86 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d50:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a32      	ldr	r2, [pc, #200]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d56:	f023 0301 	bic.w	r3, r3, #1
 8001d5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d5c:	f7fe fe6e 	bl	8000a3c <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d64:	f7fe fe6a 	bl	8000a3c <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e328      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d76:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x1dc>
 8001d82:	e000      	b.n	8001d86 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d073      	beq.n	8001e7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_OscConfig+0x21c>
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	2b0c      	cmp	r3, #12
 8001d9c:	d10e      	bne.n	8001dbc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d10b      	bne.n	8001dbc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d063      	beq.n	8001e78 <HAL_RCC_OscConfig+0x2f0>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d15f      	bne.n	8001e78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e305      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc4:	d106      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x24c>
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e01d      	b.n	8001e10 <HAL_RCC_OscConfig+0x288>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x270>
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a0c      	ldr	r2, [pc, #48]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0x288>
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01b      	beq.n	8001e50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7fe fe10 	bl	8000a3c <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e1e:	e010      	b.n	8001e42 <HAL_RCC_OscConfig+0x2ba>
 8001e20:	40021000 	.word	0x40021000
 8001e24:	08003174 	.word	0x08003174
 8001e28:	20000040 	.word	0x20000040
 8001e2c:	20000044 	.word	0x20000044
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e30:	f7fe fe04 	bl	8000a3c <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	; 0x64
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e2c2      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e42:	4baf      	ldr	r3, [pc, #700]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x2a8>
 8001e4e:	e014      	b.n	8001e7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7fe fdf4 	bl	8000a3c <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e58:	f7fe fdf0 	bl	8000a3c <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b64      	cmp	r3, #100	; 0x64
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e2ae      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e6a:	4ba5      	ldr	r3, [pc, #660]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x2d0>
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d060      	beq.n	8001f48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_OscConfig+0x310>
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d119      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d116      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e98:	4b99      	ldr	r3, [pc, #612]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x328>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e28b      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb0:	4b93      	ldr	r3, [pc, #588]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	061b      	lsls	r3, r3, #24
 8001ebe:	4990      	ldr	r1, [pc, #576]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ec4:	e040      	b.n	8001f48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d023      	beq.n	8001f16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ece:	4b8c      	ldr	r3, [pc, #560]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a8b      	ldr	r2, [pc, #556]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eda:	f7fe fdaf 	bl	8000a3c <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee2:	f7fe fdab 	bl	8000a3c <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e269      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef4:	4b82      	ldr	r3, [pc, #520]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f00:	4b7f      	ldr	r3, [pc, #508]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	061b      	lsls	r3, r3, #24
 8001f0e:	497c      	ldr	r1, [pc, #496]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
 8001f14:	e018      	b.n	8001f48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f16:	4b7a      	ldr	r3, [pc, #488]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a79      	ldr	r2, [pc, #484]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7fe fd8b 	bl	8000a3c <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2a:	f7fe fd87 	bl	8000a3c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e245      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f3c:	4b70      	ldr	r3, [pc, #448]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d03c      	beq.n	8001fce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01c      	beq.n	8001f96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5c:	4b68      	ldr	r3, [pc, #416]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f62:	4a67      	ldr	r2, [pc, #412]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6c:	f7fe fd66 	bl	8000a3c <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f74:	f7fe fd62 	bl	8000a3c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e220      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f86:	4b5e      	ldr	r3, [pc, #376]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0ef      	beq.n	8001f74 <HAL_RCC_OscConfig+0x3ec>
 8001f94:	e01b      	b.n	8001fce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f96:	4b5a      	ldr	r3, [pc, #360]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9c:	4a58      	ldr	r2, [pc, #352]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa6:	f7fe fd49 	bl	8000a3c <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fae:	f7fe fd45 	bl	8000a3c <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e203      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fc0:	4b4f      	ldr	r3, [pc, #316]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1ef      	bne.n	8001fae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80a6 	beq.w	8002128 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fe0:	4b47      	ldr	r3, [pc, #284]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10d      	bne.n	8002008 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fec:	4b44      	ldr	r3, [pc, #272]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	4a43      	ldr	r2, [pc, #268]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff8:	4b41      	ldr	r3, [pc, #260]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002004:	2301      	movs	r3, #1
 8002006:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002008:	4b3e      	ldr	r3, [pc, #248]	; (8002104 <HAL_RCC_OscConfig+0x57c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d118      	bne.n	8002046 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002014:	4b3b      	ldr	r3, [pc, #236]	; (8002104 <HAL_RCC_OscConfig+0x57c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a3a      	ldr	r2, [pc, #232]	; (8002104 <HAL_RCC_OscConfig+0x57c>)
 800201a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002020:	f7fe fd0c 	bl	8000a3c <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002028:	f7fe fd08 	bl	8000a3c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e1c6      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800203a:	4b32      	ldr	r3, [pc, #200]	; (8002104 <HAL_RCC_OscConfig+0x57c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d108      	bne.n	8002060 <HAL_RCC_OscConfig+0x4d8>
 800204e:	4b2c      	ldr	r3, [pc, #176]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8002050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002054:	4a2a      	ldr	r2, [pc, #168]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800205e:	e024      	b.n	80020aa <HAL_RCC_OscConfig+0x522>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b05      	cmp	r3, #5
 8002066:	d110      	bne.n	800208a <HAL_RCC_OscConfig+0x502>
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206e:	4a24      	ldr	r2, [pc, #144]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8002070:	f043 0304 	orr.w	r3, r3, #4
 8002074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002078:	4b21      	ldr	r3, [pc, #132]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	4a20      	ldr	r2, [pc, #128]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002088:	e00f      	b.n	80020aa <HAL_RCC_OscConfig+0x522>
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002090:	4a1b      	ldr	r2, [pc, #108]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8002092:	f023 0301 	bic.w	r3, r3, #1
 8002096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a0:	4a17      	ldr	r2, [pc, #92]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 80020a2:	f023 0304 	bic.w	r3, r3, #4
 80020a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d016      	beq.n	80020e0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b2:	f7fe fcc3 	bl	8000a3c <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7fe fcbf 	bl	8000a3c <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e17b      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0ed      	beq.n	80020ba <HAL_RCC_OscConfig+0x532>
 80020de:	e01a      	b.n	8002116 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e0:	f7fe fcac 	bl	8000a3c <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020e6:	e00f      	b.n	8002108 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e8:	f7fe fca8 	bl	8000a3c <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d906      	bls.n	8002108 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e164      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002108:	4ba8      	ldr	r3, [pc, #672]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1e8      	bne.n	80020e8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002116:	7ffb      	ldrb	r3, [r7, #31]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d105      	bne.n	8002128 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211c:	4ba3      	ldr	r3, [pc, #652]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	4aa2      	ldr	r2, [pc, #648]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 8002122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002126:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	2b00      	cmp	r3, #0
 8002132:	d03c      	beq.n	80021ae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01c      	beq.n	8002176 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800213c:	4b9b      	ldr	r3, [pc, #620]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 800213e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002142:	4a9a      	ldr	r2, [pc, #616]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7fe fc76 	bl	8000a3c <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002154:	f7fe fc72 	bl	8000a3c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e130      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002166:	4b91      	ldr	r3, [pc, #580]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 8002168:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0ef      	beq.n	8002154 <HAL_RCC_OscConfig+0x5cc>
 8002174:	e01b      	b.n	80021ae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002176:	4b8d      	ldr	r3, [pc, #564]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 8002178:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800217c:	4a8b      	ldr	r2, [pc, #556]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 800217e:	f023 0301 	bic.w	r3, r3, #1
 8002182:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002186:	f7fe fc59 	bl	8000a3c <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800218e:	f7fe fc55 	bl	8000a3c <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e113      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021a0:	4b82      	ldr	r3, [pc, #520]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 80021a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1ef      	bne.n	800218e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 8107 	beq.w	80023c6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	2b02      	cmp	r3, #2
 80021be:	f040 80cb 	bne.w	8002358 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021c2:	4b7a      	ldr	r3, [pc, #488]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f003 0203 	and.w	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d12c      	bne.n	8002230 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	3b01      	subs	r3, #1
 80021e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d123      	bne.n	8002230 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d11b      	bne.n	8002230 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002202:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002204:	429a      	cmp	r2, r3
 8002206:	d113      	bne.n	8002230 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002212:	085b      	lsrs	r3, r3, #1
 8002214:	3b01      	subs	r3, #1
 8002216:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002218:	429a      	cmp	r2, r3
 800221a:	d109      	bne.n	8002230 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	085b      	lsrs	r3, r3, #1
 8002228:	3b01      	subs	r3, #1
 800222a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800222c:	429a      	cmp	r2, r3
 800222e:	d06d      	beq.n	800230c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	2b0c      	cmp	r3, #12
 8002234:	d068      	beq.n	8002308 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002236:	4b5d      	ldr	r3, [pc, #372]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002242:	4b5a      	ldr	r3, [pc, #360]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e0ba      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002252:	4b56      	ldr	r3, [pc, #344]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a55      	ldr	r2, [pc, #340]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 8002258:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800225c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800225e:	f7fe fbed 	bl	8000a3c <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002266:	f7fe fbe9 	bl	8000a3c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e0a7      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002278:	4b4c      	ldr	r3, [pc, #304]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f0      	bne.n	8002266 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002284:	4b49      	ldr	r3, [pc, #292]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	4b49      	ldr	r3, [pc, #292]	; (80023b0 <HAL_RCC_OscConfig+0x828>)
 800228a:	4013      	ands	r3, r2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002294:	3a01      	subs	r2, #1
 8002296:	0112      	lsls	r2, r2, #4
 8002298:	4311      	orrs	r1, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800229e:	0212      	lsls	r2, r2, #8
 80022a0:	4311      	orrs	r1, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022a6:	0852      	lsrs	r2, r2, #1
 80022a8:	3a01      	subs	r2, #1
 80022aa:	0552      	lsls	r2, r2, #21
 80022ac:	4311      	orrs	r1, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022b2:	0852      	lsrs	r2, r2, #1
 80022b4:	3a01      	subs	r2, #1
 80022b6:	0652      	lsls	r2, r2, #25
 80022b8:	4311      	orrs	r1, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022be:	06d2      	lsls	r2, r2, #27
 80022c0:	430a      	orrs	r2, r1
 80022c2:	493a      	ldr	r1, [pc, #232]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022c8:	4b38      	ldr	r3, [pc, #224]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a37      	ldr	r2, [pc, #220]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 80022ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022d4:	4b35      	ldr	r3, [pc, #212]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4a34      	ldr	r2, [pc, #208]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 80022da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022e0:	f7fe fbac 	bl	8000a3c <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e8:	f7fe fba8 	bl	8000a3c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e066      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fa:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002306:	e05e      	b.n	80023c6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e05d      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230c:	4b27      	ldr	r3, [pc, #156]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d156      	bne.n	80023c6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002318:	4b24      	ldr	r3, [pc, #144]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a23      	ldr	r2, [pc, #140]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 800231e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002322:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002324:	4b21      	ldr	r3, [pc, #132]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4a20      	ldr	r2, [pc, #128]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 800232a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800232e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002330:	f7fe fb84 	bl	8000a3c <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002338:	f7fe fb80 	bl	8000a3c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e03e      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234a:	4b18      	ldr	r3, [pc, #96]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x7b0>
 8002356:	e036      	b.n	80023c6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2b0c      	cmp	r3, #12
 800235c:	d031      	beq.n	80023c2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235e:	4b13      	ldr	r3, [pc, #76]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a12      	ldr	r2, [pc, #72]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 8002364:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002368:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d105      	bne.n	8002382 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	4a0c      	ldr	r2, [pc, #48]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 800237c:	f023 0303 	bic.w	r3, r3, #3
 8002380:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	4a09      	ldr	r2, [pc, #36]	; (80023ac <HAL_RCC_OscConfig+0x824>)
 8002388:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800238c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002390:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe fb53 	bl	8000a3c <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002398:	e00c      	b.n	80023b4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239a:	f7fe fb4f 	bl	8000a3c <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d905      	bls.n	80023b4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e00d      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
 80023ac:	40021000 	.word	0x40021000
 80023b0:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_RCC_OscConfig+0x848>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1ec      	bne.n	800239a <HAL_RCC_OscConfig+0x812>
 80023c0:	e001      	b.n	80023c6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000

080023d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0c8      	b.n	800257a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023e8:	4b66      	ldr	r3, [pc, #408]	; (8002584 <HAL_RCC_ClockConfig+0x1b0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d910      	bls.n	8002418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b63      	ldr	r3, [pc, #396]	; (8002584 <HAL_RCC_ClockConfig+0x1b0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 0207 	bic.w	r2, r3, #7
 80023fe:	4961      	ldr	r1, [pc, #388]	; (8002584 <HAL_RCC_ClockConfig+0x1b0>)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b5f      	ldr	r3, [pc, #380]	; (8002584 <HAL_RCC_ClockConfig+0x1b0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0b0      	b.n	800257a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d04c      	beq.n	80024be <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b03      	cmp	r3, #3
 800242a:	d107      	bne.n	800243c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242c:	4b56      	ldr	r3, [pc, #344]	; (8002588 <HAL_RCC_ClockConfig+0x1b4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d121      	bne.n	800247c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e09e      	b.n	800257a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d107      	bne.n	8002454 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002444:	4b50      	ldr	r3, [pc, #320]	; (8002588 <HAL_RCC_ClockConfig+0x1b4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d115      	bne.n	800247c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e092      	b.n	800257a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d107      	bne.n	800246c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800245c:	4b4a      	ldr	r3, [pc, #296]	; (8002588 <HAL_RCC_ClockConfig+0x1b4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d109      	bne.n	800247c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e086      	b.n	800257a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800246c:	4b46      	ldr	r3, [pc, #280]	; (8002588 <HAL_RCC_ClockConfig+0x1b4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e07e      	b.n	800257a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800247c:	4b42      	ldr	r3, [pc, #264]	; (8002588 <HAL_RCC_ClockConfig+0x1b4>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f023 0203 	bic.w	r2, r3, #3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	493f      	ldr	r1, [pc, #252]	; (8002588 <HAL_RCC_ClockConfig+0x1b4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800248e:	f7fe fad5 	bl	8000a3c <HAL_GetTick>
 8002492:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002494:	e00a      	b.n	80024ac <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002496:	f7fe fad1 	bl	8000a3c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e066      	b.n	800257a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ac:	4b36      	ldr	r3, [pc, #216]	; (8002588 <HAL_RCC_ClockConfig+0x1b4>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 020c 	and.w	r2, r3, #12
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d1eb      	bne.n	8002496 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ca:	4b2f      	ldr	r3, [pc, #188]	; (8002588 <HAL_RCC_ClockConfig+0x1b4>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	492c      	ldr	r1, [pc, #176]	; (8002588 <HAL_RCC_ClockConfig+0x1b4>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024dc:	4b29      	ldr	r3, [pc, #164]	; (8002584 <HAL_RCC_ClockConfig+0x1b0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d210      	bcs.n	800250c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b26      	ldr	r3, [pc, #152]	; (8002584 <HAL_RCC_ClockConfig+0x1b0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 0207 	bic.w	r2, r3, #7
 80024f2:	4924      	ldr	r1, [pc, #144]	; (8002584 <HAL_RCC_ClockConfig+0x1b0>)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b22      	ldr	r3, [pc, #136]	; (8002584 <HAL_RCC_ClockConfig+0x1b0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e036      	b.n	800257a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <HAL_RCC_ClockConfig+0x1b4>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4918      	ldr	r1, [pc, #96]	; (8002588 <HAL_RCC_ClockConfig+0x1b4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002536:	4b14      	ldr	r3, [pc, #80]	; (8002588 <HAL_RCC_ClockConfig+0x1b4>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4910      	ldr	r1, [pc, #64]	; (8002588 <HAL_RCC_ClockConfig+0x1b4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800254a:	f000 f825 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 800254e:	4602      	mov	r2, r0
 8002550:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <HAL_RCC_ClockConfig+0x1b4>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	490c      	ldr	r1, [pc, #48]	; (800258c <HAL_RCC_ClockConfig+0x1b8>)
 800255c:	5ccb      	ldrb	r3, [r1, r3]
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	fa22 f303 	lsr.w	r3, r2, r3
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fa14 	bl	800099c <HAL_InitTick>
 8002574:	4603      	mov	r3, r0
 8002576:	72fb      	strb	r3, [r7, #11]

  return status;
 8002578:	7afb      	ldrb	r3, [r7, #11]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40022000 	.word	0x40022000
 8002588:	40021000 	.word	0x40021000
 800258c:	08003174 	.word	0x08003174
 8002590:	20000040 	.word	0x20000040
 8002594:	20000044 	.word	0x20000044

08002598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	; 0x24
 800259c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	2300      	movs	r3, #0
 80025a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a6:	4b3e      	ldr	r3, [pc, #248]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025b0:	4b3b      	ldr	r3, [pc, #236]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x34>
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	2b0c      	cmp	r3, #12
 80025c4:	d121      	bne.n	800260a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d11e      	bne.n	800260a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025cc:	4b34      	ldr	r3, [pc, #208]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d107      	bne.n	80025e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025d8:	4b31      	ldr	r3, [pc, #196]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	e005      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025e8:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025f4:	4a2b      	ldr	r2, [pc, #172]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10d      	bne.n	8002620 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	2b04      	cmp	r3, #4
 800260e:	d102      	bne.n	8002616 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002610:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002612:	61bb      	str	r3, [r7, #24]
 8002614:	e004      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	2b08      	cmp	r3, #8
 800261a:	d101      	bne.n	8002620 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800261c:	4b23      	ldr	r3, [pc, #140]	; (80026ac <HAL_RCC_GetSysClockFreq+0x114>)
 800261e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	2b0c      	cmp	r3, #12
 8002624:	d134      	bne.n	8002690 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002626:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d003      	beq.n	800263e <HAL_RCC_GetSysClockFreq+0xa6>
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b03      	cmp	r3, #3
 800263a:	d003      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0xac>
 800263c:	e005      	b.n	800264a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800263e:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002640:	617b      	str	r3, [r7, #20]
      break;
 8002642:	e005      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_RCC_GetSysClockFreq+0x114>)
 8002646:	617b      	str	r3, [r7, #20]
      break;
 8002648:	e002      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	617b      	str	r3, [r7, #20]
      break;
 800264e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	3301      	adds	r3, #1
 800265c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	fb02 f203 	mul.w	r2, r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002676:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	0e5b      	lsrs	r3, r3, #25
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	3301      	adds	r3, #1
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	fbb2 f3f3 	udiv	r3, r2, r3
 800268e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002690:	69bb      	ldr	r3, [r7, #24]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	; 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000
 80026a4:	08003184 	.word	0x08003184
 80026a8:	00f42400 	.word	0x00f42400
 80026ac:	007a1200 	.word	0x007a1200

080026b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026b8:	2300      	movs	r3, #0
 80026ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026bc:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026c8:	f7ff f9ea 	bl	8001aa0 <HAL_PWREx_GetVoltageRange>
 80026cc:	6178      	str	r0, [r7, #20]
 80026ce:	e014      	b.n	80026fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026d0:	4b25      	ldr	r3, [pc, #148]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	4a24      	ldr	r2, [pc, #144]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026da:	6593      	str	r3, [r2, #88]	; 0x58
 80026dc:	4b22      	ldr	r3, [pc, #136]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026e8:	f7ff f9da 	bl	8001aa0 <HAL_PWREx_GetVoltageRange>
 80026ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026ee:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002700:	d10b      	bne.n	800271a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b80      	cmp	r3, #128	; 0x80
 8002706:	d919      	bls.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2ba0      	cmp	r3, #160	; 0xa0
 800270c:	d902      	bls.n	8002714 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800270e:	2302      	movs	r3, #2
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	e013      	b.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002714:	2301      	movs	r3, #1
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	e010      	b.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b80      	cmp	r3, #128	; 0x80
 800271e:	d902      	bls.n	8002726 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002720:	2303      	movs	r3, #3
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	e00a      	b.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d102      	bne.n	8002732 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800272c:	2302      	movs	r3, #2
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	e004      	b.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b70      	cmp	r3, #112	; 0x70
 8002736:	d101      	bne.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002738:	2301      	movs	r3, #1
 800273a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 0207 	bic.w	r2, r3, #7
 8002744:	4909      	ldr	r1, [pc, #36]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800274c:	4b07      	ldr	r3, [pc, #28]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	429a      	cmp	r2, r3
 8002758:	d001      	beq.n	800275e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000
 800276c:	40022000 	.word	0x40022000

08002770 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002778:	2300      	movs	r3, #0
 800277a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800277c:	2300      	movs	r3, #0
 800277e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002788:	2b00      	cmp	r3, #0
 800278a:	d041      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002790:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002794:	d02a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002796:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800279a:	d824      	bhi.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800279c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027a0:	d008      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027a6:	d81e      	bhi.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027b0:	d010      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027b2:	e018      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027b4:	4b86      	ldr	r3, [pc, #536]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4a85      	ldr	r2, [pc, #532]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027c0:	e015      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3304      	adds	r3, #4
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 facd 	bl	8002d68 <RCCEx_PLLSAI1_Config>
 80027ce:	4603      	mov	r3, r0
 80027d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027d2:	e00c      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3320      	adds	r3, #32
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fbb6 	bl	8002f4c <RCCEx_PLLSAI2_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027e4:	e003      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	74fb      	strb	r3, [r7, #19]
      break;
 80027ea:	e000      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ee:	7cfb      	ldrb	r3, [r7, #19]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10b      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027f4:	4b76      	ldr	r3, [pc, #472]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002802:	4973      	ldr	r1, [pc, #460]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800280a:	e001      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d041      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002820:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002824:	d02a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002826:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800282a:	d824      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800282c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002830:	d008      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002832:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002836:	d81e      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800283c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002840:	d010      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002842:	e018      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002844:	4b62      	ldr	r3, [pc, #392]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4a61      	ldr	r2, [pc, #388]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002850:	e015      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3304      	adds	r3, #4
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fa85 	bl	8002d68 <RCCEx_PLLSAI1_Config>
 800285e:	4603      	mov	r3, r0
 8002860:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002862:	e00c      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3320      	adds	r3, #32
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fb6e 	bl	8002f4c <RCCEx_PLLSAI2_Config>
 8002870:	4603      	mov	r3, r0
 8002872:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002874:	e003      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	74fb      	strb	r3, [r7, #19]
      break;
 800287a:	e000      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800287c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10b      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002884:	4b52      	ldr	r3, [pc, #328]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002892:	494f      	ldr	r1, [pc, #316]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800289a:	e001      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800289c:	7cfb      	ldrb	r3, [r7, #19]
 800289e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80a0 	beq.w	80029ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028b2:	4b47      	ldr	r3, [pc, #284]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80028c2:	2300      	movs	r3, #0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00d      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c8:	4b41      	ldr	r3, [pc, #260]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028cc:	4a40      	ldr	r2, [pc, #256]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d2:	6593      	str	r3, [r2, #88]	; 0x58
 80028d4:	4b3e      	ldr	r3, [pc, #248]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e0:	2301      	movs	r3, #1
 80028e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028e4:	4b3b      	ldr	r3, [pc, #236]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a3a      	ldr	r2, [pc, #232]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028f0:	f7fe f8a4 	bl	8000a3c <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028f6:	e009      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f8:	f7fe f8a0 	bl	8000a3c <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d902      	bls.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	74fb      	strb	r3, [r7, #19]
        break;
 800290a:	e005      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800290c:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ef      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d15c      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800291e:	4b2c      	ldr	r3, [pc, #176]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002928:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01f      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	429a      	cmp	r2, r3
 800293a:	d019      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800293c:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002946:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002948:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294e:	4a20      	ldr	r2, [pc, #128]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002958:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295e:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002968:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297a:	f7fe f85f 	bl	8000a3c <HAL_GetTick>
 800297e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002980:	e00b      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7fe f85b 	bl	8000a3c <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002990:	4293      	cmp	r3, r2
 8002992:	d902      	bls.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	74fb      	strb	r3, [r7, #19]
            break;
 8002998:	e006      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0ec      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80029a8:	7cfb      	ldrb	r3, [r7, #19]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029be:	4904      	ldr	r1, [pc, #16]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029c6:	e009      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	74bb      	strb	r3, [r7, #18]
 80029cc:	e006      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029dc:	7c7b      	ldrb	r3, [r7, #17]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d105      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e2:	4ba6      	ldr	r3, [pc, #664]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	4aa5      	ldr	r2, [pc, #660]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029fa:	4ba0      	ldr	r3, [pc, #640]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a00:	f023 0203 	bic.w	r2, r3, #3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	499c      	ldr	r1, [pc, #624]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a1c:	4b97      	ldr	r3, [pc, #604]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a22:	f023 020c 	bic.w	r2, r3, #12
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2a:	4994      	ldr	r1, [pc, #592]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a3e:	4b8f      	ldr	r3, [pc, #572]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	498b      	ldr	r1, [pc, #556]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a60:	4b86      	ldr	r3, [pc, #536]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	4983      	ldr	r1, [pc, #524]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a82:	4b7e      	ldr	r3, [pc, #504]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a90:	497a      	ldr	r1, [pc, #488]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00a      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aa4:	4b75      	ldr	r3, [pc, #468]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	4972      	ldr	r1, [pc, #456]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ac6:	4b6d      	ldr	r3, [pc, #436]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002acc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad4:	4969      	ldr	r1, [pc, #420]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ae8:	4b64      	ldr	r3, [pc, #400]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002af6:	4961      	ldr	r1, [pc, #388]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b0a:	4b5c      	ldr	r3, [pc, #368]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b18:	4958      	ldr	r1, [pc, #352]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00a      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b2c:	4b53      	ldr	r3, [pc, #332]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3a:	4950      	ldr	r1, [pc, #320]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b4e:	4b4b      	ldr	r3, [pc, #300]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5c:	4947      	ldr	r1, [pc, #284]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b70:	4b42      	ldr	r3, [pc, #264]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b76:	f023 0203 	bic.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7e:	493f      	ldr	r1, [pc, #252]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d028      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b92:	4b3a      	ldr	r3, [pc, #232]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	4936      	ldr	r1, [pc, #216]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bb0:	d106      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bb2:	4b32      	ldr	r3, [pc, #200]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	4a31      	ldr	r2, [pc, #196]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bbc:	60d3      	str	r3, [r2, #12]
 8002bbe:	e011      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	2101      	movs	r1, #1
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 f8c9 	bl	8002d68 <RCCEx_PLLSAI1_Config>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bda:	7cfb      	ldrb	r3, [r7, #19]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d028      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bf0:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bfe:	491f      	ldr	r1, [pc, #124]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c10:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4a19      	ldr	r2, [pc, #100]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c1a:	60d3      	str	r3, [r2, #12]
 8002c1c:	e011      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c26:	d10c      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f89a 	bl	8002d68 <RCCEx_PLLSAI1_Config>
 8002c34:	4603      	mov	r3, r0
 8002c36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c38:	7cfb      	ldrb	r3, [r7, #19]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002c3e:	7cfb      	ldrb	r3, [r7, #19]
 8002c40:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d02a      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c5c:	4907      	ldr	r1, [pc, #28]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c6c:	d108      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c6e:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	4a02      	ldr	r2, [pc, #8]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c78:	60d3      	str	r3, [r2, #12]
 8002c7a:	e013      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002c7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	2101      	movs	r1, #1
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 f869 	bl	8002d68 <RCCEx_PLLSAI1_Config>
 8002c96:	4603      	mov	r3, r0
 8002c98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c9a:	7cfb      	ldrb	r3, [r7, #19]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002ca0:	7cfb      	ldrb	r3, [r7, #19]
 8002ca2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d02f      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cb0:	4b2c      	ldr	r3, [pc, #176]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cbe:	4929      	ldr	r1, [pc, #164]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cce:	d10d      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	2102      	movs	r1, #2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f846 	bl	8002d68 <RCCEx_PLLSAI1_Config>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d014      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002ce6:	7cfb      	ldrb	r3, [r7, #19]
 8002ce8:	74bb      	strb	r3, [r7, #18]
 8002cea:	e011      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3320      	adds	r3, #32
 8002cfa:	2102      	movs	r1, #2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 f925 	bl	8002f4c <RCCEx_PLLSAI2_Config>
 8002d02:	4603      	mov	r3, r0
 8002d04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d06:	7cfb      	ldrb	r3, [r7, #19]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002d0c:	7cfb      	ldrb	r3, [r7, #19]
 8002d0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00b      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d1c:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d2c:	490d      	ldr	r1, [pc, #52]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00b      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d40:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d50:	4904      	ldr	r1, [pc, #16]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d58:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40021000 	.word	0x40021000

08002d68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d76:	4b74      	ldr	r3, [pc, #464]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d018      	beq.n	8002db4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d82:	4b71      	ldr	r3, [pc, #452]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f003 0203 	and.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d10d      	bne.n	8002dae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
       ||
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d9a:	4b6b      	ldr	r3, [pc, #428]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
       ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d047      	beq.n	8002e3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
 8002db2:	e044      	b.n	8002e3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d018      	beq.n	8002dee <RCCEx_PLLSAI1_Config+0x86>
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d825      	bhi.n	8002e0c <RCCEx_PLLSAI1_Config+0xa4>
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d002      	beq.n	8002dca <RCCEx_PLLSAI1_Config+0x62>
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d009      	beq.n	8002ddc <RCCEx_PLLSAI1_Config+0x74>
 8002dc8:	e020      	b.n	8002e0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dca:	4b5f      	ldr	r3, [pc, #380]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d11d      	bne.n	8002e12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dda:	e01a      	b.n	8002e12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ddc:	4b5a      	ldr	r3, [pc, #360]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d116      	bne.n	8002e16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dec:	e013      	b.n	8002e16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dee:	4b56      	ldr	r3, [pc, #344]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10f      	bne.n	8002e1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dfa:	4b53      	ldr	r3, [pc, #332]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d109      	bne.n	8002e1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e0a:	e006      	b.n	8002e1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e10:	e004      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e12:	bf00      	nop
 8002e14:	e002      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e16:	bf00      	nop
 8002e18:	e000      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10d      	bne.n	8002e3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e22:	4b49      	ldr	r3, [pc, #292]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6819      	ldr	r1, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	430b      	orrs	r3, r1
 8002e38:	4943      	ldr	r1, [pc, #268]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d17c      	bne.n	8002f3e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e44:	4b40      	ldr	r3, [pc, #256]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a3f      	ldr	r2, [pc, #252]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e50:	f7fd fdf4 	bl	8000a3c <HAL_GetTick>
 8002e54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e56:	e009      	b.n	8002e6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e58:	f7fd fdf0 	bl	8000a3c <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d902      	bls.n	8002e6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	73fb      	strb	r3, [r7, #15]
        break;
 8002e6a:	e005      	b.n	8002e78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e6c:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1ef      	bne.n	8002e58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d15f      	bne.n	8002f3e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d110      	bne.n	8002ea6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e84:	4b30      	ldr	r3, [pc, #192]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002e8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6892      	ldr	r2, [r2, #8]
 8002e94:	0211      	lsls	r1, r2, #8
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68d2      	ldr	r2, [r2, #12]
 8002e9a:	06d2      	lsls	r2, r2, #27
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	492a      	ldr	r1, [pc, #168]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	610b      	str	r3, [r1, #16]
 8002ea4:	e027      	b.n	8002ef6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d112      	bne.n	8002ed2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eac:	4b26      	ldr	r3, [pc, #152]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002eb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6892      	ldr	r2, [r2, #8]
 8002ebc:	0211      	lsls	r1, r2, #8
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6912      	ldr	r2, [r2, #16]
 8002ec2:	0852      	lsrs	r2, r2, #1
 8002ec4:	3a01      	subs	r2, #1
 8002ec6:	0552      	lsls	r2, r2, #21
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	491f      	ldr	r1, [pc, #124]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	610b      	str	r3, [r1, #16]
 8002ed0:	e011      	b.n	8002ef6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ed2:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002eda:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6892      	ldr	r2, [r2, #8]
 8002ee2:	0211      	lsls	r1, r2, #8
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6952      	ldr	r2, [r2, #20]
 8002ee8:	0852      	lsrs	r2, r2, #1
 8002eea:	3a01      	subs	r2, #1
 8002eec:	0652      	lsls	r2, r2, #25
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	4915      	ldr	r1, [pc, #84]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ef6:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a13      	ldr	r2, [pc, #76]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002efc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fd fd9b 	bl	8000a3c <HAL_GetTick>
 8002f06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f08:	e009      	b.n	8002f1e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f0a:	f7fd fd97 	bl	8000a3c <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d902      	bls.n	8002f1e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	73fb      	strb	r3, [r7, #15]
          break;
 8002f1c:	e005      	b.n	8002f2a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0ef      	beq.n	8002f0a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d106      	bne.n	8002f3e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f30:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	4903      	ldr	r1, [pc, #12]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40021000 	.word	0x40021000

08002f4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f5a:	4b69      	ldr	r3, [pc, #420]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d018      	beq.n	8002f98 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f66:	4b66      	ldr	r3, [pc, #408]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f003 0203 	and.w	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d10d      	bne.n	8002f92 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
       ||
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f7e:	4b60      	ldr	r3, [pc, #384]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	091b      	lsrs	r3, r3, #4
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
       ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d047      	beq.n	8003022 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
 8002f96:	e044      	b.n	8003022 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d018      	beq.n	8002fd2 <RCCEx_PLLSAI2_Config+0x86>
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d825      	bhi.n	8002ff0 <RCCEx_PLLSAI2_Config+0xa4>
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d002      	beq.n	8002fae <RCCEx_PLLSAI2_Config+0x62>
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d009      	beq.n	8002fc0 <RCCEx_PLLSAI2_Config+0x74>
 8002fac:	e020      	b.n	8002ff0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fae:	4b54      	ldr	r3, [pc, #336]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d11d      	bne.n	8002ff6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fbe:	e01a      	b.n	8002ff6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fc0:	4b4f      	ldr	r3, [pc, #316]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d116      	bne.n	8002ffa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fd0:	e013      	b.n	8002ffa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fd2:	4b4b      	ldr	r3, [pc, #300]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10f      	bne.n	8002ffe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fde:	4b48      	ldr	r3, [pc, #288]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d109      	bne.n	8002ffe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fee:	e006      	b.n	8002ffe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff4:	e004      	b.n	8003000 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ff6:	bf00      	nop
 8002ff8:	e002      	b.n	8003000 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ffa:	bf00      	nop
 8002ffc:	e000      	b.n	8003000 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ffe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10d      	bne.n	8003022 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003006:	4b3e      	ldr	r3, [pc, #248]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6819      	ldr	r1, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	3b01      	subs	r3, #1
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	430b      	orrs	r3, r1
 800301c:	4938      	ldr	r1, [pc, #224]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 800301e:	4313      	orrs	r3, r2
 8003020:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d166      	bne.n	80030f6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003028:	4b35      	ldr	r3, [pc, #212]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a34      	ldr	r2, [pc, #208]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 800302e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003034:	f7fd fd02 	bl	8000a3c <HAL_GetTick>
 8003038:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800303a:	e009      	b.n	8003050 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800303c:	f7fd fcfe 	bl	8000a3c <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d902      	bls.n	8003050 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	73fb      	strb	r3, [r7, #15]
        break;
 800304e:	e005      	b.n	800305c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003050:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1ef      	bne.n	800303c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d149      	bne.n	80030f6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d110      	bne.n	800308a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003068:	4b25      	ldr	r3, [pc, #148]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003070:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6892      	ldr	r2, [r2, #8]
 8003078:	0211      	lsls	r1, r2, #8
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68d2      	ldr	r2, [r2, #12]
 800307e:	06d2      	lsls	r2, r2, #27
 8003080:	430a      	orrs	r2, r1
 8003082:	491f      	ldr	r1, [pc, #124]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003084:	4313      	orrs	r3, r2
 8003086:	614b      	str	r3, [r1, #20]
 8003088:	e011      	b.n	80030ae <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800308a:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003092:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6892      	ldr	r2, [r2, #8]
 800309a:	0211      	lsls	r1, r2, #8
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6912      	ldr	r2, [r2, #16]
 80030a0:	0852      	lsrs	r2, r2, #1
 80030a2:	3a01      	subs	r2, #1
 80030a4:	0652      	lsls	r2, r2, #25
 80030a6:	430a      	orrs	r2, r1
 80030a8:	4915      	ldr	r1, [pc, #84]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030ae:	4b14      	ldr	r3, [pc, #80]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a13      	ldr	r2, [pc, #76]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ba:	f7fd fcbf 	bl	8000a3c <HAL_GetTick>
 80030be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030c0:	e009      	b.n	80030d6 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030c2:	f7fd fcbb 	bl	8000a3c <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d902      	bls.n	80030d6 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	73fb      	strb	r3, [r7, #15]
          break;
 80030d4:	e005      	b.n	80030e2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030d6:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0ef      	beq.n	80030c2 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d106      	bne.n	80030f6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	4903      	ldr	r1, [pc, #12]	; (8003100 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021000 	.word	0x40021000

08003104 <__libc_init_array>:
 8003104:	b570      	push	{r4, r5, r6, lr}
 8003106:	4d0d      	ldr	r5, [pc, #52]	; (800313c <__libc_init_array+0x38>)
 8003108:	4c0d      	ldr	r4, [pc, #52]	; (8003140 <__libc_init_array+0x3c>)
 800310a:	1b64      	subs	r4, r4, r5
 800310c:	10a4      	asrs	r4, r4, #2
 800310e:	2600      	movs	r6, #0
 8003110:	42a6      	cmp	r6, r4
 8003112:	d109      	bne.n	8003128 <__libc_init_array+0x24>
 8003114:	4d0b      	ldr	r5, [pc, #44]	; (8003144 <__libc_init_array+0x40>)
 8003116:	4c0c      	ldr	r4, [pc, #48]	; (8003148 <__libc_init_array+0x44>)
 8003118:	f000 f820 	bl	800315c <_init>
 800311c:	1b64      	subs	r4, r4, r5
 800311e:	10a4      	asrs	r4, r4, #2
 8003120:	2600      	movs	r6, #0
 8003122:	42a6      	cmp	r6, r4
 8003124:	d105      	bne.n	8003132 <__libc_init_array+0x2e>
 8003126:	bd70      	pop	{r4, r5, r6, pc}
 8003128:	f855 3b04 	ldr.w	r3, [r5], #4
 800312c:	4798      	blx	r3
 800312e:	3601      	adds	r6, #1
 8003130:	e7ee      	b.n	8003110 <__libc_init_array+0xc>
 8003132:	f855 3b04 	ldr.w	r3, [r5], #4
 8003136:	4798      	blx	r3
 8003138:	3601      	adds	r6, #1
 800313a:	e7f2      	b.n	8003122 <__libc_init_array+0x1e>
 800313c:	080031b4 	.word	0x080031b4
 8003140:	080031b4 	.word	0x080031b4
 8003144:	080031b4 	.word	0x080031b4
 8003148:	080031b8 	.word	0x080031b8

0800314c <memset>:
 800314c:	4402      	add	r2, r0
 800314e:	4603      	mov	r3, r0
 8003150:	4293      	cmp	r3, r2
 8003152:	d100      	bne.n	8003156 <memset+0xa>
 8003154:	4770      	bx	lr
 8003156:	f803 1b01 	strb.w	r1, [r3], #1
 800315a:	e7f9      	b.n	8003150 <memset+0x4>

0800315c <_init>:
 800315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315e:	bf00      	nop
 8003160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003162:	bc08      	pop	{r3}
 8003164:	469e      	mov	lr, r3
 8003166:	4770      	bx	lr

08003168 <_fini>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	bf00      	nop
 800316c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316e:	bc08      	pop	{r3}
 8003170:	469e      	mov	lr, r3
 8003172:	4770      	bx	lr
