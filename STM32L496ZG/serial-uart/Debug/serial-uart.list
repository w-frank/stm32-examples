
serial-uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f34  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080030e0  080030e0  000130e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003144  08003144  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003144  08003144  00013144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800314c  0800314c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800314c  0800314c  0001314c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08003160  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08003160  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a188  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000170c  00000000  00000000  0002a1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  0002b8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000848  00000000  00000000  0002c1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e61  00000000  00000000  0002c9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000920c  00000000  00000000  00054849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6a21  00000000  00000000  0005da55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154476  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000232c  00000000  00000000  001544cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080030c8 	.word	0x080030c8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080030c8 	.word	0x080030c8

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <UART_Send>:

/* USER CODE END 0 */

// Send data to UART
void UART_Send(UART_HandleTypeDef *huart, char buffer[])
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80004fe:	6838      	ldr	r0, [r7, #0]
 8000500:	f7ff fe74 	bl	80001ec <strlen>
 8000504:	4603      	mov	r3, r0
 8000506:	b29a      	uxth	r2, r3
 8000508:	f04f 33ff 	mov.w	r3, #4294967295
 800050c:	6839      	ldr	r1, [r7, #0]
 800050e:	6878      	ldr	r0, [r7, #4]
 8000510:	f002 f928 	bl	8002764 <HAL_UART_Transmit>
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fa63 	bl	80009ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f80e 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f8b2 	bl	8000690 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052c:	f000 f880 	bl	8000630 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UART_Send(&huart2, "Hello from Nucleo-L476RG");
 8000530:	4902      	ldr	r1, [pc, #8]	; (800053c <main+0x20>)
 8000532:	4803      	ldr	r0, [pc, #12]	; (8000540 <main+0x24>)
 8000534:	f7ff ffde 	bl	80004f4 <UART_Send>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	e7fe      	b.n	8000538 <main+0x1c>
 800053a:	bf00      	nop
 800053c:	080030e0 	.word	0x080030e0
 8000540:	20000028 	.word	0x20000028

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b0ba      	sub	sp, #232	; 0xe8
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800054e:	2244      	movs	r2, #68	; 0x44
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f002 fdb0 	bl	80030b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	228c      	movs	r2, #140	; 0x8c
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fda2 	bl	80030b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000582:	2340      	movs	r3, #64	; 0x40
 8000584:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058e:	2302      	movs	r3, #2
 8000590:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000594:	2301      	movs	r3, #1
 8000596:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 10;
 800059a:	230a      	movs	r3, #10
 800059c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fd90 	bl	80010dc <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005c2:	f000 f921 	bl	8000808 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2303      	movs	r3, #3
 80005ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80005ea:	2104      	movs	r1, #4
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 f99b 	bl	8001928 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005f8:	f000 f906 	bl	8000808 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000600:	2300      	movs	r3, #0
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fb94 	bl	8001d34 <HAL_RCCEx_PeriphCLKConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000612:	f000 f8f9 	bl	8000808 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000616:	f44f 7000 	mov.w	r0, #512	; 0x200
 800061a:	f000 fcf9 	bl	8001010 <HAL_PWREx_ControlVoltageScaling>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000624:	f000 f8f0 	bl	8000808 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	37e8      	adds	r7, #232	; 0xe8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_USART2_UART_Init+0x58>)
 8000636:	4a15      	ldr	r2, [pc, #84]	; (800068c <MX_USART2_UART_Init+0x5c>)
 8000638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800063a:	4b13      	ldr	r3, [pc, #76]	; (8000688 <MX_USART2_UART_Init+0x58>)
 800063c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_USART2_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_USART2_UART_Init+0x58>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_USART2_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_USART2_UART_Init+0x58>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_USART2_UART_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_USART2_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_USART2_UART_Init+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_USART2_UART_Init+0x58>)
 8000674:	f002 f828 	bl	80026c8 <HAL_UART_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800067e:	f000 f8c3 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000028 	.word	0x20000028
 800068c:	40004400 	.word	0x40004400

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b53      	ldr	r3, [pc, #332]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a52      	ldr	r2, [pc, #328]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b50      	ldr	r3, [pc, #320]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	4b4d      	ldr	r3, [pc, #308]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a4c      	ldr	r2, [pc, #304]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b4a      	ldr	r3, [pc, #296]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b47      	ldr	r3, [pc, #284]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a46      	ldr	r2, [pc, #280]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b44      	ldr	r3, [pc, #272]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	4b41      	ldr	r3, [pc, #260]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	4a40      	ldr	r2, [pc, #256]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fa:	4b3e      	ldr	r3, [pc, #248]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000706:	4b3b      	ldr	r3, [pc, #236]	; (80007f4 <MX_GPIO_Init+0x164>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a3a      	ldr	r2, [pc, #232]	; (80007f4 <MX_GPIO_Init+0x164>)
 800070c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b38      	ldr	r3, [pc, #224]	; (80007f4 <MX_GPIO_Init+0x164>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800071e:	f000 fccd 	bl	80010bc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000728:	4833      	ldr	r0, [pc, #204]	; (80007f8 <MX_GPIO_Init+0x168>)
 800072a:	f000 fc4b 	bl	8000fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2140      	movs	r1, #64	; 0x40
 8000732:	4832      	ldr	r0, [pc, #200]	; (80007fc <MX_GPIO_Init+0x16c>)
 8000734:	f000 fc46 	bl	8000fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800073e:	4b30      	ldr	r3, [pc, #192]	; (8000800 <MX_GPIO_Init+0x170>)
 8000740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4619      	mov	r1, r3
 800074c:	482d      	ldr	r0, [pc, #180]	; (8000804 <MX_GPIO_Init+0x174>)
 800074e:	f000 faa7 	bl	8000ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000752:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	4823      	ldr	r0, [pc, #140]	; (80007f8 <MX_GPIO_Init+0x168>)
 800076c:	f000 fa98 	bl	8000ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000770:	2320      	movs	r3, #32
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	481e      	ldr	r0, [pc, #120]	; (80007fc <MX_GPIO_Init+0x16c>)
 8000784:	f000 fa8c 	bl	8000ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000788:	2340      	movs	r3, #64	; 0x40
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	4817      	ldr	r0, [pc, #92]	; (80007fc <MX_GPIO_Init+0x16c>)
 80007a0:	f000 fa7e 	bl	8000ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80007a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b2:	2303      	movs	r3, #3
 80007b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80007b6:	2308      	movs	r3, #8
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	480e      	ldr	r0, [pc, #56]	; (80007fc <MX_GPIO_Init+0x16c>)
 80007c2:	f000 fa6d 	bl	8000ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80007c6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007d8:	230a      	movs	r3, #10
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f000 fa5b 	bl	8000ca0 <HAL_GPIO_Init>

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000
 80007f8:	48000400 	.word	0x48000400
 80007fc:	48001800 	.word	0x48001800
 8000800:	10110000 	.word	0x10110000
 8000804:	48000800 	.word	0x48000800

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x8>
	...

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <HAL_MspInit+0x44>)
 800081c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800081e:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <HAL_MspInit+0x44>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6613      	str	r3, [r2, #96]	; 0x60
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <HAL_MspInit+0x44>)
 8000828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_MspInit+0x44>)
 8000834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <HAL_MspInit+0x44>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	6593      	str	r3, [r2, #88]	; 0x58
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_MspInit+0x44>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <HAL_UART_MspInit+0x7c>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d128      	bne.n	80008d0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <HAL_UART_MspInit+0x80>)
 8000880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000882:	4a16      	ldr	r2, [pc, #88]	; (80008dc <HAL_UART_MspInit+0x80>)
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	6593      	str	r3, [r2, #88]	; 0x58
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <HAL_UART_MspInit+0x80>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <HAL_UART_MspInit+0x80>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a10      	ldr	r2, [pc, #64]	; (80008dc <HAL_UART_MspInit+0x80>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <HAL_UART_MspInit+0x80>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008ae:	230c      	movs	r3, #12
 80008b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008be:	2307      	movs	r3, #7
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008cc:	f000 f9e8 	bl	8000ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40004400 	.word	0x40004400
 80008dc:	40021000 	.word	0x40021000

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092c:	f000 f8b2 	bl	8000a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <SystemInit+0x5c>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093e:	4a14      	ldr	r2, [pc, #80]	; (8000990 <SystemInit+0x5c>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <SystemInit+0x60>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a11      	ldr	r2, [pc, #68]	; (8000994 <SystemInit+0x60>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <SystemInit+0x60>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <SystemInit+0x60>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <SystemInit+0x60>)
 8000960:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000964:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000968:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <SystemInit+0x60>)
 800096c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000970:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <SystemInit+0x60>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a07      	ldr	r2, [pc, #28]	; (8000994 <SystemInit+0x60>)
 8000978:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800097c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <SystemInit+0x60>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00
 8000994:	40021000 	.word	0x40021000

08000998 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800099c:	f7ff ffca 	bl	8000934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009a2:	e003      	b.n	80009ac <LoopCopyDataInit>

080009a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009a4:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009aa:	3104      	adds	r1, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009ac:	480a      	ldr	r0, [pc, #40]	; (80009d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80009b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80009b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80009b4:	d3f6      	bcc.n	80009a4 <CopyDataInit>
	ldr	r2, =_sbss
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80009b8:	e002      	b.n	80009c0 <LoopFillZerobss>

080009ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80009ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80009bc:	f842 3b04 	str.w	r3, [r2], #4

080009c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <LoopForever+0x16>)
	cmp	r2, r3
 80009c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80009c4:	d3f9      	bcc.n	80009ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c6:	f002 fb53 	bl	8003070 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ca:	f7ff fda7 	bl	800051c <main>

080009ce <LoopForever>:

LoopForever:
    b LoopForever
 80009ce:	e7fe      	b.n	80009ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009d0:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 80009d4:	08003154 	.word	0x08003154
	ldr	r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009dc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80009e0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80009e4:	200000b0 	.word	0x200000b0

080009e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC1_2_IRQHandler>

080009ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009f0:	2300      	movs	r3, #0
 80009f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f000 f91f 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009fa:	2000      	movs	r0, #0
 80009fc:	f000 f80e 	bl	8000a1c <HAL_InitTick>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	71fb      	strb	r3, [r7, #7]
 8000a0a:	e001      	b.n	8000a10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a0c:	f7ff ff02 	bl	8000814 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a10:	79fb      	ldrb	r3, [r7, #7]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <HAL_InitTick+0x6c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d023      	beq.n	8000a78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <HAL_InitTick+0x70>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <HAL_InitTick+0x6c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f91d 	bl	8000c86 <HAL_SYSTICK_Config>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d10f      	bne.n	8000a72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d809      	bhi.n	8000a6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f000 f8f5 	bl	8000c4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a64:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_InitTick+0x74>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
 8000a6a:	e007      	b.n	8000a7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	73fb      	strb	r3, [r7, #15]
 8000a70:	e004      	b.n	8000a7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	73fb      	strb	r3, [r7, #15]
 8000a76:	e001      	b.n	8000a7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000004 	.word	0x20000004

08000a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x20>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	200000ac 	.word	0x200000ac

08000abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_GetTick+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200000ac 	.word	0x200000ac

08000ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	; (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	; (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	; 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c04:	d301      	bcc.n	8000c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00f      	b.n	8000c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <SysTick_Config+0x40>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c12:	210f      	movs	r1, #15
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f7ff ff8e 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SysTick_Config+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SysTick_Config+0x40>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff47 	bl	8000ad4 <__NVIC_SetPriorityGrouping>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c60:	f7ff ff5c 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000c64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff ff8e 	bl	8000b8c <NVIC_EncodePriority>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff5d 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffb0 	bl	8000bf4 <SysTick_Config>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cae:	e166      	b.n	8000f7e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 8158 	beq.w	8000f78 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d00b      	beq.n	8000ce8 <HAL_GPIO_Init+0x48>
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d007      	beq.n	8000ce8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cdc:	2b11      	cmp	r3, #17
 8000cde:	d003      	beq.n	8000ce8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b12      	cmp	r3, #18
 8000ce6:	d130      	bne.n	8000d4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d1e:	2201      	movs	r2, #1
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	091b      	lsrs	r3, r3, #4
 8000d34:	f003 0201 	and.w	r2, r3, #1
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	2203      	movs	r2, #3
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_Init+0xea>
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b12      	cmp	r3, #18
 8000d88:	d123      	bne.n	8000dd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	08da      	lsrs	r2, r3, #3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3208      	adds	r2, #8
 8000d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	220f      	movs	r2, #15
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	691a      	ldr	r2, [r3, #16]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	08da      	lsrs	r2, r3, #3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3208      	adds	r2, #8
 8000dcc:	6939      	ldr	r1, [r7, #16]
 8000dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0203 	and.w	r2, r3, #3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 80b2 	beq.w	8000f78 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e14:	4b61      	ldr	r3, [pc, #388]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e18:	4a60      	ldr	r2, [pc, #384]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000e20:	4b5e      	ldr	r3, [pc, #376]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e2c:	4a5c      	ldr	r2, [pc, #368]	; (8000fa0 <HAL_GPIO_Init+0x300>)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	089b      	lsrs	r3, r3, #2
 8000e32:	3302      	adds	r3, #2
 8000e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e56:	d02b      	beq.n	8000eb0 <HAL_GPIO_Init+0x210>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a52      	ldr	r2, [pc, #328]	; (8000fa4 <HAL_GPIO_Init+0x304>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d025      	beq.n	8000eac <HAL_GPIO_Init+0x20c>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a51      	ldr	r2, [pc, #324]	; (8000fa8 <HAL_GPIO_Init+0x308>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d01f      	beq.n	8000ea8 <HAL_GPIO_Init+0x208>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a50      	ldr	r2, [pc, #320]	; (8000fac <HAL_GPIO_Init+0x30c>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d019      	beq.n	8000ea4 <HAL_GPIO_Init+0x204>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a4f      	ldr	r2, [pc, #316]	; (8000fb0 <HAL_GPIO_Init+0x310>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d013      	beq.n	8000ea0 <HAL_GPIO_Init+0x200>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a4e      	ldr	r2, [pc, #312]	; (8000fb4 <HAL_GPIO_Init+0x314>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d00d      	beq.n	8000e9c <HAL_GPIO_Init+0x1fc>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a4d      	ldr	r2, [pc, #308]	; (8000fb8 <HAL_GPIO_Init+0x318>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d007      	beq.n	8000e98 <HAL_GPIO_Init+0x1f8>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a4c      	ldr	r2, [pc, #304]	; (8000fbc <HAL_GPIO_Init+0x31c>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d101      	bne.n	8000e94 <HAL_GPIO_Init+0x1f4>
 8000e90:	2307      	movs	r3, #7
 8000e92:	e00e      	b.n	8000eb2 <HAL_GPIO_Init+0x212>
 8000e94:	2308      	movs	r3, #8
 8000e96:	e00c      	b.n	8000eb2 <HAL_GPIO_Init+0x212>
 8000e98:	2306      	movs	r3, #6
 8000e9a:	e00a      	b.n	8000eb2 <HAL_GPIO_Init+0x212>
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	e008      	b.n	8000eb2 <HAL_GPIO_Init+0x212>
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	e006      	b.n	8000eb2 <HAL_GPIO_Init+0x212>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e004      	b.n	8000eb2 <HAL_GPIO_Init+0x212>
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	e002      	b.n	8000eb2 <HAL_GPIO_Init+0x212>
 8000eac:	2301      	movs	r3, #1
 8000eae:	e000      	b.n	8000eb2 <HAL_GPIO_Init+0x212>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	f002 0203 	and.w	r2, r2, #3
 8000eb8:	0092      	lsls	r2, r2, #2
 8000eba:	4093      	lsls	r3, r2
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ec2:	4937      	ldr	r1, [pc, #220]	; (8000fa0 <HAL_GPIO_Init+0x300>)
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	089b      	lsrs	r3, r3, #2
 8000ec8:	3302      	adds	r3, #2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ed0:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <HAL_GPIO_Init+0x320>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ef4:	4a32      	ldr	r2, [pc, #200]	; (8000fc0 <HAL_GPIO_Init+0x320>)
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000efa:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <HAL_GPIO_Init+0x320>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f1e:	4a28      	ldr	r2, [pc, #160]	; (8000fc0 <HAL_GPIO_Init+0x320>)
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f24:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <HAL_GPIO_Init+0x320>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f48:	4a1d      	ldr	r2, [pc, #116]	; (8000fc0 <HAL_GPIO_Init+0x320>)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <HAL_GPIO_Init+0x320>)
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f72:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <HAL_GPIO_Init+0x320>)
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	fa22 f303 	lsr.w	r3, r2, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f47f ae91 	bne.w	8000cb0 <HAL_GPIO_Init+0x10>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	bf00      	nop
 8000f92:	371c      	adds	r7, #28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	48000400 	.word	0x48000400
 8000fa8:	48000800 	.word	0x48000800
 8000fac:	48000c00 	.word	0x48000c00
 8000fb0:	48001000 	.word	0x48001000
 8000fb4:	48001400 	.word	0x48001400
 8000fb8:	48001800 	.word	0x48001800
 8000fbc:	48001c00 	.word	0x48001c00
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd4:	787b      	ldrb	r3, [r7, #1]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fda:	887a      	ldrh	r2, [r7, #2]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fe0:	e002      	b.n	8000fe8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fe2:	887a      	ldrh	r2, [r7, #2]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <HAL_PWREx_GetVoltageRange+0x18>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40007000 	.word	0x40007000

08001010 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800101e:	d130      	bne.n	8001082 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001020:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800102c:	d038      	beq.n	80010a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800102e:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001036:	4a1e      	ldr	r2, [pc, #120]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001038:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2232      	movs	r2, #50	; 0x32
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800104a:	fba2 2303 	umull	r2, r3, r2, r3
 800104e:	0c9b      	lsrs	r3, r3, #18
 8001050:	3301      	adds	r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001054:	e002      	b.n	800105c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	3b01      	subs	r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001068:	d102      	bne.n	8001070 <HAL_PWREx_ControlVoltageScaling+0x60>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1f2      	bne.n	8001056 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800107c:	d110      	bne.n	80010a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e00f      	b.n	80010a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800108a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800108e:	d007      	beq.n	80010a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001098:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800109a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800109e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40007000 	.word	0x40007000
 80010b4:	20000000 	.word	0x20000000
 80010b8:	431bde83 	.word	0x431bde83

080010bc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80010c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ca:	6053      	str	r3, [r2, #4]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40007000 	.word	0x40007000

080010dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d102      	bne.n	80010f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	f000 bc16 	b.w	800191c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010f0:	4ba0      	ldr	r3, [pc, #640]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 030c 	and.w	r3, r3, #12
 80010f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010fa:	4b9e      	ldr	r3, [pc, #632]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0310 	and.w	r3, r3, #16
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80e4 	beq.w	80012da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d007      	beq.n	8001128 <HAL_RCC_OscConfig+0x4c>
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	2b0c      	cmp	r3, #12
 800111c:	f040 808b 	bne.w	8001236 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b01      	cmp	r3, #1
 8001124:	f040 8087 	bne.w	8001236 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001128:	4b92      	ldr	r3, [pc, #584]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <HAL_RCC_OscConfig+0x64>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e3ed      	b.n	800191c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a1a      	ldr	r2, [r3, #32]
 8001144:	4b8b      	ldr	r3, [pc, #556]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	2b00      	cmp	r3, #0
 800114e:	d004      	beq.n	800115a <HAL_RCC_OscConfig+0x7e>
 8001150:	4b88      	ldr	r3, [pc, #544]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001158:	e005      	b.n	8001166 <HAL_RCC_OscConfig+0x8a>
 800115a:	4b86      	ldr	r3, [pc, #536]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 800115c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001160:	091b      	lsrs	r3, r3, #4
 8001162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001166:	4293      	cmp	r3, r2
 8001168:	d223      	bcs.n	80011b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fd80 	bl	8001c74 <RCC_SetFlashLatencyFromMSIRange>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e3ce      	b.n	800191c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800117e:	4b7d      	ldr	r3, [pc, #500]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a7c      	ldr	r2, [pc, #496]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 8001184:	f043 0308 	orr.w	r3, r3, #8
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b7a      	ldr	r3, [pc, #488]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	4977      	ldr	r1, [pc, #476]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 8001198:	4313      	orrs	r3, r2
 800119a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800119c:	4b75      	ldr	r3, [pc, #468]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	4972      	ldr	r1, [pc, #456]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]
 80011b0:	e025      	b.n	80011fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011b2:	4b70      	ldr	r3, [pc, #448]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a6f      	ldr	r2, [pc, #444]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	4b6d      	ldr	r3, [pc, #436]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	496a      	ldr	r1, [pc, #424]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d0:	4b68      	ldr	r3, [pc, #416]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69db      	ldr	r3, [r3, #28]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	4965      	ldr	r1, [pc, #404]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 fd40 	bl	8001c74 <RCC_SetFlashLatencyFromMSIRange>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e38e      	b.n	800191c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011fe:	f000 fc75 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001202:	4602      	mov	r2, r0
 8001204:	4b5b      	ldr	r3, [pc, #364]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	495a      	ldr	r1, [pc, #360]	; (8001378 <HAL_RCC_OscConfig+0x29c>)
 8001210:	5ccb      	ldrb	r3, [r1, r3]
 8001212:	f003 031f 	and.w	r3, r3, #31
 8001216:	fa22 f303 	lsr.w	r3, r2, r3
 800121a:	4a58      	ldr	r2, [pc, #352]	; (800137c <HAL_RCC_OscConfig+0x2a0>)
 800121c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800121e:	4b58      	ldr	r3, [pc, #352]	; (8001380 <HAL_RCC_OscConfig+0x2a4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fbfa 	bl	8000a1c <HAL_InitTick>
 8001228:	4603      	mov	r3, r0
 800122a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d052      	beq.n	80012d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	e372      	b.n	800191c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d032      	beq.n	80012a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800123e:	4b4d      	ldr	r3, [pc, #308]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a4c      	ldr	r2, [pc, #304]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800124a:	f7ff fc37 	bl	8000abc <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001252:	f7ff fc33 	bl	8000abc <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e35b      	b.n	800191c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001264:	4b43      	ldr	r3, [pc, #268]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001270:	4b40      	ldr	r3, [pc, #256]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a3f      	ldr	r2, [pc, #252]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 8001276:	f043 0308 	orr.w	r3, r3, #8
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	493a      	ldr	r1, [pc, #232]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 800128a:	4313      	orrs	r3, r2
 800128c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800128e:	4b39      	ldr	r3, [pc, #228]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	4935      	ldr	r1, [pc, #212]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	604b      	str	r3, [r1, #4]
 80012a2:	e01a      	b.n	80012da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012a4:	4b33      	ldr	r3, [pc, #204]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a32      	ldr	r2, [pc, #200]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 80012aa:	f023 0301 	bic.w	r3, r3, #1
 80012ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012b0:	f7ff fc04 	bl	8000abc <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012b8:	f7ff fc00 	bl	8000abc <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e328      	b.n	800191c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012ca:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0x1dc>
 80012d6:	e000      	b.n	80012da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d073      	beq.n	80013ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d005      	beq.n	80012f8 <HAL_RCC_OscConfig+0x21c>
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2b0c      	cmp	r3, #12
 80012f0:	d10e      	bne.n	8001310 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d10b      	bne.n	8001310 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d063      	beq.n	80013cc <HAL_RCC_OscConfig+0x2f0>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d15f      	bne.n	80013cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e305      	b.n	800191c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001318:	d106      	bne.n	8001328 <HAL_RCC_OscConfig+0x24c>
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a15      	ldr	r2, [pc, #84]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e01d      	b.n	8001364 <HAL_RCC_OscConfig+0x288>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001330:	d10c      	bne.n	800134c <HAL_RCC_OscConfig+0x270>
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 8001338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a0c      	ldr	r2, [pc, #48]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 8001344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e00b      	b.n	8001364 <HAL_RCC_OscConfig+0x288>
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a08      	ldr	r2, [pc, #32]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 8001352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a05      	ldr	r2, [pc, #20]	; (8001374 <HAL_RCC_OscConfig+0x298>)
 800135e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d01b      	beq.n	80013a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136c:	f7ff fba6 	bl	8000abc <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001372:	e010      	b.n	8001396 <HAL_RCC_OscConfig+0x2ba>
 8001374:	40021000 	.word	0x40021000
 8001378:	080030fc 	.word	0x080030fc
 800137c:	20000000 	.word	0x20000000
 8001380:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff fb9a 	bl	8000abc <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	; 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e2c2      	b.n	800191c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001396:	4baf      	ldr	r3, [pc, #700]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0x2a8>
 80013a2:	e014      	b.n	80013ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a4:	f7ff fb8a 	bl	8000abc <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fb86 	bl	8000abc <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e2ae      	b.n	800191c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013be:	4ba5      	ldr	r3, [pc, #660]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x2d0>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d060      	beq.n	800149c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d005      	beq.n	80013ec <HAL_RCC_OscConfig+0x310>
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b0c      	cmp	r3, #12
 80013e4:	d119      	bne.n	800141a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d116      	bne.n	800141a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ec:	4b99      	ldr	r3, [pc, #612]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_RCC_OscConfig+0x328>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e28b      	b.n	800191c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001404:	4b93      	ldr	r3, [pc, #588]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	061b      	lsls	r3, r3, #24
 8001412:	4990      	ldr	r1, [pc, #576]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001418:	e040      	b.n	800149c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d023      	beq.n	800146a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001422:	4b8c      	ldr	r3, [pc, #560]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a8b      	ldr	r2, [pc, #556]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142e:	f7ff fb45 	bl	8000abc <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff fb41 	bl	8000abc <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e269      	b.n	800191c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001448:	4b82      	ldr	r3, [pc, #520]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001454:	4b7f      	ldr	r3, [pc, #508]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	061b      	lsls	r3, r3, #24
 8001462:	497c      	ldr	r1, [pc, #496]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
 8001468:	e018      	b.n	800149c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146a:	4b7a      	ldr	r3, [pc, #488]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a79      	ldr	r2, [pc, #484]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001476:	f7ff fb21 	bl	8000abc <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147e:	f7ff fb1d 	bl	8000abc <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e245      	b.n	800191c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001490:	4b70      	ldr	r3, [pc, #448]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f0      	bne.n	800147e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d03c      	beq.n	8001522 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d01c      	beq.n	80014ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b0:	4b68      	ldr	r3, [pc, #416]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80014b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b6:	4a67      	ldr	r2, [pc, #412]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c0:	f7ff fafc 	bl	8000abc <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c8:	f7ff faf8 	bl	8000abc <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e220      	b.n	800191c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014da:	4b5e      	ldr	r3, [pc, #376]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80014dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0ef      	beq.n	80014c8 <HAL_RCC_OscConfig+0x3ec>
 80014e8:	e01b      	b.n	8001522 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ea:	4b5a      	ldr	r3, [pc, #360]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80014ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f0:	4a58      	ldr	r2, [pc, #352]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fa:	f7ff fadf 	bl	8000abc <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001502:	f7ff fadb 	bl	8000abc <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e203      	b.n	800191c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001514:	4b4f      	ldr	r3, [pc, #316]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1ef      	bne.n	8001502 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 80a6 	beq.w	800167c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001530:	2300      	movs	r3, #0
 8001532:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001534:	4b47      	ldr	r3, [pc, #284]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d10d      	bne.n	800155c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001540:	4b44      	ldr	r3, [pc, #272]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001544:	4a43      	ldr	r2, [pc, #268]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154a:	6593      	str	r3, [r2, #88]	; 0x58
 800154c:	4b41      	ldr	r3, [pc, #260]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 800154e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001558:	2301      	movs	r3, #1
 800155a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800155c:	4b3e      	ldr	r3, [pc, #248]	; (8001658 <HAL_RCC_OscConfig+0x57c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001564:	2b00      	cmp	r3, #0
 8001566:	d118      	bne.n	800159a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001568:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <HAL_RCC_OscConfig+0x57c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a3a      	ldr	r2, [pc, #232]	; (8001658 <HAL_RCC_OscConfig+0x57c>)
 800156e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001572:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001574:	f7ff faa2 	bl	8000abc <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157c:	f7ff fa9e 	bl	8000abc <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e1c6      	b.n	800191c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800158e:	4b32      	ldr	r3, [pc, #200]	; (8001658 <HAL_RCC_OscConfig+0x57c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d108      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4d8>
 80015a2:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80015a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a8:	4a2a      	ldr	r2, [pc, #168]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015b2:	e024      	b.n	80015fe <HAL_RCC_OscConfig+0x522>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d110      	bne.n	80015de <HAL_RCC_OscConfig+0x502>
 80015bc:	4b25      	ldr	r3, [pc, #148]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80015be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c2:	4a24      	ldr	r2, [pc, #144]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015cc:	4b21      	ldr	r3, [pc, #132]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80015ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d2:	4a20      	ldr	r2, [pc, #128]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015dc:	e00f      	b.n	80015fe <HAL_RCC_OscConfig+0x522>
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80015e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e4:	4a1b      	ldr	r2, [pc, #108]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80015f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015f4:	4a17      	ldr	r2, [pc, #92]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 80015f6:	f023 0304 	bic.w	r3, r3, #4
 80015fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d016      	beq.n	8001634 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001606:	f7ff fa59 	bl	8000abc <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800160c:	e00a      	b.n	8001624 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160e:	f7ff fa55 	bl	8000abc <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	f241 3288 	movw	r2, #5000	; 0x1388
 800161c:	4293      	cmp	r3, r2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e17b      	b.n	800191c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_RCC_OscConfig+0x578>)
 8001626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0ed      	beq.n	800160e <HAL_RCC_OscConfig+0x532>
 8001632:	e01a      	b.n	800166a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001634:	f7ff fa42 	bl	8000abc <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800163a:	e00f      	b.n	800165c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800163c:	f7ff fa3e 	bl	8000abc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f241 3288 	movw	r2, #5000	; 0x1388
 800164a:	4293      	cmp	r3, r2
 800164c:	d906      	bls.n	800165c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e164      	b.n	800191c <HAL_RCC_OscConfig+0x840>
 8001652:	bf00      	nop
 8001654:	40021000 	.word	0x40021000
 8001658:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800165c:	4ba8      	ldr	r3, [pc, #672]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 800165e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1e8      	bne.n	800163c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800166a:	7ffb      	ldrb	r3, [r7, #31]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d105      	bne.n	800167c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001670:	4ba3      	ldr	r3, [pc, #652]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 8001672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001674:	4aa2      	ldr	r2, [pc, #648]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 8001676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800167a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0320 	and.w	r3, r3, #32
 8001684:	2b00      	cmp	r3, #0
 8001686:	d03c      	beq.n	8001702 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168c:	2b00      	cmp	r3, #0
 800168e:	d01c      	beq.n	80016ca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001690:	4b9b      	ldr	r3, [pc, #620]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 8001692:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001696:	4a9a      	ldr	r2, [pc, #616]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a0:	f7ff fa0c 	bl	8000abc <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016a8:	f7ff fa08 	bl	8000abc <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e130      	b.n	800191c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016ba:	4b91      	ldr	r3, [pc, #580]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 80016bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0ef      	beq.n	80016a8 <HAL_RCC_OscConfig+0x5cc>
 80016c8:	e01b      	b.n	8001702 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016ca:	4b8d      	ldr	r3, [pc, #564]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 80016cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016d0:	4a8b      	ldr	r2, [pc, #556]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 80016d2:	f023 0301 	bic.w	r3, r3, #1
 80016d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016da:	f7ff f9ef 	bl	8000abc <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016e2:	f7ff f9eb 	bl	8000abc <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e113      	b.n	800191c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016f4:	4b82      	ldr	r3, [pc, #520]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 80016f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1ef      	bne.n	80016e2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8107 	beq.w	800191a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	2b02      	cmp	r3, #2
 8001712:	f040 80cb 	bne.w	80018ac <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001716:	4b7a      	ldr	r3, [pc, #488]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	f003 0203 	and.w	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	429a      	cmp	r2, r3
 8001728:	d12c      	bne.n	8001784 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	3b01      	subs	r3, #1
 8001736:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d123      	bne.n	8001784 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001746:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001748:	429a      	cmp	r2, r3
 800174a:	d11b      	bne.n	8001784 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001756:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d113      	bne.n	8001784 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001766:	085b      	lsrs	r3, r3, #1
 8001768:	3b01      	subs	r3, #1
 800176a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d109      	bne.n	8001784 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	085b      	lsrs	r3, r3, #1
 800177c:	3b01      	subs	r3, #1
 800177e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d06d      	beq.n	8001860 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2b0c      	cmp	r3, #12
 8001788:	d068      	beq.n	800185c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800178a:	4b5d      	ldr	r3, [pc, #372]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d105      	bne.n	80017a2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001796:	4b5a      	ldr	r3, [pc, #360]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0ba      	b.n	800191c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017a6:	4b56      	ldr	r3, [pc, #344]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a55      	ldr	r2, [pc, #340]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 80017ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017b2:	f7ff f983 	bl	8000abc <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff f97f 	bl	8000abc <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e0a7      	b.n	800191c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017cc:	4b4c      	ldr	r3, [pc, #304]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f0      	bne.n	80017ba <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d8:	4b49      	ldr	r3, [pc, #292]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	4b49      	ldr	r3, [pc, #292]	; (8001904 <HAL_RCC_OscConfig+0x828>)
 80017de:	4013      	ands	r3, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017e8:	3a01      	subs	r2, #1
 80017ea:	0112      	lsls	r2, r2, #4
 80017ec:	4311      	orrs	r1, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017f2:	0212      	lsls	r2, r2, #8
 80017f4:	4311      	orrs	r1, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017fa:	0852      	lsrs	r2, r2, #1
 80017fc:	3a01      	subs	r2, #1
 80017fe:	0552      	lsls	r2, r2, #21
 8001800:	4311      	orrs	r1, r2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001806:	0852      	lsrs	r2, r2, #1
 8001808:	3a01      	subs	r2, #1
 800180a:	0652      	lsls	r2, r2, #25
 800180c:	4311      	orrs	r1, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001812:	06d2      	lsls	r2, r2, #27
 8001814:	430a      	orrs	r2, r1
 8001816:	493a      	ldr	r1, [pc, #232]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 8001818:	4313      	orrs	r3, r2
 800181a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800181c:	4b38      	ldr	r3, [pc, #224]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a37      	ldr	r2, [pc, #220]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 8001822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001826:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001828:	4b35      	ldr	r3, [pc, #212]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4a34      	ldr	r2, [pc, #208]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 800182e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001832:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001834:	f7ff f942 	bl	8000abc <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff f93e 	bl	8000abc <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e066      	b.n	800191c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184e:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800185a:	e05e      	b.n	800191a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e05d      	b.n	800191c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001860:	4b27      	ldr	r3, [pc, #156]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d156      	bne.n	800191a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800186c:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a23      	ldr	r2, [pc, #140]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 8001872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001876:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001878:	4b21      	ldr	r3, [pc, #132]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	4a20      	ldr	r2, [pc, #128]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 800187e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001882:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001884:	f7ff f91a 	bl	8000abc <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff f916 	bl	8000abc <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e03e      	b.n	800191c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x7b0>
 80018aa:	e036      	b.n	800191a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2b0c      	cmp	r3, #12
 80018b0:	d031      	beq.n	8001916 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b2:	4b13      	ldr	r3, [pc, #76]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 80018b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018bc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d105      	bne.n	80018d6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	4a0c      	ldr	r2, [pc, #48]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 80018d0:	f023 0303 	bic.w	r3, r3, #3
 80018d4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	4a09      	ldr	r2, [pc, #36]	; (8001900 <HAL_RCC_OscConfig+0x824>)
 80018dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e6:	f7ff f8e9 	bl	8000abc <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ec:	e00c      	b.n	8001908 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ee:	f7ff f8e5 	bl	8000abc <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d905      	bls.n	8001908 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e00d      	b.n	800191c <HAL_RCC_OscConfig+0x840>
 8001900:	40021000 	.word	0x40021000
 8001904:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_RCC_OscConfig+0x848>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1ec      	bne.n	80018ee <HAL_RCC_OscConfig+0x812>
 8001914:	e001      	b.n	800191a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3720      	adds	r7, #32
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000

08001928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0c8      	b.n	8001ace <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800193c:	4b66      	ldr	r3, [pc, #408]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d910      	bls.n	800196c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 0207 	bic.w	r2, r3, #7
 8001952:	4961      	ldr	r1, [pc, #388]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b0>)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	4313      	orrs	r3, r2
 8001958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	4b5f      	ldr	r3, [pc, #380]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0b0      	b.n	8001ace <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d04c      	beq.n	8001a12 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d107      	bne.n	8001990 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001980:	4b56      	ldr	r3, [pc, #344]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d121      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e09e      	b.n	8001ace <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001998:	4b50      	ldr	r3, [pc, #320]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d115      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e092      	b.n	8001ace <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d107      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019b0:	4b4a      	ldr	r3, [pc, #296]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d109      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e086      	b.n	8001ace <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c0:	4b46      	ldr	r3, [pc, #280]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e07e      	b.n	8001ace <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019d0:	4b42      	ldr	r3, [pc, #264]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f023 0203 	bic.w	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	493f      	ldr	r1, [pc, #252]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019e2:	f7ff f86b 	bl	8000abc <HAL_GetTick>
 80019e6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e8:	e00a      	b.n	8001a00 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ea:	f7ff f867 	bl	8000abc <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e066      	b.n	8001ace <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a00:	4b36      	ldr	r3, [pc, #216]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 020c 	and.w	r2, r3, #12
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d1eb      	bne.n	80019ea <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d008      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1e:	4b2f      	ldr	r3, [pc, #188]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	492c      	ldr	r1, [pc, #176]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a30:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d210      	bcs.n	8001a60 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 0207 	bic.w	r2, r3, #7
 8001a46:	4924      	ldr	r1, [pc, #144]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e036      	b.n	8001ace <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4918      	ldr	r1, [pc, #96]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d009      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4910      	ldr	r1, [pc, #64]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a9e:	f000 f825 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	490c      	ldr	r1, [pc, #48]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	5ccb      	ldrb	r3, [r1, r3]
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe ffaa 	bl	8000a1c <HAL_InitTick>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	72fb      	strb	r3, [r7, #11]

  return status;
 8001acc:	7afb      	ldrb	r3, [r7, #11]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40022000 	.word	0x40022000
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	080030fc 	.word	0x080030fc
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20000004 	.word	0x20000004

08001aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001afa:	4b3e      	ldr	r3, [pc, #248]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b04:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x34>
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d121      	bne.n	8001b5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d11e      	bne.n	8001b5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b20:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b2c:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	e005      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b48:	4a2b      	ldr	r2, [pc, #172]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10d      	bne.n	8001b74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b5c:	e00a      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d102      	bne.n	8001b6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b64:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x110>)
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	e004      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b70:	4b23      	ldr	r3, [pc, #140]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d134      	bne.n	8001be4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d003      	beq.n	8001b92 <HAL_RCC_GetSysClockFreq+0xa6>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d003      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0xac>
 8001b90:	e005      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x110>)
 8001b94:	617b      	str	r3, [r7, #20]
      break;
 8001b96:	e005      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b9a:	617b      	str	r3, [r7, #20]
      break;
 8001b9c:	e002      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	617b      	str	r3, [r7, #20]
      break;
 8001ba2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	3301      	adds	r3, #1
 8001bb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	fb02 f203 	mul.w	r2, r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	0e5b      	lsrs	r3, r3, #25
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001be4:	69bb      	ldr	r3, [r7, #24]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3724      	adds	r7, #36	; 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	08003114 	.word	0x08003114
 8001bfc:	00f42400 	.word	0x00f42400
 8001c00:	007a1200 	.word	0x007a1200

08001c04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000000 	.word	0x20000000

08001c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c20:	f7ff fff0 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	4904      	ldr	r1, [pc, #16]	; (8001c44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021000 	.word	0x40021000
 8001c44:	0800310c 	.word	0x0800310c

08001c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c4c:	f7ff ffda 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0adb      	lsrs	r3, r3, #11
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4904      	ldr	r1, [pc, #16]	; (8001c70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	0800310c 	.word	0x0800310c

08001c74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c80:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c8c:	f7ff f9b2 	bl	8000ff4 <HAL_PWREx_GetVoltageRange>
 8001c90:	6178      	str	r0, [r7, #20]
 8001c92:	e014      	b.n	8001cbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c98:	4a24      	ldr	r2, [pc, #144]	; (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cac:	f7ff f9a2 	bl	8000ff4 <HAL_PWREx_GetVoltageRange>
 8001cb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	4a1d      	ldr	r2, [pc, #116]	; (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cc4:	d10b      	bne.n	8001cde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b80      	cmp	r3, #128	; 0x80
 8001cca:	d919      	bls.n	8001d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2ba0      	cmp	r3, #160	; 0xa0
 8001cd0:	d902      	bls.n	8001cd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	e013      	b.n	8001d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cd8:	2301      	movs	r3, #1
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	e010      	b.n	8001d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b80      	cmp	r3, #128	; 0x80
 8001ce2:	d902      	bls.n	8001cea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	e00a      	b.n	8001d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b80      	cmp	r3, #128	; 0x80
 8001cee:	d102      	bne.n	8001cf6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	e004      	b.n	8001d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b70      	cmp	r3, #112	; 0x70
 8001cfa:	d101      	bne.n	8001d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 0207 	bic.w	r2, r3, #7
 8001d08:	4909      	ldr	r1, [pc, #36]	; (8001d30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d001      	beq.n	8001d22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40022000 	.word	0x40022000

08001d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d40:	2300      	movs	r3, #0
 8001d42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d041      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d58:	d02a      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d5e:	d824      	bhi.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d64:	d008      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d6a:	d81e      	bhi.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00a      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d74:	d010      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d76:	e018      	b.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d78:	4b86      	ldr	r3, [pc, #536]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4a85      	ldr	r2, [pc, #532]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d84:	e015      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 facd 	bl	800232c <RCCEx_PLLSAI1_Config>
 8001d92:	4603      	mov	r3, r0
 8001d94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d96:	e00c      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3320      	adds	r3, #32
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 fbb6 	bl	8002510 <RCCEx_PLLSAI2_Config>
 8001da4:	4603      	mov	r3, r0
 8001da6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001da8:	e003      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	74fb      	strb	r3, [r7, #19]
      break;
 8001dae:	e000      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001db2:	7cfb      	ldrb	r3, [r7, #19]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10b      	bne.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001db8:	4b76      	ldr	r3, [pc, #472]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dc6:	4973      	ldr	r1, [pc, #460]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001dce:	e001      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dd0:	7cfb      	ldrb	r3, [r7, #19]
 8001dd2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d041      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001de4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001de8:	d02a      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001dea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001dee:	d824      	bhi.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001df0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001df4:	d008      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001df6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dfa:	d81e      	bhi.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00a      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e04:	d010      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e06:	e018      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e08:	4b62      	ldr	r3, [pc, #392]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4a61      	ldr	r2, [pc, #388]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e14:	e015      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fa85 	bl	800232c <RCCEx_PLLSAI1_Config>
 8001e22:	4603      	mov	r3, r0
 8001e24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e26:	e00c      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3320      	adds	r3, #32
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fb6e 	bl	8002510 <RCCEx_PLLSAI2_Config>
 8001e34:	4603      	mov	r3, r0
 8001e36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e38:	e003      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e3e:	e000      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001e40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e42:	7cfb      	ldrb	r3, [r7, #19]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10b      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e48:	4b52      	ldr	r3, [pc, #328]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e56:	494f      	ldr	r1, [pc, #316]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e5e:	e001      	b.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e60:	7cfb      	ldrb	r3, [r7, #19]
 8001e62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80a0 	beq.w	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e76:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001e86:	2300      	movs	r3, #0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00d      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8c:	4b41      	ldr	r3, [pc, #260]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	4a40      	ldr	r2, [pc, #256]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e96:	6593      	str	r3, [r2, #88]	; 0x58
 8001e98:	4b3e      	ldr	r3, [pc, #248]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ea8:	4b3b      	ldr	r3, [pc, #236]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a3a      	ldr	r2, [pc, #232]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eb4:	f7fe fe02 	bl	8000abc <HAL_GetTick>
 8001eb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001eba:	e009      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebc:	f7fe fdfe 	bl	8000abc <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d902      	bls.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	74fb      	strb	r3, [r7, #19]
        break;
 8001ece:	e005      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ed0:	4b31      	ldr	r3, [pc, #196]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ef      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001edc:	7cfb      	ldrb	r3, [r7, #19]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d15c      	bne.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ee2:	4b2c      	ldr	r3, [pc, #176]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d01f      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d019      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f00:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f0c:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	4a20      	ldr	r2, [pc, #128]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f22:	4a1c      	ldr	r2, [pc, #112]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f2c:	4a19      	ldr	r2, [pc, #100]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d016      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7fe fdbd 	bl	8000abc <HAL_GetTick>
 8001f42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f44:	e00b      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7fe fdb9 	bl	8000abc <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d902      	bls.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	74fb      	strb	r3, [r7, #19]
            break;
 8001f5c:	e006      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ec      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f82:	4904      	ldr	r1, [pc, #16]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f8a:	e009      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f8c:	7cfb      	ldrb	r3, [r7, #19]
 8001f8e:	74bb      	strb	r3, [r7, #18]
 8001f90:	e006      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f9c:	7cfb      	ldrb	r3, [r7, #19]
 8001f9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fa0:	7c7b      	ldrb	r3, [r7, #17]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d105      	bne.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa6:	4ba6      	ldr	r3, [pc, #664]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	4aa5      	ldr	r2, [pc, #660]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fbe:	4ba0      	ldr	r3, [pc, #640]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc4:	f023 0203 	bic.w	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fcc:	499c      	ldr	r1, [pc, #624]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fe0:	4b97      	ldr	r3, [pc, #604]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe6:	f023 020c 	bic.w	r2, r3, #12
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fee:	4994      	ldr	r1, [pc, #592]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002002:	4b8f      	ldr	r3, [pc, #572]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002008:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	498b      	ldr	r1, [pc, #556]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002024:	4b86      	ldr	r3, [pc, #536]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4983      	ldr	r1, [pc, #524]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002046:	4b7e      	ldr	r3, [pc, #504]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002054:	497a      	ldr	r1, [pc, #488]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002068:	4b75      	ldr	r3, [pc, #468]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	4972      	ldr	r1, [pc, #456]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800208a:	4b6d      	ldr	r3, [pc, #436]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002090:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002098:	4969      	ldr	r1, [pc, #420]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020ac:	4b64      	ldr	r3, [pc, #400]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020ba:	4961      	ldr	r1, [pc, #388]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ce:	4b5c      	ldr	r3, [pc, #368]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020dc:	4958      	ldr	r1, [pc, #352]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020f0:	4b53      	ldr	r3, [pc, #332]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fe:	4950      	ldr	r1, [pc, #320]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002112:	4b4b      	ldr	r3, [pc, #300]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002118:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	4947      	ldr	r1, [pc, #284]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002134:	4b42      	ldr	r3, [pc, #264]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002136:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800213a:	f023 0203 	bic.w	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	493f      	ldr	r1, [pc, #252]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d028      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002156:	4b3a      	ldr	r3, [pc, #232]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002164:	4936      	ldr	r1, [pc, #216]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002174:	d106      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002176:	4b32      	ldr	r3, [pc, #200]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	4a31      	ldr	r2, [pc, #196]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800217c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002180:	60d3      	str	r3, [r2, #12]
 8002182:	e011      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800218c:	d10c      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3304      	adds	r3, #4
 8002192:	2101      	movs	r1, #1
 8002194:	4618      	mov	r0, r3
 8002196:	f000 f8c9 	bl	800232c <RCCEx_PLLSAI1_Config>
 800219a:	4603      	mov	r3, r0
 800219c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800219e:	7cfb      	ldrb	r3, [r7, #19]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80021a4:	7cfb      	ldrb	r3, [r7, #19]
 80021a6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d028      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021b4:	4b22      	ldr	r3, [pc, #136]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c2:	491f      	ldr	r1, [pc, #124]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021d2:	d106      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021d4:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4a19      	ldr	r2, [pc, #100]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021de:	60d3      	str	r3, [r2, #12]
 80021e0:	e011      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021ea:	d10c      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3304      	adds	r3, #4
 80021f0:	2101      	movs	r1, #1
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 f89a 	bl	800232c <RCCEx_PLLSAI1_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002202:	7cfb      	ldrb	r3, [r7, #19]
 8002204:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d02a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002218:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002220:	4907      	ldr	r1, [pc, #28]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800222c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002230:	d108      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002232:	4b03      	ldr	r3, [pc, #12]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	4a02      	ldr	r2, [pc, #8]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002238:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800223c:	60d3      	str	r3, [r2, #12]
 800223e:	e013      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002240:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002248:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800224c:	d10c      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3304      	adds	r3, #4
 8002252:	2101      	movs	r1, #1
 8002254:	4618      	mov	r0, r3
 8002256:	f000 f869 	bl	800232c <RCCEx_PLLSAI1_Config>
 800225a:	4603      	mov	r3, r0
 800225c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800225e:	7cfb      	ldrb	r3, [r7, #19]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d02f      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002274:	4b2c      	ldr	r3, [pc, #176]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002282:	4929      	ldr	r1, [pc, #164]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800228e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002292:	d10d      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3304      	adds	r3, #4
 8002298:	2102      	movs	r1, #2
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f846 	bl	800232c <RCCEx_PLLSAI1_Config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022a4:	7cfb      	ldrb	r3, [r7, #19]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d014      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80022aa:	7cfb      	ldrb	r3, [r7, #19]
 80022ac:	74bb      	strb	r3, [r7, #18]
 80022ae:	e011      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022b8:	d10c      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3320      	adds	r3, #32
 80022be:	2102      	movs	r1, #2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 f925 	bl	8002510 <RCCEx_PLLSAI2_Config>
 80022c6:	4603      	mov	r3, r0
 80022c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80022d0:	7cfb      	ldrb	r3, [r7, #19]
 80022d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00b      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022f0:	490d      	ldr	r1, [pc, #52]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00b      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002314:	4904      	ldr	r1, [pc, #16]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800231c:	7cbb      	ldrb	r3, [r7, #18]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000

0800232c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800233a:	4b74      	ldr	r3, [pc, #464]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d018      	beq.n	8002378 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002346:	4b71      	ldr	r3, [pc, #452]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f003 0203 	and.w	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d10d      	bne.n	8002372 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
       ||
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800235e:	4b6b      	ldr	r3, [pc, #428]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
       ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d047      	beq.n	8002402 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
 8002376:	e044      	b.n	8002402 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d018      	beq.n	80023b2 <RCCEx_PLLSAI1_Config+0x86>
 8002380:	2b03      	cmp	r3, #3
 8002382:	d825      	bhi.n	80023d0 <RCCEx_PLLSAI1_Config+0xa4>
 8002384:	2b01      	cmp	r3, #1
 8002386:	d002      	beq.n	800238e <RCCEx_PLLSAI1_Config+0x62>
 8002388:	2b02      	cmp	r3, #2
 800238a:	d009      	beq.n	80023a0 <RCCEx_PLLSAI1_Config+0x74>
 800238c:	e020      	b.n	80023d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800238e:	4b5f      	ldr	r3, [pc, #380]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d11d      	bne.n	80023d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800239e:	e01a      	b.n	80023d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023a0:	4b5a      	ldr	r3, [pc, #360]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d116      	bne.n	80023da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b0:	e013      	b.n	80023da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023b2:	4b56      	ldr	r3, [pc, #344]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10f      	bne.n	80023de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023be:	4b53      	ldr	r3, [pc, #332]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023ce:	e006      	b.n	80023de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
      break;
 80023d4:	e004      	b.n	80023e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023d6:	bf00      	nop
 80023d8:	e002      	b.n	80023e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023da:	bf00      	nop
 80023dc:	e000      	b.n	80023e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023de:	bf00      	nop
    }

    if(status == HAL_OK)
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10d      	bne.n	8002402 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023e6:	4b49      	ldr	r3, [pc, #292]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6819      	ldr	r1, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	430b      	orrs	r3, r1
 80023fc:	4943      	ldr	r1, [pc, #268]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d17c      	bne.n	8002502 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002408:	4b40      	ldr	r3, [pc, #256]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a3f      	ldr	r2, [pc, #252]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 800240e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002412:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002414:	f7fe fb52 	bl	8000abc <HAL_GetTick>
 8002418:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800241a:	e009      	b.n	8002430 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800241c:	f7fe fb4e 	bl	8000abc <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d902      	bls.n	8002430 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	73fb      	strb	r3, [r7, #15]
        break;
 800242e:	e005      	b.n	800243c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002430:	4b36      	ldr	r3, [pc, #216]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1ef      	bne.n	800241c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d15f      	bne.n	8002502 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d110      	bne.n	800246a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002448:	4b30      	ldr	r3, [pc, #192]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002450:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6892      	ldr	r2, [r2, #8]
 8002458:	0211      	lsls	r1, r2, #8
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68d2      	ldr	r2, [r2, #12]
 800245e:	06d2      	lsls	r2, r2, #27
 8002460:	430a      	orrs	r2, r1
 8002462:	492a      	ldr	r1, [pc, #168]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002464:	4313      	orrs	r3, r2
 8002466:	610b      	str	r3, [r1, #16]
 8002468:	e027      	b.n	80024ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d112      	bne.n	8002496 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002470:	4b26      	ldr	r3, [pc, #152]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002478:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6892      	ldr	r2, [r2, #8]
 8002480:	0211      	lsls	r1, r2, #8
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6912      	ldr	r2, [r2, #16]
 8002486:	0852      	lsrs	r2, r2, #1
 8002488:	3a01      	subs	r2, #1
 800248a:	0552      	lsls	r2, r2, #21
 800248c:	430a      	orrs	r2, r1
 800248e:	491f      	ldr	r1, [pc, #124]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002490:	4313      	orrs	r3, r2
 8002492:	610b      	str	r3, [r1, #16]
 8002494:	e011      	b.n	80024ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800249e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6892      	ldr	r2, [r2, #8]
 80024a6:	0211      	lsls	r1, r2, #8
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6952      	ldr	r2, [r2, #20]
 80024ac:	0852      	lsrs	r2, r2, #1
 80024ae:	3a01      	subs	r2, #1
 80024b0:	0652      	lsls	r2, r2, #25
 80024b2:	430a      	orrs	r2, r1
 80024b4:	4915      	ldr	r1, [pc, #84]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024ba:	4b14      	ldr	r3, [pc, #80]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a13      	ldr	r2, [pc, #76]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7fe faf9 	bl	8000abc <HAL_GetTick>
 80024ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024cc:	e009      	b.n	80024e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024ce:	f7fe faf5 	bl	8000abc <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d902      	bls.n	80024e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	73fb      	strb	r3, [r7, #15]
          break;
 80024e0:	e005      	b.n	80024ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0ef      	beq.n	80024ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d106      	bne.n	8002502 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	4903      	ldr	r1, [pc, #12]	; (800250c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002502:	7bfb      	ldrb	r3, [r7, #15]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021000 	.word	0x40021000

08002510 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800251e:	4b69      	ldr	r3, [pc, #420]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d018      	beq.n	800255c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800252a:	4b66      	ldr	r3, [pc, #408]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0203 	and.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d10d      	bne.n	8002556 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
       ||
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002542:	4b60      	ldr	r3, [pc, #384]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
       ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d047      	beq.n	80025e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	e044      	b.n	80025e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d018      	beq.n	8002596 <RCCEx_PLLSAI2_Config+0x86>
 8002564:	2b03      	cmp	r3, #3
 8002566:	d825      	bhi.n	80025b4 <RCCEx_PLLSAI2_Config+0xa4>
 8002568:	2b01      	cmp	r3, #1
 800256a:	d002      	beq.n	8002572 <RCCEx_PLLSAI2_Config+0x62>
 800256c:	2b02      	cmp	r3, #2
 800256e:	d009      	beq.n	8002584 <RCCEx_PLLSAI2_Config+0x74>
 8002570:	e020      	b.n	80025b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002572:	4b54      	ldr	r3, [pc, #336]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d11d      	bne.n	80025ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002582:	e01a      	b.n	80025ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002584:	4b4f      	ldr	r3, [pc, #316]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258c:	2b00      	cmp	r3, #0
 800258e:	d116      	bne.n	80025be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002594:	e013      	b.n	80025be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002596:	4b4b      	ldr	r3, [pc, #300]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025a2:	4b48      	ldr	r3, [pc, #288]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025b2:	e006      	b.n	80025c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
      break;
 80025b8:	e004      	b.n	80025c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025ba:	bf00      	nop
 80025bc:	e002      	b.n	80025c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025be:	bf00      	nop
 80025c0:	e000      	b.n	80025c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10d      	bne.n	80025e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025ca:	4b3e      	ldr	r3, [pc, #248]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6819      	ldr	r1, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	430b      	orrs	r3, r1
 80025e0:	4938      	ldr	r1, [pc, #224]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d166      	bne.n	80026ba <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025ec:	4b35      	ldr	r3, [pc, #212]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a34      	ldr	r2, [pc, #208]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80025f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f8:	f7fe fa60 	bl	8000abc <HAL_GetTick>
 80025fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025fe:	e009      	b.n	8002614 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002600:	f7fe fa5c 	bl	8000abc <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d902      	bls.n	8002614 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	73fb      	strb	r3, [r7, #15]
        break;
 8002612:	e005      	b.n	8002620 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002614:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1ef      	bne.n	8002600 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d149      	bne.n	80026ba <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d110      	bne.n	800264e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800262c:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002634:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6892      	ldr	r2, [r2, #8]
 800263c:	0211      	lsls	r1, r2, #8
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68d2      	ldr	r2, [r2, #12]
 8002642:	06d2      	lsls	r2, r2, #27
 8002644:	430a      	orrs	r2, r1
 8002646:	491f      	ldr	r1, [pc, #124]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002648:	4313      	orrs	r3, r2
 800264a:	614b      	str	r3, [r1, #20]
 800264c:	e011      	b.n	8002672 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800264e:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002656:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6892      	ldr	r2, [r2, #8]
 800265e:	0211      	lsls	r1, r2, #8
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6912      	ldr	r2, [r2, #16]
 8002664:	0852      	lsrs	r2, r2, #1
 8002666:	3a01      	subs	r2, #1
 8002668:	0652      	lsls	r2, r2, #25
 800266a:	430a      	orrs	r2, r1
 800266c:	4915      	ldr	r1, [pc, #84]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800266e:	4313      	orrs	r3, r2
 8002670:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002672:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a13      	ldr	r2, [pc, #76]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267e:	f7fe fa1d 	bl	8000abc <HAL_GetTick>
 8002682:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002684:	e009      	b.n	800269a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002686:	f7fe fa19 	bl	8000abc <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d902      	bls.n	800269a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	73fb      	strb	r3, [r7, #15]
          break;
 8002698:	e005      	b.n	80026a6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0ef      	beq.n	8002686 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d106      	bne.n	80026ba <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	4903      	ldr	r1, [pc, #12]	; (80026c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000

080026c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e040      	b.n	800275c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fe f8b6 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2224      	movs	r2, #36	; 0x24
 80026f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0201 	bic.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f8c0 	bl	800288c <UART_SetConfig>
 800270c:	4603      	mov	r3, r0
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e022      	b.n	800275c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 fb3e 	bl	8002da0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002732:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002742:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fbc5 	bl	8002ee4 <UART_CheckIdleState>
 800275a:	4603      	mov	r3, r0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	; 0x28
 8002768:	af02      	add	r7, sp, #8
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002778:	2b20      	cmp	r3, #32
 800277a:	f040 8082 	bne.w	8002882 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <HAL_UART_Transmit+0x26>
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e07a      	b.n	8002884 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_UART_Transmit+0x38>
 8002798:	2302      	movs	r3, #2
 800279a:	e073      	b.n	8002884 <HAL_UART_Transmit+0x120>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2221      	movs	r2, #33	; 0x21
 80027b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027b2:	f7fe f983 	bl	8000abc <HAL_GetTick>
 80027b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	88fa      	ldrh	r2, [r7, #6]
 80027bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	88fa      	ldrh	r2, [r7, #6]
 80027c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d0:	d108      	bne.n	80027e4 <HAL_UART_Transmit+0x80>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d104      	bne.n	80027e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	e003      	b.n	80027ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80027f4:	e02d      	b.n	8002852 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2200      	movs	r2, #0
 80027fe:	2180      	movs	r1, #128	; 0x80
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 fbb8 	bl	8002f76 <UART_WaitOnFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e039      	b.n	8002884 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10b      	bne.n	800282e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	881a      	ldrh	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002822:	b292      	uxth	r2, r2
 8002824:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	3302      	adds	r3, #2
 800282a:	61bb      	str	r3, [r7, #24]
 800282c:	e008      	b.n	8002840 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	b292      	uxth	r2, r2
 8002838:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3301      	adds	r3, #1
 800283e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1cb      	bne.n	80027f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2200      	movs	r2, #0
 8002866:	2140      	movs	r1, #64	; 0x40
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 fb84 	bl	8002f76 <UART_WaitOnFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e005      	b.n	8002884 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	e000      	b.n	8002884 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002882:	2302      	movs	r3, #2
  }
}
 8002884:	4618      	mov	r0, r3
 8002886:	3720      	adds	r7, #32
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800288c:	b5b0      	push	{r4, r5, r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4bad      	ldr	r3, [pc, #692]	; (8002b6c <UART_SetConfig+0x2e0>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	69f9      	ldr	r1, [r7, #28]
 80028c0:	430b      	orrs	r3, r1
 80028c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4aa2      	ldr	r2, [pc, #648]	; (8002b70 <UART_SetConfig+0x2e4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d004      	beq.n	80028f4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	430a      	orrs	r2, r1
 8002906:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a99      	ldr	r2, [pc, #612]	; (8002b74 <UART_SetConfig+0x2e8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d121      	bne.n	8002956 <UART_SetConfig+0xca>
 8002912:	4b99      	ldr	r3, [pc, #612]	; (8002b78 <UART_SetConfig+0x2ec>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b03      	cmp	r3, #3
 800291e:	d817      	bhi.n	8002950 <UART_SetConfig+0xc4>
 8002920:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <UART_SetConfig+0x9c>)
 8002922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002926:	bf00      	nop
 8002928:	08002939 	.word	0x08002939
 800292c:	08002945 	.word	0x08002945
 8002930:	0800293f 	.word	0x0800293f
 8002934:	0800294b 	.word	0x0800294b
 8002938:	2301      	movs	r3, #1
 800293a:	76fb      	strb	r3, [r7, #27]
 800293c:	e0e7      	b.n	8002b0e <UART_SetConfig+0x282>
 800293e:	2302      	movs	r3, #2
 8002940:	76fb      	strb	r3, [r7, #27]
 8002942:	e0e4      	b.n	8002b0e <UART_SetConfig+0x282>
 8002944:	2304      	movs	r3, #4
 8002946:	76fb      	strb	r3, [r7, #27]
 8002948:	e0e1      	b.n	8002b0e <UART_SetConfig+0x282>
 800294a:	2308      	movs	r3, #8
 800294c:	76fb      	strb	r3, [r7, #27]
 800294e:	e0de      	b.n	8002b0e <UART_SetConfig+0x282>
 8002950:	2310      	movs	r3, #16
 8002952:	76fb      	strb	r3, [r7, #27]
 8002954:	e0db      	b.n	8002b0e <UART_SetConfig+0x282>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a88      	ldr	r2, [pc, #544]	; (8002b7c <UART_SetConfig+0x2f0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d132      	bne.n	80029c6 <UART_SetConfig+0x13a>
 8002960:	4b85      	ldr	r3, [pc, #532]	; (8002b78 <UART_SetConfig+0x2ec>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d828      	bhi.n	80029c0 <UART_SetConfig+0x134>
 800296e:	a201      	add	r2, pc, #4	; (adr r2, 8002974 <UART_SetConfig+0xe8>)
 8002970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002974:	080029a9 	.word	0x080029a9
 8002978:	080029c1 	.word	0x080029c1
 800297c:	080029c1 	.word	0x080029c1
 8002980:	080029c1 	.word	0x080029c1
 8002984:	080029b5 	.word	0x080029b5
 8002988:	080029c1 	.word	0x080029c1
 800298c:	080029c1 	.word	0x080029c1
 8002990:	080029c1 	.word	0x080029c1
 8002994:	080029af 	.word	0x080029af
 8002998:	080029c1 	.word	0x080029c1
 800299c:	080029c1 	.word	0x080029c1
 80029a0:	080029c1 	.word	0x080029c1
 80029a4:	080029bb 	.word	0x080029bb
 80029a8:	2300      	movs	r3, #0
 80029aa:	76fb      	strb	r3, [r7, #27]
 80029ac:	e0af      	b.n	8002b0e <UART_SetConfig+0x282>
 80029ae:	2302      	movs	r3, #2
 80029b0:	76fb      	strb	r3, [r7, #27]
 80029b2:	e0ac      	b.n	8002b0e <UART_SetConfig+0x282>
 80029b4:	2304      	movs	r3, #4
 80029b6:	76fb      	strb	r3, [r7, #27]
 80029b8:	e0a9      	b.n	8002b0e <UART_SetConfig+0x282>
 80029ba:	2308      	movs	r3, #8
 80029bc:	76fb      	strb	r3, [r7, #27]
 80029be:	e0a6      	b.n	8002b0e <UART_SetConfig+0x282>
 80029c0:	2310      	movs	r3, #16
 80029c2:	76fb      	strb	r3, [r7, #27]
 80029c4:	e0a3      	b.n	8002b0e <UART_SetConfig+0x282>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a6d      	ldr	r2, [pc, #436]	; (8002b80 <UART_SetConfig+0x2f4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d120      	bne.n	8002a12 <UART_SetConfig+0x186>
 80029d0:	4b69      	ldr	r3, [pc, #420]	; (8002b78 <UART_SetConfig+0x2ec>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029da:	2b30      	cmp	r3, #48	; 0x30
 80029dc:	d013      	beq.n	8002a06 <UART_SetConfig+0x17a>
 80029de:	2b30      	cmp	r3, #48	; 0x30
 80029e0:	d814      	bhi.n	8002a0c <UART_SetConfig+0x180>
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d009      	beq.n	80029fa <UART_SetConfig+0x16e>
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	d810      	bhi.n	8002a0c <UART_SetConfig+0x180>
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <UART_SetConfig+0x168>
 80029ee:	2b10      	cmp	r3, #16
 80029f0:	d006      	beq.n	8002a00 <UART_SetConfig+0x174>
 80029f2:	e00b      	b.n	8002a0c <UART_SetConfig+0x180>
 80029f4:	2300      	movs	r3, #0
 80029f6:	76fb      	strb	r3, [r7, #27]
 80029f8:	e089      	b.n	8002b0e <UART_SetConfig+0x282>
 80029fa:	2302      	movs	r3, #2
 80029fc:	76fb      	strb	r3, [r7, #27]
 80029fe:	e086      	b.n	8002b0e <UART_SetConfig+0x282>
 8002a00:	2304      	movs	r3, #4
 8002a02:	76fb      	strb	r3, [r7, #27]
 8002a04:	e083      	b.n	8002b0e <UART_SetConfig+0x282>
 8002a06:	2308      	movs	r3, #8
 8002a08:	76fb      	strb	r3, [r7, #27]
 8002a0a:	e080      	b.n	8002b0e <UART_SetConfig+0x282>
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	76fb      	strb	r3, [r7, #27]
 8002a10:	e07d      	b.n	8002b0e <UART_SetConfig+0x282>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a5b      	ldr	r2, [pc, #364]	; (8002b84 <UART_SetConfig+0x2f8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d120      	bne.n	8002a5e <UART_SetConfig+0x1d2>
 8002a1c:	4b56      	ldr	r3, [pc, #344]	; (8002b78 <UART_SetConfig+0x2ec>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a26:	2bc0      	cmp	r3, #192	; 0xc0
 8002a28:	d013      	beq.n	8002a52 <UART_SetConfig+0x1c6>
 8002a2a:	2bc0      	cmp	r3, #192	; 0xc0
 8002a2c:	d814      	bhi.n	8002a58 <UART_SetConfig+0x1cc>
 8002a2e:	2b80      	cmp	r3, #128	; 0x80
 8002a30:	d009      	beq.n	8002a46 <UART_SetConfig+0x1ba>
 8002a32:	2b80      	cmp	r3, #128	; 0x80
 8002a34:	d810      	bhi.n	8002a58 <UART_SetConfig+0x1cc>
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <UART_SetConfig+0x1b4>
 8002a3a:	2b40      	cmp	r3, #64	; 0x40
 8002a3c:	d006      	beq.n	8002a4c <UART_SetConfig+0x1c0>
 8002a3e:	e00b      	b.n	8002a58 <UART_SetConfig+0x1cc>
 8002a40:	2300      	movs	r3, #0
 8002a42:	76fb      	strb	r3, [r7, #27]
 8002a44:	e063      	b.n	8002b0e <UART_SetConfig+0x282>
 8002a46:	2302      	movs	r3, #2
 8002a48:	76fb      	strb	r3, [r7, #27]
 8002a4a:	e060      	b.n	8002b0e <UART_SetConfig+0x282>
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	76fb      	strb	r3, [r7, #27]
 8002a50:	e05d      	b.n	8002b0e <UART_SetConfig+0x282>
 8002a52:	2308      	movs	r3, #8
 8002a54:	76fb      	strb	r3, [r7, #27]
 8002a56:	e05a      	b.n	8002b0e <UART_SetConfig+0x282>
 8002a58:	2310      	movs	r3, #16
 8002a5a:	76fb      	strb	r3, [r7, #27]
 8002a5c:	e057      	b.n	8002b0e <UART_SetConfig+0x282>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a49      	ldr	r2, [pc, #292]	; (8002b88 <UART_SetConfig+0x2fc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d125      	bne.n	8002ab4 <UART_SetConfig+0x228>
 8002a68:	4b43      	ldr	r3, [pc, #268]	; (8002b78 <UART_SetConfig+0x2ec>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a76:	d017      	beq.n	8002aa8 <UART_SetConfig+0x21c>
 8002a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a7c:	d817      	bhi.n	8002aae <UART_SetConfig+0x222>
 8002a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a82:	d00b      	beq.n	8002a9c <UART_SetConfig+0x210>
 8002a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a88:	d811      	bhi.n	8002aae <UART_SetConfig+0x222>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <UART_SetConfig+0x20a>
 8002a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a92:	d006      	beq.n	8002aa2 <UART_SetConfig+0x216>
 8002a94:	e00b      	b.n	8002aae <UART_SetConfig+0x222>
 8002a96:	2300      	movs	r3, #0
 8002a98:	76fb      	strb	r3, [r7, #27]
 8002a9a:	e038      	b.n	8002b0e <UART_SetConfig+0x282>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	76fb      	strb	r3, [r7, #27]
 8002aa0:	e035      	b.n	8002b0e <UART_SetConfig+0x282>
 8002aa2:	2304      	movs	r3, #4
 8002aa4:	76fb      	strb	r3, [r7, #27]
 8002aa6:	e032      	b.n	8002b0e <UART_SetConfig+0x282>
 8002aa8:	2308      	movs	r3, #8
 8002aaa:	76fb      	strb	r3, [r7, #27]
 8002aac:	e02f      	b.n	8002b0e <UART_SetConfig+0x282>
 8002aae:	2310      	movs	r3, #16
 8002ab0:	76fb      	strb	r3, [r7, #27]
 8002ab2:	e02c      	b.n	8002b0e <UART_SetConfig+0x282>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2d      	ldr	r2, [pc, #180]	; (8002b70 <UART_SetConfig+0x2e4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d125      	bne.n	8002b0a <UART_SetConfig+0x27e>
 8002abe:	4b2e      	ldr	r3, [pc, #184]	; (8002b78 <UART_SetConfig+0x2ec>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ac8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002acc:	d017      	beq.n	8002afe <UART_SetConfig+0x272>
 8002ace:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ad2:	d817      	bhi.n	8002b04 <UART_SetConfig+0x278>
 8002ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad8:	d00b      	beq.n	8002af2 <UART_SetConfig+0x266>
 8002ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ade:	d811      	bhi.n	8002b04 <UART_SetConfig+0x278>
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <UART_SetConfig+0x260>
 8002ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae8:	d006      	beq.n	8002af8 <UART_SetConfig+0x26c>
 8002aea:	e00b      	b.n	8002b04 <UART_SetConfig+0x278>
 8002aec:	2300      	movs	r3, #0
 8002aee:	76fb      	strb	r3, [r7, #27]
 8002af0:	e00d      	b.n	8002b0e <UART_SetConfig+0x282>
 8002af2:	2302      	movs	r3, #2
 8002af4:	76fb      	strb	r3, [r7, #27]
 8002af6:	e00a      	b.n	8002b0e <UART_SetConfig+0x282>
 8002af8:	2304      	movs	r3, #4
 8002afa:	76fb      	strb	r3, [r7, #27]
 8002afc:	e007      	b.n	8002b0e <UART_SetConfig+0x282>
 8002afe:	2308      	movs	r3, #8
 8002b00:	76fb      	strb	r3, [r7, #27]
 8002b02:	e004      	b.n	8002b0e <UART_SetConfig+0x282>
 8002b04:	2310      	movs	r3, #16
 8002b06:	76fb      	strb	r3, [r7, #27]
 8002b08:	e001      	b.n	8002b0e <UART_SetConfig+0x282>
 8002b0a:	2310      	movs	r3, #16
 8002b0c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a17      	ldr	r2, [pc, #92]	; (8002b70 <UART_SetConfig+0x2e4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	f040 8087 	bne.w	8002c28 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b1a:	7efb      	ldrb	r3, [r7, #27]
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d837      	bhi.n	8002b90 <UART_SetConfig+0x304>
 8002b20:	a201      	add	r2, pc, #4	; (adr r2, 8002b28 <UART_SetConfig+0x29c>)
 8002b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b26:	bf00      	nop
 8002b28:	08002b4d 	.word	0x08002b4d
 8002b2c:	08002b91 	.word	0x08002b91
 8002b30:	08002b55 	.word	0x08002b55
 8002b34:	08002b91 	.word	0x08002b91
 8002b38:	08002b5b 	.word	0x08002b5b
 8002b3c:	08002b91 	.word	0x08002b91
 8002b40:	08002b91 	.word	0x08002b91
 8002b44:	08002b91 	.word	0x08002b91
 8002b48:	08002b63 	.word	0x08002b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b4c:	f7ff f866 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 8002b50:	6178      	str	r0, [r7, #20]
        break;
 8002b52:	e022      	b.n	8002b9a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b54:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <UART_SetConfig+0x300>)
 8002b56:	617b      	str	r3, [r7, #20]
        break;
 8002b58:	e01f      	b.n	8002b9a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b5a:	f7fe ffc7 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8002b5e:	6178      	str	r0, [r7, #20]
        break;
 8002b60:	e01b      	b.n	8002b9a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b66:	617b      	str	r3, [r7, #20]
        break;
 8002b68:	e017      	b.n	8002b9a <UART_SetConfig+0x30e>
 8002b6a:	bf00      	nop
 8002b6c:	efff69f3 	.word	0xefff69f3
 8002b70:	40008000 	.word	0x40008000
 8002b74:	40013800 	.word	0x40013800
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40004400 	.word	0x40004400
 8002b80:	40004800 	.word	0x40004800
 8002b84:	40004c00 	.word	0x40004c00
 8002b88:	40005000 	.word	0x40005000
 8002b8c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	76bb      	strb	r3, [r7, #26]
        break;
 8002b98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80f1 	beq.w	8002d84 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	4413      	add	r3, r2
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d305      	bcc.n	8002bbe <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d902      	bls.n	8002bc4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	76bb      	strb	r3, [r7, #26]
 8002bc2:	e0df      	b.n	8002d84 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f04f 0100 	mov.w	r1, #0
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	020b      	lsls	r3, r1, #8
 8002bd6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002bda:	0202      	lsls	r2, r0, #8
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	6849      	ldr	r1, [r1, #4]
 8002be0:	0849      	lsrs	r1, r1, #1
 8002be2:	4608      	mov	r0, r1
 8002be4:	f04f 0100 	mov.w	r1, #0
 8002be8:	1814      	adds	r4, r2, r0
 8002bea:	eb43 0501 	adc.w	r5, r3, r1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	4629      	mov	r1, r5
 8002bfc:	f7fd fafe 	bl	80001fc <__aeabi_uldivmod>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4613      	mov	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c0e:	d308      	bcc.n	8002c22 <UART_SetConfig+0x396>
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c16:	d204      	bcs.n	8002c22 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	60da      	str	r2, [r3, #12]
 8002c20:	e0b0      	b.n	8002d84 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	76bb      	strb	r3, [r7, #26]
 8002c26:	e0ad      	b.n	8002d84 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c30:	d15c      	bne.n	8002cec <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8002c32:	7efb      	ldrb	r3, [r7, #27]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d828      	bhi.n	8002c8a <UART_SetConfig+0x3fe>
 8002c38:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <UART_SetConfig+0x3b4>)
 8002c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3e:	bf00      	nop
 8002c40:	08002c65 	.word	0x08002c65
 8002c44:	08002c6d 	.word	0x08002c6d
 8002c48:	08002c75 	.word	0x08002c75
 8002c4c:	08002c8b 	.word	0x08002c8b
 8002c50:	08002c7b 	.word	0x08002c7b
 8002c54:	08002c8b 	.word	0x08002c8b
 8002c58:	08002c8b 	.word	0x08002c8b
 8002c5c:	08002c8b 	.word	0x08002c8b
 8002c60:	08002c83 	.word	0x08002c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c64:	f7fe ffda 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 8002c68:	6178      	str	r0, [r7, #20]
        break;
 8002c6a:	e013      	b.n	8002c94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c6c:	f7fe ffec 	bl	8001c48 <HAL_RCC_GetPCLK2Freq>
 8002c70:	6178      	str	r0, [r7, #20]
        break;
 8002c72:	e00f      	b.n	8002c94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c74:	4b49      	ldr	r3, [pc, #292]	; (8002d9c <UART_SetConfig+0x510>)
 8002c76:	617b      	str	r3, [r7, #20]
        break;
 8002c78:	e00c      	b.n	8002c94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c7a:	f7fe ff37 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8002c7e:	6178      	str	r0, [r7, #20]
        break;
 8002c80:	e008      	b.n	8002c94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c86:	617b      	str	r3, [r7, #20]
        break;
 8002c88:	e004      	b.n	8002c94 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	76bb      	strb	r3, [r7, #26]
        break;
 8002c92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d074      	beq.n	8002d84 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	005a      	lsls	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	441a      	add	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b0f      	cmp	r3, #15
 8002cb6:	d916      	bls.n	8002ce6 <UART_SetConfig+0x45a>
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbe:	d212      	bcs.n	8002ce6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	f023 030f 	bic.w	r3, r3, #15
 8002cc8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	085b      	lsrs	r3, r3, #1
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	89fb      	ldrh	r3, [r7, #14]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	89fa      	ldrh	r2, [r7, #14]
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	e04e      	b.n	8002d84 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	76bb      	strb	r3, [r7, #26]
 8002cea:	e04b      	b.n	8002d84 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cec:	7efb      	ldrb	r3, [r7, #27]
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d827      	bhi.n	8002d42 <UART_SetConfig+0x4b6>
 8002cf2:	a201      	add	r2, pc, #4	; (adr r2, 8002cf8 <UART_SetConfig+0x46c>)
 8002cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf8:	08002d1d 	.word	0x08002d1d
 8002cfc:	08002d25 	.word	0x08002d25
 8002d00:	08002d2d 	.word	0x08002d2d
 8002d04:	08002d43 	.word	0x08002d43
 8002d08:	08002d33 	.word	0x08002d33
 8002d0c:	08002d43 	.word	0x08002d43
 8002d10:	08002d43 	.word	0x08002d43
 8002d14:	08002d43 	.word	0x08002d43
 8002d18:	08002d3b 	.word	0x08002d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d1c:	f7fe ff7e 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 8002d20:	6178      	str	r0, [r7, #20]
        break;
 8002d22:	e013      	b.n	8002d4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d24:	f7fe ff90 	bl	8001c48 <HAL_RCC_GetPCLK2Freq>
 8002d28:	6178      	str	r0, [r7, #20]
        break;
 8002d2a:	e00f      	b.n	8002d4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <UART_SetConfig+0x510>)
 8002d2e:	617b      	str	r3, [r7, #20]
        break;
 8002d30:	e00c      	b.n	8002d4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d32:	f7fe fedb 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8002d36:	6178      	str	r0, [r7, #20]
        break;
 8002d38:	e008      	b.n	8002d4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d3e:	617b      	str	r3, [r7, #20]
        break;
 8002d40:	e004      	b.n	8002d4c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	76bb      	strb	r3, [r7, #26]
        break;
 8002d4a:	bf00      	nop
    }

    if (pclk != 0U)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d018      	beq.n	8002d84 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	085a      	lsrs	r2, r3, #1
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	441a      	add	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	2b0f      	cmp	r3, #15
 8002d6c:	d908      	bls.n	8002d80 <UART_SetConfig+0x4f4>
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d74:	d204      	bcs.n	8002d80 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	e001      	b.n	8002d84 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d90:	7ebb      	ldrb	r3, [r7, #26]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3720      	adds	r7, #32
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bdb0      	pop	{r4, r5, r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	00f42400 	.word	0x00f42400

08002da0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01a      	beq.n	8002eb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e9e:	d10a      	bne.n	8002eb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	605a      	str	r2, [r3, #4]
  }
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ef4:	f7fd fde2 	bl	8000abc <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d10e      	bne.n	8002f26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f82d 	bl	8002f76 <UART_WaitOnFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e023      	b.n	8002f6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d10e      	bne.n	8002f52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f817 	bl	8002f76 <UART_WaitOnFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e00d      	b.n	8002f6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2220      	movs	r2, #32
 8002f56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	603b      	str	r3, [r7, #0]
 8002f82:	4613      	mov	r3, r2
 8002f84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f86:	e05e      	b.n	8003046 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d05a      	beq.n	8003046 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f90:	f7fd fd94 	bl	8000abc <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d302      	bcc.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d11b      	bne.n	8002fde <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fb4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0201 	bic.w	r2, r2, #1
 8002fc4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e043      	b.n	8003066 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d02c      	beq.n	8003046 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffa:	d124      	bne.n	8003046 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003004:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003014:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0201 	bic.w	r2, r2, #1
 8003024:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2220      	movs	r2, #32
 800302a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2220      	movs	r2, #32
 8003036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e00f      	b.n	8003066 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69da      	ldr	r2, [r3, #28]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4013      	ands	r3, r2
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	429a      	cmp	r2, r3
 8003054:	bf0c      	ite	eq
 8003056:	2301      	moveq	r3, #1
 8003058:	2300      	movne	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	429a      	cmp	r2, r3
 8003062:	d091      	beq.n	8002f88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <__libc_init_array>:
 8003070:	b570      	push	{r4, r5, r6, lr}
 8003072:	4d0d      	ldr	r5, [pc, #52]	; (80030a8 <__libc_init_array+0x38>)
 8003074:	4c0d      	ldr	r4, [pc, #52]	; (80030ac <__libc_init_array+0x3c>)
 8003076:	1b64      	subs	r4, r4, r5
 8003078:	10a4      	asrs	r4, r4, #2
 800307a:	2600      	movs	r6, #0
 800307c:	42a6      	cmp	r6, r4
 800307e:	d109      	bne.n	8003094 <__libc_init_array+0x24>
 8003080:	4d0b      	ldr	r5, [pc, #44]	; (80030b0 <__libc_init_array+0x40>)
 8003082:	4c0c      	ldr	r4, [pc, #48]	; (80030b4 <__libc_init_array+0x44>)
 8003084:	f000 f820 	bl	80030c8 <_init>
 8003088:	1b64      	subs	r4, r4, r5
 800308a:	10a4      	asrs	r4, r4, #2
 800308c:	2600      	movs	r6, #0
 800308e:	42a6      	cmp	r6, r4
 8003090:	d105      	bne.n	800309e <__libc_init_array+0x2e>
 8003092:	bd70      	pop	{r4, r5, r6, pc}
 8003094:	f855 3b04 	ldr.w	r3, [r5], #4
 8003098:	4798      	blx	r3
 800309a:	3601      	adds	r6, #1
 800309c:	e7ee      	b.n	800307c <__libc_init_array+0xc>
 800309e:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a2:	4798      	blx	r3
 80030a4:	3601      	adds	r6, #1
 80030a6:	e7f2      	b.n	800308e <__libc_init_array+0x1e>
 80030a8:	0800314c 	.word	0x0800314c
 80030ac:	0800314c 	.word	0x0800314c
 80030b0:	0800314c 	.word	0x0800314c
 80030b4:	08003150 	.word	0x08003150

080030b8 <memset>:
 80030b8:	4402      	add	r2, r0
 80030ba:	4603      	mov	r3, r0
 80030bc:	4293      	cmp	r3, r2
 80030be:	d100      	bne.n	80030c2 <memset+0xa>
 80030c0:	4770      	bx	lr
 80030c2:	f803 1b01 	strb.w	r1, [r3], #1
 80030c6:	e7f9      	b.n	80030bc <memset+0x4>

080030c8 <_init>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	bf00      	nop
 80030cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ce:	bc08      	pop	{r3}
 80030d0:	469e      	mov	lr, r3
 80030d2:	4770      	bx	lr

080030d4 <_fini>:
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d6:	bf00      	nop
 80030d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030da:	bc08      	pop	{r3}
 80030dc:	469e      	mov	lr, r3
 80030de:	4770      	bx	lr
