
adc-polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060f8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080062a8  080062a8  000162a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800634c  0800634c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800634c  0800634c  0001634c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006354  08006354  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006354  08006354  00016354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006358  08006358  00016358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800635c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  20000070  080063cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  080063cc  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143f1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000285e  00000000  00000000  00034491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  00036cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  00037db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b0bf  00000000  00000000  00038d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011352  00000000  00000000  00063e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d625  00000000  00000000  00075189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001827ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004be0  00000000  00000000  00182804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006290 	.word	0x08006290

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08006290 	.word	0x08006290

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b96e 	b.w	8000dd0 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9d08      	ldr	r5, [sp, #32]
 8000b12:	4604      	mov	r4, r0
 8000b14:	468c      	mov	ip, r1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f040 8083 	bne.w	8000c22 <__udivmoddi4+0x116>
 8000b1c:	428a      	cmp	r2, r1
 8000b1e:	4617      	mov	r7, r2
 8000b20:	d947      	bls.n	8000bb2 <__udivmoddi4+0xa6>
 8000b22:	fab2 f282 	clz	r2, r2
 8000b26:	b142      	cbz	r2, 8000b3a <__udivmoddi4+0x2e>
 8000b28:	f1c2 0020 	rsb	r0, r2, #32
 8000b2c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b30:	4091      	lsls	r1, r2
 8000b32:	4097      	lsls	r7, r2
 8000b34:	ea40 0c01 	orr.w	ip, r0, r1
 8000b38:	4094      	lsls	r4, r2
 8000b3a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b3e:	0c23      	lsrs	r3, r4, #16
 8000b40:	fbbc f6f8 	udiv	r6, ip, r8
 8000b44:	fa1f fe87 	uxth.w	lr, r7
 8000b48:	fb08 c116 	mls	r1, r8, r6, ip
 8000b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b50:	fb06 f10e 	mul.w	r1, r6, lr
 8000b54:	4299      	cmp	r1, r3
 8000b56:	d909      	bls.n	8000b6c <__udivmoddi4+0x60>
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b5e:	f080 8119 	bcs.w	8000d94 <__udivmoddi4+0x288>
 8000b62:	4299      	cmp	r1, r3
 8000b64:	f240 8116 	bls.w	8000d94 <__udivmoddi4+0x288>
 8000b68:	3e02      	subs	r6, #2
 8000b6a:	443b      	add	r3, r7
 8000b6c:	1a5b      	subs	r3, r3, r1
 8000b6e:	b2a4      	uxth	r4, r4
 8000b70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b74:	fb08 3310 	mls	r3, r8, r0, r3
 8000b78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b80:	45a6      	cmp	lr, r4
 8000b82:	d909      	bls.n	8000b98 <__udivmoddi4+0x8c>
 8000b84:	193c      	adds	r4, r7, r4
 8000b86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8a:	f080 8105 	bcs.w	8000d98 <__udivmoddi4+0x28c>
 8000b8e:	45a6      	cmp	lr, r4
 8000b90:	f240 8102 	bls.w	8000d98 <__udivmoddi4+0x28c>
 8000b94:	3802      	subs	r0, #2
 8000b96:	443c      	add	r4, r7
 8000b98:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b9c:	eba4 040e 	sub.w	r4, r4, lr
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	b11d      	cbz	r5, 8000bac <__udivmoddi4+0xa0>
 8000ba4:	40d4      	lsrs	r4, r2
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bac:	4631      	mov	r1, r6
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	b902      	cbnz	r2, 8000bb6 <__udivmoddi4+0xaa>
 8000bb4:	deff      	udf	#255	; 0xff
 8000bb6:	fab2 f282 	clz	r2, r2
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	d150      	bne.n	8000c60 <__udivmoddi4+0x154>
 8000bbe:	1bcb      	subs	r3, r1, r7
 8000bc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc4:	fa1f f887 	uxth.w	r8, r7
 8000bc8:	2601      	movs	r6, #1
 8000bca:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bce:	0c21      	lsrs	r1, r4, #16
 8000bd0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bd8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bdc:	428b      	cmp	r3, r1
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0xe4>
 8000be0:	1879      	adds	r1, r7, r1
 8000be2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0xe2>
 8000be8:	428b      	cmp	r3, r1
 8000bea:	f200 80e9 	bhi.w	8000dc0 <__udivmoddi4+0x2b4>
 8000bee:	4684      	mov	ip, r0
 8000bf0:	1ac9      	subs	r1, r1, r3
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bfc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c00:	fb08 f800 	mul.w	r8, r8, r0
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x10c>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x10a>
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	f200 80d9 	bhi.w	8000dc8 <__udivmoddi4+0x2bc>
 8000c16:	4618      	mov	r0, r3
 8000c18:	eba4 0408 	sub.w	r4, r4, r8
 8000c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c20:	e7bf      	b.n	8000ba2 <__udivmoddi4+0x96>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x12e>
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	f000 80b1 	beq.w	8000d8e <__udivmoddi4+0x282>
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c32:	4630      	mov	r0, r6
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	fab3 f683 	clz	r6, r3
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d14a      	bne.n	8000cd8 <__udivmoddi4+0x1cc>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d302      	bcc.n	8000c4c <__udivmoddi4+0x140>
 8000c46:	4282      	cmp	r2, r0
 8000c48:	f200 80b8 	bhi.w	8000dbc <__udivmoddi4+0x2b0>
 8000c4c:	1a84      	subs	r4, r0, r2
 8000c4e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	468c      	mov	ip, r1
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d0a8      	beq.n	8000bac <__udivmoddi4+0xa0>
 8000c5a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c5e:	e7a5      	b.n	8000bac <__udivmoddi4+0xa0>
 8000c60:	f1c2 0320 	rsb	r3, r2, #32
 8000c64:	fa20 f603 	lsr.w	r6, r0, r3
 8000c68:	4097      	lsls	r7, r2
 8000c6a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c6e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c72:	40d9      	lsrs	r1, r3
 8000c74:	4330      	orrs	r0, r6
 8000c76:	0c03      	lsrs	r3, r0, #16
 8000c78:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c7c:	fa1f f887 	uxth.w	r8, r7
 8000c80:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c88:	fb06 f108 	mul.w	r1, r6, r8
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x19c>
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c9a:	f080 808d 	bcs.w	8000db8 <__udivmoddi4+0x2ac>
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	f240 808a 	bls.w	8000db8 <__udivmoddi4+0x2ac>
 8000ca4:	3e02      	subs	r6, #2
 8000ca6:	443b      	add	r3, r7
 8000ca8:	1a5b      	subs	r3, r3, r1
 8000caa:	b281      	uxth	r1, r0
 8000cac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb8:	fb00 f308 	mul.w	r3, r0, r8
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0x1c4>
 8000cc0:	1879      	adds	r1, r7, r1
 8000cc2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cc6:	d273      	bcs.n	8000db0 <__udivmoddi4+0x2a4>
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d971      	bls.n	8000db0 <__udivmoddi4+0x2a4>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4439      	add	r1, r7
 8000cd0:	1acb      	subs	r3, r1, r3
 8000cd2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cd6:	e778      	b.n	8000bca <__udivmoddi4+0xbe>
 8000cd8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cdc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ce0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ce4:	431c      	orrs	r4, r3
 8000ce6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cea:	fa01 f306 	lsl.w	r3, r1, r6
 8000cee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cf2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cf6:	431f      	orrs	r7, r3
 8000cf8:	0c3b      	lsrs	r3, r7, #16
 8000cfa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cfe:	fa1f f884 	uxth.w	r8, r4
 8000d02:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d06:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d0a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d0e:	458a      	cmp	sl, r1
 8000d10:	fa02 f206 	lsl.w	r2, r2, r6
 8000d14:	fa00 f306 	lsl.w	r3, r0, r6
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x220>
 8000d1a:	1861      	adds	r1, r4, r1
 8000d1c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d20:	d248      	bcs.n	8000db4 <__udivmoddi4+0x2a8>
 8000d22:	458a      	cmp	sl, r1
 8000d24:	d946      	bls.n	8000db4 <__udivmoddi4+0x2a8>
 8000d26:	f1a9 0902 	sub.w	r9, r9, #2
 8000d2a:	4421      	add	r1, r4
 8000d2c:	eba1 010a 	sub.w	r1, r1, sl
 8000d30:	b2bf      	uxth	r7, r7
 8000d32:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d36:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d3e:	fb00 f808 	mul.w	r8, r0, r8
 8000d42:	45b8      	cmp	r8, r7
 8000d44:	d907      	bls.n	8000d56 <__udivmoddi4+0x24a>
 8000d46:	19e7      	adds	r7, r4, r7
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d22e      	bcs.n	8000dac <__udivmoddi4+0x2a0>
 8000d4e:	45b8      	cmp	r8, r7
 8000d50:	d92c      	bls.n	8000dac <__udivmoddi4+0x2a0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	4427      	add	r7, r4
 8000d56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d5a:	eba7 0708 	sub.w	r7, r7, r8
 8000d5e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d62:	454f      	cmp	r7, r9
 8000d64:	46c6      	mov	lr, r8
 8000d66:	4649      	mov	r1, r9
 8000d68:	d31a      	bcc.n	8000da0 <__udivmoddi4+0x294>
 8000d6a:	d017      	beq.n	8000d9c <__udivmoddi4+0x290>
 8000d6c:	b15d      	cbz	r5, 8000d86 <__udivmoddi4+0x27a>
 8000d6e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d72:	eb67 0701 	sbc.w	r7, r7, r1
 8000d76:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d7a:	40f2      	lsrs	r2, r6
 8000d7c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d80:	40f7      	lsrs	r7, r6
 8000d82:	e9c5 2700 	strd	r2, r7, [r5]
 8000d86:	2600      	movs	r6, #0
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	462e      	mov	r6, r5
 8000d90:	4628      	mov	r0, r5
 8000d92:	e70b      	b.n	8000bac <__udivmoddi4+0xa0>
 8000d94:	4606      	mov	r6, r0
 8000d96:	e6e9      	b.n	8000b6c <__udivmoddi4+0x60>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	e6fd      	b.n	8000b98 <__udivmoddi4+0x8c>
 8000d9c:	4543      	cmp	r3, r8
 8000d9e:	d2e5      	bcs.n	8000d6c <__udivmoddi4+0x260>
 8000da0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000da4:	eb69 0104 	sbc.w	r1, r9, r4
 8000da8:	3801      	subs	r0, #1
 8000daa:	e7df      	b.n	8000d6c <__udivmoddi4+0x260>
 8000dac:	4608      	mov	r0, r1
 8000dae:	e7d2      	b.n	8000d56 <__udivmoddi4+0x24a>
 8000db0:	4660      	mov	r0, ip
 8000db2:	e78d      	b.n	8000cd0 <__udivmoddi4+0x1c4>
 8000db4:	4681      	mov	r9, r0
 8000db6:	e7b9      	b.n	8000d2c <__udivmoddi4+0x220>
 8000db8:	4666      	mov	r6, ip
 8000dba:	e775      	b.n	8000ca8 <__udivmoddi4+0x19c>
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	e74a      	b.n	8000c56 <__udivmoddi4+0x14a>
 8000dc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dc4:	4439      	add	r1, r7
 8000dc6:	e713      	b.n	8000bf0 <__udivmoddi4+0xe4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	443c      	add	r4, r7
 8000dcc:	e724      	b.n	8000c18 <__udivmoddi4+0x10c>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_idiv0>:
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop

08000dd4 <UART_Send>:
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_ADC1_Init(void);

// Send data to UART
void UART_Send(UART_HandleTypeDef *huart, char buffer[])
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000dde:	6838      	ldr	r0, [r7, #0]
 8000de0:	f7ff fa06 	bl	80001f0 <strlen>
 8000de4:	4603      	mov	r3, r0
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dec:	6839      	ldr	r1, [r7, #0]
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f003 ff00 	bl	8004bf4 <HAL_UART_Transmit>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <UART_SEND_FLT>:

void UART_SEND_FLT(UART_HandleTypeDef *huart, float p, int m)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e08:	6079      	str	r1, [r7, #4]
    char buffer[10];
    sprintf(buffer, "%5.2f", p);
 8000e0a:	68b8      	ldr	r0, [r7, #8]
 8000e0c:	f7ff fbac 	bl	8000568 <__aeabi_f2d>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	f107 0014 	add.w	r0, r7, #20
 8000e18:	490f      	ldr	r1, [pc, #60]	; (8000e58 <UART_SEND_FLT+0x5c>)
 8000e1a:	f004 fe0b 	bl	8005a34 <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff f9e4 	bl	80001f0 <strlen>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	f107 0114 	add.w	r1, r7, #20
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f003 fedd 	bl	8004bf4 <HAL_UART_Transmit>
    if(m == 1) HAL_UART_Transmit(huart, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d106      	bne.n	8000e4e <UART_SEND_FLT+0x52>
 8000e40:	f04f 33ff 	mov.w	r3, #4294967295
 8000e44:	2202      	movs	r2, #2
 8000e46:	4905      	ldr	r1, [pc, #20]	; (8000e5c <UART_SEND_FLT+0x60>)
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f003 fed3 	bl	8004bf4 <HAL_UART_Transmit>
}
 8000e4e:	bf00      	nop
 8000e50:	3720      	adds	r7, #32
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	080062a8 	.word	0x080062a8
 8000e5c:	080062b0 	.word	0x080062b0

08000e60 <main>:

uint32_t adcResult = 0;

int main(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
    float mv;
    char buff[10];

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000e66:	f000 fc38 	bl	80016da <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 8000e6a:	f000 f855 	bl	8000f18 <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000e6e:	f000 f9c5 	bl	80011fc <MX_GPIO_Init>
    MX_LPUART1_UART_Init();
 8000e72:	f000 f969 	bl	8001148 <MX_LPUART1_UART_Init>
    MX_USB_OTG_FS_PCD_Init();
 8000e76:	f000 f993 	bl	80011a0 <MX_USB_OTG_FS_PCD_Init>
    MX_ADC1_Init();
 8000e7a:	f000 f8ed 	bl	8001058 <MX_ADC1_Init>

    HAL_ADC_Start(&hadc1);
 8000e7e:	4822      	ldr	r0, [pc, #136]	; (8000f08 <main+0xa8>)
 8000e80:	f001 f814 	bl	8001eac <HAL_ADC_Start>

    UART_Send(&hlpuart1, "Hello from Nucleo-L476RG\n");
 8000e84:	4921      	ldr	r1, [pc, #132]	; (8000f0c <main+0xac>)
 8000e86:	4822      	ldr	r0, [pc, #136]	; (8000f10 <main+0xb0>)
 8000e88:	f7ff ffa4 	bl	8000dd4 <UART_Send>

    while (1)
    {
        HAL_ADC_PollForConversion(&hadc1, 100);
 8000e8c:	2164      	movs	r1, #100	; 0x64
 8000e8e:	481e      	ldr	r0, [pc, #120]	; (8000f08 <main+0xa8>)
 8000e90:	f001 f8c6 	bl	8002020 <HAL_ADC_PollForConversion>
        adcResult = HAL_ADC_GetValue(&hadc1);
 8000e94:	481c      	ldr	r0, [pc, #112]	; (8000f08 <main+0xa8>)
 8000e96:	f001 f99b 	bl	80021d0 <HAL_ADC_GetValue>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4a1d      	ldr	r2, [pc, #116]	; (8000f14 <main+0xb4>)
 8000e9e:	6013      	str	r3, [r2, #0]
        mv = ((float)adcResult) * 3300.0 / 4095.0;
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <main+0xb4>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	ee07 3a90 	vmov	s15, r3
 8000ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eac:	ee17 0a90 	vmov	r0, s15
 8000eb0:	f7ff fb5a 	bl	8000568 <__aeabi_f2d>
 8000eb4:	a310      	add	r3, pc, #64	; (adr r3, 8000ef8 <main+0x98>)
 8000eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eba:	f7ff fbad 	bl	8000618 <__aeabi_dmul>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	a30e      	add	r3, pc, #56	; (adr r3, 8000f00 <main+0xa0>)
 8000ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ecc:	f7ff fcce 	bl	800086c <__aeabi_ddiv>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f7ff fdb0 	bl	8000a3c <__aeabi_d2f>
 8000edc:	4603      	mov	r3, r0
 8000ede:	60fb      	str	r3, [r7, #12]
        // print value over UART here
        UART_SEND_FLT(&hlpuart1, mv, 1);
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	ed97 0a03 	vldr	s0, [r7, #12]
 8000ee6:	480a      	ldr	r0, [pc, #40]	; (8000f10 <main+0xb0>)
 8000ee8:	f7ff ff88 	bl	8000dfc <UART_SEND_FLT>
        HAL_Delay(1000);
 8000eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef0:	f000 fc68 	bl	80017c4 <HAL_Delay>
        HAL_ADC_PollForConversion(&hadc1, 100);
 8000ef4:	e7ca      	b.n	8000e8c <main+0x2c>
 8000ef6:	bf00      	nop
 8000ef8:	00000000 	.word	0x00000000
 8000efc:	40a9c800 	.word	0x40a9c800
 8000f00:	00000000 	.word	0x00000000
 8000f04:	40affe00 	.word	0x40affe00
 8000f08:	20000528 	.word	0x20000528
 8000f0c:	080062b4 	.word	0x080062b4
 8000f10:	200004a4 	.word	0x200004a4
 8000f14:	2000008c 	.word	0x2000008c

08000f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0ba      	sub	sp, #232	; 0xe8
 8000f1c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f22:	2244      	movs	r2, #68	; 0x44
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f004 fd7c 	bl	8005a24 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	228c      	movs	r2, #140	; 0x8c
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f004 fd6e 	bl	8005a24 <memset>

    /** Configure LSE Drive Capability
    */
    HAL_PWR_EnableBkUpAccess();
 8000f48:	f002 fa6c 	bl	8003424 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f4c:	4b41      	ldr	r3, [pc, #260]	; (8001054 <SystemClock_Config+0x13c>)
 8000f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f52:	4a40      	ldr	r2, [pc, #256]	; (8001054 <SystemClock_Config+0x13c>)
 8000f54:	f023 0318 	bic.w	r3, r3, #24
 8000f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f5c:	2314      	movs	r3, #20
 8000f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f62:	2301      	movs	r3, #1
 8000f64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f74:	2360      	movs	r3, #96	; 0x60
 8000f76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f80:	2301      	movs	r3, #1
 8000f82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_OscInitStruct.PLL.PLLM = 1;
 8000f86:	2301      	movs	r3, #1
 8000f88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_OscInitStruct.PLL.PLLN = 30;
 8000f8c:	231e      	movs	r3, #30
 8000f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 facf 	bl	800354c <HAL_RCC_OscConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0xa0>
    {
        Error_Handler();
 8000fb4:	f000 f9ba 	bl	800132c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb8:	230f      	movs	r3, #15
 8000fba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fd8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000fdc:	2101      	movs	r1, #1
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 feda 	bl	8003d98 <HAL_RCC_ClockConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0xd6>
    {
      Error_Handler();
 8000fea:	f000 f99f 	bl	800132c <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB
 8000fee:	f246 0320 	movw	r3, #24608	; 0x6020
 8000ff2:	607b      	str	r3, [r7, #4]
                                |RCC_PERIPHCLK_ADC;
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ff8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ffc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001000:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001004:	677b      	str	r3, [r7, #116]	; 0x74
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001006:	2301      	movs	r3, #1
 8001008:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800100a:	2301      	movs	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800100e:	2318      	movs	r3, #24
 8001010:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001012:	2302      	movs	r3, #2
 8001014:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001016:	2302      	movs	r3, #2
 8001018:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800101a:	2302      	movs	r3, #2
 800101c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800101e:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001022:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	4618      	mov	r0, r3
 8001028:	f003 f8bc 	bl	80041a4 <HAL_RCCEx_PeriphCLKConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0x11e>
    {
        Error_Handler();
 8001032:	f000 f97b 	bl	800132c <Error_Handler>
    }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001036:	f44f 7000 	mov.w	r0, #512	; 0x200
 800103a:	f002 fa11 	bl	8003460 <HAL_PWREx_ControlVoltageScaling>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0x130>
  {
    Error_Handler();
 8001044:	f000 f972 	bl	800132c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001048:	f003 fba8 	bl	800479c <HAL_RCCEx_EnableMSIPLLMode>
}
 800104c:	bf00      	nop
 800104e:	37e8      	adds	r7, #232	; 0xe8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40021000 	.word	0x40021000

08001058 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
 8001078:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800107a:	4b30      	ldr	r3, [pc, #192]	; (800113c <MX_ADC1_Init+0xe4>)
 800107c:	4a30      	ldr	r2, [pc, #192]	; (8001140 <MX_ADC1_Init+0xe8>)
 800107e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001080:	4b2e      	ldr	r3, [pc, #184]	; (800113c <MX_ADC1_Init+0xe4>)
 8001082:	2200      	movs	r2, #0
 8001084:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001086:	4b2d      	ldr	r3, [pc, #180]	; (800113c <MX_ADC1_Init+0xe4>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108c:	4b2b      	ldr	r3, [pc, #172]	; (800113c <MX_ADC1_Init+0xe4>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001092:	4b2a      	ldr	r3, [pc, #168]	; (800113c <MX_ADC1_Init+0xe4>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001098:	4b28      	ldr	r3, [pc, #160]	; (800113c <MX_ADC1_Init+0xe4>)
 800109a:	2208      	movs	r2, #8
 800109c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800109e:	4b27      	ldr	r3, [pc, #156]	; (800113c <MX_ADC1_Init+0xe4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010a4:	4b25      	ldr	r3, [pc, #148]	; (800113c <MX_ADC1_Init+0xe4>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010aa:	4b24      	ldr	r3, [pc, #144]	; (800113c <MX_ADC1_Init+0xe4>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <MX_ADC1_Init+0xe4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b8:	4b20      	ldr	r3, [pc, #128]	; (800113c <MX_ADC1_Init+0xe4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <MX_ADC1_Init+0xe4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <MX_ADC1_Init+0xe4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <MX_ADC1_Init+0xe4>)
 80010ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010d2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010d4:	4b19      	ldr	r3, [pc, #100]	; (800113c <MX_ADC1_Init+0xe4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010dc:	4817      	ldr	r0, [pc, #92]	; (800113c <MX_ADC1_Init+0xe4>)
 80010de:	f000 fd8b 	bl	8001bf8 <HAL_ADC_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80010e8:	f000 f920 	bl	800132c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4811      	ldr	r0, [pc, #68]	; (800113c <MX_ADC1_Init+0xe4>)
 80010f8:	f001 fd0c 	bl	8002b14 <HAL_ADCEx_MultiModeConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001102:	f000 f913 	bl	800132c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_ADC1_Init+0xec>)
 8001108:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110a:	2306      	movs	r3, #6
 800110c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001112:	237f      	movs	r3, #127	; 0x7f
 8001114:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001116:	2304      	movs	r3, #4
 8001118:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <MX_ADC1_Init+0xe4>)
 8001124:	f001 f862 	bl	80021ec <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800112e:	f000 f8fd 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	; 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000528 	.word	0x20000528
 8001140:	50040000 	.word	0x50040000
 8001144:	0c900008 	.word	0x0c900008

08001148 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 800114e:	4a13      	ldr	r2, [pc, #76]	; (800119c <MX_LPUART1_UART_Init+0x54>)
 8001150:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 8001154:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001158:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 800116e:	220c      	movs	r2, #12
 8001170:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 8001180:	2200      	movs	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 8001186:	f003 fce7 	bl	8004b58 <HAL_UART_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001190:	f000 f8cc 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200004a4 	.word	0x200004a4
 800119c:	40008000 	.word	0x40008000

080011a0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ae:	2206      	movs	r2, #6
 80011b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011b4:	2202      	movs	r2, #2
 80011b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ba:	2202      	movs	r2, #2
 80011bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011de:	2201      	movs	r2, #1
 80011e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e4:	f001 ffd6 	bl	8003194 <HAL_PCD_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80011ee:	f000 f89d 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000009c 	.word	0x2000009c

080011fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	4b41      	ldr	r3, [pc, #260]	; (8001318 <MX_GPIO_Init+0x11c>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	4a40      	ldr	r2, [pc, #256]	; (8001318 <MX_GPIO_Init+0x11c>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121e:	4b3e      	ldr	r3, [pc, #248]	; (8001318 <MX_GPIO_Init+0x11c>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800122a:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <MX_GPIO_Init+0x11c>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	4a3a      	ldr	r2, [pc, #232]	; (8001318 <MX_GPIO_Init+0x11c>)
 8001230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001236:	4b38      	ldr	r3, [pc, #224]	; (8001318 <MX_GPIO_Init+0x11c>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	4b35      	ldr	r3, [pc, #212]	; (8001318 <MX_GPIO_Init+0x11c>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	4a34      	ldr	r2, [pc, #208]	; (8001318 <MX_GPIO_Init+0x11c>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124e:	4b32      	ldr	r3, [pc, #200]	; (8001318 <MX_GPIO_Init+0x11c>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800125a:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <MX_GPIO_Init+0x11c>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	4a2e      	ldr	r2, [pc, #184]	; (8001318 <MX_GPIO_Init+0x11c>)
 8001260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001266:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <MX_GPIO_Init+0x11c>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001272:	f002 f95b 	bl	800352c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	4b28      	ldr	r3, [pc, #160]	; (8001318 <MX_GPIO_Init+0x11c>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a27      	ldr	r2, [pc, #156]	; (8001318 <MX_GPIO_Init+0x11c>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b25      	ldr	r3, [pc, #148]	; (8001318 <MX_GPIO_Init+0x11c>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001294:	4821      	ldr	r0, [pc, #132]	; (800131c <MX_GPIO_Init+0x120>)
 8001296:	f001 ff65 	bl	8003164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	2140      	movs	r1, #64	; 0x40
 800129e:	4820      	ldr	r0, [pc, #128]	; (8001320 <MX_GPIO_Init+0x124>)
 80012a0:	f001 ff60 	bl	8003164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <MX_GPIO_Init+0x128>)
 80012ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	481b      	ldr	r0, [pc, #108]	; (8001328 <MX_GPIO_Init+0x12c>)
 80012ba:	f001 fdc1 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80012be:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	4811      	ldr	r0, [pc, #68]	; (800131c <MX_GPIO_Init+0x120>)
 80012d8:	f001 fdb2 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012dc:	2320      	movs	r3, #32
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	480c      	ldr	r0, [pc, #48]	; (8001320 <MX_GPIO_Init+0x124>)
 80012f0:	f001 fda6 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012f4:	2340      	movs	r3, #64	; 0x40
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_GPIO_Init+0x124>)
 800130c:	f001 fd98 	bl	8002e40 <HAL_GPIO_Init>

}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	; 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40021000 	.word	0x40021000
 800131c:	48000400 	.word	0x48000400
 8001320:	48001800 	.word	0x48001800
 8001324:	10110000 	.word	0x10110000
 8001328:	48000800 	.word	0x48000800

0800132c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
}
 8001332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001334:	e7fe      	b.n	8001334 <Error_Handler+0x8>
	...

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <HAL_MspInit+0x44>)
 8001340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <HAL_MspInit+0x44>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6613      	str	r3, [r2, #96]	; 0x60
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <HAL_MspInit+0x44>)
 800134c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_MspInit+0x44>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <HAL_MspInit+0x44>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	6593      	str	r3, [r2, #88]	; 0x58
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_MspInit+0x44>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000

08001380 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a15      	ldr	r2, [pc, #84]	; (80013f4 <HAL_ADC_MspInit+0x74>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d123      	bne.n	80013ea <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_ADC_MspInit+0x78>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <HAL_ADC_MspInit+0x78>)
 80013a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_ADC_MspInit+0x78>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <HAL_ADC_MspInit+0x78>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <HAL_ADC_MspInit+0x78>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_ADC_MspInit+0x78>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013d2:	2304      	movs	r3, #4
 80013d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013d6:	230b      	movs	r3, #11
 80013d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <HAL_ADC_MspInit+0x7c>)
 80013e6:	f001 fd2b 	bl	8002e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	50040000 	.word	0x50040000
 80013f8:	40021000 	.word	0x40021000
 80013fc:	48000800 	.word	0x48000800

08001400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a18      	ldr	r2, [pc, #96]	; (8001480 <HAL_UART_MspInit+0x80>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d12a      	bne.n	8001478 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_UART_MspInit+0x84>)
 8001424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001426:	4a17      	ldr	r2, [pc, #92]	; (8001484 <HAL_UART_MspInit+0x84>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_UART_MspInit+0x84>)
 8001430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_UART_MspInit+0x84>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	4a11      	ldr	r2, [pc, #68]	; (8001484 <HAL_UART_MspInit+0x84>)
 8001440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <HAL_UART_MspInit+0x84>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001452:	f002 f86b 	bl	800352c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001456:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800145a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001468:	2308      	movs	r3, #8
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4619      	mov	r1, r3
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <HAL_UART_MspInit+0x88>)
 8001474:	f001 fce4 	bl	8002e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001478:	bf00      	nop
 800147a:	3728      	adds	r7, #40	; 0x28
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40008000 	.word	0x40008000
 8001484:	40021000 	.word	0x40021000
 8001488:	48001800 	.word	0x48001800

0800148c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ac:	d154      	bne.n	8001558 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <HAL_PCD_MspInit+0xd4>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	4a2b      	ldr	r2, [pc, #172]	; (8001560 <HAL_PCD_MspInit+0xd4>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ba:	4b29      	ldr	r3, [pc, #164]	; (8001560 <HAL_PCD_MspInit+0xd4>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014c6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014d8:	230a      	movs	r3, #10
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f001 fcab 	bl	8002e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001502:	f001 fc9d 	bl	8002e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <HAL_PCD_MspInit+0xd4>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a15      	ldr	r2, [pc, #84]	; (8001560 <HAL_PCD_MspInit+0xd4>)
 800150c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <HAL_PCD_MspInit+0xd4>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <HAL_PCD_MspInit+0xd4>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d114      	bne.n	8001554 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_PCD_MspInit+0xd4>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <HAL_PCD_MspInit+0xd4>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6593      	str	r3, [r2, #88]	; 0x58
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_PCD_MspInit+0xd4>)
 8001538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001542:	f001 ffe3 	bl	800350c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_PCD_MspInit+0xd4>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <HAL_PCD_MspInit+0xd4>)
 800154c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001550:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001552:	e001      	b.n	8001558 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001554:	f001 ffda 	bl	800350c <HAL_PWREx_EnableVddUSB>
}
 8001558:	bf00      	nop
 800155a:	3728      	adds	r7, #40	; 0x28
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40021000 	.word	0x40021000

08001564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <NMI_Handler+0x4>

0800156a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <HardFault_Handler+0x4>

08001570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <MemManage_Handler+0x4>

08001576 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <BusFault_Handler+0x4>

0800157c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <UsageFault_Handler+0x4>

08001582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b0:	f000 f8e8 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c0:	4a14      	ldr	r2, [pc, #80]	; (8001614 <_sbrk+0x5c>)
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <_sbrk+0x60>)
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <_sbrk+0x64>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <_sbrk+0x68>)
 80015d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d207      	bcs.n	80015f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e8:	f004 f9f2 	bl	80059d0 <__errno>
 80015ec:	4603      	mov	r3, r0
 80015ee:	220c      	movs	r2, #12
 80015f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	e009      	b.n	800160c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <_sbrk+0x64>)
 8001608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20050000 	.word	0x20050000
 8001618:	00000400 	.word	0x00000400
 800161c:	20000090 	.word	0x20000090
 8001620:	200005a8 	.word	0x200005a8

08001624 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <SystemInit+0x5c>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162e:	4a14      	ldr	r2, [pc, #80]	; (8001680 <SystemInit+0x5c>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <SystemInit+0x60>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a11      	ldr	r2, [pc, #68]	; (8001684 <SystemInit+0x60>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <SystemInit+0x60>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <SystemInit+0x60>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <SystemInit+0x60>)
 8001650:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001654:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001658:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <SystemInit+0x60>)
 800165c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001660:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <SystemInit+0x60>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a07      	ldr	r2, [pc, #28]	; (8001684 <SystemInit+0x60>)
 8001668:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <SystemInit+0x60>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00
 8001684:	40021000 	.word	0x40021000

08001688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800168c:	f7ff ffca 	bl	8001624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001690:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001692:	e003      	b.n	800169c <LoopCopyDataInit>

08001694 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001696:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001698:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800169a:	3104      	adds	r1, #4

0800169c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800169c:	480a      	ldr	r0, [pc, #40]	; (80016c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <LoopForever+0xe>)
	adds	r2, r0, r1
 80016a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016a4:	d3f6      	bcc.n	8001694 <CopyDataInit>
	ldr	r2, =_sbss
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016a8:	e002      	b.n	80016b0 <LoopFillZerobss>

080016aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016ac:	f842 3b04 	str.w	r3, [r2], #4

080016b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <LoopForever+0x16>)
	cmp	r2, r3
 80016b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016b4:	d3f9      	bcc.n	80016aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b6:	f004 f991 	bl	80059dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ba:	f7ff fbd1 	bl	8000e60 <main>

080016be <LoopForever>:

LoopForever:
    b LoopForever
 80016be:	e7fe      	b.n	80016be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016c0:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 80016c4:	0800635c 	.word	0x0800635c
	ldr	r0, =_sdata
 80016c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016cc:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80016d0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80016d4:	200005a4 	.word	0x200005a4

080016d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC1_2_IRQHandler>

080016da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e4:	2003      	movs	r0, #3
 80016e6:	f001 fb77 	bl	8002dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ea:	2000      	movs	r0, #0
 80016ec:	f000 f80e 	bl	800170c <HAL_InitTick>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	71fb      	strb	r3, [r7, #7]
 80016fa:	e001      	b.n	8001700 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016fc:	f7ff fe1c 	bl	8001338 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001700:	79fb      	ldrb	r3, [r7, #7]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001718:	4b17      	ldr	r3, [pc, #92]	; (8001778 <HAL_InitTick+0x6c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d023      	beq.n	8001768 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <HAL_InitTick+0x70>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_InitTick+0x6c>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f001 fb75 	bl	8002e26 <HAL_SYSTICK_Config>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10f      	bne.n	8001762 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b0f      	cmp	r3, #15
 8001746:	d809      	bhi.n	800175c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001748:	2200      	movs	r2, #0
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	f04f 30ff 	mov.w	r0, #4294967295
 8001750:	f001 fb4d 	bl	8002dee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_InitTick+0x74>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e007      	b.n	800176c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e004      	b.n	800176c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
 8001766:	e001      	b.n	800176c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000008 	.word	0x20000008
 800177c:	20000000 	.word	0x20000000
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008
 80017a8:	20000590 	.word	0x20000590

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000590 	.word	0x20000590

080017c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017cc:	f7ff ffee 	bl	80017ac <HAL_GetTick>
 80017d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017dc:	d005      	beq.n	80017ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_Delay+0x44>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ea:	bf00      	nop
 80017ec:	f7ff ffde 	bl	80017ac <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d8f7      	bhi.n	80017ec <HAL_Delay+0x28>
  {
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000008 	.word	0x20000008

0800180c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	609a      	str	r2, [r3, #8]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	609a      	str	r2, [r3, #8]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3360      	adds	r3, #96	; 0x60
 8001886:	461a      	mov	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <LL_ADC_SetOffset+0x44>)
 8001896:	4013      	ands	r3, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	4313      	orrs	r3, r2
 80018a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018ac:	bf00      	nop
 80018ae:	371c      	adds	r7, #28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	03fff000 	.word	0x03fff000

080018bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3360      	adds	r3, #96	; 0x60
 80018ca:	461a      	mov	r2, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3360      	adds	r3, #96	; 0x60
 80018f8:	461a      	mov	r2, r3
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	431a      	orrs	r2, r3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001912:	bf00      	nop
 8001914:	371c      	adds	r7, #28
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	615a      	str	r2, [r3, #20]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800196a:	b480      	push	{r7}
 800196c:	b087      	sub	sp, #28
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3330      	adds	r3, #48	; 0x30
 800197a:	461a      	mov	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	4413      	add	r3, r2
 8001988:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	211f      	movs	r1, #31
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	401a      	ands	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	0e9b      	lsrs	r3, r3, #26
 80019a2:	f003 011f 	and.w	r1, r3, #31
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	431a      	orrs	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019b6:	bf00      	nop
 80019b8:	371c      	adds	r7, #28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b087      	sub	sp, #28
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3314      	adds	r3, #20
 80019d2:	461a      	mov	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	0e5b      	lsrs	r3, r3, #25
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	4413      	add	r3, r2
 80019e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	0d1b      	lsrs	r3, r3, #20
 80019ea:	f003 031f 	and.w	r3, r3, #31
 80019ee:	2107      	movs	r1, #7
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	401a      	ands	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	0d1b      	lsrs	r3, r3, #20
 80019fc:	f003 031f 	and.w	r3, r3, #31
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	431a      	orrs	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a0c:	bf00      	nop
 8001a0e:	371c      	adds	r7, #28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a30:	43db      	mvns	r3, r3
 8001a32:	401a      	ands	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0318 	and.w	r3, r3, #24
 8001a3a:	4908      	ldr	r1, [pc, #32]	; (8001a5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a3c:	40d9      	lsrs	r1, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	400b      	ands	r3, r1
 8001a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a46:	431a      	orrs	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	0007ffff 	.word	0x0007ffff

08001a60 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 031f 	and.w	r3, r3, #31
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001aa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6093      	str	r3, [r2, #8]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ad0:	d101      	bne.n	8001ad6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001af4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001af8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b20:	d101      	bne.n	8001b26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b48:	f043 0201 	orr.w	r2, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <LL_ADC_IsEnabled+0x18>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <LL_ADC_IsEnabled+0x1a>
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b96:	f043 0204 	orr.w	r2, r3, #4
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d101      	bne.n	8001bc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d101      	bne.n	8001be8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e139      	b.n	8001e86 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d109      	bne.n	8001c34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff fbad 	bl	8001380 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff3f 	bl	8001abc <LL_ADC_IsDeepPowerDownEnabled>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d004      	beq.n	8001c4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff25 	bl	8001a98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff5a 	bl	8001b0c <LL_ADC_IsInternalRegulatorEnabled>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d115      	bne.n	8001c8a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff3e 	bl	8001ae4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c68:	4b89      	ldr	r3, [pc, #548]	; (8001e90 <HAL_ADC_Init+0x298>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	099b      	lsrs	r3, r3, #6
 8001c6e:	4a89      	ldr	r2, [pc, #548]	; (8001e94 <HAL_ADC_Init+0x29c>)
 8001c70:	fba2 2303 	umull	r2, r3, r2, r3
 8001c74:	099b      	lsrs	r3, r3, #6
 8001c76:	3301      	adds	r3, #1
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c7c:	e002      	b.n	8001c84 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f9      	bne.n	8001c7e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff3c 	bl	8001b0c <LL_ADC_IsInternalRegulatorEnabled>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10d      	bne.n	8001cb6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	f043 0210 	orr.w	r2, r3, #16
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001caa:	f043 0201 	orr.w	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ff75 	bl	8001baa <LL_ADC_REG_IsConversionOngoing>
 8001cc0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 80d2 	bne.w	8001e74 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f040 80ce 	bne.w	8001e74 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cdc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ce0:	f043 0202 	orr.w	r2, r3, #2
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff35 	bl	8001b5c <LL_ADC_IsEnabled>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d115      	bne.n	8001d24 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cf8:	4867      	ldr	r0, [pc, #412]	; (8001e98 <HAL_ADC_Init+0x2a0>)
 8001cfa:	f7ff ff2f 	bl	8001b5c <LL_ADC_IsEnabled>
 8001cfe:	4604      	mov	r4, r0
 8001d00:	4866      	ldr	r0, [pc, #408]	; (8001e9c <HAL_ADC_Init+0x2a4>)
 8001d02:	f7ff ff2b 	bl	8001b5c <LL_ADC_IsEnabled>
 8001d06:	4603      	mov	r3, r0
 8001d08:	431c      	orrs	r4, r3
 8001d0a:	4865      	ldr	r0, [pc, #404]	; (8001ea0 <HAL_ADC_Init+0x2a8>)
 8001d0c:	f7ff ff26 	bl	8001b5c <LL_ADC_IsEnabled>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4323      	orrs	r3, r4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d105      	bne.n	8001d24 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4861      	ldr	r0, [pc, #388]	; (8001ea4 <HAL_ADC_Init+0x2ac>)
 8001d20:	f7ff fd74 	bl	800180c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7e5b      	ldrb	r3, [r3, #25]
 8001d28:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d2e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d34:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d3a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d42:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d106      	bne.n	8001d60 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	3b01      	subs	r3, #1
 8001d58:	045b      	lsls	r3, r3, #17
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d009      	beq.n	8001d7c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <HAL_ADC_Init+0x2b0>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6812      	ldr	r2, [r2, #0]
 8001d8a:	69b9      	ldr	r1, [r7, #24]
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff08 	bl	8001baa <LL_ADC_REG_IsConversionOngoing>
 8001d9a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff15 	bl	8001bd0 <LL_ADC_INJ_IsConversionOngoing>
 8001da6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d140      	bne.n	8001e30 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d13d      	bne.n	8001e30 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7e1b      	ldrb	r3, [r3, #24]
 8001dbc:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dbe:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dc6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dd6:	f023 0306 	bic.w	r3, r3, #6
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	69b9      	ldr	r1, [r7, #24]
 8001de0:	430b      	orrs	r3, r1
 8001de2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d118      	bne.n	8001e20 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001df8:	f023 0304 	bic.w	r3, r3, #4
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e04:	4311      	orrs	r1, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e0a:	4311      	orrs	r1, r2
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e10:	430a      	orrs	r2, r1
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	611a      	str	r2, [r3, #16]
 8001e1e:	e007      	b.n	8001e30 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691a      	ldr	r2, [r3, #16]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0201 	bic.w	r2, r2, #1
 8001e2e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d10c      	bne.n	8001e52 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f023 010f 	bic.w	r1, r3, #15
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	1e5a      	subs	r2, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001e50:	e007      	b.n	8001e62 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 020f 	bic.w	r2, r2, #15
 8001e60:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	f023 0303 	bic.w	r3, r3, #3
 8001e6a:	f043 0201 	orr.w	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	659a      	str	r2, [r3, #88]	; 0x58
 8001e72:	e007      	b.n	8001e84 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	f043 0210 	orr.w	r2, r3, #16
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e84:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3724      	adds	r7, #36	; 0x24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd90      	pop	{r4, r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000000 	.word	0x20000000
 8001e94:	053e2d63 	.word	0x053e2d63
 8001e98:	50040000 	.word	0x50040000
 8001e9c:	50040100 	.word	0x50040100
 8001ea0:	50040200 	.word	0x50040200
 8001ea4:	50040300 	.word	0x50040300
 8001ea8:	fff0c007 	.word	0xfff0c007

08001eac <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001eb4:	4857      	ldr	r0, [pc, #348]	; (8002014 <HAL_ADC_Start+0x168>)
 8001eb6:	f7ff fdd3 	bl	8001a60 <LL_ADC_GetMultimode>
 8001eba:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fe72 	bl	8001baa <LL_ADC_REG_IsConversionOngoing>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f040 809c 	bne.w	8002006 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_Start+0x30>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e097      	b.n	800200c <HAL_ADC_Start+0x160>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fd8d 	bl	8002a04 <ADC_Enable>
 8001eea:	4603      	mov	r3, r0
 8001eec:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001eee:	7dfb      	ldrb	r3, [r7, #23]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f040 8083 	bne.w	8001ffc <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a42      	ldr	r2, [pc, #264]	; (8002018 <HAL_ADC_Start+0x16c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d002      	beq.n	8001f1a <HAL_ADC_Start+0x6e>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	e000      	b.n	8001f1c <HAL_ADC_Start+0x70>
 8001f1a:	4b40      	ldr	r3, [pc, #256]	; (800201c <HAL_ADC_Start+0x170>)
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d002      	beq.n	8001f2a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d105      	bne.n	8001f36 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f42:	d106      	bne.n	8001f52 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	f023 0206 	bic.w	r2, r3, #6
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f50:	e002      	b.n	8001f58 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	221c      	movs	r2, #28
 8001f5e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a2a      	ldr	r2, [pc, #168]	; (8002018 <HAL_ADC_Start+0x16c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d002      	beq.n	8001f78 <HAL_ADC_Start+0xcc>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	e000      	b.n	8001f7a <HAL_ADC_Start+0xce>
 8001f78:	4b28      	ldr	r3, [pc, #160]	; (800201c <HAL_ADC_Start+0x170>)
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d008      	beq.n	8001f94 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d002      	beq.n	8001f94 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2b09      	cmp	r3, #9
 8001f92:	d114      	bne.n	8001fbe <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d007      	beq.n	8001fb2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001faa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fde3 	bl	8001b82 <LL_ADC_REG_StartConversion>
 8001fbc:	e025      	b.n	800200a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a12      	ldr	r2, [pc, #72]	; (8002018 <HAL_ADC_Start+0x16c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d002      	beq.n	8001fda <HAL_ADC_Start+0x12e>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	e000      	b.n	8001fdc <HAL_ADC_Start+0x130>
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <HAL_ADC_Start+0x170>)
 8001fdc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00f      	beq.n	800200a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ff2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	659a      	str	r2, [r3, #88]	; 0x58
 8001ffa:	e006      	b.n	800200a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002004:	e001      	b.n	800200a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002006:	2302      	movs	r3, #2
 8002008:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800200a:	7dfb      	ldrb	r3, [r7, #23]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	50040300 	.word	0x50040300
 8002018:	50040100 	.word	0x50040100
 800201c:	50040000 	.word	0x50040000

08002020 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800202a:	4866      	ldr	r0, [pc, #408]	; (80021c4 <HAL_ADC_PollForConversion+0x1a4>)
 800202c:	f7ff fd18 	bl	8001a60 <LL_ADC_GetMultimode>
 8002030:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	2b08      	cmp	r3, #8
 8002038:	d102      	bne.n	8002040 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800203a:	2308      	movs	r3, #8
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	e02a      	b.n	8002096 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2b05      	cmp	r3, #5
 800204a:	d002      	beq.n	8002052 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b09      	cmp	r3, #9
 8002050:	d111      	bne.n	8002076 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d007      	beq.n	8002070 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	f043 0220 	orr.w	r2, r3, #32
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0a4      	b.n	80021ba <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002070:	2304      	movs	r3, #4
 8002072:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002074:	e00f      	b.n	8002096 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002076:	4853      	ldr	r0, [pc, #332]	; (80021c4 <HAL_ADC_PollForConversion+0x1a4>)
 8002078:	f7ff fd00 	bl	8001a7c <LL_ADC_GetMultiDMATransfer>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	f043 0220 	orr.w	r2, r3, #32
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e093      	b.n	80021ba <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002092:	2304      	movs	r3, #4
 8002094:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002096:	f7ff fb89 	bl	80017ac <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800209c:	e021      	b.n	80020e2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a4:	d01d      	beq.n	80020e2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80020a6:	f7ff fb81 	bl	80017ac <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d302      	bcc.n	80020bc <HAL_ADC_PollForConversion+0x9c>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d112      	bne.n	80020e2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10b      	bne.n	80020e2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	f043 0204 	orr.w	r2, r3, #4
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e06b      	b.n	80021ba <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0d6      	beq.n	800209e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fc1f 	bl	8001944 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01c      	beq.n	8002146 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7e5b      	ldrb	r3, [r3, #25]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d118      	bne.n	8002146 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b08      	cmp	r3, #8
 8002120:	d111      	bne.n	8002146 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d105      	bne.n	8002146 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	f043 0201 	orr.w	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <HAL_ADC_PollForConversion+0x1a8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d002      	beq.n	8002156 <HAL_ADC_PollForConversion+0x136>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	e000      	b.n	8002158 <HAL_ADC_PollForConversion+0x138>
 8002156:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <HAL_ADC_PollForConversion+0x1ac>)
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	4293      	cmp	r3, r2
 800215e:	d008      	beq.n	8002172 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b05      	cmp	r3, #5
 800216a:	d002      	beq.n	8002172 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2b09      	cmp	r3, #9
 8002170:	d104      	bne.n	800217c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	e00c      	b.n	8002196 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a11      	ldr	r2, [pc, #68]	; (80021c8 <HAL_ADC_PollForConversion+0x1a8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d002      	beq.n	800218c <HAL_ADC_PollForConversion+0x16c>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	e000      	b.n	800218e <HAL_ADC_PollForConversion+0x16e>
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <HAL_ADC_PollForConversion+0x1ac>)
 800218e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	2b08      	cmp	r3, #8
 800219a:	d104      	bne.n	80021a6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2208      	movs	r2, #8
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	e008      	b.n	80021b8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d103      	bne.n	80021b8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	220c      	movs	r2, #12
 80021b6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3720      	adds	r7, #32
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	50040300 	.word	0x50040300
 80021c8:	50040100 	.word	0x50040100
 80021cc:	50040000 	.word	0x50040000

080021d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b0b6      	sub	sp, #216	; 0xd8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_ADC_ConfigChannel+0x22>
 800220a:	2302      	movs	r3, #2
 800220c:	e3e3      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x7ea>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fcc5 	bl	8001baa <LL_ADC_REG_IsConversionOngoing>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	f040 83c4 	bne.w	80029b0 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d824      	bhi.n	800227a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	3b02      	subs	r3, #2
 8002236:	2b03      	cmp	r3, #3
 8002238:	d81b      	bhi.n	8002272 <HAL_ADC_ConfigChannel+0x86>
 800223a:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <HAL_ADC_ConfigChannel+0x54>)
 800223c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002240:	08002251 	.word	0x08002251
 8002244:	08002259 	.word	0x08002259
 8002248:	08002261 	.word	0x08002261
 800224c:	08002269 	.word	0x08002269
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	220c      	movs	r2, #12
 8002254:	605a      	str	r2, [r3, #4]
          break;
 8002256:	e011      	b.n	800227c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	2212      	movs	r2, #18
 800225c:	605a      	str	r2, [r3, #4]
          break;
 800225e:	e00d      	b.n	800227c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	2218      	movs	r2, #24
 8002264:	605a      	str	r2, [r3, #4]
          break;
 8002266:	e009      	b.n	800227c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800226e:	605a      	str	r2, [r3, #4]
          break;
 8002270:	e004      	b.n	800227c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2206      	movs	r2, #6
 8002276:	605a      	str	r2, [r3, #4]
          break;
 8002278:	e000      	b.n	800227c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800227a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6859      	ldr	r1, [r3, #4]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	f7ff fb6e 	bl	800196a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fc89 	bl	8001baa <LL_ADC_REG_IsConversionOngoing>
 8002298:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fc95 	bl	8001bd0 <LL_ADC_INJ_IsConversionOngoing>
 80022a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 81c1 	bne.w	8002636 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f040 81bc 	bne.w	8002636 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022c6:	d10f      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2200      	movs	r2, #0
 80022d2:	4619      	mov	r1, r3
 80022d4:	f7ff fb75 	bl	80019c2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fb1c 	bl	800191e <LL_ADC_SetSamplingTimeCommonConfig>
 80022e6:	e00e      	b.n	8002306 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6819      	ldr	r1, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	461a      	mov	r2, r3
 80022f6:	f7ff fb64 	bl	80019c2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fb0c 	bl	800191e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	08db      	lsrs	r3, r3, #3
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b04      	cmp	r3, #4
 8002326:	d00a      	beq.n	800233e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	6919      	ldr	r1, [r3, #16]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002338:	f7ff fa9c 	bl	8001874 <LL_ADC_SetOffset>
 800233c:	e17b      	b.n	8002636 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fab9 	bl	80018bc <LL_ADC_GetOffsetChannel>
 800234a:	4603      	mov	r3, r0
 800234c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10a      	bne.n	800236a <HAL_ADC_ConfigChannel+0x17e>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff faae 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002360:	4603      	mov	r3, r0
 8002362:	0e9b      	lsrs	r3, r3, #26
 8002364:	f003 021f 	and.w	r2, r3, #31
 8002368:	e01e      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x1bc>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff faa3 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002376:	4603      	mov	r3, r0
 8002378:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002388:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800238c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002390:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002398:	2320      	movs	r3, #32
 800239a:	e004      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800239c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023a0:	fab3 f383 	clz	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d105      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x1d4>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	0e9b      	lsrs	r3, r3, #26
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	e018      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x206>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80023d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80023dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80023e4:	2320      	movs	r3, #32
 80023e6:	e004      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80023e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d106      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2200      	movs	r2, #0
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fa72 	bl	80018e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2101      	movs	r1, #1
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fa56 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002410:	4603      	mov	r3, r0
 8002412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10a      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x244>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2101      	movs	r1, #1
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fa4b 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002426:	4603      	mov	r3, r0
 8002428:	0e9b      	lsrs	r3, r3, #26
 800242a:	f003 021f 	and.w	r2, r3, #31
 800242e:	e01e      	b.n	800246e <HAL_ADC_ConfigChannel+0x282>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2101      	movs	r1, #1
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fa40 	bl	80018bc <LL_ADC_GetOffsetChannel>
 800243c:	4603      	mov	r3, r0
 800243e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800244e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002452:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002456:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800245e:	2320      	movs	r3, #32
 8002460:	e004      	b.n	800246c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002462:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002476:	2b00      	cmp	r3, #0
 8002478:	d105      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x29a>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	0e9b      	lsrs	r3, r3, #26
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	e018      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x2cc>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800249a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800249e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80024a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80024aa:	2320      	movs	r3, #32
 80024ac:	e004      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80024ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d106      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2200      	movs	r2, #0
 80024c2:	2101      	movs	r1, #1
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fa0f 	bl	80018e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2102      	movs	r1, #2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff f9f3 	bl	80018bc <LL_ADC_GetOffsetChannel>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10a      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x30a>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2102      	movs	r1, #2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff f9e8 	bl	80018bc <LL_ADC_GetOffsetChannel>
 80024ec:	4603      	mov	r3, r0
 80024ee:	0e9b      	lsrs	r3, r3, #26
 80024f0:	f003 021f 	and.w	r2, r3, #31
 80024f4:	e01e      	b.n	8002534 <HAL_ADC_ConfigChannel+0x348>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2102      	movs	r1, #2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff f9dd 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002502:	4603      	mov	r3, r0
 8002504:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002514:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002518:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800251c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002524:	2320      	movs	r3, #32
 8002526:	e004      	b.n	8002532 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002528:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800252c:	fab3 f383 	clz	r3, r3
 8002530:	b2db      	uxtb	r3, r3
 8002532:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253c:	2b00      	cmp	r3, #0
 800253e:	d105      	bne.n	800254c <HAL_ADC_ConfigChannel+0x360>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0e9b      	lsrs	r3, r3, #26
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	e016      	b.n	800257a <HAL_ADC_ConfigChannel+0x38e>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800255e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002564:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800256c:	2320      	movs	r3, #32
 800256e:	e004      	b.n	800257a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002570:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002574:	fab3 f383 	clz	r3, r3
 8002578:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800257a:	429a      	cmp	r2, r3
 800257c:	d106      	bne.n	800258c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2200      	movs	r2, #0
 8002584:	2102      	movs	r1, #2
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff f9ae 	bl	80018e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2103      	movs	r1, #3
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff f992 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002598:	4603      	mov	r3, r0
 800259a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10a      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x3cc>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2103      	movs	r1, #3
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff f987 	bl	80018bc <LL_ADC_GetOffsetChannel>
 80025ae:	4603      	mov	r3, r0
 80025b0:	0e9b      	lsrs	r3, r3, #26
 80025b2:	f003 021f 	and.w	r2, r3, #31
 80025b6:	e017      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x3fc>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2103      	movs	r1, #3
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff f97c 	bl	80018bc <LL_ADC_GetOffsetChannel>
 80025c4:	4603      	mov	r3, r0
 80025c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80025d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025d2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80025d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80025da:	2320      	movs	r3, #32
 80025dc:	e003      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80025de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d105      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x414>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	0e9b      	lsrs	r3, r3, #26
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	e011      	b.n	8002624 <HAL_ADC_ConfigChannel+0x438>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800260e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002610:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002618:	2320      	movs	r3, #32
 800261a:	e003      	b.n	8002624 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800261c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002624:	429a      	cmp	r2, r3
 8002626:	d106      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2200      	movs	r2, #0
 800262e:	2103      	movs	r1, #3
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff f959 	bl	80018e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fa8e 	bl	8001b5c <LL_ADC_IsEnabled>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 8140 	bne.w	80028c8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	6819      	ldr	r1, [r3, #0]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	461a      	mov	r2, r3
 8002656:	f7ff f9df 	bl	8001a18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	4a8f      	ldr	r2, [pc, #572]	; (800289c <HAL_ADC_ConfigChannel+0x6b0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	f040 8131 	bne.w	80028c8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10b      	bne.n	800268e <HAL_ADC_ConfigChannel+0x4a2>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	0e9b      	lsrs	r3, r3, #26
 800267c:	3301      	adds	r3, #1
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	2b09      	cmp	r3, #9
 8002684:	bf94      	ite	ls
 8002686:	2301      	movls	r3, #1
 8002688:	2300      	movhi	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	e019      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x4d6>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800269c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800269e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80026a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80026a6:	2320      	movs	r3, #32
 80026a8:	e003      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80026aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	3301      	adds	r3, #1
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	2b09      	cmp	r3, #9
 80026ba:	bf94      	ite	ls
 80026bc:	2301      	movls	r3, #1
 80026be:	2300      	movhi	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d079      	beq.n	80027ba <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d107      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x4f6>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	0e9b      	lsrs	r3, r3, #26
 80026d8:	3301      	adds	r3, #1
 80026da:	069b      	lsls	r3, r3, #26
 80026dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026e0:	e015      	b.n	800270e <HAL_ADC_ConfigChannel+0x522>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80026f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80026fa:	2320      	movs	r3, #32
 80026fc:	e003      	b.n	8002706 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80026fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	3301      	adds	r3, #1
 8002708:	069b      	lsls	r3, r3, #26
 800270a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <HAL_ADC_ConfigChannel+0x542>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	0e9b      	lsrs	r3, r3, #26
 8002720:	3301      	adds	r3, #1
 8002722:	f003 031f 	and.w	r3, r3, #31
 8002726:	2101      	movs	r1, #1
 8002728:	fa01 f303 	lsl.w	r3, r1, r3
 800272c:	e017      	b.n	800275e <HAL_ADC_ConfigChannel+0x572>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800273c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800273e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002746:	2320      	movs	r3, #32
 8002748:	e003      	b.n	8002752 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800274a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800274c:	fab3 f383 	clz	r3, r3
 8002750:	b2db      	uxtb	r3, r3
 8002752:	3301      	adds	r3, #1
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	2101      	movs	r1, #1
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	ea42 0103 	orr.w	r1, r2, r3
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10a      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x598>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	0e9b      	lsrs	r3, r3, #26
 8002774:	3301      	adds	r3, #1
 8002776:	f003 021f 	and.w	r2, r3, #31
 800277a:	4613      	mov	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4413      	add	r3, r2
 8002780:	051b      	lsls	r3, r3, #20
 8002782:	e018      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x5ca>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002794:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800279c:	2320      	movs	r3, #32
 800279e:	e003      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80027a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	3301      	adds	r3, #1
 80027aa:	f003 021f 	and.w	r2, r3, #31
 80027ae:	4613      	mov	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4413      	add	r3, r2
 80027b4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b6:	430b      	orrs	r3, r1
 80027b8:	e081      	b.n	80028be <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d107      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x5ea>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	0e9b      	lsrs	r3, r3, #26
 80027cc:	3301      	adds	r3, #1
 80027ce:	069b      	lsls	r3, r3, #26
 80027d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027d4:	e015      	b.n	8002802 <HAL_ADC_ConfigChannel+0x616>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80027e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80027e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80027ee:	2320      	movs	r3, #32
 80027f0:	e003      	b.n	80027fa <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	fab3 f383 	clz	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	3301      	adds	r3, #1
 80027fc:	069b      	lsls	r3, r3, #26
 80027fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x636>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	0e9b      	lsrs	r3, r3, #26
 8002814:	3301      	adds	r3, #1
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	2101      	movs	r1, #1
 800281c:	fa01 f303 	lsl.w	r3, r1, r3
 8002820:	e017      	b.n	8002852 <HAL_ADC_ConfigChannel+0x666>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	61fb      	str	r3, [r7, #28]
  return result;
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800283a:	2320      	movs	r3, #32
 800283c:	e003      	b.n	8002846 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	fab3 f383 	clz	r3, r3
 8002844:	b2db      	uxtb	r3, r3
 8002846:	3301      	adds	r3, #1
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	2101      	movs	r1, #1
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	ea42 0103 	orr.w	r1, r2, r3
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10d      	bne.n	800287e <HAL_ADC_ConfigChannel+0x692>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	0e9b      	lsrs	r3, r3, #26
 8002868:	3301      	adds	r3, #1
 800286a:	f003 021f 	and.w	r2, r3, #31
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	3b1e      	subs	r3, #30
 8002876:	051b      	lsls	r3, r3, #20
 8002878:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800287c:	e01e      	b.n	80028bc <HAL_ADC_ConfigChannel+0x6d0>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	613b      	str	r3, [r7, #16]
  return result;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d104      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002896:	2320      	movs	r3, #32
 8002898:	e006      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x6bc>
 800289a:	bf00      	nop
 800289c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	3301      	adds	r3, #1
 80028aa:	f003 021f 	and.w	r2, r3, #31
 80028ae:	4613      	mov	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	3b1e      	subs	r3, #30
 80028b6:	051b      	lsls	r3, r3, #20
 80028b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028bc:	430b      	orrs	r3, r1
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	6892      	ldr	r2, [r2, #8]
 80028c2:	4619      	mov	r1, r3
 80028c4:	f7ff f87d 	bl	80019c2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b44      	ldr	r3, [pc, #272]	; (80029e0 <HAL_ADC_ConfigChannel+0x7f4>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d07a      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028d4:	4843      	ldr	r0, [pc, #268]	; (80029e4 <HAL_ADC_ConfigChannel+0x7f8>)
 80028d6:	f7fe ffbf 	bl	8001858 <LL_ADC_GetCommonPathInternalCh>
 80028da:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a41      	ldr	r2, [pc, #260]	; (80029e8 <HAL_ADC_ConfigChannel+0x7fc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d12c      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d126      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a3c      	ldr	r2, [pc, #240]	; (80029ec <HAL_ADC_ConfigChannel+0x800>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d004      	beq.n	8002908 <HAL_ADC_ConfigChannel+0x71c>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a3b      	ldr	r2, [pc, #236]	; (80029f0 <HAL_ADC_ConfigChannel+0x804>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d15d      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002908:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800290c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002910:	4619      	mov	r1, r3
 8002912:	4834      	ldr	r0, [pc, #208]	; (80029e4 <HAL_ADC_ConfigChannel+0x7f8>)
 8002914:	f7fe ff8d 	bl	8001832 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002918:	4b36      	ldr	r3, [pc, #216]	; (80029f4 <HAL_ADC_ConfigChannel+0x808>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	099b      	lsrs	r3, r3, #6
 800291e:	4a36      	ldr	r2, [pc, #216]	; (80029f8 <HAL_ADC_ConfigChannel+0x80c>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	099b      	lsrs	r3, r3, #6
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	4613      	mov	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002932:	e002      	b.n	800293a <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	3b01      	subs	r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f9      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002940:	e040      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a2d      	ldr	r2, [pc, #180]	; (80029fc <HAL_ADC_ConfigChannel+0x810>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d118      	bne.n	800297e <HAL_ADC_ConfigChannel+0x792>
 800294c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d112      	bne.n	800297e <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a23      	ldr	r2, [pc, #140]	; (80029ec <HAL_ADC_ConfigChannel+0x800>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d004      	beq.n	800296c <HAL_ADC_ConfigChannel+0x780>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a22      	ldr	r2, [pc, #136]	; (80029f0 <HAL_ADC_ConfigChannel+0x804>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d12d      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800296c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002970:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002974:	4619      	mov	r1, r3
 8002976:	481b      	ldr	r0, [pc, #108]	; (80029e4 <HAL_ADC_ConfigChannel+0x7f8>)
 8002978:	f7fe ff5b 	bl	8001832 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800297c:	e024      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a1f      	ldr	r2, [pc, #124]	; (8002a00 <HAL_ADC_ConfigChannel+0x814>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d120      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002988:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800298c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d11a      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a14      	ldr	r2, [pc, #80]	; (80029ec <HAL_ADC_ConfigChannel+0x800>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d115      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800299e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029a6:	4619      	mov	r1, r3
 80029a8:	480e      	ldr	r0, [pc, #56]	; (80029e4 <HAL_ADC_ConfigChannel+0x7f8>)
 80029aa:	f7fe ff42 	bl	8001832 <LL_ADC_SetCommonPathInternalCh>
 80029ae:	e00c      	b.n	80029ca <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	f043 0220 	orr.w	r2, r3, #32
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80029c2:	e002      	b.n	80029ca <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029c4:	bf00      	nop
 80029c6:	e000      	b.n	80029ca <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80029d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	37d8      	adds	r7, #216	; 0xd8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	80080000 	.word	0x80080000
 80029e4:	50040300 	.word	0x50040300
 80029e8:	c7520000 	.word	0xc7520000
 80029ec:	50040000 	.word	0x50040000
 80029f0:	50040200 	.word	0x50040200
 80029f4:	20000000 	.word	0x20000000
 80029f8:	053e2d63 	.word	0x053e2d63
 80029fc:	cb840000 	.word	0xcb840000
 8002a00:	80000001 	.word	0x80000001

08002a04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff f8a3 	bl	8001b5c <LL_ADC_IsEnabled>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d14d      	bne.n	8002ab8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <ADC_Enable+0xc0>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00d      	beq.n	8002a46 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	f043 0210 	orr.w	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	f043 0201 	orr.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e039      	b.n	8002aba <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f872 	bl	8001b34 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a50:	f7fe feac 	bl	80017ac <HAL_GetTick>
 8002a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a56:	e028      	b.n	8002aaa <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff f87d 	bl	8001b5c <LL_ADC_IsEnabled>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d104      	bne.n	8002a72 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff f861 	bl	8001b34 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a72:	f7fe fe9b 	bl	80017ac <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d914      	bls.n	8002aaa <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d00d      	beq.n	8002aaa <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	f043 0210 	orr.w	r2, r3, #16
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	f043 0201 	orr.w	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e007      	b.n	8002aba <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d1cf      	bne.n	8002a58 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	8000003f 	.word	0x8000003f

08002ac8 <LL_ADC_IsEnabled>:
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <LL_ADC_IsEnabled+0x18>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <LL_ADC_IsEnabled+0x1a>
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <LL_ADC_REG_IsConversionOngoing>:
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d101      	bne.n	8002b06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b0a1      	sub	sp, #132	; 0x84
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e093      	b.n	8002c5a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002b3e:	2300      	movs	r3, #0
 8002b40:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a47      	ldr	r2, [pc, #284]	; (8002c64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d102      	bne.n	8002b52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b4c:	4b46      	ldr	r3, [pc, #280]	; (8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	e001      	b.n	8002b56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10b      	bne.n	8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	f043 0220 	orr.w	r2, r3, #32
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e072      	b.n	8002c5a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff ffb9 	bl	8002aee <LL_ADC_REG_IsConversionOngoing>
 8002b7c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff ffb3 	bl	8002aee <LL_ADC_REG_IsConversionOngoing>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d154      	bne.n	8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d151      	bne.n	8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b94:	4b35      	ldr	r3, [pc, #212]	; (8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002b96:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d02c      	beq.n	8002bfa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bb2:	035b      	lsls	r3, r3, #13
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bbc:	4829      	ldr	r0, [pc, #164]	; (8002c64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002bbe:	f7ff ff83 	bl	8002ac8 <LL_ADC_IsEnabled>
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	4828      	ldr	r0, [pc, #160]	; (8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002bc6:	f7ff ff7f 	bl	8002ac8 <LL_ADC_IsEnabled>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	431c      	orrs	r4, r3
 8002bce:	4828      	ldr	r0, [pc, #160]	; (8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002bd0:	f7ff ff7a 	bl	8002ac8 <LL_ADC_IsEnabled>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4323      	orrs	r3, r4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d137      	bne.n	8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002bdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002be4:	f023 030f 	bic.w	r3, r3, #15
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	6811      	ldr	r1, [r2, #0]
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	6892      	ldr	r2, [r2, #8]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bf6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bf8:	e028      	b.n	8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c04:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c06:	4817      	ldr	r0, [pc, #92]	; (8002c64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c08:	f7ff ff5e 	bl	8002ac8 <LL_ADC_IsEnabled>
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	4816      	ldr	r0, [pc, #88]	; (8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c10:	f7ff ff5a 	bl	8002ac8 <LL_ADC_IsEnabled>
 8002c14:	4603      	mov	r3, r0
 8002c16:	431c      	orrs	r4, r3
 8002c18:	4815      	ldr	r0, [pc, #84]	; (8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c1a:	f7ff ff55 	bl	8002ac8 <LL_ADC_IsEnabled>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4323      	orrs	r3, r4
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d112      	bne.n	8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c2e:	f023 030f 	bic.w	r3, r3, #15
 8002c32:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c34:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c36:	e009      	b.n	8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3c:	f043 0220 	orr.w	r2, r3, #32
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c4a:	e000      	b.n	8002c4e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c4c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002c56:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3784      	adds	r7, #132	; 0x84
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd90      	pop	{r4, r7, pc}
 8002c62:	bf00      	nop
 8002c64:	50040000 	.word	0x50040000
 8002c68:	50040100 	.word	0x50040100
 8002c6c:	50040300 	.word	0x50040300
 8002c70:	50040200 	.word	0x50040200

08002c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c90:	4013      	ands	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ca6:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	60d3      	str	r3, [r2, #12]
}
 8002cac:	bf00      	nop
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc0:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	0a1b      	lsrs	r3, r3, #8
 8002cc6:	f003 0307 	and.w	r3, r3, #7
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	6039      	str	r1, [r7, #0]
 8002ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	db0a      	blt.n	8002d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	490c      	ldr	r1, [pc, #48]	; (8002d24 <__NVIC_SetPriority+0x4c>)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	0112      	lsls	r2, r2, #4
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d00:	e00a      	b.n	8002d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	4908      	ldr	r1, [pc, #32]	; (8002d28 <__NVIC_SetPriority+0x50>)
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	3b04      	subs	r3, #4
 8002d10:	0112      	lsls	r2, r2, #4
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	440b      	add	r3, r1
 8002d16:	761a      	strb	r2, [r3, #24]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000e100 	.word	0xe000e100
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b089      	sub	sp, #36	; 0x24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f1c3 0307 	rsb	r3, r3, #7
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	bf28      	it	cs
 8002d4a:	2304      	movcs	r3, #4
 8002d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3304      	adds	r3, #4
 8002d52:	2b06      	cmp	r3, #6
 8002d54:	d902      	bls.n	8002d5c <NVIC_EncodePriority+0x30>
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3b03      	subs	r3, #3
 8002d5a:	e000      	b.n	8002d5e <NVIC_EncodePriority+0x32>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d60:	f04f 32ff 	mov.w	r2, #4294967295
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	401a      	ands	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d74:	f04f 31ff 	mov.w	r1, #4294967295
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7e:	43d9      	mvns	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	4313      	orrs	r3, r2
         );
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3724      	adds	r7, #36	; 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002da4:	d301      	bcc.n	8002daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002da6:	2301      	movs	r3, #1
 8002da8:	e00f      	b.n	8002dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002daa:	4a0a      	ldr	r2, [pc, #40]	; (8002dd4 <SysTick_Config+0x40>)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002db2:	210f      	movs	r1, #15
 8002db4:	f04f 30ff 	mov.w	r0, #4294967295
 8002db8:	f7ff ff8e 	bl	8002cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dbc:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <SysTick_Config+0x40>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dc2:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <SysTick_Config+0x40>)
 8002dc4:	2207      	movs	r2, #7
 8002dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	e000e010 	.word	0xe000e010

08002dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff ff47 	bl	8002c74 <__NVIC_SetPriorityGrouping>
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b086      	sub	sp, #24
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	4603      	mov	r3, r0
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e00:	f7ff ff5c 	bl	8002cbc <__NVIC_GetPriorityGrouping>
 8002e04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	6978      	ldr	r0, [r7, #20]
 8002e0c:	f7ff ff8e 	bl	8002d2c <NVIC_EncodePriority>
 8002e10:	4602      	mov	r2, r0
 8002e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e16:	4611      	mov	r1, r2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ff5d 	bl	8002cd8 <__NVIC_SetPriority>
}
 8002e1e:	bf00      	nop
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff ffb0 	bl	8002d94 <SysTick_Config>
 8002e34:	4603      	mov	r3, r0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e4e:	e166      	b.n	800311e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	2101      	movs	r1, #1
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8158 	beq.w	8003118 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d00b      	beq.n	8002e88 <HAL_GPIO_Init+0x48>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d007      	beq.n	8002e88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e7c:	2b11      	cmp	r3, #17
 8002e7e:	d003      	beq.n	8002e88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b12      	cmp	r3, #18
 8002e86:	d130      	bne.n	8002eea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	2203      	movs	r2, #3
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	f003 0201 	and.w	r2, r3, #1
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4013      	ands	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_Init+0xea>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b12      	cmp	r3, #18
 8002f28:	d123      	bne.n	8002f72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	08da      	lsrs	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3208      	adds	r2, #8
 8002f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	220f      	movs	r2, #15
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	08da      	lsrs	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3208      	adds	r2, #8
 8002f6c:	6939      	ldr	r1, [r7, #16]
 8002f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4013      	ands	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 0203 	and.w	r2, r3, #3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 80b2 	beq.w	8003118 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb4:	4b61      	ldr	r3, [pc, #388]	; (800313c <HAL_GPIO_Init+0x2fc>)
 8002fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb8:	4a60      	ldr	r2, [pc, #384]	; (800313c <HAL_GPIO_Init+0x2fc>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6613      	str	r3, [r2, #96]	; 0x60
 8002fc0:	4b5e      	ldr	r3, [pc, #376]	; (800313c <HAL_GPIO_Init+0x2fc>)
 8002fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fcc:	4a5c      	ldr	r2, [pc, #368]	; (8003140 <HAL_GPIO_Init+0x300>)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	220f      	movs	r2, #15
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4013      	ands	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ff6:	d02b      	beq.n	8003050 <HAL_GPIO_Init+0x210>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a52      	ldr	r2, [pc, #328]	; (8003144 <HAL_GPIO_Init+0x304>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d025      	beq.n	800304c <HAL_GPIO_Init+0x20c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a51      	ldr	r2, [pc, #324]	; (8003148 <HAL_GPIO_Init+0x308>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d01f      	beq.n	8003048 <HAL_GPIO_Init+0x208>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a50      	ldr	r2, [pc, #320]	; (800314c <HAL_GPIO_Init+0x30c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d019      	beq.n	8003044 <HAL_GPIO_Init+0x204>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a4f      	ldr	r2, [pc, #316]	; (8003150 <HAL_GPIO_Init+0x310>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d013      	beq.n	8003040 <HAL_GPIO_Init+0x200>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a4e      	ldr	r2, [pc, #312]	; (8003154 <HAL_GPIO_Init+0x314>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d00d      	beq.n	800303c <HAL_GPIO_Init+0x1fc>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a4d      	ldr	r2, [pc, #308]	; (8003158 <HAL_GPIO_Init+0x318>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d007      	beq.n	8003038 <HAL_GPIO_Init+0x1f8>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a4c      	ldr	r2, [pc, #304]	; (800315c <HAL_GPIO_Init+0x31c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d101      	bne.n	8003034 <HAL_GPIO_Init+0x1f4>
 8003030:	2307      	movs	r3, #7
 8003032:	e00e      	b.n	8003052 <HAL_GPIO_Init+0x212>
 8003034:	2308      	movs	r3, #8
 8003036:	e00c      	b.n	8003052 <HAL_GPIO_Init+0x212>
 8003038:	2306      	movs	r3, #6
 800303a:	e00a      	b.n	8003052 <HAL_GPIO_Init+0x212>
 800303c:	2305      	movs	r3, #5
 800303e:	e008      	b.n	8003052 <HAL_GPIO_Init+0x212>
 8003040:	2304      	movs	r3, #4
 8003042:	e006      	b.n	8003052 <HAL_GPIO_Init+0x212>
 8003044:	2303      	movs	r3, #3
 8003046:	e004      	b.n	8003052 <HAL_GPIO_Init+0x212>
 8003048:	2302      	movs	r3, #2
 800304a:	e002      	b.n	8003052 <HAL_GPIO_Init+0x212>
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <HAL_GPIO_Init+0x212>
 8003050:	2300      	movs	r3, #0
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	f002 0203 	and.w	r2, r2, #3
 8003058:	0092      	lsls	r2, r2, #2
 800305a:	4093      	lsls	r3, r2
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003062:	4937      	ldr	r1, [pc, #220]	; (8003140 <HAL_GPIO_Init+0x300>)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	089b      	lsrs	r3, r3, #2
 8003068:	3302      	adds	r3, #2
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003070:	4b3b      	ldr	r3, [pc, #236]	; (8003160 <HAL_GPIO_Init+0x320>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	43db      	mvns	r3, r3
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003094:	4a32      	ldr	r2, [pc, #200]	; (8003160 <HAL_GPIO_Init+0x320>)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800309a:	4b31      	ldr	r3, [pc, #196]	; (8003160 <HAL_GPIO_Init+0x320>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	43db      	mvns	r3, r3
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4013      	ands	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030be:	4a28      	ldr	r2, [pc, #160]	; (8003160 <HAL_GPIO_Init+0x320>)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030c4:	4b26      	ldr	r3, [pc, #152]	; (8003160 <HAL_GPIO_Init+0x320>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030e8:	4a1d      	ldr	r2, [pc, #116]	; (8003160 <HAL_GPIO_Init+0x320>)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030ee:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <HAL_GPIO_Init+0x320>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	43db      	mvns	r3, r3
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4013      	ands	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003112:	4a13      	ldr	r2, [pc, #76]	; (8003160 <HAL_GPIO_Init+0x320>)
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	3301      	adds	r3, #1
 800311c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	f47f ae91 	bne.w	8002e50 <HAL_GPIO_Init+0x10>
  }
}
 800312e:	bf00      	nop
 8003130:	bf00      	nop
 8003132:	371c      	adds	r7, #28
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	40021000 	.word	0x40021000
 8003140:	40010000 	.word	0x40010000
 8003144:	48000400 	.word	0x48000400
 8003148:	48000800 	.word	0x48000800
 800314c:	48000c00 	.word	0x48000c00
 8003150:	48001000 	.word	0x48001000
 8003154:	48001400 	.word	0x48001400
 8003158:	48001800 	.word	0x48001800
 800315c:	48001c00 	.word	0x48001c00
 8003160:	40010400 	.word	0x40010400

08003164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	807b      	strh	r3, [r7, #2]
 8003170:	4613      	mov	r3, r2
 8003172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003174:	787b      	ldrb	r3, [r7, #1]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800317a:	887a      	ldrh	r2, [r7, #2]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003180:	e002      	b.n	8003188 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003196:	b08f      	sub	sp, #60	; 0x3c
 8003198:	af0a      	add	r7, sp, #40	; 0x28
 800319a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e116      	b.n	80033d4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d106      	bne.n	80031c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7fe f963 	bl	800148c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2203      	movs	r2, #3
 80031ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d102      	bne.n	80031e0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f002 f9b6 	bl	8005556 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	687e      	ldr	r6, [r7, #4]
 80031f2:	466d      	mov	r5, sp
 80031f4:	f106 0410 	add.w	r4, r6, #16
 80031f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003200:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003204:	e885 0003 	stmia.w	r5, {r0, r1}
 8003208:	1d33      	adds	r3, r6, #4
 800320a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800320c:	6838      	ldr	r0, [r7, #0]
 800320e:	f002 f976 	bl	80054fe <USB_CoreInit>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0d7      	b.n	80033d4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2100      	movs	r1, #0
 800322a:	4618      	mov	r0, r3
 800322c:	f002 f9a4 	bl	8005578 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]
 8003234:	e04a      	b.n	80032cc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	333d      	adds	r3, #61	; 0x3d
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800324a:	7bfa      	ldrb	r2, [r7, #15]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	333c      	adds	r3, #60	; 0x3c
 800325a:	7bfa      	ldrb	r2, [r7, #15]
 800325c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800325e:	7bfa      	ldrb	r2, [r7, #15]
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	b298      	uxth	r0, r3
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	3342      	adds	r3, #66	; 0x42
 8003272:	4602      	mov	r2, r0
 8003274:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003276:	7bfa      	ldrb	r2, [r7, #15]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	333f      	adds	r3, #63	; 0x3f
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800328a:	7bfa      	ldrb	r2, [r7, #15]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	3344      	adds	r3, #68	; 0x44
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800329e:	7bfa      	ldrb	r2, [r7, #15]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	3348      	adds	r3, #72	; 0x48
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032b2:	7bfa      	ldrb	r2, [r7, #15]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	3350      	adds	r3, #80	; 0x50
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	3301      	adds	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
 80032cc:	7bfa      	ldrb	r2, [r7, #15]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d3af      	bcc.n	8003236 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d6:	2300      	movs	r3, #0
 80032d8:	73fb      	strb	r3, [r7, #15]
 80032da:	e044      	b.n	8003366 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032dc:	7bfa      	ldrb	r2, [r7, #15]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80032ee:	2200      	movs	r2, #0
 80032f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032f2:	7bfa      	ldrb	r2, [r7, #15]
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	1a9b      	subs	r3, r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003304:	7bfa      	ldrb	r2, [r7, #15]
 8003306:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003308:	7bfa      	ldrb	r2, [r7, #15]
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	4613      	mov	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	1a9b      	subs	r3, r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800331a:	2200      	movs	r2, #0
 800331c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800331e:	7bfa      	ldrb	r2, [r7, #15]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003334:	7bfa      	ldrb	r2, [r7, #15]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800334a:	7bfa      	ldrb	r2, [r7, #15]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	3301      	adds	r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]
 8003366:	7bfa      	ldrb	r2, [r7, #15]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	429a      	cmp	r2, r3
 800336e:	d3b5      	bcc.n	80032dc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	687e      	ldr	r6, [r7, #4]
 8003378:	466d      	mov	r5, sp
 800337a:	f106 0410 	add.w	r4, r6, #16
 800337e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003384:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003386:	e894 0003 	ldmia.w	r4, {r0, r1}
 800338a:	e885 0003 	stmia.w	r5, {r0, r1}
 800338e:	1d33      	adds	r3, r6, #4
 8003390:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003392:	6838      	ldr	r0, [r7, #0]
 8003394:	f002 f91a 	bl	80055cc <USB_DevInit>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2202      	movs	r2, #2
 80033a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e014      	b.n	80033d4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d102      	bne.n	80033c8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f80a 	bl	80033dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f002 faaa 	bl	8005926 <USB_DevDisconnect>

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340e:	f043 0303 	orr.w	r3, r3, #3
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a04      	ldr	r2, [pc, #16]	; (8003440 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800342e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003432:	6013      	str	r3, [r2, #0]
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40007000 	.word	0x40007000

08003444 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003448:	4b04      	ldr	r3, [pc, #16]	; (800345c <HAL_PWREx_GetVoltageRange+0x18>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40007000 	.word	0x40007000

08003460 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800346e:	d130      	bne.n	80034d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003470:	4b23      	ldr	r3, [pc, #140]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800347c:	d038      	beq.n	80034f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800347e:	4b20      	ldr	r3, [pc, #128]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003486:	4a1e      	ldr	r2, [pc, #120]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800348c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800348e:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2232      	movs	r2, #50	; 0x32
 8003494:	fb02 f303 	mul.w	r3, r2, r3
 8003498:	4a1b      	ldr	r2, [pc, #108]	; (8003508 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	0c9b      	lsrs	r3, r3, #18
 80034a0:	3301      	adds	r3, #1
 80034a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034a4:	e002      	b.n	80034ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034ac:	4b14      	ldr	r3, [pc, #80]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b8:	d102      	bne.n	80034c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f2      	bne.n	80034a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034c0:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034cc:	d110      	bne.n	80034f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e00f      	b.n	80034f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034d2:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034de:	d007      	beq.n	80034f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034e0:	4b07      	ldr	r3, [pc, #28]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034e8:	4a05      	ldr	r2, [pc, #20]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40007000 	.word	0x40007000
 8003504:	20000000 	.word	0x20000000
 8003508:	431bde83 	.word	0x431bde83

0800350c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	4a04      	ldr	r2, [pc, #16]	; (8003528 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800351a:	6053      	str	r3, [r2, #4]
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40007000 	.word	0x40007000

0800352c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a04      	ldr	r2, [pc, #16]	; (8003548 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800353a:	6053      	str	r3, [r2, #4]
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40007000 	.word	0x40007000

0800354c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d102      	bne.n	8003560 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	f000 bc16 	b.w	8003d8c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003560:	4ba0      	ldr	r3, [pc, #640]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 030c 	and.w	r3, r3, #12
 8003568:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800356a:	4b9e      	ldr	r3, [pc, #632]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 80e4 	beq.w	800374a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d007      	beq.n	8003598 <HAL_RCC_OscConfig+0x4c>
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2b0c      	cmp	r3, #12
 800358c:	f040 808b 	bne.w	80036a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2b01      	cmp	r3, #1
 8003594:	f040 8087 	bne.w	80036a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003598:	4b92      	ldr	r3, [pc, #584]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_OscConfig+0x64>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e3ed      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1a      	ldr	r2, [r3, #32]
 80035b4:	4b8b      	ldr	r3, [pc, #556]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d004      	beq.n	80035ca <HAL_RCC_OscConfig+0x7e>
 80035c0:	4b88      	ldr	r3, [pc, #544]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035c8:	e005      	b.n	80035d6 <HAL_RCC_OscConfig+0x8a>
 80035ca:	4b86      	ldr	r3, [pc, #536]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80035cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d223      	bcs.n	8003622 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fd80 	bl	80040e4 <RCC_SetFlashLatencyFromMSIRange>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e3ce      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035ee:	4b7d      	ldr	r3, [pc, #500]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a7c      	ldr	r2, [pc, #496]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80035f4:	f043 0308 	orr.w	r3, r3, #8
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	4b7a      	ldr	r3, [pc, #488]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	4977      	ldr	r1, [pc, #476]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003608:	4313      	orrs	r3, r2
 800360a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800360c:	4b75      	ldr	r3, [pc, #468]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	4972      	ldr	r1, [pc, #456]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]
 8003620:	e025      	b.n	800366e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003622:	4b70      	ldr	r3, [pc, #448]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a6f      	ldr	r2, [pc, #444]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003628:	f043 0308 	orr.w	r3, r3, #8
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	4b6d      	ldr	r3, [pc, #436]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	496a      	ldr	r1, [pc, #424]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800363c:	4313      	orrs	r3, r2
 800363e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003640:	4b68      	ldr	r3, [pc, #416]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	021b      	lsls	r3, r3, #8
 800364e:	4965      	ldr	r1, [pc, #404]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fd40 	bl	80040e4 <RCC_SetFlashLatencyFromMSIRange>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e38e      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800366e:	f000 fc75 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 8003672:	4602      	mov	r2, r0
 8003674:	4b5b      	ldr	r3, [pc, #364]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	091b      	lsrs	r3, r3, #4
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	495a      	ldr	r1, [pc, #360]	; (80037e8 <HAL_RCC_OscConfig+0x29c>)
 8003680:	5ccb      	ldrb	r3, [r1, r3]
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	fa22 f303 	lsr.w	r3, r2, r3
 800368a:	4a58      	ldr	r2, [pc, #352]	; (80037ec <HAL_RCC_OscConfig+0x2a0>)
 800368c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800368e:	4b58      	ldr	r3, [pc, #352]	; (80037f0 <HAL_RCC_OscConfig+0x2a4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe f83a 	bl	800170c <HAL_InitTick>
 8003698:	4603      	mov	r3, r0
 800369a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d052      	beq.n	8003748 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	e372      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d032      	beq.n	8003714 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036ae:	4b4d      	ldr	r3, [pc, #308]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a4c      	ldr	r2, [pc, #304]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036ba:	f7fe f877 	bl	80017ac <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036c2:	f7fe f873 	bl	80017ac <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e35b      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036d4:	4b43      	ldr	r3, [pc, #268]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036e0:	4b40      	ldr	r3, [pc, #256]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a3f      	ldr	r2, [pc, #252]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80036e6:	f043 0308 	orr.w	r3, r3, #8
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	4b3d      	ldr	r3, [pc, #244]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	493a      	ldr	r1, [pc, #232]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036fe:	4b39      	ldr	r3, [pc, #228]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	4935      	ldr	r1, [pc, #212]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800370e:	4313      	orrs	r3, r2
 8003710:	604b      	str	r3, [r1, #4]
 8003712:	e01a      	b.n	800374a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003714:	4b33      	ldr	r3, [pc, #204]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a32      	ldr	r2, [pc, #200]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800371a:	f023 0301 	bic.w	r3, r3, #1
 800371e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003720:	f7fe f844 	bl	80017ac <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003728:	f7fe f840 	bl	80017ac <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e328      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800373a:	4b2a      	ldr	r3, [pc, #168]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x1dc>
 8003746:	e000      	b.n	800374a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003748:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d073      	beq.n	800383e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b08      	cmp	r3, #8
 800375a:	d005      	beq.n	8003768 <HAL_RCC_OscConfig+0x21c>
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2b0c      	cmp	r3, #12
 8003760:	d10e      	bne.n	8003780 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d10b      	bne.n	8003780 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003768:	4b1e      	ldr	r3, [pc, #120]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d063      	beq.n	800383c <HAL_RCC_OscConfig+0x2f0>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d15f      	bne.n	800383c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e305      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003788:	d106      	bne.n	8003798 <HAL_RCC_OscConfig+0x24c>
 800378a:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a15      	ldr	r2, [pc, #84]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e01d      	b.n	80037d4 <HAL_RCC_OscConfig+0x288>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a0:	d10c      	bne.n	80037bc <HAL_RCC_OscConfig+0x270>
 80037a2:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a0f      	ldr	r2, [pc, #60]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80037a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a0c      	ldr	r2, [pc, #48]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80037b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e00b      	b.n	80037d4 <HAL_RCC_OscConfig+0x288>
 80037bc:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a08      	ldr	r2, [pc, #32]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80037c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a05      	ldr	r2, [pc, #20]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80037ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d01b      	beq.n	8003814 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fd ffe6 	bl	80017ac <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e2:	e010      	b.n	8003806 <HAL_RCC_OscConfig+0x2ba>
 80037e4:	40021000 	.word	0x40021000
 80037e8:	080062d0 	.word	0x080062d0
 80037ec:	20000000 	.word	0x20000000
 80037f0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fd ffda 	bl	80017ac <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e2c2      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003806:	4baf      	ldr	r3, [pc, #700]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0x2a8>
 8003812:	e014      	b.n	800383e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fd ffca 	bl	80017ac <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800381c:	f7fd ffc6 	bl	80017ac <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	; 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e2ae      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800382e:	4ba5      	ldr	r3, [pc, #660]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x2d0>
 800383a:	e000      	b.n	800383e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d060      	beq.n	800390c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b04      	cmp	r3, #4
 800384e:	d005      	beq.n	800385c <HAL_RCC_OscConfig+0x310>
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b0c      	cmp	r3, #12
 8003854:	d119      	bne.n	800388a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d116      	bne.n	800388a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800385c:	4b99      	ldr	r3, [pc, #612]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_OscConfig+0x328>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e28b      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003874:	4b93      	ldr	r3, [pc, #588]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	4990      	ldr	r1, [pc, #576]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003888:	e040      	b.n	800390c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d023      	beq.n	80038da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003892:	4b8c      	ldr	r3, [pc, #560]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a8b      	ldr	r2, [pc, #556]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389e:	f7fd ff85 	bl	80017ac <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a6:	f7fd ff81 	bl	80017ac <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e269      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b8:	4b82      	ldr	r3, [pc, #520]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c4:	4b7f      	ldr	r3, [pc, #508]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	061b      	lsls	r3, r3, #24
 80038d2:	497c      	ldr	r1, [pc, #496]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]
 80038d8:	e018      	b.n	800390c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038da:	4b7a      	ldr	r3, [pc, #488]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a79      	ldr	r2, [pc, #484]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 80038e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e6:	f7fd ff61 	bl	80017ac <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ee:	f7fd ff5d 	bl	80017ac <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e245      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003900:	4b70      	ldr	r3, [pc, #448]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f0      	bne.n	80038ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d03c      	beq.n	8003992 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d01c      	beq.n	800395a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003920:	4b68      	ldr	r3, [pc, #416]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003926:	4a67      	ldr	r2, [pc, #412]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7fd ff3c 	bl	80017ac <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003938:	f7fd ff38 	bl	80017ac <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e220      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800394a:	4b5e      	ldr	r3, [pc, #376]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 800394c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0ef      	beq.n	8003938 <HAL_RCC_OscConfig+0x3ec>
 8003958:	e01b      	b.n	8003992 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800395a:	4b5a      	ldr	r3, [pc, #360]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 800395c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003960:	4a58      	ldr	r2, [pc, #352]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003962:	f023 0301 	bic.w	r3, r3, #1
 8003966:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396a:	f7fd ff1f 	bl	80017ac <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003972:	f7fd ff1b 	bl	80017ac <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e203      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003984:	4b4f      	ldr	r3, [pc, #316]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1ef      	bne.n	8003972 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 80a6 	beq.w	8003aec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a0:	2300      	movs	r3, #0
 80039a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039a4:	4b47      	ldr	r3, [pc, #284]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 80039a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10d      	bne.n	80039cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b0:	4b44      	ldr	r3, [pc, #272]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 80039b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b4:	4a43      	ldr	r2, [pc, #268]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 80039b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ba:	6593      	str	r3, [r2, #88]	; 0x58
 80039bc:	4b41      	ldr	r3, [pc, #260]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 80039be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039c8:	2301      	movs	r3, #1
 80039ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039cc:	4b3e      	ldr	r3, [pc, #248]	; (8003ac8 <HAL_RCC_OscConfig+0x57c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d118      	bne.n	8003a0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039d8:	4b3b      	ldr	r3, [pc, #236]	; (8003ac8 <HAL_RCC_OscConfig+0x57c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a3a      	ldr	r2, [pc, #232]	; (8003ac8 <HAL_RCC_OscConfig+0x57c>)
 80039de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e4:	f7fd fee2 	bl	80017ac <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ec:	f7fd fede 	bl	80017ac <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e1c6      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039fe:	4b32      	ldr	r3, [pc, #200]	; (8003ac8 <HAL_RCC_OscConfig+0x57c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d108      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4d8>
 8003a12:	4b2c      	ldr	r3, [pc, #176]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a18:	4a2a      	ldr	r2, [pc, #168]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a22:	e024      	b.n	8003a6e <HAL_RCC_OscConfig+0x522>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b05      	cmp	r3, #5
 8003a2a:	d110      	bne.n	8003a4e <HAL_RCC_OscConfig+0x502>
 8003a2c:	4b25      	ldr	r3, [pc, #148]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a32:	4a24      	ldr	r2, [pc, #144]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a34:	f043 0304 	orr.w	r3, r3, #4
 8003a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a3c:	4b21      	ldr	r3, [pc, #132]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a42:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a4c:	e00f      	b.n	8003a6e <HAL_RCC_OscConfig+0x522>
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a54:	4a1b      	ldr	r2, [pc, #108]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a56:	f023 0301 	bic.w	r3, r3, #1
 8003a5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a5e:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a64:	4a17      	ldr	r2, [pc, #92]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a66:	f023 0304 	bic.w	r3, r3, #4
 8003a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d016      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a76:	f7fd fe99 	bl	80017ac <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fd fe95 	bl	80017ac <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e17b      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a94:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0ed      	beq.n	8003a7e <HAL_RCC_OscConfig+0x532>
 8003aa2:	e01a      	b.n	8003ada <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7fd fe82 	bl	80017ac <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aaa:	e00f      	b.n	8003acc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aac:	f7fd fe7e 	bl	80017ac <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d906      	bls.n	8003acc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e164      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
 8003ac2:	bf00      	nop
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003acc:	4ba8      	ldr	r3, [pc, #672]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e8      	bne.n	8003aac <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ada:	7ffb      	ldrb	r3, [r7, #31]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d105      	bne.n	8003aec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae0:	4ba3      	ldr	r3, [pc, #652]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae4:	4aa2      	ldr	r2, [pc, #648]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0320 	and.w	r3, r3, #32
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d03c      	beq.n	8003b72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01c      	beq.n	8003b3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b00:	4b9b      	ldr	r3, [pc, #620]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b06:	4a9a      	ldr	r2, [pc, #616]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b10:	f7fd fe4c 	bl	80017ac <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b18:	f7fd fe48 	bl	80017ac <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e130      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b2a:	4b91      	ldr	r3, [pc, #580]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003b2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0ef      	beq.n	8003b18 <HAL_RCC_OscConfig+0x5cc>
 8003b38:	e01b      	b.n	8003b72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b3a:	4b8d      	ldr	r3, [pc, #564]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003b3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b40:	4a8b      	ldr	r2, [pc, #556]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4a:	f7fd fe2f 	bl	80017ac <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b52:	f7fd fe2b 	bl	80017ac <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e113      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b64:	4b82      	ldr	r3, [pc, #520]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003b66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1ef      	bne.n	8003b52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 8107 	beq.w	8003d8a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	f040 80cb 	bne.w	8003d1c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b86:	4b7a      	ldr	r3, [pc, #488]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f003 0203 	and.w	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d12c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d123      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d11b      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d113      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd6:	085b      	lsrs	r3, r3, #1
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d109      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	3b01      	subs	r3, #1
 8003bee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d06d      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d068      	beq.n	8003ccc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bfa:	4b5d      	ldr	r3, [pc, #372]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d105      	bne.n	8003c12 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c06:	4b5a      	ldr	r3, [pc, #360]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e0ba      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c16:	4b56      	ldr	r3, [pc, #344]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a55      	ldr	r2, [pc, #340]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003c1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c20:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c22:	f7fd fdc3 	bl	80017ac <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2a:	f7fd fdbf 	bl	80017ac <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e0a7      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c3c:	4b4c      	ldr	r3, [pc, #304]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f0      	bne.n	8003c2a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c48:	4b49      	ldr	r3, [pc, #292]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	4b49      	ldr	r3, [pc, #292]	; (8003d74 <HAL_RCC_OscConfig+0x828>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c58:	3a01      	subs	r2, #1
 8003c5a:	0112      	lsls	r2, r2, #4
 8003c5c:	4311      	orrs	r1, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c62:	0212      	lsls	r2, r2, #8
 8003c64:	4311      	orrs	r1, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c6a:	0852      	lsrs	r2, r2, #1
 8003c6c:	3a01      	subs	r2, #1
 8003c6e:	0552      	lsls	r2, r2, #21
 8003c70:	4311      	orrs	r1, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c76:	0852      	lsrs	r2, r2, #1
 8003c78:	3a01      	subs	r2, #1
 8003c7a:	0652      	lsls	r2, r2, #25
 8003c7c:	4311      	orrs	r1, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c82:	06d2      	lsls	r2, r2, #27
 8003c84:	430a      	orrs	r2, r1
 8003c86:	493a      	ldr	r1, [pc, #232]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c8c:	4b38      	ldr	r3, [pc, #224]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a37      	ldr	r2, [pc, #220]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c98:	4b35      	ldr	r3, [pc, #212]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4a34      	ldr	r2, [pc, #208]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ca2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ca4:	f7fd fd82 	bl	80017ac <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fd fd7e 	bl	80017ac <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e066      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbe:	4b2c      	ldr	r3, [pc, #176]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cca:	e05e      	b.n	8003d8a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e05d      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd0:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d156      	bne.n	8003d8a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cdc:	4b24      	ldr	r3, [pc, #144]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a23      	ldr	r2, [pc, #140]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ce6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ce8:	4b21      	ldr	r3, [pc, #132]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4a20      	ldr	r2, [pc, #128]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cf2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cf4:	f7fd fd5a 	bl	80017ac <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfc:	f7fd fd56 	bl	80017ac <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e03e      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d0e:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x7b0>
 8003d1a:	e036      	b.n	8003d8a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	2b0c      	cmp	r3, #12
 8003d20:	d031      	beq.n	8003d86 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d22:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a12      	ldr	r2, [pc, #72]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003d28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d2c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003d2e:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d105      	bne.n	8003d46 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	4a0c      	ldr	r2, [pc, #48]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003d40:	f023 0303 	bic.w	r3, r3, #3
 8003d44:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d46:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	4a09      	ldr	r2, [pc, #36]	; (8003d70 <HAL_RCC_OscConfig+0x824>)
 8003d4c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d54:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d56:	f7fd fd29 	bl	80017ac <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d5c:	e00c      	b.n	8003d78 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d5e:	f7fd fd25 	bl	80017ac <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d905      	bls.n	8003d78 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e00d      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
 8003d70:	40021000 	.word	0x40021000
 8003d74:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d78:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <HAL_RCC_OscConfig+0x848>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1ec      	bne.n	8003d5e <HAL_RCC_OscConfig+0x812>
 8003d84:	e001      	b.n	8003d8a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3720      	adds	r7, #32
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40021000 	.word	0x40021000

08003d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e0c8      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dac:	4b66      	ldr	r3, [pc, #408]	; (8003f48 <HAL_RCC_ClockConfig+0x1b0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d910      	bls.n	8003ddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dba:	4b63      	ldr	r3, [pc, #396]	; (8003f48 <HAL_RCC_ClockConfig+0x1b0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f023 0207 	bic.w	r2, r3, #7
 8003dc2:	4961      	ldr	r1, [pc, #388]	; (8003f48 <HAL_RCC_ClockConfig+0x1b0>)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dca:	4b5f      	ldr	r3, [pc, #380]	; (8003f48 <HAL_RCC_ClockConfig+0x1b0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d001      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0b0      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d04c      	beq.n	8003e82 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d107      	bne.n	8003e00 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003df0:	4b56      	ldr	r3, [pc, #344]	; (8003f4c <HAL_RCC_ClockConfig+0x1b4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d121      	bne.n	8003e40 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e09e      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d107      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e08:	4b50      	ldr	r3, [pc, #320]	; (8003f4c <HAL_RCC_ClockConfig+0x1b4>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d115      	bne.n	8003e40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e092      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d107      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e20:	4b4a      	ldr	r3, [pc, #296]	; (8003f4c <HAL_RCC_ClockConfig+0x1b4>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d109      	bne.n	8003e40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e086      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e30:	4b46      	ldr	r3, [pc, #280]	; (8003f4c <HAL_RCC_ClockConfig+0x1b4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e07e      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e40:	4b42      	ldr	r3, [pc, #264]	; (8003f4c <HAL_RCC_ClockConfig+0x1b4>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f023 0203 	bic.w	r2, r3, #3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	493f      	ldr	r1, [pc, #252]	; (8003f4c <HAL_RCC_ClockConfig+0x1b4>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e52:	f7fd fcab 	bl	80017ac <HAL_GetTick>
 8003e56:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e58:	e00a      	b.n	8003e70 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e5a:	f7fd fca7 	bl	80017ac <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e066      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e70:	4b36      	ldr	r3, [pc, #216]	; (8003f4c <HAL_RCC_ClockConfig+0x1b4>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 020c 	and.w	r2, r3, #12
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d1eb      	bne.n	8003e5a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d008      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e8e:	4b2f      	ldr	r3, [pc, #188]	; (8003f4c <HAL_RCC_ClockConfig+0x1b4>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	492c      	ldr	r1, [pc, #176]	; (8003f4c <HAL_RCC_ClockConfig+0x1b4>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea0:	4b29      	ldr	r3, [pc, #164]	; (8003f48 <HAL_RCC_ClockConfig+0x1b0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d210      	bcs.n	8003ed0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eae:	4b26      	ldr	r3, [pc, #152]	; (8003f48 <HAL_RCC_ClockConfig+0x1b0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f023 0207 	bic.w	r2, r3, #7
 8003eb6:	4924      	ldr	r1, [pc, #144]	; (8003f48 <HAL_RCC_ClockConfig+0x1b0>)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ebe:	4b22      	ldr	r3, [pc, #136]	; (8003f48 <HAL_RCC_ClockConfig+0x1b0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e036      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003edc:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <HAL_RCC_ClockConfig+0x1b4>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	4918      	ldr	r1, [pc, #96]	; (8003f4c <HAL_RCC_ClockConfig+0x1b4>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d009      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003efa:	4b14      	ldr	r3, [pc, #80]	; (8003f4c <HAL_RCC_ClockConfig+0x1b4>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	4910      	ldr	r1, [pc, #64]	; (8003f4c <HAL_RCC_ClockConfig+0x1b4>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f0e:	f000 f825 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 8003f12:	4602      	mov	r2, r0
 8003f14:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <HAL_RCC_ClockConfig+0x1b4>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	490c      	ldr	r1, [pc, #48]	; (8003f50 <HAL_RCC_ClockConfig+0x1b8>)
 8003f20:	5ccb      	ldrb	r3, [r1, r3]
 8003f22:	f003 031f 	and.w	r3, r3, #31
 8003f26:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f2e:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <HAL_RCC_ClockConfig+0x1c0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fd fbea 	bl	800170c <HAL_InitTick>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f3c:	7afb      	ldrb	r3, [r7, #11]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40022000 	.word	0x40022000
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	080062d0 	.word	0x080062d0
 8003f54:	20000000 	.word	0x20000000
 8003f58:	20000004 	.word	0x20000004

08003f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b089      	sub	sp, #36	; 0x24
 8003f60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
 8003f66:	2300      	movs	r3, #0
 8003f68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f6a:	4b3e      	ldr	r3, [pc, #248]	; (8004064 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 030c 	and.w	r3, r3, #12
 8003f72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f74:	4b3b      	ldr	r3, [pc, #236]	; (8004064 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x34>
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d121      	bne.n	8003fce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d11e      	bne.n	8003fce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f90:	4b34      	ldr	r3, [pc, #208]	; (8004064 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d107      	bne.n	8003fac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f9c:	4b31      	ldr	r3, [pc, #196]	; (8004064 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa2:	0a1b      	lsrs	r3, r3, #8
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	e005      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fac:	4b2d      	ldr	r3, [pc, #180]	; (8004064 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	091b      	lsrs	r3, r3, #4
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fb8:	4a2b      	ldr	r2, [pc, #172]	; (8004068 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10d      	bne.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fcc:	e00a      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d102      	bne.n	8003fda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fd4:	4b25      	ldr	r3, [pc, #148]	; (800406c <HAL_RCC_GetSysClockFreq+0x110>)
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	e004      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d101      	bne.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fe0:	4b23      	ldr	r3, [pc, #140]	; (8004070 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fe2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	2b0c      	cmp	r3, #12
 8003fe8:	d134      	bne.n	8004054 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fea:	4b1e      	ldr	r3, [pc, #120]	; (8004064 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d003      	beq.n	8004002 <HAL_RCC_GetSysClockFreq+0xa6>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d003      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0xac>
 8004000:	e005      	b.n	800400e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004002:	4b1a      	ldr	r3, [pc, #104]	; (800406c <HAL_RCC_GetSysClockFreq+0x110>)
 8004004:	617b      	str	r3, [r7, #20]
      break;
 8004006:	e005      	b.n	8004014 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004008:	4b19      	ldr	r3, [pc, #100]	; (8004070 <HAL_RCC_GetSysClockFreq+0x114>)
 800400a:	617b      	str	r3, [r7, #20]
      break;
 800400c:	e002      	b.n	8004014 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	617b      	str	r3, [r7, #20]
      break;
 8004012:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004014:	4b13      	ldr	r3, [pc, #76]	; (8004064 <HAL_RCC_GetSysClockFreq+0x108>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	3301      	adds	r3, #1
 8004020:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004022:	4b10      	ldr	r3, [pc, #64]	; (8004064 <HAL_RCC_GetSysClockFreq+0x108>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	0a1b      	lsrs	r3, r3, #8
 8004028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	fb02 f203 	mul.w	r2, r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	fbb2 f3f3 	udiv	r3, r2, r3
 8004038:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800403a:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <HAL_RCC_GetSysClockFreq+0x108>)
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	0e5b      	lsrs	r3, r3, #25
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	3301      	adds	r3, #1
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004052:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004054:	69bb      	ldr	r3, [r7, #24]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3724      	adds	r7, #36	; 0x24
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000
 8004068:	080062e8 	.word	0x080062e8
 800406c:	00f42400 	.word	0x00f42400
 8004070:	007a1200 	.word	0x007a1200

08004074 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004078:	4b03      	ldr	r3, [pc, #12]	; (8004088 <HAL_RCC_GetHCLKFreq+0x14>)
 800407a:	681b      	ldr	r3, [r3, #0]
}
 800407c:	4618      	mov	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	20000000 	.word	0x20000000

0800408c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004090:	f7ff fff0 	bl	8004074 <HAL_RCC_GetHCLKFreq>
 8004094:	4602      	mov	r2, r0
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	0a1b      	lsrs	r3, r3, #8
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	4904      	ldr	r1, [pc, #16]	; (80040b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040a2:	5ccb      	ldrb	r3, [r1, r3]
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40021000 	.word	0x40021000
 80040b4:	080062e0 	.word	0x080062e0

080040b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040bc:	f7ff ffda 	bl	8004074 <HAL_RCC_GetHCLKFreq>
 80040c0:	4602      	mov	r2, r0
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	0adb      	lsrs	r3, r3, #11
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	4904      	ldr	r1, [pc, #16]	; (80040e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040ce:	5ccb      	ldrb	r3, [r1, r3]
 80040d0:	f003 031f 	and.w	r3, r3, #31
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d8:	4618      	mov	r0, r3
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40021000 	.word	0x40021000
 80040e0:	080062e0 	.word	0x080062e0

080040e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040f0:	4b2a      	ldr	r3, [pc, #168]	; (800419c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040fc:	f7ff f9a2 	bl	8003444 <HAL_PWREx_GetVoltageRange>
 8004100:	6178      	str	r0, [r7, #20]
 8004102:	e014      	b.n	800412e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004104:	4b25      	ldr	r3, [pc, #148]	; (800419c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004108:	4a24      	ldr	r2, [pc, #144]	; (800419c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800410a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800410e:	6593      	str	r3, [r2, #88]	; 0x58
 8004110:	4b22      	ldr	r3, [pc, #136]	; (800419c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800411c:	f7ff f992 	bl	8003444 <HAL_PWREx_GetVoltageRange>
 8004120:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004122:	4b1e      	ldr	r3, [pc, #120]	; (800419c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004126:	4a1d      	ldr	r2, [pc, #116]	; (800419c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800412c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004134:	d10b      	bne.n	800414e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b80      	cmp	r3, #128	; 0x80
 800413a:	d919      	bls.n	8004170 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2ba0      	cmp	r3, #160	; 0xa0
 8004140:	d902      	bls.n	8004148 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004142:	2302      	movs	r3, #2
 8004144:	613b      	str	r3, [r7, #16]
 8004146:	e013      	b.n	8004170 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004148:	2301      	movs	r3, #1
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	e010      	b.n	8004170 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b80      	cmp	r3, #128	; 0x80
 8004152:	d902      	bls.n	800415a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004154:	2303      	movs	r3, #3
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	e00a      	b.n	8004170 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b80      	cmp	r3, #128	; 0x80
 800415e:	d102      	bne.n	8004166 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004160:	2302      	movs	r3, #2
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	e004      	b.n	8004170 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b70      	cmp	r3, #112	; 0x70
 800416a:	d101      	bne.n	8004170 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800416c:	2301      	movs	r3, #1
 800416e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f023 0207 	bic.w	r2, r3, #7
 8004178:	4909      	ldr	r1, [pc, #36]	; (80041a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	429a      	cmp	r2, r3
 800418c:	d001      	beq.n	8004192 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40021000 	.word	0x40021000
 80041a0:	40022000 	.word	0x40022000

080041a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041ac:	2300      	movs	r3, #0
 80041ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041b0:	2300      	movs	r3, #0
 80041b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d041      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041c8:	d02a      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041ce:	d824      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041d4:	d008      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041da:	d81e      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80041e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041e4:	d010      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041e6:	e018      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041e8:	4b86      	ldr	r3, [pc, #536]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4a85      	ldr	r2, [pc, #532]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041f4:	e015      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3304      	adds	r3, #4
 80041fa:	2100      	movs	r1, #0
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fadd 	bl	80047bc <RCCEx_PLLSAI1_Config>
 8004202:	4603      	mov	r3, r0
 8004204:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004206:	e00c      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3320      	adds	r3, #32
 800420c:	2100      	movs	r1, #0
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fbc6 	bl	80049a0 <RCCEx_PLLSAI2_Config>
 8004214:	4603      	mov	r3, r0
 8004216:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004218:	e003      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	74fb      	strb	r3, [r7, #19]
      break;
 800421e:	e000      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004222:	7cfb      	ldrb	r3, [r7, #19]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10b      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004228:	4b76      	ldr	r3, [pc, #472]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004236:	4973      	ldr	r1, [pc, #460]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800423e:	e001      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004240:	7cfb      	ldrb	r3, [r7, #19]
 8004242:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d041      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004254:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004258:	d02a      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800425a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800425e:	d824      	bhi.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004260:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004264:	d008      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004266:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800426a:	d81e      	bhi.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004274:	d010      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004276:	e018      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004278:	4b62      	ldr	r3, [pc, #392]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	4a61      	ldr	r2, [pc, #388]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004282:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004284:	e015      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3304      	adds	r3, #4
 800428a:	2100      	movs	r1, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fa95 	bl	80047bc <RCCEx_PLLSAI1_Config>
 8004292:	4603      	mov	r3, r0
 8004294:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004296:	e00c      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3320      	adds	r3, #32
 800429c:	2100      	movs	r1, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fb7e 	bl	80049a0 <RCCEx_PLLSAI2_Config>
 80042a4:	4603      	mov	r3, r0
 80042a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042a8:	e003      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	74fb      	strb	r3, [r7, #19]
      break;
 80042ae:	e000      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80042b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b2:	7cfb      	ldrb	r3, [r7, #19]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10b      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042b8:	4b52      	ldr	r3, [pc, #328]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042c6:	494f      	ldr	r1, [pc, #316]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042ce:	e001      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d0:	7cfb      	ldrb	r3, [r7, #19]
 80042d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80a0 	beq.w	8004422 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e2:	2300      	movs	r3, #0
 80042e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042e6:	4b47      	ldr	r3, [pc, #284]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80042f6:	2300      	movs	r3, #0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00d      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fc:	4b41      	ldr	r3, [pc, #260]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004300:	4a40      	ldr	r2, [pc, #256]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004306:	6593      	str	r3, [r2, #88]	; 0x58
 8004308:	4b3e      	ldr	r3, [pc, #248]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004314:	2301      	movs	r3, #1
 8004316:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004318:	4b3b      	ldr	r3, [pc, #236]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a3a      	ldr	r2, [pc, #232]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800431e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004322:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004324:	f7fd fa42 	bl	80017ac <HAL_GetTick>
 8004328:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800432a:	e009      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800432c:	f7fd fa3e 	bl	80017ac <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d902      	bls.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	74fb      	strb	r3, [r7, #19]
        break;
 800433e:	e005      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004340:	4b31      	ldr	r3, [pc, #196]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0ef      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800434c:	7cfb      	ldrb	r3, [r7, #19]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d15c      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004352:	4b2c      	ldr	r3, [pc, #176]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d01f      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	429a      	cmp	r2, r3
 800436e:	d019      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004370:	4b24      	ldr	r3, [pc, #144]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800437a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800437c:	4b21      	ldr	r3, [pc, #132]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004382:	4a20      	ldr	r2, [pc, #128]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800438c:	4b1d      	ldr	r3, [pc, #116]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004392:	4a1c      	ldr	r2, [pc, #112]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800439c:	4a19      	ldr	r2, [pc, #100]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d016      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ae:	f7fd f9fd 	bl	80017ac <HAL_GetTick>
 80043b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043b4:	e00b      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fd f9f9 	bl	80017ac <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d902      	bls.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	74fb      	strb	r3, [r7, #19]
            break;
 80043cc:	e006      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ce:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0ec      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80043dc:	7cfb      	ldrb	r3, [r7, #19]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10c      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043e2:	4b08      	ldr	r3, [pc, #32]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f2:	4904      	ldr	r1, [pc, #16]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043fa:	e009      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043fc:	7cfb      	ldrb	r3, [r7, #19]
 80043fe:	74bb      	strb	r3, [r7, #18]
 8004400:	e006      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004402:	bf00      	nop
 8004404:	40021000 	.word	0x40021000
 8004408:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440c:	7cfb      	ldrb	r3, [r7, #19]
 800440e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004410:	7c7b      	ldrb	r3, [r7, #17]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d105      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004416:	4ba6      	ldr	r3, [pc, #664]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441a:	4aa5      	ldr	r2, [pc, #660]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800441c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004420:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800442e:	4ba0      	ldr	r3, [pc, #640]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004434:	f023 0203 	bic.w	r2, r3, #3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	499c      	ldr	r1, [pc, #624]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004450:	4b97      	ldr	r3, [pc, #604]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004456:	f023 020c 	bic.w	r2, r3, #12
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445e:	4994      	ldr	r1, [pc, #592]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004472:	4b8f      	ldr	r3, [pc, #572]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004478:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	498b      	ldr	r1, [pc, #556]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004494:	4b86      	ldr	r3, [pc, #536]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a2:	4983      	ldr	r1, [pc, #524]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044b6:	4b7e      	ldr	r3, [pc, #504]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c4:	497a      	ldr	r1, [pc, #488]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044d8:	4b75      	ldr	r3, [pc, #468]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e6:	4972      	ldr	r1, [pc, #456]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044fa:	4b6d      	ldr	r3, [pc, #436]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004500:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004508:	4969      	ldr	r1, [pc, #420]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800451c:	4b64      	ldr	r3, [pc, #400]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004522:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800452a:	4961      	ldr	r1, [pc, #388]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800453e:	4b5c      	ldr	r3, [pc, #368]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004544:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454c:	4958      	ldr	r1, [pc, #352]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004560:	4b53      	ldr	r3, [pc, #332]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004566:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456e:	4950      	ldr	r1, [pc, #320]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004582:	4b4b      	ldr	r3, [pc, #300]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004588:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004590:	4947      	ldr	r1, [pc, #284]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045a4:	4b42      	ldr	r3, [pc, #264]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045aa:	f023 0203 	bic.w	r2, r3, #3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b2:	493f      	ldr	r1, [pc, #252]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d028      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045c6:	4b3a      	ldr	r3, [pc, #232]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	4936      	ldr	r1, [pc, #216]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045e4:	d106      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045e6:	4b32      	ldr	r3, [pc, #200]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	4a31      	ldr	r2, [pc, #196]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045f0:	60d3      	str	r3, [r2, #12]
 80045f2:	e011      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045fc:	d10c      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3304      	adds	r3, #4
 8004602:	2101      	movs	r1, #1
 8004604:	4618      	mov	r0, r3
 8004606:	f000 f8d9 	bl	80047bc <RCCEx_PLLSAI1_Config>
 800460a:	4603      	mov	r3, r0
 800460c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800460e:	7cfb      	ldrb	r3, [r7, #19]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004614:	7cfb      	ldrb	r3, [r7, #19]
 8004616:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d028      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004624:	4b22      	ldr	r3, [pc, #136]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004632:	491f      	ldr	r1, [pc, #124]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800463e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004642:	d106      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004644:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4a19      	ldr	r2, [pc, #100]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800464a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800464e:	60d3      	str	r3, [r2, #12]
 8004650:	e011      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004656:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800465a:	d10c      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
 8004660:	2101      	movs	r1, #1
 8004662:	4618      	mov	r0, r3
 8004664:	f000 f8aa 	bl	80047bc <RCCEx_PLLSAI1_Config>
 8004668:	4603      	mov	r3, r0
 800466a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800466c:	7cfb      	ldrb	r3, [r7, #19]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004672:	7cfb      	ldrb	r3, [r7, #19]
 8004674:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d02a      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004682:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004688:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004690:	4907      	ldr	r1, [pc, #28]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800469c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046a0:	d108      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a2:	4b03      	ldr	r3, [pc, #12]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	4a02      	ldr	r2, [pc, #8]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ac:	60d3      	str	r3, [r2, #12]
 80046ae:	e013      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80046b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	2101      	movs	r1, #1
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 f879 	bl	80047bc <RCCEx_PLLSAI1_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ce:	7cfb      	ldrb	r3, [r7, #19]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d02f      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046e4:	4b2c      	ldr	r3, [pc, #176]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f2:	4929      	ldr	r1, [pc, #164]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004702:	d10d      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3304      	adds	r3, #4
 8004708:	2102      	movs	r1, #2
 800470a:	4618      	mov	r0, r3
 800470c:	f000 f856 	bl	80047bc <RCCEx_PLLSAI1_Config>
 8004710:	4603      	mov	r3, r0
 8004712:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004714:	7cfb      	ldrb	r3, [r7, #19]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d014      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800471a:	7cfb      	ldrb	r3, [r7, #19]
 800471c:	74bb      	strb	r3, [r7, #18]
 800471e:	e011      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004728:	d10c      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3320      	adds	r3, #32
 800472e:	2102      	movs	r1, #2
 8004730:	4618      	mov	r0, r3
 8004732:	f000 f935 	bl	80049a0 <RCCEx_PLLSAI2_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800473a:	7cfb      	ldrb	r3, [r7, #19]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004740:	7cfb      	ldrb	r3, [r7, #19]
 8004742:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00b      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004750:	4b11      	ldr	r3, [pc, #68]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004756:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004760:	490d      	ldr	r1, [pc, #52]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00b      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004774:	4b08      	ldr	r3, [pc, #32]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004784:	4904      	ldr	r1, [pc, #16]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800478c:	7cbb      	ldrb	r3, [r7, #18]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40021000 	.word	0x40021000

0800479c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80047a0:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a04      	ldr	r2, [pc, #16]	; (80047b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047a6:	f043 0304 	orr.w	r3, r3, #4
 80047aa:	6013      	str	r3, [r2, #0]
}
 80047ac:	bf00      	nop
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40021000 	.word	0x40021000

080047bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047ca:	4b74      	ldr	r3, [pc, #464]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d018      	beq.n	8004808 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047d6:	4b71      	ldr	r3, [pc, #452]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0203 	and.w	r2, r3, #3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d10d      	bne.n	8004802 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
       ||
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d009      	beq.n	8004802 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047ee:	4b6b      	ldr	r3, [pc, #428]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	091b      	lsrs	r3, r3, #4
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
       ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d047      	beq.n	8004892 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	73fb      	strb	r3, [r7, #15]
 8004806:	e044      	b.n	8004892 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b03      	cmp	r3, #3
 800480e:	d018      	beq.n	8004842 <RCCEx_PLLSAI1_Config+0x86>
 8004810:	2b03      	cmp	r3, #3
 8004812:	d825      	bhi.n	8004860 <RCCEx_PLLSAI1_Config+0xa4>
 8004814:	2b01      	cmp	r3, #1
 8004816:	d002      	beq.n	800481e <RCCEx_PLLSAI1_Config+0x62>
 8004818:	2b02      	cmp	r3, #2
 800481a:	d009      	beq.n	8004830 <RCCEx_PLLSAI1_Config+0x74>
 800481c:	e020      	b.n	8004860 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800481e:	4b5f      	ldr	r3, [pc, #380]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d11d      	bne.n	8004866 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800482e:	e01a      	b.n	8004866 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004830:	4b5a      	ldr	r3, [pc, #360]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004838:	2b00      	cmp	r3, #0
 800483a:	d116      	bne.n	800486a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004840:	e013      	b.n	800486a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004842:	4b56      	ldr	r3, [pc, #344]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10f      	bne.n	800486e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800484e:	4b53      	ldr	r3, [pc, #332]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d109      	bne.n	800486e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800485e:	e006      	b.n	800486e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
      break;
 8004864:	e004      	b.n	8004870 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004866:	bf00      	nop
 8004868:	e002      	b.n	8004870 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800486a:	bf00      	nop
 800486c:	e000      	b.n	8004870 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800486e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10d      	bne.n	8004892 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004876:	4b49      	ldr	r3, [pc, #292]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6819      	ldr	r1, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	3b01      	subs	r3, #1
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	430b      	orrs	r3, r1
 800488c:	4943      	ldr	r1, [pc, #268]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 800488e:	4313      	orrs	r3, r2
 8004890:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d17c      	bne.n	8004992 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004898:	4b40      	ldr	r3, [pc, #256]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a3f      	ldr	r2, [pc, #252]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 800489e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a4:	f7fc ff82 	bl	80017ac <HAL_GetTick>
 80048a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048aa:	e009      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048ac:	f7fc ff7e 	bl	80017ac <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d902      	bls.n	80048c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	73fb      	strb	r3, [r7, #15]
        break;
 80048be:	e005      	b.n	80048cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048c0:	4b36      	ldr	r3, [pc, #216]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1ef      	bne.n	80048ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d15f      	bne.n	8004992 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d110      	bne.n	80048fa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048d8:	4b30      	ldr	r3, [pc, #192]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80048e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6892      	ldr	r2, [r2, #8]
 80048e8:	0211      	lsls	r1, r2, #8
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	68d2      	ldr	r2, [r2, #12]
 80048ee:	06d2      	lsls	r2, r2, #27
 80048f0:	430a      	orrs	r2, r1
 80048f2:	492a      	ldr	r1, [pc, #168]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	610b      	str	r3, [r1, #16]
 80048f8:	e027      	b.n	800494a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d112      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004900:	4b26      	ldr	r3, [pc, #152]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004908:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6892      	ldr	r2, [r2, #8]
 8004910:	0211      	lsls	r1, r2, #8
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6912      	ldr	r2, [r2, #16]
 8004916:	0852      	lsrs	r2, r2, #1
 8004918:	3a01      	subs	r2, #1
 800491a:	0552      	lsls	r2, r2, #21
 800491c:	430a      	orrs	r2, r1
 800491e:	491f      	ldr	r1, [pc, #124]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004920:	4313      	orrs	r3, r2
 8004922:	610b      	str	r3, [r1, #16]
 8004924:	e011      	b.n	800494a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004926:	4b1d      	ldr	r3, [pc, #116]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800492e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6892      	ldr	r2, [r2, #8]
 8004936:	0211      	lsls	r1, r2, #8
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6952      	ldr	r2, [r2, #20]
 800493c:	0852      	lsrs	r2, r2, #1
 800493e:	3a01      	subs	r2, #1
 8004940:	0652      	lsls	r2, r2, #25
 8004942:	430a      	orrs	r2, r1
 8004944:	4915      	ldr	r1, [pc, #84]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004946:	4313      	orrs	r3, r2
 8004948:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800494a:	4b14      	ldr	r3, [pc, #80]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a13      	ldr	r2, [pc, #76]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004950:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004954:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004956:	f7fc ff29 	bl	80017ac <HAL_GetTick>
 800495a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800495c:	e009      	b.n	8004972 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800495e:	f7fc ff25 	bl	80017ac <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d902      	bls.n	8004972 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	73fb      	strb	r3, [r7, #15]
          break;
 8004970:	e005      	b.n	800497e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004972:	4b0a      	ldr	r3, [pc, #40]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0ef      	beq.n	800495e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d106      	bne.n	8004992 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	4903      	ldr	r1, [pc, #12]	; (800499c <RCCEx_PLLSAI1_Config+0x1e0>)
 800498e:	4313      	orrs	r3, r2
 8004990:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004992:	7bfb      	ldrb	r3, [r7, #15]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40021000 	.word	0x40021000

080049a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049ae:	4b69      	ldr	r3, [pc, #420]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d018      	beq.n	80049ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049ba:	4b66      	ldr	r3, [pc, #408]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f003 0203 	and.w	r2, r3, #3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d10d      	bne.n	80049e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
       ||
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80049d2:	4b60      	ldr	r3, [pc, #384]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
       ||
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d047      	beq.n	8004a76 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	73fb      	strb	r3, [r7, #15]
 80049ea:	e044      	b.n	8004a76 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d018      	beq.n	8004a26 <RCCEx_PLLSAI2_Config+0x86>
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d825      	bhi.n	8004a44 <RCCEx_PLLSAI2_Config+0xa4>
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d002      	beq.n	8004a02 <RCCEx_PLLSAI2_Config+0x62>
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d009      	beq.n	8004a14 <RCCEx_PLLSAI2_Config+0x74>
 8004a00:	e020      	b.n	8004a44 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a02:	4b54      	ldr	r3, [pc, #336]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d11d      	bne.n	8004a4a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a12:	e01a      	b.n	8004a4a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a14:	4b4f      	ldr	r3, [pc, #316]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d116      	bne.n	8004a4e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a24:	e013      	b.n	8004a4e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a26:	4b4b      	ldr	r3, [pc, #300]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10f      	bne.n	8004a52 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a32:	4b48      	ldr	r3, [pc, #288]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a42:	e006      	b.n	8004a52 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
      break;
 8004a48:	e004      	b.n	8004a54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a4a:	bf00      	nop
 8004a4c:	e002      	b.n	8004a54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a4e:	bf00      	nop
 8004a50:	e000      	b.n	8004a54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a52:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10d      	bne.n	8004a76 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a5a:	4b3e      	ldr	r3, [pc, #248]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6819      	ldr	r1, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	430b      	orrs	r3, r1
 8004a70:	4938      	ldr	r1, [pc, #224]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d166      	bne.n	8004b4a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a7c:	4b35      	ldr	r3, [pc, #212]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a34      	ldr	r2, [pc, #208]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a88:	f7fc fe90 	bl	80017ac <HAL_GetTick>
 8004a8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a8e:	e009      	b.n	8004aa4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a90:	f7fc fe8c 	bl	80017ac <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d902      	bls.n	8004aa4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	73fb      	strb	r3, [r7, #15]
        break;
 8004aa2:	e005      	b.n	8004ab0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004aa4:	4b2b      	ldr	r3, [pc, #172]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1ef      	bne.n	8004a90 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d149      	bne.n	8004b4a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d110      	bne.n	8004ade <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004abc:	4b25      	ldr	r3, [pc, #148]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004ac4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6892      	ldr	r2, [r2, #8]
 8004acc:	0211      	lsls	r1, r2, #8
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	68d2      	ldr	r2, [r2, #12]
 8004ad2:	06d2      	lsls	r2, r2, #27
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	491f      	ldr	r1, [pc, #124]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	614b      	str	r3, [r1, #20]
 8004adc:	e011      	b.n	8004b02 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ade:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ae6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6892      	ldr	r2, [r2, #8]
 8004aee:	0211      	lsls	r1, r2, #8
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	6912      	ldr	r2, [r2, #16]
 8004af4:	0852      	lsrs	r2, r2, #1
 8004af6:	3a01      	subs	r2, #1
 8004af8:	0652      	lsls	r2, r2, #25
 8004afa:	430a      	orrs	r2, r1
 8004afc:	4915      	ldr	r1, [pc, #84]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b02:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a13      	ldr	r2, [pc, #76]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b0c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0e:	f7fc fe4d 	bl	80017ac <HAL_GetTick>
 8004b12:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b14:	e009      	b.n	8004b2a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b16:	f7fc fe49 	bl	80017ac <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d902      	bls.n	8004b2a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	73fb      	strb	r3, [r7, #15]
          break;
 8004b28:	e005      	b.n	8004b36 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b2a:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0ef      	beq.n	8004b16 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d106      	bne.n	8004b4a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b3c:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b3e:	695a      	ldr	r2, [r3, #20]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	4903      	ldr	r1, [pc, #12]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40021000 	.word	0x40021000

08004b58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e040      	b.n	8004bec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fc fc40 	bl	8001400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2224      	movs	r2, #36	; 0x24
 8004b84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0201 	bic.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f8c0 	bl	8004d1c <UART_SetConfig>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e022      	b.n	8004bec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fb3e 	bl	8005230 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fbc5 	bl	8005374 <UART_CheckIdleState>
 8004bea:	4603      	mov	r3, r0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	; 0x28
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	f040 8082 	bne.w	8004d12 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <HAL_UART_Transmit+0x26>
 8004c14:	88fb      	ldrh	r3, [r7, #6]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e07a      	b.n	8004d14 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_UART_Transmit+0x38>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e073      	b.n	8004d14 <HAL_UART_Transmit+0x120>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2221      	movs	r2, #33	; 0x21
 8004c40:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c42:	f7fc fdb3 	bl	80017ac <HAL_GetTick>
 8004c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	88fa      	ldrh	r2, [r7, #6]
 8004c4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	88fa      	ldrh	r2, [r7, #6]
 8004c54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c60:	d108      	bne.n	8004c74 <HAL_UART_Transmit+0x80>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d104      	bne.n	8004c74 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	e003      	b.n	8004c7c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c84:	e02d      	b.n	8004ce2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2180      	movs	r1, #128	; 0x80
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fbb8 	bl	8005406 <UART_WaitOnFlagUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e039      	b.n	8004d14 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10b      	bne.n	8004cbe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	881a      	ldrh	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cb2:	b292      	uxth	r2, r2
 8004cb4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	3302      	adds	r3, #2
 8004cba:	61bb      	str	r3, [r7, #24]
 8004cbc:	e008      	b.n	8004cd0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	781a      	ldrb	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	b292      	uxth	r2, r2
 8004cc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1cb      	bne.n	8004c86 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2140      	movs	r1, #64	; 0x40
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 fb84 	bl	8005406 <UART_WaitOnFlagUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e005      	b.n	8004d14 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e000      	b.n	8004d14 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004d12:	2302      	movs	r3, #2
  }
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3720      	adds	r7, #32
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d1c:	b5b0      	push	{r4, r5, r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4bad      	ldr	r3, [pc, #692]	; (8004ffc <UART_SetConfig+0x2e0>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6812      	ldr	r2, [r2, #0]
 8004d4e:	69f9      	ldr	r1, [r7, #28]
 8004d50:	430b      	orrs	r3, r1
 8004d52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4aa2      	ldr	r2, [pc, #648]	; (8005000 <UART_SetConfig+0x2e4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d004      	beq.n	8004d84 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a99      	ldr	r2, [pc, #612]	; (8005004 <UART_SetConfig+0x2e8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d121      	bne.n	8004de6 <UART_SetConfig+0xca>
 8004da2:	4b99      	ldr	r3, [pc, #612]	; (8005008 <UART_SetConfig+0x2ec>)
 8004da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d817      	bhi.n	8004de0 <UART_SetConfig+0xc4>
 8004db0:	a201      	add	r2, pc, #4	; (adr r2, 8004db8 <UART_SetConfig+0x9c>)
 8004db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db6:	bf00      	nop
 8004db8:	08004dc9 	.word	0x08004dc9
 8004dbc:	08004dd5 	.word	0x08004dd5
 8004dc0:	08004dcf 	.word	0x08004dcf
 8004dc4:	08004ddb 	.word	0x08004ddb
 8004dc8:	2301      	movs	r3, #1
 8004dca:	76fb      	strb	r3, [r7, #27]
 8004dcc:	e0e7      	b.n	8004f9e <UART_SetConfig+0x282>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	76fb      	strb	r3, [r7, #27]
 8004dd2:	e0e4      	b.n	8004f9e <UART_SetConfig+0x282>
 8004dd4:	2304      	movs	r3, #4
 8004dd6:	76fb      	strb	r3, [r7, #27]
 8004dd8:	e0e1      	b.n	8004f9e <UART_SetConfig+0x282>
 8004dda:	2308      	movs	r3, #8
 8004ddc:	76fb      	strb	r3, [r7, #27]
 8004dde:	e0de      	b.n	8004f9e <UART_SetConfig+0x282>
 8004de0:	2310      	movs	r3, #16
 8004de2:	76fb      	strb	r3, [r7, #27]
 8004de4:	e0db      	b.n	8004f9e <UART_SetConfig+0x282>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a88      	ldr	r2, [pc, #544]	; (800500c <UART_SetConfig+0x2f0>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d132      	bne.n	8004e56 <UART_SetConfig+0x13a>
 8004df0:	4b85      	ldr	r3, [pc, #532]	; (8005008 <UART_SetConfig+0x2ec>)
 8004df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df6:	f003 030c 	and.w	r3, r3, #12
 8004dfa:	2b0c      	cmp	r3, #12
 8004dfc:	d828      	bhi.n	8004e50 <UART_SetConfig+0x134>
 8004dfe:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <UART_SetConfig+0xe8>)
 8004e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e04:	08004e39 	.word	0x08004e39
 8004e08:	08004e51 	.word	0x08004e51
 8004e0c:	08004e51 	.word	0x08004e51
 8004e10:	08004e51 	.word	0x08004e51
 8004e14:	08004e45 	.word	0x08004e45
 8004e18:	08004e51 	.word	0x08004e51
 8004e1c:	08004e51 	.word	0x08004e51
 8004e20:	08004e51 	.word	0x08004e51
 8004e24:	08004e3f 	.word	0x08004e3f
 8004e28:	08004e51 	.word	0x08004e51
 8004e2c:	08004e51 	.word	0x08004e51
 8004e30:	08004e51 	.word	0x08004e51
 8004e34:	08004e4b 	.word	0x08004e4b
 8004e38:	2300      	movs	r3, #0
 8004e3a:	76fb      	strb	r3, [r7, #27]
 8004e3c:	e0af      	b.n	8004f9e <UART_SetConfig+0x282>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	76fb      	strb	r3, [r7, #27]
 8004e42:	e0ac      	b.n	8004f9e <UART_SetConfig+0x282>
 8004e44:	2304      	movs	r3, #4
 8004e46:	76fb      	strb	r3, [r7, #27]
 8004e48:	e0a9      	b.n	8004f9e <UART_SetConfig+0x282>
 8004e4a:	2308      	movs	r3, #8
 8004e4c:	76fb      	strb	r3, [r7, #27]
 8004e4e:	e0a6      	b.n	8004f9e <UART_SetConfig+0x282>
 8004e50:	2310      	movs	r3, #16
 8004e52:	76fb      	strb	r3, [r7, #27]
 8004e54:	e0a3      	b.n	8004f9e <UART_SetConfig+0x282>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a6d      	ldr	r2, [pc, #436]	; (8005010 <UART_SetConfig+0x2f4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d120      	bne.n	8004ea2 <UART_SetConfig+0x186>
 8004e60:	4b69      	ldr	r3, [pc, #420]	; (8005008 <UART_SetConfig+0x2ec>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e6a:	2b30      	cmp	r3, #48	; 0x30
 8004e6c:	d013      	beq.n	8004e96 <UART_SetConfig+0x17a>
 8004e6e:	2b30      	cmp	r3, #48	; 0x30
 8004e70:	d814      	bhi.n	8004e9c <UART_SetConfig+0x180>
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	d009      	beq.n	8004e8a <UART_SetConfig+0x16e>
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	d810      	bhi.n	8004e9c <UART_SetConfig+0x180>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <UART_SetConfig+0x168>
 8004e7e:	2b10      	cmp	r3, #16
 8004e80:	d006      	beq.n	8004e90 <UART_SetConfig+0x174>
 8004e82:	e00b      	b.n	8004e9c <UART_SetConfig+0x180>
 8004e84:	2300      	movs	r3, #0
 8004e86:	76fb      	strb	r3, [r7, #27]
 8004e88:	e089      	b.n	8004f9e <UART_SetConfig+0x282>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	76fb      	strb	r3, [r7, #27]
 8004e8e:	e086      	b.n	8004f9e <UART_SetConfig+0x282>
 8004e90:	2304      	movs	r3, #4
 8004e92:	76fb      	strb	r3, [r7, #27]
 8004e94:	e083      	b.n	8004f9e <UART_SetConfig+0x282>
 8004e96:	2308      	movs	r3, #8
 8004e98:	76fb      	strb	r3, [r7, #27]
 8004e9a:	e080      	b.n	8004f9e <UART_SetConfig+0x282>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	76fb      	strb	r3, [r7, #27]
 8004ea0:	e07d      	b.n	8004f9e <UART_SetConfig+0x282>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a5b      	ldr	r2, [pc, #364]	; (8005014 <UART_SetConfig+0x2f8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d120      	bne.n	8004eee <UART_SetConfig+0x1d2>
 8004eac:	4b56      	ldr	r3, [pc, #344]	; (8005008 <UART_SetConfig+0x2ec>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004eb6:	2bc0      	cmp	r3, #192	; 0xc0
 8004eb8:	d013      	beq.n	8004ee2 <UART_SetConfig+0x1c6>
 8004eba:	2bc0      	cmp	r3, #192	; 0xc0
 8004ebc:	d814      	bhi.n	8004ee8 <UART_SetConfig+0x1cc>
 8004ebe:	2b80      	cmp	r3, #128	; 0x80
 8004ec0:	d009      	beq.n	8004ed6 <UART_SetConfig+0x1ba>
 8004ec2:	2b80      	cmp	r3, #128	; 0x80
 8004ec4:	d810      	bhi.n	8004ee8 <UART_SetConfig+0x1cc>
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <UART_SetConfig+0x1b4>
 8004eca:	2b40      	cmp	r3, #64	; 0x40
 8004ecc:	d006      	beq.n	8004edc <UART_SetConfig+0x1c0>
 8004ece:	e00b      	b.n	8004ee8 <UART_SetConfig+0x1cc>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	76fb      	strb	r3, [r7, #27]
 8004ed4:	e063      	b.n	8004f9e <UART_SetConfig+0x282>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	76fb      	strb	r3, [r7, #27]
 8004eda:	e060      	b.n	8004f9e <UART_SetConfig+0x282>
 8004edc:	2304      	movs	r3, #4
 8004ede:	76fb      	strb	r3, [r7, #27]
 8004ee0:	e05d      	b.n	8004f9e <UART_SetConfig+0x282>
 8004ee2:	2308      	movs	r3, #8
 8004ee4:	76fb      	strb	r3, [r7, #27]
 8004ee6:	e05a      	b.n	8004f9e <UART_SetConfig+0x282>
 8004ee8:	2310      	movs	r3, #16
 8004eea:	76fb      	strb	r3, [r7, #27]
 8004eec:	e057      	b.n	8004f9e <UART_SetConfig+0x282>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a49      	ldr	r2, [pc, #292]	; (8005018 <UART_SetConfig+0x2fc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d125      	bne.n	8004f44 <UART_SetConfig+0x228>
 8004ef8:	4b43      	ldr	r3, [pc, #268]	; (8005008 <UART_SetConfig+0x2ec>)
 8004efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f06:	d017      	beq.n	8004f38 <UART_SetConfig+0x21c>
 8004f08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f0c:	d817      	bhi.n	8004f3e <UART_SetConfig+0x222>
 8004f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f12:	d00b      	beq.n	8004f2c <UART_SetConfig+0x210>
 8004f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f18:	d811      	bhi.n	8004f3e <UART_SetConfig+0x222>
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <UART_SetConfig+0x20a>
 8004f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f22:	d006      	beq.n	8004f32 <UART_SetConfig+0x216>
 8004f24:	e00b      	b.n	8004f3e <UART_SetConfig+0x222>
 8004f26:	2300      	movs	r3, #0
 8004f28:	76fb      	strb	r3, [r7, #27]
 8004f2a:	e038      	b.n	8004f9e <UART_SetConfig+0x282>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	76fb      	strb	r3, [r7, #27]
 8004f30:	e035      	b.n	8004f9e <UART_SetConfig+0x282>
 8004f32:	2304      	movs	r3, #4
 8004f34:	76fb      	strb	r3, [r7, #27]
 8004f36:	e032      	b.n	8004f9e <UART_SetConfig+0x282>
 8004f38:	2308      	movs	r3, #8
 8004f3a:	76fb      	strb	r3, [r7, #27]
 8004f3c:	e02f      	b.n	8004f9e <UART_SetConfig+0x282>
 8004f3e:	2310      	movs	r3, #16
 8004f40:	76fb      	strb	r3, [r7, #27]
 8004f42:	e02c      	b.n	8004f9e <UART_SetConfig+0x282>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a2d      	ldr	r2, [pc, #180]	; (8005000 <UART_SetConfig+0x2e4>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d125      	bne.n	8004f9a <UART_SetConfig+0x27e>
 8004f4e:	4b2e      	ldr	r3, [pc, #184]	; (8005008 <UART_SetConfig+0x2ec>)
 8004f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f5c:	d017      	beq.n	8004f8e <UART_SetConfig+0x272>
 8004f5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f62:	d817      	bhi.n	8004f94 <UART_SetConfig+0x278>
 8004f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f68:	d00b      	beq.n	8004f82 <UART_SetConfig+0x266>
 8004f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f6e:	d811      	bhi.n	8004f94 <UART_SetConfig+0x278>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <UART_SetConfig+0x260>
 8004f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f78:	d006      	beq.n	8004f88 <UART_SetConfig+0x26c>
 8004f7a:	e00b      	b.n	8004f94 <UART_SetConfig+0x278>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	76fb      	strb	r3, [r7, #27]
 8004f80:	e00d      	b.n	8004f9e <UART_SetConfig+0x282>
 8004f82:	2302      	movs	r3, #2
 8004f84:	76fb      	strb	r3, [r7, #27]
 8004f86:	e00a      	b.n	8004f9e <UART_SetConfig+0x282>
 8004f88:	2304      	movs	r3, #4
 8004f8a:	76fb      	strb	r3, [r7, #27]
 8004f8c:	e007      	b.n	8004f9e <UART_SetConfig+0x282>
 8004f8e:	2308      	movs	r3, #8
 8004f90:	76fb      	strb	r3, [r7, #27]
 8004f92:	e004      	b.n	8004f9e <UART_SetConfig+0x282>
 8004f94:	2310      	movs	r3, #16
 8004f96:	76fb      	strb	r3, [r7, #27]
 8004f98:	e001      	b.n	8004f9e <UART_SetConfig+0x282>
 8004f9a:	2310      	movs	r3, #16
 8004f9c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a17      	ldr	r2, [pc, #92]	; (8005000 <UART_SetConfig+0x2e4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	f040 8087 	bne.w	80050b8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004faa:	7efb      	ldrb	r3, [r7, #27]
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d837      	bhi.n	8005020 <UART_SetConfig+0x304>
 8004fb0:	a201      	add	r2, pc, #4	; (adr r2, 8004fb8 <UART_SetConfig+0x29c>)
 8004fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb6:	bf00      	nop
 8004fb8:	08004fdd 	.word	0x08004fdd
 8004fbc:	08005021 	.word	0x08005021
 8004fc0:	08004fe5 	.word	0x08004fe5
 8004fc4:	08005021 	.word	0x08005021
 8004fc8:	08004feb 	.word	0x08004feb
 8004fcc:	08005021 	.word	0x08005021
 8004fd0:	08005021 	.word	0x08005021
 8004fd4:	08005021 	.word	0x08005021
 8004fd8:	08004ff3 	.word	0x08004ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fdc:	f7ff f856 	bl	800408c <HAL_RCC_GetPCLK1Freq>
 8004fe0:	6178      	str	r0, [r7, #20]
        break;
 8004fe2:	e022      	b.n	800502a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe4:	4b0d      	ldr	r3, [pc, #52]	; (800501c <UART_SetConfig+0x300>)
 8004fe6:	617b      	str	r3, [r7, #20]
        break;
 8004fe8:	e01f      	b.n	800502a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fea:	f7fe ffb7 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 8004fee:	6178      	str	r0, [r7, #20]
        break;
 8004ff0:	e01b      	b.n	800502a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff6:	617b      	str	r3, [r7, #20]
        break;
 8004ff8:	e017      	b.n	800502a <UART_SetConfig+0x30e>
 8004ffa:	bf00      	nop
 8004ffc:	efff69f3 	.word	0xefff69f3
 8005000:	40008000 	.word	0x40008000
 8005004:	40013800 	.word	0x40013800
 8005008:	40021000 	.word	0x40021000
 800500c:	40004400 	.word	0x40004400
 8005010:	40004800 	.word	0x40004800
 8005014:	40004c00 	.word	0x40004c00
 8005018:	40005000 	.word	0x40005000
 800501c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	76bb      	strb	r3, [r7, #26]
        break;
 8005028:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 80f1 	beq.w	8005214 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	4413      	add	r3, r2
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	429a      	cmp	r2, r3
 8005040:	d305      	bcc.n	800504e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	429a      	cmp	r2, r3
 800504c:	d902      	bls.n	8005054 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	76bb      	strb	r3, [r7, #26]
 8005052:	e0df      	b.n	8005214 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	4618      	mov	r0, r3
 8005058:	f04f 0100 	mov.w	r1, #0
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	020b      	lsls	r3, r1, #8
 8005066:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800506a:	0202      	lsls	r2, r0, #8
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	6849      	ldr	r1, [r1, #4]
 8005070:	0849      	lsrs	r1, r1, #1
 8005072:	4608      	mov	r0, r1
 8005074:	f04f 0100 	mov.w	r1, #0
 8005078:	1814      	adds	r4, r2, r0
 800507a:	eb43 0501 	adc.w	r5, r3, r1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	461a      	mov	r2, r3
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	4620      	mov	r0, r4
 800508a:	4629      	mov	r1, r5
 800508c:	f7fb fd26 	bl	8000adc <__aeabi_uldivmod>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4613      	mov	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800509e:	d308      	bcc.n	80050b2 <UART_SetConfig+0x396>
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050a6:	d204      	bcs.n	80050b2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	60da      	str	r2, [r3, #12]
 80050b0:	e0b0      	b.n	8005214 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	76bb      	strb	r3, [r7, #26]
 80050b6:	e0ad      	b.n	8005214 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c0:	d15c      	bne.n	800517c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80050c2:	7efb      	ldrb	r3, [r7, #27]
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d828      	bhi.n	800511a <UART_SetConfig+0x3fe>
 80050c8:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <UART_SetConfig+0x3b4>)
 80050ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ce:	bf00      	nop
 80050d0:	080050f5 	.word	0x080050f5
 80050d4:	080050fd 	.word	0x080050fd
 80050d8:	08005105 	.word	0x08005105
 80050dc:	0800511b 	.word	0x0800511b
 80050e0:	0800510b 	.word	0x0800510b
 80050e4:	0800511b 	.word	0x0800511b
 80050e8:	0800511b 	.word	0x0800511b
 80050ec:	0800511b 	.word	0x0800511b
 80050f0:	08005113 	.word	0x08005113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050f4:	f7fe ffca 	bl	800408c <HAL_RCC_GetPCLK1Freq>
 80050f8:	6178      	str	r0, [r7, #20]
        break;
 80050fa:	e013      	b.n	8005124 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050fc:	f7fe ffdc 	bl	80040b8 <HAL_RCC_GetPCLK2Freq>
 8005100:	6178      	str	r0, [r7, #20]
        break;
 8005102:	e00f      	b.n	8005124 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005104:	4b49      	ldr	r3, [pc, #292]	; (800522c <UART_SetConfig+0x510>)
 8005106:	617b      	str	r3, [r7, #20]
        break;
 8005108:	e00c      	b.n	8005124 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800510a:	f7fe ff27 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 800510e:	6178      	str	r0, [r7, #20]
        break;
 8005110:	e008      	b.n	8005124 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005116:	617b      	str	r3, [r7, #20]
        break;
 8005118:	e004      	b.n	8005124 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	76bb      	strb	r3, [r7, #26]
        break;
 8005122:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d074      	beq.n	8005214 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	005a      	lsls	r2, r3, #1
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	085b      	lsrs	r3, r3, #1
 8005134:	441a      	add	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	fbb2 f3f3 	udiv	r3, r2, r3
 800513e:	b29b      	uxth	r3, r3
 8005140:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2b0f      	cmp	r3, #15
 8005146:	d916      	bls.n	8005176 <UART_SetConfig+0x45a>
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514e:	d212      	bcs.n	8005176 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	b29b      	uxth	r3, r3
 8005154:	f023 030f 	bic.w	r3, r3, #15
 8005158:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	b29b      	uxth	r3, r3
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	b29a      	uxth	r2, r3
 8005166:	89fb      	ldrh	r3, [r7, #14]
 8005168:	4313      	orrs	r3, r2
 800516a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	89fa      	ldrh	r2, [r7, #14]
 8005172:	60da      	str	r2, [r3, #12]
 8005174:	e04e      	b.n	8005214 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	76bb      	strb	r3, [r7, #26]
 800517a:	e04b      	b.n	8005214 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800517c:	7efb      	ldrb	r3, [r7, #27]
 800517e:	2b08      	cmp	r3, #8
 8005180:	d827      	bhi.n	80051d2 <UART_SetConfig+0x4b6>
 8005182:	a201      	add	r2, pc, #4	; (adr r2, 8005188 <UART_SetConfig+0x46c>)
 8005184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005188:	080051ad 	.word	0x080051ad
 800518c:	080051b5 	.word	0x080051b5
 8005190:	080051bd 	.word	0x080051bd
 8005194:	080051d3 	.word	0x080051d3
 8005198:	080051c3 	.word	0x080051c3
 800519c:	080051d3 	.word	0x080051d3
 80051a0:	080051d3 	.word	0x080051d3
 80051a4:	080051d3 	.word	0x080051d3
 80051a8:	080051cb 	.word	0x080051cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051ac:	f7fe ff6e 	bl	800408c <HAL_RCC_GetPCLK1Freq>
 80051b0:	6178      	str	r0, [r7, #20]
        break;
 80051b2:	e013      	b.n	80051dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051b4:	f7fe ff80 	bl	80040b8 <HAL_RCC_GetPCLK2Freq>
 80051b8:	6178      	str	r0, [r7, #20]
        break;
 80051ba:	e00f      	b.n	80051dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051bc:	4b1b      	ldr	r3, [pc, #108]	; (800522c <UART_SetConfig+0x510>)
 80051be:	617b      	str	r3, [r7, #20]
        break;
 80051c0:	e00c      	b.n	80051dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051c2:	f7fe fecb 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 80051c6:	6178      	str	r0, [r7, #20]
        break;
 80051c8:	e008      	b.n	80051dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ce:	617b      	str	r3, [r7, #20]
        break;
 80051d0:	e004      	b.n	80051dc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	76bb      	strb	r3, [r7, #26]
        break;
 80051da:	bf00      	nop
    }

    if (pclk != 0U)
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d018      	beq.n	8005214 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	085a      	lsrs	r2, r3, #1
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	441a      	add	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2b0f      	cmp	r3, #15
 80051fc:	d908      	bls.n	8005210 <UART_SetConfig+0x4f4>
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005204:	d204      	bcs.n	8005210 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	60da      	str	r2, [r3, #12]
 800520e:	e001      	b.n	8005214 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005220:	7ebb      	ldrb	r3, [r7, #26]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3720      	adds	r7, #32
 8005226:	46bd      	mov	sp, r7
 8005228:	bdb0      	pop	{r4, r5, r7, pc}
 800522a:	bf00      	nop
 800522c:	00f42400 	.word	0x00f42400

08005230 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01a      	beq.n	8005346 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800532e:	d10a      	bne.n	8005346 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	605a      	str	r2, [r3, #4]
  }
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af02      	add	r7, sp, #8
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005384:	f7fc fa12 	bl	80017ac <HAL_GetTick>
 8005388:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b08      	cmp	r3, #8
 8005396:	d10e      	bne.n	80053b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005398:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f82d 	bl	8005406 <UART_WaitOnFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e023      	b.n	80053fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d10e      	bne.n	80053e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f817 	bl	8005406 <UART_WaitOnFlagUntilTimeout>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e00d      	b.n	80053fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b084      	sub	sp, #16
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	603b      	str	r3, [r7, #0]
 8005412:	4613      	mov	r3, r2
 8005414:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005416:	e05e      	b.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541e:	d05a      	beq.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005420:	f7fc f9c4 	bl	80017ac <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	429a      	cmp	r2, r3
 800542e:	d302      	bcc.n	8005436 <UART_WaitOnFlagUntilTimeout+0x30>
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d11b      	bne.n	800546e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005444:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0201 	bic.w	r2, r2, #1
 8005454:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2220      	movs	r2, #32
 800545a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e043      	b.n	80054f6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	d02c      	beq.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800548a:	d124      	bne.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005494:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054a4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0201 	bic.w	r2, r2, #1
 80054b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2220      	movs	r2, #32
 80054ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2220      	movs	r2, #32
 80054c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e00f      	b.n	80054f6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4013      	ands	r3, r2
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	bf0c      	ite	eq
 80054e6:	2301      	moveq	r3, #1
 80054e8:	2300      	movne	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	461a      	mov	r2, r3
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d091      	beq.n	8005418 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054fe:	b084      	sub	sp, #16
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	f107 001c 	add.w	r0, r7, #28
 800550c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fa23 	bl	8005968 <USB_CoreReset>
 8005522:	4603      	mov	r3, r0
 8005524:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005528:	2b00      	cmp	r3, #0
 800552a:	d106      	bne.n	800553a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	639a      	str	r2, [r3, #56]	; 0x38
 8005538:	e005      	b.n	8005546 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005546:	7bfb      	ldrb	r3, [r7, #15]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005552:	b004      	add	sp, #16
 8005554:	4770      	bx	lr

08005556 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f023 0201 	bic.w	r2, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d106      	bne.n	80055a4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60da      	str	r2, [r3, #12]
 80055a2:	e00b      	b.n	80055bc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60da      	str	r2, [r3, #12]
 80055b6:	e001      	b.n	80055bc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e003      	b.n	80055c4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80055bc:	2032      	movs	r0, #50	; 0x32
 80055be:	f7fc f901 	bl	80017c4 <HAL_Delay>

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055cc:	b084      	sub	sp, #16
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b086      	sub	sp, #24
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80055da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055e6:	2300      	movs	r3, #0
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	e009      	b.n	8005600 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	3340      	adds	r3, #64	; 0x40
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	2200      	movs	r2, #0
 80055f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	3301      	adds	r3, #1
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	2b0e      	cmp	r3, #14
 8005604:	d9f2      	bls.n	80055ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005608:	2b00      	cmp	r3, #0
 800560a:	d11c      	bne.n	8005646 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800561a:	f043 0302 	orr.w	r3, r3, #2
 800561e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	e005      	b.n	8005652 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005658:	461a      	mov	r2, r3
 800565a:	2300      	movs	r3, #0
 800565c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005664:	4619      	mov	r1, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566c:	461a      	mov	r2, r3
 800566e:	680b      	ldr	r3, [r1, #0]
 8005670:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005672:	2103      	movs	r1, #3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f93d 	bl	80058f4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800567a:	2110      	movs	r1, #16
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f8f1 	bl	8005864 <USB_FlushTxFifo>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f90f 	bl	80058b0 <USB_FlushRxFifo>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a2:	461a      	mov	r2, r3
 80056a4:	2300      	movs	r3, #0
 80056a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ae:	461a      	mov	r2, r3
 80056b0:	2300      	movs	r3, #0
 80056b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ba:	461a      	mov	r2, r3
 80056bc:	2300      	movs	r3, #0
 80056be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056c0:	2300      	movs	r3, #0
 80056c2:	613b      	str	r3, [r7, #16]
 80056c4:	e043      	b.n	800574e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056dc:	d118      	bne.n	8005710 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f0:	461a      	mov	r2, r3
 80056f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	e013      	b.n	8005722 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005706:	461a      	mov	r2, r3
 8005708:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	e008      	b.n	8005722 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571c:	461a      	mov	r2, r3
 800571e:	2300      	movs	r3, #0
 8005720:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572e:	461a      	mov	r2, r3
 8005730:	2300      	movs	r3, #0
 8005732:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005740:	461a      	mov	r2, r3
 8005742:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005746:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	3301      	adds	r3, #1
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	429a      	cmp	r2, r3
 8005754:	d3b7      	bcc.n	80056c6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005756:	2300      	movs	r3, #0
 8005758:	613b      	str	r3, [r7, #16]
 800575a:	e043      	b.n	80057e4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800576e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005772:	d118      	bne.n	80057a6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10a      	bne.n	8005790 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005786:	461a      	mov	r2, r3
 8005788:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	e013      	b.n	80057b8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579c:	461a      	mov	r2, r3
 800579e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	e008      	b.n	80057b8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b2:	461a      	mov	r2, r3
 80057b4:	2300      	movs	r3, #0
 80057b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c4:	461a      	mov	r2, r3
 80057c6:	2300      	movs	r3, #0
 80057c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d6:	461a      	mov	r2, r3
 80057d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	3301      	adds	r3, #1
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d3b7      	bcc.n	800575c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800580c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	f043 0210 	orr.w	r2, r3, #16
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	4b10      	ldr	r3, [pc, #64]	; (8005860 <USB_DevInit+0x294>)
 8005820:	4313      	orrs	r3, r2
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005828:	2b00      	cmp	r3, #0
 800582a:	d005      	beq.n	8005838 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	f043 0208 	orr.w	r2, r3, #8
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800583a:	2b01      	cmp	r3, #1
 800583c:	d107      	bne.n	800584e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005846:	f043 0304 	orr.w	r3, r3, #4
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800584e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800585a:	b004      	add	sp, #16
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	803c3800 	.word	0x803c3800

08005864 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	019b      	lsls	r3, r3, #6
 8005876:	f043 0220 	orr.w	r2, r3, #32
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3301      	adds	r3, #1
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4a09      	ldr	r2, [pc, #36]	; (80058ac <USB_FlushTxFifo+0x48>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d901      	bls.n	8005890 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e006      	b.n	800589e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f003 0320 	and.w	r3, r3, #32
 8005898:	2b20      	cmp	r3, #32
 800589a:	d0f0      	beq.n	800587e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	00030d40 	.word	0x00030d40

080058b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2210      	movs	r2, #16
 80058c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3301      	adds	r3, #1
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4a09      	ldr	r2, [pc, #36]	; (80058f0 <USB_FlushRxFifo+0x40>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d901      	bls.n	80058d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e006      	b.n	80058e2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	f003 0310 	and.w	r3, r3, #16
 80058dc:	2b10      	cmp	r3, #16
 80058de:	d0f0      	beq.n	80058c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	00030d40 	.word	0x00030d40

080058f4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	460b      	mov	r3, r1
 80058fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	68f9      	ldr	r1, [r7, #12]
 8005910:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005914:	4313      	orrs	r3, r2
 8005916:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005926:	b480      	push	{r7}
 8005928:	b085      	sub	sp, #20
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005940:	f023 0303 	bic.w	r3, r3, #3
 8005944:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005954:	f043 0302 	orr.w	r3, r3, #2
 8005958:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3301      	adds	r3, #1
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4a13      	ldr	r2, [pc, #76]	; (80059cc <USB_CoreReset+0x64>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d901      	bls.n	8005986 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e01b      	b.n	80059be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	daf2      	bge.n	8005974 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f043 0201 	orr.w	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3301      	adds	r3, #1
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4a09      	ldr	r2, [pc, #36]	; (80059cc <USB_CoreReset+0x64>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d901      	bls.n	80059b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e006      	b.n	80059be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d0f0      	beq.n	800599e <USB_CoreReset+0x36>

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	00030d40 	.word	0x00030d40

080059d0 <__errno>:
 80059d0:	4b01      	ldr	r3, [pc, #4]	; (80059d8 <__errno+0x8>)
 80059d2:	6818      	ldr	r0, [r3, #0]
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	2000000c 	.word	0x2000000c

080059dc <__libc_init_array>:
 80059dc:	b570      	push	{r4, r5, r6, lr}
 80059de:	4d0d      	ldr	r5, [pc, #52]	; (8005a14 <__libc_init_array+0x38>)
 80059e0:	4c0d      	ldr	r4, [pc, #52]	; (8005a18 <__libc_init_array+0x3c>)
 80059e2:	1b64      	subs	r4, r4, r5
 80059e4:	10a4      	asrs	r4, r4, #2
 80059e6:	2600      	movs	r6, #0
 80059e8:	42a6      	cmp	r6, r4
 80059ea:	d109      	bne.n	8005a00 <__libc_init_array+0x24>
 80059ec:	4d0b      	ldr	r5, [pc, #44]	; (8005a1c <__libc_init_array+0x40>)
 80059ee:	4c0c      	ldr	r4, [pc, #48]	; (8005a20 <__libc_init_array+0x44>)
 80059f0:	f000 fc4e 	bl	8006290 <_init>
 80059f4:	1b64      	subs	r4, r4, r5
 80059f6:	10a4      	asrs	r4, r4, #2
 80059f8:	2600      	movs	r6, #0
 80059fa:	42a6      	cmp	r6, r4
 80059fc:	d105      	bne.n	8005a0a <__libc_init_array+0x2e>
 80059fe:	bd70      	pop	{r4, r5, r6, pc}
 8005a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a04:	4798      	blx	r3
 8005a06:	3601      	adds	r6, #1
 8005a08:	e7ee      	b.n	80059e8 <__libc_init_array+0xc>
 8005a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a0e:	4798      	blx	r3
 8005a10:	3601      	adds	r6, #1
 8005a12:	e7f2      	b.n	80059fa <__libc_init_array+0x1e>
 8005a14:	08006354 	.word	0x08006354
 8005a18:	08006354 	.word	0x08006354
 8005a1c:	08006354 	.word	0x08006354
 8005a20:	08006358 	.word	0x08006358

08005a24 <memset>:
 8005a24:	4402      	add	r2, r0
 8005a26:	4603      	mov	r3, r0
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d100      	bne.n	8005a2e <memset+0xa>
 8005a2c:	4770      	bx	lr
 8005a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a32:	e7f9      	b.n	8005a28 <memset+0x4>

08005a34 <siprintf>:
 8005a34:	b40e      	push	{r1, r2, r3}
 8005a36:	b500      	push	{lr}
 8005a38:	b09c      	sub	sp, #112	; 0x70
 8005a3a:	ab1d      	add	r3, sp, #116	; 0x74
 8005a3c:	9002      	str	r0, [sp, #8]
 8005a3e:	9006      	str	r0, [sp, #24]
 8005a40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a44:	4809      	ldr	r0, [pc, #36]	; (8005a6c <siprintf+0x38>)
 8005a46:	9107      	str	r1, [sp, #28]
 8005a48:	9104      	str	r1, [sp, #16]
 8005a4a:	4909      	ldr	r1, [pc, #36]	; (8005a70 <siprintf+0x3c>)
 8005a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a50:	9105      	str	r1, [sp, #20]
 8005a52:	6800      	ldr	r0, [r0, #0]
 8005a54:	9301      	str	r3, [sp, #4]
 8005a56:	a902      	add	r1, sp, #8
 8005a58:	f000 f868 	bl	8005b2c <_svfiprintf_r>
 8005a5c:	9b02      	ldr	r3, [sp, #8]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	701a      	strb	r2, [r3, #0]
 8005a62:	b01c      	add	sp, #112	; 0x70
 8005a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a68:	b003      	add	sp, #12
 8005a6a:	4770      	bx	lr
 8005a6c:	2000000c 	.word	0x2000000c
 8005a70:	ffff0208 	.word	0xffff0208

08005a74 <__ssputs_r>:
 8005a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a78:	688e      	ldr	r6, [r1, #8]
 8005a7a:	429e      	cmp	r6, r3
 8005a7c:	4682      	mov	sl, r0
 8005a7e:	460c      	mov	r4, r1
 8005a80:	4690      	mov	r8, r2
 8005a82:	461f      	mov	r7, r3
 8005a84:	d838      	bhi.n	8005af8 <__ssputs_r+0x84>
 8005a86:	898a      	ldrh	r2, [r1, #12]
 8005a88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a8c:	d032      	beq.n	8005af4 <__ssputs_r+0x80>
 8005a8e:	6825      	ldr	r5, [r4, #0]
 8005a90:	6909      	ldr	r1, [r1, #16]
 8005a92:	eba5 0901 	sub.w	r9, r5, r1
 8005a96:	6965      	ldr	r5, [r4, #20]
 8005a98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	444b      	add	r3, r9
 8005aa4:	106d      	asrs	r5, r5, #1
 8005aa6:	429d      	cmp	r5, r3
 8005aa8:	bf38      	it	cc
 8005aaa:	461d      	movcc	r5, r3
 8005aac:	0553      	lsls	r3, r2, #21
 8005aae:	d531      	bpl.n	8005b14 <__ssputs_r+0xa0>
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	f000 fb47 	bl	8006144 <_malloc_r>
 8005ab6:	4606      	mov	r6, r0
 8005ab8:	b950      	cbnz	r0, 8005ad0 <__ssputs_r+0x5c>
 8005aba:	230c      	movs	r3, #12
 8005abc:	f8ca 3000 	str.w	r3, [sl]
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ac6:	81a3      	strh	r3, [r4, #12]
 8005ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8005acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad0:	6921      	ldr	r1, [r4, #16]
 8005ad2:	464a      	mov	r2, r9
 8005ad4:	f000 fabe 	bl	8006054 <memcpy>
 8005ad8:	89a3      	ldrh	r3, [r4, #12]
 8005ada:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae2:	81a3      	strh	r3, [r4, #12]
 8005ae4:	6126      	str	r6, [r4, #16]
 8005ae6:	6165      	str	r5, [r4, #20]
 8005ae8:	444e      	add	r6, r9
 8005aea:	eba5 0509 	sub.w	r5, r5, r9
 8005aee:	6026      	str	r6, [r4, #0]
 8005af0:	60a5      	str	r5, [r4, #8]
 8005af2:	463e      	mov	r6, r7
 8005af4:	42be      	cmp	r6, r7
 8005af6:	d900      	bls.n	8005afa <__ssputs_r+0x86>
 8005af8:	463e      	mov	r6, r7
 8005afa:	4632      	mov	r2, r6
 8005afc:	6820      	ldr	r0, [r4, #0]
 8005afe:	4641      	mov	r1, r8
 8005b00:	f000 fab6 	bl	8006070 <memmove>
 8005b04:	68a3      	ldr	r3, [r4, #8]
 8005b06:	6822      	ldr	r2, [r4, #0]
 8005b08:	1b9b      	subs	r3, r3, r6
 8005b0a:	4432      	add	r2, r6
 8005b0c:	60a3      	str	r3, [r4, #8]
 8005b0e:	6022      	str	r2, [r4, #0]
 8005b10:	2000      	movs	r0, #0
 8005b12:	e7db      	b.n	8005acc <__ssputs_r+0x58>
 8005b14:	462a      	mov	r2, r5
 8005b16:	f000 fb6f 	bl	80061f8 <_realloc_r>
 8005b1a:	4606      	mov	r6, r0
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	d1e1      	bne.n	8005ae4 <__ssputs_r+0x70>
 8005b20:	6921      	ldr	r1, [r4, #16]
 8005b22:	4650      	mov	r0, sl
 8005b24:	f000 fabe 	bl	80060a4 <_free_r>
 8005b28:	e7c7      	b.n	8005aba <__ssputs_r+0x46>
	...

08005b2c <_svfiprintf_r>:
 8005b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	4698      	mov	r8, r3
 8005b32:	898b      	ldrh	r3, [r1, #12]
 8005b34:	061b      	lsls	r3, r3, #24
 8005b36:	b09d      	sub	sp, #116	; 0x74
 8005b38:	4607      	mov	r7, r0
 8005b3a:	460d      	mov	r5, r1
 8005b3c:	4614      	mov	r4, r2
 8005b3e:	d50e      	bpl.n	8005b5e <_svfiprintf_r+0x32>
 8005b40:	690b      	ldr	r3, [r1, #16]
 8005b42:	b963      	cbnz	r3, 8005b5e <_svfiprintf_r+0x32>
 8005b44:	2140      	movs	r1, #64	; 0x40
 8005b46:	f000 fafd 	bl	8006144 <_malloc_r>
 8005b4a:	6028      	str	r0, [r5, #0]
 8005b4c:	6128      	str	r0, [r5, #16]
 8005b4e:	b920      	cbnz	r0, 8005b5a <_svfiprintf_r+0x2e>
 8005b50:	230c      	movs	r3, #12
 8005b52:	603b      	str	r3, [r7, #0]
 8005b54:	f04f 30ff 	mov.w	r0, #4294967295
 8005b58:	e0d1      	b.n	8005cfe <_svfiprintf_r+0x1d2>
 8005b5a:	2340      	movs	r3, #64	; 0x40
 8005b5c:	616b      	str	r3, [r5, #20]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	9309      	str	r3, [sp, #36]	; 0x24
 8005b62:	2320      	movs	r3, #32
 8005b64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b68:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b6c:	2330      	movs	r3, #48	; 0x30
 8005b6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d18 <_svfiprintf_r+0x1ec>
 8005b72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b76:	f04f 0901 	mov.w	r9, #1
 8005b7a:	4623      	mov	r3, r4
 8005b7c:	469a      	mov	sl, r3
 8005b7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b82:	b10a      	cbz	r2, 8005b88 <_svfiprintf_r+0x5c>
 8005b84:	2a25      	cmp	r2, #37	; 0x25
 8005b86:	d1f9      	bne.n	8005b7c <_svfiprintf_r+0x50>
 8005b88:	ebba 0b04 	subs.w	fp, sl, r4
 8005b8c:	d00b      	beq.n	8005ba6 <_svfiprintf_r+0x7a>
 8005b8e:	465b      	mov	r3, fp
 8005b90:	4622      	mov	r2, r4
 8005b92:	4629      	mov	r1, r5
 8005b94:	4638      	mov	r0, r7
 8005b96:	f7ff ff6d 	bl	8005a74 <__ssputs_r>
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	f000 80aa 	beq.w	8005cf4 <_svfiprintf_r+0x1c8>
 8005ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ba2:	445a      	add	r2, fp
 8005ba4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 80a2 	beq.w	8005cf4 <_svfiprintf_r+0x1c8>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bba:	f10a 0a01 	add.w	sl, sl, #1
 8005bbe:	9304      	str	r3, [sp, #16]
 8005bc0:	9307      	str	r3, [sp, #28]
 8005bc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bc6:	931a      	str	r3, [sp, #104]	; 0x68
 8005bc8:	4654      	mov	r4, sl
 8005bca:	2205      	movs	r2, #5
 8005bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd0:	4851      	ldr	r0, [pc, #324]	; (8005d18 <_svfiprintf_r+0x1ec>)
 8005bd2:	f7fa fb15 	bl	8000200 <memchr>
 8005bd6:	9a04      	ldr	r2, [sp, #16]
 8005bd8:	b9d8      	cbnz	r0, 8005c12 <_svfiprintf_r+0xe6>
 8005bda:	06d0      	lsls	r0, r2, #27
 8005bdc:	bf44      	itt	mi
 8005bde:	2320      	movmi	r3, #32
 8005be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005be4:	0711      	lsls	r1, r2, #28
 8005be6:	bf44      	itt	mi
 8005be8:	232b      	movmi	r3, #43	; 0x2b
 8005bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bee:	f89a 3000 	ldrb.w	r3, [sl]
 8005bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8005bf4:	d015      	beq.n	8005c22 <_svfiprintf_r+0xf6>
 8005bf6:	9a07      	ldr	r2, [sp, #28]
 8005bf8:	4654      	mov	r4, sl
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	f04f 0c0a 	mov.w	ip, #10
 8005c00:	4621      	mov	r1, r4
 8005c02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c06:	3b30      	subs	r3, #48	; 0x30
 8005c08:	2b09      	cmp	r3, #9
 8005c0a:	d94e      	bls.n	8005caa <_svfiprintf_r+0x17e>
 8005c0c:	b1b0      	cbz	r0, 8005c3c <_svfiprintf_r+0x110>
 8005c0e:	9207      	str	r2, [sp, #28]
 8005c10:	e014      	b.n	8005c3c <_svfiprintf_r+0x110>
 8005c12:	eba0 0308 	sub.w	r3, r0, r8
 8005c16:	fa09 f303 	lsl.w	r3, r9, r3
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	9304      	str	r3, [sp, #16]
 8005c1e:	46a2      	mov	sl, r4
 8005c20:	e7d2      	b.n	8005bc8 <_svfiprintf_r+0x9c>
 8005c22:	9b03      	ldr	r3, [sp, #12]
 8005c24:	1d19      	adds	r1, r3, #4
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	9103      	str	r1, [sp, #12]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	bfbb      	ittet	lt
 8005c2e:	425b      	neglt	r3, r3
 8005c30:	f042 0202 	orrlt.w	r2, r2, #2
 8005c34:	9307      	strge	r3, [sp, #28]
 8005c36:	9307      	strlt	r3, [sp, #28]
 8005c38:	bfb8      	it	lt
 8005c3a:	9204      	strlt	r2, [sp, #16]
 8005c3c:	7823      	ldrb	r3, [r4, #0]
 8005c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8005c40:	d10c      	bne.n	8005c5c <_svfiprintf_r+0x130>
 8005c42:	7863      	ldrb	r3, [r4, #1]
 8005c44:	2b2a      	cmp	r3, #42	; 0x2a
 8005c46:	d135      	bne.n	8005cb4 <_svfiprintf_r+0x188>
 8005c48:	9b03      	ldr	r3, [sp, #12]
 8005c4a:	1d1a      	adds	r2, r3, #4
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	9203      	str	r2, [sp, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	bfb8      	it	lt
 8005c54:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c58:	3402      	adds	r4, #2
 8005c5a:	9305      	str	r3, [sp, #20]
 8005c5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d28 <_svfiprintf_r+0x1fc>
 8005c60:	7821      	ldrb	r1, [r4, #0]
 8005c62:	2203      	movs	r2, #3
 8005c64:	4650      	mov	r0, sl
 8005c66:	f7fa facb 	bl	8000200 <memchr>
 8005c6a:	b140      	cbz	r0, 8005c7e <_svfiprintf_r+0x152>
 8005c6c:	2340      	movs	r3, #64	; 0x40
 8005c6e:	eba0 000a 	sub.w	r0, r0, sl
 8005c72:	fa03 f000 	lsl.w	r0, r3, r0
 8005c76:	9b04      	ldr	r3, [sp, #16]
 8005c78:	4303      	orrs	r3, r0
 8005c7a:	3401      	adds	r4, #1
 8005c7c:	9304      	str	r3, [sp, #16]
 8005c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c82:	4826      	ldr	r0, [pc, #152]	; (8005d1c <_svfiprintf_r+0x1f0>)
 8005c84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c88:	2206      	movs	r2, #6
 8005c8a:	f7fa fab9 	bl	8000200 <memchr>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d038      	beq.n	8005d04 <_svfiprintf_r+0x1d8>
 8005c92:	4b23      	ldr	r3, [pc, #140]	; (8005d20 <_svfiprintf_r+0x1f4>)
 8005c94:	bb1b      	cbnz	r3, 8005cde <_svfiprintf_r+0x1b2>
 8005c96:	9b03      	ldr	r3, [sp, #12]
 8005c98:	3307      	adds	r3, #7
 8005c9a:	f023 0307 	bic.w	r3, r3, #7
 8005c9e:	3308      	adds	r3, #8
 8005ca0:	9303      	str	r3, [sp, #12]
 8005ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca4:	4433      	add	r3, r6
 8005ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca8:	e767      	b.n	8005b7a <_svfiprintf_r+0x4e>
 8005caa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cae:	460c      	mov	r4, r1
 8005cb0:	2001      	movs	r0, #1
 8005cb2:	e7a5      	b.n	8005c00 <_svfiprintf_r+0xd4>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	3401      	adds	r4, #1
 8005cb8:	9305      	str	r3, [sp, #20]
 8005cba:	4619      	mov	r1, r3
 8005cbc:	f04f 0c0a 	mov.w	ip, #10
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cc6:	3a30      	subs	r2, #48	; 0x30
 8005cc8:	2a09      	cmp	r2, #9
 8005cca:	d903      	bls.n	8005cd4 <_svfiprintf_r+0x1a8>
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d0c5      	beq.n	8005c5c <_svfiprintf_r+0x130>
 8005cd0:	9105      	str	r1, [sp, #20]
 8005cd2:	e7c3      	b.n	8005c5c <_svfiprintf_r+0x130>
 8005cd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cd8:	4604      	mov	r4, r0
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e7f0      	b.n	8005cc0 <_svfiprintf_r+0x194>
 8005cde:	ab03      	add	r3, sp, #12
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	462a      	mov	r2, r5
 8005ce4:	4b0f      	ldr	r3, [pc, #60]	; (8005d24 <_svfiprintf_r+0x1f8>)
 8005ce6:	a904      	add	r1, sp, #16
 8005ce8:	4638      	mov	r0, r7
 8005cea:	f3af 8000 	nop.w
 8005cee:	1c42      	adds	r2, r0, #1
 8005cf0:	4606      	mov	r6, r0
 8005cf2:	d1d6      	bne.n	8005ca2 <_svfiprintf_r+0x176>
 8005cf4:	89ab      	ldrh	r3, [r5, #12]
 8005cf6:	065b      	lsls	r3, r3, #25
 8005cf8:	f53f af2c 	bmi.w	8005b54 <_svfiprintf_r+0x28>
 8005cfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cfe:	b01d      	add	sp, #116	; 0x74
 8005d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d04:	ab03      	add	r3, sp, #12
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	462a      	mov	r2, r5
 8005d0a:	4b06      	ldr	r3, [pc, #24]	; (8005d24 <_svfiprintf_r+0x1f8>)
 8005d0c:	a904      	add	r1, sp, #16
 8005d0e:	4638      	mov	r0, r7
 8005d10:	f000 f87a 	bl	8005e08 <_printf_i>
 8005d14:	e7eb      	b.n	8005cee <_svfiprintf_r+0x1c2>
 8005d16:	bf00      	nop
 8005d18:	08006318 	.word	0x08006318
 8005d1c:	08006322 	.word	0x08006322
 8005d20:	00000000 	.word	0x00000000
 8005d24:	08005a75 	.word	0x08005a75
 8005d28:	0800631e 	.word	0x0800631e

08005d2c <_printf_common>:
 8005d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d30:	4616      	mov	r6, r2
 8005d32:	4699      	mov	r9, r3
 8005d34:	688a      	ldr	r2, [r1, #8]
 8005d36:	690b      	ldr	r3, [r1, #16]
 8005d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	bfb8      	it	lt
 8005d40:	4613      	movlt	r3, r2
 8005d42:	6033      	str	r3, [r6, #0]
 8005d44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d48:	4607      	mov	r7, r0
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	b10a      	cbz	r2, 8005d52 <_printf_common+0x26>
 8005d4e:	3301      	adds	r3, #1
 8005d50:	6033      	str	r3, [r6, #0]
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	0699      	lsls	r1, r3, #26
 8005d56:	bf42      	ittt	mi
 8005d58:	6833      	ldrmi	r3, [r6, #0]
 8005d5a:	3302      	addmi	r3, #2
 8005d5c:	6033      	strmi	r3, [r6, #0]
 8005d5e:	6825      	ldr	r5, [r4, #0]
 8005d60:	f015 0506 	ands.w	r5, r5, #6
 8005d64:	d106      	bne.n	8005d74 <_printf_common+0x48>
 8005d66:	f104 0a19 	add.w	sl, r4, #25
 8005d6a:	68e3      	ldr	r3, [r4, #12]
 8005d6c:	6832      	ldr	r2, [r6, #0]
 8005d6e:	1a9b      	subs	r3, r3, r2
 8005d70:	42ab      	cmp	r3, r5
 8005d72:	dc26      	bgt.n	8005dc2 <_printf_common+0x96>
 8005d74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d78:	1e13      	subs	r3, r2, #0
 8005d7a:	6822      	ldr	r2, [r4, #0]
 8005d7c:	bf18      	it	ne
 8005d7e:	2301      	movne	r3, #1
 8005d80:	0692      	lsls	r2, r2, #26
 8005d82:	d42b      	bmi.n	8005ddc <_printf_common+0xb0>
 8005d84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d88:	4649      	mov	r1, r9
 8005d8a:	4638      	mov	r0, r7
 8005d8c:	47c0      	blx	r8
 8005d8e:	3001      	adds	r0, #1
 8005d90:	d01e      	beq.n	8005dd0 <_printf_common+0xa4>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	68e5      	ldr	r5, [r4, #12]
 8005d96:	6832      	ldr	r2, [r6, #0]
 8005d98:	f003 0306 	and.w	r3, r3, #6
 8005d9c:	2b04      	cmp	r3, #4
 8005d9e:	bf08      	it	eq
 8005da0:	1aad      	subeq	r5, r5, r2
 8005da2:	68a3      	ldr	r3, [r4, #8]
 8005da4:	6922      	ldr	r2, [r4, #16]
 8005da6:	bf0c      	ite	eq
 8005da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dac:	2500      	movne	r5, #0
 8005dae:	4293      	cmp	r3, r2
 8005db0:	bfc4      	itt	gt
 8005db2:	1a9b      	subgt	r3, r3, r2
 8005db4:	18ed      	addgt	r5, r5, r3
 8005db6:	2600      	movs	r6, #0
 8005db8:	341a      	adds	r4, #26
 8005dba:	42b5      	cmp	r5, r6
 8005dbc:	d11a      	bne.n	8005df4 <_printf_common+0xc8>
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	e008      	b.n	8005dd4 <_printf_common+0xa8>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4652      	mov	r2, sl
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	4638      	mov	r0, r7
 8005dca:	47c0      	blx	r8
 8005dcc:	3001      	adds	r0, #1
 8005dce:	d103      	bne.n	8005dd8 <_printf_common+0xac>
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd8:	3501      	adds	r5, #1
 8005dda:	e7c6      	b.n	8005d6a <_printf_common+0x3e>
 8005ddc:	18e1      	adds	r1, r4, r3
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	2030      	movs	r0, #48	; 0x30
 8005de2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005de6:	4422      	add	r2, r4
 8005de8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005df0:	3302      	adds	r3, #2
 8005df2:	e7c7      	b.n	8005d84 <_printf_common+0x58>
 8005df4:	2301      	movs	r3, #1
 8005df6:	4622      	mov	r2, r4
 8005df8:	4649      	mov	r1, r9
 8005dfa:	4638      	mov	r0, r7
 8005dfc:	47c0      	blx	r8
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d0e6      	beq.n	8005dd0 <_printf_common+0xa4>
 8005e02:	3601      	adds	r6, #1
 8005e04:	e7d9      	b.n	8005dba <_printf_common+0x8e>
	...

08005e08 <_printf_i>:
 8005e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	4691      	mov	r9, r2
 8005e10:	7e27      	ldrb	r7, [r4, #24]
 8005e12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e14:	2f78      	cmp	r7, #120	; 0x78
 8005e16:	4680      	mov	r8, r0
 8005e18:	469a      	mov	sl, r3
 8005e1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e1e:	d807      	bhi.n	8005e30 <_printf_i+0x28>
 8005e20:	2f62      	cmp	r7, #98	; 0x62
 8005e22:	d80a      	bhi.n	8005e3a <_printf_i+0x32>
 8005e24:	2f00      	cmp	r7, #0
 8005e26:	f000 80d8 	beq.w	8005fda <_printf_i+0x1d2>
 8005e2a:	2f58      	cmp	r7, #88	; 0x58
 8005e2c:	f000 80a3 	beq.w	8005f76 <_printf_i+0x16e>
 8005e30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e38:	e03a      	b.n	8005eb0 <_printf_i+0xa8>
 8005e3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e3e:	2b15      	cmp	r3, #21
 8005e40:	d8f6      	bhi.n	8005e30 <_printf_i+0x28>
 8005e42:	a001      	add	r0, pc, #4	; (adr r0, 8005e48 <_printf_i+0x40>)
 8005e44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e48:	08005ea1 	.word	0x08005ea1
 8005e4c:	08005eb5 	.word	0x08005eb5
 8005e50:	08005e31 	.word	0x08005e31
 8005e54:	08005e31 	.word	0x08005e31
 8005e58:	08005e31 	.word	0x08005e31
 8005e5c:	08005e31 	.word	0x08005e31
 8005e60:	08005eb5 	.word	0x08005eb5
 8005e64:	08005e31 	.word	0x08005e31
 8005e68:	08005e31 	.word	0x08005e31
 8005e6c:	08005e31 	.word	0x08005e31
 8005e70:	08005e31 	.word	0x08005e31
 8005e74:	08005fc1 	.word	0x08005fc1
 8005e78:	08005ee5 	.word	0x08005ee5
 8005e7c:	08005fa3 	.word	0x08005fa3
 8005e80:	08005e31 	.word	0x08005e31
 8005e84:	08005e31 	.word	0x08005e31
 8005e88:	08005fe3 	.word	0x08005fe3
 8005e8c:	08005e31 	.word	0x08005e31
 8005e90:	08005ee5 	.word	0x08005ee5
 8005e94:	08005e31 	.word	0x08005e31
 8005e98:	08005e31 	.word	0x08005e31
 8005e9c:	08005fab 	.word	0x08005fab
 8005ea0:	680b      	ldr	r3, [r1, #0]
 8005ea2:	1d1a      	adds	r2, r3, #4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	600a      	str	r2, [r1, #0]
 8005ea8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e0a3      	b.n	8005ffc <_printf_i+0x1f4>
 8005eb4:	6825      	ldr	r5, [r4, #0]
 8005eb6:	6808      	ldr	r0, [r1, #0]
 8005eb8:	062e      	lsls	r6, r5, #24
 8005eba:	f100 0304 	add.w	r3, r0, #4
 8005ebe:	d50a      	bpl.n	8005ed6 <_printf_i+0xce>
 8005ec0:	6805      	ldr	r5, [r0, #0]
 8005ec2:	600b      	str	r3, [r1, #0]
 8005ec4:	2d00      	cmp	r5, #0
 8005ec6:	da03      	bge.n	8005ed0 <_printf_i+0xc8>
 8005ec8:	232d      	movs	r3, #45	; 0x2d
 8005eca:	426d      	negs	r5, r5
 8005ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ed0:	485e      	ldr	r0, [pc, #376]	; (800604c <_printf_i+0x244>)
 8005ed2:	230a      	movs	r3, #10
 8005ed4:	e019      	b.n	8005f0a <_printf_i+0x102>
 8005ed6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005eda:	6805      	ldr	r5, [r0, #0]
 8005edc:	600b      	str	r3, [r1, #0]
 8005ede:	bf18      	it	ne
 8005ee0:	b22d      	sxthne	r5, r5
 8005ee2:	e7ef      	b.n	8005ec4 <_printf_i+0xbc>
 8005ee4:	680b      	ldr	r3, [r1, #0]
 8005ee6:	6825      	ldr	r5, [r4, #0]
 8005ee8:	1d18      	adds	r0, r3, #4
 8005eea:	6008      	str	r0, [r1, #0]
 8005eec:	0628      	lsls	r0, r5, #24
 8005eee:	d501      	bpl.n	8005ef4 <_printf_i+0xec>
 8005ef0:	681d      	ldr	r5, [r3, #0]
 8005ef2:	e002      	b.n	8005efa <_printf_i+0xf2>
 8005ef4:	0669      	lsls	r1, r5, #25
 8005ef6:	d5fb      	bpl.n	8005ef0 <_printf_i+0xe8>
 8005ef8:	881d      	ldrh	r5, [r3, #0]
 8005efa:	4854      	ldr	r0, [pc, #336]	; (800604c <_printf_i+0x244>)
 8005efc:	2f6f      	cmp	r7, #111	; 0x6f
 8005efe:	bf0c      	ite	eq
 8005f00:	2308      	moveq	r3, #8
 8005f02:	230a      	movne	r3, #10
 8005f04:	2100      	movs	r1, #0
 8005f06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f0a:	6866      	ldr	r6, [r4, #4]
 8005f0c:	60a6      	str	r6, [r4, #8]
 8005f0e:	2e00      	cmp	r6, #0
 8005f10:	bfa2      	ittt	ge
 8005f12:	6821      	ldrge	r1, [r4, #0]
 8005f14:	f021 0104 	bicge.w	r1, r1, #4
 8005f18:	6021      	strge	r1, [r4, #0]
 8005f1a:	b90d      	cbnz	r5, 8005f20 <_printf_i+0x118>
 8005f1c:	2e00      	cmp	r6, #0
 8005f1e:	d04d      	beq.n	8005fbc <_printf_i+0x1b4>
 8005f20:	4616      	mov	r6, r2
 8005f22:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f26:	fb03 5711 	mls	r7, r3, r1, r5
 8005f2a:	5dc7      	ldrb	r7, [r0, r7]
 8005f2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f30:	462f      	mov	r7, r5
 8005f32:	42bb      	cmp	r3, r7
 8005f34:	460d      	mov	r5, r1
 8005f36:	d9f4      	bls.n	8005f22 <_printf_i+0x11a>
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d10b      	bne.n	8005f54 <_printf_i+0x14c>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	07df      	lsls	r7, r3, #31
 8005f40:	d508      	bpl.n	8005f54 <_printf_i+0x14c>
 8005f42:	6923      	ldr	r3, [r4, #16]
 8005f44:	6861      	ldr	r1, [r4, #4]
 8005f46:	4299      	cmp	r1, r3
 8005f48:	bfde      	ittt	le
 8005f4a:	2330      	movle	r3, #48	; 0x30
 8005f4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f54:	1b92      	subs	r2, r2, r6
 8005f56:	6122      	str	r2, [r4, #16]
 8005f58:	f8cd a000 	str.w	sl, [sp]
 8005f5c:	464b      	mov	r3, r9
 8005f5e:	aa03      	add	r2, sp, #12
 8005f60:	4621      	mov	r1, r4
 8005f62:	4640      	mov	r0, r8
 8005f64:	f7ff fee2 	bl	8005d2c <_printf_common>
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d14c      	bne.n	8006006 <_printf_i+0x1fe>
 8005f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f70:	b004      	add	sp, #16
 8005f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f76:	4835      	ldr	r0, [pc, #212]	; (800604c <_printf_i+0x244>)
 8005f78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	680e      	ldr	r6, [r1, #0]
 8005f80:	061f      	lsls	r7, r3, #24
 8005f82:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f86:	600e      	str	r6, [r1, #0]
 8005f88:	d514      	bpl.n	8005fb4 <_printf_i+0x1ac>
 8005f8a:	07d9      	lsls	r1, r3, #31
 8005f8c:	bf44      	itt	mi
 8005f8e:	f043 0320 	orrmi.w	r3, r3, #32
 8005f92:	6023      	strmi	r3, [r4, #0]
 8005f94:	b91d      	cbnz	r5, 8005f9e <_printf_i+0x196>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	f023 0320 	bic.w	r3, r3, #32
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	2310      	movs	r3, #16
 8005fa0:	e7b0      	b.n	8005f04 <_printf_i+0xfc>
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	f043 0320 	orr.w	r3, r3, #32
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	2378      	movs	r3, #120	; 0x78
 8005fac:	4828      	ldr	r0, [pc, #160]	; (8006050 <_printf_i+0x248>)
 8005fae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fb2:	e7e3      	b.n	8005f7c <_printf_i+0x174>
 8005fb4:	065e      	lsls	r6, r3, #25
 8005fb6:	bf48      	it	mi
 8005fb8:	b2ad      	uxthmi	r5, r5
 8005fba:	e7e6      	b.n	8005f8a <_printf_i+0x182>
 8005fbc:	4616      	mov	r6, r2
 8005fbe:	e7bb      	b.n	8005f38 <_printf_i+0x130>
 8005fc0:	680b      	ldr	r3, [r1, #0]
 8005fc2:	6826      	ldr	r6, [r4, #0]
 8005fc4:	6960      	ldr	r0, [r4, #20]
 8005fc6:	1d1d      	adds	r5, r3, #4
 8005fc8:	600d      	str	r5, [r1, #0]
 8005fca:	0635      	lsls	r5, r6, #24
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	d501      	bpl.n	8005fd4 <_printf_i+0x1cc>
 8005fd0:	6018      	str	r0, [r3, #0]
 8005fd2:	e002      	b.n	8005fda <_printf_i+0x1d2>
 8005fd4:	0671      	lsls	r1, r6, #25
 8005fd6:	d5fb      	bpl.n	8005fd0 <_printf_i+0x1c8>
 8005fd8:	8018      	strh	r0, [r3, #0]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	6123      	str	r3, [r4, #16]
 8005fde:	4616      	mov	r6, r2
 8005fe0:	e7ba      	b.n	8005f58 <_printf_i+0x150>
 8005fe2:	680b      	ldr	r3, [r1, #0]
 8005fe4:	1d1a      	adds	r2, r3, #4
 8005fe6:	600a      	str	r2, [r1, #0]
 8005fe8:	681e      	ldr	r6, [r3, #0]
 8005fea:	6862      	ldr	r2, [r4, #4]
 8005fec:	2100      	movs	r1, #0
 8005fee:	4630      	mov	r0, r6
 8005ff0:	f7fa f906 	bl	8000200 <memchr>
 8005ff4:	b108      	cbz	r0, 8005ffa <_printf_i+0x1f2>
 8005ff6:	1b80      	subs	r0, r0, r6
 8005ff8:	6060      	str	r0, [r4, #4]
 8005ffa:	6863      	ldr	r3, [r4, #4]
 8005ffc:	6123      	str	r3, [r4, #16]
 8005ffe:	2300      	movs	r3, #0
 8006000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006004:	e7a8      	b.n	8005f58 <_printf_i+0x150>
 8006006:	6923      	ldr	r3, [r4, #16]
 8006008:	4632      	mov	r2, r6
 800600a:	4649      	mov	r1, r9
 800600c:	4640      	mov	r0, r8
 800600e:	47d0      	blx	sl
 8006010:	3001      	adds	r0, #1
 8006012:	d0ab      	beq.n	8005f6c <_printf_i+0x164>
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	079b      	lsls	r3, r3, #30
 8006018:	d413      	bmi.n	8006042 <_printf_i+0x23a>
 800601a:	68e0      	ldr	r0, [r4, #12]
 800601c:	9b03      	ldr	r3, [sp, #12]
 800601e:	4298      	cmp	r0, r3
 8006020:	bfb8      	it	lt
 8006022:	4618      	movlt	r0, r3
 8006024:	e7a4      	b.n	8005f70 <_printf_i+0x168>
 8006026:	2301      	movs	r3, #1
 8006028:	4632      	mov	r2, r6
 800602a:	4649      	mov	r1, r9
 800602c:	4640      	mov	r0, r8
 800602e:	47d0      	blx	sl
 8006030:	3001      	adds	r0, #1
 8006032:	d09b      	beq.n	8005f6c <_printf_i+0x164>
 8006034:	3501      	adds	r5, #1
 8006036:	68e3      	ldr	r3, [r4, #12]
 8006038:	9903      	ldr	r1, [sp, #12]
 800603a:	1a5b      	subs	r3, r3, r1
 800603c:	42ab      	cmp	r3, r5
 800603e:	dcf2      	bgt.n	8006026 <_printf_i+0x21e>
 8006040:	e7eb      	b.n	800601a <_printf_i+0x212>
 8006042:	2500      	movs	r5, #0
 8006044:	f104 0619 	add.w	r6, r4, #25
 8006048:	e7f5      	b.n	8006036 <_printf_i+0x22e>
 800604a:	bf00      	nop
 800604c:	08006329 	.word	0x08006329
 8006050:	0800633a 	.word	0x0800633a

08006054 <memcpy>:
 8006054:	440a      	add	r2, r1
 8006056:	4291      	cmp	r1, r2
 8006058:	f100 33ff 	add.w	r3, r0, #4294967295
 800605c:	d100      	bne.n	8006060 <memcpy+0xc>
 800605e:	4770      	bx	lr
 8006060:	b510      	push	{r4, lr}
 8006062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800606a:	4291      	cmp	r1, r2
 800606c:	d1f9      	bne.n	8006062 <memcpy+0xe>
 800606e:	bd10      	pop	{r4, pc}

08006070 <memmove>:
 8006070:	4288      	cmp	r0, r1
 8006072:	b510      	push	{r4, lr}
 8006074:	eb01 0402 	add.w	r4, r1, r2
 8006078:	d902      	bls.n	8006080 <memmove+0x10>
 800607a:	4284      	cmp	r4, r0
 800607c:	4623      	mov	r3, r4
 800607e:	d807      	bhi.n	8006090 <memmove+0x20>
 8006080:	1e43      	subs	r3, r0, #1
 8006082:	42a1      	cmp	r1, r4
 8006084:	d008      	beq.n	8006098 <memmove+0x28>
 8006086:	f811 2b01 	ldrb.w	r2, [r1], #1
 800608a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800608e:	e7f8      	b.n	8006082 <memmove+0x12>
 8006090:	4402      	add	r2, r0
 8006092:	4601      	mov	r1, r0
 8006094:	428a      	cmp	r2, r1
 8006096:	d100      	bne.n	800609a <memmove+0x2a>
 8006098:	bd10      	pop	{r4, pc}
 800609a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800609e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060a2:	e7f7      	b.n	8006094 <memmove+0x24>

080060a4 <_free_r>:
 80060a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060a6:	2900      	cmp	r1, #0
 80060a8:	d048      	beq.n	800613c <_free_r+0x98>
 80060aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ae:	9001      	str	r0, [sp, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f1a1 0404 	sub.w	r4, r1, #4
 80060b6:	bfb8      	it	lt
 80060b8:	18e4      	addlt	r4, r4, r3
 80060ba:	f000 f8d3 	bl	8006264 <__malloc_lock>
 80060be:	4a20      	ldr	r2, [pc, #128]	; (8006140 <_free_r+0x9c>)
 80060c0:	9801      	ldr	r0, [sp, #4]
 80060c2:	6813      	ldr	r3, [r2, #0]
 80060c4:	4615      	mov	r5, r2
 80060c6:	b933      	cbnz	r3, 80060d6 <_free_r+0x32>
 80060c8:	6063      	str	r3, [r4, #4]
 80060ca:	6014      	str	r4, [r2, #0]
 80060cc:	b003      	add	sp, #12
 80060ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060d2:	f000 b8cd 	b.w	8006270 <__malloc_unlock>
 80060d6:	42a3      	cmp	r3, r4
 80060d8:	d90b      	bls.n	80060f2 <_free_r+0x4e>
 80060da:	6821      	ldr	r1, [r4, #0]
 80060dc:	1862      	adds	r2, r4, r1
 80060de:	4293      	cmp	r3, r2
 80060e0:	bf04      	itt	eq
 80060e2:	681a      	ldreq	r2, [r3, #0]
 80060e4:	685b      	ldreq	r3, [r3, #4]
 80060e6:	6063      	str	r3, [r4, #4]
 80060e8:	bf04      	itt	eq
 80060ea:	1852      	addeq	r2, r2, r1
 80060ec:	6022      	streq	r2, [r4, #0]
 80060ee:	602c      	str	r4, [r5, #0]
 80060f0:	e7ec      	b.n	80060cc <_free_r+0x28>
 80060f2:	461a      	mov	r2, r3
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	b10b      	cbz	r3, 80060fc <_free_r+0x58>
 80060f8:	42a3      	cmp	r3, r4
 80060fa:	d9fa      	bls.n	80060f2 <_free_r+0x4e>
 80060fc:	6811      	ldr	r1, [r2, #0]
 80060fe:	1855      	adds	r5, r2, r1
 8006100:	42a5      	cmp	r5, r4
 8006102:	d10b      	bne.n	800611c <_free_r+0x78>
 8006104:	6824      	ldr	r4, [r4, #0]
 8006106:	4421      	add	r1, r4
 8006108:	1854      	adds	r4, r2, r1
 800610a:	42a3      	cmp	r3, r4
 800610c:	6011      	str	r1, [r2, #0]
 800610e:	d1dd      	bne.n	80060cc <_free_r+0x28>
 8006110:	681c      	ldr	r4, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	6053      	str	r3, [r2, #4]
 8006116:	4421      	add	r1, r4
 8006118:	6011      	str	r1, [r2, #0]
 800611a:	e7d7      	b.n	80060cc <_free_r+0x28>
 800611c:	d902      	bls.n	8006124 <_free_r+0x80>
 800611e:	230c      	movs	r3, #12
 8006120:	6003      	str	r3, [r0, #0]
 8006122:	e7d3      	b.n	80060cc <_free_r+0x28>
 8006124:	6825      	ldr	r5, [r4, #0]
 8006126:	1961      	adds	r1, r4, r5
 8006128:	428b      	cmp	r3, r1
 800612a:	bf04      	itt	eq
 800612c:	6819      	ldreq	r1, [r3, #0]
 800612e:	685b      	ldreq	r3, [r3, #4]
 8006130:	6063      	str	r3, [r4, #4]
 8006132:	bf04      	itt	eq
 8006134:	1949      	addeq	r1, r1, r5
 8006136:	6021      	streq	r1, [r4, #0]
 8006138:	6054      	str	r4, [r2, #4]
 800613a:	e7c7      	b.n	80060cc <_free_r+0x28>
 800613c:	b003      	add	sp, #12
 800613e:	bd30      	pop	{r4, r5, pc}
 8006140:	20000094 	.word	0x20000094

08006144 <_malloc_r>:
 8006144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006146:	1ccd      	adds	r5, r1, #3
 8006148:	f025 0503 	bic.w	r5, r5, #3
 800614c:	3508      	adds	r5, #8
 800614e:	2d0c      	cmp	r5, #12
 8006150:	bf38      	it	cc
 8006152:	250c      	movcc	r5, #12
 8006154:	2d00      	cmp	r5, #0
 8006156:	4606      	mov	r6, r0
 8006158:	db01      	blt.n	800615e <_malloc_r+0x1a>
 800615a:	42a9      	cmp	r1, r5
 800615c:	d903      	bls.n	8006166 <_malloc_r+0x22>
 800615e:	230c      	movs	r3, #12
 8006160:	6033      	str	r3, [r6, #0]
 8006162:	2000      	movs	r0, #0
 8006164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006166:	f000 f87d 	bl	8006264 <__malloc_lock>
 800616a:	4921      	ldr	r1, [pc, #132]	; (80061f0 <_malloc_r+0xac>)
 800616c:	680a      	ldr	r2, [r1, #0]
 800616e:	4614      	mov	r4, r2
 8006170:	b99c      	cbnz	r4, 800619a <_malloc_r+0x56>
 8006172:	4f20      	ldr	r7, [pc, #128]	; (80061f4 <_malloc_r+0xb0>)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	b923      	cbnz	r3, 8006182 <_malloc_r+0x3e>
 8006178:	4621      	mov	r1, r4
 800617a:	4630      	mov	r0, r6
 800617c:	f000 f862 	bl	8006244 <_sbrk_r>
 8006180:	6038      	str	r0, [r7, #0]
 8006182:	4629      	mov	r1, r5
 8006184:	4630      	mov	r0, r6
 8006186:	f000 f85d 	bl	8006244 <_sbrk_r>
 800618a:	1c43      	adds	r3, r0, #1
 800618c:	d123      	bne.n	80061d6 <_malloc_r+0x92>
 800618e:	230c      	movs	r3, #12
 8006190:	6033      	str	r3, [r6, #0]
 8006192:	4630      	mov	r0, r6
 8006194:	f000 f86c 	bl	8006270 <__malloc_unlock>
 8006198:	e7e3      	b.n	8006162 <_malloc_r+0x1e>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	1b5b      	subs	r3, r3, r5
 800619e:	d417      	bmi.n	80061d0 <_malloc_r+0x8c>
 80061a0:	2b0b      	cmp	r3, #11
 80061a2:	d903      	bls.n	80061ac <_malloc_r+0x68>
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	441c      	add	r4, r3
 80061a8:	6025      	str	r5, [r4, #0]
 80061aa:	e004      	b.n	80061b6 <_malloc_r+0x72>
 80061ac:	6863      	ldr	r3, [r4, #4]
 80061ae:	42a2      	cmp	r2, r4
 80061b0:	bf0c      	ite	eq
 80061b2:	600b      	streq	r3, [r1, #0]
 80061b4:	6053      	strne	r3, [r2, #4]
 80061b6:	4630      	mov	r0, r6
 80061b8:	f000 f85a 	bl	8006270 <__malloc_unlock>
 80061bc:	f104 000b 	add.w	r0, r4, #11
 80061c0:	1d23      	adds	r3, r4, #4
 80061c2:	f020 0007 	bic.w	r0, r0, #7
 80061c6:	1ac2      	subs	r2, r0, r3
 80061c8:	d0cc      	beq.n	8006164 <_malloc_r+0x20>
 80061ca:	1a1b      	subs	r3, r3, r0
 80061cc:	50a3      	str	r3, [r4, r2]
 80061ce:	e7c9      	b.n	8006164 <_malloc_r+0x20>
 80061d0:	4622      	mov	r2, r4
 80061d2:	6864      	ldr	r4, [r4, #4]
 80061d4:	e7cc      	b.n	8006170 <_malloc_r+0x2c>
 80061d6:	1cc4      	adds	r4, r0, #3
 80061d8:	f024 0403 	bic.w	r4, r4, #3
 80061dc:	42a0      	cmp	r0, r4
 80061de:	d0e3      	beq.n	80061a8 <_malloc_r+0x64>
 80061e0:	1a21      	subs	r1, r4, r0
 80061e2:	4630      	mov	r0, r6
 80061e4:	f000 f82e 	bl	8006244 <_sbrk_r>
 80061e8:	3001      	adds	r0, #1
 80061ea:	d1dd      	bne.n	80061a8 <_malloc_r+0x64>
 80061ec:	e7cf      	b.n	800618e <_malloc_r+0x4a>
 80061ee:	bf00      	nop
 80061f0:	20000094 	.word	0x20000094
 80061f4:	20000098 	.word	0x20000098

080061f8 <_realloc_r>:
 80061f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fa:	4607      	mov	r7, r0
 80061fc:	4614      	mov	r4, r2
 80061fe:	460e      	mov	r6, r1
 8006200:	b921      	cbnz	r1, 800620c <_realloc_r+0x14>
 8006202:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006206:	4611      	mov	r1, r2
 8006208:	f7ff bf9c 	b.w	8006144 <_malloc_r>
 800620c:	b922      	cbnz	r2, 8006218 <_realloc_r+0x20>
 800620e:	f7ff ff49 	bl	80060a4 <_free_r>
 8006212:	4625      	mov	r5, r4
 8006214:	4628      	mov	r0, r5
 8006216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006218:	f000 f830 	bl	800627c <_malloc_usable_size_r>
 800621c:	42a0      	cmp	r0, r4
 800621e:	d20f      	bcs.n	8006240 <_realloc_r+0x48>
 8006220:	4621      	mov	r1, r4
 8006222:	4638      	mov	r0, r7
 8006224:	f7ff ff8e 	bl	8006144 <_malloc_r>
 8006228:	4605      	mov	r5, r0
 800622a:	2800      	cmp	r0, #0
 800622c:	d0f2      	beq.n	8006214 <_realloc_r+0x1c>
 800622e:	4631      	mov	r1, r6
 8006230:	4622      	mov	r2, r4
 8006232:	f7ff ff0f 	bl	8006054 <memcpy>
 8006236:	4631      	mov	r1, r6
 8006238:	4638      	mov	r0, r7
 800623a:	f7ff ff33 	bl	80060a4 <_free_r>
 800623e:	e7e9      	b.n	8006214 <_realloc_r+0x1c>
 8006240:	4635      	mov	r5, r6
 8006242:	e7e7      	b.n	8006214 <_realloc_r+0x1c>

08006244 <_sbrk_r>:
 8006244:	b538      	push	{r3, r4, r5, lr}
 8006246:	4d06      	ldr	r5, [pc, #24]	; (8006260 <_sbrk_r+0x1c>)
 8006248:	2300      	movs	r3, #0
 800624a:	4604      	mov	r4, r0
 800624c:	4608      	mov	r0, r1
 800624e:	602b      	str	r3, [r5, #0]
 8006250:	f7fb f9b2 	bl	80015b8 <_sbrk>
 8006254:	1c43      	adds	r3, r0, #1
 8006256:	d102      	bne.n	800625e <_sbrk_r+0x1a>
 8006258:	682b      	ldr	r3, [r5, #0]
 800625a:	b103      	cbz	r3, 800625e <_sbrk_r+0x1a>
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	bd38      	pop	{r3, r4, r5, pc}
 8006260:	20000594 	.word	0x20000594

08006264 <__malloc_lock>:
 8006264:	4801      	ldr	r0, [pc, #4]	; (800626c <__malloc_lock+0x8>)
 8006266:	f000 b811 	b.w	800628c <__retarget_lock_acquire_recursive>
 800626a:	bf00      	nop
 800626c:	2000059c 	.word	0x2000059c

08006270 <__malloc_unlock>:
 8006270:	4801      	ldr	r0, [pc, #4]	; (8006278 <__malloc_unlock+0x8>)
 8006272:	f000 b80c 	b.w	800628e <__retarget_lock_release_recursive>
 8006276:	bf00      	nop
 8006278:	2000059c 	.word	0x2000059c

0800627c <_malloc_usable_size_r>:
 800627c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006280:	1f18      	subs	r0, r3, #4
 8006282:	2b00      	cmp	r3, #0
 8006284:	bfbc      	itt	lt
 8006286:	580b      	ldrlt	r3, [r1, r0]
 8006288:	18c0      	addlt	r0, r0, r3
 800628a:	4770      	bx	lr

0800628c <__retarget_lock_acquire_recursive>:
 800628c:	4770      	bx	lr

0800628e <__retarget_lock_release_recursive>:
 800628e:	4770      	bx	lr

08006290 <_init>:
 8006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006292:	bf00      	nop
 8006294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006296:	bc08      	pop	{r3}
 8006298:	469e      	mov	lr, r3
 800629a:	4770      	bx	lr

0800629c <_fini>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	bf00      	nop
 80062a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a2:	bc08      	pop	{r3}
 80062a4:	469e      	mov	lr, r3
 80062a6:	4770      	bx	lr
